
;; Function Help (Help, funcdef_no=133, decl_uid=7606, cgraph_uid=133, symbol_order=189) (executed once)


Analyzing loop at x264.c:146
x264.c:146:21: note: ===== analyze_loop_nest =====
x264.c:146:21: note: === vect_analyze_loop_form ===
x264.c:146:21: note: === get_loop_niters ===
x264.c:146:21: note: not vectorized: number of iterations cannot be computed.
x264.c:146:21: note: bad loop form.

Analyzing loop at x264.c:146
x264.c:146:21: note: ===== analyze_loop_nest =====
x264.c:146:21: note: === vect_analyze_loop_form ===
x264.c:146:21: note: === get_loop_niters ===
x264.c:146:21: note: not vectorized: number of iterations cannot be computed.
x264.c:146:21: note: bad loop form.

Analyzing loop at x264.c:146
x264.c:146:21: note: ===== analyze_loop_nest =====
x264.c:146:21: note: === vect_analyze_loop_form ===
x264.c:146:21: note: === get_loop_niters ===
x264.c:146:21: note: not vectorized: number of iterations cannot be computed.
x264.c:146:21: note: bad loop form.

Analyzing loop at x264.c:146
x264.c:146:21: note: ===== analyze_loop_nest =====
x264.c:146:21: note: === vect_analyze_loop_form ===
x264.c:146:21: note: === get_loop_niters ===
x264.c:146:21: note: not vectorized: number of iterations cannot be computed.
x264.c:146:21: note: bad loop form.

Analyzing loop at x264.c:146
x264.c:146:21: note: ===== analyze_loop_nest =====
x264.c:146:21: note: === vect_analyze_loop_form ===
x264.c:146:21: note: === get_loop_niters ===
x264.c:146:21: note: not vectorized: number of iterations cannot be computed.
x264.c:146:21: note: bad loop form.

Analyzing loop at x264.c:146
x264.c:146:21: note: ===== analyze_loop_nest =====
x264.c:146:21: note: === vect_analyze_loop_form ===
x264.c:146:21: note: === get_loop_niters ===
x264.c:146:21: note: not vectorized: number of iterations cannot be computed.
x264.c:146:21: note: bad loop form.

Analyzing loop at x264.c:146
x264.c:146:21: note: ===== analyze_loop_nest =====
x264.c:146:21: note: === vect_analyze_loop_form ===
x264.c:146:21: note: === get_loop_niters ===
x264.c:146:21: note: not vectorized: number of iterations cannot be computed.
x264.c:146:21: note: bad loop form.

Analyzing loop at x264.c:146
x264.c:146:21: note: ===== analyze_loop_nest =====
x264.c:146:21: note: === vect_analyze_loop_form ===
x264.c:146:21: note: === get_loop_niters ===
x264.c:146:21: note: not vectorized: number of iterations cannot be computed.
x264.c:146:21: note: bad loop form.
x264.c:153:13: note: vectorized 0 loops in function.
Help (struct x264_param_t * defaults, int b_longhelp)
{
  int i;
  int i;
  int i;
  int i;
  int i;
  int i;
  int i;
  int i;
  int _55;
  int _57;
  int _58;
  int _60;
  int _61;
  int _66;
  float _68;
  double _69;
  int _70;
  int _71;
  int _72;
  int _79;
  int _80;
  float _86;
  double _87;
  float _88;
  double _89;
  int _90;
  _Bool _91;
  int _92;
  int _93;
  _Bool _94;
  int _103;
  int _104;
  int _105;
  const char * _106;
  int _107;
  const char * const * _108;
  int _109;
  long unsigned int _110;
  int _111;
  long unsigned int _112;
  int _113;
  int _115;
  int _116;
  int _117;
  _Bool _119;
  long unsigned int _120;
  long unsigned int _121;
  const char * const * _122;
  const char * iftmp.15_123;
  const char * iftmp.15_124;
  long unsigned int _127;
  long unsigned int _128;
  const char * const * _129;
  const char * _130;
  _Bool _131;
  _Bool _132;
  _Bool _133;
  long unsigned int _134;
  long unsigned int _135;
  const char * const * _136;
  const char * iftmp.15_137;
  const char * iftmp.15_138;
  int _139;
  long unsigned int _141;
  long unsigned int _142;
  const char * const * _143;
  const char * _144;
  _Bool _145;
  _Bool _146;
  _Bool _147;
  long unsigned int _148;
  long unsigned int _149;
  const char * const * _150;
  const char * iftmp.15_151;
  long unsigned int _155;
  long unsigned int _156;
  const char * const * _157;
  const char * _158;
  _Bool _159;
  _Bool _160;
  _Bool _161;
  long unsigned int _162;
  long unsigned int _163;
  const char * const * _164;
  const char * iftmp.15_165;
  long unsigned int _169;
  long unsigned int _170;
  const char * const * _171;
  const char * _172;
  _Bool _173;
  _Bool _174;
  _Bool _175;
  long unsigned int _176;
  long unsigned int _177;
  const char * const * _178;
  const char * iftmp.15_179;
  long unsigned int _183;
  long unsigned int _184;
  const char * const * _185;
  const char * _186;
  _Bool _187;
  _Bool _188;
  _Bool _189;
  long unsigned int _190;
  long unsigned int _191;
  const char * const * _192;
  const char * iftmp.15_193;
  long unsigned int _197;
  long unsigned int _198;
  const char * const * _199;
  const char * _200;
  _Bool _201;
  _Bool _202;
  _Bool _203;
  long unsigned int _204;
  long unsigned int _205;
  const char * const * _206;
  const char * iftmp.15_207;
  long unsigned int _211;
  long unsigned int _212;
  const char * const * _213;
  const char * _214;
  _Bool _215;
  _Bool _216;
  _Bool _217;
  long unsigned int _218;
  long unsigned int _219;
  const char * const * _220;
  const char * iftmp.15_221;
  const char * iftmp.15_222;
  int _346;
  int _351;
  float _355;
  char * _356;
  double _357;
  double _365;
  float _367;
  int _374;
  int _377;
  int _385;
  int _386;
  int _393;
  int _397;
  int _398;
  int _400;
  int _401;
  int _407;
  float _410;
  double _411;
  float _413;
  double _414;
  float _416;
  double _417;
  float _419;
  double _420;
  float _421;
  double _422;
  float _424;
  double _425;
  float _430;
  double _431;
  double _435;
  double _437;
  float _442;
  int _449;
  int _450;
  int _452;
  int _455;
  int _457;
  float _460;
  float _461;
  double _462;
  int _464;
  float _465;
  double _466;
  double _467;
  float _471;
  int _472;
  char * _474;
  int _477;
  int _478;
  int _479;
  int _482;
  int _483;
  int _485;
  int _490;
  int _494;
  int _498;
  int _504;
  int _548;
  int _553;

  <bb 2>:
  # DEBUG __fmt => "x264 core:%d%s\nSyntax: x264 [options] -o outfile infile [widthxheight]\n\nInfile can be raw YUV 4:2:0 (in which case resolution is required),\n  or YUV4MPEG 4:2:0 (*.y4m),\n  or AVI or Avisynth if compiled with AVIS support (%s).\nOutfile type is selected by filename:\n .264 -> Raw bytestream\n .mkv -> Matroska\n .mp4 -> MP4 if compiled with GPAC support (%s)\n\nOptions:\n\n  -h, --help                  List the more commonly used options\n      --longhelp              List all options\n\n"
  __printf_chk (1, "x264 core:%d%s\nSyntax: x264 [options] -o outfile infile [widthxheight]\n\nInfile can be raw YUV 4:2:0 (in which case resolution is required),\n  or YUV4MPEG 4:2:0 (*.y4m),\n  or AVI or Avisynth if compiled with AVIS support (%s).\nOutfile type is selected by filename:\n .264 -> Raw bytestream\n .mkv -> Matroska\n .mp4 -> MP4 if compiled with GPAC support (%s)\n\nOptions:\n\n  -h, --help                  List the more commonly used options\n      --longhelp              List all options\n\n", 65, " r1047M f773bf0", "no", "no");
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "Frame-type options:\n"
  __builtin_puts (&"Frame-type options:"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  _55 = defaults_54(D)->i_keyint_max;
  # DEBUG __fmt => "  -I, --keyint <integer>      Maximum GOP size [%d]\n"
  __printf_chk (1, "  -I, --keyint <integer>      Maximum GOP size [%d]\n", _55);
  # DEBUG __fmt => NULL
  if (b_longhelp_56(D) != 0)
    goto <bb 3>;
  else
    goto <bb 52>;

  <bb 3>:
  _57 = defaults_54(D)->i_keyint_min;
  # DEBUG __fmt => "  -i, --min-keyint <integer>  Minimum GOP size [%d]\n"
  __printf_chk (1, "  -i, --min-keyint <integer>  Minimum GOP size [%d]\n", _57);
  _58 = defaults_54(D)->i_scenecut_threshold;
  # DEBUG __fmt => "      --scenecut <integer>    How aggressively to insert extra I-frames [%d]\n"
  __printf_chk (1, "      --scenecut <integer>    How aggressively to insert extra I-frames [%d]\n", _58);
  # DEBUG __fmt => "      --pre-scenecut          Faster, less precise scenecut detection.\n                                  Required and implied by multi-threading.\n"
  __builtin_puts (&"      --pre-scenecut          Faster, less precise scenecut detection.\n                                  Required and implied by multi-threading."[0]);
  _374 = defaults_54(D)->i_bframe;
  # DEBUG __fmt => "  -b, --bframes <integer>     Number of B-frames between I and P [%d]\n"
  __printf_chk (1, "  -b, --bframes <integer>     Number of B-frames between I and P [%d]\n", _374);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  _60 = defaults_54(D)->i_bframe_adaptive;
  # DEBUG __fmt => "      --b-adapt               Adaptive B-frame decision method [%d]\n                                  Higher values may lower threading efficiency.\n                                  - 0: Disabled\n                                  - 1: Fast\n                                  - 2: Optimal (slow with high --bframes)\n"
  __printf_chk (1, "      --b-adapt               Adaptive B-frame decision method [%d]\n                                  Higher values may lower threading efficiency.\n                                  - 0: Disabled\n                                  - 1: Fast\n                                  - 2: Optimal (slow with high --bframes)\n", _60);
  _61 = defaults_54(D)->i_bframe_bias;
  # DEBUG __fmt => "      --b-bias <integer>      Influences how often B-frames are used [%d]\n"
  __printf_chk (1, "      --b-bias <integer>      Influences how often B-frames are used [%d]\n", _61);
  # DEBUG __fmt => "      --b-pyramid             Keep some B-frames as references\n"
  __builtin_puts (&"      --b-pyramid             Keep some B-frames as references"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --no-cabac              Disable CABAC\n"
  __builtin_puts (&"      --no-cabac              Disable CABAC"[0]);
  # DEBUG __fmt => NULL
  _483 = defaults_54(D)->i_frame_reference;
  # DEBUG __fmt => "  -r, --ref <integer>         Number of reference frames [%d]\n"
  __printf_chk (1, "  -r, --ref <integer>         Number of reference frames [%d]\n", _483);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --no-deblock            Disable loop filter\n"
  __builtin_puts (&"      --no-deblock            Disable loop filter"[0]);
  _477 = defaults_54(D)->i_deblocking_filter_beta;
  _351 = defaults_54(D)->i_deblocking_filter_alphac0;
  # DEBUG __fmt => "  -f, --deblock <alpha:beta>  Loop filter AlphaC0 and Beta parameters [%d:%d]\n"
  __printf_chk (1, "  -f, --deblock <alpha:beta>  Loop filter AlphaC0 and Beta parameters [%d:%d]\n", _351, _477);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --interlaced            Enable pure-interlaced mode\n"
  __builtin_puts (&"      --interlaced            Enable pure-interlaced mode"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "Ratecontrol:\n"
  __builtin_puts (&"Ratecontrol:"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  _393 = defaults_54(D)->rc.i_qp_constant;
  # DEBUG __fmt => "  -q, --qp <integer>          Set QP (0=lossless) [%d]\n"
  __printf_chk (1, "  -q, --qp <integer>          Set QP (0=lossless) [%d]\n", _393);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "  -B, --bitrate <integer>     Set bitrate (kbit/s)\n"
  __builtin_puts (&"  -B, --bitrate <integer>     Set bitrate (kbit/s)"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --crf <float>           Quality-based VBR (nominal QP)\n"
  __builtin_puts (&"      --crf <float>           Quality-based VBR (nominal QP)"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  _66 = defaults_54(D)->rc.i_vbv_max_bitrate;
  # DEBUG __fmt => "      --vbv-maxrate <integer> Max local bitrate (kbit/s) [%d]\n"
  __printf_chk (1, "      --vbv-maxrate <integer> Max local bitrate (kbit/s) [%d]\n", _66);
  _401 = defaults_54(D)->rc.i_vbv_buffer_size;
  # DEBUG __fmt => "      --vbv-bufsize <integer> Enable CBR and set size of the VBV buffer (kbit) [%d]\n"
  __printf_chk (1, "      --vbv-bufsize <integer> Enable CBR and set size of the VBV buffer (kbit) [%d]\n", _401);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  _68 = defaults_54(D)->rc.f_vbv_buffer_init;
  _69 = (double) _68;
  # DEBUG __fmt => "      --vbv-init <float>      Initial VBV buffer occupancy [%.1f]\n"
  __printf_chk (1, "      --vbv-init <float>      Initial VBV buffer occupancy [%.1f]\n", _69);
  _70 = defaults_54(D)->rc.i_qp_min;
  # DEBUG __fmt => "      --qpmin <integer>       Set min QP [%d]\n"
  __printf_chk (1, "      --qpmin <integer>       Set min QP [%d]\n", _70);
  _71 = defaults_54(D)->rc.i_qp_max;
  # DEBUG __fmt => "      --qpmax <integer>       Set max QP [%d]\n"
  __printf_chk (1, "      --qpmax <integer>       Set max QP [%d]\n", _71);
  _72 = defaults_54(D)->rc.i_qp_step;
  # DEBUG __fmt => "      --qpstep <integer>      Set max QP step [%d]\n"
  __printf_chk (1, "      --qpstep <integer>      Set max QP step [%d]\n", _72);
  _410 = defaults_54(D)->rc.f_rate_tolerance;
  _411 = (double) _410;
  # DEBUG __fmt => "      --ratetol <float>       Allowed variance of average bitrate [%.1f]\n"
  __printf_chk (1, "      --ratetol <float>       Allowed variance of average bitrate [%.1f]\n", _411);
  # DEBUG __fmt => NULL
  _413 = defaults_54(D)->rc.f_ip_factor;
  _414 = (double) _413;
  # DEBUG __fmt => "      --ipratio <float>       QP factor between I and P [%.2f]\n"
  __printf_chk (1, "      --ipratio <float>       QP factor between I and P [%.2f]\n", _414);
  # DEBUG __fmt => NULL
  _416 = defaults_54(D)->rc.f_pb_factor;
  _417 = (double) _416;
  # DEBUG __fmt => "      --pbratio <float>       QP factor between P and B [%.2f]\n"
  __printf_chk (1, "      --pbratio <float>       QP factor between P and B [%.2f]\n", _417);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  _79 = defaults_54(D)->analyse.i_chroma_qp_offset;
  # DEBUG __fmt => "      --chroma-qp-offset <integer>  QP difference between chroma and luma [%d]\n"
  __printf_chk (1, "      --chroma-qp-offset <integer>  QP difference between chroma and luma [%d]\n", _79);
  _80 = defaults_54(D)->rc.i_aq_mode;
  # DEBUG __fmt => "      --aq-mode <integer>     AQ method [%d]\n                                  - 0: Disabled\n                                  - 1: Variance AQ (complexity mask)\n"
  __printf_chk (1, "      --aq-mode <integer>     AQ method [%d]\n                                  - 0: Disabled\n                                  - 1: Variance AQ (complexity mask)\n", _80);
  _471 = defaults_54(D)->rc.f_aq_strength;
  _437 = (double) _471;
  # DEBUG __fmt => "      --aq-strength <float>   Reduces blocking and blurring in flat and\n                              textured areas. [%.1f]\n                                  - 0.5: weak AQ\n                                  - 1.5: strong AQ\n"
  __printf_chk (1, "      --aq-strength <float>   Reduces blocking and blurring in flat and\n                              textured areas. [%.1f]\n                                  - 0.5: weak AQ\n                                  - 1.5: strong AQ\n", _437);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "  -p, --pass <1|2|3>          Enable multipass ratecontrol\n                                  - 1: First pass, creates stats file\n                                  - 2: Last pass, does not overwrite stats file\n                                  - 3: Nth pass, overwrites stats file\n"
  __builtin_puts (&"  -p, --pass <1|2|3>          Enable multipass ratecontrol\n                                  - 1: First pass, creates stats file\n                                  - 2: Last pass, does not overwrite stats file\n                                  - 3: Nth pass, overwrites stats file"[0]);
  # DEBUG __fmt => NULL
  _356 = defaults_54(D)->rc.psz_stat_out;
  # DEBUG __fmt => "      --stats <string>        Filename for 2 pass stats [\"%s\"]\n"
  __printf_chk (1, "      --stats <string>        Filename for 2 pass stats [\"%s\"]\n", _356);
  # DEBUG __fmt => NULL
  _442 = defaults_54(D)->rc.f_qcompress;
  _357 = (double) _442;
  # DEBUG __fmt => "      --qcomp <float>         QP curve compression: 0.0 => CBR, 1.0 => CQP [%.2f]\n"
  __printf_chk (1, "      --qcomp <float>         QP curve compression: 0.0 => CBR, 1.0 => CQP [%.2f]\n", _357);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  _86 = defaults_54(D)->rc.f_complexity_blur;
  _87 = (double) _86;
  # DEBUG __fmt => "      --cplxblur <float>      Reduce fluctuations in QP (before curve compression) [%.1f]\n"
  __printf_chk (1, "      --cplxblur <float>      Reduce fluctuations in QP (before curve compression) [%.1f]\n", _87);
  _88 = defaults_54(D)->rc.f_qblur;
  _89 = (double) _88;
  # DEBUG __fmt => "      --qblur <float>         Reduce fluctuations in QP (after curve compression) [%.1f]\n"
  __printf_chk (1, "      --qblur <float>         Reduce fluctuations in QP (after curve compression) [%.1f]\n", _89);
  # DEBUG __fmt => "      --zones <zone0>/<zone1>/...  Tweak the bitrate of some regions of the video\n"
  __builtin_puts (&"      --zones <zone0>/<zone1>/...  Tweak the bitrate of some regions of the video"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "                              Each zone is of the form\n                                  <start frame>,<end frame>,<option>\n                                  where <option> is either\n                                      q=<integer> (force QP)\n                                  or  b=<float> (bitrate multiplier)\n"
  __builtin_puts (&"                              Each zone is of the form\n                                  <start frame>,<end frame>,<option>\n                                  where <option> is either\n                                      q=<integer> (force QP)\n                                  or  b=<float> (bitrate multiplier)"[0]);
  # DEBUG __fmt => "      --qpfile <string>       Force frametypes and QPs\n"
  __builtin_puts (&"      --qpfile <string>       Force frametypes and QPs"[0]);

  <bb 4>:
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "Analysis:\n"
  __builtin_puts (&"Analysis:"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "  -A, --partitions <string>   Partitions to consider [\"p8x8,b8x8,i8x8,i4x4\"]\n                                  - p8x8, p4x4, b8x8, i8x8, i4x4\n                                  - none, all\n                                  (p4x4 requires p8x8. i8x8 requires --8x8dct.)\n"
  __builtin_puts (&"  -A, --partitions <string>   Partitions to consider [\"p8x8,b8x8,i8x8,i4x4\"]\n                                  - p8x8, p4x4, b8x8, i8x8, i4x4\n                                  - none, all\n                                  (p4x4 requires p8x8. i8x8 requires --8x8dct.)"[0]);
  # DEBUG __fmt => NULL
  _90 = defaults_54(D)->analyse.i_direct_mv_pred;
  # DEBUG table => &x264_direct_pred_names
  # DEBUG index => _90
  # DEBUG i => 0

  <bb 5>:
  # i_523 = PHI <0(4), i_114(6)>
  # DEBUG i => i_523
  i_114 = i_523 + 1;
  # DEBUG i => i_114
  # DEBUG i => i_114
  _112 = (long unsigned int) i_114;
  _110 = _112 * 8;
  _108 = &x264_direct_pred_names + _110;
  _106 = *_108;
  if (_106 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  goto <bb 5>;

  <bb 7>:
  # i_555 = PHI <i_114(5)>
  _94 = _90 >= 0;
  _91 = _90 < i_555;
  _119 = _91 & _94;
  if (_119 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _120 = (long unsigned int) _90;
  _121 = _120 * 8;
  _122 = &x264_direct_pred_names + _121;
  iftmp.15_123 = *_122;

  <bb 9>:
  # iftmp.15_124 = PHI <"???"(7), iftmp.15_123(8)>
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --direct <string>       Direct MV prediction mode [\"%s\"]\n                                  - none, spatial, temporal, auto\n"
  __printf_chk (1, "      --direct <string>       Direct MV prediction mode [\"%s\"]\n                                  - none, spatial, temporal, auto\n", iftmp.15_124);
  # DEBUG __fmt => NULL
  if (b_longhelp_56(D) != 0)
    goto <bb 10>;
  else
    goto <bb 53>;

  <bb 10>:
  _92 = defaults_54(D)->analyse.i_direct_8x8_inference;
  # DEBUG __fmt => "      --direct-8x8 <-1|0|1>   Direct prediction size [%d]\n                                  -  0: 4x4\n                                  -  1: 8x8\n                                  - -1: smallest possible according to level\n"
  __printf_chk (1, "      --direct-8x8 <-1|0|1>   Direct prediction size [%d]\n                                  -  0: 4x4\n                                  -  1: 8x8\n                                  - -1: smallest possible according to level\n", _92);
  # DEBUG __fmt => "  -w, --weightb               Weighted prediction for B-frames\n"
  __builtin_puts (&"  -w, --weightb               Weighted prediction for B-frames"[0]);
  # DEBUG __fmt => NULL
  _93 = defaults_54(D)->analyse.i_me_method;
  # DEBUG table => &x264_motion_est_names
  # DEBUG index => _93
  # DEBUG i => 0

  <bb 11>:
  # _553 = PHI <_93(10), _139(53)>
  # DEBUG __fmt => NULL
  # DEBUG table => &x264_motion_est_names
  # DEBUG index => _553
  # DEBUG i => 0

  <bb 12>:
  # i_521 = PHI <0(11), i_126(13)>
  # DEBUG i => i_521
  i_126 = i_521 + 1;
  # DEBUG i => i_126
  # DEBUG i => i_126
  _127 = (long unsigned int) i_126;
  _128 = _127 * 8;
  _129 = &x264_motion_est_names + _128;
  _130 = *_129;
  if (_130 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  goto <bb 12>;

  <bb 14>:
  # i_554 = PHI <i_126(12)>
  _131 = _553 >= 0;
  _132 = i_554 > _553;
  _133 = _131 & _132;
  if (_133 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _134 = (long unsigned int) _553;
  _135 = _134 * 8;
  _136 = &x264_motion_est_names + _135;
  iftmp.15_137 = *_136;

  <bb 16>:
  # iftmp.15_138 = PHI <"???"(14), iftmp.15_137(15)>
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --me <string>           Integer pixel motion estimation method [\"%s\"]\n"
  __printf_chk (1, "      --me <string>           Integer pixel motion estimation method [\"%s\"]\n", iftmp.15_138);
  # DEBUG __fmt => NULL
  if (b_longhelp_56(D) != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  # DEBUG __fmt => "                                  - dia: diamond search, radius 1 (fast)\n                                  - hex: hexagonal search, radius 2\n                                  - umh: uneven multi-hexagon search\n                                  - esa: exhaustive search\n                                  - tesa: hadamard exhaustive search (slow)\n"
  __builtin_puts (&"                                  - dia: diamond search, radius 1 (fast)\n                                  - hex: hexagonal search, radius 2\n                                  - umh: uneven multi-hexagon search\n                                  - esa: exhaustive search\n                                  - tesa: hadamard exhaustive search (slow)"[0]);
  _450 = defaults_54(D)->analyse.i_me_range;
  # DEBUG __fmt => "      --merange <integer>     Maximum motion vector search range [%d]\n"
  __printf_chk (1, "      --merange <integer>     Maximum motion vector search range [%d]\n", _450);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --mvrange <integer>     Maximum motion vector length [-1 (auto)]\n"
  __builtin_puts (&"      --mvrange <integer>     Maximum motion vector length [-1 (auto)]"[0]);
  # DEBUG __fmt => "      --mvrange-thread <int>  Minimum buffer between threads [-1 (auto)]\n"
  __builtin_puts (&"      --mvrange-thread <int>  Minimum buffer between threads [-1 (auto)]"[0]);
  _455 = defaults_54(D)->analyse.i_subpel_refine;
  # DEBUG __fmt => "  -m, --subme <integer>       Subpixel motion estimation and mode decision [%d]\n"
  __printf_chk (1, "  -m, --subme <integer>       Subpixel motion estimation and mode decision [%d]\n", _455);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "                                  - 0: fullpel only (not recommended)\n                                  - 1: SAD mode decision, one qpel iteration\n                                  - 2: SATD mode decision\n                                  - 3-5: Progressively more qpel\n                                  - 6: RD mode decision for I/P-frames\n                                  - 7: RD mode decision for all frames\n                                  - 8: RD refinement for I/P-frames\n                                  - 9: RD refinement for all frames\n"
  __builtin_puts (&"                                  - 0: fullpel only (not recommended)\n                                  - 1: SAD mode decision, one qpel iteration\n                                  - 2: SATD mode decision\n                                  - 3-5: Progressively more qpel\n                                  - 6: RD mode decision for I/P-frames\n                                  - 7: RD mode decision for all frames\n                                  - 8: RD refinement for I/P-frames\n                                  - 9: RD refinement for all frames"[0]);
  _465 = defaults_54(D)->analyse.f_psy_trellis;
  _466 = (double) _465;
  _367 = defaults_54(D)->analyse.f_psy_rd;
  _467 = (double) _367;
  # DEBUG __fmt => "      --psy-rd                Strength of psychovisual optimization [\"%.1f:%.1f\"]\n                                  #1: RD (requires subme>=6)\n                                  #2: Trellis (requires trellis, experimental)\n"
  __printf_chk (1, "      --psy-rd                Strength of psychovisual optimization [\"%.1f:%.1f\"]\n                                  #1: RD (requires subme>=6)\n                                  #2: Trellis (requires trellis, experimental)\n", _467, _466);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --mixed-refs            Decide references on a per partition basis\n"
  __builtin_puts (&"      --mixed-refs            Decide references on a per partition basis"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --no-chroma-me          Ignore chroma in motion estimation\n"
  __builtin_puts (&"      --no-chroma-me          Ignore chroma in motion estimation"[0]);
  # DEBUG __fmt => "  -8, --8x8dct                Adaptive spatial transform size\n"
  __builtin_puts (&"  -8, --8x8dct                Adaptive spatial transform size"[0]);
  # DEBUG __fmt => NULL
  _494 = defaults_54(D)->analyse.i_trellis;
  # DEBUG __fmt => "  -t, --trellis <integer>     Trellis RD quantization. Requires CABAC. [%d]\n                                  - 0: disabled\n                                  - 1: enabled only on the final encode of a MB\n                                  - 2: enabled on all mode decisions\n"
  __printf_chk (1, "  -t, --trellis <integer>     Trellis RD quantization. Requires CABAC. [%d]\n                                  - 0: disabled\n                                  - 1: enabled only on the final encode of a MB\n                                  - 2: enabled on all mode decisions\n", _494);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --no-fast-pskip         Disables early SKIP detection on P-frames\n"
  __builtin_puts (&"      --no-fast-pskip         Disables early SKIP detection on P-frames"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --no-dct-decimate       Disables coefficient thresholding on P-frames\n"
  __builtin_puts (&"      --no-dct-decimate       Disables coefficient thresholding on P-frames"[0]);
  # DEBUG __fmt => NULL
  _498 = defaults_54(D)->analyse.i_noise_reduction;
  # DEBUG __fmt => "      --nr <integer>          Noise reduction [%d]\n"
  __printf_chk (1, "      --nr <integer>          Noise reduction [%d]\n", _498);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  _103 = defaults_54(D)->analyse.i_luma_deadzone[0];
  # DEBUG __fmt => "      --deadzone-inter <int>  Set the size of the inter luma quantization deadzone [%d]\n"
  __printf_chk (1, "      --deadzone-inter <int>  Set the size of the inter luma quantization deadzone [%d]\n", _103);
  _104 = defaults_54(D)->analyse.i_luma_deadzone[1];
  # DEBUG __fmt => "      --deadzone-intra <int>  Set the size of the intra luma quantization deadzone [%d]\n"
  __printf_chk (1, "      --deadzone-intra <int>  Set the size of the intra luma quantization deadzone [%d]\n", _104);
  # DEBUG __fmt => "                                  Deadzones should be in the range 0 - 32.\n"
  __builtin_puts (&"                                  Deadzones should be in the range 0 - 32."[0]);
  # DEBUG __fmt => "      --cqm <string>          Preset quant matrices [\"flat\"]\n                                  - jvt, flat\n"
  __builtin_puts (&"      --cqm <string>          Preset quant matrices [\"flat\"]\n                                  - jvt, flat"[0]);
  # DEBUG __fmt => "      --cqmfile <string>      Read custom quant matrices from a JM-compatible file\n"
  __builtin_puts (&"      --cqmfile <string>      Read custom quant matrices from a JM-compatible file"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "                                  Overrides any other --cqm* options.\n"
  __builtin_puts (&"                                  Overrides any other --cqm* options."[0]);
  # DEBUG __fmt => "      --cqm4 <list>           Set all 4x4 quant matrices\n                                  Takes a comma-separated list of 16 integers.\n"
  __builtin_puts (&"      --cqm4 <list>           Set all 4x4 quant matrices\n                                  Takes a comma-separated list of 16 integers."[0]);
  # DEBUG __fmt => "      --cqm8 <list>           Set all 8x8 quant matrices\n                                  Takes a comma-separated list of 64 integers.\n"
  __builtin_puts (&"      --cqm8 <list>           Set all 8x8 quant matrices\n                                  Takes a comma-separated list of 64 integers."[0]);
  # DEBUG __fmt => "      --cqm4i, --cqm4p, --cqm8i, --cqm8p\n                              Set both luma and chroma quant matrices\n"
  __builtin_puts (&"      --cqm4i, --cqm4p, --cqm8i, --cqm8p\n                              Set both luma and chroma quant matrices"[0]);
  # DEBUG __fmt => "      --cqm4iy, --cqm4ic, --cqm4py, --cqm4pc\n                              Set individual quant matrices\n"
  __builtin_puts (&"      --cqm4iy, --cqm4ic, --cqm4py, --cqm4pc\n                              Set individual quant matrices"[0]);
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => "Video Usability Info (Annex E):\n"
  __builtin_puts (&"Video Usability Info (Annex E):"[0]);
  # DEBUG __fmt => "The VUI settings are not used by the encoder but are merely suggestions to\n"
  __builtin_puts (&"The VUI settings are not used by the encoder but are merely suggestions to"[0]);
  # DEBUG __fmt => "the playback equipment. See doc/vui.txt for details. Use at your own risk.\n"
  __builtin_puts (&"the playback equipment. See doc/vui.txt for details. Use at your own risk."[0]);
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  _105 = defaults_54(D)->vui.i_overscan;
  # DEBUG table => &x264_overscan_names
  # DEBUG index => _105
  # DEBUG i => 0
  # DEBUG i => 0
  goto <bb 20>;

  <bb 18>:
  # DEBUG __fmt => "                                  - dia, hex, umh\n"
  __builtin_puts (&"                                  - dia, hex, umh"[0]);
  _452 = defaults_54(D)->analyse.i_me_range;
  # DEBUG __fmt => "      --merange <integer>     Maximum motion vector search range [%d]\n"
  __printf_chk (1, "      --merange <integer>     Maximum motion vector search range [%d]\n", _452);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  _457 = defaults_54(D)->analyse.i_subpel_refine;
  # DEBUG __fmt => "  -m, --subme <integer>       Subpixel motion estimation and mode decision [%d]\n"
  __printf_chk (1, "  -m, --subme <integer>       Subpixel motion estimation and mode decision [%d]\n", _457);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "                                  decision quality: 1=fast, 9=best.\n"
  __builtin_puts (&"                                  decision quality: 1=fast, 9=best."[0]);
  _460 = defaults_54(D)->analyse.f_psy_trellis;
  _365 = (double) _460;
  _461 = defaults_54(D)->analyse.f_psy_rd;
  _462 = (double) _461;
  # DEBUG __fmt => "      --psy-rd                Strength of psychovisual optimization [\"%.1f:%.1f\"]\n                                  #1: RD (requires subme>=6)\n                                  #2: Trellis (requires trellis, experimental)\n"
  __printf_chk (1, "      --psy-rd                Strength of psychovisual optimization [\"%.1f:%.1f\"]\n                                  #1: RD (requires subme>=6)\n                                  #2: Trellis (requires trellis, experimental)\n", _462, _365);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --mixed-refs            Decide references on a per partition basis\n"
  __builtin_puts (&"      --mixed-refs            Decide references on a per partition basis"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "  -8, --8x8dct                Adaptive spatial transform size\n"
  __builtin_puts (&"  -8, --8x8dct                Adaptive spatial transform size"[0]);
  # DEBUG __fmt => NULL
  _346 = defaults_54(D)->analyse.i_trellis;
  # DEBUG __fmt => "  -t, --trellis <integer>     Trellis RD quantization. Requires CABAC. [%d]\n                                  - 0: disabled\n                                  - 1: enabled only on the final encode of a MB\n                                  - 2: enabled on all mode decisions\n"
  __printf_chk (1, "  -t, --trellis <integer>     Trellis RD quantization. Requires CABAC. [%d]\n                                  - 0: disabled\n                                  - 1: enabled only on the final encode of a MB\n                                  - 2: enabled on all mode decisions\n", _346);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --no-fast-pskip         Disables early SKIP detection on P-frames\n"
  __builtin_puts (&"      --no-fast-pskip         Disables early SKIP detection on P-frames"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --no-dct-decimate       Disables coefficient thresholding on P-frames\n"
  __builtin_puts (&"      --no-dct-decimate       Disables coefficient thresholding on P-frames"[0]);
  # DEBUG __fmt => NULL
  _490 = defaults_54(D)->analyse.i_noise_reduction;
  # DEBUG __fmt => "      --nr <integer>          Noise reduction [%d]\n"
  __printf_chk (1, "      --nr <integer>          Noise reduction [%d]\n", _490);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --cqmfile <string>      Read custom quant matrices from a JM-compatible file\n"
  __builtin_puts (&"      --cqmfile <string>      Read custom quant matrices from a JM-compatible file"[0]);
  # DEBUG __fmt => NULL
  goto <bb 49>;

  <bb 19>:

  <bb 20>:
  # i_519 = PHI <0(17), i_140(19)>
  # DEBUG i => i_519
  i_140 = i_519 + 1;
  # DEBUG i => i_140
  # DEBUG i => i_140
  _141 = (long unsigned int) i_140;
  _142 = _141 * 8;
  _143 = &x264_overscan_names + _142;
  _144 = *_143;
  if (_144 != 0B)
    goto <bb 19>;
  else
    goto <bb 21>;

  <bb 21>:
  # i_552 = PHI <i_140(20)>
  _145 = _105 >= 0;
  _146 = _105 < i_552;
  _147 = _145 & _146;
  if (_147 != 0)
    goto <bb 22>;
  else
    goto <bb 54>;

  <bb 22>:
  _148 = (long unsigned int) _105;
  _149 = _148 * 8;
  _150 = &x264_overscan_names + _149;
  iftmp.15_151 = *_150;
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --overscan <string>     Specify crop overscan setting [\"%s\"]\n                                  - undef, show, crop\n"
  __printf_chk (1, "      --overscan <string>     Specify crop overscan setting [\"%s\"]\n                                  - undef, show, crop\n", iftmp.15_151);
  _107 = defaults_54(D)->vui.i_vidformat;
  # DEBUG table => &x264_vidformat_names
  # DEBUG index => _107
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 23>:
  # _548 = PHI <_107(22), _504(54)>
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --overscan <string>     Specify crop overscan setting [\"%s\"]\n                                  - undef, show, crop\n"
  # DEBUG table => &x264_vidformat_names
  # DEBUG index => _548
  # DEBUG i => 0

  <bb 24>:
  # i_517 = PHI <0(23), i_154(25)>
  # DEBUG i => i_517
  i_154 = i_517 + 1;
  # DEBUG i => i_154
  # DEBUG i => i_154
  _155 = (long unsigned int) i_154;
  _156 = _155 * 8;
  _157 = &x264_vidformat_names + _156;
  _158 = *_157;
  if (_158 != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  goto <bb 24>;

  <bb 26>:
  # i_551 = PHI <i_154(24)>
  _159 = _548 >= 0;
  _160 = i_551 > _548;
  _161 = _159 & _160;
  if (_161 != 0)
    goto <bb 27>;
  else
    goto <bb 55>;

  <bb 27>:
  _162 = (long unsigned int) _548;
  _163 = _162 * 8;
  _164 = &x264_vidformat_names + _163;
  iftmp.15_165 = *_164;
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --videoformat <string>  Specify video format [\"%s\"]\n                                  - component, pal, ntsc, secam, mac, undef\n"
  __printf_chk (1, "      --videoformat <string>  Specify video format [\"%s\"]\n                                  - component, pal, ntsc, secam, mac, undef\n", iftmp.15_165);
  _109 = defaults_54(D)->vui.b_fullrange;
  # DEBUG table => &x264_fullrange_names
  # DEBUG index => _109
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 28>:
  # _400 = PHI <_109(27), _464(55)>
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --videoformat <string>  Specify video format [\"%s\"]\n                                  - component, pal, ntsc, secam, mac, undef\n"
  # DEBUG table => &x264_fullrange_names
  # DEBUG index => _400
  # DEBUG i => 0

  <bb 29>:
  # i_515 = PHI <0(28), i_168(30)>
  # DEBUG i => i_515
  i_168 = i_515 + 1;
  # DEBUG i => i_168
  # DEBUG i => i_168
  _169 = (long unsigned int) i_168;
  _170 = _169 * 8;
  _171 = &x264_fullrange_names + _170;
  _172 = *_171;
  if (_172 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  goto <bb 29>;

  <bb 31>:
  # i_550 = PHI <i_168(29)>
  _173 = _400 >= 0;
  _174 = i_550 > _400;
  _175 = _173 & _174;
  if (_175 != 0)
    goto <bb 32>;
  else
    goto <bb 56>;

  <bb 32>:
  _176 = (long unsigned int) _400;
  _177 = _176 * 8;
  _178 = &x264_fullrange_names + _177;
  iftmp.15_179 = *_178;
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --fullrange <string>    Specify full range samples setting [\"%s\"]\n                                  - off, on\n"
  __printf_chk (1, "      --fullrange <string>    Specify full range samples setting [\"%s\"]\n                                  - off, on\n", iftmp.15_179);
  _111 = defaults_54(D)->vui.i_colorprim;
  # DEBUG table => &x264_colorprim_names
  # DEBUG index => _111
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 33>:
  # _397 = PHI <_111(32), _449(56)>
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --fullrange <string>    Specify full range samples setting [\"%s\"]\n                                  - off, on\n"
  # DEBUG table => &x264_colorprim_names
  # DEBUG index => _397
  # DEBUG i => 0

  <bb 34>:
  # i_513 = PHI <0(33), i_182(35)>
  # DEBUG i => i_513
  i_182 = i_513 + 1;
  # DEBUG i => i_182
  # DEBUG i => i_182
  _183 = (long unsigned int) i_182;
  _184 = _183 * 8;
  _185 = &x264_colorprim_names + _184;
  _186 = *_185;
  if (_186 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 35>:
  goto <bb 34>;

  <bb 36>:
  # i_549 = PHI <i_182(34)>
  _187 = _397 >= 0;
  _188 = i_549 > _397;
  _189 = _187 & _188;
  if (_189 != 0)
    goto <bb 37>;
  else
    goto <bb 57>;

  <bb 37>:
  _190 = (long unsigned int) _397;
  _191 = _190 * 8;
  _192 = &x264_colorprim_names + _191;
  iftmp.15_193 = *_192;
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --colorprim <string>    Specify color primaries [\"%s\"]\n                                  - undef, bt709, bt470m, bt470bg\n                                    smpte170m, smpte240m, film\n"
  __printf_chk (1, "      --colorprim <string>    Specify color primaries [\"%s\"]\n                                  - undef, bt709, bt470m, bt470bg\n                                    smpte170m, smpte240m, film\n", iftmp.15_193);
  _113 = defaults_54(D)->vui.i_transfer;
  # DEBUG table => &x264_transfer_names
  # DEBUG index => _113
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 38>:
  # _478 = PHI <_113(37), _472(57)>
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --colorprim <string>    Specify color primaries [\"%s\"]\n                                  - undef, bt709, bt470m, bt470bg\n                                    smpte170m, smpte240m, film\n"
  # DEBUG table => &x264_transfer_names
  # DEBUG index => _478
  # DEBUG i => 0

  <bb 39>:
  # i_510 = PHI <0(38), i_196(40)>
  # DEBUG i => i_510
  i_196 = i_510 + 1;
  # DEBUG i => i_196
  # DEBUG i => i_196
  _197 = (long unsigned int) i_196;
  _198 = _197 * 8;
  _199 = &x264_transfer_names + _198;
  _200 = *_199;
  if (_200 != 0B)
    goto <bb 40>;
  else
    goto <bb 41>;

  <bb 40>:
  goto <bb 39>;

  <bb 41>:
  # i_547 = PHI <i_196(39)>
  _201 = _478 >= 0;
  _202 = i_547 > _478;
  _203 = _201 & _202;
  if (_203 != 0)
    goto <bb 42>;
  else
    goto <bb 58>;

  <bb 42>:
  _204 = (long unsigned int) _478;
  _205 = _204 * 8;
  _206 = &x264_transfer_names + _205;
  iftmp.15_207 = *_206;
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --transfer <string>     Specify transfer characteristics [\"%s\"]\n                                  - undef, bt709, bt470m, bt470bg, linear,\n                                    log100, log316, smpte170m, smpte240m\n"
  __printf_chk (1, "      --transfer <string>     Specify transfer characteristics [\"%s\"]\n                                  - undef, bt709, bt470m, bt470bg, linear,\n                                    log100, log316, smpte170m, smpte240m\n", iftmp.15_207);
  _115 = defaults_54(D)->vui.i_colmatrix;
  # DEBUG table => &x264_colmatrix_names
  # DEBUG index => _115
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 43>:
  # _385 = PHI <_115(42), _407(58)>
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --transfer <string>     Specify transfer characteristics [\"%s\"]\n                                  - undef, bt709, bt470m, bt470bg, linear,\n                                    log100, log316, smpte170m, smpte240m\n"
  # DEBUG table => &x264_colmatrix_names
  # DEBUG index => _385
  # DEBUG i => 0

  <bb 44>:
  # i_507 = PHI <0(43), i_210(45)>
  # DEBUG i => i_507
  i_210 = i_507 + 1;
  # DEBUG i => i_210
  # DEBUG i => i_210
  _211 = (long unsigned int) i_210;
  _212 = _211 * 8;
  _213 = &x264_colmatrix_names + _212;
  _214 = *_213;
  if (_214 != 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 45>:
  goto <bb 44>;

  <bb 46>:
  # i_546 = PHI <i_210(44)>
  _215 = _385 >= 0;
  _216 = i_546 > _385;
  _217 = _215 & _216;
  if (_217 != 0)
    goto <bb 47>;
  else
    goto <bb 48>;

  <bb 47>:
  _218 = (long unsigned int) _385;
  _219 = _218 * 8;
  _220 = &x264_colmatrix_names + _219;
  iftmp.15_221 = *_220;

  <bb 48>:
  # iftmp.15_222 = PHI <"???"(46), iftmp.15_221(47)>
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --colormatrix <string>  Specify color matrix setting [\"%s\"]\n                                  - undef, bt709, fcc, bt470bg\n                                    smpte170m, smpte240m, GBR, YCgCo\n"
  __printf_chk (1, "      --colormatrix <string>  Specify color matrix setting [\"%s\"]\n                                  - undef, bt709, fcc, bt470bg\n                                    smpte170m, smpte240m, GBR, YCgCo\n", iftmp.15_222);
  _116 = defaults_54(D)->vui.i_chroma_loc;
  # DEBUG __fmt => "      --chromaloc <integer>   Specify chroma sample location (0 to 5) [%d]\n"
  __printf_chk (1, "      --chromaloc <integer>   Specify chroma sample location (0 to 5) [%d]\n", _116);

  <bb 49>:
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "Input/Output:\n"
  __builtin_puts (&"Input/Output:"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "  -o, --output                Specify output file\n"
  __builtin_puts (&"  -o, --output                Specify output file"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --sar width:height      Specify Sample Aspect Ratio\n"
  __builtin_puts (&"      --sar width:height      Specify Sample Aspect Ratio"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --fps <float|rational>  Specify framerate\n"
  __builtin_puts (&"      --fps <float|rational>  Specify framerate"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --seek <integer>        First frame to encode\n"
  __builtin_puts (&"      --seek <integer>        First frame to encode"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --frames <integer>      Maximum number of frames to encode\n"
  __builtin_puts (&"      --frames <integer>      Maximum number of frames to encode"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --level <string>        Specify level (as defined by Annex A)\n"
  __builtin_puts (&"      --level <string>        Specify level (as defined by Annex A)"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "  -v, --verbose               Print stats for each frame\n"
  __builtin_puts (&"  -v, --verbose               Print stats for each frame"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --progress              Show a progress indicator while encoding\n"
  __builtin_puts (&"      --progress              Show a progress indicator while encoding"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --quiet                 Quiet Mode\n"
  __builtin_puts (&"      --quiet                 Quiet Mode"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --no-psnr               Disable PSNR computation\n"
  __builtin_puts (&"      --no-psnr               Disable PSNR computation"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --no-ssim               Disable SSIM computation\n"
  __builtin_puts (&"      --no-ssim               Disable SSIM computation"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --threads <integer>     Parallel encoding\n"
  __builtin_puts (&"      --threads <integer>     Parallel encoding"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --thread-input          Run Avisynth in its own thread\n"
  __builtin_puts (&"      --thread-input          Run Avisynth in its own thread"[0]);
  # DEBUG __fmt => NULL
  if (b_longhelp_56(D) != 0)
    goto <bb 50>;
  else
    goto <bb 51>;

  <bb 50>:
  # DEBUG __fmt => "      --non-deterministic     Slightly improve quality of SMP, at the cost of repeatability\n"
  __builtin_puts (&"      --non-deterministic     Slightly improve quality of SMP, at the cost of repeatability"[0]);
  # DEBUG __fmt => "      --asm <integer>         Override CPU detection\n"
  __builtin_puts (&"      --asm <integer>         Override CPU detection"[0]);
  # DEBUG __fmt => "      --no-asm                Disable all CPU optimizations\n"
  __builtin_puts (&"      --no-asm                Disable all CPU optimizations"[0]);
  # DEBUG __fmt => "      --visualize             Show MB types overlayed on the encoded video\n"
  __builtin_puts (&"      --visualize             Show MB types overlayed on the encoded video"[0]);
  # DEBUG __fmt => "      --dump-yuv <string>     Save reconstructed frames\n"
  __builtin_puts (&"      --dump-yuv <string>     Save reconstructed frames"[0]);
  _117 = defaults_54(D)->i_sps_id;
  # DEBUG __fmt => "      --sps-id <integer>      Set SPS and PPS id numbers [%d]\n"
  __printf_chk (1, "      --sps-id <integer>      Set SPS and PPS id numbers [%d]\n", _117);
  # DEBUG __fmt => "      --aud                   Use access unit delimiters\n"
  __builtin_puts (&"      --aud                   Use access unit delimiters"[0]);

  <bb 51>:
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  return;

  <bb 52>:
  _377 = defaults_54(D)->i_bframe;
  # DEBUG __fmt => "  -b, --bframes <integer>     Number of B-frames between I and P [%d]\n"
  __printf_chk (1, "  -b, --bframes <integer>     Number of B-frames between I and P [%d]\n", _377);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --b-pyramid             Keep some B-frames as references\n"
  __builtin_puts (&"      --b-pyramid             Keep some B-frames as references"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --no-cabac              Disable CABAC\n"
  __builtin_puts (&"      --no-cabac              Disable CABAC"[0]);
  # DEBUG __fmt => NULL
  _485 = defaults_54(D)->i_frame_reference;
  # DEBUG __fmt => "  -r, --ref <integer>         Number of reference frames [%d]\n"
  __printf_chk (1, "  -r, --ref <integer>         Number of reference frames [%d]\n", _485);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  _386 = defaults_54(D)->i_deblocking_filter_beta;
  _482 = defaults_54(D)->i_deblocking_filter_alphac0;
  # DEBUG __fmt => "  -f, --deblock <alpha:beta>  Loop filter AlphaC0 and Beta parameters [%d:%d]\n"
  __printf_chk (1, "  -f, --deblock <alpha:beta>  Loop filter AlphaC0 and Beta parameters [%d:%d]\n", _482, _386);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --interlaced            Enable pure-interlaced mode\n"
  __builtin_puts (&"      --interlaced            Enable pure-interlaced mode"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "Ratecontrol:\n"
  __builtin_puts (&"Ratecontrol:"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  _479 = defaults_54(D)->rc.i_qp_constant;
  # DEBUG __fmt => "  -q, --qp <integer>          Set QP (0=lossless) [%d]\n"
  __printf_chk (1, "  -q, --qp <integer>          Set QP (0=lossless) [%d]\n", _479);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "  -B, --bitrate <integer>     Set bitrate (kbit/s)\n"
  __builtin_puts (&"  -B, --bitrate <integer>     Set bitrate (kbit/s)"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --crf <float>           Quality-based VBR (nominal QP)\n"
  __builtin_puts (&"      --crf <float>           Quality-based VBR (nominal QP)"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  _398 = defaults_54(D)->rc.i_vbv_buffer_size;
  # DEBUG __fmt => "      --vbv-bufsize <integer> Enable CBR and set size of the VBV buffer (kbit) [%d]\n"
  __printf_chk (1, "      --vbv-bufsize <integer> Enable CBR and set size of the VBV buffer (kbit) [%d]\n", _398);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  _419 = defaults_54(D)->rc.f_rate_tolerance;
  _420 = (double) _419;
  # DEBUG __fmt => "      --ratetol <float>       Allowed variance of average bitrate [%.1f]\n"
  __printf_chk (1, "      --ratetol <float>       Allowed variance of average bitrate [%.1f]\n", _420);
  # DEBUG __fmt => NULL
  _421 = defaults_54(D)->rc.f_ip_factor;
  _422 = (double) _421;
  # DEBUG __fmt => "      --ipratio <float>       QP factor between I and P [%.2f]\n"
  __printf_chk (1, "      --ipratio <float>       QP factor between I and P [%.2f]\n", _422);
  # DEBUG __fmt => NULL
  _424 = defaults_54(D)->rc.f_pb_factor;
  _425 = (double) _424;
  # DEBUG __fmt => "      --pbratio <float>       QP factor between P and B [%.2f]\n"
  __printf_chk (1, "      --pbratio <float>       QP factor between P and B [%.2f]\n", _425);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  _430 = defaults_54(D)->rc.f_aq_strength;
  _431 = (double) _430;
  # DEBUG __fmt => "      --aq-strength <float>   Reduces blocking and blurring in flat and\n                              textured areas. [%.1f]\n                                  - 0.5: weak AQ\n                                  - 1.5: strong AQ\n"
  __printf_chk (1, "      --aq-strength <float>   Reduces blocking and blurring in flat and\n                              textured areas. [%.1f]\n                                  - 0.5: weak AQ\n                                  - 1.5: strong AQ\n", _431);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "\n"
  __builtin_putchar (10);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "  -p, --pass <1|2|3>          Enable multipass ratecontrol\n                                  - 1: First pass, creates stats file\n                                  - 2: Last pass, does not overwrite stats file\n                                  - 3: Nth pass, overwrites stats file\n"
  __builtin_puts (&"  -p, --pass <1|2|3>          Enable multipass ratecontrol\n                                  - 1: First pass, creates stats file\n                                  - 2: Last pass, does not overwrite stats file\n                                  - 3: Nth pass, overwrites stats file"[0]);
  # DEBUG __fmt => NULL
  _474 = defaults_54(D)->rc.psz_stat_out;
  # DEBUG __fmt => "      --stats <string>        Filename for 2 pass stats [\"%s\"]\n"
  __printf_chk (1, "      --stats <string>        Filename for 2 pass stats [\"%s\"]\n", _474);
  # DEBUG __fmt => NULL
  _355 = defaults_54(D)->rc.f_qcompress;
  _435 = (double) _355;
  # DEBUG __fmt => "      --qcomp <float>         QP curve compression: 0.0 => CBR, 1.0 => CQP [%.2f]\n"
  __printf_chk (1, "      --qcomp <float>         QP curve compression: 0.0 => CBR, 1.0 => CQP [%.2f]\n", _435);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "      --zones <zone0>/<zone1>/...  Tweak the bitrate of some regions of the video\n"
  __builtin_puts (&"      --zones <zone0>/<zone1>/...  Tweak the bitrate of some regions of the video"[0]);
  # DEBUG __fmt => NULL
  goto <bb 4>;

  <bb 53>:
  # DEBUG __fmt => "  -w, --weightb               Weighted prediction for B-frames\n"
  __builtin_puts (&"  -w, --weightb               Weighted prediction for B-frames"[0]);
  # DEBUG __fmt => NULL
  _139 = defaults_54(D)->analyse.i_me_method;
  # DEBUG table => &x264_motion_est_names
  # DEBUG index => _139
  # DEBUG i => 0
  goto <bb 11>;

  <bb 54>:
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --overscan <string>     Specify crop overscan setting [\"%s\"]\n                                  - undef, show, crop\n"
  __printf_chk (1, "      --overscan <string>     Specify crop overscan setting [\"%s\"]\n                                  - undef, show, crop\n", "???");
  _504 = defaults_54(D)->vui.i_vidformat;
  # DEBUG table => &x264_vidformat_names
  # DEBUG index => _504
  # DEBUG i => 0
  # DEBUG i => 0
  goto <bb 23>;

  <bb 55>:
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --videoformat <string>  Specify video format [\"%s\"]\n                                  - component, pal, ntsc, secam, mac, undef\n"
  __printf_chk (1, "      --videoformat <string>  Specify video format [\"%s\"]\n                                  - component, pal, ntsc, secam, mac, undef\n", "???");
  _464 = defaults_54(D)->vui.b_fullrange;
  # DEBUG table => &x264_fullrange_names
  # DEBUG index => _464
  # DEBUG i => 0
  # DEBUG i => 0
  goto <bb 28>;

  <bb 56>:
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --fullrange <string>    Specify full range samples setting [\"%s\"]\n                                  - off, on\n"
  __printf_chk (1, "      --fullrange <string>    Specify full range samples setting [\"%s\"]\n                                  - off, on\n", "???");
  _449 = defaults_54(D)->vui.i_colorprim;
  # DEBUG table => &x264_colorprim_names
  # DEBUG index => _449
  # DEBUG i => 0
  # DEBUG i => 0
  goto <bb 33>;

  <bb 57>:
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --colorprim <string>    Specify color primaries [\"%s\"]\n                                  - undef, bt709, bt470m, bt470bg\n                                    smpte170m, smpte240m, film\n"
  __printf_chk (1, "      --colorprim <string>    Specify color primaries [\"%s\"]\n                                  - undef, bt709, bt470m, bt470bg\n                                    smpte170m, smpte240m, film\n", "???");
  _472 = defaults_54(D)->vui.i_transfer;
  # DEBUG table => &x264_transfer_names
  # DEBUG index => _472
  # DEBUG i => 0
  # DEBUG i => 0
  goto <bb 38>;

  <bb 58>:
  # DEBUG table => NULL
  # DEBUG index => NULL
  # DEBUG i => NULL
  # DEBUG __fmt => "      --transfer <string>     Specify transfer characteristics [\"%s\"]\n                                  - undef, bt709, bt470m, bt470bg, linear,\n                                    log100, log316, smpte170m, smpte240m\n"
  __printf_chk (1, "      --transfer <string>     Specify transfer characteristics [\"%s\"]\n                                  - undef, bt709, bt470m, bt470bg, linear,\n                                    log100, log316, smpte170m, smpte240m\n", "???");
  _407 = defaults_54(D)->vui.i_colmatrix;
  # DEBUG table => &x264_colmatrix_names
  # DEBUG index => _407
  # DEBUG i => 0
  # DEBUG i => 0
  goto <bb 43>;

}



;; Function Encode_frame (Encode_frame, funcdef_no=136, decl_uid=7702, cgraph_uid=136, symbol_order=192)


Analyzing loop at x264.c:789
x264.c:789:5: note: ===== analyze_loop_nest =====
x264.c:789:5: note: === vect_analyze_loop_form ===
x264.c:789:5: note: not vectorized: control flow in loop.
x264.c:789:5: note: bad loop form.
x264.c:777:13: note: vectorized 0 loops in function.
Encode_frame (struct x264_t * h, void * hout, struct x264_picture_t * pic)
{
  int i_size;
  int i_file;
  int i;
  int i_nal;
  struct x264_nal_t * nal;
  struct x264_picture_t pic_out;
  int _11;
  struct _IO_FILE * stderr.33_12;
  int i_nal.41_14;
  struct x264_nal_t * nal.34_15;
  long unsigned int _16;
  long unsigned int _17;
  struct x264_nal_t * _18;
  int _19;
  int _20;
  int _21;
  int _22;
  int mux_buffer_size.35_23;
  int i_nal.41_25;
  int _26;
  int mux_buffer_size.36_27;
  uint8_t * mux_buffer.37_29;
  int mux_buffer_size.35_31;
  void * mux_buffer.38_33;
  int (*<T188a>) (void *, uint8_t *, int) p_write_nalu.39_41;
  int i_size.40_42;
  uint8_t * mux_buffer.37_43;
  int _46;
  int (*<T188e>) (void *, struct x264_picture_t *) p_set_eop.42_50;
  int i_nal.41_62;
  int i_nal.41_66;
  int pretmp_73;
  int prephitmp_74;
  struct x264_nal_t * pretmp_75;
  struct x264_nal_t * pretmp_77;
  struct x264_nal_t * prephitmp_78;
  uint8_t * pretmp_79;
  uint8_t * prephitmp_80;

  <bb 2>:
  # DEBUG i_file => 0
  _11 = x264_encoder_encode (h_8(D), &nal, &i_nal, pic_9(D), &pic_out);
  if (_11 < 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  stderr.33_12 = stderr;
  # DEBUG __stream => stderr.33_12
  # DEBUG __fmt => "x264 [error]: x264_encoder_encode failed\n"
  __builtin_fwrite ("x264 [error]: x264_encoder_encode failed\n", 1, 41, stderr.33_12);

  <bb 4>:
  # DEBUG i_file => 0
  # DEBUG i => 0
  i_nal.41_25 = i_nal;
  if (i_nal.41_25 > 0)
    goto <bb 5>;
  else
    goto <bb 12>;

  <bb 5>:

  <bb 6>:
  # i_58 = PHI <0(5), i_49(11)>
  # i_file_57 = PHI <0(5), i_file_47(11)>
  # DEBUG i_file => i_file_57
  # DEBUG i => i_58
  nal.34_15 = nal;
  _16 = (long unsigned int) i_58;
  _17 = _16 * 24;
  _18 = nal.34_15 + _17;
  _19 = _18->i_payload;
  _20 = _19 * 3;
  _21 = _20 / 2;
  _22 = _21 + 3;
  mux_buffer_size.35_23 = mux_buffer_size;
  if (_22 >= mux_buffer_size.35_23)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  pretmp_79 = mux_buffer;
  goto <bb 9>;

  <bb 8>:
  _26 = _19 + 2;
  mux_buffer_size.36_27 = _26 * 2;
  mux_buffer_size = mux_buffer_size.36_27;
  mux_buffer.37_29 = mux_buffer;
  x264_free (mux_buffer.37_29);
  mux_buffer_size.35_31 = mux_buffer_size;
  mux_buffer.38_33 = x264_malloc (mux_buffer_size.35_31);
  mux_buffer = mux_buffer.38_33;
  pretmp_73 = mux_buffer_size;
  pretmp_75 = nal;
  pretmp_77 = pretmp_75 + _17;

  <bb 9>:
  # prephitmp_74 = PHI <mux_buffer_size.35_23(7), pretmp_73(8)>
  # prephitmp_78 = PHI <_18(7), pretmp_77(8)>
  # prephitmp_80 = PHI <pretmp_79(7), mux_buffer.38_33(8)>
  i_size = prephitmp_74;
  x264_nal_encode (prephitmp_80, &i_size, 1, prephitmp_78);
  p_write_nalu.39_41 = p_write_nalu;
  i_size.40_42 = i_size;
  mux_buffer.37_43 = mux_buffer;
  _46 = p_write_nalu.39_41 (hout_44(D), mux_buffer.37_43, i_size.40_42);
  i_file_47 = _46 + i_file_57;
  # DEBUG i_file => i_file_47
  i_size ={v} {CLOBBER};
  i_49 = i_58 + 1;
  # DEBUG i => i_49
  # DEBUG i_file => i_file_47
  # DEBUG i => i_49
  i_nal.41_14 = i_nal;
  if (i_nal.41_14 > i_49)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  # i_nal.41_66 = PHI <i_nal.41_14(9)>
  # i_file_65 = PHI <i_file_47(9)>
  goto <bb 12>;

  <bb 11>:
  goto <bb 6>;

  <bb 12>:
  # i_file_59 = PHI <i_file_65(10), 0(4)>
  # i_nal.41_62 = PHI <i_nal.41_66(10), i_nal.41_25(4)>
  if (i_nal.41_62 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  p_set_eop.42_50 = p_set_eop;
  p_set_eop.42_50 (hout_44(D), &pic_out);

  <bb 14>:
  pic_out ={v} {CLOBBER};
  nal ={v} {CLOBBER};
  i_nal ={v} {CLOBBER};
  return i_file_59;

}



;; Function main (main, funcdef_no=131, decl_uid=7617, cgraph_uid=131, symbol_order=187) (executed once)


Analyzing loop at x264.c:902
x264.c:902:5: note: ===== analyze_loop_nest =====
x264.c:902:5: note: === vect_analyze_loop_form ===
x264.c:902:5: note: === get_loop_niters ===
x264.c:902:5: note: not vectorized: number of iterations cannot be computed.
x264.c:902:5: note: bad loop form.

Analyzing loop at x264.c:856
x264.c:856:44: note: ===== analyze_loop_nest =====
x264.c:856:44: note: === vect_analyze_loop_form ===
x264.c:856:44: note: not vectorized: multiple nested loops.
x264.c:856:44: note: bad loop form.
x264.c:92:5: note: ===== analyze_loop_nest =====
x264.c:92:5: note: === vect_analyze_loop_form ===
x264.c:92:5: note: ===== analyze_loop_nest_1 =====
x264.c:92:5: note: === vect_analyze_loop_form ===
x264.c:92:5: note: not vectorized: control flow in loop.
x264.c:92:5: note: bad inner-loop form.
x264.c:92:5: note: not vectorized: Bad inner loop.
x264.c:92:5: note: bad loop form.

Analyzing loop at x264.c:741
x264.c:741:10: note: ===== analyze_loop_nest =====
x264.c:741:10: note: === vect_analyze_loop_form ===
x264.c:741:10: note: not vectorized: control flow in loop.
x264.c:741:10: note: bad loop form.

Analyzing loop at x264.c:652
x264.c:652:12: note: ===== analyze_loop_nest =====
x264.c:652:12: note: === vect_analyze_loop_form ===
x264.c:652:12: note: not vectorized: control flow in loop.
x264.c:652:12: note: bad loop form.

Analyzing loop at x264.c:398
x264.c:398:13: note: ===== analyze_loop_nest =====
x264.c:398:13: note: === vect_analyze_loop_form ===
x264.c:398:13: note: ===== analyze_loop_nest_1 =====
x264.c:398:13: note: === vect_analyze_loop_form ===
x264.c:398:13: note: not vectorized: control flow in loop.
x264.c:398:13: note: bad inner-loop form.
x264.c:398:13: note: not vectorized: Bad inner loop.
x264.c:398:13: note: bad loop form.

Analyzing loop at x264.c:615
x264.c:615:56: note: ===== analyze_loop_nest =====
x264.c:615:56: note: === vect_analyze_loop_form ===
x264.c:615:56: note: not vectorized: control flow in loop.
x264.c:615:56: note: bad loop form.
x264.c:92:5: note: vectorized 0 loops in function.
main (int argc, char * * argv)
{
  char type;
  int ret;
  int qp;
  int num;
  struct x264_t * h;
  struct x264_picture_t pic;
  int i_frame;
  int i_frame_total;
  int64_t i_start;
  int64_t i_end;
  int64_t i_file;
  int i_frame_size;
  int i_update_interval;
  char buf[200];
  int64_t i_elapsed;
  double fps;
  double bitrate;
  int eta;
  double fps;
  int D.8976;
  struct x264_param_t defaults;
  char * psz;
  int b_avis;
  int b_y4m;
  int b_thread_input;
  int b_error;
  int long_options_index;
  int c;
  int __result;
  int i;
  const char * name;
  int D.8924;
  static struct option long_options[101] = {{.name="help", .has_arg=0, .flag=0B, .val=104}, {.name="longhelp", .has_arg=0, .flag=0B, .val=263}, {.name="version", .has_arg=0, .flag=0B, .val=86}, {.name="bitrate", .has_arg=1, .flag=0B, .val=66}, {.name="bframes", .has_arg=1, .flag=0B, .val=98}, {.name="b-adapt", .has_arg=1, .flag=0B, .val=0}, {.name="no-b-adapt", .has_arg=0, .flag=0B, .val=0}, {.name="b-bias", .has_arg=1, .flag=0B, .val=0}, {.name="b-pyramid", .has_arg=0, .flag=0B, .val=0}, {.name="min-keyint", .has_arg=1, .flag=0B, .val=105}, {.name="keyint", .has_arg=1, .flag=0B, .val=73}, {.name="scenecut", .has_arg=1, .flag=0B, .val=0}, {.name="pre-scenecut", .has_arg=0, .flag=0B, .val=0}, {.name="nf", .has_arg=0, .flag=0B, .val=0}, {.name="no-deblock", .has_arg=0, .flag=0B, .val=0}, {.name="filter", .has_arg=1, .flag=0B, .val=0}, {.name="deblock", .has_arg=1, .flag=0B, .val=102}, {.name="interlaced", .has_arg=0, .flag=0B, .val=0}, {.name="no-cabac", .has_arg=0, .flag=0B, .val=0}, {.name="qp", .has_arg=1, .flag=0B, .val=113}, {.name="qpmin", .has_arg=1, .flag=0B, .val=0}, {.name="qpmax", .has_arg=1, .flag=0B, .val=0}, {.name="qpstep", .has_arg=1, .flag=0B, .val=0}, {.name="crf", .has_arg=1, .flag=0B, .val=0}, {.name="ref", .has_arg=1, .flag=0B, .val=114}, {.name="asm", .has_arg=1, .flag=0B, .val=0}, {.name="no-asm", .has_arg=0, .flag=0B, .val=0}, {.name="sar", .has_arg=1, .flag=0B, .val=0}, {.name="fps", .has_arg=1, .flag=0B, .val=0}, {.name="frames", .has_arg=1, .flag=0B, .val=256}, {.name="seek", .has_arg=1, .flag=0B, .val=257}, {.name="output", .has_arg=1, .flag=0B, .val=111}, {.name="analyse", .has_arg=1, .flag=0B, .val=0}, {.name="partitions", .has_arg=1, .flag=0B, .val=65}, {.name="direct", .has_arg=1, .flag=0B, .val=0}, {.name="direct-8x8", .has_arg=1, .flag=0B, .val=0}, {.name="weightb", .has_arg=0, .flag=0B, .val=119}, {.name="me", .has_arg=1, .flag=0B, .val=0}, {.name="merange", .has_arg=1, .flag=0B, .val=0}, {.name="mvrange", .has_arg=1, .flag=0B, .val=0}, {.name="mvrange-thread", .has_arg=1, .flag=0B, .val=0}, {.name="subme", .has_arg=1, .flag=0B, .val=109}, {.name="psy-rd", .has_arg=1, .flag=0B, .val=0}, {.name="mixed-refs", .has_arg=0, .flag=0B, .val=0}, {.name="no-chroma-me", .has_arg=0, .flag=0B, .val=0}, {.name="8x8dct", .has_arg=0, .flag=0B, .val=56}, {.name="trellis", .has_arg=1, .flag=0B, .val=116}, {.name="no-fast-pskip", .has_arg=0, .flag=0B, .val=0}, {.name="no-dct-decimate", .has_arg=0, .flag=0B, .val=0}, {.name="aq-strength", .has_arg=1, .flag=0B, .val=0}, {.name="aq-mode", .has_arg=1, .flag=0B, .val=0}, {.name="deadzone-inter", .has_arg=1, .flag=0B, .val=48}, {.name="deadzone-intra", .has_arg=1, .flag=0B, .val=48}, {.name="level", .has_arg=1, .flag=0B, .val=0}, {.name="ratetol", .has_arg=1, .flag=0B, .val=0}, {.name="vbv-maxrate", .has_arg=1, .flag=0B, .val=0}, {.name="vbv-bufsize", .has_arg=1, .flag=0B, .val=0}, {.name="vbv-init", .has_arg=1, .flag=0B, .val=0}, {.name="ipratio", .has_arg=1, .flag=0B, .val=0}, {.name="pbratio", .has_arg=1, .flag=0B, .val=0}, {.name="chroma-qp-offset", .has_arg=1, .flag=0B, .val=0}, {.name="pass", .has_arg=1, .flag=0B, .val=112}, {.name="stats", .has_arg=1, .flag=0B, .val=0}, {.name="qcomp", .has_arg=1, .flag=0B, .val=0}, {.name="qblur", .has_arg=1, .flag=0B, .val=0}, {.name="cplxblur", .has_arg=1, .flag=0B, .val=0}, {.name="zones", .has_arg=1, .flag=0B, .val=0}, {.name="qpfile", .has_arg=1, .flag=0B, .val=258}, {.name="threads", .has_arg=1, .flag=0B, .val=0}, {.name="thread-input", .has_arg=0, .flag=0B, .val=259}, {.name="non-deterministic", .has_arg=0, .flag=0B, .val=0}, {.name="no-psnr", .has_arg=0, .flag=0B, .val=0}, {.name="no-ssim", .has_arg=0, .flag=0B, .val=0}, {.name="quiet", .has_arg=0, .flag=0B, .val=260}, {.name="verbose", .has_arg=0, .flag=0B, .val=118}, {.name="progress", .has_arg=0, .flag=0B, .val=261}, {.name="visualize", .has_arg=0, .flag=0B, .val=262}, {.name="dump-yuv", .has_arg=1, .flag=0B, .val=0}, {.name="sps-id", .has_arg=1, .flag=0B, .val=0}, {.name="aud", .has_arg=0, .flag=0B, .val=0}, {.name="nr", .has_arg=1, .flag=0B, .val=0}, {.name="cqm", .has_arg=1, .flag=0B, .val=0}, {.name="cqmfile", .has_arg=1, .flag=0B, .val=0}, {.name="cqm4", .has_arg=1, .flag=0B, .val=0}, {.name="cqm4i", .has_arg=1, .flag=0B, .val=0}, {.name="cqm4iy", .has_arg=1, .flag=0B, .val=0}, {.name="cqm4ic", .has_arg=1, .flag=0B, .val=0}, {.name="cqm4p", .has_arg=1, .flag=0B, .val=0}, {.name="cqm4py", .has_arg=1, .flag=0B, .val=0}, {.name="cqm4pc", .has_arg=1, .flag=0B, .val=0}, {.name="cqm8", .has_arg=1, .flag=0B, .val=0}, {.name="cqm8i", .has_arg=1, .flag=0B, .val=0}, {.name="cqm8p", .has_arg=1, .flag=0B, .val=0}, {.name="overscan", .has_arg=1, .flag=0B, .val=0}, {.name="videoformat", .has_arg=1, .flag=0B, .val=0}, {.name="fullrange", .has_arg=1, .flag=0B, .val=0}, {.name="colorprim", .has_arg=1, .flag=0B, .val=0}, {.name="transfer", .has_arg=1, .flag=0B, .val=0}, {.name="colormatrix", .has_arg=1, .flag=0B, .val=0}, {.name="chromaloc", .has_arg=1, .flag=0B, .val=0}, {.name=0B, .has_arg=0, .flag=0B, .val=0}};
  int ret;
  struct cli_opt_t opt;
  struct x264_param_t param;
  int _1;
  int _9;
  struct FILE * _12;
  _Bool _13;
  const char * _16;
  char * optarg.1_18;
  long int _19;
  int _20;
  char * optarg.1_21;
  long int _22;
  int _23;
  char * optarg.1_24;
  long unsigned int _25;
  sizetype _26;
  char * _27;
  int _28;
  struct _IO_FILE * stderr.2_29;
  int _30;
  unsigned char _31;
  int prephitmp_33;
  unsigned char _34;
  double _37;
  struct _IO_FILE * stdout.4_38;
  int (*<T1882>) (char *, void * *) p_open_outfile.5_39;
  int _41;
  char * optarg.1_42;
  struct _IO_FILE * stderr.2_43;
  char * optarg.1_44;
  struct FILE * _45;
  char * optarg.1_46;
  struct _IO_FILE * stderr.2_47;
  struct _IO_FILE * stderr.2_48;
  int long_options_index.6_49;
  int _51;
  const char * _53;
  char * optarg.1_55;
  int long_options_index.6_56;
  const char * _57;
  _Bool _59;
  int long_options_index.6_60;
  int optind.8_62;
  long unsigned int _63;
  long unsigned int _64;
  sizetype _65;
  char * * _66;
  char * optarg.1_68;
  struct _IO_FILE * stderr.2_69;
  int optind.8_71;
  void * _72;
  struct _IO_FILE * stderr.2_73;
  char * iftmp.9_74;
  int optind.11_75;
  long unsigned int _76;
  long unsigned int _77;
  char * * _78;
  long unsigned int _80;
  sizetype _81;
  char _85;
  int _86;
  int _87;
  int _88;
  char _92;
  unsigned char _93;
  unsigned char _94;
  int _98;
  int _99;
  int _100;
  int _101;
  struct _IO_FILE * stderr.2_102;
  int optind.13_106;
  long unsigned int _107;
  long unsigned int _108;
  char * * _109;
  char * _110;
  int _111;
  int _112;
  struct _IO_FILE * stderr.2_113;
  struct _IO_FILE * stderr.2_114;
  int (*<T1868>) (char *, void * *, struct x264_param_t *) p_open_infile.14_115;
  int _117;
  struct _IO_FILE * stderr.2_118;
  int _120;
  int _121;
  int _122;
  struct _IO_FILE * stderr.2_123;
  int _126;
  int _128;
  _Bool _129;
  int _130;
  int _131;
  int (*<T186c>) (void *) p_get_frame_total.16_132;
  void * _133;
  int _135;
  int _137;
  _Bool _139;
  int _140;
  struct _IO_FILE * stderr.18_143;
  int (*<T186c>) (void *) p_close_infile.19_144;
  void * _145;
  int (*<T1886>) (void *, struct x264_param_t *) p_set_outfile_param.20_146;
  void * _147;
  int _148;
  struct _IO_FILE * stderr.18_149;
  int (*<T186c>) (void *) p_close_infile.19_150;
  void * _151;
  int (*<T186c>) (void *) p_close_outfile.21_152;
  void * _153;
  int _154;
  int _155;
  int (*<T186f>) (struct x264_picture_t *, void *, int) p_read_frame.22_157;
  int _158;
  int _160;
  void * _161;
  int _162;
  long int _163;
  int _164;
  long int _165;
  long int _166;
  struct FILE * _167;
  int _168;
  int _169;
  void * _171;
  int _172;
  long int _173;
  int _177;
  int _179;
  long int _180;
  double _182;
  double _183;
  double _184;
  double _186;
  int _187;
  double _188;
  unsigned int _189;
  double _190;
  int _191;
  double _192;
  double _193;
  double _194;
  double _195;
  int _197;
  long int _198;
  long int _199;
  long int _200;
  long int _201;
  long int _202;
  int _204;
  int _205;
  int _206;
  int _207;
  double _208;
  double _209;
  double _210;
  struct _IO_FILE * stderr.18_212;
  struct _IO_FILE * stderr.18_213;
  int b_ctrl_c.24_214;
  _Bool _215;
  _Bool _216;
  _Bool _217;
  void * _218;
  long int _220;
  int _224;
  struct _IO_FILE * stderr.18_225;
  uint8_t * mux_buffer.26_226;
  struct _IO_FILE * stderr.18_227;
  int b_ctrl_c.24_228;
  int _229;
  int _230;
  struct _IO_FILE * stderr.18_231;
  int (*<T186c>) (void *) p_close_infile.19_232;
  void * _233;
  int (*<T186c>) (void *) p_close_outfile.21_234;
  void * _235;
  double _236;
  double _237;
  long int _238;
  double _239;
  double _241;
  int _242;
  double _243;
  double _244;
  double _245;
  int _246;
  double _247;
  double _248;
  double _249;
  double _250;
  struct _IO_FILE * stderr.18_251;
  int _252;
  char _253;
  _Bool _256;
  long int _257;
  struct FILE * _258;
  int num.28_260;
  struct FILE * _261;
  int qp.30_262;
  int _263;
  char type.31_264;
  struct _IO_FILE * stderr.32_266;
  struct FILE * _267;
  _Bool _271;
  int num.28_280;
  unsigned int _288;
  long int _363;
  double reciptmp_451;
  _Bool _459;
  int prephitmp_465;

  <bb 2>:
  # DEBUG __fmt => "PARSEC Benchmark Suite Version 3.0-beta-20150206\n"
  __builtin_puts (&"PARSEC Benchmark Suite Version 3.0-beta-20150206"[0]);
  # DEBUG __fmt => NULL
  fflush (0B);
  x264_param_default (&param);
  # DEBUG argc => argc_7(D)
  # DEBUG argv => argv_8(D)
  # DEBUG param => &param
  # DEBUG opt => &opt
  # DEBUG psz_filename => 0B
  defaults = param;
  # DEBUG b_avis => 0
  # DEBUG b_y4m => 0
  # DEBUG b_thread_input => 0
  # DEBUG __dest => &opt
  # DEBUG __ch => 0
  # DEBUG __len => 32
  __builtin_memset (&opt, 0, 32);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  p_open_infile = open_file_yuv;
  p_get_frame_total = get_frame_total_yuv;
  p_read_frame = read_frame_yuv;
  p_close_infile = close_file_yuv;
  p_open_outfile = open_file_bsf;
  p_set_outfile_param = set_param_bsf;
  p_write_nalu = write_nalu_bsf;
  p_set_eop = set_eop_bsf;
  p_close_outfile = close_file_bsf;

  <bb 3>:
  # b_thread_input_119 = PHI <0(2), b_thread_input_448(40)>
  # DEBUG b_thread_input => b_thread_input_119
  # DEBUG b_error => 0
  long_options_index = -1;
  c_17 = getopt_long (argc_7(D), argv_8(D), "8A:B:b:f:hI:i:m:o:p:q:r:t:Vvw", &long_options, &long_options_index);
  # DEBUG c => c_17
  if (c_17 == -1)
    goto <bb 41>;
  else
    goto <bb 4>;

  <bb 4>:
  switch (c_17) <default: <L15>, case 86: <L6>, case 104: <L4>, case 111: <L9>, case 118: <L12>, case 256: <L7>, case 257: <L8>, case 258: <L10>, case 259: <L17>, case 260: <L11>, case 261: <L13>, case 262: <L14>, case 263: <L5>>

<L4>:
  Help (&defaults, 0);
  exit (0);

<L5>:
  Help (&defaults, 1);
  exit (0);

<L6>:
  # DEBUG __fmt => "x264 0.65.1047M f773bf0\n"
  __builtin_puts (&"x264 0.65.1047M f773bf0"[0]);
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "built on Jul 24 2021, "
  __printf_chk (1, "built on Jul 24 2021, ");
  # DEBUG __fmt => NULL
  # DEBUG __fmt => "gcc: 5.4.0 20160609\n"
  __builtin_puts (&"gcc: 5.4.0 20160609"[0]);
  # DEBUG __fmt => NULL
  exit (0);

<L7>:
  optarg.1_18 = optarg;
  # DEBUG __nptr => optarg.1_18
  _19 = strtol (optarg.1_18, 0B, 10);
  _20 = (int) _19;
  # DEBUG __nptr => NULL
  param.i_frame_total = _20;
  goto <bb 137> (<L17>);

<L8>:
  optarg.1_21 = optarg;
  # DEBUG __nptr => optarg.1_21
  _22 = strtol (optarg.1_21, 0B, 10);
  _23 = (int) _22;
  # DEBUG __nptr => NULL
  opt.i_seek = _23;
  goto <bb 137> (<L17>);

<L9>:
  optarg.1_24 = optarg;
  _25 = strlen (optarg.1_24);
  _26 = _25 + 18446744073709551612;
  _27 = optarg.1_24 + _26;
  _28 = strncasecmp (_27, ".mp4", 4);
  if (_28 == 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  stderr.2_29 = stderr;
  # DEBUG __stream => stderr.2_29
  # DEBUG __fmt => "x264 [error]: not compiled with MP4 output support\n"
  __builtin_fwrite ("x264 [error]: not compiled with MP4 output support\n", 1, 51, stderr.2_29);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  goto <bb 43>;

  <bb 12>:
  _30 = strncasecmp (_27, ".mkv", 4);
  if (_30 == 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  p_open_outfile = open_file_mkv;
  p_write_nalu = write_nalu_mkv;
  p_set_outfile_param = set_param_mkv;
  p_set_eop = set_eop_mkv;
  p_close_outfile = close_file_mkv;

  <bb 14>:
  # DEBUG __s2_len => 1
  # DEBUG __s2 => optarg.1_24
  _31 = MEM[(const unsigned char *)optarg.1_24];
  # DEBUG D#3 => (int) _31
  # DEBUG __result => 45 - D#3
  if (_31 == 45)
    goto <bb 15>;
  else
    goto <bb 17>;

  <bb 15>:
  _34 = MEM[(const unsigned char *)optarg.1_24 + 1B];
  # DEBUG D#5 => (int) _34
  # DEBUG D#4 => -D#5
  # DEBUG __result => D#4
  # DEBUG __result => D#4
  if (_34 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  stdout.4_38 = stdout;
  opt.hout = stdout.4_38;
  goto <bb 137> (<L17>);

  <bb 17>:
  # DEBUG __result => NULL
  p_open_outfile.5_39 = p_open_outfile;
  _41 = p_open_outfile.5_39 (optarg.1_24, &opt.hout);
  if (_41 != 0)
    goto <bb 18>;
  else
    goto <bb 137> (<L17>);

  <bb 18>:
  optarg.1_42 = optarg;
  stderr.2_43 = stderr;
  # DEBUG __stream => stderr.2_43
  # DEBUG __fmt => "x264 [error]: can\'t open output file `%s\'\n"
  __fprintf_chk (stderr.2_43, 1, "x264 [error]: can\'t open output file `%s\'\n", optarg.1_42);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  goto <bb 43>;

<L10>:
  optarg.1_44 = optarg;
  _45 = fopen (optarg.1_44, "r");
  opt.qpfile = _45;
  if (_45 == 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  optarg.1_46 = optarg;
  stderr.2_47 = stderr;
  # DEBUG __stream => stderr.2_47
  # DEBUG __fmt => "x264 [error]: can\'t open `%s\'\n"
  __fprintf_chk (stderr.2_47, 1, "x264 [error]: can\'t open `%s\'\n", optarg.1_46);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  goto <bb 43>;

  <bb 21>:
  param.i_scenecut_threshold = -1;
  param.i_bframe_adaptive = 0;
  goto <bb 137> (<L17>);

<L11>:
  param.i_log_level = -1;
  goto <bb 137> (<L17>);

<L12>:
  param.i_log_level = 3;
  goto <bb 137> (<L17>);

<L13>:
  opt.b_progress = 1;
  goto <bb 137> (<L17>);

<L14>:
  stderr.2_48 = stderr;
  # DEBUG __stream => stderr.2_48
  # DEBUG __fmt => "x264 [warning]: not compiled with visualization support\n"
  __builtin_fwrite ("x264 [warning]: not compiled with visualization support\n", 1, 56, stderr.2_48);
  goto <bb 137> (<L17>);

<L15>:
  long_options_index.6_49 = long_options_index;
  if (long_options_index.6_49 < 0)
    goto <bb 27>;
  else
    goto <bb 35>;

  <bb 27>:
  # DEBUG i => 0
  _16 = long_options[0].name;
  if (_16 != 0B)
    goto <bb 28>;
  else
    goto <bb 42>;

  <bb 28>:
  _126 = long_options[0].val;
  if (c_17 == _126)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 29>:
  _51 = long_options[i_52].val;
  if (c_17 == _51)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  # i_272 = PHI <i_52(29)>
  goto <bb 32>;

  <bb 31>:
  goto <bb 34>;

  <bb 32>:
  # i_125 = PHI <i_272(30), 0(28)>
  long_options_index = i_125;
  if (i_125 < 0)
    goto <bb 42>;
  else
    goto <bb 35>;

  <bb 33>:

  <bb 34>:
  # i_453 = PHI <0(33), i_52(31)>
  # DEBUG i => i_453
  i_52 = i_453 + 1;
  # DEBUG i => i_52
  # DEBUG i => i_52
  _53 = long_options[i_52].name;
  if (_53 != 0B)
    goto <bb 29>;
  else
    goto <bb 42>;

  <bb 35>:
  optarg.1_55 = optarg;
  long_options_index.6_56 = long_options_index;
  _57 = long_options[long_options_index.6_56].name;
  b_error_58 = x264_param_parse (&param, _57, optarg.1_55);
  # DEBUG b_error => b_error_58
  # DEBUG b_error => b_error_58
  # DEBUG b_thread_input => b_thread_input_119
  if (b_error_58 != 0)
    goto <bb 36>;
  else
    goto <bb 40>;

  <bb 36>:
  long_options_index.6_60 = long_options_index;
  if (long_options_index.6_60 > 0)
    goto <bb 37>;
  else
    goto <bb 38>;

  <bb 37>:
  name_61 = long_options[long_options_index.6_60].name;
  goto <bb 39>;

  <bb 38>:
  optind.8_62 = optind;
  _63 = (long unsigned int) optind.8_62;
  _64 = _63 * 8;
  _65 = _64 + 18446744073709551600;
  _66 = argv_8(D) + _65;
  name_67 = *_66;

  <bb 39>:
  # name_70 = PHI <name_61(37), name_67(38)>
  # DEBUG name => name_70
  optarg.1_68 = optarg;
  stderr.2_69 = stderr;
  # DEBUG __stream => stderr.2_69
  # DEBUG __fmt => "x264 [error]: invalid argument: %s = %s\n"
  __fprintf_chk (stderr.2_69, 1, "x264 [error]: invalid argument: %s = %s\n", name_70, optarg.1_68);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  goto <bb 43>;

  <bb 40>:
  # b_thread_input_448 = PHI <b_thread_input_119(35), b_thread_input_105(137)>
  # DEBUG b_error => NULL
  # DEBUG b_thread_input => b_thread_input_448
  long_options_index ={v} {CLOBBER};
  goto <bb 3>;

  <bb 41>:
  # b_thread_input_364 = PHI <b_thread_input_119(3)>
  long_options_index ={v} {CLOBBER};
  optind.8_71 = optind;
  if (argc_7(D) <= optind.8_71)
    goto <bb 45>;
  else
    goto <bb 44>;

  <bb 42>:

  <bb 43>:
  long_options_index ={v} {CLOBBER};
  goto <bb 140>;

  <bb 44>:
  _72 = opt.hout;
  if (_72 == 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 45>:
  # iftmp.9_74 = PHI <"output"(44), "input"(41)>
  stderr.2_73 = stderr;
  # DEBUG __stream => stderr.2_73
  # DEBUG __fmt => "x264 [error]: No %s file. Run x264 --help for a list of options.\n"
  __fprintf_chk (stderr.2_73, 1, "x264 [error]: No %s file. Run x264 --help for a list of options.\n", iftmp.9_74);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  goto <bb 140>;

  <bb 46>:
  optind.11_75 = optind.8_71 + 1;
  optind = optind.11_75;
  _76 = (long unsigned int) optind.8_71;
  _77 = _76 * 8;
  _78 = argv_8(D) + _77;
  psz_79 = *_78;
  # DEBUG psz_filename => psz_79
  _80 = strlen (psz_79);
  _81 = _80 + 18446744073709551615;
  psz_82 = psz_79 + _81;
  # DEBUG psz => psz_82
  # DEBUG psz => psz_82
  if (psz_79 < psz_82)
    goto <bb 47>;
  else
    goto <bb 54>;

  <bb 47>:
  _253 = *psz_82;
  if (_253 != 46)
    goto <bb 48>;
  else
    goto <bb 54>;

  <bb 48>:

  <bb 49>:
  # psz_454 = PHI <psz_82(48), psz_84(53)>
  # DEBUG psz => psz_454
  psz_84 = psz_454 + 18446744073709551615;
  # DEBUG psz => psz_84
  # DEBUG psz => psz_84
  if (psz_79 < psz_84)
    goto <bb 51>;
  else
    goto <bb 50>;

  <bb 50>:
  # psz_127 = PHI <psz_84(49)>
  goto <bb 54>;

  <bb 51>:
  _85 = *psz_84;
  if (_85 != 46)
    goto <bb 53>;
  else
    goto <bb 52>;

  <bb 52>:
  # psz_90 = PHI <psz_84(51)>
  goto <bb 54>;

  <bb 53>:
  goto <bb 49>;

  <bb 54>:
  # psz_456 = PHI <psz_127(50), psz_90(52), psz_82(46), psz_82(47)>
  _86 = strncasecmp (psz_456, ".avi", 4);
  if (_86 == 0)
    goto <bb 57>;
  else
    goto <bb 55>;

  <bb 55>:
  _87 = strncasecmp (psz_456, ".avs", 4);
  if (_87 == 0)
    goto <bb 56>;
  else
    goto <bb 57>;

  <bb 56>:

  <bb 57>:
  # b_avis_89 = PHI <0(55), 1(56), 1(54)>
  # DEBUG b_avis => b_avis_89
  _88 = strncasecmp (psz_456, ".y4m", 4);
  if (_88 == 0)
    goto <bb 149>;
  else
    goto <bb 58>;

  <bb 58>:
  # DEBUG b_y4m => 0
  if (b_avis_89 == 0)
    goto <bb 59>;
  else
    goto <bb 70>;

  <bb 59>:
  # DEBUG b_y4m => 0
  if (argc_7(D) <= optind.11_75)
    goto <bb 60>;
  else
    goto <bb 67>;

  <bb 60>:
  goto <bb 66>;

  <bb 61>:
  _93 = (unsigned char) _92;
  _94 = _93 + 208;
  if (_94 <= 9)
    goto <bb 62>;
  else
    goto <bb 65>;

  <bb 62>:
  _98 = sscanf (psz_97, "%ux%u", &param.i_width, &param.i_height);
  if (_98 == 2)
    goto <bb 63>;
  else
    goto <bb 65>;

  <bb 63>:
  _99 = param.i_log_level;
  if (_99 > 1)
    goto <bb 64>;
  else
    goto <bb 138>;

  <bb 64>:
  _100 = param.i_height;
  _101 = param.i_width;
  stderr.2_102 = stderr;
  # DEBUG __stream => stderr.2_102
  # DEBUG __fmt => "x264 [info]: file name gives %dx%d\n"
  __fprintf_chk (stderr.2_102, 1, "x264 [info]: file name gives %dx%d\n", _101, _100);
  goto <bb 139>;

  <bb 65>:
  psz_103 = psz_97 + 1;
  # DEBUG psz => psz_103

  <bb 66>:
  # psz_97 = PHI <psz_79(60), psz_103(65)>
  # DEBUG psz => psz_97
  _92 = *psz_97;
  if (_92 != 0)
    goto <bb 61>;
  else
    goto <bb 138>;

  <bb 67>:
  optind.13_106 = optind.8_71 + 2;
  optind = optind.13_106;
  _107 = (long unsigned int) optind.11_75;
  _108 = _107 * 8;
  _109 = argv_8(D) + _108;
  _110 = *_109;
  sscanf (_110, "%ux%u", &param.i_width, &param.i_height);
  goto <bb 139>;

  <bb 68>:
  _112 = param.i_height;
  if (_112 == 0)
    goto <bb 69>;
  else
    goto <bb 71>;

  <bb 69>:
  stderr.2_113 = stderr;
  # DEBUG __stream => stderr.2_113
  # DEBUG __fmt => "x264 [error]: Rawyuv input requires a resolution.\n"
  __builtin_fwrite ("x264 [error]: Rawyuv input requires a resolution.\n", 1, 50, stderr.2_113);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  goto <bb 140>;

  <bb 70>:
  # DEBUG b_y4m => NULL
  stderr.2_114 = stderr;
  # DEBUG __stream => stderr.2_114
  # DEBUG __fmt => "x264 [error]: not compiled with AVIS input support\n"
  __builtin_fwrite ("x264 [error]: not compiled with AVIS input support\n", 1, 51, stderr.2_114);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  goto <bb 140>;

  <bb 71>:
  p_open_infile.14_115 = p_open_infile;
  _117 = p_open_infile.14_115 (psz_79, &opt.hin, &param);
  if (_117 != 0)
    goto <bb 72>;
  else
    goto <bb 73>;

  <bb 72>:
  stderr.2_118 = stderr;
  # DEBUG __stream => stderr.2_118
  # DEBUG __fmt => "x264 [error]: could not open input file \'%s\'\n"
  __fprintf_chk (stderr.2_118, 1, "x264 [error]: could not open input file \'%s\'\n", psz_79);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  goto <bb 140>;

  <bb 73>:
  if (b_thread_input_364 != 0)
    goto <bb 74>;
  else
    goto <bb 75>;

  <bb 74>:
  _122 = open_file_thread (0B, &opt.hin, &param);
  if (_122 != 0)
    goto <bb 78>;
  else
    goto <bb 79>;

  <bb 75>:
  _120 = param.i_threads;
  if (_120 > 1)
    goto <bb 74>;
  else
    goto <bb 76>;

  <bb 76>:
  if (_120 == 0)
    goto <bb 77>;
  else
    goto <bb 141>;

  <bb 77>:
  _121 = x264_cpu_num_processors ();
  if (_121 > 1)
    goto <bb 74>;
  else
    goto <bb 141>;

  <bb 78>:
  stderr.2_123 = stderr;
  # DEBUG __stream => stderr.2_123
  # DEBUG __fmt => "x264 [warning]: threaded input failed\n"
  __builtin_fwrite ("x264 [warning]: threaded input failed\n", 1, 38, stderr.2_123);
  goto <bb 142>;

  <bb 79>:
  p_open_infile = open_file_thread;
  p_get_frame_total = get_frame_total_thread;
  p_read_frame = read_frame_thread;
  p_close_infile = close_file_thread;
  goto <bb 142>;

  <bb 80>:
  _137 = param.i_frame_total;
  if (i_frame_total_136 > _137)
    goto <bb 145>;
  else
    goto <bb 143>;

  <bb 81>:
  # i_frame_total_449 = PHI <i_frame_total_136(144), i_frame_total_457(143)>
  # DEBUG i_frame_total => i_frame_total_449
  _140 = i_frame_total_449 / 1000;
  # DEBUG v => _140
  # DEBUG i_min => 1
  # DEBUG i_max => 10
  if (_140 > 0)
    goto <bb 82>;
  else
    goto <bb 83>;

  <bb 82>:
  i_update_interval_141 = MIN_EXPR <_140, 10>;

  <bb 83>:
  # i_update_interval_178 = PHI <10(146), i_update_interval_141(82), 1(81)>
  # i_frame_total_444 = PHI <0(146), i_frame_total_449(82), i_frame_total_449(81)>
  # DEBUG i_update_interval => i_update_interval_178
  h_142 = x264_encoder_open (&param);
  # DEBUG h => h_142
  if (h_142 == 0B)
    goto <bb 84>;
  else
    goto <bb 85>;

  <bb 84>:
  stderr.18_143 = stderr;
  # DEBUG __stream => stderr.18_143
  # DEBUG __fmt => "x264 [error]: x264_encoder_open failed\n"
  __builtin_fwrite ("x264 [error]: x264_encoder_open failed\n", 1, 39, stderr.18_143);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  p_close_infile.19_144 = p_close_infile;
  _145 = opt.hin;
  p_close_infile.19_144 (_145);
  goto <bb 135>;

  <bb 85>:
  p_set_outfile_param.20_146 = p_set_outfile_param;
  _147 = opt.hout;
  _148 = p_set_outfile_param.20_146 (_147, &param);
  if (_148 != 0)
    goto <bb 86>;
  else
    goto <bb 87>;

  <bb 86>:
  stderr.18_149 = stderr;
  # DEBUG __stream => stderr.18_149
  # DEBUG __fmt => "x264 [error]: can\'t set outfile param\n"
  __builtin_fwrite ("x264 [error]: can\'t set outfile param\n", 1, 38, stderr.18_149);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  p_close_infile.19_150 = p_close_infile;
  _151 = opt.hin;
  p_close_infile.19_150 (_151);
  p_close_outfile.21_152 = p_close_outfile;
  _153 = opt.hout;
  p_close_outfile.21_152 (_153);
  goto <bb 135>;

  <bb 87>:
  _154 = param.i_height;
  _155 = param.i_width;
  x264_picture_alloc (&pic, 1, _155, _154);
  i_start_156 = x264_mdate ();
  # DEBUG i_start => i_start_156
  # DEBUG i_frame => 0
  # DEBUG i_file => 0
  _209 = (double) i_frame_total_444;
  reciptmp_451 = 1.0e+0 / _209;
  goto <bb 123>;

  <bb 88>:
  p_read_frame.22_157 = p_read_frame;
  _158 = opt.i_seek;
  _160 = _158 + i_frame_159;
  _161 = opt.hin;
  _162 = p_read_frame.22_157 (&pic, _161, _160);
  if (_162 != 0)
    goto <bb 89>;
  else
    goto <bb 91>;

  <bb 89>:
  # i_frame_50 = PHI <i_frame_159(88)>
  # i_file_265 = PHI <i_file_174(88)>

  <bb 90>:
  # i_frame_124 = PHI <i_frame_50(89), i_frame_40(124), i_frame_83(126)>
  # i_file_452 = PHI <i_file_265(89), i_file_95(124), i_file_455(126)>
  goto <bb 128>;

  <bb 91>:
  _163 = (long int) i_frame_159;
  _164 = param.i_fps_den;
  _165 = (long int) _164;
  _166 = _163 * _165;
  pic.i_pts = _166;
  _167 = opt.qpfile;
  if (_167 != 0B)
    goto <bb 92>;
  else
    goto <bb 113>;

  <bb 92>:
  _168 = opt.i_seek;
  _169 = i_frame_159 + _168;
  # DEBUG D#1 => &opt
  # DEBUG D#2 => &pic
  # DEBUG D#2 => &pic
  # DEBUG i_frame => _169
  # DEBUG opt => D#1
  # DEBUG pic => D#2
  # DEBUG pic => D#2
  num = -1;
  goto <bb 110>;

  <bb 93>:
  _12 = MEM[(struct FILE * *)&opt + 24B];
  _257 = ftello (_12);
  # DEBUG file_pos => (uint64_t) _257
  _258 = MEM[(struct FILE * *)&opt + 24B];
  ret_259 = fscanf (_258, "%d %c %d\n", &num, &type, &qp);
  # DEBUG ret => ret_259
  num.28_260 = num;
  _59 = ret_259 == -1;
  _256 = _169 < num.28_260;
  _13 = _59 | _256;
  if (_13 != 0)
    goto <bb 94>;
  else
    goto <bb 95>;

  <bb 94>:
  # _363 = PHI <_257(93)>
  MEM[(int *)&pic] = 0;
  MEM[(int *)&pic + 4B] = 0;
  _261 = MEM[(struct FILE * *)&opt + 24B];
  fseeko (_261, _363, 0);
  goto <bb 112>;

  <bb 95>:
  if (_169 > num.28_260)
    goto <bb 96>;
  else
    goto <bb 97>;

  <bb 96>:
  goto <bb 111>;

  <bb 97>:
  # ret_277 = PHI <ret_259(95)>
  # num.28_280 = PHI <num.28_260(95)>
  qp.30_262 = qp;
  _263 = qp.30_262 + 1;
  MEM[(int *)&pic + 4B] = _263;
  type.31_264 = type;
  if (type.31_264 == 73)
    goto <bb 98>;
  else
    goto <bb 99>;

  <bb 98>:
  MEM[(int *)&pic] = 1;
  goto <bb 108>;

  <bb 99>:
  if (type.31_264 == 105)
    goto <bb 100>;
  else
    goto <bb 101>;

  <bb 100>:
  MEM[(int *)&pic] = 2;
  goto <bb 108>;

  <bb 101>:
  if (type.31_264 == 80)
    goto <bb 102>;
  else
    goto <bb 103>;

  <bb 102>:
  MEM[(int *)&pic] = 3;
  goto <bb 108>;

  <bb 103>:
  if (type.31_264 == 66)
    goto <bb 104>;
  else
    goto <bb 105>;

  <bb 104>:
  MEM[(int *)&pic] = 4;
  goto <bb 108>;

  <bb 105>:
  if (type.31_264 == 98)
    goto <bb 107>;
  else
    goto <bb 106>;

  <bb 106>:
  stderr.32_266 = stderr;
  # DEBUG __stream => stderr.32_266
  # DEBUG __fmt => "x264 [error]: can\'t parse qpfile for frame %d\n"
  __fprintf_chk (stderr.32_266, 1, "x264 [error]: can\'t parse qpfile for frame %d\n", _169);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  _267 = MEM[(struct FILE * *)&opt + 24B];
  fclose (_267);
  MEM[(struct FILE * *)&opt + 24B] = 0B;
  MEM[(int *)&pic] = 0;
  MEM[(int *)&pic + 4B] = 0;
  goto <bb 112>;

  <bb 107>:
  MEM[(int *)&pic] = 5;

  <bb 108>:
  # DEBUG ret => ret_277
  _459 = ret_277 != 3;
  _189 = (unsigned int) qp.30_262;
  _288 = _189 + 1;
  _271 = _288 > 52;
  _139 = _271 | _459;
  if (_139 != 0)
    goto <bb 106>;
  else
    goto <bb 109>;

  <bb 109>:

  <bb 110>:
  # prephitmp_33 = PHI <num.28_280(109), -1(92)>

  <bb 111>:
  # prephitmp_465 = PHI <prephitmp_33(110), num.28_260(96)>
  if (_169 > prephitmp_465)
    goto <bb 93>;
  else
    goto <bb 112>;

  <bb 112>:
  num ={v} {CLOBBER};
  qp ={v} {CLOBBER};
  type ={v} {CLOBBER};
  goto <bb 114>;

  <bb 113>:
  pic.i_type = 0;
  pic.i_qpplus1 = 0;

  <bb 114>:
  _171 = opt.hout;
  _172 = Encode_frame (h_142, _171, &pic);
  _173 = (long int) _172;
  i_file_175 = _173 + i_file_174;
  # DEBUG i_file => i_file_175
  i_frame_176 = i_frame_159 + 1;
  # DEBUG i_frame => i_frame_176
  _177 = opt.b_progress;
  if (_177 != 0)
    goto <bb 115>;
  else
    goto <bb 122>;

  <bb 115>:
  _179 = i_frame_176 % i_update_interval_178;
  if (_179 == 0)
    goto <bb 116>;
  else
    goto <bb 122>;

  <bb 116>:
  _180 = x264_mdate ();
  i_elapsed_181 = _180 - i_start_156;
  # DEBUG i_elapsed => i_elapsed_181
  if (i_elapsed_181 > 0)
    goto <bb 117>;
  else
    goto <bb 118>;

  <bb 117>:
  _182 = (double) i_frame_176;
  _183 = _182 * 1.0e+6;
  _184 = (double) i_elapsed_181;
  fps_185 = _183 / _184;

  <bb 118>:
  # fps_211 = PHI <0.0(116), fps_185(117)>
  # DEBUG fps => fps_211
  _186 = (double) i_file_175;
  _187 = param.i_fps_num;
  _188 = (double) _187;
  _194 = _188 * 8.0e+0;
  _190 = _186 * _194;
  _191 = param.i_fps_den;
  _192 = (double) _191;
  _193 = (double) i_frame_176;
  _244 = _192 * 1.0e+3;
  _195 = _193 * _244;
  bitrate_196 = _190 / _195;
  # DEBUG bitrate => bitrate_196
  if (i_frame_total_444 != 0)
    goto <bb 119>;
  else
    goto <bb 120>;

  <bb 119>:
  _197 = i_frame_total_444 - i_frame_176;
  _198 = (long int) _197;
  _199 = i_elapsed_181 * _198;
  _200 = (long int) i_frame_176;
  _201 = _200 * 1000000;
  _202 = _199 / _201;
  eta_203 = (int) _202;
  # DEBUG eta => eta_203
  _204 = eta_203 % 60;
  _205 = eta_203 / 60;
  _206 = _205 % 60;
  _207 = eta_203 / 3600;
  _208 = _193 * 1.0e+2;
  _210 = reciptmp_451 * _208;
  # DEBUG __s => &buf
  # DEBUG __fmt => "x264 [%.1f%%] %d/%d frames, %.2f fps, %.2f kb/s, eta %d:%02d:%02d"
  __builtin___sprintf_chk (&buf, 1, 200, "x264 [%.1f%%] %d/%d frames, %.2f fps, %.2f kb/s, eta %d:%02d:%02d", _210, i_frame_176, i_frame_total_444, fps_211, bitrate_196, _207, _206, _204);
  goto <bb 121>;

  <bb 120>:
  # DEBUG __s => &buf
  # DEBUG __fmt => "x264 %d frames: %.2f fps, %.2f kb/s"
  __builtin___sprintf_chk (&buf, 1, 200, "x264 %d frames: %.2f fps, %.2f kb/s", i_frame_176, fps_211, bitrate_196);

  <bb 121>:
  stderr.18_212 = stderr;
  # DEBUG __stream => stderr.18_212
  # DEBUG __fmt => "%s  \r"
  __fprintf_chk (stderr.18_212, 1, "%s  \r", &MEM[(void *)&buf + 5B]);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  stderr.18_213 = stderr;
  fflush (stderr.18_213);

  <bb 122>:

  <bb 123>:
  # i_frame_159 = PHI <i_frame_176(122), 0(87)>
  # i_file_174 = PHI <i_file_175(122), 0(87)>
  # DEBUG i_file => i_file_174
  # DEBUG i_frame => i_frame_159
  b_ctrl_c.24_214 = b_ctrl_c;
  if (b_ctrl_c.24_214 == 0)
    goto <bb 125>;
  else
    goto <bb 124>;

  <bb 124>:
  # i_frame_40 = PHI <i_frame_159(123)>
  # i_file_95 = PHI <i_file_174(123)>
  goto <bb 90>;

  <bb 125>:
  _215 = i_frame_159 < i_frame_total_444;
  _216 = i_frame_total_444 == 0;
  _217 = _215 | _216;
  if (_217 != 0)
    goto <bb 88>;
  else
    goto <bb 126>;

  <bb 126>:
  # i_frame_83 = PHI <i_frame_159(125)>
  # i_file_455 = PHI <i_file_174(125)>
  goto <bb 90>;

  <bb 127>:

  <bb 128>:
  # i_file_221 = PHI <i_file_452(90), i_file_222(127)>
  # DEBUG i_file => i_file_221
  _218 = opt.hout;
  i_frame_size_219 = Encode_frame (h_142, _218, 0B);
  # DEBUG i_frame_size => i_frame_size_219
  _220 = (long int) i_frame_size_219;
  i_file_222 = _220 + i_file_221;
  # DEBUG i_file => i_file_222
  if (i_frame_size_219 != 0)
    goto <bb 127>;
  else
    goto <bb 129>;

  <bb 129>:
  # i_file_464 = PHI <i_file_222(128)>
  i_end_223 = x264_mdate ();
  # DEBUG i_end => i_end_223
  x264_picture_clean (&pic);
  _224 = opt.b_progress;
  if (_224 != 0)
    goto <bb 130>;
  else
    goto <bb 131>;

  <bb 130>:
  stderr.18_225 = stderr;
  # DEBUG __stream => stderr.18_225
  # DEBUG __fmt => "                                                                               \r"
  __builtin_fwrite ("                                                                               \r", 1, 80, stderr.18_225);

  <bb 131>:
  x264_encoder_close (h_142);
  mux_buffer.26_226 = mux_buffer;
  x264_free (mux_buffer.26_226);
  stderr.18_227 = stderr;
  # DEBUG __stream => stderr.18_227
  # DEBUG __fmt => "\n"
  __builtin_fputc (10, stderr.18_227);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  b_ctrl_c.24_228 = b_ctrl_c;
  if (b_ctrl_c.24_228 != 0)
    goto <bb 132>;
  else
    goto <bb 133>;

  <bb 132>:
  _229 = opt.i_seek;
  _230 = i_frame_124 + _229;
  stderr.18_231 = stderr;
  # DEBUG __stream => stderr.18_231
  # DEBUG __fmt => "aborted at input frame %d\n"
  __fprintf_chk (stderr.18_231, 1, "aborted at input frame %d\n", _230);

  <bb 133>:
  p_close_infile.19_232 = p_close_infile;
  _233 = opt.hin;
  p_close_infile.19_232 (_233);
  p_close_outfile.21_234 = p_close_outfile;
  _235 = opt.hout;
  p_close_outfile.21_234 (_235);
  if (i_frame_124 > 0)
    goto <bb 134>;
  else
    goto <bb 135>;

  <bb 134>:
  _236 = (double) i_frame_124;
  _237 = _236 * 1.0e+6;
  _238 = i_end_223 - i_start_156;
  _239 = (double) _238;
  fps_240 = _237 / _239;
  # DEBUG fps => fps_240
  _241 = (double) i_file_464;
  _242 = param.i_fps_num;
  _243 = (double) _242;
  _248 = _243 * 8.0e+0;
  _245 = _241 * _248;
  _246 = param.i_fps_den;
  _247 = (double) _246;
  _37 = _247 * 1.0e+3;
  _249 = _37 * _236;
  _250 = _245 / _249;
  stderr.18_251 = stderr;
  # DEBUG __stream => stderr.18_251
  # DEBUG __fmt => "encoded %d frames, %.2f fps, %.2f kb/s\n"
  __fprintf_chk (stderr.18_251, 1, "encoded %d frames, %.2f fps, %.2f kb/s\n", i_frame_124, fps_240, _250);

  <bb 135>:
  # _252 = PHI <-1(84), -1(86), 0(133), 0(134)>
  pic ={v} {CLOBBER};
  buf ={v} {CLOBBER};
  # DEBUG param => NULL
  # DEBUG opt => NULL
  # DEBUG fps => NULL
  # DEBUG eta => NULL
  # DEBUG bitrate => NULL
  # DEBUG fps => NULL
  # DEBUG i_elapsed => NULL
  # DEBUG i_update_interval => NULL
  # DEBUG i_frame_size => NULL
  # DEBUG i_file => NULL
  # DEBUG i_end => NULL
  # DEBUG i_start => NULL
  # DEBUG i_frame_total => NULL
  # DEBUG i_frame => NULL
  # DEBUG h => NULL
  # DEBUG ret => NULL

  <bb 136>:
  # _1 = PHI <-1(140), _252(135)>
  param ={v} {CLOBBER};
  opt ={v} {CLOBBER};
  return _1;

  # b_thread_input_105 = PHI <b_thread_input_119(25), b_thread_input_119(24), b_thread_input_119(23), b_thread_input_119(22), b_thread_input_119(21), b_thread_input_119(17), b_thread_input_119(16), b_thread_input_119(9), b_thread_input_119(8), 1(4)>
<L17>:
  # DEBUG b_error => 0
  # DEBUG b_thread_input => b_thread_input_105
  goto <bb 40>;

  <bb 138>:

  <bb 139>:
  _111 = param.i_width;
  if (_111 == 0)
    goto <bb 69>;
  else
    goto <bb 68>;

  <bb 140>:
  defaults ={v} {CLOBBER};
  # DEBUG argc => NULL
  # DEBUG argv => NULL
  # DEBUG param => NULL
  # DEBUG opt => NULL
  # DEBUG name => NULL
  # DEBUG i => NULL
  # DEBUG __result => NULL
  # DEBUG c => NULL
  # DEBUG long_options_index => NULL
  # DEBUG b_error => NULL
  # DEBUG b_thread_input => NULL
  # DEBUG b_y4m => NULL
  # DEBUG b_avis => NULL
  # DEBUG psz => NULL
  goto <bb 136>;

  <bb 141>:

  <bb 142>:
  defaults ={v} {CLOBBER};
  # DEBUG argc => NULL
  # DEBUG argv => NULL
  # DEBUG param => NULL
  # DEBUG opt => NULL
  # DEBUG name => NULL
  # DEBUG i => NULL
  # DEBUG __result => NULL
  # DEBUG c => NULL
  # DEBUG long_options_index => NULL
  # DEBUG b_error => NULL
  # DEBUG b_thread_input => NULL
  # DEBUG b_y4m => NULL
  # DEBUG b_avis => NULL
  # DEBUG psz => NULL
  # DEBUG argc => NULL
  # DEBUG argv => NULL
  # DEBUG param => NULL
  # DEBUG opt => NULL
  # DEBUG name => NULL
  # DEBUG i => NULL
  # DEBUG __result => NULL
  # DEBUG c => NULL
  # DEBUG long_options_index => NULL
  # DEBUG b_error => NULL
  # DEBUG b_thread_input => NULL
  # DEBUG b_y4m => NULL
  # DEBUG b_avis => NULL
  # DEBUG psz => NULL
  signal (2, SigIntHandler);
  # DEBUG param => &param
  # DEBUG opt => &opt
  _9 = opt.b_progress;
  _128 = param.i_log_level;
  _129 = _128 <= 2;
  _130 = (int) _129;
  _131 = _9 & _130;
  opt.b_progress = _131;
  p_get_frame_total.16_132 = p_get_frame_total;
  _133 = opt.hin;
  i_frame_total_134 = p_get_frame_total.16_132 (_133);
  # DEBUG i_frame_total => i_frame_total_134
  _135 = opt.i_seek;
  i_frame_total_136 = i_frame_total_134 - _135;
  # DEBUG i_frame_total => i_frame_total_136
  if (i_frame_total_136 == 0)
    goto <bb 147>;
  else
    goto <bb 80>;

  <bb 143>:
  # i_frame_total_457 = PHI <i_frame_total_460(147), i_frame_total_136(80), _137(145)>
  # DEBUG i_frame_total => i_frame_total_457
  param.i_frame_total = i_frame_total_457;
  goto <bb 81>;

  <bb 144>:
  # DEBUG i_frame_total => i_frame_total_136
  param.i_frame_total = i_frame_total_136;
  goto <bb 81>;

  <bb 145>:
  if (_137 > 0)
    goto <bb 143>;
  else
    goto <bb 144>;

  <bb 146>:
  # DEBUG i_frame_total => i_frame_total_136
  param.i_frame_total = i_frame_total_136;
  goto <bb 83>;

  <bb 147>:
  i_frame_total_460 = param.i_frame_total;
  if (i_frame_total_460 > 0)
    goto <bb 143>;
  else
    goto <bb 146>;

  <bb 148>:
  p_open_infile = open_file_y4m;
  p_get_frame_total = get_frame_total_y4m;
  p_read_frame = read_frame_y4m;
  p_close_infile = close_file_y4m;
  goto <bb 71>;

  <bb 149>:
  # DEBUG b_y4m => 1
  if (b_avis_89 != 0)
    goto <bb 70>;
  else
    goto <bb 148>;

}


