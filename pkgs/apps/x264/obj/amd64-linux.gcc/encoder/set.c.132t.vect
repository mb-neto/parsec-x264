
;; Function scaling_list_write (scaling_list_write, funcdef_no=128, decl_uid=7068, cgraph_uid=128, symbol_order=171)


Analyzing loop at encoder/set.c:69
encoder/set.c:69:9: note: ===== analyze_loop_nest =====
encoder/set.c:69:9: note: === vect_analyze_loop_form ===
encoder/set.c:69:9: note: not vectorized: control flow in loop.
encoder/set.c:69:9: note: bad loop form.

Analyzing loop at encoder/set.c:64
encoder/set.c:64:28: note: ===== analyze_loop_nest =====
encoder/set.c:64:28: note: === vect_analyze_loop_form ===
encoder/set.c:64:28: note: not vectorized: control flow in loop.
encoder/set.c:64:28: note: bad loop form.
encoder/set.c:42:13: note: vectorized 0 loops in function.
scaling_list_write (struct bs_t * s, struct x264_pps_t * pps, int idx)
{
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  int run;
  int j;
  const uint8_t * def_list;
  const uint8_t * list;
  const uint8_t * zigzag;
  unsigned char iftmp.15_2;
  unsigned char iftmp.15_7;
  int _18;
  const uint8_t * _20;
  int _21;
  long int _22;
  long int _23;
  int _24;
  sizetype _25;
  sizetype _26;
  const uint8_t * _27;
  unsigned char _28;
  sizetype _29;
  const uint8_t * _30;
  unsigned char _31;
  sizetype _32;
  const uint8_t * _33;
  unsigned char _34;
  sizetype _35;
  const uint8_t * _36;
  unsigned char _37;
  int _39;
  sizetype _40;
  const uint8_t * _41;
  unsigned char _42;
  sizetype _43;
  const uint8_t * _44;
  unsigned char _45;
  unsigned char _46;
  signed char _47;
  int _48;
  long int _49;
  sizetype _50;
  const uint8_t * _51;
  unsigned char _52;
  sizetype _53;
  const uint8_t * _54;
  unsigned char _55;
  sizetype _56;
  const uint8_t * _57;
  unsigned char _58;
  sizetype _59;
  const uint8_t * _60;
  unsigned char iftmp.15_61;
  unsigned char _62;
  signed char _63;
  int _64;
  int _65;
  sizetype _67;
  const uint8_t * _68;
  unsigned char _69;
  sizetype _70;
  const uint8_t * _71;
  unsigned char _72;
  unsigned char _73;
  signed char _74;
  int _75;
  long int _77;
  int _78;
  int _79;
  uint8_t * _80;
  long int _81;
  unsigned int _83;
  int _84;
  int _85;
  uint8_t * _86;
  long int _89;
  long int _90;
  int _92;
  uint8_t * _93;
  long int _94;
  unsigned int _96;
  int _97;
  int _98;
  uint8_t * _99;
  long int _100;
  long int _101;
  int _102;
  int _103;
  uint8_t * _104;
  long int _105;
  unsigned int _107;
  int _108;
  int _109;
  uint8_t * _110;
  long int _111;
  long int _112;
  int _113;
  int _114;
  uint8_t * _115;
  long int _116;
  unsigned int _118;
  int _119;
  int _120;
  uint8_t * _121;
  unsigned int iftmp.16_122;
  int _123;
  int _124;
  unsigned int iftmp.16_125;
  unsigned char _126;
  unsigned int _127;
  unsigned char _128;
  int _129;
  unsigned char _131;
  int _135;
  int _156;
  sizetype _159;
  long int _168;
  long int _169;
  long int _170;
  int _171;
  int _172;
  uint8_t * _173;
  long int _174;
  unsigned int _176;
  int _177;
  int _178;
  uint8_t * _179;
  long int _190;
  long int _191;
  long int _192;
  long int _193;
  int _194;
  int _195;
  uint8_t * _196;
  long int _197;
  unsigned int _199;
  int _200;
  int _201;
  uint8_t * _202;
  unsigned int iftmp.16_215;
  unsigned char _243;
  const uint8_t * _244;
  long unsigned int prephitmp_303;
  unsigned char pretmp_305;
  unsigned char pretmp_306;
  int pretmp_308;
  int pretmp_309;
  int prephitmp_313;
  long int prephitmp_315;
  unsigned char pretmp_316;
  unsigned char pretmp_317;
  int pretmp_319;
  int pretmp_320;
  int prephitmp_324;
  int prephitmp_325;
  long unsigned int prephitmp_326;

  <bb 2>:
  if (idx_10(D) <= 3)
    goto <bb 50>;
  else
    goto <bb 51>;

  <bb 3>:
  def_list_14 = pps_12(D)->scaling_list[0];
  goto <bb 7>;

  <bb 4>:
  # run_257 = PHI <16(50), 64(51)>
  # zigzag_256 = PHI <&x264_zigzag_scan4[0](50), &x264_zigzag_scan8[0](51)>
  # list_241 = PHI <list_13(50), list_259(51)>
  # prephitmp_326 = PHI <16(50), 64(51)>
  # DEBUG zigzag => zigzag_256
  # DEBUG list => list_241
  if (idx_10(D) == 3)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  def_list_15 = pps_12(D)->scaling_list[1];
  goto <bb 7>;

  <bb 6>:
  def_list_16 = x264_cqm_jvt[idx_10(D)];

  <bb 7>:
  # def_list_6 = PHI <def_list_14(3), def_list_16(6), def_list_15(5)>
  # run_255 = PHI <16(3), run_257(6), run_257(5)>
  # zigzag_242 = PHI <&x264_zigzag_scan4[0](3), zigzag_256(6), zigzag_256(5)>
  # list_214 = PHI <list_13(3), list_241(6), list_241(5)>
  # prephitmp_303 = PHI <16(3), prephitmp_326(6), prephitmp_326(5)>
  # DEBUG def_list => def_list_6
  _18 = memcmp (list_214, def_list_6, prephitmp_303);
  if (_18 == 0)
    goto <bb 8>;
  else
    goto <bb 11>;

  <bb 8>:
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => 0
  _49 = s_19(D)->cur_bits;
  _77 = _49 << 1;
  s_19(D)->cur_bits = _77;
  _78 = s_19(D)->i_left;
  _79 = _78 + -1;
  s_19(D)->i_left = _79;
  if (_79 <= 32)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  goto <bb 49>;

  <bb 10>:
  _80 = s_19(D)->p;
  _81 = _77 << _79;
  # DEBUG x => _81
  __asm__("bswap %0" : "=r" x_82 : "0" _81);
  # DEBUG x => x_82
  # DEBUG x => NULL
  _83 = (unsigned int) x_82;
  MEM[(uint32_t *)_80] = _83;
  _84 = s_19(D)->i_left;
  _85 = _84 + 32;
  s_19(D)->i_left = _85;
  _86 = _80 + 4;
  s_19(D)->p = _86;
  goto <bb 49>;

  <bb 11>:
  _20 = x264_cqm_jvt[idx_10(D)];
  _21 = memcmp (list_214, _20, prephitmp_303);
  if (_21 == 0)
    goto <bb 12>;
  else
    goto <bb 16>;

  <bb 12>:
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => 1
  _23 = s_19(D)->cur_bits;
  _100 = _23 << 1;
  _101 = _100 | 1;
  s_19(D)->cur_bits = _101;
  _102 = s_19(D)->i_left;
  _103 = _102 + -1;
  s_19(D)->i_left = _103;
  if (_103 <= 32)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _104 = s_19(D)->p;
  _105 = _101 << _103;
  # DEBUG x => _105
  __asm__("bswap %0" : "=r" x_106 : "0" _105);
  # DEBUG x => x_106
  # DEBUG x => NULL
  _107 = (unsigned int) x_106;
  MEM[(uint32_t *)_104] = _107;
  _108 = s_19(D)->i_left;
  _109 = _108 + 32;
  s_19(D)->i_left = _109;
  _110 = _104 + 4;
  s_19(D)->p = _110;

  <bb 14>:
  # prephitmp_325 = PHI <_109(13), _103(12)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => s_19(D)
  # DEBUG val => -8
  # DEBUG size => 0
  # DEBUG val => 17
  # DEBUG tmp => 17
  # DEBUG tmp => 17
  # DEBUG size => 0
  # DEBUG size => 9
  # DEBUG s => s_19(D)
  # DEBUG i_count => 9
  # DEBUG i_bits => 17
  _89 = _101 << 9;
  _90 = _89 | 17;
  s_19(D)->cur_bits = _90;
  _92 = prephitmp_325 + -9;
  s_19(D)->i_left = _92;
  if (_92 <= 32)
    goto <bb 15>;
  else
    goto <bb 9>;

  <bb 15>:
  _93 = s_19(D)->p;
  _94 = _90 << _92;
  # DEBUG x => _94
  __asm__("bswap %0" : "=r" x_95 : "0" _94);
  # DEBUG x => x_95
  # DEBUG x => NULL
  _96 = (unsigned int) x_95;
  MEM[(uint32_t *)_93] = _96;
  _97 = s_19(D)->i_left;
  _98 = _97 + 32;
  s_19(D)->i_left = _98;
  _99 = _93 + 4;
  s_19(D)->p = _99;
  goto <bb 49>;

  <bb 16>:
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => 1
  _22 = s_19(D)->cur_bits;
  _111 = _22 << 1;
  _112 = _111 | 1;
  s_19(D)->cur_bits = _112;
  _113 = s_19(D)->i_left;
  _114 = _113 + -1;
  s_19(D)->i_left = _114;
  if (_114 <= 32)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  _115 = s_19(D)->p;
  _116 = _112 << _114;
  # DEBUG x => _116
  __asm__("bswap %0" : "=r" x_117 : "0" _116);
  # DEBUG x => x_117
  # DEBUG x => NULL
  _118 = (unsigned int) x_117;
  MEM[(uint32_t *)_115] = _118;
  _119 = s_19(D)->i_left;
  _120 = _119 + 32;
  s_19(D)->i_left = _120;
  _121 = _115 + 4;
  s_19(D)->p = _121;

  <bb 18>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG run => run_255
  # DEBUG run => run_255

  <bb 19>:
  # run_258 = PHI <run_38(22), run_255(18)>
  # DEBUG run => run_258
  _25 = (sizetype) run_258;
  _26 = _25 + 18446744073709551615;
  _27 = zigzag_242 + _26;
  _28 = *_27;
  _29 = (sizetype) _28;
  _30 = list_214 + _29;
  _31 = *_30;
  _32 = _25 + 18446744073709551614;
  _33 = zigzag_242 + _32;
  _34 = *_33;
  _35 = (sizetype) _34;
  _36 = list_214 + _35;
  _37 = *_36;
  if (_31 != _37)
    goto <bb 23>;
  else
    goto <bb 20>;

  <bb 20>:
  run_38 = run_258 + -1;
  # DEBUG run => run_38
  # DEBUG run => run_38
  if (run_38 > 1)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  # run_299 = PHI <run_38(20)>
  goto <bb 24>;

  <bb 22>:
  goto <bb 19>;

  <bb 23>:
  # run_298 = PHI <run_258(19)>
  if (run_255 > run_298)
    goto <bb 24>;
  else
    goto <bb 52>;

  <bb 24>:
  # run_253 = PHI <run_298(23), run_299(21)>
  _39 = run_255 - run_253;
  _40 = (sizetype) run_253;
  _41 = zigzag_242 + _40;
  _42 = *_41;
  _43 = (sizetype) _42;
  _44 = list_214 + _43;
  _45 = *_44;
  _46 = -_45;
  _47 = (signed char) _46;
  _48 = (int) _47;
  # DEBUG val => _48
  if (_48 <= 0)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  _24 = _48 * -2;
  iftmp.16_122 = (unsigned int) _24;
  # DEBUG val => iftmp.16_122
  if (iftmp.16_122 <= 254)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 26>:
  _123 = _48 * 2;
  _124 = _123 + -1;
  iftmp.16_125 = (unsigned int) _124;
  # DEBUG val => iftmp.16_125

  <bb 27>:
  # iftmp.16_215 = PHI <iftmp.16_122(25), iftmp.16_125(26)>
  # DEBUG val => iftmp.16_215
  _127 = iftmp.16_215 + 1;
  _128 = x264_ue_size_tab[_127];
  _129 = (int) _128;

  <bb 28>:
  # _135 = PHI <_129(27), 17(25)>
  # DEBUG val => NULL
  # DEBUG val => NULL
  if (_39 < _135)
    goto <bb 52>;
  else
    goto <bb 29>;

  <bb 29>:
  # DEBUG run => run_253
  # DEBUG j => 0
  # DEBUG j => 0
  if (run_253 > 0)
    goto <bb 30>;
  else
    goto <bb 42>;

  <bb 30>:
  # run_220 = PHI <run_253(29), run_262(52)>
  # DEBUG j => 0
  _243 = *zigzag_242;
  _159 = (sizetype) _243;
  _244 = list_214 + _159;
  _126 = *_244;
  goto <bb 34>;

  <bb 31>:
  # DEBUG j => j_66
  _50 = (sizetype) j_66;
  _51 = zigzag_242 + _50;
  _52 = *_51;
  _53 = (sizetype) _52;
  _54 = list_214 + _53;
  _55 = *_54;
  if (j_66 != 0)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  _56 = _50 + 18446744073709551615;
  _57 = zigzag_242 + _56;
  _58 = *_57;
  _59 = (sizetype) _58;
  _60 = list_214 + _59;
  iftmp.15_61 = *_60;

  <bb 33>:
  # iftmp.15_2 = PHI <iftmp.15_61(32), 8(31)>

  <bb 34>:
  # iftmp.15_7 = PHI <iftmp.15_2(33), 8(30)>
  # _131 = PHI <_55(33), _126(30)>
  # j_166 = PHI <j_66(33), 0(30)>
  # prephitmp_315 = PHI <_170(33), _112(30)>
  _62 = _131 - iftmp.15_7;
  _63 = (signed char) _62;
  _64 = (int) _63;
  # DEBUG s => s_19(D)
  # DEBUG val => _64
  # DEBUG size => 0
  if (_64 <= 0)
    goto <bb 35>;
  else
    goto <bb 37>;

  <bb 35>:
  _156 = _64 * -2;
  val_157 = _156 + 1;
  # DEBUG val => val_157
  # DEBUG tmp => val_157
  if (val_157 > 255)
    goto <bb 38>;
  else
    goto <bb 36>;

  <bb 36>:
  pretmp_317 = x264_ue_size_tab[val_157];
  pretmp_320 = (int) pretmp_317;
  goto <bb 38>;

  <bb 37>:
  val_158 = _64 * 2;
  # DEBUG val => val_158
  # DEBUG tmp => val_158
  pretmp_316 = x264_ue_size_tab[val_158];
  pretmp_319 = (int) pretmp_316;

  <bb 38>:
  # val_216 = PHI <val_158(37), val_157(35), val_157(36)>
  # prephitmp_324 = PHI <pretmp_319(37), 17(35), pretmp_320(36)>
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  # DEBUG D#6 => NULL
  # DEBUG D#5 => (int) D#6
  # DEBUG D#4 => NULL
  # DEBUG size => D#4
  # DEBUG s => s_19(D)
  # DEBUG i_count => D#4
  # DEBUG i_bits => (unsigned int) val_216
  _168 = prephitmp_315 << prephitmp_324;
  _169 = (long int) val_216;
  _170 = _168 | _169;
  s_19(D)->cur_bits = _170;
  _171 = s_19(D)->i_left;
  _172 = _171 - prephitmp_324;
  s_19(D)->i_left = _172;
  if (_172 <= 32)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 39>:
  _173 = s_19(D)->p;
  _174 = _170 << _172;
  # DEBUG x => _174
  __asm__("bswap %0" : "=r" x_175 : "0" _174);
  # DEBUG x => x_175
  # DEBUG x => NULL
  _176 = (unsigned int) x_175;
  MEM[(uint32_t *)_173] = _176;
  _177 = s_19(D)->i_left;
  _178 = _177 + 32;
  s_19(D)->i_left = _178;
  _179 = _173 + 4;
  s_19(D)->p = _179;

  <bb 40>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  j_66 = j_166 + 1;
  # DEBUG j => j_66
  # DEBUG j => j_66
  if (j_66 < run_220)
    goto <bb 31>;
  else
    goto <bb 41>;

  <bb 41>:

  <bb 42>:
  # run_130 = PHI <run_220(41), run_253(29)>
  if (run_130 < run_255)
    goto <bb 43>;
  else
    goto <bb 9>;

  <bb 43>:
  _67 = (sizetype) run_130;
  _68 = zigzag_242 + _67;
  _69 = *_68;
  _70 = (sizetype) _69;
  _71 = list_214 + _70;
  _72 = *_71;
  _73 = -_72;
  _74 = (signed char) _73;
  _75 = (int) _74;
  # DEBUG s => s_19(D)
  # DEBUG val => _75
  # DEBUG size => 0
  if (_75 <= 0)
    goto <bb 44>;
  else
    goto <bb 46>;

  <bb 44>:
  _65 = _75 * -2;
  val_180 = _65 + 1;
  # DEBUG val => val_180
  # DEBUG tmp => val_180
  if (val_180 > 255)
    goto <bb 47>;
  else
    goto <bb 45>;

  <bb 45>:
  pretmp_306 = x264_ue_size_tab[val_180];
  pretmp_309 = (int) pretmp_306;
  goto <bb 47>;

  <bb 46>:
  val_181 = _75 * 2;
  # DEBUG val => val_181
  # DEBUG tmp => val_181
  pretmp_305 = x264_ue_size_tab[val_181];
  pretmp_308 = (int) pretmp_305;

  <bb 47>:
  # val_254 = PHI <val_181(46), val_180(44), val_180(45)>
  # prephitmp_313 = PHI <pretmp_308(46), 17(44), pretmp_309(45)>
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  # DEBUG D#3 => NULL
  # DEBUG D#2 => (int) D#3
  # DEBUG D#1 => NULL
  # DEBUG size => D#1
  # DEBUG s => s_19(D)
  # DEBUG i_count => D#1
  # DEBUG i_bits => (unsigned int) val_254
  _190 = s_19(D)->cur_bits;
  _191 = _190 << prephitmp_313;
  _192 = (long int) val_254;
  _193 = _191 | _192;
  s_19(D)->cur_bits = _193;
  _194 = s_19(D)->i_left;
  _195 = _194 - prephitmp_313;
  s_19(D)->i_left = _195;
  if (_195 <= 32)
    goto <bb 48>;
  else
    goto <bb 9>;

  <bb 48>:
  _196 = s_19(D)->p;
  _197 = _193 << _195;
  # DEBUG x => _197
  __asm__("bswap %0" : "=r" x_198 : "0" _197);
  # DEBUG x => x_198
  # DEBUG x => NULL
  _199 = (unsigned int) x_198;
  MEM[(uint32_t *)_196] = _199;
  _200 = s_19(D)->i_left;
  _201 = _200 + 32;
  s_19(D)->i_left = _201;
  _202 = _196 + 4;
  s_19(D)->p = _202;

  <bb 49>:
  return;

  <bb 50>:
  # DEBUG len => 16
  # DEBUG len => 16
  # DEBUG zigzag => &x264_zigzag_scan4[0]
  list_13 = pps_12(D)->scaling_list[idx_10(D)];
  # DEBUG list => list_13
  if (idx_10(D) == 2)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 51>:
  # DEBUG len => 64
  # DEBUG len => 64
  # DEBUG zigzag => &x264_zigzag_scan8[0]
  list_259 = pps_12(D)->scaling_list[idx_10(D)];
  # DEBUG list => list_259
  goto <bb 4>;

  <bb 52>:
  # run_262 = PHI <run_255(28), run_298(23)>
  # DEBUG run => run_262
  # DEBUG j => 0
  # DEBUG j => 0
  if (run_262 > 0)
    goto <bb 30>;
  else
    goto <bb 9>;

}



;; Function x264_sps_init (x264_sps_init, funcdef_no=129, decl_uid=7034, cgraph_uid=129, symbol_order=172)


Analyzing loop at encoder/set.c:100
encoder/set.c:100:10: note: ===== analyze_loop_nest =====
encoder/set.c:100:10: note: === vect_analyze_loop_form ===
encoder/set.c:100:10: note: === get_loop_niters ===
encoder/set.c:100:10: note: not vectorized: number of iterations cannot be computed.
encoder/set.c:100:10: note: bad loop form.
encoder/set.c:77:6: note: vectorized 0 loops in function.
x264_sps_init (struct x264_sps_t * sps, int i_id, struct x264_param_t * param)
{
  _Bool sps__i_log2_max_frame_num_lsm.58;
  int sps__i_log2_max_frame_num_lsm.57;
  int iftmp.0_1;
  int iftmp.2_3;
  int iftmp.3_4;
  int iftmp.4_5;
  int iftmp.5_6;
  signed long _21;
  _Bool _22;
  int _23;
  int _26;
  int _27;
  int _28;
  int _29;
  int _33;
  int _45;
  int _47;
  int _56;
  int _57;
  int _58;
  int _60;
  int _61;
  int _62;
  int _64;
  int _65;
  int _66;
  _Bool _68;
  int _69;
  int _72;
  unsigned int _73;
  unsigned int _74;
  int _78;
  int _79;
  int _82;
  int _83;
  int _84;
  int _88;
  int _89;
  int _93;
  _Bool _94;
  int _95;
  _Bool _97;
  int _98;
  int _101;
  int _102;
  int _104;
  _Bool _105;
  int _106;
  int _109;
  int _111;
  int _113;
  int _118;
  _Bool _119;
  int _120;
  int _125;
  int _126;
  int _129;
  int _132;
  int _133;
  _Bool _134;
  int iftmp.5_135;
  int _138;
  int _139;
  int _140;
  int _147;
  int _148;
  int _149;
  double _150;
  double _151;
  double _152;
  int _153;
  int _154;
  int _157;
  int prephitmp_158;
  _Bool _160;
  _Bool _163;
  int _165;
  int prephitmp_167;
  _Bool _169;
  _Bool _170;
  int _172;
  _Bool _173;
  int _184;
  int _185;
  int _186;
  int _188;
  _Bool _189;
  int pretmp_193;
  int prephitmp_194;
  int pretmp_195;
  int prephitmp_196;
  int prephitmp_197;
  _Bool pretmp_198;
  _Bool prephitmp_199;
  _Bool pretmp_200;
  _Bool prephitmp_201;
  _Bool pretmp_202;
  _Bool prephitmp_203;
  int pretmp_204;
  int prephitmp_205;

  <bb 2>:
  sps_17(D)->i_id = i_id_18(D);
  _21 = BIT_FIELD_REF <*param_20(D), 64, 3776>;
  _22 = _21 == 0;
  _23 = (int) _22;
  sps_17(D)->b_qpprime_y_zero_transform_bypass = _23;
  if (_21 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  sps_17(D)->i_profile_idc = 244;
  goto <bb 11>;

  <bb 4>:
  _26 = param_20(D)->analyse.b_transform_8x8;
  if (_26 != 0)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  _27 = param_20(D)->i_cqm_preset;
  if (_27 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  sps_17(D)->i_profile_idc = 100;
  goto <bb 11>;

  <bb 7>:
  _28 = param_20(D)->b_cabac;
  if (_28 != 0)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  _29 = param_20(D)->i_bframe;
  if (_29 > 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  sps_17(D)->i_profile_idc = 77;
  goto <bb 11>;

  <bb 10>:
  sps_17(D)->i_profile_idc = 66;

  <bb 11>:
  # prephitmp_167 = PHI <0(3), 0(6), 0(9), 1(10)>
  # prephitmp_158 = PHI <0(3), 0(6), 1(9), 1(10)>
  _33 = param_20(D)->i_level_idc;
  sps_17(D)->i_level_idc = _33;
  sps_17(D)->b_constraint_set0 = prephitmp_167;
  sps_17(D)->b_constraint_set1 = prephitmp_158;
  sps_17(D)->b_constraint_set2 = 0;
  sps_17(D)->i_log2_max_frame_num = 4;
  _185 = param_20(D)->i_keyint_max;
  if (_185 > 15)
    goto <bb 12>;
  else
    goto <bb 16>;

  <bb 12>:

  <bb 13>:
  # _165 = PHI <4(12), _47(14)>
  _47 = _165 + 1;
  _45 = 1 << _47;
  if (_45 <= _185)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:
  goto <bb 13>;

  <bb 15>:
  # _184 = PHI <_47(13)>
  # sps__i_log2_max_frame_num_lsm.57_162 = PHI <_47(13)>
  sps_17(D)->i_log2_max_frame_num = sps__i_log2_max_frame_num_lsm.57_162;
  pretmp_193 = _184 + 1;
  pretmp_195 = _184 + 2;

  <bb 16>:
  # prephitmp_194 = PHI <pretmp_193(15), 5(11)>
  # prephitmp_196 = PHI <pretmp_195(15), 6(11)>
  sps_17(D)->i_log2_max_frame_num = prephitmp_194;
  sps_17(D)->i_poc_type = 0;
  sps_17(D)->i_log2_max_poc_lsb = prephitmp_196;
  sps_17(D)->b_vui = 1;
  sps_17(D)->b_gaps_in_frame_num_value_allowed = 0;
  _56 = param_20(D)->i_width;
  _57 = _56 + 15;
  _58 = _57 / 16;
  sps_17(D)->i_mb_width = _58;
  _60 = param_20(D)->i_height;
  _61 = _60 + 15;
  _62 = _61 / 16;
  sps_17(D)->i_mb_height = _62;
  _64 = param_20(D)->b_interlaced;
  if (_64 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  _65 = _62 + 1;
  _66 = _65 & -2;
  sps_17(D)->i_mb_height = _66;

  <bb 18>:
  # prephitmp_197 = PHI <_62(16), _66(17)>
  _68 = _64 == 0;
  _69 = (int) _68;
  sps_17(D)->b_frame_mbs_only = _69;
  sps_17(D)->b_mb_adaptive_frame_field = _64;
  _72 = param_20(D)->analyse.i_direct_8x8_inference;
  _157 = _64 | _72;
  if (_157 != 0)
    goto <bb 20>;
  else
    goto <bb 19>;

  <bb 19>:
  _73 = param_20(D)->analyse.inter;
  _74 = _73 & 32;
  _189 = _74 == 0;
  _186 = (int) _189;

  <bb 20>:
  # iftmp.0_1 = PHI <1(18), _186(19)>
  sps_17(D)->b_direct8x8_inference = iftmp.0_1;
  sps_17(D)->crop.i_left = 0;
  sps_17(D)->crop.i_top = 0;
  _78 = _58 * 16;
  _79 = _78 - _56;
  sps_17(D)->crop.i_right = _79;
  _82 = prephitmp_197 * 16;
  _83 = _82 - _60;
  _84 = _83 >> _64;
  sps_17(D)->crop.i_bottom = _84;
  _172 = _79 | _84;
  _163 = _172 != 0;
  _188 = (int) _163;
  sps_17(D)->b_crop = _188;
  sps_17(D)->vui.b_aspect_ratio_info_present = 0;
  _88 = param_20(D)->vui.i_sar_width;
  if (_88 > 0)
    goto <bb 21>;
  else
    goto <bb 23>;

  <bb 21>:
  _89 = param_20(D)->vui.i_sar_height;
  if (_89 > 0)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  sps_17(D)->vui.b_aspect_ratio_info_present = 1;
  sps_17(D)->vui.i_sar_width = _88;
  sps_17(D)->vui.i_sar_height = _89;

  <bb 23>:
  _93 = param_20(D)->vui.i_overscan;
  _94 = _93 != 0;
  _95 = (int) _94;
  sps_17(D)->vui.b_overscan_info_present = _95;
  if (_93 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  _97 = _93 == 2;
  _98 = (int) _97;
  sps_17(D)->vui.b_overscan_info = _98;

  <bb 25>:
  sps_17(D)->vui.b_signal_type_present = 0;
  _101 = param_20(D)->vui.i_vidformat;
  _102 = MIN_EXPR <_101, 5>;
  sps_17(D)->vui.i_vidformat = _102;
  _104 = param_20(D)->vui.b_fullrange;
  _105 = _104 != 0;
  _106 = (int) _105;
  sps_17(D)->vui.b_fullrange = _106;
  sps_17(D)->vui.b_color_description_present = 0;
  _109 = param_20(D)->vui.i_colorprim;
  if (_109 <= 9)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  pretmp_198 = _109 != 2;

  <bb 27>:
  # iftmp.2_3 = PHI <_109(26), 2(25)>
  # prephitmp_199 = PHI <pretmp_198(26), 0(25)>
  sps_17(D)->vui.i_colorprim = iftmp.2_3;
  _111 = param_20(D)->vui.i_transfer;
  if (_111 <= 11)
    goto <bb 28>;
  else
    goto <bb 29>;

  <bb 28>:
  pretmp_200 = _111 != 2;

  <bb 29>:
  # iftmp.3_4 = PHI <_111(28), 2(27)>
  # prephitmp_201 = PHI <pretmp_200(28), 0(27)>
  sps_17(D)->vui.i_transfer = iftmp.3_4;
  _113 = param_20(D)->vui.i_colmatrix;
  if (_113 <= 9)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  pretmp_202 = _113 != 2;

  <bb 31>:
  # iftmp.4_5 = PHI <_113(30), 2(29)>
  # prephitmp_203 = PHI <pretmp_202(30), 0(29)>
  sps_17(D)->vui.i_colmatrix = iftmp.4_5;
  _173 = prephitmp_199 | prephitmp_201;
  _160 = _173 | prephitmp_203;
  if (_160 != 0)
    goto <bb 32>;
  else
    goto <bb 42>;

  <bb 32>:
  sps_17(D)->vui.b_color_description_present = 1;

  <bb 33>:
  sps_17(D)->vui.b_signal_type_present = 1;

  <bb 34>:
  _118 = param_20(D)->vui.i_chroma_loc;
  _119 = _118 != 0;
  _120 = (int) _119;
  sps_17(D)->vui.b_chroma_loc_info_present = _120;
  if (_118 != 0)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 35>:
  sps_17(D)->vui.i_chroma_loc_top = _118;
  sps_17(D)->vui.i_chroma_loc_bottom = _118;

  <bb 36>:
  sps_17(D)->vui.b_timing_info_present = 0;
  _125 = param_20(D)->i_fps_num;
  if (_125 > 0)
    goto <bb 37>;
  else
    goto <bb 39>;

  <bb 37>:
  _126 = param_20(D)->i_fps_den;
  if (_126 > 0)
    goto <bb 38>;
  else
    goto <bb 39>;

  <bb 38>:
  sps_17(D)->vui.b_timing_info_present = 1;
  sps_17(D)->vui.i_num_units_in_tick = _126;
  _129 = _125 * 2;
  sps_17(D)->vui.i_time_scale = _129;
  sps_17(D)->vui.b_fixed_frame_rate = 1;

  <bb 39>:
  _132 = param_20(D)->b_bframe_pyramid;
  if (_132 == 0)
    goto <bb 40>;
  else
    goto <bb 41>;

  <bb 40>:
  _133 = param_20(D)->i_bframe;
  _134 = _133 != 0;
  iftmp.5_135 = (int) _134;
  pretmp_204 = iftmp.5_135 + 1;

  <bb 41>:
  # iftmp.5_6 = PHI <iftmp.5_135(40), 2(39)>
  # prephitmp_205 = PHI <pretmp_204(40), 3(39)>
  sps_17(D)->vui.i_num_reorder_frames = iftmp.5_6;
  _138 = param_20(D)->i_frame_reference;
  _139 = MAX_EXPR <_138, prephitmp_205>;
  _140 = MIN_EXPR <_139, 16>;
  sps_17(D)->i_num_ref_frames = _140;
  sps_17(D)->vui.i_max_dec_frame_buffering = _140;
  sps_17(D)->vui.b_bitstream_restriction = 1;
  sps_17(D)->vui.b_motion_vectors_over_pic_boundaries = 1;
  sps_17(D)->vui.i_max_bytes_per_pic_denom = 0;
  sps_17(D)->vui.i_max_bits_per_mb_denom = 0;
  _147 = param_20(D)->analyse.i_mv_range;
  _148 = _147 * 4;
  _149 = _148 + -1;
  _150 = (double) _149;
  _151 = log (_150);
  _152 = _151 * 1.442695040888963387004650940070860087871551513671875e+0;
  _153 = (int) _152;
  _154 = _153 + 1;
  sps_17(D)->vui.i_log2_max_mv_length_vertical = _154;
  sps_17(D)->vui.i_log2_max_mv_length_horizontal = _154;
  return;

  <bb 42>:
  _170 = _102 != 5;
  _169 = _105 | _170;
  if (_169 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

}



;; Function x264_sps_write (x264_sps_write, funcdef_no=130, decl_uid=7037, cgraph_uid=130, symbol_order=173)


Analyzing loop at encoder/set.c:301
encoder/set.c:301:27: note: ===== analyze_loop_nest =====
encoder/set.c:301:27: note: === vect_analyze_loop_form ===
encoder/set.c:301:27: note: not vectorized: control flow in loop.
encoder/set.c:301:27: note: bad loop form.

Analyzing loop at encoder/set.c:253
encoder/set.c:253:9: note: ===== analyze_loop_nest =====
encoder/set.c:253:9: note: === vect_analyze_loop_form ===
encoder/set.c:253:9: note: not vectorized: control flow in loop.
encoder/set.c:253:9: note: bad loop form.
encoder/set.c:216:6: note: vectorized 0 loops in function.
x264_sps_write (struct bs_t * s, struct x264_sps_t * sps)
{
  _Bool s__cur_bits_lsm.66;
  intptr_t s__cur_bits_lsm.65;
  intptr_t x;
  uint32_t x;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  int size;
  int tmp;
  intptr_t x;
  intptr_t x;
  unsigned int val;
  uint32_t x;
  uint32_t x;
  uint32_t x;
  uint32_t x;
  uint32_t x;
  uint32_t x;
  uint32_t x;
  uint32_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  uint32_t x;
  uint32_t x;
  uint32_t x;
  uint32_t x;
  uint32_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  uint32_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  static const struct 
  {
    int w;
    int h;
    int sar;
  } sar[14] = {{.w=1, .h=1, .sar=1}, {.w=12, .h=11, .sar=2}, {.w=10, .h=11, .sar=3}, {.w=16, .h=11, .sar=4}, {.w=40, .h=33, .sar=5}, {.w=24, .h=11, .sar=6}, {.w=20, .h=11, .sar=7}, {.w=32, .h=11, .sar=8}, {.w=80, .h=33, .sar=9}, {.w=18, .h=11, .sar=10}, {.w=15, .h=11, .sar=11}, {.w=64, .h=33, .sar=12}, {.w=160, .h=99, .sar=13}, {.w=0, .h=0, .sar=-1}};
  int i;
  int i;
  int _17;
  unsigned int _18;
  int _20;
  unsigned int _21;
  long int _22;
  int _23;
  unsigned int _24;
  int _26;
  unsigned int _27;
  int _28;
  unsigned int _29;
  int _30;
  unsigned int _31;
  int _33;
  int _37;
  unsigned int _38;
  int _41;
  int _42;
  unsigned int _43;
  int _45;
  unsigned int _46;
  int _48;
  int _49;
  int _50;
  unsigned int _51;
  int _53;
  unsigned int _54;
  int _56;
  int _57;
  int _58;
  int _59;
  int _60;
  unsigned int _61;
  int _62;
  int _63;
  int _64;
  int _67;
  unsigned int _68;
  int _70;
  unsigned int _71;
  int _73;
  int _74;
  unsigned int _75;
  int _77;
  int _78;
  int _79;
  unsigned int _80;
  int _82;
  int _83;
  int _84;
  unsigned int _85;
  int _87;
  unsigned int _88;
  int _90;
  unsigned int _91;
  int _92;
  unsigned int _93;
  int _95;
  unsigned int _96;
  int _99;
  int _100;
  unsigned int _101;
  int _103;
  int _104;
  unsigned int _105;
  int _107;
  int _108;
  unsigned int _109;
  int _111;
  int _112;
  unsigned int _113;
  int _115;
  unsigned int _116;
  int _118;
  unsigned int _119;
  int _120;
  int _121;
  int _122;
  int _125;
  int _126;
  unsigned int _127;
  unsigned int _130;
  int _131;
  unsigned int _132;
  int _133;
  unsigned int _134;
  int _136;
  unsigned int _137;
  int _139;
  unsigned int _140;
  int _142;
  unsigned int _143;
  int _144;
  unsigned int _145;
  int _146;
  unsigned int _147;
  int _149;
  unsigned int _150;
  int _152;
  unsigned int _153;
  int _154;
  unsigned int _155;
  int _156;
  unsigned int _157;
  int _160;
  unsigned int _161;
  unsigned int _162;
  int _163;
  unsigned int _164;
  int _166;
  unsigned int _167;
  int _170;
  unsigned int _171;
  int _173;
  unsigned int _174;
  unsigned int _175;
  int _176;
  unsigned int _177;
  int _179;
  unsigned int _180;
  int _182;
  unsigned int _183;
  int _185;
  unsigned int _186;
  int _188;
  unsigned int _189;
  int _191;
  unsigned int _192;
  int _194;
  unsigned int _195;
  int _197;
  unsigned int _198;
  int _200;
  unsigned int _201;
  long int _204;
  long int _205;
  long int _206;
  int _208;
  long int _210;
  unsigned int _212;
  int _213;
  int _214;
  uint8_t * _215;
  long int _216;
  int _218;
  long int _220;
  unsigned int _222;
  int _223;
  int _224;
  uint8_t * _225;
  long int _226;
  long int _227;
  long int _228;
  int _230;
  long int _232;
  unsigned int _234;
  int _235;
  int _236;
  uint8_t * _237;
  long int _238;
  long int _239;
  long int _240;
  int _242;
  long int _244;
  unsigned int _246;
  int _247;
  int _248;
  uint8_t * _249;
  long int _250;
  long int _251;
  long int _252;
  int _254;
  long int _256;
  unsigned int _258;
  int _259;
  int _260;
  uint8_t * _261;
  long int _262;
  long int _263;
  long int _264;
  int _265;
  int _266;
  uint8_t * _267;
  long int _268;
  unsigned int _270;
  int _271;
  int _272;
  uint8_t * _273;
  long int _274;
  int _276;
  long int _278;
  unsigned int _280;
  int _281;
  int _282;
  uint8_t * _283;
  long int _284;
  long int _285;
  long int _286;
  int _288;
  long int _290;
  unsigned int _292;
  int _293;
  int _294;
  uint8_t * _295;
  long int _296;
  long int _297;
  long int _298;
  int _300;
  long int _302;
  unsigned int _304;
  int _305;
  int _306;
  uint8_t * _307;
  long int _308;
  long int _309;
  long int _310;
  int _312;
  long int _314;
  unsigned int _316;
  int _317;
  int _318;
  uint8_t * _319;
  long int _320;
  long int _321;
  long int _322;
  int _324;
  long int _326;
  unsigned int _328;
  int _329;
  int _330;
  uint8_t * _331;
  long int _332;
  long int _333;
  long int _334;
  int _336;
  long int _338;
  unsigned int _340;
  int _341;
  int _342;
  uint8_t * _343;
  long int _344;
  long int _345;
  long int _346;
  int _348;
  long int _350;
  unsigned int _352;
  int _353;
  int _354;
  uint8_t * _355;
  long int _356;
  long int _357;
  long int _358;
  int _360;
  long int _362;
  unsigned int _364;
  int _365;
  int _366;
  uint8_t * _367;
  long int _368;
  long int _369;
  long int _370;
  int _372;
  long int _374;
  unsigned int _376;
  int _377;
  int _378;
  uint8_t * _379;
  long int _380;
  long int _381;
  long int _382;
  int _384;
  unsigned int _386;
  uint8_t * _388;
  long int _389;
  long int _390;
  long int _391;
  long int _395;
  unsigned int _397;
  int _398;
  int _399;
  uint8_t * _400;
  long int _401;
  long int _402;
  long int _403;
  int _405;
  long int _407;
  unsigned int _409;
  int _410;
  int _411;
  uint8_t * _412;
  long int _413;
  long int _414;
  long int _415;
  int _417;
  long int _419;
  unsigned int _421;
  int _422;
  int _423;
  uint8_t * _424;
  long int _425;
  long int _426;
  long int _430;
  unsigned int _432;
  int _433;
  int _434;
  uint8_t * _435;
  long int _436;
  long int _437;
  long int _438;
  unsigned int _442;
  uint8_t * _444;
  long int _445;
  long int _446;
  long int _447;
  unsigned int _451;
  uint8_t * _453;
  long int _454;
  long int _455;
  long int _456;
  unsigned int _460;
  uint8_t * _462;
  long int _463;
  long int _464;
  long int _465;
  unsigned int _469;
  uint8_t * _471;
  long int _472;
  long int _473;
  long int _474;
  int _476;
  unsigned int _478;
  uint8_t * _480;
  long int _481;
  long int _482;
  long int _483;
  int _485;
  long int _487;
  unsigned int _489;
  int _490;
  int _491;
  uint8_t * _492;
  long int _493;
  long int _494;
  long int _495;
  int _497;
  long int _499;
  unsigned int _501;
  int _502;
  int _503;
  uint8_t * _504;
  long int _505;
  long int _506;
  long int _507;
  int _509;
  long int _511;
  unsigned int _513;
  int _514;
  int _515;
  uint8_t * _516;
  long int _517;
  long int _518;
  long int _519;
  int _521;
  long int _523;
  unsigned int _525;
  int _526;
  int _527;
  uint8_t * _528;
  long int _529;
  long int _530;
  long int _531;
  int _533;
  unsigned int _535;
  uint8_t * _537;
  long int _538;
  long int _539;
  long int _540;
  int _542;
  unsigned int _544;
  uint8_t * _546;
  long int _547;
  long int _548;
  long int _549;
  int _551;
  unsigned int _553;
  uint8_t * _555;
  long int _556;
  long int _557;
  long int _558;
  unsigned int _562;
  uint8_t * _564;
  long int _565;
  unsigned int _569;
  uint8_t * _571;
  long int _572;
  unsigned int _576;
  uint8_t * _578;
  long int _579;
  unsigned int _583;
  uint8_t * _585;
  long int _586;
  long int _587;
  long int _588;
  unsigned int _592;
  uint8_t * _594;
  unsigned char _828;
  int _829;
  int _832;
  long int _834;
  int _836;
  long int _838;
  unsigned int _840;
  int _841;
  int _842;
  uint8_t * _843;
  int _844;
  long int _845;
  long int _846;
  long int _847;
  int _849;
  long int _851;
  unsigned int _853;
  int _854;
  int _855;
  uint8_t * _856;
  long int _874;
  unsigned int _876;
  int _877;
  int _878;
  uint8_t * _879;
  long int _881;
  long int _883;
  int _885;
  long int _887;
  unsigned int _889;
  int _890;
  int _891;
  uint8_t * _892;
  long int _910;
  unsigned int _912;
  int _913;
  int _914;
  uint8_t * _915;
  long int _917;
  long int _919;
  int _921;
  long int _923;
  unsigned int _925;
  int _926;
  int _927;
  uint8_t * _928;
  long int _942;
  int _944;
  long int _946;
  unsigned int _948;
  int _949;
  int _950;
  uint8_t * _951;
  long int _953;
  long int _955;
  int _957;
  long int _959;
  unsigned int _961;
  int _962;
  int _963;
  uint8_t * _964;
  unsigned char _972;
  int _973;
  int _976;
  long int _978;
  int _980;
  long int _982;
  unsigned int _984;
  int _985;
  int _986;
  uint8_t * _987;
  int _988;
  long int _989;
  long int _990;
  long int _991;
  int _993;
  long int _995;
  unsigned int _997;
  int _998;
  int _999;
  uint8_t * _1000;
  unsigned char _1008;
  int _1009;
  int _1012;
  long int _1014;
  int _1016;
  long int _1018;
  unsigned int _1020;
  int _1021;
  int _1022;
  uint8_t * _1023;
  int _1024;
  long int _1025;
  long int _1026;
  long int _1027;
  int _1029;
  long int _1031;
  unsigned int _1033;
  int _1034;
  int _1035;
  uint8_t * _1036;
  unsigned char _1044;
  int _1045;
  int _1048;
  long int _1050;
  int _1052;
  long int _1054;
  unsigned int _1056;
  int _1057;
  int _1058;
  uint8_t * _1059;
  int _1060;
  long int _1061;
  long int _1062;
  long int _1063;
  int _1065;
  long int _1067;
  unsigned int _1069;
  int _1070;
  int _1071;
  uint8_t * _1072;
  unsigned char _1080;
  int _1081;
  int _1084;
  long int _1086;
  int _1088;
  long int _1090;
  unsigned int _1092;
  int _1093;
  int _1094;
  uint8_t * _1095;
  int _1096;
  long int _1097;
  long int _1098;
  long int _1099;
  int _1101;
  long int _1103;
  unsigned int _1105;
  int _1106;
  int _1107;
  uint8_t * _1108;
  unsigned char _1114;
  int _1115;
  int _1118;
  long int _1120;
  long int _1121;
  long int _1122;
  int _1124;
  long int _1126;
  unsigned int _1128;
  int _1129;
  int _1130;
  uint8_t * _1131;
  unsigned char _1137;
  int _1138;
  long int _1143;
  long int _1144;
  long int _1145;
  int _1147;
  long int _1149;
  unsigned int _1151;
  int _1152;
  int _1153;
  uint8_t * _1154;
  unsigned char _1160;
  int _1161;
  long int _1166;
  long int _1167;
  long int _1168;
  int _1170;
  long int _1172;
  unsigned int _1174;
  int _1175;
  int _1176;
  uint8_t * _1177;
  unsigned char _1185;
  int _1186;
  int _1189;
  long int _1191;
  int _1193;
  long int _1195;
  unsigned int _1197;
  int _1198;
  int _1199;
  uint8_t * _1200;
  int _1201;
  long int _1202;
  long int _1203;
  long int _1204;
  int _1206;
  long int _1208;
  unsigned int _1210;
  int _1211;
  int _1212;
  uint8_t * _1213;
  unsigned char _1221;
  int _1222;
  int _1225;
  long int _1227;
  int _1229;
  long int _1231;
  unsigned int _1233;
  int _1234;
  int _1235;
  uint8_t * _1236;
  int _1237;
  long int _1238;
  long int _1239;
  long int _1240;
  int _1242;
  long int _1244;
  unsigned int _1246;
  int _1247;
  int _1248;
  uint8_t * _1249;
  unsigned char _1257;
  int _1258;
  int _1261;
  long int _1263;
  int _1265;
  long int _1267;
  unsigned int _1269;
  int _1270;
  int _1271;
  uint8_t * _1272;
  int _1273;
  long int _1274;
  long int _1275;
  long int _1276;
  int _1278;
  long int _1280;
  unsigned int _1282;
  int _1283;
  int _1284;
  uint8_t * _1285;
  unsigned char _1293;
  int _1294;
  int _1297;
  long int _1299;
  int _1301;
  long int _1303;
  unsigned int _1305;
  int _1306;
  int _1307;
  uint8_t * _1308;
  int _1309;
  long int _1310;
  long int _1311;
  long int _1312;
  int _1314;
  long int _1316;
  unsigned int _1318;
  int _1319;
  int _1320;
  uint8_t * _1321;
  unsigned char _1329;
  int _1330;
  int _1333;
  long int _1335;
  int _1337;
  long int _1339;
  unsigned int _1341;
  int _1342;
  int _1343;
  uint8_t * _1344;
  int _1345;
  long int _1346;
  long int _1347;
  long int _1348;
  int _1350;
  long int _1352;
  unsigned int _1354;
  int _1355;
  int _1356;
  uint8_t * _1357;
  unsigned char _1365;
  int _1366;
  int _1369;
  long int _1371;
  int _1373;
  long int _1375;
  unsigned int _1377;
  int _1378;
  int _1379;
  uint8_t * _1380;
  int _1381;
  long int _1382;
  long int _1383;
  long int _1384;
  int _1386;
  long int _1388;
  unsigned int _1390;
  int _1391;
  int _1392;
  uint8_t * _1393;
  unsigned char _1401;
  int _1402;
  int _1405;
  long int _1407;
  int _1409;
  long int _1411;
  unsigned int _1413;
  int _1414;
  int _1415;
  uint8_t * _1416;
  int _1417;
  long int _1418;
  long int _1419;
  long int _1420;
  int _1422;
  long int _1424;
  unsigned int _1426;
  int _1427;
  int _1428;
  uint8_t * _1429;
  unsigned char _1437;
  int _1438;
  int _1441;
  long int _1443;
  int _1445;
  long int _1447;
  unsigned int _1449;
  int _1450;
  int _1451;
  uint8_t * _1452;
  int _1453;
  long int _1454;
  long int _1455;
  long int _1456;
  int _1458;
  long int _1460;
  unsigned int _1462;
  int _1463;
  int _1464;
  uint8_t * _1465;
  unsigned char _1473;
  int _1474;
  int _1477;
  long int _1479;
  int _1481;
  long int _1483;
  unsigned int _1485;
  int _1486;
  int _1487;
  uint8_t * _1488;
  int _1489;
  long int _1490;
  long int _1491;
  long int _1492;
  int _1494;
  long int _1496;
  unsigned int _1498;
  int _1499;
  int _1500;
  uint8_t * _1501;
  unsigned char _1509;
  int _1510;
  int _1513;
  long int _1515;
  int _1517;
  long int _1519;
  unsigned int _1521;
  int _1522;
  int _1523;
  uint8_t * _1524;
  int _1525;
  long int _1526;
  long int _1527;
  long int _1528;
  int _1530;
  long int _1532;
  unsigned int _1534;
  int _1535;
  int _1536;
  uint8_t * _1537;
  long int _1539;
  long int _1540;
  long int _1541;
  int _1543;
  long int _1545;
  unsigned int _1547;
  int _1548;
  int _1549;
  uint8_t * _1550;
  long int _1551;
  long int _1552;
  long int _1553;
  int _1555;
  long int _1557;
  unsigned int _1559;
  int _1560;
  int _1561;
  uint8_t * _1562;
  long int _1564;
  long int _1565;
  long int _1566;
  int _1568;
  long int _1570;
  unsigned int _1572;
  int _1573;
  int _1574;
  uint8_t * _1575;
  long int _1576;
  long int _1577;
  long int _1578;
  int _1580;
  long int _1582;
  unsigned int _1584;
  int _1585;
  int _1586;
  uint8_t * _1587;
  unsigned char _1595;
  int _1596;
  int _1599;
  long int _1601;
  int _1603;
  long int _1605;
  unsigned int _1607;
  int _1608;
  int _1609;
  uint8_t * _1610;
  int _1611;
  long int _1612;
  long int _1613;
  long int _1614;
  int _1616;
  long int _1618;
  unsigned int _1620;
  int _1621;
  int _1622;
  uint8_t * _1623;
  unsigned char _1631;
  int _1632;
  int _1635;
  long int _1637;
  int _1639;
  long int _1641;
  unsigned int _1643;
  int _1644;
  int _1645;
  uint8_t * _1646;
  int _1647;
  long int _1648;
  long int _1649;
  long int _1650;
  int _1652;
  long int _1654;
  unsigned int _1656;
  int _1657;
  int _1658;
  uint8_t * _1659;
  unsigned char _1667;
  int _1668;
  int _1671;
  long int _1673;
  int _1675;
  long int _1677;
  unsigned int _1679;
  int _1680;
  int _1681;
  uint8_t * _1682;
  int _1683;
  long int _1684;
  long int _1685;
  long int _1686;
  int _1688;
  long int _1690;
  unsigned int _1692;
  int _1693;
  int _1694;
  uint8_t * _1695;
  unsigned char _1703;
  int _1704;
  int _1707;
  long int _1709;
  int _1711;
  long int _1713;
  unsigned int _1715;
  int _1716;
  int _1717;
  uint8_t * _1718;
  int _1719;
  long int _1720;
  long int _1721;
  long int _1722;
  int _1724;
  long int _1726;
  unsigned int _1728;
  int _1729;
  int _1730;
  uint8_t * _1731;
  unsigned char _1739;
  int _1740;
  int _1743;
  long int _1745;
  int _1747;
  long int _1749;
  unsigned int _1751;
  int _1752;
  int _1753;
  uint8_t * _1754;
  int _1755;
  long int _1756;
  long int _1757;
  long int _1758;
  int _1760;
  long int _1762;
  unsigned int _1764;
  int _1765;
  int _1766;
  uint8_t * _1767;
  unsigned char _1775;
  int _1776;
  int _1779;
  long int _1781;
  int _1783;
  long int _1785;
  unsigned int _1787;
  int _1788;
  int _1789;
  uint8_t * _1790;
  int _1791;
  long int _1792;
  long int _1793;
  long int _1794;
  int _1796;
  long int _1798;
  unsigned int _1800;
  int _1801;
  int _1802;
  uint8_t * _1803;
  long int _1804;
  long int _1805;
  unsigned int _1809;
  uint8_t * _1811;
  long int _1814;
  uint8_t * _1819;
  int _2454;
  uint8_t * prephitmp_2764;
  int prephitmp_2765;
  int _2766;
  long int _2767;
  int prephitmp_2773;
  uint8_t * pretmp_2774;
  uint8_t * prephitmp_2775;
  int prephitmp_2776;
  uint8_t * prephitmp_2778;
  int prephitmp_2779;
  uint8_t * prephitmp_2781;
  int prephitmp_2782;
  uint8_t * prephitmp_2784;
  int prephitmp_2785;
  uint8_t * prephitmp_2787;
  int prephitmp_2788;
  uint8_t * prephitmp_2790;
  int prephitmp_2791;
  uint8_t * prephitmp_2793;
  int prephitmp_2794;
  uint8_t * prephitmp_2796;
  long int prephitmp_2797;
  int prephitmp_2799;
  uint8_t * prephitmp_2802;
  int prephitmp_2803;
  uint8_t * prephitmp_2805;
  int prephitmp_2806;
  uint8_t * prephitmp_2808;
  int prephitmp_2809;
  uint8_t * prephitmp_2811;
  int prephitmp_2812;
  uint8_t * prephitmp_2814;
  long int prephitmp_2815;
  int prephitmp_2819;
  uint8_t * prephitmp_2824;
  int prephitmp_2825;
  uint8_t * prephitmp_2827;
  int prephitmp_2828;
  uint8_t * prephitmp_2830;
  int prephitmp_2831;
  uint8_t * prephitmp_2833;
  int prephitmp_2834;
  uint8_t * prephitmp_2836;
  int prephitmp_2837;
  uint8_t * prephitmp_2839;
  long int prephitmp_2840;
  int prephitmp_2841;
  uint8_t * prephitmp_2844;
  int pretmp_2845;
  int prephitmp_2846;
  int prephitmp_2847;
  uint8_t * prephitmp_2849;
  long int prephitmp_2850;
  int prephitmp_2852;
  uint8_t * prephitmp_2855;
  int prephitmp_2856;
  uint8_t * prephitmp_2858;
  int pretmp_2859;
  int prephitmp_2860;
  int prephitmp_2861;
  uint8_t * prephitmp_2863;
  long int prephitmp_2864;
  int prephitmp_2866;
  uint8_t * prephitmp_2869;
  int pretmp_2870;
  int prephitmp_2871;
  int prephitmp_2872;
  uint8_t * prephitmp_2874;
  long int prephitmp_2875;
  uint8_t * prephitmp_2882;
  uint8_t * prephitmp_2884;
  int prephitmp_2885;
  int pretmp_2886;
  long unsigned int pretmp_2888;
  long unsigned int pretmp_2890;
  long unsigned int prephitmp_2891;
  long int prephitmp_2892;
  int pretmp_2894;
  int pretmp_2895;
  int pretmp_2896;
  int pretmp_2897;
  int pretmp_2898;
  int prephitmp_2899;
  uint8_t * prephitmp_2902;
  int pretmp_2903;
  int prephitmp_2904;
  int pretmp_2906;
  int prephitmp_2907;
  uint8_t * prephitmp_2909;
  long int prephitmp_2910;
  int pretmp_2914;
  int prephitmp_2915;
  uint8_t * prephitmp_2918;
  int pretmp_2919;
  int prephitmp_2920;
  int prephitmp_2921;
  uint8_t * prephitmp_2923;
  long int prephitmp_2924;
  int prephitmp_2927;
  uint8_t * prephitmp_2931;
  int pretmp_2932;
  int prephitmp_2933;
  int prephitmp_2934;
  uint8_t * prephitmp_2936;
  long int prephitmp_2937;
  int prephitmp_2939;
  uint8_t * prephitmp_2942;
  int pretmp_2943;
  int prephitmp_2944;
  int prephitmp_2945;
  uint8_t * prephitmp_2947;
  long int prephitmp_2948;
  int pretmp_2951;
  int pretmp_2952;
  int prephitmp_2953;
  uint8_t * prephitmp_2956;
  int pretmp_2958;
  int prephitmp_2959;
  uint8_t * prephitmp_2961;
  int pretmp_2963;
  int prephitmp_2964;
  uint8_t * prephitmp_2966;
  int pretmp_2968;
  int prephitmp_2969;
  uint8_t * prephitmp_2971;
  int pretmp_2972;
  int prephitmp_2973;
  int pretmp_2975;
  int prephitmp_2976;
  uint8_t * prephitmp_2978;
  int prephitmp_2979;
  uint8_t * prephitmp_2981;
  int prephitmp_2982;
  uint8_t * prephitmp_2984;
  int prephitmp_2985;
  uint8_t * prephitmp_2987;
  int prephitmp_2988;
  uint8_t * prephitmp_2990;
  int prephitmp_2991;
  uint8_t * prephitmp_2993;
  int prephitmp_2994;
  uint8_t * prephitmp_2996;
  int prephitmp_2997;
  uint8_t * prephitmp_2999;
  int prephitmp_3000;
  uint8_t * prephitmp_3002;
  int prephitmp_3003;
  uint8_t * prephitmp_3005;
  int prephitmp_3006;
  uint8_t * prephitmp_3008;
  int prephitmp_3009;
  uint8_t * prephitmp_3011;
  int prephitmp_3012;
  uint8_t * prephitmp_3014;
  int prephitmp_3015;
  uint8_t * prephitmp_3017;
  int prephitmp_3018;
  uint8_t * prephitmp_3020;
  int prephitmp_3021;
  uint8_t * prephitmp_3023;
  int prephitmp_3024;
  uint8_t * prephitmp_3026;
  int prephitmp_3027;
  uint8_t * prephitmp_3029;
  int prephitmp_3030;
  uint8_t * prephitmp_3032;
  int prephitmp_3033;
  uint8_t * prephitmp_3035;
  int prephitmp_3036;
  uint8_t * prephitmp_3038;
  int pretmp_3040;
  int prephitmp_3041;
  uint8_t * prephitmp_3043;
  int pretmp_3044;
  int prephitmp_3045;
  int prephitmp_3046;
  uint8_t * prephitmp_3048;
  int prephitmp_3049;
  uint8_t * prephitmp_3051;
  int prephitmp_3052;
  uint8_t * prephitmp_3054;
  int pretmp_3056;
  int prephitmp_3057;
  uint8_t * prephitmp_3058;
  int pretmp_3061;
  int pretmp_3063;
  int prephitmp_3064;
  int prephitmp_3065;
  uint8_t * prephitmp_3066;
  int prephitmp_3067;
  uint8_t * prephitmp_3069;
  int prephitmp_3070;
  uint8_t * prephitmp_3072;
  int prephitmp_3073;
  uint8_t * prephitmp_3075;
  int prephitmp_3076;
  uint8_t * prephitmp_3078;
  int prephitmp_3079;
  uint8_t * prephitmp_3081;
  int prephitmp_3082;
  uint8_t * prephitmp_3084;
  int prephitmp_3085;
  uint8_t * prephitmp_3087;
  int prephitmp_3088;
  uint8_t * prephitmp_3090;
  int prephitmp_3091;
  uint8_t * prephitmp_3093;
  int prephitmp_3094;
  uint8_t * prephitmp_3096;
  int prephitmp_3097;
  uint8_t * prephitmp_3099;
  int prephitmp_3100;
  uint8_t * prephitmp_3102;
  int prephitmp_3103;
  uint8_t * prephitmp_3105;
  int prephitmp_3106;
  uint8_t * prephitmp_3108;
  int prephitmp_3109;
  uint8_t * prephitmp_3111;
  long int prephitmp_3113;
  int prephitmp_3115;
  uint8_t * prephitmp_3117;
  int prephitmp_3118;
  uint8_t * prephitmp_3120;
  int prephitmp_3121;
  uint8_t * prephitmp_3123;
  int prephitmp_3124;
  uint8_t * prephitmp_3126;
  int prephitmp_3127;
  uint8_t * prephitmp_3129;
  int prephitmp_3130;
  uint8_t * prephitmp_3132;
  int prephitmp_3133;
  uint8_t * prephitmp_3135;
  int prephitmp_3136;
  uint8_t * prephitmp_3138;
  int prephitmp_3139;
  uint8_t * prephitmp_3141;
  int prephitmp_3142;
  uint8_t * prephitmp_3144;
  int pretmp_3145;
  int pretmp_3146;
  int pretmp_3147;
  int prephitmp_3148;

  <bb 2>:
  _17 = sps_16(D)->i_profile_idc;
  _18 = (unsigned int) _17;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => _18
  _22 = s_19(D)->cur_bits;
  _262 = _22 << 8;
  _263 = (long int) _18;
  _264 = _262 | _263;
  s_19(D)->cur_bits = _264;
  _265 = s_19(D)->i_left;
  _266 = _265 + -8;
  s_19(D)->i_left = _266;
  if (_266 <= 32)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  pretmp_2774 = s_19(D)->p;
  goto <bb 5>;

  <bb 4>:
  _267 = s_19(D)->p;
  _268 = _264 << _266;
  # DEBUG x => _268
  __asm__("bswap %0" : "=r" x_269 : "0" _268);
  # DEBUG x => x_269
  # DEBUG x => NULL
  _270 = (unsigned int) x_269;
  MEM[(uint32_t *)_267] = _270;
  _271 = s_19(D)->i_left;
  _272 = _271 + 32;
  s_19(D)->i_left = _272;
  _273 = _267 + 4;
  s_19(D)->p = _273;

  <bb 5>:
  # prephitmp_2773 = PHI <_272(4), _266(3)>
  # prephitmp_2775 = PHI <_273(4), pretmp_2774(3)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _20 = sps_16(D)->b_constraint_set0;
  _21 = (unsigned int) _20;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => _21
  _250 = _264 << 1;
  _251 = (long int) _21;
  _252 = _250 | _251;
  s_19(D)->cur_bits = _252;
  _254 = prephitmp_2773 + -1;
  s_19(D)->i_left = _254;
  if (_254 <= 32)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  _256 = _252 << _254;
  # DEBUG x => _256
  __asm__("bswap %0" : "=r" x_257 : "0" _256);
  # DEBUG x => x_257
  # DEBUG x => NULL
  _258 = (unsigned int) x_257;
  MEM[(uint32_t *)prephitmp_2775] = _258;
  _259 = s_19(D)->i_left;
  _260 = _259 + 32;
  s_19(D)->i_left = _260;
  _261 = prephitmp_2775 + 4;
  s_19(D)->p = _261;

  <bb 7>:
  # prephitmp_2776 = PHI <_260(6), _254(5)>
  # prephitmp_2778 = PHI <_261(6), prephitmp_2775(5)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _23 = sps_16(D)->b_constraint_set1;
  _24 = (unsigned int) _23;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => _24
  _238 = _252 << 1;
  _239 = (long int) _24;
  _240 = _238 | _239;
  s_19(D)->cur_bits = _240;
  _242 = prephitmp_2776 + -1;
  s_19(D)->i_left = _242;
  if (_242 <= 32)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _244 = _240 << _242;
  # DEBUG x => _244
  __asm__("bswap %0" : "=r" x_245 : "0" _244);
  # DEBUG x => x_245
  # DEBUG x => NULL
  _246 = (unsigned int) x_245;
  MEM[(uint32_t *)prephitmp_2778] = _246;
  _247 = s_19(D)->i_left;
  _248 = _247 + 32;
  s_19(D)->i_left = _248;
  _249 = prephitmp_2778 + 4;
  s_19(D)->p = _249;

  <bb 9>:
  # prephitmp_2779 = PHI <_248(8), _242(7)>
  # prephitmp_2781 = PHI <_249(8), prephitmp_2778(7)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _26 = sps_16(D)->b_constraint_set2;
  _27 = (unsigned int) _26;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => _27
  _226 = _240 << 1;
  _227 = (long int) _27;
  _228 = _226 | _227;
  s_19(D)->cur_bits = _228;
  _230 = prephitmp_2779 + -1;
  s_19(D)->i_left = _230;
  if (_230 <= 32)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  _232 = _228 << _230;
  # DEBUG x => _232
  __asm__("bswap %0" : "=r" x_233 : "0" _232);
  # DEBUG x => x_233
  # DEBUG x => NULL
  _234 = (unsigned int) x_233;
  MEM[(uint32_t *)prephitmp_2781] = _234;
  _235 = s_19(D)->i_left;
  _236 = _235 + 32;
  s_19(D)->i_left = _236;
  _237 = prephitmp_2781 + 4;
  s_19(D)->p = _237;

  <bb 11>:
  # prephitmp_2782 = PHI <_236(10), _230(9)>
  # prephitmp_2784 = PHI <_237(10), prephitmp_2781(9)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => s_19(D)
  # DEBUG i_count => 5
  # DEBUG i_bits => 0
  _216 = _228 << 5;
  s_19(D)->cur_bits = _216;
  _218 = prephitmp_2782 + -5;
  s_19(D)->i_left = _218;
  if (_218 <= 32)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  _220 = _216 << _218;
  # DEBUG x => _220
  __asm__("bswap %0" : "=r" x_221 : "0" _220);
  # DEBUG x => x_221
  # DEBUG x => NULL
  _222 = (unsigned int) x_221;
  MEM[(uint32_t *)prephitmp_2784] = _222;
  _223 = s_19(D)->i_left;
  _224 = _223 + 32;
  s_19(D)->i_left = _224;
  _225 = prephitmp_2784 + 4;
  s_19(D)->p = _225;

  <bb 13>:
  # prephitmp_2785 = PHI <_224(12), _218(11)>
  # prephitmp_2787 = PHI <_225(12), prephitmp_2784(11)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _28 = sps_16(D)->i_level_idc;
  _29 = (unsigned int) _28;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => _29
  _204 = _216 << 8;
  _205 = (long int) _29;
  _206 = _204 | _205;
  s_19(D)->cur_bits = _206;
  _208 = prephitmp_2785 + -8;
  s_19(D)->i_left = _208;
  if (_208 <= 32)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:
  _210 = _206 << _208;
  # DEBUG x => _210
  __asm__("bswap %0" : "=r" x_211 : "0" _210);
  # DEBUG x => x_211
  # DEBUG x => NULL
  _212 = (unsigned int) x_211;
  MEM[(uint32_t *)prephitmp_2787] = _212;
  _213 = s_19(D)->i_left;
  _214 = _213 + 32;
  s_19(D)->i_left = _214;
  _215 = prephitmp_2787 + 4;
  s_19(D)->p = _215;

  <bb 15>:
  # prephitmp_2788 = PHI <_214(14), _208(13)>
  # prephitmp_2790 = PHI <_215(14), prephitmp_2787(13)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _30 = sps_16(D)->i_id;
  _31 = (unsigned int) _30;
  # DEBUG s => s_19(D)
  # DEBUG val => _31
  # DEBUG size => 0
  val_820 = _31 + 1;
  # DEBUG val => val_820
  tmp_821 = (int) val_820;
  # DEBUG tmp => tmp_821
  if (tmp_821 > 65535)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  # DEBUG size => 32
  tmp_822 = tmp_821 >> 16;
  # DEBUG tmp => tmp_822

  <bb 17>:
  # size_824 = PHI <0(15), 32(16)>
  # tmp_823 = PHI <tmp_821(15), tmp_822(16)>
  # DEBUG tmp => tmp_823
  # DEBUG size => size_824
  if (tmp_823 > 255)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  size_825 = size_824 + 16;
  # DEBUG size => size_825
  tmp_826 = tmp_823 >> 8;
  # DEBUG tmp => tmp_826

  <bb 19>:
  # size_830 = PHI <size_824(17), size_825(18)>
  # tmp_827 = PHI <tmp_823(17), tmp_826(18)>
  # DEBUG tmp => tmp_827
  # DEBUG size => size_830
  _828 = x264_ue_size_tab[tmp_827];
  _829 = (int) _828;
  size_831 = _829 + size_830;
  # DEBUG size => size_831
  _832 = size_831 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _832
  # DEBUG i_bits => 0
  _834 = _206 << _832;
  s_19(D)->cur_bits = _834;
  _836 = prephitmp_2788 - _832;
  s_19(D)->i_left = _836;
  if (_836 <= 32)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  _838 = _834 << _836;
  # DEBUG x => _838
  __asm__("bswap %0" : "=r" x_839 : "0" _838);
  # DEBUG x => x_839
  # DEBUG x => NULL
  _840 = (unsigned int) x_839;
  MEM[(uint32_t *)prephitmp_2790] = _840;
  _841 = s_19(D)->i_left;
  _842 = _841 + 32;
  s_19(D)->i_left = _842;
  _843 = prephitmp_2790 + 4;
  s_19(D)->p = _843;

  <bb 21>:
  # prephitmp_2791 = PHI <_836(19), _842(20)>
  # prephitmp_2793 = PHI <prephitmp_2790(19), _843(20)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _844 = _832 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _844
  # DEBUG i_bits => val_820
  _845 = _834 << _844;
  _846 = (long int) val_820;
  _847 = _845 | _846;
  s_19(D)->cur_bits = _847;
  _849 = prephitmp_2791 - _844;
  s_19(D)->i_left = _849;
  if (_849 <= 32)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  _851 = _847 << _849;
  # DEBUG x => _851
  __asm__("bswap %0" : "=r" x_852 : "0" _851);
  # DEBUG x => x_852
  # DEBUG x => NULL
  _853 = (unsigned int) x_852;
  MEM[(uint32_t *)prephitmp_2793] = _853;
  _854 = s_19(D)->i_left;
  _855 = _854 + 32;
  s_19(D)->i_left = _855;
  _856 = prephitmp_2793 + 4;
  s_19(D)->p = _856;

  <bb 23>:
  # prephitmp_2794 = PHI <_855(22), _849(21)>
  # prephitmp_2796 = PHI <_856(22), prephitmp_2793(21)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _33 = sps_16(D)->i_profile_idc;
  if (_33 > 99)
    goto <bb 24>;
  else
    goto <bb 40>;

  <bb 24>:
  # DEBUG s => s_19(D)
  # DEBUG val => 1
  # DEBUG size => 0
  # DEBUG val => 2
  # DEBUG tmp => 2
  # DEBUG tmp => 2
  # DEBUG size => 0
  # DEBUG tmp => 2
  # DEBUG size => 0
  # DEBUG size => 3
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => 0
  _942 = _847 << 1;
  s_19(D)->cur_bits = _942;
  _944 = prephitmp_2794 + -1;
  s_19(D)->i_left = _944;
  if (_944 <= 32)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  _946 = _942 << _944;
  # DEBUG x => _946
  __asm__("bswap %0" : "=r" x_947 : "0" _946);
  # DEBUG x => x_947
  # DEBUG x => NULL
  _948 = (unsigned int) x_947;
  MEM[(uint32_t *)prephitmp_2796] = _948;
  _949 = s_19(D)->i_left;
  _950 = _949 + 32;
  s_19(D)->i_left = _950;
  _951 = prephitmp_2796 + 4;
  s_19(D)->p = _951;

  <bb 26>:
  # prephitmp_3124 = PHI <_944(24), _950(25)>
  # prephitmp_3126 = PHI <prephitmp_2796(24), _951(25)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => s_19(D)
  # DEBUG i_count => 2
  # DEBUG i_bits => 2
  _953 = _942 << 2;
  _955 = _953 | 2;
  s_19(D)->cur_bits = _955;
  _957 = prephitmp_3124 + -2;
  s_19(D)->i_left = _957;
  if (_957 <= 32)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  _959 = _955 << _957;
  # DEBUG x => _959
  __asm__("bswap %0" : "=r" x_960 : "0" _959);
  # DEBUG x => x_960
  # DEBUG x => NULL
  _961 = (unsigned int) x_960;
  MEM[(uint32_t *)prephitmp_3126] = _961;
  _962 = s_19(D)->i_left;
  _963 = _962 + 32;
  s_19(D)->i_left = _963;
  _964 = prephitmp_3126 + 4;
  s_19(D)->p = _964;

  <bb 28>:
  # prephitmp_3127 = PHI <_963(27), _957(26)>
  # prephitmp_3129 = PHI <_964(27), prephitmp_3126(26)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  # DEBUG s => s_19(D)
  # DEBUG val => 0
  # DEBUG size => 0
  # DEBUG val => 1
  # DEBUG tmp => 1
  # DEBUG tmp => 1
  # DEBUG size => 0
  # DEBUG tmp => 1
  # DEBUG size => 0
  # DEBUG size => 1
  # DEBUG s => s_19(D)
  # DEBUG i_count => 0
  # DEBUG i_bits => 0
  s_19(D)->cur_bits = _955;
  if (prephitmp_3127 <= 32)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  _910 = _955 << prephitmp_3127;
  # DEBUG x => _910
  __asm__("bswap %0" : "=r" x_911 : "0" _910);
  # DEBUG x => x_911
  # DEBUG x => NULL
  _912 = (unsigned int) x_911;
  MEM[(uint32_t *)prephitmp_3129] = _912;
  _913 = s_19(D)->i_left;
  _914 = _913 + 32;
  s_19(D)->i_left = _914;
  _915 = prephitmp_3129 + 4;
  s_19(D)->p = _915;

  <bb 30>:
  # prephitmp_3130 = PHI <prephitmp_3127(28), _914(29)>
  # prephitmp_3132 = PHI <prephitmp_3129(28), _915(29)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => 1
  _917 = _955 << 1;
  _919 = _917 | 1;
  s_19(D)->cur_bits = _919;
  _921 = prephitmp_3130 + -1;
  s_19(D)->i_left = _921;
  if (_921 <= 32)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  _923 = _919 << _921;
  # DEBUG x => _923
  __asm__("bswap %0" : "=r" x_924 : "0" _923);
  # DEBUG x => x_924
  # DEBUG x => NULL
  _925 = (unsigned int) x_924;
  MEM[(uint32_t *)prephitmp_3132] = _925;
  _926 = s_19(D)->i_left;
  _927 = _926 + 32;
  s_19(D)->i_left = _927;
  _928 = prephitmp_3132 + 4;
  s_19(D)->p = _928;

  <bb 32>:
  # prephitmp_3133 = PHI <_927(31), _921(30)>
  # prephitmp_3135 = PHI <_928(31), prephitmp_3132(30)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  # DEBUG s => s_19(D)
  # DEBUG val => 0
  # DEBUG size => 0
  # DEBUG val => 1
  # DEBUG tmp => 1
  # DEBUG tmp => 1
  # DEBUG size => 0
  # DEBUG tmp => 1
  # DEBUG size => 0
  # DEBUG size => 1
  # DEBUG s => s_19(D)
  # DEBUG i_count => 0
  # DEBUG i_bits => 0
  s_19(D)->cur_bits = _919;
  if (prephitmp_3133 <= 32)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 33>:
  _874 = _919 << prephitmp_3133;
  # DEBUG x => _874
  __asm__("bswap %0" : "=r" x_875 : "0" _874);
  # DEBUG x => x_875
  # DEBUG x => NULL
  _876 = (unsigned int) x_875;
  MEM[(uint32_t *)prephitmp_3135] = _876;
  _877 = s_19(D)->i_left;
  _878 = _877 + 32;
  s_19(D)->i_left = _878;
  _879 = prephitmp_3135 + 4;
  s_19(D)->p = _879;

  <bb 34>:
  # prephitmp_3136 = PHI <prephitmp_3133(32), _878(33)>
  # prephitmp_3138 = PHI <prephitmp_3135(32), _879(33)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => 1
  _881 = _919 << 1;
  _883 = _881 | 1;
  s_19(D)->cur_bits = _883;
  _885 = prephitmp_3136 + -1;
  s_19(D)->i_left = _885;
  if (_885 <= 32)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 35>:
  _887 = _883 << _885;
  # DEBUG x => _887
  __asm__("bswap %0" : "=r" x_888 : "0" _887);
  # DEBUG x => x_888
  # DEBUG x => NULL
  _889 = (unsigned int) x_888;
  MEM[(uint32_t *)prephitmp_3138] = _889;
  _890 = s_19(D)->i_left;
  _891 = _890 + 32;
  s_19(D)->i_left = _891;
  _892 = prephitmp_3138 + 4;
  s_19(D)->p = _892;

  <bb 36>:
  # prephitmp_3139 = PHI <_891(35), _885(34)>
  # prephitmp_3141 = PHI <_892(35), prephitmp_3138(34)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _37 = sps_16(D)->b_qpprime_y_zero_transform_bypass;
  _38 = (unsigned int) _37;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => _38
  _284 = _883 << 1;
  _285 = (long int) _38;
  _286 = _284 | _285;
  s_19(D)->cur_bits = _286;
  _288 = prephitmp_3139 + -1;
  s_19(D)->i_left = _288;
  if (_288 <= 32)
    goto <bb 37>;
  else
    goto <bb 38>;

  <bb 37>:
  _290 = _286 << _288;
  # DEBUG x => _290
  __asm__("bswap %0" : "=r" x_291 : "0" _290);
  # DEBUG x => x_291
  # DEBUG x => NULL
  _292 = (unsigned int) x_291;
  MEM[(uint32_t *)prephitmp_3141] = _292;
  _293 = s_19(D)->i_left;
  _294 = _293 + 32;
  s_19(D)->i_left = _294;
  _295 = prephitmp_3141 + 4;
  s_19(D)->p = _295;

  <bb 38>:
  # prephitmp_3142 = PHI <_294(37), _288(36)>
  # prephitmp_3144 = PHI <_295(37), prephitmp_3141(36)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => 0
  _274 = _286 << 1;
  s_19(D)->cur_bits = _274;
  _276 = prephitmp_3142 + -1;
  s_19(D)->i_left = _276;
  if (_276 <= 32)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 39>:
  _278 = _274 << _276;
  # DEBUG x => _278
  __asm__("bswap %0" : "=r" x_279 : "0" _278);
  # DEBUG x => x_279
  # DEBUG x => NULL
  _280 = (unsigned int) x_279;
  MEM[(uint32_t *)prephitmp_3144] = _280;
  _281 = s_19(D)->i_left;
  _282 = _281 + 32;
  s_19(D)->i_left = _282;
  _283 = prephitmp_3144 + 4;
  s_19(D)->p = _283;

  <bb 40>:
  # prephitmp_2797 = PHI <_847(23), _274(39), _274(38)>
  # prephitmp_2799 = PHI <prephitmp_2794(23), _282(39), _276(38)>
  # prephitmp_2802 = PHI <prephitmp_2796(23), _283(39), prephitmp_3144(38)>
  _41 = sps_16(D)->i_log2_max_frame_num;
  _42 = _41 + -4;
  _43 = (unsigned int) _42;
  # DEBUG s => s_19(D)
  # DEBUG val => _43
  # DEBUG size => 0
  val_47 = _43 + 1;
  # DEBUG val => val_47
  tmp_1001 = (int) val_47;
  # DEBUG tmp => tmp_1001
  if (tmp_1001 > 65535)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  # DEBUG size => 32
  tmp_1002 = tmp_1001 >> 16;
  # DEBUG tmp => tmp_1002

  <bb 42>:
  # size_1004 = PHI <0(40), 32(41)>
  # tmp_1003 = PHI <tmp_1001(40), tmp_1002(41)>
  # DEBUG tmp => tmp_1003
  # DEBUG size => size_1004
  if (tmp_1003 > 255)
    goto <bb 43>;
  else
    goto <bb 44>;

  <bb 43>:
  size_1005 = size_1004 + 16;
  # DEBUG size => size_1005
  tmp_1006 = tmp_1003 >> 8;
  # DEBUG tmp => tmp_1006

  <bb 44>:
  # size_1010 = PHI <size_1004(42), size_1005(43)>
  # tmp_1007 = PHI <tmp_1003(42), tmp_1006(43)>
  # DEBUG tmp => tmp_1007
  # DEBUG size => size_1010
  _1008 = x264_ue_size_tab[tmp_1007];
  _1009 = (int) _1008;
  size_1011 = _1009 + size_1010;
  # DEBUG size => size_1011
  _1012 = size_1011 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1012
  # DEBUG i_bits => 0
  _1014 = prephitmp_2797 << _1012;
  s_19(D)->cur_bits = _1014;
  _1016 = prephitmp_2799 - _1012;
  s_19(D)->i_left = _1016;
  if (_1016 <= 32)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 45>:
  _1018 = _1014 << _1016;
  # DEBUG x => _1018
  __asm__("bswap %0" : "=r" x_1019 : "0" _1018);
  # DEBUG x => x_1019
  # DEBUG x => NULL
  _1020 = (unsigned int) x_1019;
  MEM[(uint32_t *)prephitmp_2802] = _1020;
  _1021 = s_19(D)->i_left;
  _1022 = _1021 + 32;
  s_19(D)->i_left = _1022;
  _1023 = prephitmp_2802 + 4;
  s_19(D)->p = _1023;

  <bb 46>:
  # prephitmp_2803 = PHI <_1016(44), _1022(45)>
  # prephitmp_2805 = PHI <prephitmp_2802(44), _1023(45)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1024 = _1012 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1024
  # DEBUG i_bits => val_47
  _1025 = _1014 << _1024;
  _1026 = (long int) val_47;
  _1027 = _1025 | _1026;
  s_19(D)->cur_bits = _1027;
  _1029 = prephitmp_2803 - _1024;
  s_19(D)->i_left = _1029;
  if (_1029 <= 32)
    goto <bb 47>;
  else
    goto <bb 48>;

  <bb 47>:
  _1031 = _1027 << _1029;
  # DEBUG x => _1031
  __asm__("bswap %0" : "=r" x_1032 : "0" _1031);
  # DEBUG x => x_1032
  # DEBUG x => NULL
  _1033 = (unsigned int) x_1032;
  MEM[(uint32_t *)prephitmp_2805] = _1033;
  _1034 = s_19(D)->i_left;
  _1035 = _1034 + 32;
  s_19(D)->i_left = _1035;
  _1036 = prephitmp_2805 + 4;
  s_19(D)->p = _1036;

  <bb 48>:
  # prephitmp_2806 = PHI <_1035(47), _1029(46)>
  # prephitmp_2808 = PHI <_1036(47), prephitmp_2805(46)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _45 = sps_16(D)->i_poc_type;
  _46 = (unsigned int) _45;
  # DEBUG s => s_19(D)
  # DEBUG val => _46
  # DEBUG size => 0
  val_34 = _46 + 1;
  # DEBUG val => val_34
  tmp_965 = (int) val_34;
  # DEBUG tmp => tmp_965
  if (tmp_965 > 65535)
    goto <bb 49>;
  else
    goto <bb 50>;

  <bb 49>:
  # DEBUG size => 32
  tmp_966 = tmp_965 >> 16;
  # DEBUG tmp => tmp_966

  <bb 50>:
  # size_968 = PHI <0(48), 32(49)>
  # tmp_967 = PHI <tmp_965(48), tmp_966(49)>
  # DEBUG tmp => tmp_967
  # DEBUG size => size_968
  if (tmp_967 > 255)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 51>:
  size_969 = size_968 + 16;
  # DEBUG size => size_969
  tmp_970 = tmp_967 >> 8;
  # DEBUG tmp => tmp_970

  <bb 52>:
  # size_974 = PHI <size_968(50), size_969(51)>
  # tmp_971 = PHI <tmp_967(50), tmp_970(51)>
  # DEBUG tmp => tmp_971
  # DEBUG size => size_974
  _972 = x264_ue_size_tab[tmp_971];
  _973 = (int) _972;
  size_975 = _973 + size_974;
  # DEBUG size => size_975
  _976 = size_975 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _976
  # DEBUG i_bits => 0
  _978 = _1027 << _976;
  s_19(D)->cur_bits = _978;
  _980 = prephitmp_2806 - _976;
  s_19(D)->i_left = _980;
  if (_980 <= 32)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  _982 = _978 << _980;
  # DEBUG x => _982
  __asm__("bswap %0" : "=r" x_983 : "0" _982);
  # DEBUG x => x_983
  # DEBUG x => NULL
  _984 = (unsigned int) x_983;
  MEM[(uint32_t *)prephitmp_2808] = _984;
  _985 = s_19(D)->i_left;
  _986 = _985 + 32;
  s_19(D)->i_left = _986;
  _987 = prephitmp_2808 + 4;
  s_19(D)->p = _987;

  <bb 54>:
  # prephitmp_2809 = PHI <_980(52), _986(53)>
  # prephitmp_2811 = PHI <prephitmp_2808(52), _987(53)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _988 = _976 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _988
  # DEBUG i_bits => val_34
  _989 = _978 << _988;
  _990 = (long int) val_34;
  _991 = _989 | _990;
  s_19(D)->cur_bits = _991;
  _993 = prephitmp_2809 - _988;
  s_19(D)->i_left = _993;
  if (_993 <= 32)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 55>:
  _995 = _991 << _993;
  # DEBUG x => _995
  __asm__("bswap %0" : "=r" x_996 : "0" _995);
  # DEBUG x => x_996
  # DEBUG x => NULL
  _997 = (unsigned int) x_996;
  MEM[(uint32_t *)prephitmp_2811] = _997;
  _998 = s_19(D)->i_left;
  _999 = _998 + 32;
  s_19(D)->i_left = _999;
  _1000 = prephitmp_2811 + 4;
  s_19(D)->p = _1000;

  <bb 56>:
  # prephitmp_2812 = PHI <_999(55), _993(54)>
  # prephitmp_2814 = PHI <_1000(55), prephitmp_2811(54)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _48 = sps_16(D)->i_poc_type;
  if (_48 == 0)
    goto <bb 57>;
  else
    goto <bb 65>;

  <bb 57>:
  _49 = sps_16(D)->i_log2_max_poc_lsb;
  _50 = _49 + -4;
  _51 = (unsigned int) _50;
  # DEBUG s => s_19(D)
  # DEBUG val => _51
  # DEBUG size => 0
  val_44 = _51 + 1;
  # DEBUG val => val_44
  tmp_1037 = (int) val_44;
  # DEBUG tmp => tmp_1037
  if (tmp_1037 > 65535)
    goto <bb 58>;
  else
    goto <bb 59>;

  <bb 58>:
  # DEBUG size => 32
  tmp_1038 = tmp_1037 >> 16;
  # DEBUG tmp => tmp_1038

  <bb 59>:
  # size_1040 = PHI <0(57), 32(58)>
  # tmp_1039 = PHI <tmp_1037(57), tmp_1038(58)>
  # DEBUG tmp => tmp_1039
  # DEBUG size => size_1040
  if (tmp_1039 > 255)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 60>:
  size_1041 = size_1040 + 16;
  # DEBUG size => size_1041
  tmp_1042 = tmp_1039 >> 8;
  # DEBUG tmp => tmp_1042

  <bb 61>:
  # size_1046 = PHI <size_1040(59), size_1041(60)>
  # tmp_1043 = PHI <tmp_1039(59), tmp_1042(60)>
  # DEBUG tmp => tmp_1043
  # DEBUG size => size_1046
  _1044 = x264_ue_size_tab[tmp_1043];
  _1045 = (int) _1044;
  size_1047 = _1045 + size_1046;
  # DEBUG size => size_1047
  _1048 = size_1047 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1048
  # DEBUG i_bits => 0
  _1050 = _991 << _1048;
  s_19(D)->cur_bits = _1050;
  _1052 = prephitmp_2812 - _1048;
  s_19(D)->i_left = _1052;
  if (_1052 <= 32)
    goto <bb 62>;
  else
    goto <bb 63>;

  <bb 62>:
  _1054 = _1050 << _1052;
  # DEBUG x => _1054
  __asm__("bswap %0" : "=r" x_1055 : "0" _1054);
  # DEBUG x => x_1055
  # DEBUG x => NULL
  _1056 = (unsigned int) x_1055;
  MEM[(uint32_t *)prephitmp_2814] = _1056;
  _1057 = s_19(D)->i_left;
  _1058 = _1057 + 32;
  s_19(D)->i_left = _1058;
  _1059 = prephitmp_2814 + 4;
  s_19(D)->p = _1059;

  <bb 63>:
  # prephitmp_3121 = PHI <_1052(61), _1058(62)>
  # prephitmp_3123 = PHI <prephitmp_2814(61), _1059(62)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1060 = _1048 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1060
  # DEBUG i_bits => val_44
  _1061 = _1050 << _1060;
  _1062 = (long int) val_44;
  _1063 = _1061 | _1062;
  s_19(D)->cur_bits = _1063;
  _1065 = prephitmp_3121 - _1060;
  s_19(D)->i_left = _1065;
  if (_1065 <= 32)
    goto <bb 64>;
  else
    goto <bb 102>;

  <bb 64>:
  _1067 = _1063 << _1065;
  # DEBUG x => _1067
  __asm__("bswap %0" : "=r" x_1068 : "0" _1067);
  # DEBUG x => x_1068
  # DEBUG x => NULL
  _1069 = (unsigned int) x_1068;
  MEM[(uint32_t *)prephitmp_3123] = _1069;
  _1070 = s_19(D)->i_left;
  _1071 = _1070 + 32;
  s_19(D)->i_left = _1071;
  _1072 = prephitmp_3123 + 4;
  s_19(D)->p = _1072;
  goto <bb 102>;

  <bb 65>:
  if (_48 == 1)
    goto <bb 66>;
  else
    goto <bb 102>;

  <bb 66>:
  _53 = sps_16(D)->b_delta_pic_order_always_zero;
  _54 = (unsigned int) _53;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => _54
  _296 = _991 << 1;
  _297 = (long int) _54;
  _298 = _296 | _297;
  s_19(D)->cur_bits = _298;
  _300 = prephitmp_2812 + -1;
  s_19(D)->i_left = _300;
  if (_300 <= 32)
    goto <bb 67>;
  else
    goto <bb 68>;

  <bb 67>:
  _302 = _298 << _300;
  # DEBUG x => _302
  __asm__("bswap %0" : "=r" x_303 : "0" _302);
  # DEBUG x => x_303
  # DEBUG x => NULL
  _304 = (unsigned int) x_303;
  MEM[(uint32_t *)prephitmp_2814] = _304;
  _305 = s_19(D)->i_left;
  _306 = _305 + 32;
  s_19(D)->i_left = _306;
  _307 = prephitmp_2814 + 4;
  s_19(D)->p = _307;

  <bb 68>:
  # prephitmp_3097 = PHI <_306(67), _300(66)>
  # prephitmp_3099 = PHI <_307(67), prephitmp_2814(66)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _56 = sps_16(D)->i_offset_for_non_ref_pic;
  # DEBUG s => s_19(D)
  # DEBUG val => _56
  # DEBUG size => 0
  if (_56 <= 0)
    goto <bb 69>;
  else
    goto <bb 70>;

  <bb 69>:
  _59 = _56 * -2;
  val_1132 = _59 + 1;
  goto <bb 71>;

  <bb 70>:
  val_1133 = _56 * 2;

  <bb 71>:
  # val_1134 = PHI <val_1132(69), val_1133(70)>
  # DEBUG val => val_1134
  # DEBUG tmp => val_1134
  if (val_1134 > 255)
    goto <bb 72>;
  else
    goto <bb 73>;

  <bb 72>:
  # DEBUG size => 16
  val_1135 = val_1134 >> 8;
  # DEBUG tmp => val_1135

  <bb 73>:
  # size_1139 = PHI <0(71), 16(72)>
  # val_1136 = PHI <val_1134(71), val_1135(72)>
  # DEBUG tmp => val_1136
  # DEBUG size => size_1139
  _1137 = x264_ue_size_tab[val_1136];
  _1138 = (int) _1137;
  size_1140 = _1138 + size_1139;
  # DEBUG size => size_1140
  # DEBUG s => s_19(D)
  # DEBUG i_count => size_1140
  # DEBUG i_bits => (unsigned int) val_1134
  _1143 = _298 << size_1140;
  _1144 = (long int) val_1134;
  _1145 = _1143 | _1144;
  s_19(D)->cur_bits = _1145;
  _1147 = prephitmp_3097 - size_1140;
  s_19(D)->i_left = _1147;
  if (_1147 <= 32)
    goto <bb 74>;
  else
    goto <bb 75>;

  <bb 74>:
  _1149 = _1145 << _1147;
  # DEBUG x => _1149
  __asm__("bswap %0" : "=r" x_1150 : "0" _1149);
  # DEBUG x => x_1150
  # DEBUG x => NULL
  _1151 = (unsigned int) x_1150;
  MEM[(uint32_t *)prephitmp_3099] = _1151;
  _1152 = s_19(D)->i_left;
  _1153 = _1152 + 32;
  s_19(D)->i_left = _1153;
  _1154 = prephitmp_3099 + 4;
  s_19(D)->p = _1154;

  <bb 75>:
  # prephitmp_3100 = PHI <_1153(74), _1147(73)>
  # prephitmp_3102 = PHI <_1154(74), prephitmp_3099(73)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _58 = sps_16(D)->i_offset_for_top_to_bottom_field;
  # DEBUG s => s_19(D)
  # DEBUG val => _58
  # DEBUG size => 0
  if (_58 <= 0)
    goto <bb 76>;
  else
    goto <bb 77>;

  <bb 76>:
  _62 = _58 * -2;
  val_1109 = _62 + 1;
  goto <bb 78>;

  <bb 77>:
  val_1110 = _58 * 2;

  <bb 78>:
  # val_1111 = PHI <val_1109(76), val_1110(77)>
  # DEBUG val => val_1111
  # DEBUG tmp => val_1111
  if (val_1111 > 255)
    goto <bb 79>;
  else
    goto <bb 80>;

  <bb 79>:
  # DEBUG size => 16
  val_1112 = val_1111 >> 8;
  # DEBUG tmp => val_1112

  <bb 80>:
  # size_1116 = PHI <0(78), 16(79)>
  # val_1113 = PHI <val_1111(78), val_1112(79)>
  # DEBUG tmp => val_1113
  # DEBUG size => size_1116
  _1114 = x264_ue_size_tab[val_1113];
  _1115 = (int) _1114;
  size_1117 = _1115 + size_1116;
  # DEBUG size => size_1117
  # DEBUG s => s_19(D)
  # DEBUG i_count => size_1117
  # DEBUG i_bits => (unsigned int) val_1111
  _1120 = _1145 << size_1117;
  _1121 = (long int) val_1111;
  _1122 = _1120 | _1121;
  s_19(D)->cur_bits = _1122;
  _1124 = prephitmp_3100 - size_1117;
  s_19(D)->i_left = _1124;
  if (_1124 <= 32)
    goto <bb 81>;
  else
    goto <bb 82>;

  <bb 81>:
  _1126 = _1122 << _1124;
  # DEBUG x => _1126
  __asm__("bswap %0" : "=r" x_1127 : "0" _1126);
  # DEBUG x => x_1127
  # DEBUG x => NULL
  _1128 = (unsigned int) x_1127;
  MEM[(uint32_t *)prephitmp_3102] = _1128;
  _1129 = s_19(D)->i_left;
  _1130 = _1129 + 32;
  s_19(D)->i_left = _1130;
  _1131 = prephitmp_3102 + 4;
  s_19(D)->p = _1131;

  <bb 82>:
  # prephitmp_3103 = PHI <_1130(81), _1124(80)>
  # prephitmp_3105 = PHI <_1131(81), prephitmp_3102(80)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _60 = sps_16(D)->i_num_ref_frames_in_poc_cycle;
  _61 = (unsigned int) _60;
  # DEBUG s => s_19(D)
  # DEBUG val => _61
  # DEBUG size => 0
  val_52 = _61 + 1;
  # DEBUG val => val_52
  tmp_1073 = (int) val_52;
  # DEBUG tmp => tmp_1073
  if (tmp_1073 > 65535)
    goto <bb 83>;
  else
    goto <bb 84>;

  <bb 83>:
  # DEBUG size => 32
  tmp_1074 = tmp_1073 >> 16;
  # DEBUG tmp => tmp_1074

  <bb 84>:
  # size_1076 = PHI <0(82), 32(83)>
  # tmp_1075 = PHI <tmp_1073(82), tmp_1074(83)>
  # DEBUG tmp => tmp_1075
  # DEBUG size => size_1076
  if (tmp_1075 > 255)
    goto <bb 85>;
  else
    goto <bb 86>;

  <bb 85>:
  size_1077 = size_1076 + 16;
  # DEBUG size => size_1077
  tmp_1078 = tmp_1075 >> 8;
  # DEBUG tmp => tmp_1078

  <bb 86>:
  # size_1082 = PHI <size_1076(84), size_1077(85)>
  # tmp_1079 = PHI <tmp_1075(84), tmp_1078(85)>
  # DEBUG tmp => tmp_1079
  # DEBUG size => size_1082
  _1080 = x264_ue_size_tab[tmp_1079];
  _1081 = (int) _1080;
  size_1083 = _1081 + size_1082;
  # DEBUG size => size_1083
  _1084 = size_1083 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1084
  # DEBUG i_bits => 0
  _1086 = _1122 << _1084;
  s_19(D)->cur_bits = _1086;
  _1088 = prephitmp_3103 - _1084;
  s_19(D)->i_left = _1088;
  if (_1088 <= 32)
    goto <bb 87>;
  else
    goto <bb 88>;

  <bb 87>:
  _1090 = _1086 << _1088;
  # DEBUG x => _1090
  __asm__("bswap %0" : "=r" x_1091 : "0" _1090);
  # DEBUG x => x_1091
  # DEBUG x => NULL
  _1092 = (unsigned int) x_1091;
  MEM[(uint32_t *)prephitmp_3105] = _1092;
  _1093 = s_19(D)->i_left;
  _1094 = _1093 + 32;
  s_19(D)->i_left = _1094;
  _1095 = prephitmp_3105 + 4;
  s_19(D)->p = _1095;

  <bb 88>:
  # prephitmp_3106 = PHI <_1088(86), _1094(87)>
  # prephitmp_3108 = PHI <prephitmp_3105(86), _1095(87)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1096 = _1084 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1096
  # DEBUG i_bits => val_52
  _1097 = _1086 << _1096;
  _1098 = (long int) val_52;
  _1099 = _1097 | _1098;
  s_19(D)->cur_bits = _1099;
  _1101 = prephitmp_3106 - _1096;
  s_19(D)->i_left = _1101;
  if (_1101 <= 32)
    goto <bb 89>;
  else
    goto <bb 90>;

  <bb 89>:
  _1103 = _1099 << _1101;
  # DEBUG x => _1103
  __asm__("bswap %0" : "=r" x_1104 : "0" _1103);
  # DEBUG x => x_1104
  # DEBUG x => NULL
  _1105 = (unsigned int) x_1104;
  MEM[(uint32_t *)prephitmp_3108] = _1105;
  _1106 = s_19(D)->i_left;
  _1107 = _1106 + 32;
  s_19(D)->i_left = _1107;
  _1108 = prephitmp_3108 + 4;
  s_19(D)->p = _1108;

  <bb 90>:
  # prephitmp_3109 = PHI <_1101(88), _1107(89)>
  # prephitmp_3111 = PHI <prephitmp_3108(88), _1108(89)>
  # DEBUG i => 0
  _1118 = sps_16(D)->i_num_ref_frames_in_poc_cycle;
  if (_1118 > 0)
    goto <bb 91>;
  else
    goto <bb 102>;

  <bb 91>:

  <bb 92>:
  # i_1164 = PHI <0(91), i_66(101)>
  # prephitmp_3113 = PHI <_1099(91), _1168(101)>
  # prephitmp_3115 = PHI <prephitmp_3109(91), prephitmp_3118(101)>
  # prephitmp_3117 = PHI <prephitmp_3111(91), prephitmp_3120(101)>
  # DEBUG i => i_1164
  _64 = sps_16(D)->i_offset_for_ref_frame[i_1164];
  # DEBUG s => s_19(D)
  # DEBUG val => _64
  # DEBUG size => 0
  if (_64 <= 0)
    goto <bb 93>;
  else
    goto <bb 94>;

  <bb 93>:
  _57 = _64 * -2;
  val_1155 = _57 + 1;
  goto <bb 95>;

  <bb 94>:
  val_1156 = _64 * 2;

  <bb 95>:
  # val_1157 = PHI <val_1155(93), val_1156(94)>
  # DEBUG val => val_1157
  # DEBUG tmp => val_1157
  if (val_1157 > 255)
    goto <bb 96>;
  else
    goto <bb 97>;

  <bb 96>:
  # DEBUG size => 16
  val_1158 = val_1157 >> 8;
  # DEBUG tmp => val_1158

  <bb 97>:
  # size_1162 = PHI <0(95), 16(96)>
  # val_1159 = PHI <val_1157(95), val_1158(96)>
  # DEBUG tmp => val_1159
  # DEBUG size => size_1162
  _1160 = x264_ue_size_tab[val_1159];
  _1161 = (int) _1160;
  size_1163 = _1161 + size_1162;
  # DEBUG size => size_1163
  # DEBUG s => s_19(D)
  # DEBUG i_count => size_1163
  # DEBUG i_bits => (unsigned int) val_1157
  _1166 = prephitmp_3113 << size_1163;
  _1167 = (long int) val_1157;
  _1168 = _1166 | _1167;
  _1170 = prephitmp_3115 - size_1163;
  s_19(D)->i_left = _1170;
  if (_1170 <= 32)
    goto <bb 98>;
  else
    goto <bb 99>;

  <bb 98>:
  _1172 = _1168 << _1170;
  # DEBUG x => _1172
  __asm__("bswap %0" : "=r" x_1173 : "0" _1172);
  # DEBUG x => x_1173
  # DEBUG x => NULL
  _1174 = (unsigned int) x_1173;
  MEM[(uint32_t *)prephitmp_3117] = _1174;
  _1175 = s_19(D)->i_left;
  _1176 = _1175 + 32;
  s_19(D)->i_left = _1176;
  _1177 = prephitmp_3117 + 4;
  s_19(D)->p = _1177;

  <bb 99>:
  # prephitmp_3118 = PHI <_1176(98), _1170(97)>
  # prephitmp_3120 = PHI <_1177(98), prephitmp_3117(97)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  i_66 = i_1164 + 1;
  # DEBUG i => i_66
  # DEBUG i => i_66
  _63 = sps_16(D)->i_num_ref_frames_in_poc_cycle;
  if (_63 > i_66)
    goto <bb 101>;
  else
    goto <bb 100>;

  <bb 100>:
  # _2767 = PHI <_1168(99)>
  # prephitmp_2765 = PHI <prephitmp_3118(99)>
  # prephitmp_2764 = PHI <prephitmp_3120(99)>
  # s__cur_bits_lsm.65_2757 = PHI <_1168(99)>
  s_19(D)->cur_bits = s__cur_bits_lsm.65_2757;
  goto <bb 102>;

  <bb 101>:
  goto <bb 92>;

  <bb 102>:
  # prephitmp_2815 = PHI <_1063(64), _991(65), _2767(100), _1063(63), _1099(90)>
  # prephitmp_2819 = PHI <_1071(64), prephitmp_2812(65), prephitmp_2765(100), _1065(63), prephitmp_3109(90)>
  # prephitmp_2824 = PHI <_1072(64), prephitmp_2814(65), prephitmp_2764(100), prephitmp_3123(63), prephitmp_3111(90)>
  _67 = sps_16(D)->i_num_ref_frames;
  _68 = (unsigned int) _67;
  # DEBUG s => s_19(D)
  # DEBUG val => _68
  # DEBUG size => 0
  val_65 = _68 + 1;
  # DEBUG val => val_65
  tmp_1178 = (int) val_65;
  # DEBUG tmp => tmp_1178
  if (tmp_1178 > 65535)
    goto <bb 103>;
  else
    goto <bb 104>;

  <bb 103>:
  # DEBUG size => 32
  tmp_1179 = tmp_1178 >> 16;
  # DEBUG tmp => tmp_1179

  <bb 104>:
  # size_1181 = PHI <0(102), 32(103)>
  # tmp_1180 = PHI <tmp_1178(102), tmp_1179(103)>
  # DEBUG tmp => tmp_1180
  # DEBUG size => size_1181
  if (tmp_1180 > 255)
    goto <bb 105>;
  else
    goto <bb 106>;

  <bb 105>:
  size_1182 = size_1181 + 16;
  # DEBUG size => size_1182
  tmp_1183 = tmp_1180 >> 8;
  # DEBUG tmp => tmp_1183

  <bb 106>:
  # size_1187 = PHI <size_1181(104), size_1182(105)>
  # tmp_1184 = PHI <tmp_1180(104), tmp_1183(105)>
  # DEBUG tmp => tmp_1184
  # DEBUG size => size_1187
  _1185 = x264_ue_size_tab[tmp_1184];
  _1186 = (int) _1185;
  size_1188 = _1186 + size_1187;
  # DEBUG size => size_1188
  _1189 = size_1188 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1189
  # DEBUG i_bits => 0
  _1191 = prephitmp_2815 << _1189;
  s_19(D)->cur_bits = _1191;
  _1193 = prephitmp_2819 - _1189;
  s_19(D)->i_left = _1193;
  if (_1193 <= 32)
    goto <bb 107>;
  else
    goto <bb 108>;

  <bb 107>:
  _1195 = _1191 << _1193;
  # DEBUG x => _1195
  __asm__("bswap %0" : "=r" x_1196 : "0" _1195);
  # DEBUG x => x_1196
  # DEBUG x => NULL
  _1197 = (unsigned int) x_1196;
  MEM[(uint32_t *)prephitmp_2824] = _1197;
  _1198 = s_19(D)->i_left;
  _1199 = _1198 + 32;
  s_19(D)->i_left = _1199;
  _1200 = prephitmp_2824 + 4;
  s_19(D)->p = _1200;

  <bb 108>:
  # prephitmp_2825 = PHI <_1193(106), _1199(107)>
  # prephitmp_2827 = PHI <prephitmp_2824(106), _1200(107)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1201 = _1189 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1201
  # DEBUG i_bits => val_65
  _1202 = _1191 << _1201;
  _1203 = (long int) val_65;
  _1204 = _1202 | _1203;
  s_19(D)->cur_bits = _1204;
  _1206 = prephitmp_2825 - _1201;
  s_19(D)->i_left = _1206;
  if (_1206 <= 32)
    goto <bb 109>;
  else
    goto <bb 110>;

  <bb 109>:
  _1208 = _1204 << _1206;
  # DEBUG x => _1208
  __asm__("bswap %0" : "=r" x_1209 : "0" _1208);
  # DEBUG x => x_1209
  # DEBUG x => NULL
  _1210 = (unsigned int) x_1209;
  MEM[(uint32_t *)prephitmp_2827] = _1210;
  _1211 = s_19(D)->i_left;
  _1212 = _1211 + 32;
  s_19(D)->i_left = _1212;
  _1213 = prephitmp_2827 + 4;
  s_19(D)->p = _1213;

  <bb 110>:
  # prephitmp_2828 = PHI <_1212(109), _1206(108)>
  # prephitmp_2830 = PHI <_1213(109), prephitmp_2827(108)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _70 = sps_16(D)->b_gaps_in_frame_num_value_allowed;
  _71 = (unsigned int) _70;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => _71
  _308 = _1204 << 1;
  _309 = (long int) _71;
  _310 = _308 | _309;
  s_19(D)->cur_bits = _310;
  _312 = prephitmp_2828 + -1;
  s_19(D)->i_left = _312;
  if (_312 <= 32)
    goto <bb 111>;
  else
    goto <bb 112>;

  <bb 111>:
  _314 = _310 << _312;
  # DEBUG x => _314
  __asm__("bswap %0" : "=r" x_315 : "0" _314);
  # DEBUG x => x_315
  # DEBUG x => NULL
  _316 = (unsigned int) x_315;
  MEM[(uint32_t *)prephitmp_2830] = _316;
  _317 = s_19(D)->i_left;
  _318 = _317 + 32;
  s_19(D)->i_left = _318;
  _319 = prephitmp_2830 + 4;
  s_19(D)->p = _319;

  <bb 112>:
  # prephitmp_2831 = PHI <_318(111), _312(110)>
  # prephitmp_2833 = PHI <_319(111), prephitmp_2830(110)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _73 = sps_16(D)->i_mb_width;
  _74 = _73 + -1;
  _75 = (unsigned int) _74;
  # DEBUG s => s_19(D)
  # DEBUG val => _75
  # DEBUG size => 0
  val_69 = _75 + 1;
  # DEBUG val => val_69
  tmp_1214 = (int) val_69;
  # DEBUG tmp => tmp_1214
  if (tmp_1214 > 65535)
    goto <bb 113>;
  else
    goto <bb 114>;

  <bb 113>:
  # DEBUG size => 32
  tmp_1215 = tmp_1214 >> 16;
  # DEBUG tmp => tmp_1215

  <bb 114>:
  # size_1217 = PHI <0(112), 32(113)>
  # tmp_1216 = PHI <tmp_1214(112), tmp_1215(113)>
  # DEBUG tmp => tmp_1216
  # DEBUG size => size_1217
  if (tmp_1216 > 255)
    goto <bb 115>;
  else
    goto <bb 116>;

  <bb 115>:
  size_1218 = size_1217 + 16;
  # DEBUG size => size_1218
  tmp_1219 = tmp_1216 >> 8;
  # DEBUG tmp => tmp_1219

  <bb 116>:
  # size_1223 = PHI <size_1217(114), size_1218(115)>
  # tmp_1220 = PHI <tmp_1216(114), tmp_1219(115)>
  # DEBUG tmp => tmp_1220
  # DEBUG size => size_1223
  _1221 = x264_ue_size_tab[tmp_1220];
  _1222 = (int) _1221;
  size_1224 = _1222 + size_1223;
  # DEBUG size => size_1224
  _1225 = size_1224 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1225
  # DEBUG i_bits => 0
  _1227 = _310 << _1225;
  s_19(D)->cur_bits = _1227;
  _1229 = prephitmp_2831 - _1225;
  s_19(D)->i_left = _1229;
  if (_1229 <= 32)
    goto <bb 117>;
  else
    goto <bb 118>;

  <bb 117>:
  _1231 = _1227 << _1229;
  # DEBUG x => _1231
  __asm__("bswap %0" : "=r" x_1232 : "0" _1231);
  # DEBUG x => x_1232
  # DEBUG x => NULL
  _1233 = (unsigned int) x_1232;
  MEM[(uint32_t *)prephitmp_2833] = _1233;
  _1234 = s_19(D)->i_left;
  _1235 = _1234 + 32;
  s_19(D)->i_left = _1235;
  _1236 = prephitmp_2833 + 4;
  s_19(D)->p = _1236;

  <bb 118>:
  # prephitmp_2834 = PHI <_1229(116), _1235(117)>
  # prephitmp_2836 = PHI <prephitmp_2833(116), _1236(117)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1237 = _1225 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1237
  # DEBUG i_bits => val_69
  _1238 = _1227 << _1237;
  _1239 = (long int) val_69;
  _1240 = _1238 | _1239;
  s_19(D)->cur_bits = _1240;
  _1242 = prephitmp_2834 - _1237;
  s_19(D)->i_left = _1242;
  if (_1242 <= 32)
    goto <bb 119>;
  else
    goto <bb 120>;

  <bb 119>:
  _1244 = _1240 << _1242;
  # DEBUG x => _1244
  __asm__("bswap %0" : "=r" x_1245 : "0" _1244);
  # DEBUG x => x_1245
  # DEBUG x => NULL
  _1246 = (unsigned int) x_1245;
  MEM[(uint32_t *)prephitmp_2836] = _1246;
  _1247 = s_19(D)->i_left;
  _1248 = _1247 + 32;
  s_19(D)->i_left = _1248;
  _1249 = prephitmp_2836 + 4;
  s_19(D)->p = _1249;

  <bb 120>:
  # prephitmp_2837 = PHI <_1248(119), _1242(118)>
  # prephitmp_2839 = PHI <_1249(119), prephitmp_2836(118)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _77 = sps_16(D)->b_frame_mbs_only;
  if (_77 != 0)
    goto <bb 121>;
  else
    goto <bb 129>;

  <bb 121>:
  _78 = sps_16(D)->i_mb_height;
  _79 = _78 + -1;
  _80 = (unsigned int) _79;
  # DEBUG s => s_19(D)
  # DEBUG val => _80
  # DEBUG size => 0
  val_76 = _80 + 1;
  # DEBUG val => val_76
  tmp_1250 = (int) val_76;
  # DEBUG tmp => tmp_1250
  if (tmp_1250 > 65535)
    goto <bb 122>;
  else
    goto <bb 123>;

  <bb 122>:
  # DEBUG size => 32
  tmp_1251 = tmp_1250 >> 16;
  # DEBUG tmp => tmp_1251

  <bb 123>:
  # size_1253 = PHI <0(121), 32(122)>
  # tmp_1252 = PHI <tmp_1250(121), tmp_1251(122)>
  # DEBUG tmp => tmp_1252
  # DEBUG size => size_1253
  if (tmp_1252 > 255)
    goto <bb 124>;
  else
    goto <bb 125>;

  <bb 124>:
  size_1254 = size_1253 + 16;
  # DEBUG size => size_1254
  tmp_1255 = tmp_1252 >> 8;
  # DEBUG tmp => tmp_1255

  <bb 125>:
  # size_1259 = PHI <size_1253(123), size_1254(124)>
  # tmp_1256 = PHI <tmp_1252(123), tmp_1255(124)>
  # DEBUG tmp => tmp_1256
  # DEBUG size => size_1259
  _1257 = x264_ue_size_tab[tmp_1256];
  _1258 = (int) _1257;
  size_1260 = _1258 + size_1259;
  # DEBUG size => size_1260
  _1261 = size_1260 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1261
  # DEBUG i_bits => 0
  _1263 = _1240 << _1261;
  s_19(D)->cur_bits = _1263;
  _1265 = prephitmp_2837 - _1261;
  s_19(D)->i_left = _1265;
  if (_1265 <= 32)
    goto <bb 126>;
  else
    goto <bb 127>;

  <bb 126>:
  _1267 = _1263 << _1265;
  # DEBUG x => _1267
  __asm__("bswap %0" : "=r" x_1268 : "0" _1267);
  # DEBUG x => x_1268
  # DEBUG x => NULL
  _1269 = (unsigned int) x_1268;
  MEM[(uint32_t *)prephitmp_2839] = _1269;
  _1270 = s_19(D)->i_left;
  _1271 = _1270 + 32;
  s_19(D)->i_left = _1271;
  _1272 = prephitmp_2839 + 4;
  s_19(D)->p = _1272;

  <bb 127>:
  # prephitmp_3094 = PHI <_1265(125), _1271(126)>
  # prephitmp_3096 = PHI <prephitmp_2839(125), _1272(126)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1273 = _1261 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1273
  # DEBUG i_bits => val_76
  _1274 = _1263 << _1273;
  _1275 = (long int) val_76;
  _1276 = _1274 | _1275;
  s_19(D)->cur_bits = _1276;
  _1278 = prephitmp_3094 - _1273;
  s_19(D)->i_left = _1278;
  if (_1278 <= 32)
    goto <bb 128>;
  else
    goto <bb 137>;

  <bb 128>:
  _1280 = _1276 << _1278;
  # DEBUG x => _1280
  __asm__("bswap %0" : "=r" x_1281 : "0" _1280);
  # DEBUG x => x_1281
  # DEBUG x => NULL
  _1282 = (unsigned int) x_1281;
  MEM[(uint32_t *)prephitmp_3096] = _1282;
  _1283 = s_19(D)->i_left;
  _1284 = _1283 + 32;
  s_19(D)->i_left = _1284;
  _1285 = prephitmp_3096 + 4;
  s_19(D)->p = _1285;
  goto <bb 137>;

  <bb 129>:
  _82 = sps_16(D)->i_mb_height;
  _83 = _82 / 2;
  _84 = _83 + -1;
  _85 = (unsigned int) _84;
  # DEBUG s => s_19(D)
  # DEBUG val => _85
  # DEBUG size => 0
  val_81 = _85 + 1;
  # DEBUG val => val_81
  tmp_1286 = (int) val_81;
  # DEBUG tmp => tmp_1286
  if (tmp_1286 > 65535)
    goto <bb 130>;
  else
    goto <bb 131>;

  <bb 130>:
  # DEBUG size => 32
  tmp_1287 = tmp_1286 >> 16;
  # DEBUG tmp => tmp_1287

  <bb 131>:
  # size_1289 = PHI <0(129), 32(130)>
  # tmp_1288 = PHI <tmp_1286(129), tmp_1287(130)>
  # DEBUG tmp => tmp_1288
  # DEBUG size => size_1289
  if (tmp_1288 > 255)
    goto <bb 132>;
  else
    goto <bb 133>;

  <bb 132>:
  size_1290 = size_1289 + 16;
  # DEBUG size => size_1290
  tmp_1291 = tmp_1288 >> 8;
  # DEBUG tmp => tmp_1291

  <bb 133>:
  # size_1295 = PHI <size_1289(131), size_1290(132)>
  # tmp_1292 = PHI <tmp_1288(131), tmp_1291(132)>
  # DEBUG tmp => tmp_1292
  # DEBUG size => size_1295
  _1293 = x264_ue_size_tab[tmp_1292];
  _1294 = (int) _1293;
  size_1296 = _1294 + size_1295;
  # DEBUG size => size_1296
  _1297 = size_1296 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1297
  # DEBUG i_bits => 0
  _1299 = _1240 << _1297;
  s_19(D)->cur_bits = _1299;
  _1301 = prephitmp_2837 - _1297;
  s_19(D)->i_left = _1301;
  if (_1301 <= 32)
    goto <bb 134>;
  else
    goto <bb 135>;

  <bb 134>:
  _1303 = _1299 << _1301;
  # DEBUG x => _1303
  __asm__("bswap %0" : "=r" x_1304 : "0" _1303);
  # DEBUG x => x_1304
  # DEBUG x => NULL
  _1305 = (unsigned int) x_1304;
  MEM[(uint32_t *)prephitmp_2839] = _1305;
  _1306 = s_19(D)->i_left;
  _1307 = _1306 + 32;
  s_19(D)->i_left = _1307;
  _1308 = prephitmp_2839 + 4;
  s_19(D)->p = _1308;

  <bb 135>:
  # prephitmp_3091 = PHI <_1301(133), _1307(134)>
  # prephitmp_3093 = PHI <prephitmp_2839(133), _1308(134)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1309 = _1297 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1309
  # DEBUG i_bits => val_81
  _1310 = _1299 << _1309;
  _1311 = (long int) val_81;
  _1312 = _1310 | _1311;
  s_19(D)->cur_bits = _1312;
  _1314 = prephitmp_3091 - _1309;
  s_19(D)->i_left = _1314;
  if (_1314 <= 32)
    goto <bb 136>;
  else
    goto <bb 137>;

  <bb 136>:
  _1316 = _1312 << _1314;
  # DEBUG x => _1316
  __asm__("bswap %0" : "=r" x_1317 : "0" _1316);
  # DEBUG x => x_1317
  # DEBUG x => NULL
  _1318 = (unsigned int) x_1317;
  MEM[(uint32_t *)prephitmp_3093] = _1318;
  _1319 = s_19(D)->i_left;
  _1320 = _1319 + 32;
  s_19(D)->i_left = _1320;
  _1321 = prephitmp_3093 + 4;
  s_19(D)->p = _1321;

  <bb 137>:
  # prephitmp_2840 = PHI <_1276(128), _1312(136), _1276(127), _1312(135)>
  # prephitmp_2841 = PHI <_1284(128), _1320(136), _1278(127), _1314(135)>
  # prephitmp_2844 = PHI <_1285(128), _1321(136), prephitmp_3096(127), prephitmp_3093(135)>
  _87 = sps_16(D)->b_frame_mbs_only;
  _88 = (unsigned int) _87;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => _88
  _320 = prephitmp_2840 << 1;
  _321 = (long int) _88;
  _322 = _320 | _321;
  s_19(D)->cur_bits = _322;
  _324 = prephitmp_2841 + -1;
  s_19(D)->i_left = _324;
  if (_324 <= 32)
    goto <bb 138>;
  else
    goto <bb 139>;

  <bb 138>:
  _326 = _322 << _324;
  # DEBUG x => _326
  __asm__("bswap %0" : "=r" x_327 : "0" _326);
  # DEBUG x => x_327
  # DEBUG x => NULL
  _328 = (unsigned int) x_327;
  MEM[(uint32_t *)prephitmp_2844] = _328;
  _329 = s_19(D)->i_left;
  _330 = _329 + 32;
  s_19(D)->i_left = _330;
  _331 = prephitmp_2844 + 4;
  s_19(D)->p = _331;
  pretmp_2845 = sps_16(D)->b_frame_mbs_only;

  <bb 139>:
  # prephitmp_2846 = PHI <pretmp_2845(138), _87(137)>
  # prephitmp_2847 = PHI <_330(138), _324(137)>
  # prephitmp_2849 = PHI <_331(138), prephitmp_2844(137)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  if (prephitmp_2846 == 0)
    goto <bb 140>;
  else
    goto <bb 142>;

  <bb 140>:
  _90 = sps_16(D)->b_mb_adaptive_frame_field;
  _91 = (unsigned int) _90;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => _91
  _332 = _322 << 1;
  _333 = (long int) _91;
  _334 = _332 | _333;
  s_19(D)->cur_bits = _334;
  _336 = prephitmp_2847 + -1;
  s_19(D)->i_left = _336;
  if (_336 <= 32)
    goto <bb 141>;
  else
    goto <bb 142>;

  <bb 141>:
  _338 = _334 << _336;
  # DEBUG x => _338
  __asm__("bswap %0" : "=r" x_339 : "0" _338);
  # DEBUG x => x_339
  # DEBUG x => NULL
  _340 = (unsigned int) x_339;
  MEM[(uint32_t *)prephitmp_2849] = _340;
  _341 = s_19(D)->i_left;
  _342 = _341 + 32;
  s_19(D)->i_left = _342;
  _343 = prephitmp_2849 + 4;
  s_19(D)->p = _343;

  <bb 142>:
  # prephitmp_2850 = PHI <_322(139), _334(141), _334(140)>
  # prephitmp_2852 = PHI <prephitmp_2847(139), _342(141), _336(140)>
  # prephitmp_2855 = PHI <prephitmp_2849(139), _343(141), prephitmp_2849(140)>
  _92 = sps_16(D)->b_direct8x8_inference;
  _93 = (unsigned int) _92;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => _93
  _356 = prephitmp_2850 << 1;
  _357 = (long int) _93;
  _358 = _356 | _357;
  s_19(D)->cur_bits = _358;
  _360 = prephitmp_2852 + -1;
  s_19(D)->i_left = _360;
  if (_360 <= 32)
    goto <bb 143>;
  else
    goto <bb 144>;

  <bb 143>:
  _362 = _358 << _360;
  # DEBUG x => _362
  __asm__("bswap %0" : "=r" x_363 : "0" _362);
  # DEBUG x => x_363
  # DEBUG x => NULL
  _364 = (unsigned int) x_363;
  MEM[(uint32_t *)prephitmp_2855] = _364;
  _365 = s_19(D)->i_left;
  _366 = _365 + 32;
  s_19(D)->i_left = _366;
  _367 = prephitmp_2855 + 4;
  s_19(D)->p = _367;

  <bb 144>:
  # prephitmp_2856 = PHI <_366(143), _360(142)>
  # prephitmp_2858 = PHI <_367(143), prephitmp_2855(142)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _95 = sps_16(D)->b_crop;
  _96 = (unsigned int) _95;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => _96
  _344 = _358 << 1;
  _345 = (long int) _96;
  _346 = _344 | _345;
  s_19(D)->cur_bits = _346;
  _348 = prephitmp_2856 + -1;
  s_19(D)->i_left = _348;
  if (_348 <= 32)
    goto <bb 145>;
  else
    goto <bb 146>;

  <bb 145>:
  _350 = _346 << _348;
  # DEBUG x => _350
  __asm__("bswap %0" : "=r" x_351 : "0" _350);
  # DEBUG x => x_351
  # DEBUG x => NULL
  _352 = (unsigned int) x_351;
  MEM[(uint32_t *)prephitmp_2858] = _352;
  _353 = s_19(D)->i_left;
  _354 = _353 + 32;
  s_19(D)->i_left = _354;
  _355 = prephitmp_2858 + 4;
  s_19(D)->p = _355;
  pretmp_2859 = sps_16(D)->b_crop;

  <bb 146>:
  # prephitmp_2860 = PHI <pretmp_2859(145), _95(144)>
  # prephitmp_2861 = PHI <_354(145), _348(144)>
  # prephitmp_2863 = PHI <_355(145), prephitmp_2858(144)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  if (prephitmp_2860 != 0)
    goto <bb 147>;
  else
    goto <bb 179>;

  <bb 147>:
  _99 = sps_16(D)->crop.i_left;
  _100 = _99 / 2;
  _101 = (unsigned int) _100;
  # DEBUG s => s_19(D)
  # DEBUG val => _101
  # DEBUG size => 0
  val_106 = _101 + 1;
  # DEBUG val => val_106
  tmp_1430 = (int) val_106;
  # DEBUG tmp => tmp_1430
  if (tmp_1430 > 65535)
    goto <bb 148>;
  else
    goto <bb 149>;

  <bb 148>:
  # DEBUG size => 32
  tmp_1431 = tmp_1430 >> 16;
  # DEBUG tmp => tmp_1431

  <bb 149>:
  # size_1433 = PHI <0(147), 32(148)>
  # tmp_1432 = PHI <tmp_1430(147), tmp_1431(148)>
  # DEBUG tmp => tmp_1432
  # DEBUG size => size_1433
  if (tmp_1432 > 255)
    goto <bb 150>;
  else
    goto <bb 151>;

  <bb 150>:
  size_1434 = size_1433 + 16;
  # DEBUG size => size_1434
  tmp_1435 = tmp_1432 >> 8;
  # DEBUG tmp => tmp_1435

  <bb 151>:
  # size_1439 = PHI <size_1433(149), size_1434(150)>
  # tmp_1436 = PHI <tmp_1432(149), tmp_1435(150)>
  # DEBUG tmp => tmp_1436
  # DEBUG size => size_1439
  _1437 = x264_ue_size_tab[tmp_1436];
  _1438 = (int) _1437;
  size_1440 = _1438 + size_1439;
  # DEBUG size => size_1440
  _1441 = size_1440 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1441
  # DEBUG i_bits => 0
  _1443 = _346 << _1441;
  s_19(D)->cur_bits = _1443;
  _1445 = prephitmp_2861 - _1441;
  s_19(D)->i_left = _1445;
  if (_1445 <= 32)
    goto <bb 152>;
  else
    goto <bb 153>;

  <bb 152>:
  _1447 = _1443 << _1445;
  # DEBUG x => _1447
  __asm__("bswap %0" : "=r" x_1448 : "0" _1447);
  # DEBUG x => x_1448
  # DEBUG x => NULL
  _1449 = (unsigned int) x_1448;
  MEM[(uint32_t *)prephitmp_2863] = _1449;
  _1450 = s_19(D)->i_left;
  _1451 = _1450 + 32;
  s_19(D)->i_left = _1451;
  _1452 = prephitmp_2863 + 4;
  s_19(D)->p = _1452;

  <bb 153>:
  # prephitmp_3070 = PHI <_1445(151), _1451(152)>
  # prephitmp_3072 = PHI <prephitmp_2863(151), _1452(152)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1453 = _1441 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1453
  # DEBUG i_bits => val_106
  _1454 = _1443 << _1453;
  _1455 = (long int) val_106;
  _1456 = _1454 | _1455;
  s_19(D)->cur_bits = _1456;
  _1458 = prephitmp_3070 - _1453;
  s_19(D)->i_left = _1458;
  if (_1458 <= 32)
    goto <bb 154>;
  else
    goto <bb 155>;

  <bb 154>:
  _1460 = _1456 << _1458;
  # DEBUG x => _1460
  __asm__("bswap %0" : "=r" x_1461 : "0" _1460);
  # DEBUG x => x_1461
  # DEBUG x => NULL
  _1462 = (unsigned int) x_1461;
  MEM[(uint32_t *)prephitmp_3072] = _1462;
  _1463 = s_19(D)->i_left;
  _1464 = _1463 + 32;
  s_19(D)->i_left = _1464;
  _1465 = prephitmp_3072 + 4;
  s_19(D)->p = _1465;

  <bb 155>:
  # prephitmp_3073 = PHI <_1464(154), _1458(153)>
  # prephitmp_3075 = PHI <_1465(154), prephitmp_3072(153)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _103 = sps_16(D)->crop.i_right;
  _104 = _103 / 2;
  _105 = (unsigned int) _104;
  # DEBUG s => s_19(D)
  # DEBUG val => _105
  # DEBUG size => 0
  val_110 = _105 + 1;
  # DEBUG val => val_110
  tmp_1394 = (int) val_110;
  # DEBUG tmp => tmp_1394
  if (tmp_1394 > 65535)
    goto <bb 156>;
  else
    goto <bb 157>;

  <bb 156>:
  # DEBUG size => 32
  tmp_1395 = tmp_1394 >> 16;
  # DEBUG tmp => tmp_1395

  <bb 157>:
  # size_1397 = PHI <0(155), 32(156)>
  # tmp_1396 = PHI <tmp_1394(155), tmp_1395(156)>
  # DEBUG tmp => tmp_1396
  # DEBUG size => size_1397
  if (tmp_1396 > 255)
    goto <bb 158>;
  else
    goto <bb 159>;

  <bb 158>:
  size_1398 = size_1397 + 16;
  # DEBUG size => size_1398
  tmp_1399 = tmp_1396 >> 8;
  # DEBUG tmp => tmp_1399

  <bb 159>:
  # size_1403 = PHI <size_1397(157), size_1398(158)>
  # tmp_1400 = PHI <tmp_1396(157), tmp_1399(158)>
  # DEBUG tmp => tmp_1400
  # DEBUG size => size_1403
  _1401 = x264_ue_size_tab[tmp_1400];
  _1402 = (int) _1401;
  size_1404 = _1402 + size_1403;
  # DEBUG size => size_1404
  _1405 = size_1404 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1405
  # DEBUG i_bits => 0
  _1407 = _1456 << _1405;
  s_19(D)->cur_bits = _1407;
  _1409 = prephitmp_3073 - _1405;
  s_19(D)->i_left = _1409;
  if (_1409 <= 32)
    goto <bb 160>;
  else
    goto <bb 161>;

  <bb 160>:
  _1411 = _1407 << _1409;
  # DEBUG x => _1411
  __asm__("bswap %0" : "=r" x_1412 : "0" _1411);
  # DEBUG x => x_1412
  # DEBUG x => NULL
  _1413 = (unsigned int) x_1412;
  MEM[(uint32_t *)prephitmp_3075] = _1413;
  _1414 = s_19(D)->i_left;
  _1415 = _1414 + 32;
  s_19(D)->i_left = _1415;
  _1416 = prephitmp_3075 + 4;
  s_19(D)->p = _1416;

  <bb 161>:
  # prephitmp_3076 = PHI <_1409(159), _1415(160)>
  # prephitmp_3078 = PHI <prephitmp_3075(159), _1416(160)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1417 = _1405 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1417
  # DEBUG i_bits => val_110
  _1418 = _1407 << _1417;
  _1419 = (long int) val_110;
  _1420 = _1418 | _1419;
  s_19(D)->cur_bits = _1420;
  _1422 = prephitmp_3076 - _1417;
  s_19(D)->i_left = _1422;
  if (_1422 <= 32)
    goto <bb 162>;
  else
    goto <bb 163>;

  <bb 162>:
  _1424 = _1420 << _1422;
  # DEBUG x => _1424
  __asm__("bswap %0" : "=r" x_1425 : "0" _1424);
  # DEBUG x => x_1425
  # DEBUG x => NULL
  _1426 = (unsigned int) x_1425;
  MEM[(uint32_t *)prephitmp_3078] = _1426;
  _1427 = s_19(D)->i_left;
  _1428 = _1427 + 32;
  s_19(D)->i_left = _1428;
  _1429 = prephitmp_3078 + 4;
  s_19(D)->p = _1429;

  <bb 163>:
  # prephitmp_3079 = PHI <_1428(162), _1422(161)>
  # prephitmp_3081 = PHI <_1429(162), prephitmp_3078(161)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _107 = sps_16(D)->crop.i_top;
  _108 = _107 / 2;
  _109 = (unsigned int) _108;
  # DEBUG s => s_19(D)
  # DEBUG val => _109
  # DEBUG size => 0
  val_114 = _109 + 1;
  # DEBUG val => val_114
  tmp_1358 = (int) val_114;
  # DEBUG tmp => tmp_1358
  if (tmp_1358 > 65535)
    goto <bb 164>;
  else
    goto <bb 165>;

  <bb 164>:
  # DEBUG size => 32
  tmp_1359 = tmp_1358 >> 16;
  # DEBUG tmp => tmp_1359

  <bb 165>:
  # size_1361 = PHI <0(163), 32(164)>
  # tmp_1360 = PHI <tmp_1358(163), tmp_1359(164)>
  # DEBUG tmp => tmp_1360
  # DEBUG size => size_1361
  if (tmp_1360 > 255)
    goto <bb 166>;
  else
    goto <bb 167>;

  <bb 166>:
  size_1362 = size_1361 + 16;
  # DEBUG size => size_1362
  tmp_1363 = tmp_1360 >> 8;
  # DEBUG tmp => tmp_1363

  <bb 167>:
  # size_1367 = PHI <size_1361(165), size_1362(166)>
  # tmp_1364 = PHI <tmp_1360(165), tmp_1363(166)>
  # DEBUG tmp => tmp_1364
  # DEBUG size => size_1367
  _1365 = x264_ue_size_tab[tmp_1364];
  _1366 = (int) _1365;
  size_1368 = _1366 + size_1367;
  # DEBUG size => size_1368
  _1369 = size_1368 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1369
  # DEBUG i_bits => 0
  _1371 = _1420 << _1369;
  s_19(D)->cur_bits = _1371;
  _1373 = prephitmp_3079 - _1369;
  s_19(D)->i_left = _1373;
  if (_1373 <= 32)
    goto <bb 168>;
  else
    goto <bb 169>;

  <bb 168>:
  _1375 = _1371 << _1373;
  # DEBUG x => _1375
  __asm__("bswap %0" : "=r" x_1376 : "0" _1375);
  # DEBUG x => x_1376
  # DEBUG x => NULL
  _1377 = (unsigned int) x_1376;
  MEM[(uint32_t *)prephitmp_3081] = _1377;
  _1378 = s_19(D)->i_left;
  _1379 = _1378 + 32;
  s_19(D)->i_left = _1379;
  _1380 = prephitmp_3081 + 4;
  s_19(D)->p = _1380;

  <bb 169>:
  # prephitmp_3082 = PHI <_1373(167), _1379(168)>
  # prephitmp_3084 = PHI <prephitmp_3081(167), _1380(168)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1381 = _1369 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1381
  # DEBUG i_bits => val_114
  _1382 = _1371 << _1381;
  _1383 = (long int) val_114;
  _1384 = _1382 | _1383;
  s_19(D)->cur_bits = _1384;
  _1386 = prephitmp_3082 - _1381;
  s_19(D)->i_left = _1386;
  if (_1386 <= 32)
    goto <bb 170>;
  else
    goto <bb 171>;

  <bb 170>:
  _1388 = _1384 << _1386;
  # DEBUG x => _1388
  __asm__("bswap %0" : "=r" x_1389 : "0" _1388);
  # DEBUG x => x_1389
  # DEBUG x => NULL
  _1390 = (unsigned int) x_1389;
  MEM[(uint32_t *)prephitmp_3084] = _1390;
  _1391 = s_19(D)->i_left;
  _1392 = _1391 + 32;
  s_19(D)->i_left = _1392;
  _1393 = prephitmp_3084 + 4;
  s_19(D)->p = _1393;

  <bb 171>:
  # prephitmp_3085 = PHI <_1392(170), _1386(169)>
  # prephitmp_3087 = PHI <_1393(170), prephitmp_3084(169)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _111 = sps_16(D)->crop.i_bottom;
  _112 = _111 / 2;
  _113 = (unsigned int) _112;
  # DEBUG s => s_19(D)
  # DEBUG val => _113
  # DEBUG size => 0
  val_86 = _113 + 1;
  # DEBUG val => val_86
  tmp_1322 = (int) val_86;
  # DEBUG tmp => tmp_1322
  if (tmp_1322 > 65535)
    goto <bb 172>;
  else
    goto <bb 173>;

  <bb 172>:
  # DEBUG size => 32
  tmp_1323 = tmp_1322 >> 16;
  # DEBUG tmp => tmp_1323

  <bb 173>:
  # size_1325 = PHI <0(171), 32(172)>
  # tmp_1324 = PHI <tmp_1322(171), tmp_1323(172)>
  # DEBUG tmp => tmp_1324
  # DEBUG size => size_1325
  if (tmp_1324 > 255)
    goto <bb 174>;
  else
    goto <bb 175>;

  <bb 174>:
  size_1326 = size_1325 + 16;
  # DEBUG size => size_1326
  tmp_1327 = tmp_1324 >> 8;
  # DEBUG tmp => tmp_1327

  <bb 175>:
  # size_1331 = PHI <size_1325(173), size_1326(174)>
  # tmp_1328 = PHI <tmp_1324(173), tmp_1327(174)>
  # DEBUG tmp => tmp_1328
  # DEBUG size => size_1331
  _1329 = x264_ue_size_tab[tmp_1328];
  _1330 = (int) _1329;
  size_1332 = _1330 + size_1331;
  # DEBUG size => size_1332
  _1333 = size_1332 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1333
  # DEBUG i_bits => 0
  _1335 = _1384 << _1333;
  s_19(D)->cur_bits = _1335;
  _1337 = prephitmp_3085 - _1333;
  s_19(D)->i_left = _1337;
  if (_1337 <= 32)
    goto <bb 176>;
  else
    goto <bb 177>;

  <bb 176>:
  _1339 = _1335 << _1337;
  # DEBUG x => _1339
  __asm__("bswap %0" : "=r" x_1340 : "0" _1339);
  # DEBUG x => x_1340
  # DEBUG x => NULL
  _1341 = (unsigned int) x_1340;
  MEM[(uint32_t *)prephitmp_3087] = _1341;
  _1342 = s_19(D)->i_left;
  _1343 = _1342 + 32;
  s_19(D)->i_left = _1343;
  _1344 = prephitmp_3087 + 4;
  s_19(D)->p = _1344;

  <bb 177>:
  # prephitmp_3088 = PHI <_1337(175), _1343(176)>
  # prephitmp_3090 = PHI <prephitmp_3087(175), _1344(176)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1345 = _1333 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1345
  # DEBUG i_bits => val_86
  _1346 = _1335 << _1345;
  _1347 = (long int) val_86;
  _1348 = _1346 | _1347;
  s_19(D)->cur_bits = _1348;
  _1350 = prephitmp_3088 - _1345;
  s_19(D)->i_left = _1350;
  if (_1350 <= 32)
    goto <bb 178>;
  else
    goto <bb 179>;

  <bb 178>:
  _1352 = _1348 << _1350;
  # DEBUG x => _1352
  __asm__("bswap %0" : "=r" x_1353 : "0" _1352);
  # DEBUG x => x_1353
  # DEBUG x => NULL
  _1354 = (unsigned int) x_1353;
  MEM[(uint32_t *)prephitmp_3090] = _1354;
  _1355 = s_19(D)->i_left;
  _1356 = _1355 + 32;
  s_19(D)->i_left = _1356;
  _1357 = prephitmp_3090 + 4;
  s_19(D)->p = _1357;

  <bb 179>:
  # prephitmp_2864 = PHI <_346(146), _1348(178), _1348(177)>
  # prephitmp_2866 = PHI <prephitmp_2861(146), _1356(178), _1350(177)>
  # prephitmp_2869 = PHI <prephitmp_2863(146), _1357(178), prephitmp_3090(177)>
  _115 = sps_16(D)->b_vui;
  _116 = (unsigned int) _115;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => _116
  _368 = prephitmp_2864 << 1;
  _369 = (long int) _116;
  _370 = _368 | _369;
  s_19(D)->cur_bits = _370;
  _372 = prephitmp_2866 + -1;
  s_19(D)->i_left = _372;
  if (_372 <= 32)
    goto <bb 180>;
  else
    goto <bb 181>;

  <bb 180>:
  _374 = _370 << _372;
  # DEBUG x => _374
  __asm__("bswap %0" : "=r" x_375 : "0" _374);
  # DEBUG x => x_375
  # DEBUG x => NULL
  _376 = (unsigned int) x_375;
  MEM[(uint32_t *)prephitmp_2869] = _376;
  _377 = s_19(D)->i_left;
  _378 = _377 + 32;
  s_19(D)->i_left = _378;
  _379 = prephitmp_2869 + 4;
  s_19(D)->p = _379;
  pretmp_2870 = sps_16(D)->b_vui;

  <bb 181>:
  # prephitmp_2871 = PHI <pretmp_2870(180), _115(179)>
  # prephitmp_2872 = PHI <_378(180), _372(179)>
  # prephitmp_2874 = PHI <_379(180), prephitmp_2869(179)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  if (prephitmp_2871 != 0)
    goto <bb 183>;
  else
    goto <bb 182>;

  <bb 182>:
  pretmp_3145 = prephitmp_2872 + -1;
  goto <bb 319>;

  <bb 183>:
  _118 = sps_16(D)->vui.b_aspect_ratio_info_present;
  _119 = (unsigned int) _118;
  # DEBUG s => s_19(D)
  # DEBUG i_bit => _119
  _380 = _370 << 1;
  _381 = (long int) _119;
  _382 = _380 | _381;
  s_19(D)->cur_bits = _382;
  _384 = prephitmp_2872 + -1;
  s_19(D)->i_left = _384;
  if (_384 == 32)
    goto <bb 184>;
  else
    goto <bb 326>;

  <bb 184>:
  _386 = (unsigned int) _382;
  # DEBUG x => _386
  __asm__("bswap %0" : "=r" x_387 : "0" _386);
  # DEBUG x => x_387
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2874] = x_387;
  _388 = prephitmp_2874 + 4;
  s_19(D)->p = _388;
  s_19(D)->i_left = 64;
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  _120 = sps_16(D)->vui.b_aspect_ratio_info_present;
  if (_120 != 0)
    goto <bb 185>;
  else
    goto <bb 197>;

  <bb 185>:
  # prephitmp_3057 = PHI <56(184), pretmp_3056(328)>
  # prephitmp_3058 = PHI <_388(184), prephitmp_2874(328)>
  # DEBUG i => 0
  pretmp_3061 = sps_16(D)->vui.i_sar_width;

  <bb 186>:
  # i_905 = PHI <0(185), i_124(189)>
  # _2454 = PHI <1(185), _121(189)>
  # DEBUG i => i_905
  _122 = sar[i_905].w;
  if (_122 == pretmp_3061)
    goto <bb 187>;
  else
    goto <bb 188>;

  <bb 187>:
  _125 = sar[i_905].h;
  _126 = sps_16(D)->vui.i_sar_height;
  if (_125 == _126)
    goto <bb 324>;
  else
    goto <bb 188>;

  <bb 188>:
  i_124 = i_905 + 1;
  # DEBUG i => i_124
  # DEBUG i => i_124
  _121 = sar[i_124].sar;
  if (_121 != -1)
    goto <bb 189>;
  else
    goto <bb 323>;

  <bb 189>:
  goto <bb 186>;

  <bb 190>:
  _395 = _391 << prephitmp_3057;
  # DEBUG x => _395
  __asm__("bswap %0" : "=r" x_396 : "0" _395);
  # DEBUG x => x_396
  # DEBUG x => NULL
  _397 = (unsigned int) x_396;
  MEM[(uint32_t *)prephitmp_3058] = _397;
  _398 = s_19(D)->i_left;
  _399 = _398 + 32;
  s_19(D)->i_left = _399;
  _400 = prephitmp_3058 + 4;
  s_19(D)->p = _400;
  pretmp_2894 = _399 + -1;
  goto <bb 197>;

  <bb 191>:
  _430 = _426 << prephitmp_3057;
  # DEBUG x => _430
  __asm__("bswap %0" : "=r" x_431 : "0" _430);
  # DEBUG x => x_431
  # DEBUG x => NULL
  _432 = (unsigned int) x_431;
  MEM[(uint32_t *)prephitmp_3058] = _432;
  _433 = s_19(D)->i_left;
  _434 = _433 + 32;
  s_19(D)->i_left = _434;
  _435 = prephitmp_3058 + 4;
  s_19(D)->p = _435;
  pretmp_3063 = sps_16(D)->vui.i_sar_width;

  <bb 192>:
  # prephitmp_3064 = PHI <pretmp_3063(191), pretmp_3061(323)>
  # prephitmp_3065 = PHI <_434(191), prephitmp_3057(323)>
  # prephitmp_3066 = PHI <_435(191), prephitmp_3058(323)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _130 = (unsigned int) prephitmp_3064;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 16
  # DEBUG i_bits => _130
  _413 = _426 << 16;
  _414 = (long int) _130;
  _415 = _413 | _414;
  s_19(D)->cur_bits = _415;
  _417 = prephitmp_3065 + -16;
  s_19(D)->i_left = _417;
  if (_417 <= 32)
    goto <bb 193>;
  else
    goto <bb 194>;

  <bb 193>:
  _419 = _415 << _417;
  # DEBUG x => _419
  __asm__("bswap %0" : "=r" x_420 : "0" _419);
  # DEBUG x => x_420
  # DEBUG x => NULL
  _421 = (unsigned int) x_420;
  MEM[(uint32_t *)prephitmp_3066] = _421;
  _422 = s_19(D)->i_left;
  _423 = _422 + 32;
  s_19(D)->i_left = _423;
  _424 = prephitmp_3066 + 4;
  s_19(D)->p = _424;

  <bb 194>:
  # prephitmp_3067 = PHI <_423(193), _417(192)>
  # prephitmp_3069 = PHI <_424(193), prephitmp_3066(192)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _131 = sps_16(D)->vui.i_sar_height;
  _132 = (unsigned int) _131;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 16
  # DEBUG i_bits => _132
  _401 = _415 << 16;
  _402 = (long int) _132;
  _403 = _401 | _402;
  s_19(D)->cur_bits = _403;
  _405 = prephitmp_3067 + -16;
  s_19(D)->i_left = _405;
  if (_405 <= 32)
    goto <bb 196>;
  else
    goto <bb 195>;

  <bb 195>:
  pretmp_2897 = _405 + -1;
  goto <bb 197>;

  <bb 196>:
  _407 = _403 << _405;
  # DEBUG x => _407
  __asm__("bswap %0" : "=r" x_408 : "0" _407);
  # DEBUG x => x_408
  # DEBUG x => NULL
  _409 = (unsigned int) x_408;
  MEM[(uint32_t *)prephitmp_3069] = _409;
  _410 = s_19(D)->i_left;
  _411 = _410 + 32;
  s_19(D)->i_left = _411;
  _412 = prephitmp_3069 + 4;
  s_19(D)->p = _412;
  pretmp_2895 = _411 + -1;

  <bb 197>:
  # prephitmp_2892 = PHI <_382(184), _391(190), _403(196), _391(325), _403(195), _382(327)>
  # prephitmp_2899 = PHI <63(184), pretmp_2894(190), pretmp_2895(196), pretmp_2896(325), pretmp_2897(195), pretmp_2898(327)>
  # prephitmp_2902 = PHI <_388(184), _400(190), _412(196), prephitmp_3058(325), prephitmp_3069(195), prephitmp_2874(327)>
  _133 = sps_16(D)->vui.b_overscan_info_present;
  _134 = (unsigned int) _133;
  # DEBUG s => s_19(D)
  # DEBUG i_bit => _134
  _436 = prephitmp_2892 << 1;
  _437 = (long int) _134;
  _438 = _436 | _437;
  s_19(D)->cur_bits = _438;
  s_19(D)->i_left = prephitmp_2899;
  if (prephitmp_2899 == 32)
    goto <bb 199>;
  else
    goto <bb 198>;

  <bb 198>:
  pretmp_2906 = prephitmp_2899 + -1;
  goto <bb 200>;

  <bb 199>:
  _442 = (unsigned int) _438;
  # DEBUG x => _442
  __asm__("bswap %0" : "=r" x_443 : "0" _442);
  # DEBUG x => x_443
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2902] = x_443;
  _444 = prephitmp_2902 + 4;
  s_19(D)->p = _444;
  s_19(D)->i_left = 64;
  pretmp_2903 = sps_16(D)->vui.b_overscan_info_present;

  <bb 200>:
  # prephitmp_2904 = PHI <pretmp_2903(199), _133(198)>
  # prephitmp_2907 = PHI <63(199), pretmp_2906(198)>
  # prephitmp_2909 = PHI <_444(199), prephitmp_2902(198)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  if (prephitmp_2904 != 0)
    goto <bb 201>;
  else
    goto <bb 204>;

  <bb 201>:
  _136 = sps_16(D)->vui.b_overscan_info;
  _137 = (unsigned int) _136;
  # DEBUG s => s_19(D)
  # DEBUG i_bit => _137
  _445 = _438 << 1;
  _446 = (long int) _137;
  _447 = _445 | _446;
  s_19(D)->cur_bits = _447;
  s_19(D)->i_left = prephitmp_2907;
  if (prephitmp_2907 == 32)
    goto <bb 203>;
  else
    goto <bb 202>;

  <bb 202>:
  pretmp_2914 = prephitmp_2907 + -1;
  goto <bb 204>;

  <bb 203>:
  _451 = (unsigned int) _447;
  # DEBUG x => _451
  __asm__("bswap %0" : "=r" x_452 : "0" _451);
  # DEBUG x => x_452
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2909] = x_452;
  _453 = prephitmp_2909 + 4;
  s_19(D)->p = _453;
  s_19(D)->i_left = 64;

  <bb 204>:
  # prephitmp_2910 = PHI <_438(200), _447(203), _447(202)>
  # prephitmp_2915 = PHI <prephitmp_2907(200), 63(203), pretmp_2914(202)>
  # prephitmp_2918 = PHI <prephitmp_2909(200), _453(203), prephitmp_2909(202)>
  _139 = sps_16(D)->vui.b_signal_type_present;
  _140 = (unsigned int) _139;
  # DEBUG s => s_19(D)
  # DEBUG i_bit => _140
  _454 = prephitmp_2910 << 1;
  _455 = (long int) _140;
  _456 = _454 | _455;
  s_19(D)->cur_bits = _456;
  s_19(D)->i_left = prephitmp_2915;
  if (prephitmp_2915 == 32)
    goto <bb 205>;
  else
    goto <bb 206>;

  <bb 205>:
  _460 = (unsigned int) _456;
  # DEBUG x => _460
  __asm__("bswap %0" : "=r" x_461 : "0" _460);
  # DEBUG x => x_461
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2918] = x_461;
  _462 = prephitmp_2918 + 4;
  s_19(D)->p = _462;
  s_19(D)->i_left = 64;
  pretmp_2919 = sps_16(D)->vui.b_signal_type_present;

  <bb 206>:
  # prephitmp_2920 = PHI <pretmp_2919(205), _139(204)>
  # prephitmp_2921 = PHI <64(205), prephitmp_2915(204)>
  # prephitmp_2923 = PHI <_462(205), prephitmp_2918(204)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  if (prephitmp_2920 != 0)
    goto <bb 207>;
  else
    goto <bb 221>;

  <bb 207>:
  _142 = sps_16(D)->vui.i_vidformat;
  _143 = (unsigned int) _142;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 3
  # DEBUG i_bits => _143
  _481 = _456 << 3;
  _482 = (long int) _143;
  _483 = _481 | _482;
  s_19(D)->cur_bits = _483;
  _485 = prephitmp_2921 + -3;
  s_19(D)->i_left = _485;
  if (_485 <= 32)
    goto <bb 208>;
  else
    goto <bb 209>;

  <bb 208>:
  _487 = _483 << _485;
  # DEBUG x => _487
  __asm__("bswap %0" : "=r" x_488 : "0" _487);
  # DEBUG x => x_488
  # DEBUG x => NULL
  _489 = (unsigned int) x_488;
  MEM[(uint32_t *)prephitmp_2923] = _489;
  _490 = s_19(D)->i_left;
  _491 = _490 + 32;
  s_19(D)->i_left = _491;
  _492 = prephitmp_2923 + 4;
  s_19(D)->p = _492;

  <bb 209>:
  # prephitmp_3036 = PHI <_491(208), _485(207)>
  # prephitmp_3038 = PHI <_492(208), prephitmp_2923(207)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _144 = sps_16(D)->vui.b_fullrange;
  _145 = (unsigned int) _144;
  # DEBUG s => s_19(D)
  # DEBUG i_bit => _145
  _472 = _483 << 1;
  _473 = (long int) _145;
  _474 = _472 | _473;
  s_19(D)->cur_bits = _474;
  _476 = prephitmp_3036 + -1;
  s_19(D)->i_left = _476;
  if (_476 == 32)
    goto <bb 211>;
  else
    goto <bb 210>;

  <bb 210>:
  pretmp_3040 = _476 + -1;
  goto <bb 212>;

  <bb 211>:
  _478 = (unsigned int) _474;
  # DEBUG x => _478
  __asm__("bswap %0" : "=r" x_479 : "0" _478);
  # DEBUG x => x_479
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_3038] = x_479;
  _480 = prephitmp_3038 + 4;
  s_19(D)->p = _480;
  s_19(D)->i_left = 64;

  <bb 212>:
  # prephitmp_3041 = PHI <63(211), pretmp_3040(210)>
  # prephitmp_3043 = PHI <_480(211), prephitmp_3038(210)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  _146 = sps_16(D)->vui.b_color_description_present;
  _147 = (unsigned int) _146;
  # DEBUG s => s_19(D)
  # DEBUG i_bit => _147
  _463 = _474 << 1;
  _464 = (long int) _147;
  _465 = _463 | _464;
  s_19(D)->cur_bits = _465;
  s_19(D)->i_left = prephitmp_3041;
  if (prephitmp_3041 == 32)
    goto <bb 213>;
  else
    goto <bb 214>;

  <bb 213>:
  _469 = (unsigned int) _465;
  # DEBUG x => _469
  __asm__("bswap %0" : "=r" x_470 : "0" _469);
  # DEBUG x => x_470
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_3043] = x_470;
  _471 = prephitmp_3043 + 4;
  s_19(D)->p = _471;
  s_19(D)->i_left = 64;
  pretmp_3044 = sps_16(D)->vui.b_color_description_present;

  <bb 214>:
  # prephitmp_3045 = PHI <pretmp_3044(213), _146(212)>
  # prephitmp_3046 = PHI <64(213), prephitmp_3041(212)>
  # prephitmp_3048 = PHI <_471(213), prephitmp_3043(212)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  if (prephitmp_3045 != 0)
    goto <bb 215>;
  else
    goto <bb 221>;

  <bb 215>:
  _149 = sps_16(D)->vui.i_colorprim;
  _150 = (unsigned int) _149;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => _150
  _517 = _465 << 8;
  _518 = (long int) _150;
  _519 = _517 | _518;
  s_19(D)->cur_bits = _519;
  _521 = prephitmp_3046 + -8;
  s_19(D)->i_left = _521;
  if (_521 <= 32)
    goto <bb 216>;
  else
    goto <bb 217>;

  <bb 216>:
  _523 = _519 << _521;
  # DEBUG x => _523
  __asm__("bswap %0" : "=r" x_524 : "0" _523);
  # DEBUG x => x_524
  # DEBUG x => NULL
  _525 = (unsigned int) x_524;
  MEM[(uint32_t *)prephitmp_3048] = _525;
  _526 = s_19(D)->i_left;
  _527 = _526 + 32;
  s_19(D)->i_left = _527;
  _528 = prephitmp_3048 + 4;
  s_19(D)->p = _528;

  <bb 217>:
  # prephitmp_3049 = PHI <_527(216), _521(215)>
  # prephitmp_3051 = PHI <_528(216), prephitmp_3048(215)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _152 = sps_16(D)->vui.i_transfer;
  _153 = (unsigned int) _152;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => _153
  _505 = _519 << 8;
  _506 = (long int) _153;
  _507 = _505 | _506;
  s_19(D)->cur_bits = _507;
  _509 = prephitmp_3049 + -8;
  s_19(D)->i_left = _509;
  if (_509 <= 32)
    goto <bb 218>;
  else
    goto <bb 219>;

  <bb 218>:
  _511 = _507 << _509;
  # DEBUG x => _511
  __asm__("bswap %0" : "=r" x_512 : "0" _511);
  # DEBUG x => x_512
  # DEBUG x => NULL
  _513 = (unsigned int) x_512;
  MEM[(uint32_t *)prephitmp_3051] = _513;
  _514 = s_19(D)->i_left;
  _515 = _514 + 32;
  s_19(D)->i_left = _515;
  _516 = prephitmp_3051 + 4;
  s_19(D)->p = _516;

  <bb 219>:
  # prephitmp_3052 = PHI <_515(218), _509(217)>
  # prephitmp_3054 = PHI <_516(218), prephitmp_3051(217)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _154 = sps_16(D)->vui.i_colmatrix;
  _155 = (unsigned int) _154;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => _155
  _493 = _507 << 8;
  _494 = (long int) _155;
  _495 = _493 | _494;
  s_19(D)->cur_bits = _495;
  _497 = prephitmp_3052 + -8;
  s_19(D)->i_left = _497;
  if (_497 <= 32)
    goto <bb 220>;
  else
    goto <bb 221>;

  <bb 220>:
  _499 = _495 << _497;
  # DEBUG x => _499
  __asm__("bswap %0" : "=r" x_500 : "0" _499);
  # DEBUG x => x_500
  # DEBUG x => NULL
  _501 = (unsigned int) x_500;
  MEM[(uint32_t *)prephitmp_3054] = _501;
  _502 = s_19(D)->i_left;
  _503 = _502 + 32;
  s_19(D)->i_left = _503;
  _504 = prephitmp_3054 + 4;
  s_19(D)->p = _504;

  <bb 221>:
  # prephitmp_2924 = PHI <_456(206), _465(214), _495(220), _495(219)>
  # prephitmp_2927 = PHI <prephitmp_2921(206), prephitmp_3046(214), _503(220), _497(219)>
  # prephitmp_2931 = PHI <prephitmp_2923(206), prephitmp_3048(214), _504(220), prephitmp_3054(219)>
  _156 = sps_16(D)->vui.b_chroma_loc_info_present;
  _157 = (unsigned int) _156;
  # DEBUG s => s_19(D)
  # DEBUG i_bit => _157
  _529 = prephitmp_2924 << 1;
  _530 = (long int) _157;
  _531 = _529 | _530;
  s_19(D)->cur_bits = _531;
  _533 = prephitmp_2927 + -1;
  s_19(D)->i_left = _533;
  if (_533 == 32)
    goto <bb 222>;
  else
    goto <bb 223>;

  <bb 222>:
  _535 = (unsigned int) _531;
  # DEBUG x => _535
  __asm__("bswap %0" : "=r" x_536 : "0" _535);
  # DEBUG x => x_536
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2931] = x_536;
  _537 = prephitmp_2931 + 4;
  s_19(D)->p = _537;
  s_19(D)->i_left = 64;
  pretmp_2932 = sps_16(D)->vui.b_chroma_loc_info_present;

  <bb 223>:
  # prephitmp_2933 = PHI <pretmp_2932(222), _156(221)>
  # prephitmp_2934 = PHI <64(222), _533(221)>
  # prephitmp_2936 = PHI <_537(222), prephitmp_2931(221)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  if (prephitmp_2933 != 0)
    goto <bb 224>;
  else
    goto <bb 240>;

  <bb 224>:
  _160 = sps_16(D)->vui.i_chroma_loc_top;
  _161 = (unsigned int) _160;
  # DEBUG s => s_19(D)
  # DEBUG val => _161
  # DEBUG size => 0
  val_165 = _161 + 1;
  # DEBUG val => val_165
  tmp_1502 = (int) val_165;
  # DEBUG tmp => tmp_1502
  if (tmp_1502 > 65535)
    goto <bb 225>;
  else
    goto <bb 226>;

  <bb 225>:
  # DEBUG size => 32
  tmp_1503 = tmp_1502 >> 16;
  # DEBUG tmp => tmp_1503

  <bb 226>:
  # size_1505 = PHI <0(224), 32(225)>
  # tmp_1504 = PHI <tmp_1502(224), tmp_1503(225)>
  # DEBUG tmp => tmp_1504
  # DEBUG size => size_1505
  if (tmp_1504 > 255)
    goto <bb 227>;
  else
    goto <bb 228>;

  <bb 227>:
  size_1506 = size_1505 + 16;
  # DEBUG size => size_1506
  tmp_1507 = tmp_1504 >> 8;
  # DEBUG tmp => tmp_1507

  <bb 228>:
  # size_1511 = PHI <size_1505(226), size_1506(227)>
  # tmp_1508 = PHI <tmp_1504(226), tmp_1507(227)>
  # DEBUG tmp => tmp_1508
  # DEBUG size => size_1511
  _1509 = x264_ue_size_tab[tmp_1508];
  _1510 = (int) _1509;
  size_1512 = _1510 + size_1511;
  # DEBUG size => size_1512
  _1513 = size_1512 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1513
  # DEBUG i_bits => 0
  _1515 = _531 << _1513;
  s_19(D)->cur_bits = _1515;
  _1517 = prephitmp_2934 - _1513;
  s_19(D)->i_left = _1517;
  if (_1517 <= 32)
    goto <bb 229>;
  else
    goto <bb 230>;

  <bb 229>:
  _1519 = _1515 << _1517;
  # DEBUG x => _1519
  __asm__("bswap %0" : "=r" x_1520 : "0" _1519);
  # DEBUG x => x_1520
  # DEBUG x => NULL
  _1521 = (unsigned int) x_1520;
  MEM[(uint32_t *)prephitmp_2936] = _1521;
  _1522 = s_19(D)->i_left;
  _1523 = _1522 + 32;
  s_19(D)->i_left = _1523;
  _1524 = prephitmp_2936 + 4;
  s_19(D)->p = _1524;

  <bb 230>:
  # prephitmp_3027 = PHI <_1517(228), _1523(229)>
  # prephitmp_3029 = PHI <prephitmp_2936(228), _1524(229)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1525 = _1513 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1525
  # DEBUG i_bits => val_165
  _1526 = _1515 << _1525;
  _1527 = (long int) val_165;
  _1528 = _1526 | _1527;
  s_19(D)->cur_bits = _1528;
  _1530 = prephitmp_3027 - _1525;
  s_19(D)->i_left = _1530;
  if (_1530 <= 32)
    goto <bb 231>;
  else
    goto <bb 232>;

  <bb 231>:
  _1532 = _1528 << _1530;
  # DEBUG x => _1532
  __asm__("bswap %0" : "=r" x_1533 : "0" _1532);
  # DEBUG x => x_1533
  # DEBUG x => NULL
  _1534 = (unsigned int) x_1533;
  MEM[(uint32_t *)prephitmp_3029] = _1534;
  _1535 = s_19(D)->i_left;
  _1536 = _1535 + 32;
  s_19(D)->i_left = _1536;
  _1537 = prephitmp_3029 + 4;
  s_19(D)->p = _1537;

  <bb 232>:
  # prephitmp_3030 = PHI <_1536(231), _1530(230)>
  # prephitmp_3032 = PHI <_1537(231), prephitmp_3029(230)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _163 = sps_16(D)->vui.i_chroma_loc_bottom;
  _164 = (unsigned int) _163;
  # DEBUG s => s_19(D)
  # DEBUG val => _164
  # DEBUG size => 0
  val_102 = _164 + 1;
  # DEBUG val => val_102
  tmp_1466 = (int) val_102;
  # DEBUG tmp => tmp_1466
  if (tmp_1466 > 65535)
    goto <bb 233>;
  else
    goto <bb 234>;

  <bb 233>:
  # DEBUG size => 32
  tmp_1467 = tmp_1466 >> 16;
  # DEBUG tmp => tmp_1467

  <bb 234>:
  # size_1469 = PHI <0(232), 32(233)>
  # tmp_1468 = PHI <tmp_1466(232), tmp_1467(233)>
  # DEBUG tmp => tmp_1468
  # DEBUG size => size_1469
  if (tmp_1468 > 255)
    goto <bb 235>;
  else
    goto <bb 236>;

  <bb 235>:
  size_1470 = size_1469 + 16;
  # DEBUG size => size_1470
  tmp_1471 = tmp_1468 >> 8;
  # DEBUG tmp => tmp_1471

  <bb 236>:
  # size_1475 = PHI <size_1469(234), size_1470(235)>
  # tmp_1472 = PHI <tmp_1468(234), tmp_1471(235)>
  # DEBUG tmp => tmp_1472
  # DEBUG size => size_1475
  _1473 = x264_ue_size_tab[tmp_1472];
  _1474 = (int) _1473;
  size_1476 = _1474 + size_1475;
  # DEBUG size => size_1476
  _1477 = size_1476 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1477
  # DEBUG i_bits => 0
  _1479 = _1528 << _1477;
  s_19(D)->cur_bits = _1479;
  _1481 = prephitmp_3030 - _1477;
  s_19(D)->i_left = _1481;
  if (_1481 <= 32)
    goto <bb 237>;
  else
    goto <bb 238>;

  <bb 237>:
  _1483 = _1479 << _1481;
  # DEBUG x => _1483
  __asm__("bswap %0" : "=r" x_1484 : "0" _1483);
  # DEBUG x => x_1484
  # DEBUG x => NULL
  _1485 = (unsigned int) x_1484;
  MEM[(uint32_t *)prephitmp_3032] = _1485;
  _1486 = s_19(D)->i_left;
  _1487 = _1486 + 32;
  s_19(D)->i_left = _1487;
  _1488 = prephitmp_3032 + 4;
  s_19(D)->p = _1488;

  <bb 238>:
  # prephitmp_3033 = PHI <_1481(236), _1487(237)>
  # prephitmp_3035 = PHI <prephitmp_3032(236), _1488(237)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1489 = _1477 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1489
  # DEBUG i_bits => val_102
  _1490 = _1479 << _1489;
  _1491 = (long int) val_102;
  _1492 = _1490 | _1491;
  s_19(D)->cur_bits = _1492;
  _1494 = prephitmp_3033 - _1489;
  s_19(D)->i_left = _1494;
  if (_1494 <= 32)
    goto <bb 239>;
  else
    goto <bb 240>;

  <bb 239>:
  _1496 = _1492 << _1494;
  # DEBUG x => _1496
  __asm__("bswap %0" : "=r" x_1497 : "0" _1496);
  # DEBUG x => x_1497
  # DEBUG x => NULL
  _1498 = (unsigned int) x_1497;
  MEM[(uint32_t *)prephitmp_3035] = _1498;
  _1499 = s_19(D)->i_left;
  _1500 = _1499 + 32;
  s_19(D)->i_left = _1500;
  _1501 = prephitmp_3035 + 4;
  s_19(D)->p = _1501;

  <bb 240>:
  # prephitmp_2937 = PHI <_531(223), _1492(239), _1492(238)>
  # prephitmp_2939 = PHI <prephitmp_2934(223), _1500(239), _1494(238)>
  # prephitmp_2942 = PHI <prephitmp_2936(223), _1501(239), prephitmp_3035(238)>
  _166 = sps_16(D)->vui.b_timing_info_present;
  _167 = (unsigned int) _166;
  # DEBUG s => s_19(D)
  # DEBUG i_bit => _167
  _538 = prephitmp_2937 << 1;
  _539 = (long int) _167;
  _540 = _538 | _539;
  s_19(D)->cur_bits = _540;
  _542 = prephitmp_2939 + -1;
  s_19(D)->i_left = _542;
  if (_542 == 32)
    goto <bb 241>;
  else
    goto <bb 242>;

  <bb 241>:
  _544 = (unsigned int) _540;
  # DEBUG x => _544
  __asm__("bswap %0" : "=r" x_545 : "0" _544);
  # DEBUG x => x_545
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2942] = x_545;
  _546 = prephitmp_2942 + 4;
  s_19(D)->p = _546;
  s_19(D)->i_left = 64;
  pretmp_2943 = sps_16(D)->vui.b_timing_info_present;

  <bb 242>:
  # prephitmp_2944 = PHI <pretmp_2943(241), _166(240)>
  # prephitmp_2945 = PHI <64(241), _542(240)>
  # prephitmp_2947 = PHI <_546(241), prephitmp_2942(240)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  if (prephitmp_2944 != 0)
    goto <bb 244>;
  else
    goto <bb 243>;

  <bb 243>:
  pretmp_2951 = prephitmp_2945 + -1;
  goto <bb 255>;

  <bb 244>:
  _170 = sps_16(D)->vui.i_num_units_in_tick;
  _171 = (unsigned int) _170;
  # DEBUG s => s_19(D)
  # DEBUG i_bits => _171
  _175 = _171 >> 16;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 16
  # DEBUG i_bits => _175
  _1564 = _540 << 16;
  _1565 = (long int) _175;
  _1566 = _1564 | _1565;
  s_19(D)->cur_bits = _1566;
  _1568 = prephitmp_2945 + -16;
  s_19(D)->i_left = _1568;
  if (_1568 <= 32)
    goto <bb 245>;
  else
    goto <bb 246>;

  <bb 245>:
  _1570 = _1566 << _1568;
  # DEBUG x => _1570
  __asm__("bswap %0" : "=r" x_1571 : "0" _1570);
  # DEBUG x => x_1571
  # DEBUG x => NULL
  _1572 = (unsigned int) x_1571;
  MEM[(uint32_t *)prephitmp_2947] = _1572;
  _1573 = s_19(D)->i_left;
  _1574 = _1573 + 32;
  s_19(D)->i_left = _1574;
  _1575 = prephitmp_2947 + 4;
  s_19(D)->p = _1575;

  <bb 246>:
  # prephitmp_3015 = PHI <_1568(244), _1574(245)>
  # prephitmp_3017 = PHI <prephitmp_2947(244), _1575(245)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => s_19(D)
  # DEBUG i_count => 16
  # DEBUG i_bits => _171
  _1576 = _1566 << 16;
  _1577 = (long int) _171;
  _1578 = _1576 | _1577;
  s_19(D)->cur_bits = _1578;
  _1580 = prephitmp_3015 + -16;
  s_19(D)->i_left = _1580;
  if (_1580 <= 32)
    goto <bb 247>;
  else
    goto <bb 248>;

  <bb 247>:
  _1582 = _1578 << _1580;
  # DEBUG x => _1582
  __asm__("bswap %0" : "=r" x_1583 : "0" _1582);
  # DEBUG x => x_1583
  # DEBUG x => NULL
  _1584 = (unsigned int) x_1583;
  MEM[(uint32_t *)prephitmp_3017] = _1584;
  _1585 = s_19(D)->i_left;
  _1586 = _1585 + 32;
  s_19(D)->i_left = _1586;
  _1587 = prephitmp_3017 + 4;
  s_19(D)->p = _1587;

  <bb 248>:
  # prephitmp_3018 = PHI <_1586(247), _1580(246)>
  # prephitmp_3020 = PHI <_1587(247), prephitmp_3017(246)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  _173 = sps_16(D)->vui.i_time_scale;
  _174 = (unsigned int) _173;
  # DEBUG s => s_19(D)
  # DEBUG i_bits => _174
  _162 = _174 >> 16;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 16
  # DEBUG i_bits => _162
  _1539 = _1578 << 16;
  _1540 = (long int) _162;
  _1541 = _1539 | _1540;
  s_19(D)->cur_bits = _1541;
  _1543 = prephitmp_3018 + -16;
  s_19(D)->i_left = _1543;
  if (_1543 <= 32)
    goto <bb 249>;
  else
    goto <bb 250>;

  <bb 249>:
  _1545 = _1541 << _1543;
  # DEBUG x => _1545
  __asm__("bswap %0" : "=r" x_1546 : "0" _1545);
  # DEBUG x => x_1546
  # DEBUG x => NULL
  _1547 = (unsigned int) x_1546;
  MEM[(uint32_t *)prephitmp_3020] = _1547;
  _1548 = s_19(D)->i_left;
  _1549 = _1548 + 32;
  s_19(D)->i_left = _1549;
  _1550 = prephitmp_3020 + 4;
  s_19(D)->p = _1550;

  <bb 250>:
  # prephitmp_3021 = PHI <_1543(248), _1549(249)>
  # prephitmp_3023 = PHI <prephitmp_3020(248), _1550(249)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => s_19(D)
  # DEBUG i_count => 16
  # DEBUG i_bits => _174
  _1551 = _1541 << 16;
  _1552 = (long int) _174;
  _1553 = _1551 | _1552;
  s_19(D)->cur_bits = _1553;
  _1555 = prephitmp_3021 + -16;
  s_19(D)->i_left = _1555;
  if (_1555 <= 32)
    goto <bb 251>;
  else
    goto <bb 252>;

  <bb 251>:
  _1557 = _1553 << _1555;
  # DEBUG x => _1557
  __asm__("bswap %0" : "=r" x_1558 : "0" _1557);
  # DEBUG x => x_1558
  # DEBUG x => NULL
  _1559 = (unsigned int) x_1558;
  MEM[(uint32_t *)prephitmp_3023] = _1559;
  _1560 = s_19(D)->i_left;
  _1561 = _1560 + 32;
  s_19(D)->i_left = _1561;
  _1562 = prephitmp_3023 + 4;
  s_19(D)->p = _1562;

  <bb 252>:
  # prephitmp_3024 = PHI <_1561(251), _1555(250)>
  # prephitmp_3026 = PHI <_1562(251), prephitmp_3023(250)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  _176 = sps_16(D)->vui.b_fixed_frame_rate;
  _177 = (unsigned int) _176;
  # DEBUG s => s_19(D)
  # DEBUG i_bit => _177
  _547 = _1553 << 1;
  _548 = (long int) _177;
  _549 = _547 | _548;
  s_19(D)->cur_bits = _549;
  _551 = prephitmp_3024 + -1;
  s_19(D)->i_left = _551;
  if (_551 == 32)
    goto <bb 254>;
  else
    goto <bb 253>;

  <bb 253>:
  pretmp_2952 = _551 + -1;
  goto <bb 255>;

  <bb 254>:
  _553 = (unsigned int) _549;
  # DEBUG x => _553
  __asm__("bswap %0" : "=r" x_554 : "0" _553);
  # DEBUG x => x_554
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_3026] = x_554;
  _555 = prephitmp_3026 + 4;
  s_19(D)->p = _555;
  s_19(D)->i_left = 64;

  <bb 255>:
  # prephitmp_2948 = PHI <_540(243), _549(254), _549(253)>
  # prephitmp_2953 = PHI <pretmp_2951(243), 63(254), pretmp_2952(253)>
  # prephitmp_2956 = PHI <prephitmp_2947(243), _555(254), prephitmp_3026(253)>
  # DEBUG s => s_19(D)
  # DEBUG i_bit => 0
  _579 = prephitmp_2948 << 1;
  s_19(D)->cur_bits = _579;
  s_19(D)->i_left = prephitmp_2953;
  if (prephitmp_2953 == 32)
    goto <bb 257>;
  else
    goto <bb 256>;

  <bb 256>:
  pretmp_2958 = prephitmp_2953 + -1;
  goto <bb 258>;

  <bb 257>:
  _583 = (unsigned int) _579;
  # DEBUG x => _583
  __asm__("bswap %0" : "=r" x_584 : "0" _583);
  # DEBUG x => x_584
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2956] = x_584;
  _585 = prephitmp_2956 + 4;
  s_19(D)->p = _585;
  s_19(D)->i_left = 64;

  <bb 258>:
  # prephitmp_2959 = PHI <63(257), pretmp_2958(256)>
  # prephitmp_2961 = PHI <_585(257), prephitmp_2956(256)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  # DEBUG s => s_19(D)
  # DEBUG i_bit => 0
  _572 = _579 << 1;
  s_19(D)->cur_bits = _572;
  s_19(D)->i_left = prephitmp_2959;
  if (prephitmp_2959 == 32)
    goto <bb 260>;
  else
    goto <bb 259>;

  <bb 259>:
  pretmp_2963 = prephitmp_2959 + -1;
  goto <bb 261>;

  <bb 260>:
  _576 = (unsigned int) _572;
  # DEBUG x => _576
  __asm__("bswap %0" : "=r" x_577 : "0" _576);
  # DEBUG x => x_577
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2961] = x_577;
  _578 = prephitmp_2961 + 4;
  s_19(D)->p = _578;
  s_19(D)->i_left = 64;

  <bb 261>:
  # prephitmp_2964 = PHI <63(260), pretmp_2963(259)>
  # prephitmp_2966 = PHI <_578(260), prephitmp_2961(259)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  # DEBUG s => s_19(D)
  # DEBUG i_bit => 0
  _565 = _572 << 1;
  s_19(D)->cur_bits = _565;
  s_19(D)->i_left = prephitmp_2964;
  if (prephitmp_2964 == 32)
    goto <bb 263>;
  else
    goto <bb 262>;

  <bb 262>:
  pretmp_2968 = prephitmp_2964 + -1;
  goto <bb 264>;

  <bb 263>:
  _569 = (unsigned int) _565;
  # DEBUG x => _569
  __asm__("bswap %0" : "=r" x_570 : "0" _569);
  # DEBUG x => x_570
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2966] = x_570;
  _571 = prephitmp_2966 + 4;
  s_19(D)->p = _571;
  s_19(D)->i_left = 64;

  <bb 264>:
  # prephitmp_2969 = PHI <63(263), pretmp_2968(262)>
  # prephitmp_2971 = PHI <_571(263), prephitmp_2966(262)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  _179 = sps_16(D)->vui.b_bitstream_restriction;
  _180 = (unsigned int) _179;
  # DEBUG s => s_19(D)
  # DEBUG i_bit => _180
  _556 = _565 << 1;
  _557 = (long int) _180;
  _558 = _556 | _557;
  s_19(D)->cur_bits = _558;
  s_19(D)->i_left = prephitmp_2969;
  if (prephitmp_2969 == 32)
    goto <bb 266>;
  else
    goto <bb 265>;

  <bb 265>:
  pretmp_2975 = prephitmp_2969 + -1;
  goto <bb 267>;

  <bb 266>:
  _562 = (unsigned int) _558;
  # DEBUG x => _562
  __asm__("bswap %0" : "=r" x_563 : "0" _562);
  # DEBUG x => x_563
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2971] = x_563;
  _564 = prephitmp_2971 + 4;
  s_19(D)->p = _564;
  s_19(D)->i_left = 64;
  pretmp_2972 = sps_16(D)->vui.b_bitstream_restriction;

  <bb 267>:
  # prephitmp_2973 = PHI <pretmp_2972(266), _179(265)>
  # prephitmp_2976 = PHI <63(266), pretmp_2975(265)>
  # prephitmp_2978 = PHI <_564(266), prephitmp_2971(265)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  if (prephitmp_2973 != 0)
    goto <bb 268>;
  else
    goto <bb 319>;

  <bb 268>:
  _182 = sps_16(D)->vui.b_motion_vectors_over_pic_boundaries;
  _183 = (unsigned int) _182;
  # DEBUG s => s_19(D)
  # DEBUG i_bit => _183
  _586 = _558 << 1;
  _587 = (long int) _183;
  _588 = _586 | _587;
  s_19(D)->cur_bits = _588;
  s_19(D)->i_left = prephitmp_2976;
  if (prephitmp_2976 == 32)
    goto <bb 269>;
  else
    goto <bb 270>;

  <bb 269>:
  _592 = (unsigned int) _588;
  # DEBUG x => _592
  __asm__("bswap %0" : "=r" x_593 : "0" _592);
  # DEBUG x => x_593
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2978] = x_593;
  _594 = prephitmp_2978 + 4;
  s_19(D)->p = _594;
  s_19(D)->i_left = 64;

  <bb 270>:
  # prephitmp_2979 = PHI <64(269), prephitmp_2976(268)>
  # prephitmp_2981 = PHI <_594(269), prephitmp_2978(268)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  _185 = sps_16(D)->vui.i_max_bytes_per_pic_denom;
  _186 = (unsigned int) _185;
  # DEBUG s => s_19(D)
  # DEBUG val => _186
  # DEBUG size => 0
  val_190 = _186 + 1;
  # DEBUG val => val_190
  tmp_1768 = (int) val_190;
  # DEBUG tmp => tmp_1768
  if (tmp_1768 > 65535)
    goto <bb 271>;
  else
    goto <bb 272>;

  <bb 271>:
  # DEBUG size => 32
  tmp_1769 = tmp_1768 >> 16;
  # DEBUG tmp => tmp_1769

  <bb 272>:
  # size_1771 = PHI <0(270), 32(271)>
  # tmp_1770 = PHI <tmp_1768(270), tmp_1769(271)>
  # DEBUG tmp => tmp_1770
  # DEBUG size => size_1771
  if (tmp_1770 > 255)
    goto <bb 273>;
  else
    goto <bb 274>;

  <bb 273>:
  size_1772 = size_1771 + 16;
  # DEBUG size => size_1772
  tmp_1773 = tmp_1770 >> 8;
  # DEBUG tmp => tmp_1773

  <bb 274>:
  # size_1777 = PHI <size_1771(272), size_1772(273)>
  # tmp_1774 = PHI <tmp_1770(272), tmp_1773(273)>
  # DEBUG tmp => tmp_1774
  # DEBUG size => size_1777
  _1775 = x264_ue_size_tab[tmp_1774];
  _1776 = (int) _1775;
  size_1778 = _1776 + size_1777;
  # DEBUG size => size_1778
  _1779 = size_1778 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1779
  # DEBUG i_bits => 0
  _1781 = _588 << _1779;
  s_19(D)->cur_bits = _1781;
  _1783 = prephitmp_2979 - _1779;
  s_19(D)->i_left = _1783;
  if (_1783 <= 32)
    goto <bb 275>;
  else
    goto <bb 276>;

  <bb 275>:
  _1785 = _1781 << _1783;
  # DEBUG x => _1785
  __asm__("bswap %0" : "=r" x_1786 : "0" _1785);
  # DEBUG x => x_1786
  # DEBUG x => NULL
  _1787 = (unsigned int) x_1786;
  MEM[(uint32_t *)prephitmp_2981] = _1787;
  _1788 = s_19(D)->i_left;
  _1789 = _1788 + 32;
  s_19(D)->i_left = _1789;
  _1790 = prephitmp_2981 + 4;
  s_19(D)->p = _1790;

  <bb 276>:
  # prephitmp_2982 = PHI <_1783(274), _1789(275)>
  # prephitmp_2984 = PHI <prephitmp_2981(274), _1790(275)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1791 = _1779 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1791
  # DEBUG i_bits => val_190
  _1792 = _1781 << _1791;
  _1793 = (long int) val_190;
  _1794 = _1792 | _1793;
  s_19(D)->cur_bits = _1794;
  _1796 = prephitmp_2982 - _1791;
  s_19(D)->i_left = _1796;
  if (_1796 <= 32)
    goto <bb 277>;
  else
    goto <bb 278>;

  <bb 277>:
  _1798 = _1794 << _1796;
  # DEBUG x => _1798
  __asm__("bswap %0" : "=r" x_1799 : "0" _1798);
  # DEBUG x => x_1799
  # DEBUG x => NULL
  _1800 = (unsigned int) x_1799;
  MEM[(uint32_t *)prephitmp_2984] = _1800;
  _1801 = s_19(D)->i_left;
  _1802 = _1801 + 32;
  s_19(D)->i_left = _1802;
  _1803 = prephitmp_2984 + 4;
  s_19(D)->p = _1803;

  <bb 278>:
  # prephitmp_2985 = PHI <_1802(277), _1796(276)>
  # prephitmp_2987 = PHI <_1803(277), prephitmp_2984(276)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _188 = sps_16(D)->vui.i_max_bits_per_mb_denom;
  _189 = (unsigned int) _188;
  # DEBUG s => s_19(D)
  # DEBUG val => _189
  # DEBUG size => 0
  val_193 = _189 + 1;
  # DEBUG val => val_193
  tmp_1732 = (int) val_193;
  # DEBUG tmp => tmp_1732
  if (tmp_1732 > 65535)
    goto <bb 279>;
  else
    goto <bb 280>;

  <bb 279>:
  # DEBUG size => 32
  tmp_1733 = tmp_1732 >> 16;
  # DEBUG tmp => tmp_1733

  <bb 280>:
  # size_1735 = PHI <0(278), 32(279)>
  # tmp_1734 = PHI <tmp_1732(278), tmp_1733(279)>
  # DEBUG tmp => tmp_1734
  # DEBUG size => size_1735
  if (tmp_1734 > 255)
    goto <bb 281>;
  else
    goto <bb 282>;

  <bb 281>:
  size_1736 = size_1735 + 16;
  # DEBUG size => size_1736
  tmp_1737 = tmp_1734 >> 8;
  # DEBUG tmp => tmp_1737

  <bb 282>:
  # size_1741 = PHI <size_1735(280), size_1736(281)>
  # tmp_1738 = PHI <tmp_1734(280), tmp_1737(281)>
  # DEBUG tmp => tmp_1738
  # DEBUG size => size_1741
  _1739 = x264_ue_size_tab[tmp_1738];
  _1740 = (int) _1739;
  size_1742 = _1740 + size_1741;
  # DEBUG size => size_1742
  _1743 = size_1742 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1743
  # DEBUG i_bits => 0
  _1745 = _1794 << _1743;
  s_19(D)->cur_bits = _1745;
  _1747 = prephitmp_2985 - _1743;
  s_19(D)->i_left = _1747;
  if (_1747 <= 32)
    goto <bb 283>;
  else
    goto <bb 284>;

  <bb 283>:
  _1749 = _1745 << _1747;
  # DEBUG x => _1749
  __asm__("bswap %0" : "=r" x_1750 : "0" _1749);
  # DEBUG x => x_1750
  # DEBUG x => NULL
  _1751 = (unsigned int) x_1750;
  MEM[(uint32_t *)prephitmp_2987] = _1751;
  _1752 = s_19(D)->i_left;
  _1753 = _1752 + 32;
  s_19(D)->i_left = _1753;
  _1754 = prephitmp_2987 + 4;
  s_19(D)->p = _1754;

  <bb 284>:
  # prephitmp_2988 = PHI <_1747(282), _1753(283)>
  # prephitmp_2990 = PHI <prephitmp_2987(282), _1754(283)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1755 = _1743 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1755
  # DEBUG i_bits => val_193
  _1756 = _1745 << _1755;
  _1757 = (long int) val_193;
  _1758 = _1756 | _1757;
  s_19(D)->cur_bits = _1758;
  _1760 = prephitmp_2988 - _1755;
  s_19(D)->i_left = _1760;
  if (_1760 <= 32)
    goto <bb 285>;
  else
    goto <bb 286>;

  <bb 285>:
  _1762 = _1758 << _1760;
  # DEBUG x => _1762
  __asm__("bswap %0" : "=r" x_1763 : "0" _1762);
  # DEBUG x => x_1763
  # DEBUG x => NULL
  _1764 = (unsigned int) x_1763;
  MEM[(uint32_t *)prephitmp_2990] = _1764;
  _1765 = s_19(D)->i_left;
  _1766 = _1765 + 32;
  s_19(D)->i_left = _1766;
  _1767 = prephitmp_2990 + 4;
  s_19(D)->p = _1767;

  <bb 286>:
  # prephitmp_2991 = PHI <_1766(285), _1760(284)>
  # prephitmp_2993 = PHI <_1767(285), prephitmp_2990(284)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _191 = sps_16(D)->vui.i_log2_max_mv_length_horizontal;
  _192 = (unsigned int) _191;
  # DEBUG s => s_19(D)
  # DEBUG val => _192
  # DEBUG size => 0
  val_196 = _192 + 1;
  # DEBUG val => val_196
  tmp_1696 = (int) val_196;
  # DEBUG tmp => tmp_1696
  if (tmp_1696 > 65535)
    goto <bb 287>;
  else
    goto <bb 288>;

  <bb 287>:
  # DEBUG size => 32
  tmp_1697 = tmp_1696 >> 16;
  # DEBUG tmp => tmp_1697

  <bb 288>:
  # size_1699 = PHI <0(286), 32(287)>
  # tmp_1698 = PHI <tmp_1696(286), tmp_1697(287)>
  # DEBUG tmp => tmp_1698
  # DEBUG size => size_1699
  if (tmp_1698 > 255)
    goto <bb 289>;
  else
    goto <bb 290>;

  <bb 289>:
  size_1700 = size_1699 + 16;
  # DEBUG size => size_1700
  tmp_1701 = tmp_1698 >> 8;
  # DEBUG tmp => tmp_1701

  <bb 290>:
  # size_1705 = PHI <size_1699(288), size_1700(289)>
  # tmp_1702 = PHI <tmp_1698(288), tmp_1701(289)>
  # DEBUG tmp => tmp_1702
  # DEBUG size => size_1705
  _1703 = x264_ue_size_tab[tmp_1702];
  _1704 = (int) _1703;
  size_1706 = _1704 + size_1705;
  # DEBUG size => size_1706
  _1707 = size_1706 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1707
  # DEBUG i_bits => 0
  _1709 = _1758 << _1707;
  s_19(D)->cur_bits = _1709;
  _1711 = prephitmp_2991 - _1707;
  s_19(D)->i_left = _1711;
  if (_1711 <= 32)
    goto <bb 291>;
  else
    goto <bb 292>;

  <bb 291>:
  _1713 = _1709 << _1711;
  # DEBUG x => _1713
  __asm__("bswap %0" : "=r" x_1714 : "0" _1713);
  # DEBUG x => x_1714
  # DEBUG x => NULL
  _1715 = (unsigned int) x_1714;
  MEM[(uint32_t *)prephitmp_2993] = _1715;
  _1716 = s_19(D)->i_left;
  _1717 = _1716 + 32;
  s_19(D)->i_left = _1717;
  _1718 = prephitmp_2993 + 4;
  s_19(D)->p = _1718;

  <bb 292>:
  # prephitmp_2994 = PHI <_1711(290), _1717(291)>
  # prephitmp_2996 = PHI <prephitmp_2993(290), _1718(291)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1719 = _1707 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1719
  # DEBUG i_bits => val_196
  _1720 = _1709 << _1719;
  _1721 = (long int) val_196;
  _1722 = _1720 | _1721;
  s_19(D)->cur_bits = _1722;
  _1724 = prephitmp_2994 - _1719;
  s_19(D)->i_left = _1724;
  if (_1724 <= 32)
    goto <bb 293>;
  else
    goto <bb 294>;

  <bb 293>:
  _1726 = _1722 << _1724;
  # DEBUG x => _1726
  __asm__("bswap %0" : "=r" x_1727 : "0" _1726);
  # DEBUG x => x_1727
  # DEBUG x => NULL
  _1728 = (unsigned int) x_1727;
  MEM[(uint32_t *)prephitmp_2996] = _1728;
  _1729 = s_19(D)->i_left;
  _1730 = _1729 + 32;
  s_19(D)->i_left = _1730;
  _1731 = prephitmp_2996 + 4;
  s_19(D)->p = _1731;

  <bb 294>:
  # prephitmp_2997 = PHI <_1730(293), _1724(292)>
  # prephitmp_2999 = PHI <_1731(293), prephitmp_2996(292)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _194 = sps_16(D)->vui.i_log2_max_mv_length_vertical;
  _195 = (unsigned int) _194;
  # DEBUG s => s_19(D)
  # DEBUG val => _195
  # DEBUG size => 0
  val_199 = _195 + 1;
  # DEBUG val => val_199
  tmp_1660 = (int) val_199;
  # DEBUG tmp => tmp_1660
  if (tmp_1660 > 65535)
    goto <bb 295>;
  else
    goto <bb 296>;

  <bb 295>:
  # DEBUG size => 32
  tmp_1661 = tmp_1660 >> 16;
  # DEBUG tmp => tmp_1661

  <bb 296>:
  # size_1663 = PHI <0(294), 32(295)>
  # tmp_1662 = PHI <tmp_1660(294), tmp_1661(295)>
  # DEBUG tmp => tmp_1662
  # DEBUG size => size_1663
  if (tmp_1662 > 255)
    goto <bb 297>;
  else
    goto <bb 298>;

  <bb 297>:
  size_1664 = size_1663 + 16;
  # DEBUG size => size_1664
  tmp_1665 = tmp_1662 >> 8;
  # DEBUG tmp => tmp_1665

  <bb 298>:
  # size_1669 = PHI <size_1663(296), size_1664(297)>
  # tmp_1666 = PHI <tmp_1662(296), tmp_1665(297)>
  # DEBUG tmp => tmp_1666
  # DEBUG size => size_1669
  _1667 = x264_ue_size_tab[tmp_1666];
  _1668 = (int) _1667;
  size_1670 = _1668 + size_1669;
  # DEBUG size => size_1670
  _1671 = size_1670 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1671
  # DEBUG i_bits => 0
  _1673 = _1722 << _1671;
  s_19(D)->cur_bits = _1673;
  _1675 = prephitmp_2997 - _1671;
  s_19(D)->i_left = _1675;
  if (_1675 <= 32)
    goto <bb 299>;
  else
    goto <bb 300>;

  <bb 299>:
  _1677 = _1673 << _1675;
  # DEBUG x => _1677
  __asm__("bswap %0" : "=r" x_1678 : "0" _1677);
  # DEBUG x => x_1678
  # DEBUG x => NULL
  _1679 = (unsigned int) x_1678;
  MEM[(uint32_t *)prephitmp_2999] = _1679;
  _1680 = s_19(D)->i_left;
  _1681 = _1680 + 32;
  s_19(D)->i_left = _1681;
  _1682 = prephitmp_2999 + 4;
  s_19(D)->p = _1682;

  <bb 300>:
  # prephitmp_3000 = PHI <_1675(298), _1681(299)>
  # prephitmp_3002 = PHI <prephitmp_2999(298), _1682(299)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1683 = _1671 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1683
  # DEBUG i_bits => val_199
  _1684 = _1673 << _1683;
  _1685 = (long int) val_199;
  _1686 = _1684 | _1685;
  s_19(D)->cur_bits = _1686;
  _1688 = prephitmp_3000 - _1683;
  s_19(D)->i_left = _1688;
  if (_1688 <= 32)
    goto <bb 301>;
  else
    goto <bb 302>;

  <bb 301>:
  _1690 = _1686 << _1688;
  # DEBUG x => _1690
  __asm__("bswap %0" : "=r" x_1691 : "0" _1690);
  # DEBUG x => x_1691
  # DEBUG x => NULL
  _1692 = (unsigned int) x_1691;
  MEM[(uint32_t *)prephitmp_3002] = _1692;
  _1693 = s_19(D)->i_left;
  _1694 = _1693 + 32;
  s_19(D)->i_left = _1694;
  _1695 = prephitmp_3002 + 4;
  s_19(D)->p = _1695;

  <bb 302>:
  # prephitmp_3003 = PHI <_1694(301), _1688(300)>
  # prephitmp_3005 = PHI <_1695(301), prephitmp_3002(300)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _197 = sps_16(D)->vui.i_num_reorder_frames;
  _198 = (unsigned int) _197;
  # DEBUG s => s_19(D)
  # DEBUG val => _198
  # DEBUG size => 0
  val_202 = _198 + 1;
  # DEBUG val => val_202
  tmp_1624 = (int) val_202;
  # DEBUG tmp => tmp_1624
  if (tmp_1624 > 65535)
    goto <bb 303>;
  else
    goto <bb 304>;

  <bb 303>:
  # DEBUG size => 32
  tmp_1625 = tmp_1624 >> 16;
  # DEBUG tmp => tmp_1625

  <bb 304>:
  # size_1627 = PHI <0(302), 32(303)>
  # tmp_1626 = PHI <tmp_1624(302), tmp_1625(303)>
  # DEBUG tmp => tmp_1626
  # DEBUG size => size_1627
  if (tmp_1626 > 255)
    goto <bb 305>;
  else
    goto <bb 306>;

  <bb 305>:
  size_1628 = size_1627 + 16;
  # DEBUG size => size_1628
  tmp_1629 = tmp_1626 >> 8;
  # DEBUG tmp => tmp_1629

  <bb 306>:
  # size_1633 = PHI <size_1627(304), size_1628(305)>
  # tmp_1630 = PHI <tmp_1626(304), tmp_1629(305)>
  # DEBUG tmp => tmp_1630
  # DEBUG size => size_1633
  _1631 = x264_ue_size_tab[tmp_1630];
  _1632 = (int) _1631;
  size_1634 = _1632 + size_1633;
  # DEBUG size => size_1634
  _1635 = size_1634 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1635
  # DEBUG i_bits => 0
  _1637 = _1686 << _1635;
  s_19(D)->cur_bits = _1637;
  _1639 = prephitmp_3003 - _1635;
  s_19(D)->i_left = _1639;
  if (_1639 <= 32)
    goto <bb 307>;
  else
    goto <bb 308>;

  <bb 307>:
  _1641 = _1637 << _1639;
  # DEBUG x => _1641
  __asm__("bswap %0" : "=r" x_1642 : "0" _1641);
  # DEBUG x => x_1642
  # DEBUG x => NULL
  _1643 = (unsigned int) x_1642;
  MEM[(uint32_t *)prephitmp_3005] = _1643;
  _1644 = s_19(D)->i_left;
  _1645 = _1644 + 32;
  s_19(D)->i_left = _1645;
  _1646 = prephitmp_3005 + 4;
  s_19(D)->p = _1646;

  <bb 308>:
  # prephitmp_3006 = PHI <_1639(306), _1645(307)>
  # prephitmp_3008 = PHI <prephitmp_3005(306), _1646(307)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1647 = _1635 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1647
  # DEBUG i_bits => val_202
  _1648 = _1637 << _1647;
  _1649 = (long int) val_202;
  _1650 = _1648 | _1649;
  s_19(D)->cur_bits = _1650;
  _1652 = prephitmp_3006 - _1647;
  s_19(D)->i_left = _1652;
  if (_1652 <= 32)
    goto <bb 309>;
  else
    goto <bb 310>;

  <bb 309>:
  _1654 = _1650 << _1652;
  # DEBUG x => _1654
  __asm__("bswap %0" : "=r" x_1655 : "0" _1654);
  # DEBUG x => x_1655
  # DEBUG x => NULL
  _1656 = (unsigned int) x_1655;
  MEM[(uint32_t *)prephitmp_3008] = _1656;
  _1657 = s_19(D)->i_left;
  _1658 = _1657 + 32;
  s_19(D)->i_left = _1658;
  _1659 = prephitmp_3008 + 4;
  s_19(D)->p = _1659;

  <bb 310>:
  # prephitmp_3009 = PHI <_1658(309), _1652(308)>
  # prephitmp_3011 = PHI <_1659(309), prephitmp_3008(308)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG tmp => NULL
  # DEBUG size => NULL
  _200 = sps_16(D)->vui.i_max_dec_frame_buffering;
  _201 = (unsigned int) _200;
  # DEBUG s => s_19(D)
  # DEBUG val => _201
  # DEBUG size => 0
  val_172 = _201 + 1;
  # DEBUG val => val_172
  tmp_1588 = (int) val_172;
  # DEBUG tmp => tmp_1588
  if (tmp_1588 > 65535)
    goto <bb 311>;
  else
    goto <bb 312>;

  <bb 311>:
  # DEBUG size => 32
  tmp_1589 = tmp_1588 >> 16;
  # DEBUG tmp => tmp_1589

  <bb 312>:
  # size_1591 = PHI <0(310), 32(311)>
  # tmp_1590 = PHI <tmp_1588(310), tmp_1589(311)>
  # DEBUG tmp => tmp_1590
  # DEBUG size => size_1591
  if (tmp_1590 > 255)
    goto <bb 313>;
  else
    goto <bb 314>;

  <bb 313>:
  size_1592 = size_1591 + 16;
  # DEBUG size => size_1592
  tmp_1593 = tmp_1590 >> 8;
  # DEBUG tmp => tmp_1593

  <bb 314>:
  # size_1597 = PHI <size_1591(312), size_1592(313)>
  # tmp_1594 = PHI <tmp_1590(312), tmp_1593(313)>
  # DEBUG tmp => tmp_1594
  # DEBUG size => size_1597
  _1595 = x264_ue_size_tab[tmp_1594];
  _1596 = (int) _1595;
  size_1598 = _1596 + size_1597;
  # DEBUG size => size_1598
  _1599 = size_1598 >> 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1599
  # DEBUG i_bits => 0
  _1601 = _1650 << _1599;
  s_19(D)->cur_bits = _1601;
  _1603 = prephitmp_3009 - _1599;
  s_19(D)->i_left = _1603;
  if (_1603 <= 32)
    goto <bb 315>;
  else
    goto <bb 316>;

  <bb 315>:
  _1605 = _1601 << _1603;
  # DEBUG x => _1605
  __asm__("bswap %0" : "=r" x_1606 : "0" _1605);
  # DEBUG x => x_1606
  # DEBUG x => NULL
  _1607 = (unsigned int) x_1606;
  MEM[(uint32_t *)prephitmp_3011] = _1607;
  _1608 = s_19(D)->i_left;
  _1609 = _1608 + 32;
  s_19(D)->i_left = _1609;
  _1610 = prephitmp_3011 + 4;
  s_19(D)->p = _1610;

  <bb 316>:
  # prephitmp_3012 = PHI <_1603(314), _1609(315)>
  # prephitmp_3014 = PHI <prephitmp_3011(314), _1610(315)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _1611 = _1599 + 1;
  # DEBUG s => s_19(D)
  # DEBUG i_count => _1611
  # DEBUG i_bits => val_172
  _1612 = _1601 << _1611;
  _1613 = (long int) val_172;
  _1614 = _1612 | _1613;
  s_19(D)->cur_bits = _1614;
  _1616 = prephitmp_3012 - _1611;
  s_19(D)->i_left = _1616;
  if (_1616 <= 32)
    goto <bb 318>;
  else
    goto <bb 317>;

  <bb 317>:
  pretmp_3147 = _1616 + -1;
  goto <bb 319>;

  <bb 318>:
  _1618 = _1614 << _1616;
  # DEBUG x => _1618
  __asm__("bswap %0" : "=r" x_1619 : "0" _1618);
  # DEBUG x => x_1619
  # DEBUG x => NULL
  _1620 = (unsigned int) x_1619;
  MEM[(uint32_t *)prephitmp_3014] = _1620;
  _1621 = s_19(D)->i_left;
  _1622 = _1621 + 32;
  s_19(D)->i_left = _1622;
  _1623 = prephitmp_3014 + 4;
  s_19(D)->p = _1623;
  pretmp_3146 = _1622 + -1;

  <bb 319>:
  # prephitmp_2875 = PHI <_370(182), _558(267), _1614(318), _1614(317)>
  # prephitmp_2882 = PHI <prephitmp_2874(182), prephitmp_2978(267), _1623(318), prephitmp_3014(317)>
  # prephitmp_3148 = PHI <pretmp_3145(182), prephitmp_2976(267), pretmp_3146(318), pretmp_3147(317)>
  # DEBUG s => s_19(D)
  # DEBUG s => s_19(D)
  # DEBUG i_bit => 1
  _1804 = prephitmp_2875 << 1;
  _1805 = _1804 | 1;
  s_19(D)->cur_bits = _1805;
  s_19(D)->i_left = prephitmp_3148;
  if (prephitmp_3148 == 32)
    goto <bb 321>;
  else
    goto <bb 320>;

  <bb 320>:
  pretmp_2886 = prephitmp_3148 / 8;
  pretmp_2888 = (long unsigned int) pretmp_2886;
  pretmp_2890 = 8 - pretmp_2888;
  goto <bb 322>;

  <bb 321>:
  _1809 = (unsigned int) _1805;
  # DEBUG x => _1809
  __asm__("bswap %0" : "=r" x_1810 : "0" _1809);
  # DEBUG x => x_1810
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_2882] = x_1810;
  _1811 = prephitmp_2882 + 4;
  s_19(D)->p = _1811;
  s_19(D)->i_left = 64;

  <bb 322>:
  # prephitmp_2884 = PHI <prephitmp_2882(320), _1811(321)>
  # prephitmp_2885 = PHI <prephitmp_3148(320), 64(321)>
  # prephitmp_2891 = PHI <pretmp_2890(320), 0(321)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  # DEBUG s => s_19(D)
  _1814 = _1805 << prephitmp_2885;
  # DEBUG x => _1814
  __asm__("bswap %0" : "=r" x_1815 : "0" _1814);
  # DEBUG x => x_1815
  # DEBUG x => NULL
  MEM[(intptr_t *)prephitmp_2884] = x_1815;
  _1819 = prephitmp_2884 + prephitmp_2891;
  s_19(D)->p = _1819;
  s_19(D)->i_left = 64;
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  return;

  <bb 323>:
  # DEBUG s => s_19(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => 255
  _425 = _382 << 8;
  _426 = _425 | 255;
  s_19(D)->cur_bits = _426;
  s_19(D)->i_left = prephitmp_3057;
  if (prephitmp_3057 <= 32)
    goto <bb 191>;
  else
    goto <bb 192>;

  <bb 324>:
  # _2766 = PHI <_2454(187)>
  _127 = (unsigned int) _2766;
  # DEBUG s => s_19(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => _127
  _389 = _382 << 8;
  _390 = (long int) _127;
  _391 = _389 | _390;
  s_19(D)->cur_bits = _391;
  s_19(D)->i_left = prephitmp_3057;
  if (prephitmp_3057 <= 32)
    goto <bb 190>;
  else
    goto <bb 325>;

  <bb 325>:
  pretmp_2896 = prephitmp_3057 + -1;
  goto <bb 197>;

  <bb 326>:
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  if (_118 != 0)
    goto <bb 328>;
  else
    goto <bb 327>;

  <bb 327>:
  pretmp_2898 = _384 + -1;
  goto <bb 197>;

  <bb 328>:
  pretmp_3056 = _384 + -8;
  goto <bb 185>;

}



;; Function x264_pps_init (x264_pps_init, funcdef_no=131, decl_uid=7042, cgraph_uid=131, symbol_order=174)


Analyzing loop at encoder/set.c:400
encoder/set.c:400:9: note: ===== analyze_loop_nest =====
encoder/set.c:400:9: note: === vect_analyze_loop_form ===
encoder/set.c:400:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [5, + , 4294967295] != 0
  bounds on difference of bases: -5 ... -5
  result:
    # of iterations 5, bounded by 5
encoder/set.c:400:9: note: === vect_analyze_data_refs ===
Creating dr for pps_15(D)->scaling_list[i_211]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pps_15(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 8
	aligned to: 128
	base_object: *pps_15(D)
	Access function 0: {0, +, 1}_4
	Access function 1: 576
encoder/set.c:400:9: note: got vectype for stmt: pps_15(D)->scaling_list[i_211] = &x264_cqm_flat16;
vector(2) long unsigned int
encoder/set.c:400:9: note: === vect_analyze_scalar_cycles ===
encoder/set.c:400:9: note: Analyze phi: i_211 = PHI <0(8), i_50(10)>

encoder/set.c:400:9: note: Access function of PHI: {0, +, 1}_4
encoder/set.c:400:9: note: step: 1,  init: 0
encoder/set.c:400:9: note: Detected induction.
encoder/set.c:400:9: note: Analyze phi: .MEM_206 = PHI <.MEM_46(8), .MEM_49(10)>

encoder/set.c:400:9: note: Analyze phi: ivtmp_254 = PHI <6(8), ivtmp_253(10)>

encoder/set.c:400:9: note: Access function of PHI: {6, +, 4294967295}_4
encoder/set.c:400:9: note: step: 4294967295,  init: 6
encoder/set.c:400:9: note: Detected induction.
encoder/set.c:400:9: note: === vect_pattern_recog ===
encoder/set.c:400:9: note: === vect_analyze_data_ref_accesses ===
encoder/set.c:400:9: note: === vect_mark_stmts_to_be_vectorized ===
encoder/set.c:400:9: note: init: phi relevant? i_211 = PHI <0(8), i_50(10)>
encoder/set.c:400:9: note: init: phi relevant? .MEM_206 = PHI <.MEM_46(8), .MEM_49(10)>
encoder/set.c:400:9: note: init: phi relevant? ivtmp_254 = PHI <6(8), ivtmp_253(10)>
encoder/set.c:400:9: note: init: stmt relevant? # DEBUG i => i_211
encoder/set.c:400:9: note: init: stmt relevant? pps_15(D)->scaling_list[i_211] = &x264_cqm_flat16;
encoder/set.c:400:9: note: vec_stmt_relevant_p: stmt has vdefs.
encoder/set.c:400:9: note: mark relevant 4, live 0.
encoder/set.c:400:9: note: init: stmt relevant? i_50 = i_211 + 1;
encoder/set.c:400:9: note: init: stmt relevant? # DEBUG i => i_50
encoder/set.c:400:9: note: init: stmt relevant? # DEBUG i => i_50
encoder/set.c:400:9: note: init: stmt relevant? ivtmp_253 = ivtmp_254 - 1;
encoder/set.c:400:9: note: init: stmt relevant? if (ivtmp_253 != 0)
encoder/set.c:400:9: note: worklist: examine stmt: pps_15(D)->scaling_list[i_211] = &x264_cqm_flat16;
encoder/set.c:400:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: pps_15(D)->scaling_list[i_211] = &x264_cqm_flat16;
  stmt_b: pps_15(D)->scaling_list[i_211] = &x264_cqm_flat16;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_4)
  (chrec_b = {0, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 576)
  (chrec_b = 576)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/set.c:400:9: note: === vect_determine_vectorization_factor ===
encoder/set.c:400:9: note: ==> examining phi: i_211 = PHI <0(8), i_50(10)>

encoder/set.c:400:9: note: ==> examining phi: .MEM_206 = PHI <.MEM_46(8), .MEM_49(10)>

encoder/set.c:400:9: note: ==> examining phi: ivtmp_254 = PHI <6(8), ivtmp_253(10)>

encoder/set.c:400:9: note: ==> examining statement: # DEBUG i => i_211

encoder/set.c:400:9: note: skip.
encoder/set.c:400:9: note: ==> examining statement: pps_15(D)->scaling_list[i_211] = &x264_cqm_flat16;

encoder/set.c:400:9: note: get vectype for scalar type:  const uint8_t *
encoder/set.c:400:9: note: vectype: vector(2) long unsigned int
encoder/set.c:400:9: note: nunits = 2
encoder/set.c:400:9: note: ==> examining statement: i_50 = i_211 + 1;

encoder/set.c:400:9: note: skip.
encoder/set.c:400:9: note: ==> examining statement: # DEBUG i => i_50

encoder/set.c:400:9: note: skip.
encoder/set.c:400:9: note: ==> examining statement: # DEBUG i => i_50

encoder/set.c:400:9: note: skip.
encoder/set.c:400:9: note: ==> examining statement: ivtmp_253 = ivtmp_254 - 1;

encoder/set.c:400:9: note: skip.
encoder/set.c:400:9: note: ==> examining statement: if (ivtmp_253 != 0)

encoder/set.c:400:9: note: skip.
encoder/set.c:400:9: note: vectorization factor = 2
encoder/set.c:400:9: note: === vect_analyze_data_refs_alignment ===
encoder/set.c:400:9: note: vect_compute_data_ref_alignment:
encoder/set.c:400:9: note: can't force alignment of ref: pps_15(D)->scaling_list[i_211]
encoder/set.c:400:9: note: === vect_prune_runtime_alias_test_list ===
encoder/set.c:400:9: note: === vect_enhance_data_refs_alignment ===
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
encoder/set.c:400:9: note: Unknown misalignment, is_packed = 0
encoder/set.c:400:9: note: vect_can_advance_ivs_p:
encoder/set.c:400:9: note: Analyze phi: i_211 = PHI <0(8), i_50(10)>

encoder/set.c:400:9: note: Analyze phi: .MEM_206 = PHI <.MEM_46(8), .MEM_49(10)>

encoder/set.c:400:9: note: virtual phi. skip.
encoder/set.c:400:9: note: Analyze phi: ivtmp_254 = PHI <6(8), ivtmp_253(10)>

Applying pattern match.pd:49, generic-match.c:3223
encoder/set.c:400:9: note: Disable peeling, max peels reached: 1
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
encoder/set.c:400:9: note: Vectorizing an unaligned access.
encoder/set.c:400:9: note: === vect_analyze_slp ===
encoder/set.c:400:9: note: === vect_make_slp_decision ===
encoder/set.c:400:9: note: === vect_detect_hybrid_slp ===
encoder/set.c:400:9: note: === vect_analyze_loop_operations ===
encoder/set.c:400:9: note: examining phi: i_211 = PHI <0(8), i_50(10)>

encoder/set.c:400:9: note: examining phi: .MEM_206 = PHI <.MEM_46(8), .MEM_49(10)>

encoder/set.c:400:9: note: examining phi: ivtmp_254 = PHI <6(8), ivtmp_253(10)>

encoder/set.c:400:9: note: ==> examining statement: # DEBUG i => i_211
encoder/set.c:400:9: note: irrelevant.
encoder/set.c:400:9: note: ==> examining statement: pps_15(D)->scaling_list[i_211] = &x264_cqm_flat16;
encoder/set.c:400:9: note: vect_is_simple_use: operand &x264_cqm_flat16
Applying pattern match.pd:49, generic-match.c:3223
encoder/set.c:400:9: note: vect_model_store_cost: unaligned supported by hardware.
encoder/set.c:400:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 1 .
encoder/set.c:400:9: note: ==> examining statement: i_50 = i_211 + 1;
encoder/set.c:400:9: note: irrelevant.
encoder/set.c:400:9: note: ==> examining statement: # DEBUG i => i_50
encoder/set.c:400:9: note: irrelevant.
encoder/set.c:400:9: note: ==> examining statement: # DEBUG i => i_50
encoder/set.c:400:9: note: irrelevant.
encoder/set.c:400:9: note: ==> examining statement: ivtmp_253 = ivtmp_254 - 1;
encoder/set.c:400:9: note: irrelevant.
encoder/set.c:400:9: note: ==> examining statement: if (ivtmp_253 != 0)
encoder/set.c:400:9: note: irrelevant.
encoder/set.c:400:9: note: vectorization_factor = 2, niters = 6
encoder/set.c:400:9: note: === vect_update_slp_costs_according_to_vf ===
encoder/set.c:400:9: note: Cost model analysis: 
  Vector inside of loop cost: 2
  Vector prologue cost: 1
  Vector epilogue cost: 0
  Scalar iteration cost: 1
  Scalar outside cost: 0
  Vector outside cost: 1
  prologue iterations: 0
  epilogue iterations: 0
encoder/set.c:400:9: note: cost model: the vector iteration cost = 2 divided by the scalar iteration cost = 1 is greater or equal to the vectorization factor = 2.
encoder/set.c:400:9: note: not vectorized: vectorization not profitable.
encoder/set.c:400:9: note: not vectorized: vector version will never be profitable.
encoder/set.c:400:9: note: bad operation or unsupported loop bound.

Analyzing loop at encoder/set.c:421
encoder/set.c:421:9: note: ===== analyze_loop_nest =====
encoder/set.c:421:9: note: === vect_analyze_loop_form ===
encoder/set.c:421:9: note: ===== analyze_loop_nest_1 =====
encoder/set.c:421:9: note: === vect_analyze_loop_form ===
encoder/set.c:421:9: note: not vectorized: control flow in loop.
encoder/set.c:421:9: note: bad inner-loop form.
encoder/set.c:421:9: note: not vectorized: Bad inner loop.
encoder/set.c:421:9: note: bad loop form.

Analyzing loop at encoder/set.c:422
encoder/set.c:422:13: note: ===== analyze_loop_nest =====
encoder/set.c:422:13: note: === vect_analyze_loop_form ===
encoder/set.c:422:13: note: not vectorized: control flow in loop.
encoder/set.c:422:13: note: bad loop form.

Analyzing loop at encoder/set.c:37
encoder/set.c:37:5: note: ===== analyze_loop_nest =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: ===== analyze_loop_nest_1 =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 6
  exit condition [1, + , 1](no_overflow) < i_213 + 1
  bounds on difference of bases: 0 ... 8
Applying pattern match.pd:49, generic-match.c:3223
  result:
    # of iterations (unsigned int) i_213, bounded by 8
encoder/set.c:37:5: note: Symbolic number of iterations is (unsigned int) i_213 + 1
encoder/set.c:37:5: note: not vectorized: inner-loop count not invariant.
encoder/set.c:37:5: note: bad loop form.

Analyzing loop at encoder/set.c:38
encoder/set.c:38:9: note: ===== analyze_loop_nest =====
encoder/set.c:38:9: note: === vect_analyze_loop_form ===
encoder/set.c:38:9: note: === get_loop_niters ===
encoder/set.c:38:9: note: Symbolic number of iterations is (unsigned int) i_213 + 1
encoder/set.c:38:9: note: === vect_analyze_data_refs ===
Creating dr for *_88
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_213 * 8)
	offset from base address: 0
	constant offset from base address: 288
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_213 * 8)
	Access function 0: {288B, +, 1}_6
Creating dr for *_93
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_213
	offset from base address: 0
	constant offset from base address: 281
	step: 8
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_213
	Access function 0: {281B, +, 8}_6
Creating dr for *_88
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_213 * 8)
	offset from base address: 0
	constant offset from base address: 288
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_213 * 8)
	Access function 0: {288B, +, 1}_6
Creating dr for *_93
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_213
	offset from base address: 0
	constant offset from base address: 281
	step: 8
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_213
	Access function 0: {281B, +, 8}_6
encoder/set.c:38:9: note: got vectype for stmt: t_89 = *_88;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: _94 = *_93;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_88 = _94;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_93 = t_89;
vector(16) unsigned char
encoder/set.c:38:9: note: === vect_analyze_scalar_cycles ===
encoder/set.c:38:9: note: Analyze phi: j_228 = PHI <0(60), j_95(54)>

encoder/set.c:38:9: note: Access function of PHI: {0, +, 1}_6
encoder/set.c:38:9: note: step: 1,  init: 0
encoder/set.c:38:9: note: Detected induction.
encoder/set.c:38:9: note: Analyze phi: .MEM_165 = PHI <.MEM_8(60), .MEM_187(54)>

encoder/set.c:38:9: note: === vect_pattern_recog ===
encoder/set.c:38:9: note: vect_is_simple_use: operand j_228
encoder/set.c:38:9: note: def_stmt: j_228 = PHI <0(60), j_95(54)>
encoder/set.c:38:9: note: type of def: 4.
encoder/set.c:38:9: note: === vect_analyze_data_ref_accesses ===
encoder/set.c:38:9: note: Detected single element interleaving *_93 step 8
encoder/set.c:38:9: note: Data access with gaps requires scalar epilogue loop
encoder/set.c:38:9: note: not consecutive access *_93 = t_89;

encoder/set.c:38:9: note: not vectorized: complicated access pattern.
encoder/set.c:38:9: note: bad data access.

Analyzing loop at encoder/set.c:37
encoder/set.c:37:5: note: ===== analyze_loop_nest =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: ===== analyze_loop_nest_1 =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [1, + , 1](no_overflow) < i_231 + 1
  bounds on difference of bases: 0 ... 8
Applying pattern match.pd:49, generic-match.c:3223
  result:
    # of iterations (unsigned int) i_231, bounded by 8
encoder/set.c:37:5: note: Symbolic number of iterations is (unsigned int) i_231 + 1
encoder/set.c:37:5: note: not vectorized: inner-loop count not invariant.
encoder/set.c:37:5: note: bad loop form.

Analyzing loop at encoder/set.c:38
encoder/set.c:38:9: note: ===== analyze_loop_nest =====
encoder/set.c:38:9: note: === vect_analyze_loop_form ===
encoder/set.c:38:9: note: === get_loop_niters ===
encoder/set.c:38:9: note: Symbolic number of iterations is (unsigned int) i_231 + 1
encoder/set.c:38:9: note: === vect_analyze_data_refs ===
Creating dr for *_101
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_231 * 8)
	offset from base address: 0
	constant offset from base address: 224
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_231 * 8)
	Access function 0: {224B, +, 1}_8
Creating dr for *_106
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_231
	offset from base address: 0
	constant offset from base address: 217
	step: 8
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_231
	Access function 0: {217B, +, 8}_8
Creating dr for *_101
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_231 * 8)
	offset from base address: 0
	constant offset from base address: 224
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_231 * 8)
	Access function 0: {224B, +, 1}_8
Creating dr for *_106
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_231
	offset from base address: 0
	constant offset from base address: 217
	step: 8
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_231
	Access function 0: {217B, +, 8}_8
encoder/set.c:38:9: note: got vectype for stmt: t_102 = *_101;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: _107 = *_106;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_101 = _107;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_106 = t_102;
vector(16) unsigned char
encoder/set.c:38:9: note: === vect_analyze_scalar_cycles ===
encoder/set.c:38:9: note: Analyze phi: j_230 = PHI <0(52), j_108(46)>

encoder/set.c:38:9: note: Access function of PHI: {0, +, 1}_8
encoder/set.c:38:9: note: step: 1,  init: 0
encoder/set.c:38:9: note: Detected induction.
encoder/set.c:38:9: note: Analyze phi: .MEM_169 = PHI <.MEM_167(52), .MEM_185(46)>

encoder/set.c:38:9: note: === vect_pattern_recog ===
encoder/set.c:38:9: note: vect_is_simple_use: operand j_230
encoder/set.c:38:9: note: def_stmt: j_230 = PHI <0(52), j_108(46)>
encoder/set.c:38:9: note: type of def: 4.
encoder/set.c:38:9: note: === vect_analyze_data_ref_accesses ===
encoder/set.c:38:9: note: Detected single element interleaving *_106 step 8
encoder/set.c:38:9: note: Data access with gaps requires scalar epilogue loop
encoder/set.c:38:9: note: not consecutive access *_106 = t_102;

encoder/set.c:38:9: note: not vectorized: complicated access pattern.
encoder/set.c:38:9: note: bad data access.

Analyzing loop at encoder/set.c:37
encoder/set.c:37:5: note: ===== analyze_loop_nest =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: ===== analyze_loop_nest_1 =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 10
  exit condition [1, + , 1](no_overflow) < i_232 + 1
  bounds on difference of bases: 0 ... 4
Applying pattern match.pd:49, generic-match.c:3223
  result:
    # of iterations (unsigned int) i_232, bounded by 4
encoder/set.c:37:5: note: Symbolic number of iterations is (unsigned int) i_232 + 1
encoder/set.c:37:5: note: not vectorized: inner-loop count not invariant.
encoder/set.c:37:5: note: bad loop form.

Analyzing loop at encoder/set.c:38
encoder/set.c:38:9: note: ===== analyze_loop_nest =====
encoder/set.c:38:9: note: === vect_analyze_loop_form ===
encoder/set.c:38:9: note: === get_loop_niters ===
encoder/set.c:38:9: note: Symbolic number of iterations is (unsigned int) i_232 + 1
encoder/set.c:38:9: note: === vect_analyze_data_refs ===
Creating dr for *_115
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_232 * 4)
	offset from base address: 0
	constant offset from base address: 204
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_232 * 4)
	Access function 0: {204B, +, 1}_10
Creating dr for *_120
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_232
	offset from base address: 0
	constant offset from base address: 201
	step: 4
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_232
	Access function 0: {201B, +, 4}_10
Creating dr for *_115
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_232 * 4)
	offset from base address: 0
	constant offset from base address: 204
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_232 * 4)
	Access function 0: {204B, +, 1}_10
Creating dr for *_120
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_232
	offset from base address: 0
	constant offset from base address: 201
	step: 4
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_232
	Access function 0: {201B, +, 4}_10
encoder/set.c:38:9: note: got vectype for stmt: t_116 = *_115;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: _121 = *_120;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_115 = _121;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_120 = t_116;
vector(16) unsigned char
encoder/set.c:38:9: note: === vect_analyze_scalar_cycles ===
encoder/set.c:38:9: note: Analyze phi: j_202 = PHI <0(44), j_122(38)>

encoder/set.c:38:9: note: Access function of PHI: {0, +, 1}_10
encoder/set.c:38:9: note: step: 1,  init: 0
encoder/set.c:38:9: note: Detected induction.
encoder/set.c:38:9: note: Analyze phi: .MEM_173 = PHI <.MEM_171(44), .MEM_183(38)>

encoder/set.c:38:9: note: === vect_pattern_recog ===
encoder/set.c:38:9: note: vect_is_simple_use: operand j_202
encoder/set.c:38:9: note: def_stmt: j_202 = PHI <0(44), j_122(38)>
encoder/set.c:38:9: note: type of def: 4.
encoder/set.c:38:9: note: === vect_analyze_data_ref_accesses ===
encoder/set.c:38:9: note: Detected single element interleaving *_120 step 4
encoder/set.c:38:9: note: Data access with gaps requires scalar epilogue loop
encoder/set.c:38:9: note: not consecutive access *_120 = t_116;

encoder/set.c:38:9: note: not vectorized: complicated access pattern.
encoder/set.c:38:9: note: bad data access.

Analyzing loop at encoder/set.c:37
encoder/set.c:37:5: note: ===== analyze_loop_nest =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: ===== analyze_loop_nest_1 =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 12
  exit condition [1, + , 1](no_overflow) < i_217 + 1
  bounds on difference of bases: 0 ... 4
Applying pattern match.pd:49, generic-match.c:3223
  result:
    # of iterations (unsigned int) i_217, bounded by 4
encoder/set.c:37:5: note: Symbolic number of iterations is (unsigned int) i_217 + 1
encoder/set.c:37:5: note: not vectorized: inner-loop count not invariant.
encoder/set.c:37:5: note: bad loop form.

Analyzing loop at encoder/set.c:38
encoder/set.c:38:9: note: ===== analyze_loop_nest =====
encoder/set.c:38:9: note: === vect_analyze_loop_form ===
encoder/set.c:38:9: note: === get_loop_niters ===
encoder/set.c:38:9: note: Symbolic number of iterations is (unsigned int) i_217 + 1
encoder/set.c:38:9: note: === vect_analyze_data_refs ===
Creating dr for *_128
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_217 * 4)
	offset from base address: 0
	constant offset from base address: 188
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_217 * 4)
	Access function 0: {188B, +, 1}_12
Creating dr for *_133
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_217
	offset from base address: 0
	constant offset from base address: 185
	step: 4
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_217
	Access function 0: {185B, +, 4}_12
Creating dr for *_128
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_217 * 4)
	offset from base address: 0
	constant offset from base address: 188
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_217 * 4)
	Access function 0: {188B, +, 1}_12
Creating dr for *_133
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_217
	offset from base address: 0
	constant offset from base address: 185
	step: 4
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_217
	Access function 0: {185B, +, 4}_12
encoder/set.c:38:9: note: got vectype for stmt: t_129 = *_128;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: _134 = *_133;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_128 = _134;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_133 = t_129;
vector(16) unsigned char
encoder/set.c:38:9: note: === vect_analyze_scalar_cycles ===
encoder/set.c:38:9: note: Analyze phi: j_198 = PHI <0(36), j_135(30)>

encoder/set.c:38:9: note: Access function of PHI: {0, +, 1}_12
encoder/set.c:38:9: note: step: 1,  init: 0
encoder/set.c:38:9: note: Detected induction.
encoder/set.c:38:9: note: Analyze phi: .MEM_12 = PHI <.MEM_175(36), .MEM_181(30)>

encoder/set.c:38:9: note: === vect_pattern_recog ===
encoder/set.c:38:9: note: vect_is_simple_use: operand j_198
encoder/set.c:38:9: note: def_stmt: j_198 = PHI <0(36), j_135(30)>
encoder/set.c:38:9: note: type of def: 4.
encoder/set.c:38:9: note: === vect_analyze_data_ref_accesses ===
encoder/set.c:38:9: note: Detected single element interleaving *_133 step 4
encoder/set.c:38:9: note: Data access with gaps requires scalar epilogue loop
encoder/set.c:38:9: note: not consecutive access *_133 = t_129;

encoder/set.c:38:9: note: not vectorized: complicated access pattern.
encoder/set.c:38:9: note: bad data access.

Analyzing loop at encoder/set.c:37
encoder/set.c:37:5: note: ===== analyze_loop_nest =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: ===== analyze_loop_nest_1 =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 14
  exit condition [1, + , 1](no_overflow) < i_218 + 1
  bounds on difference of bases: 0 ... 4
Applying pattern match.pd:49, generic-match.c:3223
  result:
    # of iterations (unsigned int) i_218, bounded by 4
encoder/set.c:37:5: note: Symbolic number of iterations is (unsigned int) i_218 + 1
encoder/set.c:37:5: note: not vectorized: inner-loop count not invariant.
encoder/set.c:37:5: note: bad loop form.

Analyzing loop at encoder/set.c:38
encoder/set.c:38:9: note: ===== analyze_loop_nest =====
encoder/set.c:38:9: note: === vect_analyze_loop_form ===
encoder/set.c:38:9: note: === get_loop_niters ===
encoder/set.c:38:9: note: Symbolic number of iterations is (unsigned int) i_218 + 1
encoder/set.c:38:9: note: === vect_analyze_data_refs ===
Creating dr for *_142
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_218 * 4)
	offset from base address: 0
	constant offset from base address: 172
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_218 * 4)
	Access function 0: {172B, +, 1}_14
Creating dr for *_147
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_218
	offset from base address: 0
	constant offset from base address: 169
	step: 4
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_218
	Access function 0: {169B, +, 4}_14
Creating dr for *_142
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_218 * 4)
	offset from base address: 0
	constant offset from base address: 172
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_218 * 4)
	Access function 0: {172B, +, 1}_14
Creating dr for *_147
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_218
	offset from base address: 0
	constant offset from base address: 169
	step: 4
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_218
	Access function 0: {169B, +, 4}_14
encoder/set.c:38:9: note: got vectype for stmt: t_143 = *_142;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: _148 = *_147;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_142 = _148;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_147 = t_143;
vector(16) unsigned char
encoder/set.c:38:9: note: === vect_analyze_scalar_cycles ===
encoder/set.c:38:9: note: Analyze phi: j_227 = PHI <0(28), j_149(22)>

encoder/set.c:38:9: note: Access function of PHI: {0, +, 1}_14
encoder/set.c:38:9: note: step: 1,  init: 0
encoder/set.c:38:9: note: Detected induction.
encoder/set.c:38:9: note: Analyze phi: .MEM_224 = PHI <.MEM_219(28), .MEM_179(22)>

encoder/set.c:38:9: note: === vect_pattern_recog ===
encoder/set.c:38:9: note: vect_is_simple_use: operand j_227
encoder/set.c:38:9: note: def_stmt: j_227 = PHI <0(28), j_149(22)>
encoder/set.c:38:9: note: type of def: 4.
encoder/set.c:38:9: note: === vect_analyze_data_ref_accesses ===
encoder/set.c:38:9: note: Detected single element interleaving *_147 step 4
encoder/set.c:38:9: note: Data access with gaps requires scalar epilogue loop
encoder/set.c:38:9: note: not consecutive access *_147 = t_143;

encoder/set.c:38:9: note: not vectorized: complicated access pattern.
encoder/set.c:38:9: note: bad data access.

Analyzing loop at encoder/set.c:37
encoder/set.c:37:5: note: ===== analyze_loop_nest =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: ===== analyze_loop_nest_1 =====
encoder/set.c:37:5: note: === vect_analyze_loop_form ===
encoder/set.c:37:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 16
  exit condition [1, + , 1](no_overflow) < i_236 + 1
  bounds on difference of bases: 0 ... 4
Applying pattern match.pd:49, generic-match.c:3223
  result:
    # of iterations (unsigned int) i_236, bounded by 4
encoder/set.c:37:5: note: Symbolic number of iterations is (unsigned int) i_236 + 1
encoder/set.c:37:5: note: not vectorized: inner-loop count not invariant.
encoder/set.c:37:5: note: bad loop form.

Analyzing loop at encoder/set.c:38
encoder/set.c:38:9: note: ===== analyze_loop_nest =====
encoder/set.c:38:9: note: === vect_analyze_loop_form ===
encoder/set.c:38:9: note: === get_loop_niters ===
encoder/set.c:38:9: note: Symbolic number of iterations is (unsigned int) i_236 + 1
encoder/set.c:38:9: note: === vect_analyze_data_refs ===
Creating dr for *_155
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_236 * 4)
	offset from base address: 0
	constant offset from base address: 156
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_236 * 4)
	Access function 0: {156B, +, 1}_16
Creating dr for *_160
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_236
	offset from base address: 0
	constant offset from base address: 153
	step: 4
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_236
	Access function 0: {153B, +, 4}_16
Creating dr for *_155
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) (i_236 * 4)
	offset from base address: 0
	constant offset from base address: 156
	step: 1
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) (i_236 * 4)
	Access function 0: {156B, +, 1}_16
Creating dr for *_160
analyze_innermost: Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:749, generic-match.c:1467
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (uint8_t *) param_21(D) + (sizetype) i_236
	offset from base address: 0
	constant offset from base address: 153
	step: 4
	aligned to: 128
	base_object: *(uint8_t *) param_21(D) + (sizetype) i_236
	Access function 0: {153B, +, 4}_16
encoder/set.c:38:9: note: got vectype for stmt: t_156 = *_155;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: _161 = *_160;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_155 = _161;
vector(16) unsigned char
encoder/set.c:38:9: note: got vectype for stmt: *_160 = t_156;
vector(16) unsigned char
encoder/set.c:38:9: note: === vect_analyze_scalar_cycles ===
encoder/set.c:38:9: note: Analyze phi: .MEM_229 = PHI <.MEM_1(20), .MEM_177(14)>

encoder/set.c:38:9: note: Analyze phi: j_53 = PHI <0(20), j_162(14)>

encoder/set.c:38:9: note: Access function of PHI: {0, +, 1}_16
encoder/set.c:38:9: note: step: 1,  init: 0
encoder/set.c:38:9: note: Detected induction.
encoder/set.c:38:9: note: === vect_pattern_recog ===
encoder/set.c:38:9: note: vect_is_simple_use: operand j_53
encoder/set.c:38:9: note: def_stmt: j_53 = PHI <0(20), j_162(14)>
encoder/set.c:38:9: note: type of def: 4.
encoder/set.c:38:9: note: === vect_analyze_data_ref_accesses ===
encoder/set.c:38:9: note: Detected single element interleaving *_160 step 4
encoder/set.c:38:9: note: Data access with gaps requires scalar epilogue loop
encoder/set.c:38:9: note: not consecutive access *_160 = t_156;

encoder/set.c:38:9: note: not vectorized: complicated access pattern.
encoder/set.c:38:9: note: bad data access.
encoder/set.c:369:6: note: vectorized 0 loops in function.
x264_pps_init (struct x264_pps_t * pps, int i_id, struct x264_param_t * param, struct x264_sps_t * sps)
{
  int i;
  int j;
  uint8_t t;
  int i;
  int j;
  uint8_t t;
  int i;
  int j;
  uint8_t t;
  int i;
  int j;
  uint8_t t;
  int i;
  int j;
  uint8_t t;
  int i;
  int j;
  uint8_t t;
  int j;
  int i;
  int iftmp.8_5;
  int iftmp.9_6;
  int iftmp.10_7;
  int _19;
  int _22;
  int _29;
  int _32;
  int iftmp.9_33;
  int _36;
  int _41;
  _Bool _42;
  int _43;
  int _45;
  uint8_t[16] * _54;
  uint8_t[16] * _56;
  uint8_t[16] * _58;
  uint8_t[16] * _60;
  uint8_t[64] * _62;
  uint8_t[64] * _64;
  const uint8_t * _75;
  sizetype _76;
  const uint8_t * _77;
  unsigned char _78;
  const uint8_t * _79;
  int _86;
  sizetype _87;
  uint8_t * _88;
  int _90;
  int _91;
  sizetype _92;
  uint8_t * _93;
  unsigned char _94;
  int _99;
  sizetype _100;
  uint8_t * _101;
  int _103;
  int _104;
  sizetype _105;
  uint8_t * _106;
  unsigned char _107;
  int _113;
  sizetype _114;
  uint8_t * _115;
  int _117;
  int _118;
  sizetype _119;
  uint8_t * _120;
  unsigned char _121;
  int _126;
  sizetype _127;
  uint8_t * _128;
  int _130;
  int _131;
  sizetype _132;
  uint8_t * _133;
  unsigned char _134;
  int _140;
  sizetype _141;
  uint8_t * _142;
  int _144;
  int _145;
  sizetype _146;
  uint8_t * _147;
  unsigned char _148;
  int _153;
  sizetype _154;
  uint8_t * _155;
  int _157;
  int _158;
  sizetype _159;
  uint8_t * _160;
  unsigned char _161;
  unsigned int ivtmp_239;
  unsigned int ivtmp_240;
  unsigned int ivtmp_241;
  unsigned int ivtmp_242;
  unsigned int ivtmp_243;
  unsigned int ivtmp_244;
  unsigned int ivtmp_245;
  unsigned int ivtmp_246;
  unsigned int ivtmp_247;
  unsigned int ivtmp_248;
  unsigned int ivtmp_249;
  unsigned int ivtmp_250;
  unsigned int ivtmp_251;
  unsigned int ivtmp_252;
  unsigned int ivtmp_253;
  unsigned int ivtmp_254;
  int pretmp_271;
  int pretmp_274;
  int pretmp_277;
  int pretmp_280;
  int pretmp_283;
  int pretmp_286;

  <bb 2>:
  pps_15(D)->i_id = i_id_16(D);
  _19 = sps_18(D)->i_id;
  pps_15(D)->i_sps_id = _19;
  _22 = param_21(D)->b_cabac;
  pps_15(D)->b_cabac = _22;
  pps_15(D)->b_pic_order = 0;
  pps_15(D)->i_num_slice_groups = 1;
  pps_15(D)->i_num_ref_idx_l0_active = 1;
  pps_15(D)->i_num_ref_idx_l1_active = 1;
  pps_15(D)->b_weighted_pred = 0;
  _29 = param_21(D)->analyse.b_weighted_bipred;
  if (_29 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:

  <bb 4>:
  # iftmp.8_5 = PHI <2(2), 0(3)>
  pps_15(D)->b_weighted_bipred = iftmp.8_5;
  _32 = param_21(D)->rc.i_rc_method;
  if (_32 != 2)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  iftmp.9_33 = param_21(D)->rc.i_qp_constant;

  <bb 6>:
  # iftmp.9_6 = PHI <iftmp.9_33(5), 26(4)>
  pps_15(D)->i_pic_init_qp = iftmp.9_6;
  pps_15(D)->i_pic_init_qs = 26;
  _36 = param_21(D)->analyse.i_chroma_qp_offset;
  pps_15(D)->i_chroma_qp_index_offset = _36;
  pps_15(D)->b_deblocking_filter_control = 1;
  pps_15(D)->b_constrained_intra_pred = 0;
  pps_15(D)->b_redundant_pic_cnt = 0;
  _41 = param_21(D)->analyse.b_transform_8x8;
  _42 = _41 != 0;
  _43 = (int) _42;
  pps_15(D)->b_transform_8x8_mode = _43;
  _45 = param_21(D)->i_cqm_preset;
  pps_15(D)->i_cqm_preset = _45;
  switch (_45) <default: <L26>, case 0: <L35>, case 1: <L30>, case 2: <L14>>

<L30>:
  # DEBUG i => 0
  pps_15(D)->scaling_list[0] = &x264_cqm_jvt4i;
  # DEBUG i => 1
  # DEBUG i => 1
  pps_15(D)->scaling_list[1] = &x264_cqm_jvt4p;
  # DEBUG i => 2
  # DEBUG i => 2
  pps_15(D)->scaling_list[2] = &x264_cqm_jvt4i;
  # DEBUG i => 3
  # DEBUG i => 3
  pps_15(D)->scaling_list[3] = &x264_cqm_jvt4p;
  # DEBUG i => 4
  # DEBUG i => 4
  pps_15(D)->scaling_list[4] = &x264_cqm_jvt8i;
  # DEBUG i => 5
  # DEBUG i => 5
  pps_15(D)->scaling_list[5] = &x264_cqm_jvt8p;
  # DEBUG i => 6
  # DEBUG i => 6
  goto <bb 70> (<L26>);

<L35>:

  <bb 9>:
  # i_211 = PHI <0(8), i_50(10)>
  # ivtmp_254 = PHI <6(8), ivtmp_253(10)>
  # DEBUG i => i_211
  pps_15(D)->scaling_list[i_211] = &x264_cqm_flat16;
  i_50 = i_211 + 1;
  # DEBUG i => i_50
  # DEBUG i => i_50
  ivtmp_253 = ivtmp_254 - 1;
  if (ivtmp_253 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  goto <bb 9>;

  <bb 11>:

  <bb 12>:
  goto <bb 70> (<L26>);

<L14>:
  _54 = &param_21(D)->cqm_4iy;
  # DEBUG buf => _54
  # DEBUG w => 4
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG j => 0
  goto <bb 18>;

  <bb 14>:

  <bb 15>:
  # j_53 = PHI <0(20), j_162(14)>
  # DEBUG j => j_53
  _153 = j_53 + pretmp_286;
  _154 = (sizetype) _153;
  _155 = _54 + _154;
  t_156 = *_155;
  # DEBUG t => t_156
  _157 = j_53 * 4;
  _158 = _157 + i_163;
  _159 = (sizetype) _158;
  _160 = _54 + _159;
  _161 = *_160;
  *_155 = _161;
  *_160 = t_156;
  j_162 = j_53 + 1;
  # DEBUG j => j_162
  # DEBUG j => j_162
  if (j_162 < i_163)
    goto <bb 14>;
  else
    goto <bb 16>;

  <bb 16>:

  <bb 17>:

  <bb 18>:
  # i_236 = PHI <i_163(17), 0(13)>
  # ivtmp_240 = PHI <ivtmp_239(17), 4(13)>
  i_163 = i_236 + 1;
  # DEBUG i => i_163
  # DEBUG i => i_163
  ivtmp_239 = ivtmp_240 - 1;
  if (ivtmp_239 != 0)
    goto <bb 19>;
  else
    goto <bb 21>;

  <bb 19>:
  # DEBUG i => i_163
  # DEBUG j => 0
  if (i_163 > 0)
    goto <bb 20>;
  else
    goto <bb 17>;

  <bb 20>:
  pretmp_286 = i_163 * 4;
  goto <bb 15>;

  <bb 21>:
  # DEBUG buf => NULL
  # DEBUG w => NULL
  # DEBUG t => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  _56 = &param_21(D)->cqm_4ic;
  # DEBUG buf => _56
  # DEBUG w => 4
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG j => 0
  goto <bb 26>;

  <bb 22>:

  <bb 23>:
  # j_227 = PHI <0(28), j_149(22)>
  # DEBUG j => j_227
  _140 = j_227 + pretmp_283;
  _141 = (sizetype) _140;
  _142 = _56 + _141;
  t_143 = *_142;
  # DEBUG t => t_143
  _144 = j_227 * 4;
  _145 = _144 + i_150;
  _146 = (sizetype) _145;
  _147 = _56 + _146;
  _148 = *_147;
  *_142 = _148;
  *_147 = t_143;
  j_149 = j_227 + 1;
  # DEBUG j => j_149
  # DEBUG j => j_149
  if (j_149 < i_150)
    goto <bb 22>;
  else
    goto <bb 24>;

  <bb 24>:

  <bb 25>:

  <bb 26>:
  # i_218 = PHI <i_150(25), 0(21)>
  # ivtmp_242 = PHI <ivtmp_241(25), 4(21)>
  i_150 = i_218 + 1;
  # DEBUG i => i_150
  # DEBUG i => i_150
  ivtmp_241 = ivtmp_242 - 1;
  if (ivtmp_241 != 0)
    goto <bb 27>;
  else
    goto <bb 29>;

  <bb 27>:
  # DEBUG i => i_150
  # DEBUG j => 0
  if (i_150 > 0)
    goto <bb 28>;
  else
    goto <bb 25>;

  <bb 28>:
  pretmp_283 = i_150 * 4;
  goto <bb 23>;

  <bb 29>:
  # DEBUG buf => NULL
  # DEBUG w => NULL
  # DEBUG t => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  _58 = &param_21(D)->cqm_4py;
  # DEBUG buf => _58
  # DEBUG w => 4
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG j => 0
  goto <bb 34>;

  <bb 30>:

  <bb 31>:
  # j_198 = PHI <0(36), j_135(30)>
  # DEBUG j => j_198
  _126 = j_198 + pretmp_280;
  _127 = (sizetype) _126;
  _128 = _58 + _127;
  t_129 = *_128;
  # DEBUG t => t_129
  _130 = j_198 * 4;
  _131 = _130 + i_136;
  _132 = (sizetype) _131;
  _133 = _58 + _132;
  _134 = *_133;
  *_128 = _134;
  *_133 = t_129;
  j_135 = j_198 + 1;
  # DEBUG j => j_135
  # DEBUG j => j_135
  if (j_135 < i_136)
    goto <bb 30>;
  else
    goto <bb 32>;

  <bb 32>:

  <bb 33>:

  <bb 34>:
  # i_217 = PHI <i_136(33), 0(29)>
  # ivtmp_244 = PHI <ivtmp_243(33), 4(29)>
  i_136 = i_217 + 1;
  # DEBUG i => i_136
  # DEBUG i => i_136
  ivtmp_243 = ivtmp_244 - 1;
  if (ivtmp_243 != 0)
    goto <bb 35>;
  else
    goto <bb 37>;

  <bb 35>:
  # DEBUG i => i_136
  # DEBUG j => 0
  if (i_136 > 0)
    goto <bb 36>;
  else
    goto <bb 33>;

  <bb 36>:
  pretmp_280 = i_136 * 4;
  goto <bb 31>;

  <bb 37>:
  # DEBUG buf => NULL
  # DEBUG w => NULL
  # DEBUG t => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  _60 = &param_21(D)->cqm_4pc;
  # DEBUG buf => _60
  # DEBUG w => 4
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG j => 0
  goto <bb 42>;

  <bb 38>:

  <bb 39>:
  # j_202 = PHI <0(44), j_122(38)>
  # DEBUG j => j_202
  _113 = j_202 + pretmp_277;
  _114 = (sizetype) _113;
  _115 = _60 + _114;
  t_116 = *_115;
  # DEBUG t => t_116
  _117 = j_202 * 4;
  _118 = _117 + i_123;
  _119 = (sizetype) _118;
  _120 = _60 + _119;
  _121 = *_120;
  *_115 = _121;
  *_120 = t_116;
  j_122 = j_202 + 1;
  # DEBUG j => j_122
  # DEBUG j => j_122
  if (j_122 < i_123)
    goto <bb 38>;
  else
    goto <bb 40>;

  <bb 40>:

  <bb 41>:

  <bb 42>:
  # i_232 = PHI <i_123(41), 0(37)>
  # ivtmp_246 = PHI <ivtmp_245(41), 4(37)>
  i_123 = i_232 + 1;
  # DEBUG i => i_123
  # DEBUG i => i_123
  ivtmp_245 = ivtmp_246 - 1;
  if (ivtmp_245 != 0)
    goto <bb 43>;
  else
    goto <bb 45>;

  <bb 43>:
  # DEBUG i => i_123
  # DEBUG j => 0
  if (i_123 > 0)
    goto <bb 44>;
  else
    goto <bb 41>;

  <bb 44>:
  pretmp_277 = i_123 * 4;
  goto <bb 39>;

  <bb 45>:
  # DEBUG buf => NULL
  # DEBUG w => NULL
  # DEBUG t => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  _62 = &param_21(D)->cqm_8iy;
  # DEBUG buf => _62
  # DEBUG w => 8
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG j => 0
  goto <bb 50>;

  <bb 46>:

  <bb 47>:
  # j_230 = PHI <0(52), j_108(46)>
  # DEBUG j => j_230
  _99 = j_230 + pretmp_274;
  _100 = (sizetype) _99;
  _101 = _62 + _100;
  t_102 = *_101;
  # DEBUG t => t_102
  _103 = j_230 * 8;
  _104 = _103 + i_109;
  _105 = (sizetype) _104;
  _106 = _62 + _105;
  _107 = *_106;
  *_101 = _107;
  *_106 = t_102;
  j_108 = j_230 + 1;
  # DEBUG j => j_108
  # DEBUG j => j_108
  if (j_108 < i_109)
    goto <bb 46>;
  else
    goto <bb 48>;

  <bb 48>:

  <bb 49>:

  <bb 50>:
  # i_231 = PHI <i_109(49), 0(45)>
  # ivtmp_248 = PHI <ivtmp_247(49), 8(45)>
  i_109 = i_231 + 1;
  # DEBUG i => i_109
  # DEBUG i => i_109
  ivtmp_247 = ivtmp_248 - 1;
  if (ivtmp_247 != 0)
    goto <bb 51>;
  else
    goto <bb 53>;

  <bb 51>:
  # DEBUG i => i_109
  # DEBUG j => 0
  if (i_109 > 0)
    goto <bb 52>;
  else
    goto <bb 49>;

  <bb 52>:
  pretmp_274 = i_109 * 8;
  goto <bb 47>;

  <bb 53>:
  # DEBUG buf => NULL
  # DEBUG w => NULL
  # DEBUG t => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  _64 = &param_21(D)->cqm_8py;
  # DEBUG buf => _64
  # DEBUG w => 8
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG j => 0
  goto <bb 58>;

  <bb 54>:

  <bb 55>:
  # j_228 = PHI <0(60), j_95(54)>
  # DEBUG j => j_228
  _86 = j_228 + pretmp_271;
  _87 = (sizetype) _86;
  _88 = _64 + _87;
  t_89 = *_88;
  # DEBUG t => t_89
  _90 = j_228 * 8;
  _91 = _90 + i_96;
  _92 = (sizetype) _91;
  _93 = _64 + _92;
  _94 = *_93;
  *_88 = _94;
  *_93 = t_89;
  j_95 = j_228 + 1;
  # DEBUG j => j_95
  # DEBUG j => j_95
  if (j_95 < i_96)
    goto <bb 54>;
  else
    goto <bb 56>;

  <bb 56>:

  <bb 57>:

  <bb 58>:
  # i_213 = PHI <i_96(57), 0(53)>
  # ivtmp_250 = PHI <ivtmp_249(57), 8(53)>
  i_96 = i_213 + 1;
  # DEBUG i => i_96
  # DEBUG i => i_96
  ivtmp_249 = ivtmp_250 - 1;
  if (ivtmp_249 != 0)
    goto <bb 59>;
  else
    goto <bb 61>;

  <bb 59>:
  # DEBUG i => i_96
  # DEBUG j => 0
  if (i_96 > 0)
    goto <bb 60>;
  else
    goto <bb 57>;

  <bb 60>:
  pretmp_271 = i_96 * 8;
  goto <bb 55>;

  <bb 61>:
  # DEBUG buf => NULL
  # DEBUG w => NULL
  # DEBUG t => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  pps_15(D)->scaling_list[0] = _54;
  pps_15(D)->scaling_list[2] = _56;
  pps_15(D)->scaling_list[1] = _58;
  pps_15(D)->scaling_list[3] = _60;
  pps_15(D)->scaling_list[4] = _62;
  pps_15(D)->scaling_list[5] = _64;
  # DEBUG i => 0
  # DEBUG i => 0
  goto <bb 69>;

  <bb 62>:
  _75 = pps_15(D)->scaling_list[i_209];
  _76 = (sizetype) j_4;
  _77 = _75 + _76;
  _78 = *_77;
  if (_78 == 0)
    goto <bb 63>;
  else
    goto <bb 64>;

  <bb 63>:
  _79 = x264_cqm_jvt[i_209];
  pps_15(D)->scaling_list[i_209] = _79;

  <bb 64>:
  j_81 = j_4 + 1;
  # DEBUG j => j_81

  <bb 65>:
  # j_4 = PHI <0(69), j_81(64)>
  # DEBUG j => j_4
  if (j_4 < iftmp.10_7)
    goto <bb 62>;
  else
    goto <bb 66>;

  <bb 66>:
  i_82 = i_209 + 1;
  # DEBUG i => i_82
  # DEBUG i => i_82
  ivtmp_251 = ivtmp_252 - 1;
  if (ivtmp_251 != 0)
    goto <bb 68>;
  else
    goto <bb 67>;

  <bb 67>:
  goto <bb 12>;

  <bb 68>:

  <bb 69>:
  # i_209 = PHI <i_82(68), 0(61)>
  # ivtmp_252 = PHI <ivtmp_251(68), 6(61)>
  # DEBUG i => i_209
  iftmp.10_7 = i_209 <= 3 ? 16 : 64;
  goto <bb 65>;

<L26>:
  return;

}



;; Function x264_sei_version_write (x264_sei_version_write, funcdef_no=133, decl_uid=7048, cgraph_uid=133, symbol_order=176)


Analyzing loop at encoder/set.c:500
encoder/set.c:500:5: note: ===== analyze_loop_nest =====
encoder/set.c:500:5: note: === vect_analyze_loop_form ===
encoder/set.c:500:5: note: not vectorized: control flow in loop.
encoder/set.c:500:5: note: bad loop form.

Analyzing loop at encoder/set.c:498
encoder/set.c:498:5: note: ===== analyze_loop_nest =====
encoder/set.c:498:5: note: === vect_analyze_loop_form ===
encoder/set.c:498:5: note: not vectorized: control flow in loop.
encoder/set.c:498:5: note: bad loop form.

Analyzing loop at encoder/set.c:494
encoder/set.c:494:5: note: ===== analyze_loop_nest =====
encoder/set.c:494:5: note: === vect_analyze_loop_form ===
encoder/set.c:494:5: note: not vectorized: control flow in loop.
encoder/set.c:494:5: note: bad loop form.
encoder/set.c:475:6: note: vectorized 0 loops in function.
x264_sei_version_write (struct x264_t * h, struct bs_t * s)
{
  _Bool s__cur_bits_lsm.145;
  intptr_t s__cur_bits_lsm.144;
  _Bool s__cur_bits_lsm.143;
  intptr_t s__cur_bits_lsm.142;
  intptr_t x;
  uint32_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  int length;
  char * version;
  char * opts;
  const uint8_t uuid[16];
  int i;
  int _5;
  struct x264_param_t * _25;
  long unsigned int _28;
  unsigned int _29;
  unsigned int _30;
  int _31;
  long int _34;
  long unsigned int _35;
  unsigned int _36;
  unsigned int _37;
  int _45;
  unsigned int _46;
  unsigned char _49;
  sizetype _53;
  char * _54;
  char _55;
  unsigned int _56;
  long int _64;
  long int _66;
  int _67;
  int _68;
  uint8_t * _69;
  long int _70;
  unsigned int _72;
  int _73;
  int _74;
  uint8_t * _75;
  long int _76;
  long int _78;
  int _80;
  long int _82;
  unsigned int _84;
  int _85;
  int _86;
  uint8_t * _87;
  long int _88;
  long int _89;
  long int _90;
  int _92;
  long int _94;
  unsigned int _96;
  int _97;
  int _98;
  uint8_t * _99;
  long int _100;
  long int _101;
  long int _102;
  int _104;
  long int _106;
  unsigned int _108;
  int _109;
  int _110;
  uint8_t * _111;
  long int _112;
  long int _113;
  long int _114;
  int _116;
  long int _118;
  unsigned int _120;
  int _121;
  int _122;
  uint8_t * _123;
  long int _154;
  long int _155;
  int _157;
  unsigned int _159;
  uint8_t * _161;
  long int _164;
  uint8_t * _169;
  int _204;
  uint8_t * prephitmp_212;
  int prephitmp_213;
  uint8_t * prephitmp_214;
  int prephitmp_215;
  uint8_t * prephitmp_216;
  int prephitmp_217;
  long int _218;
  long int _219;
  long int _220;
  unsigned int ivtmp_225;
  unsigned int ivtmp_230;
  int prephitmp_232;
  uint8_t * pretmp_233;
  uint8_t * prephitmp_234;
  long int prephitmp_235;
  int prephitmp_236;
  uint8_t * prephitmp_238;
  long int prephitmp_239;
  int prephitmp_245;
  uint8_t * prephitmp_247;
  int prephitmp_248;
  uint8_t * prephitmp_250;
  long int prephitmp_251;
  uint8_t * prephitmp_253;
  int prephitmp_254;
  int pretmp_255;
  long unsigned int pretmp_257;
  long unsigned int pretmp_259;
  long unsigned int prephitmp_260;
  long int prephitmp_261;
  int prephitmp_265;
  uint8_t * prephitmp_267;
  int prephitmp_268;
  uint8_t * prephitmp_270;
  long int prephitmp_271;
  int prephitmp_274;
  uint8_t * prephitmp_276;
  int prephitmp_277;
  uint8_t * prephitmp_279;
  int prephitmp_280;
  uint8_t * prephitmp_281;
  int prephitmp_282;
  uint8_t * prephitmp_283;

  <bb 2>:
  uuid[0] = 220;
  uuid[1] = 69;
  uuid[2] = 233;
  uuid[3] = 189;
  uuid[4] = 230;
  uuid[5] = 217;
  uuid[6] = 72;
  uuid[7] = 183;
  uuid[8] = 150;
  uuid[9] = 44;
  uuid[10] = 216;
  uuid[11] = 32;
  uuid[12] = 217;
  uuid[13] = 35;
  uuid[14] = 238;
  uuid[15] = 239;
  _25 = &h_24(D)->param;
  opts_27 = x264_param2string (_25, 0);
  # DEBUG opts => opts_27
  _28 = strlen (opts_27);
  _29 = (unsigned int) _28;
  _30 = _29 + 200;
  _31 = (int) _30;
  version_33 = x264_malloc (_31);
  # DEBUG version => version_33
  # DEBUG __s => version_33
  # DEBUG __fmt => "x264 - core %d%s - H.264/MPEG-4 AVC codec - Copyleft 2003-2008 - http://www.videolan.org/x264.html - options: %s"
  __builtin___sprintf_chk (version_33, 1, 18446744073709551615, "x264 - core %d%s - H.264/MPEG-4 AVC codec - Copyleft 2003-2008 - http://www.videolan.org/x264.html - options: %s", 65, " r1047M f773bf0", opts_27);
  # DEBUG __s => NULL
  # DEBUG __fmt => NULL
  _35 = strlen (version_33);
  _36 = (unsigned int) _35;
  _37 = _36 + 17;
  length_38 = (int) _37;
  # DEBUG length => length_38
  # DEBUG s => s_39(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => 5
  _34 = s_39(D)->cur_bits;
  _64 = _34 << 8;
  _66 = _64 | 5;
  s_39(D)->cur_bits = _66;
  _67 = s_39(D)->i_left;
  _68 = _67 + -8;
  s_39(D)->i_left = _68;
  if (_68 <= 32)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  pretmp_233 = s_39(D)->p;
  goto <bb 5>;

  <bb 4>:
  _69 = s_39(D)->p;
  _70 = _66 << _68;
  # DEBUG x => _70
  __asm__("bswap %0" : "=r" x_71 : "0" _70);
  # DEBUG x => x_71
  # DEBUG x => NULL
  _72 = (unsigned int) x_71;
  MEM[(uint32_t *)_69] = _72;
  _73 = s_39(D)->i_left;
  _74 = _73 + 32;
  s_39(D)->i_left = _74;
  _75 = _69 + 4;
  s_39(D)->p = _75;

  <bb 5>:
  # prephitmp_232 = PHI <_74(4), _68(3)>
  # prephitmp_234 = PHI <_75(4), pretmp_233(3)>
  # DEBUG i => 0
  _5 = length_38 + -254;
  if (_5 > 0)
    goto <bb 6>;
  else
    goto <bb 12>;

  <bb 6>:

  <bb 7>:
  # i_65 = PHI <0(6), i_44(11)>
  # prephitmp_271 = PHI <_66(6), _78(11)>
  # prephitmp_274 = PHI <prephitmp_232(6), prephitmp_277(11)>
  # prephitmp_276 = PHI <prephitmp_234(6), prephitmp_279(11)>
  # DEBUG i => i_65
  # DEBUG s => s_39(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => 255
  _76 = prephitmp_271 << 8;
  _78 = _76 | 255;
  _80 = prephitmp_274 + -8;
  s_39(D)->i_left = _80;
  if (_80 <= 32)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _82 = _78 << _80;
  # DEBUG x => _82
  __asm__("bswap %0" : "=r" x_83 : "0" _82);
  # DEBUG x => x_83
  # DEBUG x => NULL
  _84 = (unsigned int) x_83;
  MEM[(uint32_t *)prephitmp_276] = _84;
  _85 = s_39(D)->i_left;
  _86 = _85 + 32;
  s_39(D)->i_left = _86;
  _87 = prephitmp_276 + 4;
  s_39(D)->p = _87;

  <bb 9>:
  # prephitmp_277 = PHI <_86(8), _80(7)>
  # prephitmp_279 = PHI <_87(8), prephitmp_276(7)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  i_44 = i_65 + 255;
  # DEBUG i => i_44
  # DEBUG i => i_44
  if (_5 > i_44)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  # i_221 = PHI <i_44(9)>
  # _220 = PHI <_78(9)>
  # prephitmp_213 = PHI <prephitmp_277(9)>
  # prephitmp_212 = PHI <prephitmp_279(9)>
  # s__cur_bits_lsm.144_195 = PHI <_78(9)>
  s_39(D)->cur_bits = s__cur_bits_lsm.144_195;
  goto <bb 12>;

  <bb 11>:
  goto <bb 7>;

  <bb 12>:
  # i_57 = PHI <i_221(10), 0(5)>
  # prephitmp_235 = PHI <_220(10), _66(5)>
  # prephitmp_280 = PHI <prephitmp_213(10), prephitmp_232(5)>
  # prephitmp_281 = PHI <prephitmp_212(10), prephitmp_234(5)>
  _45 = length_38 - i_57;
  _46 = (unsigned int) _45;
  # DEBUG s => s_39(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => _46
  _88 = prephitmp_235 << 8;
  _89 = (long int) _46;
  _90 = _88 | _89;
  s_39(D)->cur_bits = _90;
  _92 = prephitmp_280 + -8;
  s_39(D)->i_left = _92;
  if (_92 <= 32)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _94 = _90 << _92;
  # DEBUG x => _94
  __asm__("bswap %0" : "=r" x_95 : "0" _94);
  # DEBUG x => x_95
  # DEBUG x => NULL
  _96 = (unsigned int) x_95;
  MEM[(uint32_t *)prephitmp_281] = _96;
  _97 = s_39(D)->i_left;
  _98 = _97 + 32;
  s_39(D)->i_left = _98;
  _99 = prephitmp_281 + 4;
  s_39(D)->p = _99;

  <bb 14>:
  # prephitmp_236 = PHI <_98(13), _92(12)>
  # prephitmp_238 = PHI <_99(13), prephitmp_281(12)>
  # DEBUG i => 0

  <bb 15>:
  # i_191 = PHI <i_51(18), 0(14)>
  # prephitmp_239 = PHI <_102(18), _90(14)>
  # prephitmp_245 = PHI <prephitmp_248(18), prephitmp_236(14)>
  # prephitmp_247 = PHI <prephitmp_250(18), prephitmp_238(14)>
  # ivtmp_230 = PHI <ivtmp_225(18), 16(14)>
  # DEBUG i => i_191
  _49 = uuid[i_191];
  # DEBUG s => s_39(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => (unsigned int) _49
  _100 = prephitmp_239 << 8;
  _101 = (long int) _49;
  _102 = _100 | _101;
  _104 = prephitmp_245 + -8;
  s_39(D)->i_left = _104;
  if (_104 <= 32)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  _106 = _102 << _104;
  # DEBUG x => _106
  __asm__("bswap %0" : "=r" x_107 : "0" _106);
  # DEBUG x => x_107
  # DEBUG x => NULL
  _108 = (unsigned int) x_107;
  MEM[(uint32_t *)prephitmp_247] = _108;
  _109 = s_39(D)->i_left;
  _110 = _109 + 32;
  s_39(D)->i_left = _110;
  _111 = prephitmp_247 + 4;
  s_39(D)->p = _111;

  <bb 17>:
  # prephitmp_248 = PHI <_110(16), _104(15)>
  # prephitmp_250 = PHI <_111(16), prephitmp_247(15)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  i_51 = i_191 + 1;
  # DEBUG i => i_51
  # DEBUG i => i_51
  ivtmp_225 = ivtmp_230 - 1;
  if (ivtmp_225 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  goto <bb 15>;

  <bb 19>:
  # _219 = PHI <_102(17)>
  # prephitmp_217 = PHI <prephitmp_248(17)>
  # prephitmp_216 = PHI <prephitmp_250(17)>
  # s__cur_bits_lsm.142_197 = PHI <_102(17)>
  s_39(D)->cur_bits = s__cur_bits_lsm.142_197;
  # DEBUG i => 0
  _204 = length_38 + -16;
  if (_204 > 0)
    goto <bb 20>;
  else
    goto <bb 26>;

  <bb 20>:

  <bb 21>:
  # i_63 = PHI <0(20), i_58(25)>
  # prephitmp_261 = PHI <_219(20), _114(25)>
  # prephitmp_265 = PHI <prephitmp_217(20), prephitmp_268(25)>
  # prephitmp_267 = PHI <prephitmp_216(20), prephitmp_270(25)>
  # DEBUG i => i_63
  _53 = (sizetype) i_63;
  _54 = version_33 + _53;
  _55 = *_54;
  _56 = (unsigned int) _55;
  # DEBUG s => s_39(D)
  # DEBUG i_count => 8
  # DEBUG i_bits => _56
  _112 = prephitmp_261 << 8;
  _113 = (long int) _56;
  _114 = _112 | _113;
  s_39(D)->cur_bits = _114;
  _116 = prephitmp_265 + -8;
  s_39(D)->i_left = _116;
  if (_116 <= 32)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  _118 = _114 << _116;
  # DEBUG x => _118
  __asm__("bswap %0" : "=r" x_119 : "0" _118);
  # DEBUG x => x_119
  # DEBUG x => NULL
  _120 = (unsigned int) x_119;
  MEM[(uint32_t *)prephitmp_267] = _120;
  _121 = s_39(D)->i_left;
  _122 = _121 + 32;
  s_39(D)->i_left = _122;
  _123 = prephitmp_267 + 4;
  s_39(D)->p = _123;

  <bb 23>:
  # prephitmp_268 = PHI <_122(22), _116(21)>
  # prephitmp_270 = PHI <_123(22), prephitmp_267(21)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  i_58 = i_63 + 1;
  # DEBUG i => i_58
  # DEBUG i => i_58
  if (i_58 < _204)
    goto <bb 25>;
  else
    goto <bb 24>;

  <bb 24>:
  # _218 = PHI <_114(23)>
  # prephitmp_215 = PHI <prephitmp_268(23)>
  # prephitmp_214 = PHI <prephitmp_270(23)>
  goto <bb 26>;

  <bb 25>:
  goto <bb 21>;

  <bb 26>:
  # prephitmp_251 = PHI <_218(24), _219(19)>
  # prephitmp_282 = PHI <prephitmp_215(24), prephitmp_217(19)>
  # prephitmp_283 = PHI <prephitmp_214(24), prephitmp_216(19)>
  # DEBUG s => s_39(D)
  # DEBUG s => s_39(D)
  # DEBUG i_bit => 1
  _154 = prephitmp_251 << 1;
  _155 = _154 | 1;
  s_39(D)->cur_bits = _155;
  _157 = prephitmp_282 + -1;
  s_39(D)->i_left = _157;
  if (_157 == 32)
    goto <bb 28>;
  else
    goto <bb 27>;

  <bb 27>:
  pretmp_255 = _157 / 8;
  pretmp_257 = (long unsigned int) pretmp_255;
  pretmp_259 = 8 - pretmp_257;
  goto <bb 29>;

  <bb 28>:
  _159 = (unsigned int) _155;
  # DEBUG x => _159
  __asm__("bswap %0" : "=r" x_160 : "0" _159);
  # DEBUG x => x_160
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_283] = x_160;
  _161 = prephitmp_283 + 4;
  s_39(D)->p = _161;
  s_39(D)->i_left = 64;

  <bb 29>:
  # prephitmp_253 = PHI <prephitmp_283(27), _161(28)>
  # prephitmp_254 = PHI <_157(27), 64(28)>
  # prephitmp_260 = PHI <pretmp_259(27), 0(28)>
  # DEBUG s => NULL
  # DEBUG i_bit => NULL
  # DEBUG x => NULL
  # DEBUG s => s_39(D)
  _164 = _155 << prephitmp_254;
  # DEBUG x => _164
  __asm__("bswap %0" : "=r" x_165 : "0" _164);
  # DEBUG x => x_165
  # DEBUG x => NULL
  MEM[(intptr_t *)prephitmp_253] = x_165;
  _169 = prephitmp_253 + prephitmp_260;
  s_39(D)->p = _169;
  s_39(D)->i_left = 64;
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  x264_free (opts_27);
  x264_free (version_33);
  uuid ={v} {CLOBBER};
  return;

}



;; Function x264_validate_levels (x264_validate_levels, funcdef_no=134, decl_uid=7051, cgraph_uid=134, symbol_order=178)


Analyzing loop at encoder/set.c:546
encoder/set.c:546:10: note: ===== analyze_loop_nest =====
encoder/set.c:546:10: note: === vect_analyze_loop_form ===
encoder/set.c:546:10: note: not vectorized: control flow in loop.
encoder/set.c:546:10: note: bad loop form.
encoder/set.c:537:5: note: vectorized 0 loops in function.
x264_validate_levels (struct x264_t * h, int verbose)
{
  const struct x264_level_t * l;
  int cbp_factor;
  int dpb;
  int mbs;
  int ret;
  int pretmp_9;
  struct x264_sps_t * pretmp_10;
  int pretmp_17;
  struct x264_sps_t * _21;
  int _22;
  int _23;
  int _25;
  int _26;
  int _28;
  int _29;
  int _33;
  int _34;
  int _35;
  int _38;
  int _39;
  int _43;
  int _44;
  int _45;
  int _46;
  int _48;
  int _49;
  int _50;
  int _51;
  int _53;
  int _54;
  int _56;
  int _57;
  _Bool _58;
  int _59;
  int _61;
  long int _62;
  int _63;
  long int _64;
  long int _65;
  long int _66;
  long int _67;
  int _68;
  long int _69;
  int _70;
  struct x264_sps_t * _72;
  int _73;
  int _74;
  int _81;
  struct x264_sps_t * _83;
  int _88;
  _Bool _89;
  int prephitmp_90;
  int _91;
  int _95;
  int _96;
  int _98;
  int _99;
  int _100;
  int _101;
  int _102;
  int _103;
  int _106;
  int _107;
  int _109;
  int _110;
  int _112;
  int _115;
  int _118;
  int _119;
  int _120;
  int _121;
  int _122;
  int _123;
  int _124;
  int _125;
  int _126;
  int pretmp_128;
  int prephitmp_129;

  <bb 2>:
  # DEBUG ret => 0
  _21 = h_20(D)->sps;
  _22 = _21->i_mb_width;
  _23 = _21->i_mb_height;
  mbs_24 = _22 * _23;
  # DEBUG mbs => mbs_24
  _25 = mbs_24 * 384;
  _26 = _21->i_num_ref_frames;
  dpb_27 = _25 * _26;
  # DEBUG dpb => dpb_27
  _28 = _21->i_profile_idc;
  if (_28 == 100)
    goto <bb 44>;
  else
    goto <bb 3>;

  <bb 3>:
  goto <bb 44>;

  <bb 4>:

  <bb 5>:
  # l_114 = PHI <&x264_levels(45), l_31(4)>
  # DEBUG l => l_114
  l_31 = l_114 + 48;
  # DEBUG l => l_31
  # DEBUG l => l_31
  _29 = l_31->level_idc;
  if (_29 != 0)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  # l_93 = PHI <l_31(5)>
  # l_85 = PHI <l_114(5)>
  pretmp_17 = MEM[(const struct x264_level_t *)l_85 + 48B].frame_size;
  goto <bb 9>;

  <bb 7>:
  if (_29 != _91)
    goto <bb 4>;
  else
    goto <bb 8>;

  <bb 8>:
  # l_92 = PHI <l_31(7)>
  # l_80 = PHI <l_114(7)>
  pretmp_9 = MEM[(const struct x264_level_t *)l_80 + 48B].frame_size;

  <bb 9>:
  # l_79 = PHI <l_93(6), l_92(8), &x264_levels(44)>
  # prephitmp_90 = PHI <pretmp_17(6), pretmp_9(8), 99(44)>
  if (mbs_24 > prephitmp_90)
    goto <bb 12>;
  else
    goto <bb 10>;

  <bb 10>:
  _33 = prephitmp_90 * 8;
  _34 = _22 * _22;
  if (_33 < _34)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:
  _35 = _23 * _23;
  if (_33 < _35)
    goto <bb 12>;
  else
    goto <bb 15>;

  <bb 12>:
  if (verbose_36(D) != 0)
    goto <bb 13>;
  else
    goto <bb 15>;

  <bb 13>:
  x264_log (h_20(D), 1, "frame MB size (%dx%d) > level limit (%d)\n", _22, _23, prephitmp_90);
  # DEBUG ret => 1
  _112 = l_79->dpb;
  if (dpb_27 > _112)
    goto <bb 14>;
  else
    goto <bb 18>;

  <bb 14>:
  pretmp_10 = h_20(D)->sps;
  pretmp_128 = pretmp_10->i_num_ref_frames;
  goto <bb 17>;

  <bb 15>:
  # ret_1 = PHI <0(11), 1(12)>
  # DEBUG ret => ret_1
  _38 = l_79->dpb;
  if (dpb_27 > _38)
    goto <bb 16>;
  else
    goto <bb 19>;

  <bb 16>:
  if (verbose_36(D) != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  # _118 = PHI <_38(16), _112(14)>
  # prephitmp_129 = PHI <_26(16), pretmp_128(14)>
  _39 = _118 / _25;
  x264_log (h_20(D), 1, "DPB size (%d frames, %d bytes) > level limit (%d frames, %d bytes)\n", prephitmp_129, dpb_27, _39, _118);
  # DEBUG ret => 1
  _95 = h_20(D)->param.rc.i_vbv_max_bitrate;
  _110 = l_79->bitrate;
  _109 = cbp_factor_76 * _110;
  _96 = _109 / 4;
  if (_95 > _96)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 18>:

  <bb 19>:
  # ret_2 = PHI <ret_1(15), 1(18)>
  # DEBUG ret => ret_2
  _43 = h_20(D)->param.rc.i_vbv_max_bitrate;
  _44 = l_79->bitrate;
  _45 = _44 * cbp_factor_76;
  _46 = _45 / 4;
  if (_43 > _46)
    goto <bb 20>;
  else
    goto <bb 23>;

  <bb 20>:
  if (verbose_36(D) != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  # _119 = PHI <_43(20), _95(17)>
  # _120 = PHI <_46(20), _96(17)>
  x264_log (h_20(D), 1, "VBV bitrate (%d) > level limit (%d)\n", _119, _120);
  # DEBUG ret => 1
  _107 = h_20(D)->param.rc.i_vbv_buffer_size;
  _98 = l_79->cpb;
  _99 = cbp_factor_76 * _98;
  _106 = _99 / 4;
  if (_106 < _107)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 22>:

  <bb 23>:
  # ret_3 = PHI <ret_2(19), 1(22)>
  # DEBUG ret => ret_3
  _48 = h_20(D)->param.rc.i_vbv_buffer_size;
  _49 = l_79->cpb;
  _50 = _49 * cbp_factor_76;
  _51 = _50 / 4;
  if (_48 > _51)
    goto <bb 24>;
  else
    goto <bb 27>;

  <bb 24>:
  if (verbose_36(D) != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  # _121 = PHI <_48(24), _107(21)>
  # _122 = PHI <_51(24), _106(21)>
  x264_log (h_20(D), 1, "VBV buffer (%d) > level limit (%d)\n", _121, _122);
  # DEBUG ret => 1
  _100 = h_20(D)->param.analyse.i_mv_range;
  _101 = l_79->mv_range;
  if (_100 > _101)
    goto <bb 29>;
  else
    goto <bb 31>;

  <bb 26>:

  <bb 27>:
  # ret_4 = PHI <ret_3(23), 1(26)>
  # DEBUG ret => ret_4
  _53 = h_20(D)->param.analyse.i_mv_range;
  _54 = l_79->mv_range;
  if (_53 > _54)
    goto <bb 28>;
  else
    goto <bb 32>;

  <bb 28>:
  if (verbose_36(D) != 0)
    goto <bb 29>;
  else
    goto <bb 31>;

  <bb 29>:
  # _123 = PHI <_53(28), _100(25)>
  # _124 = PHI <_54(28), _101(25)>
  x264_log (h_20(D), 1, "MV range (%d) > level limit (%d)\n", _123, _124);
  # DEBUG ret => 1
  _102 = h_20(D)->param.b_interlaced;
  _103 = l_79->frame_only;
  _89 = _103 == 0;
  _88 = (int) _89;
  if (_88 < _102)
    goto <bb 34>;
  else
    goto <bb 30>;

  <bb 30>:
  goto <bb 35>;

  <bb 31>:

  <bb 32>:
  # ret_5 = PHI <ret_4(27), 1(31)>
  # DEBUG ret => ret_5
  _56 = h_20(D)->param.b_interlaced;
  _57 = l_79->frame_only;
  _58 = _57 == 0;
  _59 = (int) _58;
  if (_56 > _59)
    goto <bb 33>;
  else
    goto <bb 35>;

  <bb 33>:
  if (verbose_36(D) != 0)
    goto <bb 34>;
  else
    goto <bb 30>;

  <bb 34>:
  # _125 = PHI <_56(33), _102(29)>
  # _126 = PHI <_59(33), _88(29)>
  x264_log (h_20(D), 1, "interlaced (%d) > level limit (%d)\n", _125, _126);

  <bb 35>:
  # ret_6 = PHI <ret_5(32), 1(34), 1(30)>
  # DEBUG ret => ret_6
  _61 = h_20(D)->param.i_fps_den;
  if (_61 > 0)
    goto <bb 36>;
  else
    goto <bb 41>;

  <bb 36>:
  _62 = (long int) mbs_24;
  _63 = h_20(D)->param.i_fps_num;
  _64 = (long int) _63;
  _65 = _62 * _64;
  _66 = (long int) _61;
  _67 = _65 / _66;
  _68 = l_79->mbps;
  _69 = (long int) _68;
  if (_67 > _69)
    goto <bb 37>;
  else
    goto <bb 41>;

  <bb 37>:
  if (verbose_36(D) != 0)
    goto <bb 38>;
  else
    goto <bb 41>;

  <bb 38>:
  _70 = (int) _67;
  x264_log (h_20(D), 1, "MB rate (%d) > level limit (%d)\n", _70, _68);
  # DEBUG ret => 1
  _83 = h_20(D)->sps;
  _115 = _83->b_direct8x8_inference;
  _81 = l_79->direct8x8;
  if (_81 > _115)
    goto <bb 40>;
  else
    goto <bb 39>;

  <bb 39>:
  goto <bb 43>;

  <bb 40>:
  x264_log (h_20(D), 1, "direct 8x8 inference (0) < level requirement (1)\n");
  goto <bb 43>;

  <bb 41>:
  # ret_7 = PHI <ret_6(35), ret_6(36), 1(37)>
  # DEBUG ret => ret_7
  _72 = h_20(D)->sps;
  _73 = _72->b_direct8x8_inference;
  _74 = l_79->direct8x8;
  if (_73 < _74)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  if (verbose_36(D) != 0)
    goto <bb 40>;
  else
    goto <bb 39>;

  <bb 43>:
  # ret_8 = PHI <ret_7(41), 1(40), 1(39)>
  # DEBUG ret => ret_8
  return ret_8;

  <bb 44>:
  # cbp_factor_76 = PHI <4(3), 5(2)>
  # DEBUG cbp_factor => cbp_factor_76
  # DEBUG l => &x264_levels
  # DEBUG l => &x264_levels
  # DEBUG cbp_factor => cbp_factor_76
  # DEBUG l => &x264_levels
  _91 = h_20(D)->param.i_level_idc;
  if (_91 != 10)
    goto <bb 45>;
  else
    goto <bb 9>;

  <bb 45>:
  goto <bb 5>;

}


