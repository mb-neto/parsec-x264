
;; Function block_residual_write_cavlc (block_residual_write_cavlc, funcdef_no=142, decl_uid=8007, cgraph_uid=142, symbol_order=194)


Analyzing loop at encoder/cavlc.c:189
encoder/cavlc.c:189:31: note: ===== analyze_loop_nest =====
encoder/cavlc.c:189:31: note: === vect_analyze_loop_form ===
split exit edge.
encoder/cavlc.c:189:31: note: === get_loop_niters ===
encoder/cavlc.c:189:31: note: not vectorized: number of iterations cannot be computed.
encoder/cavlc.c:189:31: note: bad loop form.

Analyzing loop at encoder/cavlc.c:124
encoder/cavlc.c:124:5: note: ===== analyze_loop_nest =====
encoder/cavlc.c:124:5: note: === vect_analyze_loop_form ===
encoder/cavlc.c:124:5: note: ===== analyze_loop_nest_1 =====
encoder/cavlc.c:124:5: note: === vect_analyze_loop_form ===
encoder/cavlc.c:124:5: note: === get_loop_niters ===
encoder/cavlc.c:124:5: note: not vectorized: number of iterations cannot be computed.
encoder/cavlc.c:124:5: note: bad inner-loop form.
encoder/cavlc.c:124:5: note: not vectorized: Bad inner loop.
encoder/cavlc.c:124:5: note: bad loop form.

Analyzing loop at encoder/cavlc.c:153
encoder/cavlc.c:153:26: note: ===== analyze_loop_nest =====
encoder/cavlc.c:153:26: note: === vect_analyze_loop_form ===
encoder/cavlc.c:153:26: note: === get_loop_niters ===
encoder/cavlc.c:153:26: note: not vectorized: number of iterations cannot be computed.
encoder/cavlc.c:153:26: note: bad loop form.

Analyzing loop at encoder/cavlc.c:114
encoder/cavlc.c:114:16: note: ===== analyze_loop_nest =====
encoder/cavlc.c:114:16: note: === vect_analyze_loop_form ===
encoder/cavlc.c:114:16: note: not vectorized: control flow in loop.
encoder/cavlc.c:114:16: note: bad loop form.

Analyzing loop at encoder/cavlc.c:96
encoder/cavlc.c:96:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:96:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:96:13: note: ===== analyze_loop_nest_1 =====
encoder/cavlc.c:96:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:96:13: note: not vectorized: control flow in loop.
encoder/cavlc.c:96:13: note: bad inner-loop form.
encoder/cavlc.c:96:13: note: not vectorized: Bad inner loop.
encoder/cavlc.c:96:13: note: bad loop form.

Analyzing loop at encoder/cavlc.c:98
encoder/cavlc.c:98:14: note: ===== analyze_loop_nest =====
encoder/cavlc.c:98:14: note: === vect_analyze_loop_form ===
encoder/cavlc.c:98:14: note: not vectorized: control flow in loop.
encoder/cavlc.c:98:14: note: bad loop form.
encoder/cavlc.c:67:13: note: vectorized 0 loops in function.
block_residual_write_cavlc (struct x264_t * h, struct bs_t * s, int i_ctxBlockCat, int i_idx, int16_t * l, int i_count)
{
  const int za;
  const int zb;
  int i_ret;
  int i_zl;
  int i_level_prefix;
  int i_level_code;
  int abs_level;
  int mask;
  int r;
  int nC;
  int i_suffix_length;
  int i;
  int i_last;
  int i_total_zero;
  int i_total;
  int run[16];
  int level[16];
  static const int ct_index[17] = {0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3};
  _Bool _9;
  unsigned char _38;
  int (*<T1662>) (int16_t *) _40;
  long unsigned int _45;
  long unsigned int _46;
  int16_t * _47;
  short int _48;
  int _49;
  long unsigned int _52;
  long unsigned int _53;
  int16_t * _54;
  short int _55;
  _Bool _60;
  int _63;
  int _64;
  unsigned int _65;
  _Bool _66;
  int _71;
  int _76;
  int _78;
  int _80;
  int _82;
  int _83;
  _Bool _85;
  _Bool _86;
  int _88;
  int _89;
  int _90;
  int _91;
  int _92;
  _Bool _94;
  _Bool _95;
  _Bool _96;
  int _97;
  int _98;
  int _100;
  int _101;
  int _102;
  struct x264_sps_t * _107;
  int _108;
  int _109;
  int _110;
  int _113;
  int _114;
  int _118;
  int _121;
  int _124;
  int _125;
  int _130;
  int _135;
  int _140;
  const struct vlc_t * _143;
  unsigned char _144;
  const struct vlc_t * _145;
  unsigned char _146;
  const struct vlc_t * _147;
  unsigned char _148;
  const struct vlc_t * _149;
  unsigned char _150;
  const struct vlc_t * _151;
  unsigned char _152;
  unsigned char _154;
  unsigned char _157;
  int _160;
  int _163;
  int _164;
  int _165;
  int _166;
  int _167;
  int _168;
  int _169;
  int _170;
  int _171;
  int _172;
  int _173;
  int _174;
  _Bool _180;
  _Bool _181;
  long unsigned int _183;
  long unsigned int _184;
  int _189;
  int _191;
  int _200;
  unsigned char _202;
  short int _214;
  int16_t * _216;
  unsigned int _217;
  int _218;
  int _225;
  const struct vlc_t * _226;
  _Bool _230;
  int _237;
  int _238;
  int _239;
  int _240;
  _Bool _242;
  _Bool _243;
  _Bool _244;
  int _247;
  const struct vlc_t * _249;
  unsigned char _250;
  int _251;
  int _252;
  int _253;
  _Bool _255;
  _Bool _264;
  _Bool _265;
  int _268;
  int pretmp_326;
  int prephitmp_327;
  int pretmp_329;
  int prephitmp_330;
  int pretmp_331;
  int pretmp_332;
  int prephitmp_334;
  int pretmp_335;
  int prephitmp_336;
  int pretmp_337;
  int prephitmp_338;
  int pretmp_343;
  int pretmp_344;
  int pretmp_346;
  int pretmp_347;
  int prephitmp_348;
  _Bool pretmp_349;
  _Bool pretmp_350;
  _Bool pretmp_352;
  _Bool pretmp_353;
  _Bool prephitmp_354;
  _Bool pretmp_355;
  _Bool pretmp_356;
  int pretmp_358;
  int pretmp_359;
  int prephitmp_360;
  int pretmp_361;
  int pretmp_362;
  int prephitmp_363;
  _Bool pretmp_364;
  _Bool pretmp_365;
  _Bool pretmp_367;
  _Bool pretmp_368;
  _Bool pretmp_369;
  _Bool pretmp_370;
  _Bool prephitmp_371;
  int pretmp_375;
  int pretmp_377;
  int prephitmp_378;
  int pretmp_379;
  int prephitmp_380;
  int pretmp_381;
  int prephitmp_382;
  int pretmp_383;
  int prephitmp_384;
  int pretmp_386;
  int prephitmp_387;
  _Bool pretmp_391;
  _Bool pretmp_392;
  _Bool pretmp_393;
  _Bool prephitmp_394;
  int pretmp_398;
  int prephitmp_399;
  _Bool pretmp_400;
  _Bool pretmp_402;
  _Bool pretmp_403;
  _Bool prephitmp_404;

  <bb 2>:
  # DEBUG idx => 0
  if (i_idx_29(D) <= 24)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  pretmp_383 = x264_scan8[i_idx_29(D)];
  goto <bb 10>;

  <bb 4>:
  if (i_idx_29(D) != 24)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  pretmp_375 = x264_scan8[i_idx_29(D)];
  pretmp_379 = pretmp_375 + -1;
  pretmp_381 = pretmp_375 + -8;
  goto <bb 7>;

  <bb 6>:
  pretmp_377 = x264_scan8[i_idx_29(D)];

  <bb 7>:
  # prephitmp_378 = PHI <pretmp_375(5), pretmp_377(6)>
  # prephitmp_380 = PHI <pretmp_379(5), 11(6)>
  # prephitmp_382 = PHI <pretmp_381(5), 4(6)>
  # DEBUG h => h_32(D)
  # DEBUG idx => NULL
  _154 = h_32(D)->mb.cache.non_zero_count[prephitmp_380];
  za_155 = (const int) _154;
  # DEBUG za => za_155
  _157 = h_32(D)->mb.cache.non_zero_count[prephitmp_382];
  zb_158 = (const int) _157;
  # DEBUG zb => zb_158
  i_ret_159 = za_155 + zb_158;
  # DEBUG i_ret => i_ret_159
  if (i_ret_159 <= 127)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _160 = i_ret_159 + 1;
  i_ret_161 = _160 >> 1;
  # DEBUG i_ret => i_ret_161

  <bb 9>:
  # i_ret_162 = PHI <i_ret_159(7), i_ret_161(8)>
  # DEBUG i_ret => i_ret_162
  _163 = i_ret_162 & 127;
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG i_ret => NULL
  # DEBUG zb => NULL
  # DEBUG za => NULL
  nC_35 = ct_index[_163];

  <bb 10>:
  # nC_18 = PHI <nC_35(9), 4(3)>
  # prephitmp_384 = PHI <prephitmp_378(9), pretmp_383(3)>
  # DEBUG nC => nC_18
  _38 = h_32(D)->mb.cache.non_zero_count[prephitmp_384];
  if (_38 == 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  # DEBUG D#2 => s_70(D)
  _143 = &x264_coeff_token[nC_18][0];
  _144 = MEM[(unsigned char *)_143 + 1B];
  # DEBUG D#3 => x264_coeff_token[nC_18][0]
  # DEBUG s => D#2
  _164 = MEM[(int *)s_70(D) + 36B];
  _165 = (int) _144;
  _166 = _164 + _165;
  MEM[(int *)s_70(D) + 36B] = _166;
  level ={v} {CLOBBER};
  run ={v} {CLOBBER};
  goto <bb 74>;

  <bb 12>:
  _40 = h_32(D)->quantf.coeff_last[i_ctxBlockCat_39(D)];
  i_last_43 = _40 (l_41(D));
  # DEBUG i_last => i_last_43
  # DEBUG i_sign => 0
  # DEBUG i_total => 0
  # DEBUG i_trailing => 0
  i_total_zero_44 = i_last_43 + 1;
  # DEBUG i_total_zero => i_total_zero_44
  # DEBUG idx => 0
  # DEBUG i_last => i_last_43
  if (i_last_43 >= 0)
    goto <bb 13>;
  else
    goto <bb 33>;

  <bb 13>:

  <bb 14>:
  # i_last_213 = PHI <i_last_43(13), i_last_182(23)>
  # i_total_212 = PHI <0(13), i_total_58(23)>
  # DEBUG idx => i_total_212
  # DEBUG i_last => i_last_213
  # DEBUG r => 0
  _45 = (long unsigned int) i_last_213;
  _46 = _45 * 2;
  _47 = l_41(D) + _46;
  _48 = *_47;
  _49 = (int) _48;
  level[i_total_212] = _49;
  # DEBUG r => 0
  # DEBUG i_last => i_last_213
  i_last_224 = i_last_213 + -1;
  # DEBUG i_last => i_last_224
  if (i_last_224 != -1)
    goto <bb 15>;
  else
    goto <bb 77>;

  <bb 15>:
  _183 = (long unsigned int) i_last_224;
  _184 = _183 * 2;
  _216 = l_41(D) + _184;
  _214 = *_216;
  if (_214 == 0)
    goto <bb 16>;
  else
    goto <bb 22>;

  <bb 16>:

  <bb 17>:
  # r_228 = PHI <0(16), r_56(21)>
  # i_last_236 = PHI <i_last_224(16), i_last_51(21)>
  # DEBUG r => r_228
  # DEBUG i_last => i_last_236
  r_56 = r_228 + 1;
  # DEBUG r => r_56
  # DEBUG r => r_56
  # DEBUG i_last => i_last_236
  i_last_51 = i_last_236 + -1;
  # DEBUG i_last => i_last_51
  if (i_last_51 != -1)
    goto <bb 19>;
  else
    goto <bb 18>;

  <bb 18>:
  # r_310 = PHI <r_56(17)>
  # i_total_304 = PHI <i_total_212(17)>
  goto <bb 78>;

  <bb 19>:
  _52 = (long unsigned int) i_last_51;
  _53 = _52 * 2;
  _54 = l_41(D) + _53;
  _55 = *_54;
  if (_55 == 0)
    goto <bb 21>;
  else
    goto <bb 20>;

  <bb 20>:
  # i_last_311 = PHI <i_last_51(19)>
  # r_309 = PHI <r_56(19)>
  goto <bb 22>;

  <bb 21>:
  goto <bb 17>;

  <bb 22>:
  # i_last_182 = PHI <i_last_224(15), i_last_311(20)>
  # r_229 = PHI <0(15), r_309(20)>
  i_total_58 = i_total_212 + 1;
  # DEBUG idx => i_total_58
  run[i_total_212] = r_229;
  # DEBUG idx => i_total_58
  # DEBUG i_last => i_last_182
  if (i_last_182 >= 0)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  goto <bb 14>;

  <bb 24>:
  # i_total_308 = PHI <i_total_58(22)>

  <bb 25>:
  # i_total_188 = PHI <i_total_308(24), i_total_201(78)>
  # DEBUG i_total => i_total_188
  i_total_zero_61 = i_total_zero_44 - i_total_188;
  # DEBUG i_total_zero => i_total_zero_61
  i_62 = MIN_EXPR <i_total_188, 3>;
  # DEBUG i_trailing => i_62
  # DEBUG idx => 0
  # DEBUG idx => 0
  # DEBUG i_sign => NULL
  if (i_62 > 0)
    goto <bb 27>;
  else
    goto <bb 26>;

  <bb 26>:
  pretmp_344 = i_total_188 * 4;
  pretmp_347 = i_62 + pretmp_344;
  pretmp_350 = i_total_188 > 10;
  pretmp_353 = i_62 <= 2;
  pretmp_356 = pretmp_350 & pretmp_353;
  pretmp_359 = (int) pretmp_356;
  pretmp_362 = i_total_188 + -1;
  pretmp_365 = pretmp_362 > 0;
  pretmp_369 = i_total_zero_61 > 0;
  pretmp_370 = pretmp_365 & pretmp_369;
  goto <bb 33>;

  <bb 27>:
  _218 = level[0];
  _200 = _218 + 1;
  _217 = (unsigned int) _200;
  if (_217 > 2)
    goto <bb 80>;
  else
    goto <bb 31>;

  <bb 28>:
  _63 = level[i_67];
  _64 = _63 + 1;
  _65 = (unsigned int) _64;
  if (_65 > 2)
    goto <bb 30>;
  else
    goto <bb 29>;

  <bb 29>:
  goto <bb 32>;

  <bb 30>:
  # i_307 = PHI <i_67(28)>
  pretmp_343 = i_total_188 * 4;
  pretmp_346 = i_307 + pretmp_343;
  pretmp_349 = i_total_188 > 10;
  pretmp_352 = i_307 <= 2;
  pretmp_355 = pretmp_349 & pretmp_352;
  pretmp_358 = (int) pretmp_355;
  pretmp_361 = i_total_188 + -1;
  pretmp_364 = pretmp_361 > 0;
  pretmp_367 = i_total_zero_61 > 0;
  pretmp_368 = pretmp_364 & pretmp_367;
  goto <bb 33>;

  <bb 31>:

  <bb 32>:
  # i_215 = PHI <0(31), i_67(29)>
  # DEBUG idx => i_215
  # DEBUG i_sign => D#6
  # DEBUG D#5 => _218 < 0
  # DEBUG D#4 => (unsigned int) D#5
  # DEBUG i_sign => D#6 | D#4
  i_67 = i_215 + 1;
  # DEBUG idx => i_67
  # DEBUG idx => i_67
  # DEBUG i_sign => NULL
  if (i_62 > i_67)
    goto <bb 28>;
  else
    goto <bb 79>;

  <bb 33>:
  # i_1 = PHI <i_307(30), 0(12), i_62(26)>
  # i_total_zero_261 = PHI <i_total_zero_61(30), i_total_zero_44(12), i_total_zero_61(26)>
  # i_total_270 = PHI <i_total_188(30), 0(12), i_total_188(26)>
  # prephitmp_348 = PHI <pretmp_346(30), 0(12), pretmp_347(26)>
  # prephitmp_354 = PHI <pretmp_352(30), 1(12), pretmp_353(26)>
  # prephitmp_360 = PHI <pretmp_358(30), 0(12), pretmp_359(26)>
  # prephitmp_363 = PHI <pretmp_361(30), -1(12), pretmp_362(26)>
  # prephitmp_371 = PHI <pretmp_368(30), 0(12), pretmp_370(26)>
  # DEBUG i_trailing => i_1
  # DEBUG D#156 => i_total_270 * 4
  # DEBUG D#155 => i_1 + D#156
  # DEBUG D#2 => s_70(D)
  _145 = &x264_coeff_token[nC_18][prephitmp_348];
  _146 = MEM[(unsigned char *)_145 + 1B];
  # DEBUG D#3 => x264_coeff_token[nC_18][D#155]
  # DEBUG s => D#2
  _140 = MEM[(int *)s_70(D) + 36B];
  _167 = (int) _146;
  _168 = _140 + _167;
  MEM[(int *)s_70(D) + 36B] = _168;
  # DEBUG D#154 => i_total_270 > 10
  # DEBUG D#153 => i_1 <= 2
  # DEBUG D#152 => D#154 & D#153
  # DEBUG i_suffix_length => (int) D#152
  if (i_1 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;

  <bb 34>:
  # i_259 = PHI <i_1(33), i_62(79)>
  # i_total_zero_262 = PHI <i_total_zero_261(33), i_total_zero_61(79)>
  # _264 = PHI <prephitmp_354(33), _243(79)>
  # i_suffix_length_266 = PHI <prephitmp_360(33), i_suffix_length_245(79)>
  # _268 = PHI <_168(33), _240(79)>
  # i_total_271 = PHI <i_total_270(33), i_total_188(79)>
  # prephitmp_399 = PHI <prephitmp_363(33), pretmp_398(79)>
  # prephitmp_404 = PHI <prephitmp_371(33), pretmp_403(79)>
  # DEBUG i_trailing => i_259
  # DEBUG D#2 => s_70(D)
  # DEBUG s => D#2
  # DEBUG i_suffix_length => i_suffix_length_266
  _76 = i_259 + _268;
  s_70(D)->i_bits_encoded = _76;

  <bb 35>:
  # i_36 = PHI <0(33), i_259(34), 0(80)>
  # i_260 = PHI <i_1(33), i_259(34), 0(80)>
  # i_total_zero_263 = PHI <i_total_zero_261(33), i_total_zero_262(34), i_total_zero_61(80)>
  # _265 = PHI <prephitmp_354(33), _264(34), 1(80)>
  # i_suffix_length_267 = PHI <prephitmp_360(33), i_suffix_length_266(34), i_suffix_length_258(80)>
  # i_total_272 = PHI <i_total_270(33), i_total_271(34), i_total_188(80)>
  # prephitmp_387 = PHI <prephitmp_363(33), prephitmp_399(34), pretmp_386(80)>
  # prephitmp_394 = PHI <prephitmp_371(33), prephitmp_404(34), pretmp_393(80)>
  # DEBUG i_suffix_length => i_suffix_length_267
  # DEBUG i => i_36
  if (i_36 < i_total_272)
    goto <bb 37>;
  else
    goto <bb 36>;

  <bb 36>:
  if (i_count_128(D) > i_total_272)
    goto <bb 66>;
  else
    goto <bb 68>;

  <bb 37>:

  <bb 38>:
  # i_192 = PHI <i_36(37), i_127(65)>
  # i_suffix_length_209 = PHI <i_suffix_length_267(37), i_suffix_length_10(65)>
  # DEBUG i_suffix_length => i_suffix_length_209
  # DEBUG i => i_192
  _78 = level[i_192];
  mask_79 = _78 >> 15;
  # DEBUG mask => mask_79
  _80 = _78 ^ mask_79;
  abs_level_81 = _80 - mask_79;
  # DEBUG abs_level => abs_level_81
  _82 = abs_level_81 * 2;
  _83 = _82 - mask_79;
  # DEBUG i_level_code => _83 + -2
  _85 = i_192 == i_260;
  _86 = _85 & _265;
  if (_86 != 0)
    goto <bb 40>;
  else
    goto <bb 39>;

  <bb 39>:
  i_level_code_84 = _83 + -2;
  goto <bb 41>;

  <bb 40>:
  i_level_code_87 = _83 + -4;
  # DEBUG i_level_code => i_level_code_87

  <bb 41>:
  # i_level_code_13 = PHI <i_level_code_84(39), i_level_code_87(40)>
  # DEBUG i_level_code => i_level_code_13
  _88 = i_level_code_13 >> i_suffix_length_209;
  if (_88 <= 13)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  _89 = s_70(D)->i_bits_encoded;
  _90 = _88 + 1;
  _91 = _90 + i_suffix_length_209;
  _92 = _89 + _91;
  s_70(D)->i_bits_encoded = _92;
  goto <bb 58>;

  <bb 43>:
  _94 = i_suffix_length_209 == 0;
  _95 = i_level_code_13 <= 29;
  _96 = _94 & _95;
  if (_96 != 0)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  _97 = s_70(D)->i_bits_encoded;
  _98 = _97 + 19;
  s_70(D)->i_bits_encoded = _98;
  goto <bb 59>;

  <bb 45>:
  if (i_suffix_length_209 != 0)
    goto <bb 46>;
  else
    goto <bb 76>;

  <bb 46>:
  if (_88 == 14)
    goto <bb 47>;
  else
    goto <bb 75>;

  <bb 47>:
  _100 = s_70(D)->i_bits_encoded;
  _101 = i_suffix_length_209 + 15;
  _102 = _100 + _101;
  s_70(D)->i_bits_encoded = _102;
  goto <bb 60>;

  <bb 48>:
  # i_level_code_14 = PHI <i_level_code_221(75), i_level_code_106(76)>
  # DEBUG i_level_code => i_level_code_14
  if (i_level_code_14 > 4095)
    goto <bb 50>;
  else
    goto <bb 49>;

  <bb 49>:
  pretmp_331 = s_70(D)->i_bits_encoded;
  goto <bb 57>;

  <bb 50>:
  _107 = h_32(D)->sps;
  _108 = _107->i_profile_idc;
  if (_108 > 99)
    goto <bb 51>;
  else
    goto <bb 56>;

  <bb 51>:
  # DEBUG i_level_prefix => 15
  # DEBUG i_level_code => i_level_code_14
  if (i_level_code_14 > 4096)
    goto <bb 52>;
  else
    goto <bb 49>;

  <bb 52>:

  <bb 53>:
  # i_level_code_210 = PHI <i_level_code_14(52), i_level_code_111(54)>
  # i_level_prefix_205 = PHI <15(52), i_level_prefix_112(54)>
  # _237 = PHI <4096(52), _110(54)>
  # DEBUG i_level_prefix => i_level_prefix_205
  # DEBUG i_level_code => i_level_code_210
  i_level_code_111 = i_level_code_210 - _237;
  # DEBUG i_level_code => i_level_code_111
  i_level_prefix_112 = i_level_prefix_205 + 1;
  # DEBUG i_level_prefix => i_level_prefix_112
  # DEBUG i_level_prefix => i_level_prefix_112
  # DEBUG i_level_code => i_level_code_111
  _109 = i_level_prefix_205 + -2;
  _110 = 1 << _109;
  if (_110 < i_level_code_111)
    goto <bb 54>;
  else
    goto <bb 55>;

  <bb 54>:
  goto <bb 53>;

  <bb 55>:
  # i_level_prefix_306 = PHI <i_level_prefix_112(53)>
  pretmp_332 = s_70(D)->i_bits_encoded;
  pretmp_335 = i_level_prefix_306 + 1;
  pretmp_337 = i_level_prefix_306 + -3;
  goto <bb 57>;

  <bb 56>:
  _113 = s_70(D)->i_bits_encoded;
  _114 = _113 + 1000000;
  s_70(D)->i_bits_encoded = _114;

  <bb 57>:
  # prephitmp_334 = PHI <pretmp_331(49), pretmp_332(55), _114(56)>
  # prephitmp_336 = PHI <16(49), pretmp_335(55), 16(56)>
  # prephitmp_338 = PHI <12(49), pretmp_337(55), 12(56)>
  # DEBUG i_level_prefix => NULL
  _118 = prephitmp_334 + prephitmp_336;
  _121 = _118 + prephitmp_338;
  s_70(D)->i_bits_encoded = _121;

  <bb 58>:
  if (i_suffix_length_209 == 0)
    goto <bb 59>;
  else
    goto <bb 60>;

  <bb 59>:
  # DEBUG i_suffix_length => 1
  # DEBUG i_suffix_length => 1
  if (abs_level_81 > 3)
    goto <bb 62>;
  else
    goto <bb 63>;

  <bb 60>:
  # DEBUG i_suffix_length => i_suffix_length_209
  _124 = i_suffix_length_209 + -1;
  _125 = 3 << _124;
  _181 = i_suffix_length_209 <= 5;
  _180 = abs_level_81 > _125;
  _60 = _180 & _181;
  if (_60 != 0)
    goto <bb 61>;
  else
    goto <bb 63>;

  <bb 61>:
  pretmp_329 = i_suffix_length_209 + 1;

  <bb 62>:
  # prephitmp_330 = PHI <pretmp_329(61), 2(59)>
  # DEBUG i_suffix_length => NULL

  <bb 63>:
  # i_suffix_length_10 = PHI <1(59), i_suffix_length_209(60), prephitmp_330(62)>
  # DEBUG i_suffix_length => i_suffix_length_10
  i_127 = i_192 + 1;
  # DEBUG i => i_127
  # DEBUG i_suffix_length => i_suffix_length_10
  # DEBUG i => i_127
  if (i_127 < i_total_272)
    goto <bb 65>;
  else
    goto <bb 64>;

  <bb 64>:
  goto <bb 36>;

  <bb 65>:
  goto <bb 38>;

  <bb 66>:
  if (i_idx_29(D) > 24)
    goto <bb 67>;
  else
    goto <bb 70>;

  <bb 67>:
  # DEBUG D#150 => i_total_272 + -1
  # DEBUG D#2 => s_70(D)
  _147 = &x264_total_zeros_dc[prephitmp_387][i_total_zero_263];
  _148 = MEM[(unsigned char *)_147 + 1B];
  # DEBUG D#3 => x264_total_zeros_dc[D#150][i_total_zero_263]
  # DEBUG s => D#2
  _71 = MEM[(int *)s_70(D) + 36B];
  _169 = (int) _148;
  _170 = _71 + _169;
  MEM[(int *)s_70(D) + 36B] = _170;

  <bb 68>:
  # DEBUG i => 0
  # DEBUG i_total_zero => i_total_zero_263
  if (prephitmp_394 != 0)
    goto <bb 71>;
  else
    goto <bb 69>;

  <bb 69>:
  level ={v} {CLOBBER};
  run ={v} {CLOBBER};
  goto <bb 74>;

  <bb 70>:
  # DEBUG D#151 => i_total_272 + -1
  # DEBUG D#2 => s_70(D)
  _149 = &x264_total_zeros[prephitmp_387][i_total_zero_263];
  _150 = MEM[(unsigned char *)_149 + 1B];
  # DEBUG D#3 => x264_total_zeros[D#151][i_total_zero_263]
  # DEBUG s => D#2
  _130 = MEM[(int *)s_70(D) + 36B];
  _171 = (int) _150;
  _172 = _130 + _171;
  MEM[(int *)s_70(D) + 36B] = _172;
  goto <bb 68>;

  <bb 71>:
  pretmp_326 = MEM[(int *)s_70(D) + 36B];

  <bb 72>:
  # i_total_zero_193 = PHI <i_total_zero_263(71), i_total_zero_136(73)>
  # i_211 = PHI <0(71), i_137(73)>
  # prephitmp_327 = PHI <pretmp_326(71), _174(73)>
  # DEBUG i => NULL
  # DEBUG i_total_zero => NULL
  i_zl_134 = i_total_zero_193 + -1;
  i_zl_20 = i_total_zero_193 <= 6 ? i_zl_134 : 6;
  # DEBUG i_zl => i_zl_20
  _135 = run[i_211];
  # DEBUG D#2 => s_70(D)
  _151 = &x264_run_before[i_zl_20][_135];
  _152 = MEM[(unsigned char *)_151 + 1B];
  # DEBUG D#3 => x264_run_before[i_zl_20][_135]
  # DEBUG s => D#2
  _173 = (int) _152;
  _174 = _173 + prephitmp_327;
  MEM[(int *)s_70(D) + 36B] = _174;
  i_total_zero_136 = i_total_zero_193 - _135;
  # DEBUG i_total_zero => i_total_zero_136
  i_137 = i_211 + 1;
  # DEBUG i => i_137
  # DEBUG i => i_137
  # DEBUG i_total_zero => i_total_zero_136
  _66 = i_total_zero_136 > 0;
  _9 = i_137 < prephitmp_387;
  _230 = _9 & _66;
  if (_230 != 0)
    goto <bb 73>;
  else
    goto <bb 81>;

  <bb 81>:
  goto <bb 69>;

  <bb 73>:
  goto <bb 72>;

  <bb 74>:
  return;

  <bb 75>:
  # DEBUG i_level_prefix => 15
  _191 = 15 << i_suffix_length_209;
  i_level_code_221 = i_level_code_13 - _191;
  # DEBUG i_level_code => i_level_code_221
  goto <bb 48>;

  <bb 76>:
  # DEBUG i_level_prefix => 15
  # DEBUG D#157 => i_level_code_13 + -15
  # DEBUG i_level_code => D#157
  # DEBUG i_level_prefix => 15
  # DEBUG i_level_code => D#157
  i_level_code_106 = i_level_code_13 + -30;
  # DEBUG i_level_code => i_level_code_106
  goto <bb 48>;

  <bb 77>:
  # i_total_305 = PHI <i_total_212(14)>

  <bb 78>:
  # r_8 = PHI <0(77), r_310(18)>
  # i_total_303 = PHI <i_total_305(77), i_total_304(18)>
  i_total_201 = i_total_303 + 1;
  # DEBUG idx => i_total_201
  run[i_total_303] = r_8;
  # DEBUG idx => i_total_201
  # DEBUG i_last => -1
  goto <bb 25>;

  <bb 79>:
  # DEBUG i_trailing => i_62
  _189 = i_total_188 * 4;
  _225 = i_62 + _189;
  # DEBUG D#2 => s_70(D)
  _226 = &x264_coeff_token[nC_18][_225];
  _202 = MEM[(unsigned char *)_226 + 1B];
  # DEBUG D#3 => x264_coeff_token[nC_18][_225]
  # DEBUG s => D#2
  _238 = MEM[(int *)s_70(D) + 36B];
  _239 = (int) _202;
  _240 = _238 + _239;
  _242 = i_total_188 > 10;
  _243 = i_62 <= 2;
  _244 = _242 & _243;
  i_suffix_length_245 = (int) _244;
  # DEBUG i_suffix_length => i_suffix_length_245
  pretmp_398 = i_total_188 + -1;
  pretmp_400 = pretmp_398 > 0;
  pretmp_402 = i_total_zero_61 > 0;
  pretmp_403 = pretmp_400 & pretmp_402;
  goto <bb 34>;

  <bb 80>:
  # DEBUG i_trailing => 0
  _247 = i_total_188 * 4;
  # DEBUG D#2 => s_70(D)
  _249 = &x264_coeff_token[nC_18][_247];
  _250 = MEM[(unsigned char *)_249 + 1B];
  # DEBUG D#3 => x264_coeff_token[nC_18][_247]
  # DEBUG s => D#2
  _251 = MEM[(int *)s_70(D) + 36B];
  _252 = (int) _250;
  _253 = _251 + _252;
  MEM[(int *)s_70(D) + 36B] = _253;
  _255 = i_total_188 > 10;
  i_suffix_length_258 = (int) _255;
  # DEBUG i_suffix_length => i_suffix_length_258
  pretmp_386 = i_total_188 + -1;
  pretmp_391 = pretmp_386 > 0;
  pretmp_392 = i_total_zero_61 > 0;
  pretmp_393 = pretmp_391 & pretmp_392;
  goto <bb 35>;

}



;; Function x264_cabac_mb_ref (x264_cabac_mb_ref, funcdef_no=164, decl_uid=8288, cgraph_uid=164, symbol_order=216)


Analyzing loop at encoder/cabac.c:434
encoder/cabac.c:434:10: note: ===== analyze_loop_nest =====
encoder/cabac.c:434:10: note: === vect_analyze_loop_form ===
encoder/cabac.c:434:10: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition 0 < [(int) _15 + -1, + , -1](no_overflow)
  bounds on difference of bases: 0 ... 2147483646
Applying pattern match.pd:49, generic-match.c:4249
  result:
    # of iterations (unsigned int) ((int) _15 + -1), bounded by 2147483646
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
encoder/cabac.c:434:10: note: Symbolic number of iterations is (unsigned int) _15
encoder/cabac.c:434:10: note: === vect_analyze_data_refs ===
Creating dr for cb_24(D)->state[_23]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_24(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_31][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_24(D)->state[_23]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_24(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_31][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_24(D)->state[_23]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_24(D)
	offset from base address: (ssizetype) ctx_49
	constant offset from base address: 106
	step: 0
	aligned to: 1
	base_object: cb_24(D)->state[_23]
encoder/cabac.c:434:10: note: got vectype for stmt: _30 = cb_24(D)->state[_23];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:434:10: note: not vectorized: not suitable for gather load _30 = cb_24(D)->state[_23];

encoder/cabac.c:434:10: note: bad data references.
encoder/cabac.c:421:13: note: vectorized 0 loops in function.
x264_cabac_mb_ref (struct x264_t * h, struct x264_cabac_t * cb, int i_list, int idx)
{
  _Bool cb__f8_bits_encoded_lsm.358;
  int cb__f8_bits_encoded_lsm.357;
  int i_state;
  int i_state;
  int ctx;
  int i_ref;
  const int i8;
  int _9;
  signed char _12;
  int _13;
  signed char _14;
  signed char _15;
  signed char _18;
  _Bool _19;
  signed char _20;
  int _22;
  long int _23;
  unsigned char _25;
  unsigned char _30;
  unsigned char _32;
  short unsigned int _34;
  int _35;
  int _36;
  unsigned char _38;
  short unsigned int _40;
  int _41;
  int _42;
  long int prephitmp_77;
  int _78;
  int pretmp_80;
  int prephitmp_81;
  int pretmp_82;
  int prephitmp_83;
  long int prephitmp_85;
  int pretmp_86;
  long int pretmp_88;
  long int prephitmp_89;

  <bb 2>:
  i8_8 = x264_scan8[idx_7(D)];
  # DEBUG i8 => i8_8
  _9 = i8_8 + -1;
  _12 = h_10(D)->mb.cache.ref[i_list_11(D)][_9];
  # DEBUG i_refa => (const int) _12
  _13 = i8_8 + -8;
  _14 = h_10(D)->mb.cache.ref[i_list_11(D)][_13];
  # DEBUG i_refb => (const int) _14
  _15 = h_10(D)->mb.cache.ref[i_list_11(D)][i8_8];
  i_ref_16 = (int) _15;
  # DEBUG i_ref => i_ref_16
  # DEBUG ctx => 0
  if (_12 > 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _18 = h_10(D)->mb.cache.skip[_9];
  _19 = _18 == 0;
  ctx_47 = (int) _19;

  <bb 4>:
  # ctx_2 = PHI <0(2), ctx_47(3)>
  # DEBUG ctx => ctx_2
  if (_14 > 0)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  _20 = h_10(D)->mb.cache.skip[_13];
  if (_20 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  ctx_21 = ctx_2 + 2;
  # DEBUG ctx => ctx_21

  <bb 7>:
  # ctx_17 = PHI <ctx_21(6), ctx_2(4), ctx_2(5)>
  # DEBUG ctx => ctx_17
  # DEBUG i_ref => i_ref_16
  if (i_ref_16 > 0)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  pretmp_80 = cb_24(D)->f8_bits_encoded;
  pretmp_86 = ctx_17 + 54;
  pretmp_88 = (long int) pretmp_86;
  goto <bb 13>;

  <bb 9>:
  pretmp_82 = cb_24(D)->f8_bits_encoded;

  <bb 10>:
  # i_ref_48 = PHI <i_ref_16(9), i_ref_26(11)>
  # ctx_49 = PHI <ctx_17(9), ctx_3(11)>
  # prephitmp_83 = PHI <pretmp_82(9), _36(11)>
  # DEBUG ctx => NULL
  # DEBUG i_ref => NULL
  _22 = ctx_49 + 54;
  _23 = (long int) _22;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  _30 = cb_24(D)->state[_23];
  i_state_31 = (int) _30;
  # DEBUG i_state => NULL
  _32 = x264_cabac_transition[i_state_31][1];
  cb_24(D)->state[_23] = _32;
  _34 = x264_cabac_entropy[i_state_31][1];
  _35 = (int) _34;
  _36 = _35 + prephitmp_83;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  ctx_3 = ctx_49 <= 3 ? 4 : 5;
  prephitmp_85 = ctx_49 <= 3 ? 58 : 59;
  # DEBUG ctx => ctx_3
  i_ref_26 = i_ref_48 + -1;
  # DEBUG i_ref => i_ref_26
  # DEBUG ctx => ctx_3
  # DEBUG i_ref => i_ref_26
  if (i_ref_26 > 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  goto <bb 10>;

  <bb 12>:
  # _78 = PHI <_36(10)>
  # prephitmp_77 = PHI <prephitmp_85(10)>
  # cb__f8_bits_encoded_lsm.357_70 = PHI <_36(10)>
  cb_24(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.357_70;

  <bb 13>:
  # prephitmp_81 = PHI <_78(12), pretmp_80(8)>
  # prephitmp_89 = PHI <prephitmp_77(12), pretmp_88(8)>
  # DEBUG D#232 => NULL
  # DEBUG cb => cb_24(D)
  # DEBUG i_ctx => (long int) D#232
  # DEBUG b => 0
  _25 = cb_24(D)->state[prephitmp_89];
  i_state_37 = (int) _25;
  # DEBUG i_state => i_state_37
  _38 = x264_cabac_transition[i_state_37][0];
  cb_24(D)->state[prephitmp_89] = _38;
  _40 = x264_cabac_entropy[i_state_37][0];
  _41 = (int) _40;
  _42 = _41 + prephitmp_81;
  cb_24(D)->f8_bits_encoded = _42;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  return;

}



;; Function x264_psy_trellis_init (x264_psy_trellis_init, funcdef_no=196, decl_uid=8888, cgraph_uid=196, symbol_order=265)


Analyzing loop at encoder/analyse.c:489
encoder/analyse.c:489:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:489:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
encoder/analyse.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for h_10(D)->zigzagf.scan_4x4
analyze_innermost: success.
	base_address: h_10(D)
	offset from base address: 0
	constant offset from base address: 25528
	step: 0
	aligned to: 128
	base_object: *h_10(D)
	Access function 0: 64
	Access function 1: 204160
encoder/analyse.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:489:9: note: bad data references.

Analyzing loop at encoder/analyse.c:483
encoder/analyse.c:483:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:483:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/analyse.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for h_10(D)->zigzagf.scan_8x8
analyze_innermost: success.
	base_address: h_10(D)
	offset from base address: 0
	constant offset from base address: 25520
	step: 0
	aligned to: 128
	base_object: *h_10(D)
	Access function 0: 0
	Access function 1: 204160
encoder/analyse.c:483:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:483:9: note: bad data references.
encoder/analyse.c:473:20: note: vectorized 0 loops in function.
x264_psy_trellis_init (struct x264_t * h, int do_both_dct)
{
  int i;
  uint8_t zero[512];
  int16_t dct4x4[16][4][4];
  int16_t dct8x8[4][8][8];
  unsigned int ivtmp_1;
  int _11;
  void (*<T1582>) (int16_t[8][8] *, uint8_t *, uint8_t *) _12;
  uint8_t * _13;
  void (*<T15a7>) (int16_t *, int16_t[8] *) _15;
  int16_t[8][8] * _16;
  int16_t[64] * _17;
  int _20;
  void (*<T1546>) (int16_t[4][4] *, uint8_t *, uint8_t *) _21;
  uint8_t * _22;
  void (*<T15b2>) (int16_t *, int16_t[4] *) _24;
  int16_t[4][4] * _25;
  int16_t[16] * _26;
  unsigned int ivtmp_32;
  unsigned int ivtmp_40;
  unsigned int ivtmp_41;

  <bb 2>:
  zero = {};
  if (do_both_dct_9(D) != 0)
    goto <bb 5>;
  else
    goto <bb 3>;

  <bb 3>:
  _11 = h_10(D)->mb.b_transform_8x8;
  if (_11 != 0)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:
  _21 = h_10(D)->dctf.sub16x16_dct;
  _22 = h_10(D)->mb.pic.p_fenc[0];
  _21 (&dct4x4, _22, &zero);
  # DEBUG i => 0
  # DEBUG i => 0
  goto <bb 11>;

  <bb 5>:
  _12 = h_10(D)->dctf.sub16x16_dct8;
  _13 = h_10(D)->mb.pic.p_fenc[0];
  _12 (&dct8x8, _13, &zero);
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 6>:
  # i_39 = PHI <i_19(7), 0(5)>
  # ivtmp_1 = PHI <ivtmp_32(7), 4(5)>
  # DEBUG i => i_39
  _15 = h_10(D)->zigzagf.scan_8x8;
  _16 = &dct8x8[i_39];
  _17 = &h_10(D)->mb.pic.fenc_dct8[i_39];
  _15 (_17, _16);
  i_19 = i_39 + 1;
  # DEBUG i => i_19
  # DEBUG i => i_19
  ivtmp_32 = ivtmp_1 - 1;
  if (ivtmp_32 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  if (do_both_dct_9(D) != 0)
    goto <bb 4>;
  else
    goto <bb 9>;

  <bb 9>:
  _20 = h_10(D)->mb.b_transform_8x8;
  if (_20 == 0)
    goto <bb 4>;
  else
    goto <bb 10>;

  <bb 10>:
  dct8x8 ={v} {CLOBBER};
  dct4x4 ={v} {CLOBBER};
  zero ={v} {CLOBBER};
  return;

  <bb 11>:
  # i_35 = PHI <i_28(13), 0(4)>
  # ivtmp_41 = PHI <ivtmp_40(13), 16(4)>
  # DEBUG i => i_35
  _24 = h_10(D)->zigzagf.scan_4x4;
  _25 = &dct4x4[i_35];
  _26 = &h_10(D)->mb.pic.fenc_dct4[i_35];
  _24 (_26, _25);
  i_28 = i_35 + 1;
  # DEBUG i => i_28
  # DEBUG i => i_28
  ivtmp_40 = ivtmp_41 - 1;
  if (ivtmp_40 != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:
  goto <bb 10>;

  <bb 13>:
  goto <bb 11>;

}



;; Function x264_mb_cache_fenc_satd (x264_mb_cache_fenc_satd, funcdef_no=197, decl_uid=8901, cgraph_uid=197, symbol_order=266)


Analyzing loop at encoder/analyse.c:512
encoder/analyse.c:512:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:512:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:512:5: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:512:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:512:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [1, + , 4294967295] != 0
  bounds on difference of bases: -1 ... -1
  result:
    # of iterations 1, bounded by 1
encoder/analyse.c:512:5: note: Considering outer-loop vectorization.
encoder/analyse.c:512:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [1, + , 4294967295] != 0
  bounds on difference of bases: -1 ... -1
  result:
    # of iterations 1, bounded by 1
encoder/analyse.c:512:5: note: === vect_analyze_data_refs ===
Creating dr for h_18(D)->mb.pic.p_fenc[0]
analyze_innermost: success.
	base_address: h_18(D)
	offset from base address: 0
	constant offset from base address: 15576
	step: 0
	aligned to: 128
	base_object: *h_18(D)
	Access function 0: 0
	Access function 1: 29888
	Access function 2: 7680
	Access function 3: 87040
Creating dr for h_18(D)->pixf.sa8d[3]
analyze_innermost: success.
	base_address: h_18(D)
	offset from base address: 0
	constant offset from base address: 24448
	step: 0
	aligned to: 128
	base_object: *h_18(D)
	Access function 0: 3
	Access function 1: 1792
	Access function 2: 193600
encoder/analyse.c:512:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:512:5: note: bad data references.

Analyzing loop at encoder/analyse.c:513
encoder/analyse.c:513:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:513:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:513:9: note: === get_loop_niters ===
encoder/analyse.c:513:9: note: === vect_analyze_data_refs ===
Creating dr for h_18(D)->mb.pic.p_fenc[0]
analyze_innermost: success.
	base_address: h_18(D)
	offset from base address: 0
	constant offset from base address: 15576
	step: 0
	aligned to: 128
	base_object: *h_18(D)
	Access function 0: 0
	Access function 1: 29888
	Access function 2: 7680
	Access function 3: 87040
Creating dr for h_18(D)->pixf.sa8d[3]
analyze_innermost: success.
	base_address: h_18(D)
	offset from base address: 0
	constant offset from base address: 24448
	step: 0
	aligned to: 128
	base_object: *h_18(D)
	Access function 0: 3
	Access function 1: 1792
	Access function 2: 193600
encoder/analyse.c:513:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:513:9: note: bad data references.

Analyzing loop at encoder/analyse.c:504
encoder/analyse.c:504:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:504:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:504:5: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:504:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:504:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/analyse.c:504:5: note: Considering outer-loop vectorization.
encoder/analyse.c:504:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/analyse.c:504:5: note: === vect_analyze_data_refs ===
Creating dr for h_18(D)->mb.pic.p_fenc[0]
analyze_innermost: success.
	base_address: h_18(D)
	offset from base address: 0
	constant offset from base address: 15576
	step: 0
	aligned to: 128
	base_object: *h_18(D)
	Access function 0: 0
	Access function 1: 29888
	Access function 2: 7680
	Access function 3: 87040
Creating dr for h_18(D)->pixf.satd[6]
analyze_innermost: success.
	base_address: h_18(D)
	offset from base address: 0
	constant offset from base address: 24360
	step: 0
	aligned to: 128
	base_object: *h_18(D)
	Access function 0: 6
	Access function 1: 896
	Access function 2: 193600
encoder/analyse.c:504:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:504:5: note: bad data references.

Analyzing loop at encoder/analyse.c:505
encoder/analyse.c:505:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:505:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:505:9: note: === get_loop_niters ===
encoder/analyse.c:505:9: note: === vect_analyze_data_refs ===
Creating dr for h_18(D)->mb.pic.p_fenc[0]
analyze_innermost: success.
	base_address: h_18(D)
	offset from base address: 0
	constant offset from base address: 15576
	step: 0
	aligned to: 128
	base_object: *h_18(D)
	Access function 0: 0
	Access function 1: 29888
	Access function 2: 7680
	Access function 3: 87040
Creating dr for h_18(D)->pixf.satd[6]
analyze_innermost: success.
	base_address: h_18(D)
	offset from base address: 0
	constant offset from base address: 24360
	step: 0
	aligned to: 128
	base_object: *h_18(D)
	Access function 0: 6
	Access function 1: 896
	Access function 2: 193600
encoder/analyse.c:505:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:505:9: note: bad data references.
encoder/analyse.c:495:20: note: vectorized 0 loops in function.
x264_mb_cache_fenc_satd (struct x264_t * h)
{
  int sa8d_sum;
  int satd_sum;
  int y;
  int x;
  uint8_t * fenc;
  uint8_t zero[16];
  int pretmp_12;
  int _19;
  int _20;
  int _21;
  int _23;
  uint8_t * _25;
  int _26;
  sizetype _27;
  sizetype _30;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _32;
  int _34;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _35;
  int _37;
  int _38;
  int _39;
  sizetype pretmp_45;
  uint8_t * _47;
  int _48;
  sizetype _49;
  sizetype _52;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _54;
  int _56;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _57;
  int _59;
  int _60;
  int _61;
  unsigned int ivtmp_77;
  unsigned int ivtmp_78;
  unsigned int ivtmp_84;
  unsigned int ivtmp_85;
  unsigned int ivtmp_87;
  unsigned int ivtmp_88;
  unsigned int ivtmp_90;
  unsigned int ivtmp_91;
  int pretmp_99;
  sizetype pretmp_100;

  <bb 2>:
  zero = {};
  # DEBUG satd_sum => 0
  # DEBUG sa8d_sum => 0
  _19 = h_18(D)->param.analyse.i_trellis;
  if (_19 == 2)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 3>:
  _20 = h_18(D)->mb.i_psy_trellis;
  if (_20 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  _21 = h_18(D)->param.analyse.b_transform_8x8;
  x264_psy_trellis_init (h_18(D), _21);

  <bb 5>:
  _23 = h_18(D)->mb.i_psy_rd;
  if (_23 == 0)
    goto <bb 19>;
  else
    goto <bb 10>;

  <bb 6>:

  <bb 7>:
  # x_71 = PHI <x_43(6), 0(11)>
  # satd_sum_63 = PHI <satd_sum_42(6), satd_sum_41(11)>
  # ivtmp_91 = PHI <ivtmp_90(6), 4(11)>
  # DEBUG satd_sum => satd_sum_63
  # DEBUG x => x_71
  _25 = h_18(D)->mb.pic.p_fenc[0];
  _26 = x_71 * 4;
  _27 = (sizetype) _26;
  _30 = _27 + pretmp_45;
  fenc_31 = _25 + _30;
  # DEBUG fenc => fenc_31
  _32 = h_18(D)->pixf.satd[6];
  _34 = _32 (&zero, 0, fenc_31, 16);
  _35 = h_18(D)->pixf.sad[6];
  _37 = _35 (&zero, 0, fenc_31, 16);
  _38 = _37 >> 1;
  _39 = _34 - _38;
  h_18(D)->mb.pic.fenc_satd[y_24][x_71] = _39;
  satd_sum_42 = _39 + satd_sum_63;
  # DEBUG satd_sum => satd_sum_42
  x_43 = x_71 + 1;
  # DEBUG x => x_43
  # DEBUG satd_sum => satd_sum_42
  # DEBUG x => x_43
  ivtmp_90 = ivtmp_91 - 1;
  if (ivtmp_90 != 0)
    goto <bb 6>;
  else
    goto <bb 8>;

  <bb 8>:
  # satd_sum_83 = PHI <satd_sum_42(7)>
  y_44 = y_24 + 1;
  # DEBUG y => y_44
  # DEBUG satd_sum => satd_sum_83
  # DEBUG y => y_44
  ivtmp_77 = ivtmp_78 - 1;
  if (ivtmp_77 != 0)
    goto <bb 9>;
  else
    goto <bb 16>;

  <bb 9>:
  goto <bb 11>;

  <bb 10>:

  <bb 11>:
  # y_24 = PHI <0(10), y_44(9)>
  # satd_sum_41 = PHI <0(10), satd_sum_83(9)>
  # ivtmp_78 = PHI <4(10), ivtmp_77(9)>
  # DEBUG satd_sum => satd_sum_41
  # DEBUG y => y_24
  # DEBUG satd_sum => satd_sum_41
  # DEBUG x => 0
  pretmp_12 = y_24 * 64;
  pretmp_45 = (sizetype) pretmp_12;
  goto <bb 7>;

  <bb 12>:

  <bb 13>:
  # x_46 = PHI <x_65(12), 0(17)>
  # sa8d_sum_93 = PHI <sa8d_sum_64(12), sa8d_sum_94(17)>
  # ivtmp_84 = PHI <ivtmp_88(12), 2(17)>
  # DEBUG sa8d_sum => sa8d_sum_93
  # DEBUG x => x_46
  _47 = h_18(D)->mb.pic.p_fenc[0];
  _48 = x_46 * 8;
  _49 = (sizetype) _48;
  _52 = _49 + pretmp_100;
  fenc_53 = _47 + _52;
  # DEBUG fenc => fenc_53
  _54 = h_18(D)->pixf.sa8d[3];
  _56 = _54 (&zero, 0, fenc_53, 16);
  _57 = h_18(D)->pixf.sad[3];
  _59 = _57 (&zero, 0, fenc_53, 16);
  _60 = _59 >> 2;
  _61 = _56 - _60;
  h_18(D)->mb.pic.fenc_sa8d[y_17][x_46] = _61;
  sa8d_sum_64 = _61 + sa8d_sum_93;
  # DEBUG sa8d_sum => sa8d_sum_64
  x_65 = x_46 + 1;
  # DEBUG x => x_65
  # DEBUG sa8d_sum => sa8d_sum_64
  # DEBUG x => x_65
  ivtmp_88 = ivtmp_84 - 1;
  if (ivtmp_88 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;

  <bb 14>:
  # sa8d_sum_80 = PHI <sa8d_sum_64(13)>
  y_66 = y_17 + 1;
  # DEBUG y => y_66
  # DEBUG sa8d_sum => sa8d_sum_80
  # DEBUG y => y_66
  ivtmp_85 = ivtmp_87 - 1;
  if (ivtmp_85 != 0)
    goto <bb 15>;
  else
    goto <bb 18>;

  <bb 15>:
  goto <bb 17>;

  <bb 16>:
  # satd_sum_82 = PHI <satd_sum_83(8)>

  <bb 17>:
  # y_17 = PHI <0(16), y_66(15)>
  # sa8d_sum_94 = PHI <0(16), sa8d_sum_80(15)>
  # ivtmp_87 = PHI <2(16), ivtmp_85(15)>
  # DEBUG sa8d_sum => sa8d_sum_94
  # DEBUG y => y_17
  # DEBUG sa8d_sum => sa8d_sum_94
  # DEBUG x => 0
  pretmp_99 = y_17 * 128;
  pretmp_100 = (sizetype) pretmp_99;
  goto <bb 13>;

  <bb 18>:
  # sa8d_sum_79 = PHI <sa8d_sum_80(14)>
  h_18(D)->mb.pic.fenc_satd_sum = satd_sum_82;
  h_18(D)->mb.pic.fenc_sa8d_sum = sa8d_sum_79;
  zero ={v} {CLOBBER};
  goto <bb 20>;

  <bb 19>:
  zero ={v} {CLOBBER};

  <bb 20>:
  return;

}



;; Function x264_mb_analyse_inter_p16x8 (x264_mb_analyse_inter_p16x8, funcdef_no=205, decl_uid=9132, cgraph_uid=205, symbol_order=274)


Analyzing loop at encoder/analyse.c:1244
encoder/analyse.c:1244:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1244:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1244:5: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:1244:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1244:5: note: not vectorized: control flow in loop.
encoder/analyse.c:1244:5: note: bad inner-loop form.
encoder/analyse.c:1244:5: note: not vectorized: Bad inner loop.
encoder/analyse.c:1244:5: note: bad loop form.

Analyzing loop at encoder/analyse.c:1255
encoder/analyse.c:1255:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:1255:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:1255:9: note: not vectorized: control flow in loop.
encoder/analyse.c:1255:9: note: bad loop form.
encoder/analyse.c:1234:13: note: vectorized 0 loops in function.
x264_mb_analyse_inter_p16x8 (struct x264_t * h, struct x264_mb_analysis_t * a)
{
  uint64_t val64;
  int dx;
  int dy;
  uint32_t val2;
  int dy;
  uint32_t val2;
  int dy;
  const int i_ref_cost;
  const int i_ref;
  const int ref8[2];
  struct x264_me_t * l0m;
  int j;
  int i;
  int16_t mvc[3][2];
  struct x264_me_t m;
  int iftmp.88_3;
  int _8;
  int _13;
  int _14;
  int _17;
  int _18;
  int16_t * _21;
  int _23;
  int _25;
  uint8_t * _27;
  int _28;
  sizetype _29;
  uint8_t * _30;
  int _32;
  uint8_t * _33;
  int _34;
  int _35;
  int _36;
  sizetype _37;
  uint8_t * _38;
  uint8_t * _40;
  uint8_t * _41;
  int _45;
  int _46;
  int _47;
  int16_t[2] * _51;
  unsigned int _52;
  int16_t[2] * _54;
  unsigned int _55;
  int16_t[2] * _59;
  unsigned int _60;
  uint8_t * _62;
  int _64;
  sizetype _65;
  uint8_t * _66;
  uint8_t * _68;
  uint8_t * _69;
  uint8_t * _71;
  uint8_t * _72;
  uint8_t * _74;
  uint8_t * _75;
  uint8_t * _77;
  int _79;
  sizetype _80;
  uint8_t * _81;
  uint8_t * _83;
  uint8_t * _84;
  uint16_t * _86;
  long unsigned int _87;
  uint16_t * _88;
  int _91;
  int _92;
  int _94;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _95;
  int16_t[2] * _98;
  unsigned int _99;
  int _100;
  int _101;
  int _104;
  int _105;
  int _106;
  int _113;
  int _122;
  int16_t[2] * _132;
  long unsigned int _139;
  long unsigned int _140;
  unsigned char _153;
  int _154;
  unsigned int ivtmp_155;
  unsigned int ivtmp_223;
  int pretmp_225;
  int pretmp_226;
  int pretmp_227;
  int prephitmp_228;
  int pretmp_229;
  int prephitmp_230;
  int pretmp_232;
  int pretmp_233;
  int8_t * pretmp_234;
  int pretmp_237;
  int prephitmp_238;

  <bb 2>:
  # DEBUG D#75 => &h_7(D)->mb.pic.p_fenc
  # DEBUG p_fenc => D#75
  h_7(D)->mb.i_partition = 14;
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 3>:
  # i_118 = PHI <pretmp_225(14), 0(2)>
  # ivtmp_155 = PHI <ivtmp_223(14), 2(2)>
  # DEBUG i => i_118
  l0m_12 = &a_11(D)->l0.me16x8[i_118];
  # DEBUG l0m => l0m_12
  _13 = i_118 * 2;
  _14 = a_11(D)->l0.me8x8[_13].i_ref;
  ref8[0] = _14;
  _17 = _13 + 1;
  _18 = a_11(D)->l0.me8x8[_17].i_ref;
  ref8[1] = _18;
  if (_14 == _18)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:

  <bb 5>:
  # iftmp.88_3 = PHI <1(3), 2(4)>
  # DEBUG i_ref8s => iftmp.88_3
  m.i_pixel = 1;
  _21 = a_11(D)->p_cost_mv;
  m.p_cost_mv = _21;
  _23 = h_7(D)->mb.pic.i_stride[0];
  m.i_stride[0] = _23;
  _25 = h_7(D)->mb.pic.i_stride[1];
  m.i_stride[1] = _25;
  _27 = MEM[(uint8_t * *)h_7(D) + 15576B];
  _28 = i_118 * 128;
  _29 = (sizetype) _28;
  _30 = _27 + _29;
  m.p_fenc[0] = _30;
  _33 = MEM[(uint8_t * *)h_7(D) + 15584B];
  _34 = i_118 * 8;
  _35 = _34 >> 1;
  _36 = _35 * 16;
  _37 = (sizetype) _36;
  _38 = _33 + _37;
  m.p_fenc[1] = _38;
  _40 = MEM[(uint8_t * *)h_7(D) + 15592B];
  _41 = _40 + _37;
  m.p_fenc[2] = _41;
  MEM[(struct x264_me_t *)a_11(D)].l0.me16x8[i_118].cost = 2147483647;
  # DEBUG j => 0
  # DEBUG j => 0
  pretmp_225 = i_118 + 1;
  pretmp_226 = pretmp_225 * 2;
  pretmp_232 = _13 * 8;
  pretmp_233 = pretmp_232 + 12;
  pretmp_234 = &h_7(D)->mb.cache.ref[0][pretmp_233];

  <bb 6>:
  # j_145 = PHI <j_97(12), 0(5)>
  # prephitmp_228 = PHI <pretmp_227(12), _23(5)>
  # prephitmp_230 = PHI <pretmp_229(12), _25(5)>
  # DEBUG j => j_145
  i_ref_44 = ref8[j_145];
  # DEBUG i_ref => i_ref_44
  _45 = a_11(D)->i_lambda;
  _46 = h_7(D)->sh.i_num_ref_idx_l0_active;
  _47 = _46 + -1;
  # DEBUG x => _47
  # DEBUG val => i_ref_44
  if (_47 == 1)
    goto <bb 9>;
  else
    goto <bb 7>;

  <bb 7>:
  if (_47 > 1)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _100 = i_ref_44 + 1;
  _153 = x264_ue_size_tab[_100];
  _154 = (int) _153;
  pretmp_237 = _45 * _154;

  <bb 9>:
  # prephitmp_238 = PHI <_45(6), 0(7), pretmp_237(8)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG i_ref_cost => NULL
  m.i_ref_cost = prephitmp_238;
  m.i_ref = i_ref_44;
  _51 = &a_11(D)->l0.mvc[i_ref_44][0];
  _52 = MEM[(uint32_t *)_51];
  MEM[(uint32_t *)&mvc] = _52;
  _54 = &a_11(D)->l0.mvc[i_ref_44][_17];
  _55 = MEM[(uint32_t *)_54];
  MEM[(uint32_t *)&mvc + 4B] = _55;
  # DEBUG D#248 => i_118 + 1
  _59 = &a_11(D)->l0.mvc[i_ref_44][pretmp_226];
  _60 = MEM[(uint32_t *)_59];
  MEM[(uint32_t *)&mvc + 8B] = _60;
  _62 = h_7(D)->mb.pic.p_fref[0][i_ref_44][0];
  _64 = _34 * prephitmp_228;
  _65 = (sizetype) _64;
  _66 = _62 + _65;
  m.p_fref[0] = _66;
  _68 = h_7(D)->mb.pic.p_fref[0][i_ref_44][1];
  _69 = _68 + _65;
  m.p_fref[1] = _69;
  _71 = h_7(D)->mb.pic.p_fref[0][i_ref_44][2];
  _72 = _71 + _65;
  m.p_fref[2] = _72;
  _74 = h_7(D)->mb.pic.p_fref[0][i_ref_44][3];
  _75 = _74 + _65;
  m.p_fref[3] = _75;
  _77 = h_7(D)->mb.pic.p_fref[0][i_ref_44][4];
  _79 = _35 * prephitmp_230;
  _80 = (sizetype) _79;
  _81 = _77 + _80;
  m.p_fref[4] = _81;
  _83 = h_7(D)->mb.pic.p_fref[0][i_ref_44][5];
  _84 = _83 + _80;
  m.p_fref[5] = _84;
  _86 = h_7(D)->mb.pic.p_integral[0][i_ref_44];
  _87 = _65 * 2;
  _88 = _86 + _87;
  m.integral = _88;
  # DEBUG h => h_7(D)
  # DEBUG x => 0
  # DEBUG y => _13
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#77 => (uint8_t) i_ref_44
  # DEBUG ref => D#77
  # DEBUG D#247 => _13 * 8
  # DEBUG D#246 => D#247 + 12
  # DEBUG D#245 => &h_7(D)->mb.cache.ref[0][D#246]
  # DEBUG dst => D#245
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => D#77
  _8 = i_ref_44 & 255;
  _113 = _8 * 16843009;
  val2_114 = (uint32_t) _113;
  # DEBUG val2 => val2_114
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)pretmp_234] = val2_114;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)pretmp_234 + 8B] = val2_114;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  x264_mb_predict_mv (h_7(D), 0, _34, 4, &m.mvp);
  # DEBUG h => h_7(D)
  # DEBUG m => &m
  # DEBUG mvc => &mvc
  # DEBUG i_mvc => 3
  x264_me_search_ref (h_7(D), &m, &mvc, 3, 0B);
  # DEBUG h => NULL
  # DEBUG m => NULL
  # DEBUG mvc => NULL
  # DEBUG i_mvc => NULL
  _91 = m.cost;
  _92 = _91 + prephitmp_238;
  m.cost = _92;
  _94 = MEM[(struct x264_me_t *)a_11(D)].l0.me16x8[i_118].cost;
  if (_92 < _94)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  _95 = h_7(D)->mc.memcpy_aligned;
  _95 (l0m_12, &m, 128);

  <bb 11>:
  j_97 = j_145 + 1;
  # DEBUG j => j_97
  # DEBUG j => j_97
  if (iftmp.88_3 > j_97)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  pretmp_227 = m.i_stride[0];
  pretmp_229 = m.i_stride[1];
  goto <bb 6>;

  <bb 13>:
  _98 = &MEM[(struct x264_me_t *)a_11(D)].l0.me16x8[i_118].mv;
  _99 = MEM[(uint32_t *)_98];
  # DEBUG h => h_7(D)
  # DEBUG x => 0
  # DEBUG y => _13
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _99
  _132 = &h_7(D)->mb.cache.mv[0][pretmp_233];
  # DEBUG dst => _132
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => _99
  _139 = (long unsigned int) _99;
  _140 = _139 << 32;
  val64_141 = _139 + _140;
  # DEBUG val64 => val64_141
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_132] = val64_141;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_132 + 8B] = val64_141;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_132 + 32B] = val64_141;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_132 + 40B] = val64_141;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _101 = MEM[(struct x264_me_t *)a_11(D)].l0.me16x8[i_118].i_ref;
  # DEBUG h => h_7(D)
  # DEBUG x => 0
  # DEBUG y => _13
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#76 => (uint8_t) _101
  # DEBUG ref => D#76
  # DEBUG dst => D#245
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => D#76
  _32 = _101 & 255;
  _122 = _32 * 16843009;
  val2_123 = (uint32_t) _122;
  # DEBUG val2 => val2_123
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)pretmp_234] = val2_123;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)pretmp_234 + 8B] = val2_123;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  ref8 ={v} {CLOBBER};
  # DEBUG i => D#248
  # DEBUG i => D#248
  ivtmp_223 = ivtmp_155 - 1;
  if (ivtmp_223 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:
  goto <bb 3>;

  <bb 15>:
  _104 = a_11(D)->l0.me16x8[0].cost;
  _105 = a_11(D)->l0.me16x8[1].cost;
  _106 = _104 + _105;
  a_11(D)->l0.i_cost16x8 = _106;
  m ={v} {CLOBBER};
  mvc ={v} {CLOBBER};
  return;

}



;; Function x264_mb_transform_8x8_allowed (x264_mb_transform_8x8_allowed, funcdef_no=133, decl_uid=7774, cgraph_uid=133, symbol_order=176)


Analyzing loop at ./common/macroblock.h:490
./common/macroblock.h:490:38: note: ===== analyze_loop_nest =====
./common/macroblock.h:490:38: note: === vect_analyze_loop_form ===
./common/macroblock.h:490:38: note: not vectorized: control flow in loop.
./common/macroblock.h:490:38: note: bad loop form.

Analyzing loop at ./common/macroblock.h:500
./common/macroblock.h:500:38: note: ===== analyze_loop_nest =====
./common/macroblock.h:500:38: note: === vect_analyze_loop_form ===
./common/macroblock.h:500:38: note: not vectorized: control flow in loop.
./common/macroblock.h:500:38: note: bad loop form.
./common/macroblock.h:468:19: note: vectorized 0 loops in function.
x264_mb_transform_8x8_allowed (struct x264_t * h)
{
  int i;
  int D.20131;
  int i;
  int p;
  static const uint8_t partition_tab[19] = {0, 0, 0, 0, 1, 2, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0};
  unsigned int ivtmp_1;
  int _2;
  struct x264_pps_t * _5;
  int _6;
  int _7;
  unsigned char _8;
  unsigned int ivtmp_11;
  struct x264_sps_t * _12;
  int _13;
  unsigned int ivtmp_14;
  unsigned int _15;
  unsigned int _16;
  struct x264_sps_t * _17;
  int _18;
  int _19;
  unsigned int ivtmp_21;
  int _22;

  <bb 2>:
  _5 = h_4(D)->pps;
  _6 = _5->b_transform_8x8_mode;
  if (_6 == 0)
    goto <bb 17>;
  else
    goto <bb 3>;

  <bb 3>:
  _7 = h_4(D)->mb.i_type;
  _8 = partition_tab[_7];
  p_9 = (int) _8;
  # DEBUG p => p_9
  if (p_9 <= 1)
    goto <bb 17>;
  else
    goto <bb 4>;

  <bb 4>:
  if (_7 == 7)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  _12 = h_4(D)->sps;
  _13 = _12->b_direct8x8_inference;
  goto <bb 17>;

  <bb 6>:
  if (_7 == 5)
    goto <bb 7>;
  else
    goto <bb 12>;

  <bb 7>:
  _15 = h_4(D)->param.analyse.inter;
  _16 = _15 & 32;
  if (_16 == 0)
    goto <bb 17>;
  else
    goto <bb 8>;

  <bb 8>:

  <bb 9>:
  # i_26 = PHI <0(8), i_23(11)>
  # ivtmp_14 = PHI <4(8), ivtmp_11(11)>
  # DEBUG i => i_26
  _22 = h_4(D)->mb.i_sub_partition[i_26];
  if (_22 != 3)
    goto <bb 17>;
  else
    goto <bb 10>;

  <bb 10>:
  i_23 = i_26 + 1;
  # DEBUG i => i_23
  # DEBUG i => i_23
  ivtmp_11 = ivtmp_14 - 1;
  if (ivtmp_11 != 0)
    goto <bb 11>;
  else
    goto <bb 17>;

  <bb 11>:
  goto <bb 9>;

  <bb 12>:
  _17 = h_4(D)->sps;
  _18 = _17->b_direct8x8_inference;
  if (_18 != 0)
    goto <bb 17>;
  else
    goto <bb 13>;

  <bb 13>:

  <bb 14>:
  # i_29 = PHI <0(13), i_20(16)>
  # ivtmp_1 = PHI <4(13), ivtmp_21(16)>
  # DEBUG i => i_29
  _19 = h_4(D)->mb.i_sub_partition[i_29];
  if (_19 == 12)
    goto <bb 17>;
  else
    goto <bb 15>;

  <bb 15>:
  i_20 = i_29 + 1;
  # DEBUG i => i_20
  # DEBUG i => i_20
  ivtmp_21 = ivtmp_1 - 1;
  if (ivtmp_21 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  goto <bb 14>;

  <bb 17>:
  # _2 = PHI <0(9), p_9(3), _13(5), 1(10), 0(2), 0(14), 1(7), 1(15), 1(12)>
  return _2;

}



;; Function x264_mb_analyse_intra (x264_mb_analyse_intra, funcdef_no=199, decl_uid=8945, cgraph_uid=199, symbol_order=268)


Analyzing loop at encoder/analyse.c:793
encoder/analyse.c:793:15: note: ===== analyze_loop_nest =====
encoder/analyse.c:793:15: note: === vect_analyze_loop_form ===
encoder/analyse.c:793:15: note: not vectorized: multiple nested loops.
encoder/analyse.c:793:15: note: bad loop form.

Analyzing loop at encoder/analyse.c:776
encoder/analyse.c:776:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:776:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:776:13: note: not vectorized: control flow in loop.
encoder/analyse.c:776:13: note: bad loop form.

Analyzing loop at encoder/analyse.c:768
encoder/analyse.c:768:17: note: ===== analyze_loop_nest =====
encoder/analyse.c:768:17: note: === vect_analyze_loop_form ===
encoder/analyse.c:768:17: note: not vectorized: control flow in loop.
encoder/analyse.c:768:17: note: bad loop form.

Analyzing loop at encoder/analyse.c:708
encoder/analyse.c:708:15: note: ===== analyze_loop_nest =====
encoder/analyse.c:708:15: note: === vect_analyze_loop_form ===
encoder/analyse.c:708:15: note: not vectorized: multiple nested loops.
encoder/analyse.c:708:15: note: bad loop form.

Analyzing loop at encoder/analyse.c:690
encoder/analyse.c:690:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:690:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:690:13: note: not vectorized: control flow in loop.
encoder/analyse.c:690:13: note: bad loop form.

Analyzing loop at encoder/analyse.c:680
encoder/analyse.c:680:17: note: ===== analyze_loop_nest =====
encoder/analyse.c:680:17: note: === vect_analyze_loop_form ===
encoder/analyse.c:680:17: note: not vectorized: control flow in loop.
encoder/analyse.c:680:17: note: bad loop form.

Analyzing loop at encoder/analyse.c:619
encoder/analyse.c:619:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:619:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:619:9: note: not vectorized: control flow in loop.
encoder/analyse.c:619:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:627
encoder/analyse.c:627:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:627:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:627:9: note: not vectorized: control flow in loop.
encoder/analyse.c:627:9: note: bad loop form.
encoder/analyse.c:597:13: note: vectorized 0 loops in function.
x264_mb_analyse_intra (struct x264_t * h, struct x264_mb_analysis_t * a, int i_satd_inter)
{
  const int ma;
  const int mb;
  const int m;
  const int ma;
  const int mb;
  const int m;
  int8_t * cache;
  int i_mode;
  int satd[9];
  int i_best;
  uint8_t * p_dst_by;
  uint8_t * p_src_by;
  int i_satd_thresh;
  int i_cost;
  int i_mode;
  int satd[9];
  int i_best;
  uint8_t * p_dst_by;
  uint8_t * p_src_by;
  int y;
  int x;
  int i_cost;
  int i_satd_thresh;
  int (*x264_pixel_cmp_t) (uint8_t *, int, uint8_t *, int) sa8d;
  uint8_t edge[33];
  int i_mode;
  int i_satd;
  int b_merged_satd;
  int predict_mode[9];
  int i_max;
  int idx;
  int i;
  uint8_t * p_dst;
  uint8_t * p_src;
  unsigned int iftmp.109_23;
  int iftmp.116_28;
  int iftmp.117_29;
  int iftmp.119_31;
  int _59;
  unsigned int iftmp.109_60;
  unsigned int iftmp.109_61;
  void (*<T1429>) (uint8_t *, uint8_t *, int *) _64;
  int _65;
  int i_max.111_69;
  void (*<T1429>) (uint8_t *, uint8_t *, int *) _70;
  int[7] * _72;
  void (*<T1367>) (uint8_t *) _74;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _76;
  int _78;
  unsigned int i.112_81;
  int _84;
  int _85;
  int _86;
  int _89;
  int i_max.111_93;
  int _95;
  void (*<T1367>) (uint8_t *) _97;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _99;
  int _101;
  int _102;
  unsigned char _103;
  unsigned int _104;
  int _105;
  int _107;
  int _109;
  int _114;
  int _115;
  int _116;
  int _117;
  int _118;
  int _120;
  int _121;
  int _123;
  unsigned int _124;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _125;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _126;
  int _130;
  int _131;
  void (*<T1429>) (uint8_t *, uint8_t *, int *) _133;
  int _137;
  int _142;
  sizetype _143;
  int _144;
  sizetype _145;
  sizetype _146;
  int _148;
  sizetype _149;
  sizetype _150;
  int _152;
  int _153;
  unsigned int _154;
  unsigned int _156;
  int _157;
  int i_max.111_159;
  void (*<T1429>) (uint8_t *, uint8_t *, int *) _160;
  int _162;
  int _163;
  int _164;
  int _165;
  int _167;
  int i_max.111_174;
  int _176;
  void (*<T136f>) (uint8_t *, uint8_t *) _178;
  int _181;
  int _182;
  int _183;
  signed char _184;
  int _185;
  int _186;
  _Bool _192;
  _Bool _193;
  _Bool _194;
  int _195;
  void (*<T136f>) (uint8_t *, uint8_t *) _196;
  int _198;
  int _200;
  int _201;
  int _202;
  unsigned int _203;
  int _206;
  void (*<T1462>) (uint8_t *, int, uint8_t *, int, int) _207;
  uint8_t[256] * _208;
  int _210;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _211;
  int16_t[4][64] * _212;
  int16_t[3][64] * _213;
  int _216;
  int _217;
  int _219;
  int _220;
  int _221;
  int _222;
  int _223;
  unsigned int _226;
  int _227;
  int _228;
  int _229;
  void (*<T1429>) (uint8_t *, uint8_t *, int *) _231;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _232;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _233;
  int _234;
  int _235;
  int _236;
  int _237;
  int _239;
  int _241;
  int _242;
  unsigned char _244;
  sizetype _245;
  short unsigned int _247;
  sizetype _248;
  int _250;
  unsigned int _251;
  unsigned int _253;
  unsigned int _254;
  unsigned char _255;
  unsigned int _256;
  unsigned int _257;
  int i_max.111_259;
  void (*<T1429>) (uint8_t *, uint8_t *, int *) _260;
  int _262;
  int _263;
  int _264;
  int _265;
  int _267;
  int i_max.111_273;
  int _275;
  void (*<T1367>) (uint8_t *) _277;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _279;
  int _281;
  int _282;
  int _283;
  signed char _284;
  int _285;
  int _286;
  _Bool _291;
  _Bool _292;
  _Bool _293;
  int _294;
  void (*<T1367>) (uint8_t *) _295;
  int _297;
  int _299;
  signed char _300;
  int _304;
  void (*<T1462>) (uint8_t *, int, uint8_t *, int, int) _305;
  uint8_t[256] * _306;
  int _308;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _309;
  int16_t[24][16] * _310;
  int16_t[15][16] * _311;
  signed char _318;
  unsigned char _319;
  int _320;
  unsigned int _321;
  unsigned char _322;
  int _323;
  int _324;
  int _325;
  signed char _326;
  int _328;
  signed char _329;
  int _331;
  signed char _332;
  int _333;
  signed char _334;
  signed char _335;
  int _337;
  int _338;
  int _339;
  signed char _340;
  int _342;
  signed char _343;
  int _345;
  signed char _346;
  int _347;
  signed char _348;
  signed char _349;
  int _351;
  _Bool _359;
  _Bool _361;
  _Bool _362;
  unsigned int _374;
  unsigned int _389;
  unsigned int ivtmp_472;
  unsigned int ivtmp_474;
  int pretmp_492;
  int pretmp_493;
  int prephitmp_494;
  int pretmp_495;
  unsigned int ivtmp_507;
  int pretmp_513;
  int pretmp_514;
  int prephitmp_515;
  int pretmp_516;
  int pretmp_518;
  int prephitmp_519;
  int pretmp_521;
  unsigned int ivtmp_523;
  unsigned int ivtmp_525;
  unsigned int ivtmp_526;

  <bb 2>:
  _59 = h_58(D)->sh.i_type;
  iftmp.109_60 = h_58(D)->param.analyse.intra;
  iftmp.109_61 = h_58(D)->param.analyse.inter;
  if (_59 == 2)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:

  <bb 4>:
  # iftmp.109_23 = PHI <iftmp.109_60(2), iftmp.109_61(3)>
  # DEBUG flags => iftmp.109_23
  p_src_62 = h_58(D)->mb.pic.p_fenc[0];
  # DEBUG p_src => p_src_62
  p_dst_63 = h_58(D)->mb.pic.p_fdec[0];
  # DEBUG p_dst => p_dst_63
  _64 = h_58(D)->pixf.intra_mbcmp_x3_16x16;
  if (_64 != 0B)
    goto <bb 5>;
  else
    goto <bb 114>;

  <bb 5>:
  _65 = h_58(D)->mb.b_lossless;
  if (_65 == 0)
    goto <bb 115>;
  else
    goto <bb 114>;

  <bb 6>:
  # prephitmp_519 = PHI <i_max.111_69(115), pretmp_518(114)>
  # DEBUG i => 0
  if (prephitmp_519 > 0)
    goto <bb 14>;
  else
    goto <bb 7>;

  <bb 7>:
  _114 = h_58(D)->sh.i_type;
  if (_114 == 1)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 8>:
  _70 = h_58(D)->pixf.intra_mbcmp_x3_16x16;
  _72 = &a_71(D)->i_satd_i16x16_dir;
  _70 (p_src_62, p_dst_63, _72);
  _74 = h_58(D)->predict_16x16[3];
  _74 (p_dst_63);
  _76 = h_58(D)->pixf.mbcmp[0];
  _78 = _76 (p_dst_63, 32, p_src_62, 16);
  a_71(D)->i_satd_i16x16_dir[3] = _78;
  # DEBUG i => 0
  # DEBUG i => 0
  pretmp_521 = a_71(D)->i_lambda;

  <bb 9>:
  # i_371 = PHI <i_92(13), 0(8)>
  # ivtmp_526 = PHI <ivtmp_507(13), 4(8)>
  # DEBUG i => i_371
  i.112_81 = (unsigned int) i_371;
  # DEBUG val => i.112_81
  _203 = i.112_81 + 1;
  _319 = x264_ue_size_tab[_203];
  _320 = (int) _319;
  # DEBUG val => NULL
  _84 = _320 * pretmp_521;
  _85 = a_71(D)->i_satd_i16x16_dir[i_371];
  _86 = _84 + _85;
  a_71(D)->i_satd_i16x16_dir[i_371] = _86;
  # DEBUG cost => _86
  _89 = a_71(D)->i_satd_i16x16;
  if (_86 < _89)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  a_71(D)->i_satd_i16x16 = _86;
  a_71(D)->i_predict16x16 = i_371;

  <bb 11>:
  i_92 = i_371 + 1;
  # DEBUG i => i_92
  # DEBUG i => i_92
  ivtmp_507 = ivtmp_526 - 1;
  if (ivtmp_507 != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:
  goto <bb 7>;

  <bb 13>:
  goto <bb 9>;

  <bb 14>:

  <bb 15>:
  # i_434 = PHI <0(14), i_113(21)>
  # DEBUG i => i_434
  i_mode_94 = predict_mode[i_434];
  # DEBUG i_mode => i_mode_94
  _95 = h_58(D)->mb.b_lossless;
  if (_95 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  x264_predict_lossless_16x16 (h_58(D), i_mode_94);
  goto <bb 18>;

  <bb 17>:
  _97 = h_58(D)->predict_16x16[i_mode_94];
  _97 (p_dst_63);

  <bb 18>:
  _99 = h_58(D)->pixf.mbcmp[0];
  _101 = _99 (p_dst_63, 32, p_src_62, 16);
  _102 = a_71(D)->i_lambda;
  _103 = x264_mb_pred_mode16x16_fix[i_mode_94];
  _104 = (unsigned int) _103;
  # DEBUG val => _104
  _321 = _104 + 1;
  _322 = x264_ue_size_tab[_321];
  _323 = (int) _322;
  # DEBUG val => NULL
  _107 = _102 * _323;
  i_satd_108 = _101 + _107;
  # DEBUG i_satd => i_satd_108
  _109 = a_71(D)->i_satd_i16x16;
  if (i_satd_108 < _109)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:
  a_71(D)->i_satd_i16x16 = i_satd_108;
  a_71(D)->i_predict16x16 = i_mode_94;

  <bb 20>:
  a_71(D)->i_satd_i16x16_dir[i_mode_94] = i_satd_108;
  i_113 = i_434 + 1;
  # DEBUG i => i_113
  # DEBUG i => i_113
  i_max.111_93 = i_max;
  if (i_max.111_93 > i_113)
    goto <bb 21>;
  else
    goto <bb 7>;

  <bb 21>:
  goto <bb 15>;

  <bb 22>:
  _115 = a_71(D)->i_satd_i16x16;
  _116 = a_71(D)->i_lambda;
  _117 = _116 * 9;
  _118 = _115 + _117;
  a_71(D)->i_satd_i16x16 = _118;

  <bb 23>:
  _120 = a_71(D)->b_fast_intra;
  if (_120 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  _121 = a_71(D)->i_satd_i16x16;
  _123 = i_satd_inter_122(D) * 2;
  if (_121 > _123)
    goto <bb 112>;
  else
    goto <bb 25>;

  <bb 25>:
  _124 = iftmp.109_23 & 2;
  if (_124 != 0)
    goto <bb 26>;
  else
    goto <bb 69>;

  <bb 26>:
  _125 = h_58(D)->pixf.mbcmp[0];
  _126 = h_58(D)->pixf.satd[0];
  if (_125 == _126)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  sa8d_127 = h_58(D)->pixf.sa8d[3];
  goto <bb 29>;

  <bb 28>:
  sa8d_128 = h_58(D)->pixf.mbcmp[3];

  <bb 29>:
  # sa8d_25 = PHI <sa8d_127(27), sa8d_128(28)>
  # DEBUG sa8d => sa8d_25
  _130 = a_71(D)->i_mbrd;
  if (_130 == 0)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  _131 = a_71(D)->i_satd_i16x16;
  i_satd_thresh_132 = MIN_EXPR <i_satd_inter_122(D), _131>;

  <bb 31>:
  # i_satd_thresh_26 = PHI <i_satd_thresh_132(30), 268435456(29)>
  # DEBUG i_satd_thresh => i_satd_thresh_26
  # DEBUG i_cost => 0
  _133 = h_58(D)->pixf.intra_sa8d_x3_8x8;
  _361 = _125 == _126;
  _362 = _133 != 0B;
  _359 = _361 & _362;
  # DEBUG b_merged_satd => (int) _359
  if (_114 == 1)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  _137 = a_71(D)->i_lambda;
  i_cost_138 = _137 * 9;
  # DEBUG i_cost => i_cost_138

  <bb 33>:
  # i_cost_83 = PHI <0(31), i_cost_138(32)>

  <bb 34>:
  # idx_7 = PHI <0(33), idx_204(58)>
  # i_cost_10 = PHI <i_cost_83(33), i_cost_191(58)>
  # DEBUG i_cost => i_cost_10
  # DEBUG idx => idx_7
  x_140 = idx_7 & 1;
  # DEBUG x => x_140
  y_141 = idx_7 >> 1;
  # DEBUG y => y_141
  _142 = x_140 * 8;
  _143 = (sizetype) _142;
  _144 = y_141 * 128;
  _145 = (sizetype) _144;
  _146 = _143 + _145;
  p_src_by_147 = p_src_62 + _146;
  # DEBUG p_src_by => p_src_by_147
  _148 = y_141 * 256;
  _149 = (sizetype) _148;
  _150 = _143 + _149;
  p_dst_by_151 = p_dst_63 + _150;
  # DEBUG p_dst_by => p_dst_by_151
  # DEBUG i_best => 268435456
  _152 = idx_7 * 4;
  # DEBUG h => h_58(D)
  # DEBUG idx => _152
  _324 = x264_scan8[_152];
  _325 = _324 + -1;
  _326 = h_58(D)->mb.cache.intra4x4_pred_mode[_325];
  ma_327 = (const int) _326;
  # DEBUG ma => ma_327
  _328 = _324 + -8;
  _329 = h_58(D)->mb.cache.intra4x4_pred_mode[_328];
  mb_330 = (const int) _329;
  # DEBUG mb => mb_330
  _331 = mb_330 + 1;
  _332 = x264_mb_pred_mode4x4_fix[_331];
  _333 = ma_327 + 1;
  _334 = x264_mb_pred_mode4x4_fix[_333];
  _335 = MIN_EXPR <_332, _334>;
  m_336 = (const int) _335;
  # DEBUG m => m_336
  if (m_336 < 0)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 35>:

  <bb 36>:
  # _337 = PHI <2(35), m_336(34)>
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG i_pred_mode => NULL
  _154 = h_58(D)->mb.i_neighbour8[idx_7];
  predict_4x4_mode_available (_154, &predict_mode, &i_max);
  _156 = h_58(D)->mb.i_neighbour8[idx_7];
  _157 = (int) _156;
  x264_predict_8x8_filter (p_dst_by_151, &edge, _157, 15);
  if (_359 != 0)
    goto <bb 38>;
  else
    goto <bb 37>;

  <bb 37>:
  pretmp_513 = i_max;
  goto <bb 45>;

  <bb 38>:
  i_max.111_159 = i_max;
  if (i_max.111_159 == 9)
    goto <bb 39>;
  else
    goto <bb 45>;

  <bb 39>:
  _160 = h_58(D)->pixf.intra_sa8d_x3_8x8;
  _160 (p_src_by_147, &edge, &satd);
  _162 = satd[_337];
  _163 = a_71(D)->i_lambda;
  _164 = _163 * -3;
  _165 = _162 + _164;
  satd[_337] = _165;
  # DEBUG i => 2
  # DEBUG i_best => 268435456
  # DEBUG i => 2
  pretmp_516 = _163 * 4;

  <bb 40>:
  # i_407 = PHI <i_172(43), 2(39)>
  # i_best_433 = PHI <i_best_12(43), 268435456(39)>
  # ivtmp_523 = PHI <ivtmp_525(43), 3(39)>
  # DEBUG i_best => i_best_433
  # DEBUG i => i_407
  _167 = satd[i_407];
  i_best_169 = _167 + pretmp_516;
  a_71(D)->i_satd_i8x8_dir[i_407][idx_7] = i_best_169;
  # DEBUG cost => i_best_169
  if (i_best_169 < i_best_433)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  # DEBUG i_best => i_best_169
  a_71(D)->i_predict8x8[idx_7] = i_407;

  <bb 42>:
  # i_best_12 = PHI <i_best_433(40), i_best_169(41)>
  # DEBUG i_best => i_best_12
  i_172 = i_407 + -1;
  # DEBUG i => i_172
  # DEBUG i_best => i_best_12
  # DEBUG i => i_172
  ivtmp_525 = ivtmp_523 - 1;
  if (ivtmp_525 != 0)
    goto <bb 43>;
  else
    goto <bb 44>;

  <bb 43>:
  goto <bb 40>;

  <bb 44>:
  # i_best_469 = PHI <i_best_12(42)>
  # DEBUG i => 3
  satd ={v} {CLOBBER};
  pretmp_514 = i_max;

  <bb 45>:
  # i_139 = PHI <0(37), 3(44), 0(38)>
  # i_best_9 = PHI <268435456(37), i_best_469(44), 268435456(38)>
  # prephitmp_515 = PHI <pretmp_513(37), pretmp_514(44), i_max.111_159(38)>
  # DEBUG i_best => i_best_9
  # DEBUG i => i_139
  if (i_139 < prephitmp_515)
    goto <bb 46>;
  else
    goto <bb 57>;

  <bb 46>:

  <bb 47>:
  # i_372 = PHI <i_139(46), i_190(56)>
  # i_best_435 = PHI <i_best_9(46), i_best_14(56)>
  # DEBUG i_best => i_best_435
  # DEBUG i => i_372
  i_mode_175 = predict_mode[i_372];
  # DEBUG i_mode => i_mode_175
  _176 = h_58(D)->mb.b_lossless;
  if (_176 != 0)
    goto <bb 48>;
  else
    goto <bb 49>;

  <bb 48>:
  x264_predict_lossless_8x8 (h_58(D), p_dst_by_151, idx_7, i_mode_175, &edge);
  goto <bb 50>;

  <bb 49>:
  _178 = h_58(D)->predict_8x8[i_mode_175];
  _178 (p_dst_by_151, &edge);

  <bb 50>:
  _181 = sa8d_25 (p_dst_by_151, 32, p_src_by_147, 16);
  _182 = a_71(D)->i_lambda;
  _183 = i_mode_175 + 1;
  _184 = x264_mb_pred_mode4x4_fix[_183];
  _185 = (int) _184;
  if (_185 == _337)
    goto <bb 52>;
  else
    goto <bb 51>;

  <bb 51>:

  <bb 52>:
  # iftmp.116_28 = PHI <1(50), 4(51)>
  _186 = iftmp.116_28 * _182;
  i_best_187 = _181 + _186;
  # DEBUG i_satd => i_best_187
  if (i_best_187 < i_best_435)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  # DEBUG i_best => i_best_187
  a_71(D)->i_predict8x8[idx_7] = i_mode_175;

  <bb 54>:
  # i_best_14 = PHI <i_best_435(52), i_best_187(53)>
  # DEBUG i_best => i_best_14
  a_71(D)->i_satd_i8x8_dir[i_mode_175][idx_7] = i_best_187;
  i_190 = i_372 + 1;
  # DEBUG i => i_190
  # DEBUG i_best => i_best_14
  # DEBUG i => i_190
  i_max.111_174 = i_max;
  if (i_max.111_174 > i_190)
    goto <bb 56>;
  else
    goto <bb 55>;

  <bb 55>:
  # i_best_468 = PHI <i_best_14(54)>
  goto <bb 57>;

  <bb 56>:
  goto <bb 47>;

  <bb 57>:
  # i_best_380 = PHI <i_best_468(55), i_best_9(45)>
  i_cost_191 = i_cost_10 + i_best_380;
  # DEBUG i_cost => i_cost_191
  _192 = idx_7 == 3;
  _193 = i_satd_thresh_26 < i_cost_191;
  _194 = _192 | _193;
  if (_194 != 0)
    goto <bb 59>;
  else
    goto <bb 58>;

  <bb 58>:
  _195 = a_71(D)->i_predict8x8[idx_7];
  _196 = h_58(D)->predict_8x8[_195];
  _196 (p_dst_by_151, &edge);
  _198 = a_71(D)->i_qp;
  x264_mb_encode_i8x8 (h_58(D), idx_7, _198);
  _200 = a_71(D)->i_predict8x8[idx_7];
  _201 = y_141 * 2;
  _202 = x_140 * 2;
  # DEBUG h => h_58(D)
  # DEBUG x => _202
  # DEBUG y => _201
  # DEBUG i_mode => _200
  _250 = _202 + 12;
  _153 = _201 * 8;
  _105 = _153 + _250;
  cache_82 = &h_58(D)->mb.cache.intra4x4_pred_mode[_105];
  # DEBUG cache => cache_82
  _318 = (signed char) _200;
  MEM[(int8_t *)cache_82 + 9B] = _318;
  MEM[(int8_t *)cache_82 + 8B] = _318;
  MEM[(int8_t *)cache_82 + 1B] = _318;
  MEM[(int8_t *)h_58(D)].mb.cache.intra4x4_pred_mode[_105] = _318;
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG i_mode => NULL
  # DEBUG cache => NULL
  idx_204 = idx_7 + 1;
  # DEBUG idx => idx_204
  goto <bb 34>;

  <bb 59>:
  # idx_471 = PHI <idx_7(57)>
  # i_cost_465 = PHI <i_cost_191(57)>
  if (idx_471 == 3)
    goto <bb 60>;
  else
    goto <bb 63>;

  <bb 60>:
  a_71(D)->i_satd_i8x8 = i_cost_465;
  _206 = h_58(D)->mb.i_skip_intra;
  if (_206 != 0)
    goto <bb 61>;
  else
    goto <bb 64>;

  <bb 61>:
  _207 = h_58(D)->mc.copy[0];
  _208 = &h_58(D)->mb.pic.i8x8_fdec_buf;
  _207 (_208, 16, p_dst_63, 32, 16);
  _210 = h_58(D)->mb.i_skip_intra;
  if (_210 == 2)
    goto <bb 62>;
  else
    goto <bb 64>;

  <bb 62>:
  _211 = h_58(D)->mc.memcpy_aligned;
  _212 = &h_58(D)->dct.luma8x8;
  _213 = &h_58(D)->mb.pic.i8x8_dct_buf;
  _211 (_213, _212, 384);
  goto <bb 64>;

  <bb 63>:
  a_71(D)->i_satd_i8x8 = 268435456;
  _216 = i_cost_465 * 4;
  _217 = idx_471 + 1;
  i_cost_218 = _216 / _217;
  # DEBUG i_cost => i_cost_218

  <bb 64>:
  # i_cost_11 = PHI <i_cost_465(61), i_cost_218(63), i_cost_465(60), i_cost_465(62)>
  # DEBUG i_cost => i_cost_11
  _219 = a_71(D)->i_satd_i16x16;
  _220 = MIN_EXPR <i_cost_11, _219>;
  _221 = a_71(D)->i_mbrd;
  if (_221 != 0)
    goto <bb 66>;
  else
    goto <bb 65>;

  <bb 65>:

  <bb 66>:
  # iftmp.117_29 = PHI <6(64), 5(65)>
  _222 = iftmp.117_29 * i_satd_inter_122(D);
  _223 = _222 / 4;
  if (_220 > _223)
    goto <bb 68>;
  else
    goto <bb 67>;

  <bb 67>:
  edge ={v} {CLOBBER};
  goto <bb 69>;

  <bb 68>:
  edge ={v} {CLOBBER};
  goto <bb 112>;

  <bb 69>:
  _226 = iftmp.109_23 & 1;
  if (_226 != 0)
    goto <bb 71>;
  else
    goto <bb 70>;

  <bb 70>:
  goto <bb 111>;

  <bb 71>:
  _227 = a_71(D)->i_satd_i8x8;
  _228 = a_71(D)->i_satd_i16x16;
  _229 = MIN_EXPR <_227, _228>;
  i_satd_thresh_230 = MIN_EXPR <i_satd_inter_122(D), _229>;
  # DEBUG i_satd_thresh => i_satd_thresh_230
  _231 = h_58(D)->pixf.intra_satd_x3_4x4;
  if (_231 != 0B)
    goto <bb 72>;
  else
    goto <bb 74>;

  <bb 72>:
  _232 = h_58(D)->pixf.mbcmp[0];
  _233 = h_58(D)->pixf.satd[0];
  if (_232 == _233)
    goto <bb 74>;
  else
    goto <bb 73>;

  <bb 73>:

  <bb 74>:
  # b_merged_satd_30 = PHI <1(72), 0(73), 0(71)>
  # DEBUG b_merged_satd => b_merged_satd_30
  _234 = a_71(D)->i_mbrd;
  if (_234 != 0)
    goto <bb 75>;
  else
    goto <bb 76>;

  <bb 75>:
  _235 = a_71(D)->b_fast_intra;
  _236 = 10 - _235;
  _237 = i_satd_thresh_230 * _236;
  i_satd_thresh_238 = _237 / 8;
  # DEBUG i_satd_thresh => i_satd_thresh_238

  <bb 76>:
  # i_satd_thresh_18 = PHI <i_satd_thresh_230(74), i_satd_thresh_238(75)>
  # DEBUG i_satd_thresh => i_satd_thresh_18
  _239 = a_71(D)->i_lambda;
  i_cost_240 = _239 * 24;
  # DEBUG i_cost => i_cost_240
  _241 = h_58(D)->sh.i_type;
  if (_241 == 1)
    goto <bb 77>;
  else
    goto <bb 78>;

  <bb 77>:
  _242 = _239 * 9;
  i_cost_243 = i_cost_240 + _242;
  # DEBUG i_cost => i_cost_243

  <bb 78>:
  # i_cost_129 = PHI <i_cost_240(76), i_cost_243(77)>

  <bb 79>:
  # idx_8 = PHI <0(78), idx_302(105)>
  # i_cost_17 = PHI <i_cost_129(78), i_cost_290(105)>
  # DEBUG i_cost => i_cost_17
  # DEBUG idx => idx_8
  _244 = block_idx_xy_fenc[idx_8];
  _245 = (sizetype) _244;
  p_src_by_246 = p_src_62 + _245;
  # DEBUG p_src_by => p_src_by_246
  _247 = block_idx_xy_fdec[idx_8];
  _248 = (sizetype) _247;
  p_dst_by_249 = p_dst_63 + _248;
  # DEBUG p_dst_by => p_dst_by_249
  # DEBUG i_best => 268435456
  # DEBUG h => h_58(D)
  # DEBUG idx => idx_8
  _338 = x264_scan8[idx_8];
  _339 = _338 + -1;
  _340 = h_58(D)->mb.cache.intra4x4_pred_mode[_339];
  ma_341 = (const int) _340;
  # DEBUG ma => ma_341
  _342 = _338 + -8;
  _343 = h_58(D)->mb.cache.intra4x4_pred_mode[_342];
  mb_344 = (const int) _343;
  # DEBUG mb => mb_344
  _345 = mb_344 + 1;
  _346 = x264_mb_pred_mode4x4_fix[_345];
  _347 = ma_341 + 1;
  _348 = x264_mb_pred_mode4x4_fix[_347];
  _349 = MIN_EXPR <_346, _348>;
  m_350 = (const int) _349;
  # DEBUG m => m_350
  if (m_350 < 0)
    goto <bb 80>;
  else
    goto <bb 81>;

  <bb 80>:

  <bb 81>:
  # _351 = PHI <2(80), m_350(79)>
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG i_pred_mode => NULL
  _251 = h_58(D)->mb.i_neighbour4[idx_8];
  predict_4x4_mode_available (_251, &predict_mode, &i_max);
  _253 = h_58(D)->mb.i_neighbour4[idx_8];
  _254 = _253 & 6;
  if (_254 == 2)
    goto <bb 82>;
  else
    goto <bb 83>;

  <bb 82>:
  _255 = MEM[(uint8_t *)p_dst_by_249 + -29B];
  _256 = (unsigned int) _255;
  _257 = _256 * 16843009;
  MEM[(uint32_t *)p_dst_by_249 + -28B] = _257;

  <bb 83>:
  if (b_merged_satd_30 != 0)
    goto <bb 85>;
  else
    goto <bb 84>;

  <bb 84>:
  pretmp_492 = i_max;
  goto <bb 92>;

  <bb 85>:
  i_max.111_259 = i_max;
  if (i_max.111_259 > 5)
    goto <bb 86>;
  else
    goto <bb 92>;

  <bb 86>:
  _260 = h_58(D)->pixf.intra_satd_x3_4x4;
  _260 (p_src_by_246, p_dst_by_249, &satd);
  _262 = satd[_351];
  _263 = a_71(D)->i_lambda;
  _264 = _263 * -3;
  _265 = _262 + _264;
  satd[_351] = _265;
  # DEBUG i => 2
  # DEBUG i_best => 268435456
  # DEBUG i => 2
  pretmp_495 = _263 * 4;

  <bb 87>:
  # i_390 = PHI <i_271(90), 2(86)>
  # i_best_442 = PHI <i_best_19(90), 268435456(86)>
  # ivtmp_474 = PHI <ivtmp_472(90), 3(86)>
  # DEBUG i_best => i_best_442
  # DEBUG i => i_390
  _267 = satd[i_390];
  i_best_269 = _267 + pretmp_495;
  if (i_best_269 < i_best_442)
    goto <bb 88>;
  else
    goto <bb 89>;

  <bb 88>:
  # DEBUG i_best => i_best_269
  a_71(D)->i_predict4x4[idx_8] = i_390;

  <bb 89>:
  # i_best_19 = PHI <i_best_442(87), i_best_269(88)>
  # DEBUG i_best => i_best_19
  i_271 = i_390 + -1;
  # DEBUG i => i_271
  # DEBUG i_best => i_best_19
  # DEBUG i => i_271
  ivtmp_472 = ivtmp_474 - 1;
  if (ivtmp_472 != 0)
    goto <bb 90>;
  else
    goto <bb 91>;

  <bb 90>:
  goto <bb 87>;

  <bb 91>:
  # i_best_467 = PHI <i_best_19(89)>
  # DEBUG i => 3
  satd ={v} {CLOBBER};
  pretmp_493 = i_max;

  <bb 92>:
  # i_135 = PHI <0(84), 3(91), 0(85)>
  # i_best_134 = PHI <268435456(84), i_best_467(91), 268435456(85)>
  # prephitmp_494 = PHI <pretmp_492(84), pretmp_493(91), i_max.111_259(85)>
  # DEBUG i_best => i_best_134
  # DEBUG i => i_135
  if (i_135 < prephitmp_494)
    goto <bb 93>;
  else
    goto <bb 104>;

  <bb 93>:

  <bb 94>:
  # i_1 = PHI <i_135(93), i_289(103)>
  # i_best_379 = PHI <i_best_134(93), i_best_21(103)>
  # DEBUG i_best => i_best_379
  # DEBUG i => i_1
  i_mode_274 = predict_mode[i_1];
  # DEBUG i_mode => i_mode_274
  _275 = h_58(D)->mb.b_lossless;
  if (_275 != 0)
    goto <bb 95>;
  else
    goto <bb 96>;

  <bb 95>:
  x264_predict_lossless_4x4 (h_58(D), p_dst_by_249, idx_8, i_mode_274);
  goto <bb 97>;

  <bb 96>:
  _277 = h_58(D)->predict_4x4[i_mode_274];
  _277 (p_dst_by_249);

  <bb 97>:
  _279 = h_58(D)->pixf.mbcmp[6];
  _281 = _279 (p_dst_by_249, 32, p_src_by_246, 16);
  _282 = a_71(D)->i_lambda;
  _283 = i_mode_274 + 1;
  _284 = x264_mb_pred_mode4x4_fix[_283];
  _285 = (int) _284;
  if (_285 == _351)
    goto <bb 99>;
  else
    goto <bb 98>;

  <bb 98>:

  <bb 99>:
  # iftmp.119_31 = PHI <1(97), 4(98)>
  _286 = iftmp.119_31 * _282;
  i_best_287 = _281 + _286;
  # DEBUG i_satd => i_best_287
  if (i_best_287 < i_best_379)
    goto <bb 100>;
  else
    goto <bb 101>;

  <bb 100>:
  # DEBUG i_best => i_best_287
  a_71(D)->i_predict4x4[idx_8] = i_mode_274;

  <bb 101>:
  # i_best_21 = PHI <i_best_379(99), i_best_287(100)>
  # DEBUG i_best => i_best_21
  i_289 = i_1 + 1;
  # DEBUG i => i_289
  # DEBUG i_best => i_best_21
  # DEBUG i => i_289
  i_max.111_273 = i_max;
  if (i_max.111_273 > i_289)
    goto <bb 103>;
  else
    goto <bb 102>;

  <bb 102>:
  # i_best_466 = PHI <i_best_21(101)>
  goto <bb 104>;

  <bb 103>:
  goto <bb 94>;

  <bb 104>:
  # i_best_382 = PHI <i_best_466(102), i_best_134(92)>
  i_cost_290 = i_cost_17 + i_best_382;
  # DEBUG i_cost => i_cost_290
  _291 = i_satd_thresh_18 < i_cost_290;
  _292 = idx_8 == 15;
  _293 = _291 | _292;
  if (_293 != 0)
    goto <bb 106>;
  else
    goto <bb 105>;

  <bb 105>:
  _294 = a_71(D)->i_predict4x4[idx_8];
  _295 = h_58(D)->predict_4x4[_294];
  _295 (p_dst_by_249);
  _297 = a_71(D)->i_qp;
  x264_mb_encode_i4x4 (h_58(D), idx_8, _297);
  _299 = a_71(D)->i_predict4x4[idx_8];
  _300 = (signed char) _299;
  h_58(D)->mb.cache.intra4x4_pred_mode[_338] = _300;
  idx_302 = idx_8 + 1;
  # DEBUG idx => idx_302
  goto <bb 79>;

  <bb 106>:
  # idx_470 = PHI <idx_8(104)>
  # i_cost_464 = PHI <i_cost_290(104)>
  if (idx_470 == 15)
    goto <bb 107>;
  else
    goto <bb 110>;

  <bb 107>:
  a_71(D)->i_satd_i4x4 = i_cost_464;
  _304 = h_58(D)->mb.i_skip_intra;
  if (_304 != 0)
    goto <bb 108>;
  else
    goto <bb 70>;

  <bb 108>:
  _305 = h_58(D)->mc.copy[0];
  _306 = &h_58(D)->mb.pic.i4x4_fdec_buf;
  _305 (_306, 16, p_dst_63, 32, 16);
  _308 = h_58(D)->mb.i_skip_intra;
  if (_308 == 2)
    goto <bb 109>;
  else
    goto <bb 70>;

  <bb 109>:
  _309 = h_58(D)->mc.memcpy_aligned;
  _310 = &h_58(D)->dct.luma4x4;
  _311 = &h_58(D)->mb.pic.i4x4_dct_buf;
  _309 (_311, _310, 480);
  goto <bb 111>;

  <bb 110>:
  a_71(D)->i_satd_i4x4 = 268435456;

  <bb 111>:
  i_max ={v} {CLOBBER};
  predict_mode ={v} {CLOBBER};
  goto <bb 113>;

  <bb 112>:
  i_max ={v} {CLOBBER};
  predict_mode ={v} {CLOBBER};

  <bb 113>:
  return;

  <bb 114>:
  # DEBUG b_merged_satd => 0
  _389 = h_58(D)->mb.i_neighbour;
  predict_16x16_mode_available (_389, &predict_mode, &i_max);
  pretmp_518 = i_max;
  goto <bb 6>;

  <bb 115>:
  # DEBUG b_merged_satd => 1
  _374 = h_58(D)->mb.i_neighbour;
  predict_16x16_mode_available (_374, &predict_mode, &i_max);
  # DEBUG b_merged_satd => 1
  i_max.111_69 = i_max;
  if (i_max.111_69 == 4)
    goto <bb 8>;
  else
    goto <bb 6>;

}



;; Function x264_mb_cache_mv_b16x8 (x264_mb_cache_mv_b16x8, funcdef_no=215, decl_uid=9292, cgraph_uid=215, symbol_order=284)

encoder/analyse.c:1680:20: note: vectorized 0 loops in function.
x264_mb_cache_mv_b16x8 (struct x264_t * h, struct x264_mb_analysis_t * a, int i, int b_mvd)
{
  int dx;
  int dy;
  int dy;
  int dx;
  int dy;
  uint32_t val2;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  int dx;
  int dy;
  int dy;
  int dx;
  int dy;
  uint32_t val2;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  int _5;
  unsigned char _6;
  int _7;
  int _8;
  int16_t[2] * _10;
  unsigned int _11;
  int _12;
  int _14;
  unsigned char _15;
  int _16;
  int16_t[2] * _18;
  unsigned int _19;
  int _21;
  int16_t[2] * _22;
  long unsigned int _23;
  long unsigned int _24;
  int _35;
  int _36;
  int _37;
  int8_t * _38;
  int _40;
  int16_t[2] * _49;
  int _59;
  int _60;
  int8_t * _61;
  int16_t[2] * _69;
  int16_t[2] * _79;
  long unsigned int _80;
  long unsigned int _81;
  int8_t * _94;
  int _96;
  int8_t * _126;
  int prephitmp_132;
  int16_t[2] * _133;
  int16_t[2] * _143;

  <bb 2>:
  _5 = a_3(D)->i_mb_partition16x8[i_4(D)];
  _6 = x264_mb_partition_listX_table[0][_5];
  if (_6 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _7 = a_3(D)->l0.i_ref;
  _8 = i_4(D) * 2;
  # DEBUG h => h_9(D)
  # DEBUG x => 0
  # DEBUG y => _8
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#56 => (uint8_t) _7
  # DEBUG ref => D#56
  _36 = _8 * 8;
  _37 = _36 + 12;
  _38 = &h_9(D)->mb.cache.ref[0][_37];
  # DEBUG dst => _38
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => D#56
  _35 = _7 & 255;
  _40 = _35 * 16843009;
  val2_41 = (uint32_t) _40;
  # DEBUG val2 => val2_41
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)_38] = val2_41;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)_38 + 8B] = val2_41;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _10 = &a_3(D)->l0.me16x8[i_4(D)].mv;
  _11 = MEM[(uint32_t *)_10];
  # DEBUG h => h_9(D)
  # DEBUG x => 0
  # DEBUG y => _8
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _11
  _22 = &h_9(D)->mb.cache.mv[0][_37];
  # DEBUG dst => _22
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => _11
  _23 = (long unsigned int) _11;
  _24 = _23 << 32;
  val64_25 = _23 + _24;
  # DEBUG val64 => val64_25
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_22] = val64_25;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_22 + 8B] = val64_25;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_22 + 32B] = val64_25;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_22 + 40B] = val64_25;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 6>;

  <bb 4>:
  _12 = i_4(D) * 2;
  # DEBUG h => h_9(D)
  # DEBUG x => 0
  # DEBUG y => _12
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG ref => 255
  _59 = _12 * 8;
  _60 = _59 + 12;
  _61 = &h_9(D)->mb.cache.ref[0][_60];
  # DEBUG dst => _61
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => 255
  # DEBUG val2 => 4294967295
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)_61] = 4294967295;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)_61 + 8B] = 4294967295;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_9(D)
  # DEBUG x => 0
  # DEBUG y => _12
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => 0
  _49 = &h_9(D)->mb.cache.mv[0][_60];
  # DEBUG dst => _49
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_49] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_49 + 8B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_49 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_49 + 40B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  if (b_mvd_13(D) != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  # DEBUG h => h_9(D)
  # DEBUG x => 0
  # DEBUG y => _12
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => 0
  _69 = &h_9(D)->mb.cache.mvd[0][_60];
  # DEBUG dst => _69
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_69] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_69 + 8B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_69 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_69 + 40B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2

  <bb 6>:
  # prephitmp_132 = PHI <_37(3), _60(4), _60(5)>
  _14 = a_3(D)->i_mb_partition16x8[i_4(D)];
  _15 = x264_mb_partition_listX_table[1][_14];
  if (_15 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _16 = a_3(D)->l1.i_ref;
  # DEBUG D#265 => i_4(D) * 2
  # DEBUG h => h_9(D)
  # DEBUG x => 0
  # DEBUG y => D#265
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG D#55 => (uint8_t) _16
  # DEBUG ref => D#55
  _94 = &h_9(D)->mb.cache.ref[1][prephitmp_132];
  # DEBUG dst => _94
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => D#55
  _21 = _16 & 255;
  _96 = _21 * 16843009;
  val2_97 = (uint32_t) _96;
  # DEBUG val2 => val2_97
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)_94] = val2_97;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)_94 + 8B] = val2_97;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _18 = &a_3(D)->l1.me16x8[i_4(D)].mv;
  _19 = MEM[(uint32_t *)_18];
  # DEBUG h => h_9(D)
  # DEBUG x => 0
  # DEBUG y => D#265
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG mv => _19
  _79 = &h_9(D)->mb.cache.mv[1][prephitmp_132];
  # DEBUG dst => _79
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => _19
  _80 = (long unsigned int) _19;
  _81 = _80 << 32;
  val64_82 = _80 + _81;
  # DEBUG val64 => val64_82
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_79] = val64_82;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_79 + 8B] = val64_82;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_79 + 32B] = val64_82;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_79 + 40B] = val64_82;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 10>;

  <bb 8>:
  # DEBUG D#57 => a_3(D)
  # DEBUG h => h_9(D)
  # DEBUG i => i_4(D)
  # DEBUG b_mvd => b_mvd_13(D)
  # DEBUG D#58 => D#57
  # DEBUG a => D#58
  # DEBUG D#264 => i_4(D) * 2
  # DEBUG h => h_9(D)
  # DEBUG x => 0
  # DEBUG y => D#264
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG ref => 255
  _126 = &h_9(D)->mb.cache.ref[1][prephitmp_132];
  # DEBUG dst => _126
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => 255
  # DEBUG val2 => 4294967295
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)_126] = 4294967295;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)_126 + 8B] = 4294967295;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_9(D)
  # DEBUG x => 0
  # DEBUG y => D#264
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG mv => 0
  _133 = &h_9(D)->mb.cache.mv[1][prephitmp_132];
  # DEBUG dst => _133
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_133] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_133 + 8B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_133 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_133 + 40B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  if (b_mvd_13(D) != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # DEBUG h => h_9(D)
  # DEBUG x => 0
  # DEBUG y => D#264
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG mv => 0
  _143 = &h_9(D)->mb.cache.mvd[1][prephitmp_132];
  # DEBUG dst => _143
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_143] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_143 + 8B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_143 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_143 + 40B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2

  <bb 10>:
  return;

}



;; Function x264_mb_cache_mv_b8x16 (x264_mb_cache_mv_b8x16, funcdef_no=216, decl_uid=9298, cgraph_uid=216, symbol_order=285)

encoder/analyse.c:1684:20: note: vectorized 0 loops in function.
x264_mb_cache_mv_b8x16 (struct x264_t * h, struct x264_mb_analysis_t * a, int i, int b_mvd)
{
  int dx;
  int dy;
  int dy;
  int dx;
  int dy;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  int dx;
  int dy;
  int dy;
  int dx;
  int dy;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  int _5;
  unsigned char _6;
  int _7;
  int _8;
  int16_t[2] * _10;
  unsigned int _11;
  int _12;
  int _15;
  unsigned char _18;
  int _19;
  int16_t[2] * _21;
  unsigned int _22;
  int _25;
  int16_t[2] * _26;
  long unsigned int _27;
  long unsigned int _28;
  int _39;
  int _40;
  int8_t * _42;
  int _43;
  int16_t[2] * _52;
  int8_t * _62;
  int16_t[2] * _69;
  int16_t[2] * _79;
  long unsigned int _80;
  long unsigned int _81;
  int8_t * _93;
  int _97;
  int prephitmp_106;
  int8_t * _122;
  int16_t[2] * _129;
  int16_t[2] * _139;
  short unsigned int _179;
  short unsigned int _274;

  <bb 2>:
  _5 = a_3(D)->i_mb_partition8x16[i_4(D)];
  _6 = x264_mb_partition_listX_table[0][_5];
  if (_6 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _7 = a_3(D)->l0.i_ref;
  _8 = i_4(D) * 2;
  # DEBUG h => h_9(D)
  # DEBUG x => _8
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#60 => (uint8_t) _7
  # DEBUG ref => D#60
  _39 = _8 + 12;
  _42 = &h_9(D)->mb.cache.ref[0][_39];
  # DEBUG dst => _42
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => D#60
  _40 = _7 & 255;
  _43 = _40 * 257;
  # DEBUG val2 => (uint32_t) _43
  # DEBUG dy => 0
  # DEBUG dy => 0
  _274 = (short unsigned int) _43;
  MEM[(uint16_t *)_42] = _274;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_42 + 8B] = _274;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)_42 + 16B] = _274;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)_42 + 24B] = _274;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _10 = &a_3(D)->l0.me8x16[i_4(D)].mv;
  _11 = MEM[(uint32_t *)_10];
  # DEBUG h => h_9(D)
  # DEBUG x => _8
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => _11
  _26 = &h_9(D)->mb.cache.mv[0][_39];
  # DEBUG dst => _26
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => _11
  _27 = (long unsigned int) _11;
  _28 = _27 << 32;
  val64_29 = _27 + _28;
  # DEBUG val64 => val64_29
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_26] = val64_29;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_26 + 32B] = val64_29;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_26 + 64B] = val64_29;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_26 + 96B] = val64_29;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4
  goto <bb 6>;

  <bb 4>:
  _12 = i_4(D) * 2;
  # DEBUG h => h_9(D)
  # DEBUG x => _12
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG ref => 255
  _15 = _12 + 12;
  _62 = &h_9(D)->mb.cache.ref[0][_15];
  # DEBUG dst => _62
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => 255
  # DEBUG val2 => (uint32_t) 65535
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint16_t *)_62] = 65535;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_62 + 8B] = 65535;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)_62 + 16B] = 65535;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)_62 + 24B] = 65535;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_9(D)
  # DEBUG x => _12
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => 0
  _52 = &h_9(D)->mb.cache.mv[0][_15];
  # DEBUG dst => _52
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_52] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_52 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_52 + 64B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_52 + 96B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  if (b_mvd_16(D) != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  # DEBUG h => h_9(D)
  # DEBUG x => _12
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => 0
  _69 = &h_9(D)->mb.cache.mvd[0][_15];
  # DEBUG dst => _69
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_69] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_69 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_69 + 64B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_69 + 96B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4

  <bb 6>:
  # prephitmp_106 = PHI <_39(3), _15(4), _15(5)>
  _18 = x264_mb_partition_listX_table[1][_5];
  if (_18 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _19 = a_3(D)->l1.i_ref;
  # DEBUG D#275 => i_4(D) * 2
  # DEBUG h => h_9(D)
  # DEBUG x => D#275
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG D#59 => (uint8_t) _19
  # DEBUG ref => D#59
  _93 = &h_9(D)->mb.cache.ref[1][prephitmp_106];
  # DEBUG dst => _93
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => D#59
  _25 = _19 & 255;
  _97 = _25 * 257;
  # DEBUG val2 => (uint32_t) _97
  # DEBUG dy => 0
  # DEBUG dy => 0
  _179 = (short unsigned int) _97;
  MEM[(uint16_t *)_93] = _179;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_93 + 8B] = _179;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)_93 + 16B] = _179;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)_93 + 24B] = _179;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _21 = &a_3(D)->l1.me8x16[i_4(D)].mv;
  _22 = MEM[(uint32_t *)_21];
  # DEBUG h => h_9(D)
  # DEBUG x => D#275
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG mv => _22
  _79 = &h_9(D)->mb.cache.mv[1][prephitmp_106];
  # DEBUG dst => _79
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => _22
  _80 = (long unsigned int) _22;
  _81 = _80 << 32;
  val64_82 = _80 + _81;
  # DEBUG val64 => val64_82
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_79] = val64_82;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_79 + 32B] = val64_82;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_79 + 64B] = val64_82;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_79 + 96B] = val64_82;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4
  goto <bb 10>;

  <bb 8>:
  # DEBUG D#61 => a_3(D)
  # DEBUG h => h_9(D)
  # DEBUG i => i_4(D)
  # DEBUG b_mvd => b_mvd_16(D)
  # DEBUG D#62 => D#61
  # DEBUG a => D#62
  # DEBUG D#274 => i_4(D) * 2
  # DEBUG h => h_9(D)
  # DEBUG x => D#274
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG ref => 255
  _122 = &h_9(D)->mb.cache.ref[1][prephitmp_106];
  # DEBUG dst => _122
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => 255
  # DEBUG val2 => (uint32_t) 65535
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint16_t *)_122] = 65535;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_122 + 8B] = 65535;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)_122 + 16B] = 65535;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)_122 + 24B] = 65535;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_9(D)
  # DEBUG x => D#274
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG mv => 0
  _129 = &h_9(D)->mb.cache.mv[1][prephitmp_106];
  # DEBUG dst => _129
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_129] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_129 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_129 + 64B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_129 + 96B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  if (b_mvd_16(D) != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # DEBUG h => h_9(D)
  # DEBUG x => D#274
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG mv => 0
  _139 = &h_9(D)->mb.cache.mvd[1][prephitmp_106];
  # DEBUG dst => _139
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_139] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_139 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_139 + 64B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_139 + 96B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4

  <bb 10>:
  return;

}



;; Function x264_mb_cache_mv_p8x8 (x264_mb_cache_mv_p8x8, funcdef_no=213, decl_uid=9270, cgraph_uid=213, symbol_order=282)

encoder/analyse.c:1605:20: note: vectorized 0 loops in function.
x264_mb_cache_mv_p8x8 (struct x264_t * h, struct x264_mb_analysis_t * a, int i)
{
  int dx;
  int dy;
  int dx;
  int dy;
  int dx;
  int dy;
  int dx;
  int dy;
  int dx;
  int dy;
  int dx;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  const int y;
  const int x;
  int _3;
  int _5;
  int _9;
  int16_t[2] * _11;
  unsigned int _12;
  int16_t[2] * _14;
  unsigned int _15;
  int _16;
  int16_t[2] * _17;
  unsigned int _18;
  int _19;
  int _20;
  int16_t[2] * _21;
  unsigned int _22;
  int16_t[2] * _23;
  unsigned int _24;
  int _25;
  int16_t[2] * _26;
  unsigned int _27;
  int16_t[2] * _28;
  unsigned int _29;
  int _30;
  int16_t[2] * _31;
  unsigned int _32;
  int _33;
  int _34;
  int16_t[2] * _35;
  unsigned int _36;
  int _39;
  int _40;
  int _41;
  int16_t[2] * _42;
  long unsigned int _43;
  long unsigned int _44;
  int _56;
  int _57;
  int16_t[2] * _58;
  long unsigned int _59;
  long unsigned int _60;
  int _72;
  int _73;
  int16_t[2] * _74;
  long unsigned int _75;
  long unsigned int _76;
  int _88;
  int16_t[2] * _89;
  int _101;
  int _102;
  int16_t[2] * _103;
  int _122;
  int16_t[2] * _123;
  int _134;
  int _135;
  int16_t[2] * _136;
  int _148;
  int16_t[2] * _149;
  int _161;
  int _162;
  int16_t[2] * _163;

  <bb 2>:
  _3 = i_2(D) % 2;
  x_4 = _3 * 2;
  # DEBUG x => x_4
  _5 = i_2(D) / 2;
  y_6 = _5 * 2;
  # DEBUG y => y_6
  _9 = h_8(D)->mb.i_sub_partition[i_2(D)];
  switch (_9) <default: <L6>, case 0: <L3>, case 1: <L1>, case 2: <L2>, case 3: <L0>>

<L0>:
  _11 = &a_10(D)->l0.me8x8[i_2(D)].mv;
  _12 = MEM[(uint32_t *)_11];
  # DEBUG h => h_8(D)
  # DEBUG x => x_4
  # DEBUG y => y_6
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _12
  _39 = x_4 + 12;
  _40 = y_6 * 8;
  _41 = _39 + _40;
  _42 = &h_8(D)->mb.cache.mv[0][_41];
  # DEBUG dst => _42
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => _12
  _43 = (long unsigned int) _12;
  _44 = _43 << 32;
  val64_45 = _43 + _44;
  # DEBUG val64 => val64_45
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_42] = val64_45;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_42 + 32B] = val64_45;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 8>;

<L1>:
  _14 = &a_10(D)->l0.me8x4[i_2(D)][0].mv;
  _15 = MEM[(uint32_t *)_14];
  # DEBUG h => h_8(D)
  # DEBUG x => x_4
  # DEBUG y => y_6
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG i_list => 0
  # DEBUG mv => _15
  _20 = x_4 + 12;
  _72 = y_6 * 8;
  _73 = _20 + _72;
  _74 = &h_8(D)->mb.cache.mv[0][_73];
  # DEBUG dst => _74
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG val => _15
  _75 = (long unsigned int) _15;
  _76 = _75 << 32;
  val64_77 = _75 + _76;
  # DEBUG val64 => val64_77
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_74] = val64_77;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _17 = &a_10(D)->l0.me8x4[i_2(D)][1].mv;
  _18 = MEM[(uint32_t *)_17];
  _19 = y_6 + 1;
  # DEBUG h => h_8(D)
  # DEBUG x => x_4
  # DEBUG y => _19
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG i_list => 0
  # DEBUG mv => _18
  _56 = _19 * 8;
  _57 = _20 + _56;
  _58 = &h_8(D)->mb.cache.mv[0][_57];
  # DEBUG dst => _58
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG val => _18
  _59 = (long unsigned int) _18;
  _60 = _59 << 32;
  val64_61 = _59 + _60;
  # DEBUG val64 => val64_61
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_58] = val64_61;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  goto <bb 8>;

<L2>:
  _21 = &a_10(D)->l0.me4x8[i_2(D)][0].mv;
  _22 = MEM[(uint32_t *)_21];
  # DEBUG h => h_8(D)
  # DEBUG x => x_4
  # DEBUG y => y_6
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _22
  _25 = x_4 + 12;
  _101 = y_6 * 8;
  _102 = _25 + _101;
  _103 = &h_8(D)->mb.cache.mv[0][_102];
  # DEBUG dst => _103
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG val => _22
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_103] = _22;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint32_t *)_103 + 32B] = _22;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _23 = &a_10(D)->l0.me4x8[i_2(D)][1].mv;
  _24 = MEM[(uint32_t *)_23];
  # DEBUG h => h_8(D)
  # DEBUG x => x_4 + 1
  # DEBUG y => y_6
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _24
  _16 = x_4 + 13;
  _88 = _16 + _101;
  _89 = &h_8(D)->mb.cache.mv[0][_88];
  # DEBUG dst => _89
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG val => _24
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_89] = _24;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint32_t *)_89 + 32B] = _24;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 8>;

<L3>:
  _26 = &a_10(D)->l0.me4x4[i_2(D)][0].mv;
  _27 = MEM[(uint32_t *)_26];
  # DEBUG h => h_8(D)
  # DEBUG x => x_4
  # DEBUG y => y_6
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => 0
  # DEBUG mv => _27
  _30 = x_4 + 12;
  _161 = y_6 * 8;
  _162 = _30 + _161;
  _163 = &h_8(D)->mb.cache.mv[0][_162];
  # DEBUG dst => _163
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => _27
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_163] = _27;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _28 = &a_10(D)->l0.me4x4[i_2(D)][1].mv;
  _29 = MEM[(uint32_t *)_28];
  # DEBUG h => h_8(D)
  # DEBUG x => x_4 + 1
  # DEBUG y => y_6
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => 0
  # DEBUG mv => _29
  _34 = x_4 + 13;
  _148 = _34 + _161;
  _149 = &h_8(D)->mb.cache.mv[0][_148];
  # DEBUG dst => _149
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => _29
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_149] = _29;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _31 = &a_10(D)->l0.me4x4[i_2(D)][2].mv;
  _32 = MEM[(uint32_t *)_31];
  _33 = y_6 + 1;
  # DEBUG h => h_8(D)
  # DEBUG x => x_4
  # DEBUG y => _33
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => 0
  # DEBUG mv => _32
  _134 = _33 * 8;
  _135 = _30 + _134;
  _136 = &h_8(D)->mb.cache.mv[0][_135];
  # DEBUG dst => _136
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => _32
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_136] = _32;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _35 = &a_10(D)->l0.me4x4[i_2(D)][3].mv;
  _36 = MEM[(uint32_t *)_35];
  # DEBUG h => h_8(D)
  # DEBUG x => x_4 + 1
  # DEBUG y => _33
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => 0
  # DEBUG mv => _36
  _122 = _34 + _134;
  _123 = &h_8(D)->mb.cache.mv[0][_122];
  # DEBUG dst => _123
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => _36
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_123] = _36;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  goto <bb 8>;

<L6>:
  # DEBUG D#63 => a_10(D)
  # DEBUG D#64 => i_2(D)
  # DEBUG h => h_8(D)
  # DEBUG D#65 => D#64
  # DEBUG i => D#65
  # DEBUG D#66 => D#63
  # DEBUG a => D#66
  x264_log (h_8(D), 0, "internal error\n");

  <bb 8>:
  return;

}



;; Function x264_mb_analyse_intra_chroma.part.17 (x264_mb_analyse_intra_chroma.part.17, funcdef_no=254, decl_uid=18101, cgraph_uid=136, symbol_order=620)


Analyzing loop at encoder/analyse.c:556
encoder/analyse.c:556:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:556:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:556:9: note: not vectorized: control flow in loop.
encoder/analyse.c:556:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:568
encoder/analyse.c:568:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:568:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:568:9: note: not vectorized: control flow in loop.
encoder/analyse.c:568:9: note: bad loop form.
encoder/analyse.c:524:13: note: vectorized 0 loops in function.
x264_mb_analyse_intra_chroma.part.17 (struct x264_t * h, struct x264_mb_analysis_t * a)
{
  int i;
  int i_max;
  int predict_mode[4];
  uint8_t * p_dstc[2];
  uint8_t * p_srcc[2];
  int satdu[4];
  int satdv[4];
  int i_mode;
  int i_satd;
  int i_satd;
  int i_mode;
  int D.18123;
  int D.18122;
  uint8_t * p_dstc$0;
  uint8_t * p_dstc$1;
  uint8_t * p_srcc$0;
  uint8_t * p_srcc$1;
  uint8_t * _2;
  uint8_t * _3;
  uint8_t * _4;
  uint8_t * _5;
  unsigned int _6;
  int i_max.90_8;
  void (*<T1429>) (uint8_t *, uint8_t *, int *) _9;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _10;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _11;
  void (*<T1429>) (uint8_t *, uint8_t *, int *) _12;
  void (*<T1367>) (uint8_t *) _13;
  void (*<T1367>) (uint8_t *) _14;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _15;
  int _16;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _17;
  int _18;
  int _21;
  int _22;
  int _23;
  unsigned int i_mode.91_25;
  unsigned int _26;
  unsigned char _27;
  int _28;
  int _29;
  int _31;
  int _36;
  void (*<T1367>) (uint8_t *) _37;
  void (*<T1367>) (uint8_t *) _38;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _39;
  int _40;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _41;
  int _42;
  int _43;
  int _44;
  unsigned char _45;
  unsigned int _46;
  unsigned int _47;
  unsigned char _48;
  int _49;
  int _50;
  int _52;
  int i_max.90_54;
  int _55;
  int i_max.90_97;
  int pretmp_121;

  <bb 2>:
  _2 = h_1(D)->mb.pic.p_fdec[1];
  # DEBUG p_dstc$0 => _2
  _3 = h_1(D)->mb.pic.p_fdec[2];
  # DEBUG p_dstc$1 => _3
  _4 = h_1(D)->mb.pic.p_fenc[1];
  # DEBUG p_srcc$0 => _4
  _5 = h_1(D)->mb.pic.p_fenc[2];
  # DEBUG p_srcc$1 => _5
  _6 = h_1(D)->mb.i_neighbour;
  predict_8x8chroma_mode_available (_6, &predict_mode, &i_max);
  a_7(D)->i_satd_i8x8chroma = 268435456;
  i_max.90_8 = i_max;
  if (i_max.90_8 == 4)
    goto <bb 5>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG i => 0
  if (i_max.90_8 > 0)
    goto <bb 7>;
  else
    goto <bb 4>;

  <bb 4>:
  goto <bb 23>;

  <bb 5>:
  _9 = h_1(D)->pixf.intra_satd_x3_8x8c;
  if (_9 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  _10 = h_1(D)->pixf.mbcmp[0];
  _11 = h_1(D)->pixf.satd[0];
  if (_10 == _11)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 17>;

  <bb 8>:
  _9 (_4, _2, &satdu);
  _12 = h_1(D)->pixf.intra_satd_x3_8x8c;
  _12 (_5, _3, &satdv);
  _13 = h_1(D)->predict_8x8c[3];
  _13 (_2);
  _14 = h_1(D)->predict_8x8c[3];
  _14 (_3);
  _15 = h_1(D)->pixf.mbcmp[3];
  _16 = _15 (_2, 32, _4, 16);
  satdu[3] = _16;
  _17 = h_1(D)->pixf.mbcmp[3];
  _18 = _17 (_3, 32, _5, 16);
  satdv[3] = _18;
  # DEBUG i => 0
  # DEBUG i => 0
  i_max.90_97 = i_max;
  if (i_max.90_97 > 0)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  satdu ={v} {CLOBBER};
  satdv ={v} {CLOBBER};
  goto <bb 23>;

  <bb 10>:
  pretmp_121 = a_7(D)->i_lambda;

  <bb 11>:
  # i_100 = PHI <0(10), i_32(15)>
  # DEBUG i => i_100
  i_mode_20 = predict_mode[i_100];
  # DEBUG i_mode => i_mode_20
  _21 = satdu[i_mode_20];
  _22 = satdv[i_mode_20];
  _23 = _21 + _22;
  i_mode.91_25 = (unsigned int) i_mode_20;
  # DEBUG val => i_mode.91_25
  _26 = i_mode.91_25 + 1;
  _27 = x264_ue_size_tab[_26];
  _28 = (int) _27;
  # DEBUG val => NULL
  _29 = _28 * pretmp_121;
  i_satd_30 = _23 + _29;
  # DEBUG i_satd => i_satd_30
  a_7(D)->i_satd_i8x8chroma_dir[i_100] = i_satd_30;
  _31 = a_7(D)->i_satd_i8x8chroma;
  if (i_satd_30 < _31)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  a_7(D)->i_satd_i8x8chroma = i_satd_30;
  a_7(D)->i_predict8x8chroma = i_mode_20;

  <bb 13>:
  i_32 = i_100 + 1;
  # DEBUG i => i_32
  # DEBUG i => i_32
  if (i_32 < i_max.90_97)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 9>;

  <bb 15>:
  goto <bb 11>;

  <bb 16>:

  <bb 17>:
  # i_99 = PHI <0(7), i_53(16)>
  # DEBUG i => i_99
  i_mode_35 = predict_mode[i_99];
  # DEBUG i_mode => i_mode_35
  _36 = h_1(D)->mb.b_lossless;
  if (_36 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  x264_predict_lossless_8x8_chroma (h_1(D), i_mode_35);
  goto <bb 20>;

  <bb 19>:
  _37 = h_1(D)->predict_8x8c[i_mode_35];
  _37 (_2);
  _38 = h_1(D)->predict_8x8c[i_mode_35];
  _38 (_3);

  <bb 20>:
  _39 = h_1(D)->pixf.mbcmp[3];
  _40 = _39 (_2, 32, _4, 16);
  _41 = h_1(D)->pixf.mbcmp[3];
  _42 = _41 (_3, 32, _5, 16);
  _43 = _40 + _42;
  _44 = a_7(D)->i_lambda;
  _45 = x264_mb_pred_mode8x8c_fix[i_mode_35];
  _46 = (unsigned int) _45;
  # DEBUG val => _46
  _47 = _46 + 1;
  _48 = x264_ue_size_tab[_47];
  _49 = (int) _48;
  # DEBUG val => NULL
  _50 = _44 * _49;
  i_satd_51 = _43 + _50;
  # DEBUG i_satd => i_satd_51
  a_7(D)->i_satd_i8x8chroma_dir[i_99] = i_satd_51;
  _52 = a_7(D)->i_satd_i8x8chroma;
  if (i_satd_51 < _52)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  a_7(D)->i_satd_i8x8chroma = i_satd_51;
  a_7(D)->i_predict8x8chroma = i_mode_35;

  <bb 22>:
  i_53 = i_99 + 1;
  # DEBUG i => i_53
  # DEBUG i => i_53
  i_max.90_54 = i_max;
  if (i_53 < i_max.90_54)
    goto <bb 16>;
  else
    goto <bb 4>;

  <bb 23>:
  _55 = a_7(D)->i_predict8x8chroma;
  h_1(D)->mb.i_chroma_pred_mode = _55;
  i_max ={v} {CLOBBER};
  predict_mode ={v} {CLOBBER};
  p_dstc ={v} {CLOBBER};
  p_srcc ={v} {CLOBBER};
  return;

}



;; Function x264_analyse_update_cache (x264_analyse_update_cache, funcdef_no=226, decl_uid=8821, cgraph_uid=226, symbol_order=295)


Analyzing loop at encoder/analyse.c:2873
encoder/analyse.c:2873:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:2873:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:2873:9: note: not vectorized: control flow in loop.
encoder/analyse.c:2873:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:2746
encoder/analyse.c:2746:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:2746:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:2746:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
encoder/analyse.c:2746:13: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[i_1425]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {0, +, 1}_4
Creating dr for a_20(D)->i_predict4x4[i_1425]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_20(D)
	offset from base address: 0
	constant offset from base address: 288
	step: 4
	aligned to: 128
	base_object: *a_20(D)
	Access function 0: {0, +, 1}_4
	Access function 1: 2304
Creating dr for h_16(D)->mb.cache.intra4x4_pred_mode[_19]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *h_16(D)
	Access function 0: scev_not_known;
	Access function 1: 0
	Access function 2: 65024
	Access function 3: 87040
encoder/analyse.c:2746:13: note: got vectype for stmt: _19 = x264_scan8[i_1425];
const vector(4) int
encoder/analyse.c:2746:13: note: got vectype for stmt: _21 = a_20(D)->i_predict4x4[i_1425];
vector(4) int
encoder/analyse.c:2746:13: note: not vectorized: data ref analysis failed h_16(D)->mb.cache.intra4x4_pred_mode[_19] = _22;

encoder/analyse.c:2746:13: note: bad data references.

Analyzing loop at encoder/analyse.c:2752
encoder/analyse.c:2752:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:2752:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:2752:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/analyse.c:2752:13: note: === vect_analyze_data_refs ===
Creating dr for a_20(D)->i_predict8x8[i_1433]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_20(D)
	offset from base address: 0
	constant offset from base address: 268
	step: 4
	aligned to: 128
	base_object: *a_20(D)
	Access function 0: {0, +, 1}_3
	Access function 1: 2144
Creating dr for MEM[(int8_t *)cache_137 + 9B]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int8_t *)cache_137 + 9B]
Creating dr for MEM[(int8_t *)cache_137 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int8_t *)cache_137 + 8B]
Creating dr for MEM[(int8_t *)cache_137 + 1B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int8_t *)cache_137 + 1B]
Creating dr for MEM[(int8_t *)h_16(D)].mb.cache.intra4x4_pred_mode[_136]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int8_t *)h_16(D)]
	Access function 0: scev_not_known;
	Access function 1: 0
	Access function 2: 65024
	Access function 3: 87040
encoder/analyse.c:2752:13: note: got vectype for stmt: _27 = a_20(D)->i_predict8x8[i_1433];
vector(4) int
encoder/analyse.c:2752:13: note: not vectorized: data ref analysis failed MEM[(int8_t *)cache_137 + 9B] = _138;

encoder/analyse.c:2752:13: note: bad data references.

Analyzing loop at encoder/analyse.c:2798
encoder/analyse.c:2798:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:2798:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:2798:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/analyse.c:2798:13: note: === vect_analyze_data_refs ===
encoder/analyse.c:2798:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:2798:13: note: bad data references.

Analyzing loop at encoder/analyse.c:2820
encoder/analyse.c:2820:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:2820:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:2820:13: note: not vectorized: control flow in loop.
encoder/analyse.c:2820:13: note: bad loop form.
encoder/analyse.c:2739:13: note: vectorized 0 loops in function.
x264_analyse_update_cache (struct x264_t * h, struct x264_mb_analysis_t * a)
{
  int x;
  int y;
  int dy;
  int dy;
  int dx;
  int dy;
  int dx;
  int dy;
  int dx;
  uint64_t val64;
  int dy;
  int dy;
  int dx;
  int dy;
  int dy;
  int dx;
  int dy;
  int dx;
  uint64_t val64;
  int dy;
  int dy;
  int dx;
  int dy;
  int dy;
  int dx;
  uint32_t val2;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  uint32_t val2;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  int dy;
  int dx;
  int dy;
  int dx;
  int dy;
  uint32_t val2;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  uint32_t val2;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  int dy;
  int dx;
  int dy;
  int dx;
  int dy;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  int dy;
  int dy;
  int dy;
  int dy;
  int dy;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  uint32_t val2;
  int dy;
  uint32_t val2;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  uint32_t val2;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  int8_t * cache;
  int ref;
  int completed;
  int l;
  int i;
  struct x264_frame_t * * iftmp.148_6;
  int _9;
  int _17;
  int _18;
  int _19;
  int _21;
  signed char _22;
  int _25;
  int _26;
  int _27;
  int _28;
  int _29;
  int _30;
  int _31;
  int _34;
  int _35;
  int _37;
  int _38;
  int _39;
  int _40;
  int _41;
  unsigned int _42;
  int _43;
  unsigned int _44;
  int _45;
  int _47;
  unsigned int _48;
  int _50;
  int _51;
  unsigned int _52;
  int _53;
  unsigned int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _62;
  unsigned int _63;
  int _70;
  int _72;
  int _73;
  unsigned int _74;
  int _75;
  int _76;
  unsigned int _77;
  int _78;
  int _79;
  unsigned int _80;
  int _81;
  unsigned int _83;
  int _89;
  int _90;
  unsigned int _91;
  int _92;
  _Bool _93;
  int _94;
  signed char _95;
  struct x264_frame_t * * iftmp.148_97;
  struct x264_frame_t * * iftmp.148_98;
  int _99;
  int _100;
  long unsigned int _101;
  long unsigned int _102;
  struct x264_frame_t * * _103;
  struct x264_frame_t * _104;
  short int _106;
  int _107;
  int _108;
  int _109;
  int _110;
  int _111;
  int _112;
  int _114;
  struct _IO_FILE * stderr.149_115;
  int _116;
  short int _117;
  int _118;
  short int _119;
  int _120;
  struct _IO_FILE * stderr.149_121;
  int _122;
  struct _IO_FILE * stderr.149_123;
  int _124;
  int _125;
  struct _IO_FILE * stderr.149_126;
  struct _IO_FILE * stderr.149_127;
  int _131;
  int _134;
  int _135;
  int _136;
  signed char _138;
  long unsigned int _141;
  long unsigned int _142;
  int _156;
  long unsigned int _175;
  long unsigned int _176;
  long unsigned int _190;
  long unsigned int _191;
  unsigned int ivtmp_204;
  int _206;
  int _214;
  int _215;
  int _216;
  int _219;
  long unsigned int _237;
  long unsigned int _238;
  long unsigned int _250;
  long unsigned int _251;
  int _263;
  unsigned int ivtmp_281;
  int _282;
  int _291;
  int _301;
  int _310;
  int _329;
  unsigned int ivtmp_337;
  long unsigned int _338;
  long unsigned int _339;
  unsigned int ivtmp_350;
  long unsigned int _394;
  long unsigned int _395;
  int _407;
  long unsigned int _425;
  long unsigned int _426;
  int _439;
  long unsigned int _478;
  long unsigned int _479;
  int _493;
  long unsigned int _519;
  long unsigned int _520;
  int _535;
  int _552;
  int _554;
  int _556;
  int _557;
  int _558;
  int _559;
  int16_t[2] * _560;
  int16_t[2] * _570;
  int8_t * _580;
  unsigned char _587;
  int _588;
  int _589;
  int _590;
  int _591;
  int8_t * _592;
  int _593;
  int _594;
  int16_t[2] * _602;
  unsigned int _603;
  int16_t[2] * _604;
  long unsigned int _605;
  long unsigned int _606;
  int _617;
  int _618;
  int _619;
  int8_t * _620;
  int16_t[2] * _627;
  int16_t[2] * _637;
  unsigned char _648;
  int _649;
  int8_t * _653;
  int _654;
  int _655;
  int16_t[2] * _663;
  unsigned int _664;
  int16_t[2] * _665;
  long unsigned int _666;
  long unsigned int _667;
  int8_t * _681;
  int16_t[2] * _688;
  int16_t[2] * _698;
  short unsigned int _1207;
  short unsigned int _1243;
  short unsigned int _1329;
  short unsigned int _1347;
  short unsigned int _1365;
  short unsigned int _1383;
  unsigned int ivtmp_1426;
  unsigned int ivtmp_1434;
  unsigned int ivtmp_1442;
  short unsigned int _1494;
  short unsigned int _1555;
  unsigned int ivtmp_1670;
  int prephitmp_1677;

  <bb 2>:
  _17 = h_16(D)->mb.i_type;
  switch (_17) <default: <L27>, case 0: <L71>, case 1: <L72>, case 2: <L8>, case 3: <L54>, case 4: <L10>, case 5: <L16>, case 6: <L20>, case 7: <L21>, case 17: <L73>, case 18: <L21>>

<L71>:

  <bb 4>:
  # i_1425 = PHI <0(3), i_24(5)>
  # ivtmp_204 = PHI <16(3), ivtmp_281(5)>
  # DEBUG i => i_1425
  _19 = x264_scan8[i_1425];
  _21 = a_20(D)->i_predict4x4[i_1425];
  _22 = (signed char) _21;
  h_16(D)->mb.cache.intra4x4_pred_mode[_19] = _22;
  i_24 = i_1425 + 1;
  # DEBUG i => i_24
  # DEBUG i => i_24
  ivtmp_281 = ivtmp_204 - 1;
  if (ivtmp_281 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  goto <bb 4>;

  <bb 6>:
  # DEBUG h => h_16(D)
  # DEBUG a => a_20(D)
  _116 = a_20(D)->i_satd_i8x8chroma;
  if (_116 <= 268435455)
    goto <bb 60>;
  else
    goto <bb 7>;

  <bb 7>:
  x264_mb_analyse_intra_chroma.part.17 (h_16(D), a_20(D));
  goto <bb 47> (<L54>);

<L72>:

  <bb 9>:
  # i_1433 = PHI <0(8), i_33(10)>
  # ivtmp_350 = PHI <4(8), ivtmp_1426(10)>
  # DEBUG i => i_1433
  _27 = a_20(D)->i_predict8x8[i_1433];
  _28 = i_1433 >> 1;
  _29 = _28 * 2;
  _30 = i_1433 & 1;
  _31 = _30 * 2;
  # DEBUG h => h_16(D)
  # DEBUG x => _31
  # DEBUG y => _29
  # DEBUG i_mode => _27
  _134 = _31 + 12;
  _135 = _29 * 8;
  _136 = _134 + _135;
  cache_137 = &h_16(D)->mb.cache.intra4x4_pred_mode[_136];
  # DEBUG cache => cache_137
  _138 = (signed char) _27;
  MEM[(int8_t *)cache_137 + 9B] = _138;
  MEM[(int8_t *)cache_137 + 8B] = _138;
  MEM[(int8_t *)cache_137 + 1B] = _138;
  MEM[(int8_t *)h_16(D)].mb.cache.intra4x4_pred_mode[_136] = _138;
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG i_mode => NULL
  # DEBUG cache => NULL
  i_33 = i_1433 + 1;
  # DEBUG i => i_33
  # DEBUG i => i_33
  ivtmp_1426 = ivtmp_350 - 1;
  if (ivtmp_1426 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  goto <bb 9>;

  <bb 11>:
  # DEBUG h => h_16(D)
  # DEBUG a => a_20(D)
  _25 = a_20(D)->i_satd_i8x8chroma;
  if (_25 <= 268435455)
    goto <bb 12>;
  else
    goto <bb 7>;

  <bb 12>:
  goto <bb 47> (<L54>);

<L8>:
  _35 = a_20(D)->i_predict16x16;
  h_16(D)->mb.i_intra16x16_pred_mode = _35;
  # DEBUG h => h_16(D)
  # DEBUG a => a_20(D)
  _34 = a_20(D)->i_satd_i8x8chroma;
  if (_34 <= 268435455)
    goto <bb 60>;
  else
    goto <bb 7>;

<L10>:
  _38 = h_16(D)->mb.i_partition;
  switch (_38) <default: <L14>, case 14: <L12>, case 15: <L13>, case 16: <L11>>

<L11>:
  _45 = a_20(D)->l0.me16x16.i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#96 => (uint8_t) _45
  # DEBUG ref => D#96
  # DEBUG D#316 => &h_16(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#316
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => D#96
  _73 = _45 & 255;
  _156 = _73 * 16843009;
  val2_157 = (uint32_t) _156;
  # DEBUG val2 => val2_157
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_16(D) + 19116B] = val2_157;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_16(D) + 19124B] = val2_157;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_16(D) + 19132B] = val2_157;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_16(D) + 19140B] = val2_157;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _48 = MEM[(uint32_t *)a_20(D) + 524B];
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => _48
  # DEBUG D#315 => &h_16(D)->mb.cache.mv[0][12]
  # DEBUG dst => D#315
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => _48
  _141 = (long unsigned int) _48;
  _142 = _141 << 32;
  val64_143 = _141 + _142;
  # DEBUG val64 => val64_143
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19248B] = val64_143;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19256B] = val64_143;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19280B] = val64_143;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19288B] = val64_143;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19312B] = val64_143;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19320B] = val64_143;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19344B] = val64_143;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19352B] = val64_143;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  goto <bb 47> (<L54>);

<L12>:
  _39 = a_20(D)->l0.me16x8[0].i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#97 => (uint8_t) _39
  # DEBUG ref => D#97
  # DEBUG D#320 => &h_16(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#320
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => D#97
  _18 = _39 & 255;
  _219 = _18 * 16843009;
  val2_220 = (uint32_t) _219;
  # DEBUG val2 => val2_220
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_16(D) + 19116B] = val2_220;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_16(D) + 19124B] = val2_220;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _40 = a_20(D)->l0.me16x8[1].i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 2
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#91 => (uint8_t) _40
  # DEBUG ref => D#91
  # DEBUG D#319 => &h_16(D)->mb.cache.ref[0][28]
  # DEBUG dst => D#319
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => D#91
  _26 = _40 & 255;
  _206 = _26 * 16843009;
  val2_207 = (uint32_t) _206;
  # DEBUG val2 => val2_207
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_16(D) + 19132B] = val2_207;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_16(D) + 19140B] = val2_207;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _42 = MEM[(uint32_t *)a_20(D) + 5980B];
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _42
  # DEBUG D#318 => &h_16(D)->mb.cache.mv[0][12]
  # DEBUG dst => D#318
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => _42
  _190 = (long unsigned int) _42;
  _191 = _190 << 32;
  val64_192 = _190 + _191;
  # DEBUG val64 => val64_192
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19248B] = val64_192;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19256B] = val64_192;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19280B] = val64_192;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19288B] = val64_192;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _44 = MEM[(uint32_t *)a_20(D) + 6108B];
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 2
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _44
  # DEBUG D#317 => &h_16(D)->mb.cache.mv[0][28]
  # DEBUG dst => D#317
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => _44
  _175 = (long unsigned int) _44;
  _176 = _175 << 32;
  val64_177 = _175 + _176;
  # DEBUG val64 => val64_177
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19312B] = val64_177;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19320B] = val64_177;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19344B] = val64_177;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19352B] = val64_177;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 47> (<L54>);

<L13>:
  _50 = a_20(D)->l0.me8x16[0].i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#98 => (uint8_t) _50
  # DEBUG ref => D#98
  # DEBUG D#324 => &h_16(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#324
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => D#98
  _47 = _50 & 255;
  _282 = _47 * 257;
  # DEBUG val2 => (uint32_t) _282
  # DEBUG dy => 0
  # DEBUG dy => 0
  _1243 = (short unsigned int) _282;
  MEM[(uint16_t *)h_16(D) + 19116B] = _1243;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_16(D) + 19124B] = _1243;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)h_16(D) + 19132B] = _1243;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)h_16(D) + 19140B] = _1243;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _51 = a_20(D)->l0.me8x16[1].i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 2
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#92 => (uint8_t) _51
  # DEBUG ref => D#92
  # DEBUG D#323 => &h_16(D)->mb.cache.ref[0][14]
  # DEBUG dst => D#323
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => D#92
  _216 = _51 & 255;
  _263 = _216 * 257;
  # DEBUG val2 => (uint32_t) _263
  # DEBUG dy => 0
  # DEBUG dy => 0
  _1207 = (short unsigned int) _263;
  MEM[(uint16_t *)h_16(D) + 19118B] = _1207;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_16(D) + 19126B] = _1207;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)h_16(D) + 19134B] = _1207;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)h_16(D) + 19142B] = _1207;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _52 = MEM[(uint32_t *)a_20(D) + 6252B];
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => _52
  # DEBUG D#322 => &h_16(D)->mb.cache.mv[0][12]
  # DEBUG dst => D#322
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => _52
  _250 = (long unsigned int) _52;
  _251 = _250 << 32;
  val64_252 = _250 + _251;
  # DEBUG val64 => val64_252
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19248B] = val64_252;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19280B] = val64_252;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19312B] = val64_252;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19344B] = val64_252;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _54 = MEM[(uint32_t *)a_20(D) + 6380B];
  # DEBUG h => h_16(D)
  # DEBUG x => 2
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => _54
  # DEBUG D#321 => &h_16(D)->mb.cache.mv[0][14]
  # DEBUG dst => D#321
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => _54
  _237 = (long unsigned int) _54;
  _238 = _237 << 32;
  val64_239 = _237 + _238;
  # DEBUG val64 => val64_239
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19256B] = val64_239;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19288B] = val64_239;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19320B] = val64_239;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19352B] = val64_239;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4
  _9 = h_16(D)->param.i_threads;
  if (_9 > 1)
    goto <bb 19>;
  else
    goto <bb 18>;

  <bb 18>:
  goto <bb 59>;

  <bb 19>:
  # DEBUG l => 0
  goto <bb 50>;

<L14>:
  x264_log (h_16(D), 0, "internal error P_L0 and partition=%d\n", _38);
  goto <bb 47> (<L54>);

<L16>:
  _55 = a_20(D)->l0.me8x8[0].i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#99 => (uint8_t) _55
  # DEBUG ref => D#99
  # DEBUG D#328 => &h_16(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#328
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#99
  _43 = _55 & 255;
  _329 = _43 * 257;
  # DEBUG val2 => (uint32_t) _329
  # DEBUG dy => 0
  # DEBUG dy => 0
  _1383 = (short unsigned int) _329;
  MEM[(uint16_t *)h_16(D) + 19116B] = _1383;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_16(D) + 19124B] = _1383;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _56 = a_20(D)->l0.me8x8[1].i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 2
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#93 => (uint8_t) _56
  # DEBUG ref => D#93
  # DEBUG D#327 => &h_16(D)->mb.cache.ref[0][14]
  # DEBUG dst => D#327
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#93
  _41 = _56 & 255;
  _310 = _41 * 257;
  # DEBUG val2 => (uint32_t) _310
  # DEBUG dy => 0
  # DEBUG dy => 0
  _1365 = (short unsigned int) _310;
  MEM[(uint16_t *)h_16(D) + 19118B] = _1365;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_16(D) + 19126B] = _1365;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _57 = a_20(D)->l0.me8x8[2].i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 2
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#90 => (uint8_t) _57
  # DEBUG ref => D#90
  # DEBUG D#326 => &h_16(D)->mb.cache.ref[0][28]
  # DEBUG dst => D#326
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#90
  _214 = _57 & 255;
  _301 = _214 * 257;
  # DEBUG val2 => (uint32_t) _301
  # DEBUG dy => 0
  # DEBUG dy => 0
  _1347 = (short unsigned int) _301;
  MEM[(uint16_t *)h_16(D) + 19132B] = _1347;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_16(D) + 19140B] = _1347;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _58 = a_20(D)->l0.me8x8[3].i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 2
  # DEBUG y => 2
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#88 => (uint8_t) _58
  # DEBUG ref => D#88
  # DEBUG D#325 => &h_16(D)->mb.cache.ref[0][30]
  # DEBUG dst => D#325
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#88
  _215 = _58 & 255;
  _291 = _215 * 257;
  # DEBUG val2 => (uint32_t) _291
  # DEBUG dy => 0
  # DEBUG dy => 0
  _1329 = (short unsigned int) _291;
  MEM[(uint16_t *)h_16(D) + 19134B] = _1329;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_16(D) + 19142B] = _1329;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG i => 0

  <bb 22>:
  # i_1615 = PHI <i_60(24), 0(21)>
  # ivtmp_1434 = PHI <ivtmp_1442(24), 4(21)>
  # DEBUG i => i_1615
  x264_mb_cache_mv_p8x8 (h_16(D), a_20(D), i_1615);
  i_60 = i_1615 + 1;
  # DEBUG i => i_60
  # DEBUG i => i_60
  ivtmp_1442 = ivtmp_1434 - 1;
  if (ivtmp_1442 != 0)
    goto <bb 24>;
  else
    goto <bb 23>;

  <bb 23>:
  goto <bb 12>;

  <bb 24>:
  goto <bb 22>;

<L20>:
  h_16(D)->mb.i_partition = 16;
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG ref => 0
  # DEBUG D#330 => &h_16(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#330
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => 0
  # DEBUG val2 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_16(D) + 19116B] = 0;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_16(D) + 19124B] = 0;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_16(D) + 19132B] = 0;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_16(D) + 19140B] = 0;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _63 = MEM[(uint32_t *)h_16(D) + 20496B];
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => _63
  # DEBUG D#329 => &h_16(D)->mb.cache.mv[0][12]
  # DEBUG dst => D#329
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => _63
  _338 = (long unsigned int) _63;
  _339 = _338 << 32;
  val64_340 = _338 + _339;
  # DEBUG val64 => val64_340
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19248B] = val64_340;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19256B] = val64_340;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19280B] = val64_340;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19288B] = val64_340;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19312B] = val64_340;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19320B] = val64_340;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19344B] = val64_340;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19352B] = val64_340;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  goto <bb 47> (<L54>);

<L21>:
  x264_mb_load_mv_direct8x8 (h_16(D), 0);
  x264_mb_load_mv_direct8x8 (h_16(D), 1);
  x264_mb_load_mv_direct8x8 (h_16(D), 2);
  x264_mb_load_mv_direct8x8 (h_16(D), 3);
  goto <bb 47> (<L54>);

<L73>:

  <bb 28>:
  # i_1346 = PHI <0(27), i_69(38)>
  # ivtmp_337 = PHI <4(27), ivtmp_1670(38)>
  # DEBUG i => i_1346
  # DEBUG h => h_16(D)
  # DEBUG a => a_20(D)
  # DEBUG i => i_1346
  # DEBUG b_mvd => 1
  _552 = i_1346 & 1;
  x_553 = _552 * 2;
  # DEBUG x => x_553
  _554 = i_1346 >> 1;
  y_555 = _554 * 2;
  # DEBUG y => y_555
  _556 = h_16(D)->mb.i_sub_partition[i_1346];
  if (_556 == 12)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  x264_mb_load_mv_direct8x8 (h_16(D), i_1346);
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => 0
  _557 = x_553 + 12;
  _558 = y_555 * 8;
  _559 = _557 + _558;
  _560 = &h_16(D)->mb.cache.mvd[0][_559];
  # DEBUG dst => _560
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_560] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_560 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG mv => 0
  _570 = &h_16(D)->mb.cache.mvd[1][_559];
  # DEBUG dst => _570
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_570] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_570 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG b_skip => 1
  _580 = &h_16(D)->mb.cache.skip[_559];
  # DEBUG dst => _580
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => (uint8_t) 1
  # DEBUG val2 => (uint32_t) 257
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint16_t *)_580] = 257;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_580 + 8B] = 257;
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 36>;

  <bb 30>:
  _587 = x264_mb_partition_listX_table[0][_556];
  if (_587 != 0)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  _588 = a_20(D)->l0.i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#85 => (uint8_t) _588
  # DEBUG ref => D#85
  _589 = x_553 + 12;
  _590 = y_555 * 8;
  _591 = _589 + _590;
  _592 = &h_16(D)->mb.cache.ref[0][_591];
  # DEBUG dst => _592
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#85
  _593 = _588 & 255;
  _594 = _593 * 257;
  # DEBUG val2 => (uint32_t) _594
  # DEBUG dy => 0
  # DEBUG dy => 0
  _1555 = (short unsigned int) _594;
  MEM[(uint16_t *)_592] = _1555;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_592 + 8B] = _1555;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _602 = &a_20(D)->l0.me8x8[i_1346].mv;
  _603 = MEM[(uint32_t *)_602];
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _603
  _604 = &h_16(D)->mb.cache.mv[0][_591];
  # DEBUG dst => _604
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => _603
  _605 = (long unsigned int) _603;
  _606 = _605 << 32;
  val64_607 = _605 + _606;
  # DEBUG val64 => val64_607
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_604] = val64_607;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_604 + 32B] = val64_607;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 33>;

  <bb 32>:
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG ref => 255
  _617 = x_553 + 12;
  _618 = y_555 * 8;
  _619 = _617 + _618;
  _620 = &h_16(D)->mb.cache.ref[0][_619];
  # DEBUG dst => _620
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 255
  # DEBUG val2 => (uint32_t) 65535
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint16_t *)_620] = 65535;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_620 + 8B] = 65535;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => 0
  _627 = &h_16(D)->mb.cache.mv[0][_619];
  # DEBUG dst => _627
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_627] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_627 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => 0
  _637 = &h_16(D)->mb.cache.mvd[0][_619];
  # DEBUG dst => _637
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_637] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_637 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2

  <bb 33>:
  # prephitmp_1677 = PHI <_591(31), _619(32)>
  _648 = x264_mb_partition_listX_table[1][_556];
  if (_648 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;

  <bb 34>:
  _649 = a_20(D)->l1.i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG D#84 => (uint8_t) _649
  # DEBUG ref => D#84
  _653 = &h_16(D)->mb.cache.ref[1][prephitmp_1677];
  # DEBUG dst => _653
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#84
  _654 = _649 & 255;
  _655 = _654 * 257;
  # DEBUG val2 => (uint32_t) _655
  # DEBUG dy => 0
  # DEBUG dy => 0
  _1494 = (short unsigned int) _655;
  MEM[(uint16_t *)_653] = _1494;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_653 + 8B] = _1494;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _663 = &a_20(D)->l1.me8x8[i_1346].mv;
  _664 = MEM[(uint32_t *)_663];
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG mv => _664
  _665 = &h_16(D)->mb.cache.mv[1][prephitmp_1677];
  # DEBUG dst => _665
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => _664
  _666 = (long unsigned int) _664;
  _667 = _666 << 32;
  val64_668 = _666 + _667;
  # DEBUG val64 => val64_668
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_665] = val64_668;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_665 + 32B] = val64_668;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 36>;

  <bb 35>:
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG ref => 255
  _681 = &h_16(D)->mb.cache.ref[1][prephitmp_1677];
  # DEBUG dst => _681
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 255
  # DEBUG val2 => (uint32_t) 65535
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint16_t *)_681] = 65535;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_681 + 8B] = 65535;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG mv => 0
  _688 = &h_16(D)->mb.cache.mv[1][prephitmp_1677];
  # DEBUG dst => _688
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_688] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_688 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => x_553
  # DEBUG y => y_555
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG mv => 0
  _698 = &h_16(D)->mb.cache.mvd[1][prephitmp_1677];
  # DEBUG dst => _698
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_698] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_698 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2

  <bb 36>:
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG i => NULL
  # DEBUG b_mvd => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  i_69 = i_1346 + 1;
  # DEBUG i => i_69
  # DEBUG i => i_69
  ivtmp_1670 = ivtmp_337 - 1;
  if (ivtmp_1670 != 0)
    goto <bb 38>;
  else
    goto <bb 37>;

  <bb 37>:
  goto <bb 12>;

  <bb 38>:
  goto <bb 28>;

<L27>:
  _70 = h_16(D)->mb.i_partition;
  switch (_70) <default: <L36>, case 14: <L34>, case 15: <L35>, case 16: <L28>>

<L28>:
  switch (_17) <default: <L54>, case 8: <L29>, case 12: <L55>, case 16: <L31>>

<L29>:
  _72 = a_20(D)->l0.i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#94 => (uint8_t) _72
  # DEBUG ref => D#94
  # DEBUG D#305 => &h_16(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#305
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => D#94
  _62 = _72 & 255;
  _407 = _62 * 16843009;
  val2_408 = (uint32_t) _407;
  # DEBUG val2 => val2_408
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_16(D) + 19116B] = val2_408;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_16(D) + 19124B] = val2_408;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_16(D) + 19132B] = val2_408;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_16(D) + 19140B] = val2_408;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _74 = MEM[(uint32_t *)a_20(D) + 524B];
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => _74
  # DEBUG D#304 => &h_16(D)->mb.cache.mv[0][12]
  # DEBUG dst => D#304
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => _74
  _394 = (long unsigned int) _74;
  _395 = _394 << 32;
  val64_396 = _394 + _395;
  # DEBUG val64 => val64_396
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19248B] = val64_396;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19256B] = val64_396;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19280B] = val64_396;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19288B] = val64_396;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19312B] = val64_396;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19320B] = val64_396;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19344B] = val64_396;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19352B] = val64_396;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG ref => 255
  # DEBUG D#303 => &h_16(D)->mb.cache.ref[1][12]
  # DEBUG dst => D#303
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => 255
  # DEBUG val2 => 4294967295
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_16(D) + 19164B] = 4294967295;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_16(D) + 19172B] = 4294967295;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_16(D) + 19180B] = 4294967295;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_16(D) + 19188B] = 4294967295;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG mv => 0
  # DEBUG D#302 => &h_16(D)->mb.cache.mv[1][12]
  # DEBUG dst => D#302
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19440B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19448B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19472B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19480B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19504B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19512B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19536B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19544B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG mv => 0
  # DEBUG D#301 => &h_16(D)->mb.cache.mvd[1][12]
  # DEBUG dst => D#301
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19824B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19832B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19856B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19864B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19888B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19896B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19920B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19928B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  goto <bb 47> (<L54>);

<L55>:
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG ref => 255
  # DEBUG D#310 => &h_16(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#310
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => 255
  # DEBUG val2 => 4294967295
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_16(D) + 19116B] = 4294967295;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_16(D) + 19124B] = 4294967295;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_16(D) + 19132B] = 4294967295;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_16(D) + 19140B] = 4294967295;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => 0
  # DEBUG D#309 => &h_16(D)->mb.cache.mv[0][12]
  # DEBUG dst => D#309
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19248B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19256B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19280B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19288B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19312B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19320B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19344B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19352B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => 0
  # DEBUG D#308 => &h_16(D)->mb.cache.mvd[0][12]
  # DEBUG dst => D#308
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19632B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19640B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19664B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19672B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19696B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19704B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19728B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19736B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _81 = a_20(D)->l1.i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG D#87 => (uint8_t) _81
  # DEBUG ref => D#87
  # DEBUG D#307 => &h_16(D)->mb.cache.ref[1][12]
  # DEBUG dst => D#307
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => D#87
  _79 = _81 & 255;
  _439 = _79 * 16843009;
  val2_440 = (uint32_t) _439;
  # DEBUG val2 => val2_440
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_16(D) + 19164B] = val2_440;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_16(D) + 19172B] = val2_440;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_16(D) + 19180B] = val2_440;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_16(D) + 19188B] = val2_440;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _83 = MEM[(uint32_t *)a_20(D) + 6524B];
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG mv => _83
  # DEBUG D#306 => &h_16(D)->mb.cache.mv[1][12]
  # DEBUG dst => D#306
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => _83
  _425 = (long unsigned int) _83;
  _426 = _425 << 32;
  val64_427 = _425 + _426;
  # DEBUG val64 => val64_427
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19440B] = val64_427;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19448B] = val64_427;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19472B] = val64_427;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19480B] = val64_427;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19504B] = val64_427;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19512B] = val64_427;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19536B] = val64_427;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19544B] = val64_427;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  goto <bb 47> (<L54>);

<L31>:
  _75 = a_20(D)->l0.i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#95 => (uint8_t) _75
  # DEBUG ref => D#95
  # DEBUG D#314 => &h_16(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#314
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => D#95
  _53 = _75 & 255;
  _535 = _53 * 16843009;
  val2_536 = (uint32_t) _535;
  # DEBUG val2 => val2_536
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_16(D) + 19116B] = val2_536;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_16(D) + 19124B] = val2_536;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_16(D) + 19132B] = val2_536;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_16(D) + 19140B] = val2_536;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _77 = MEM[(uint32_t *)a_20(D) + 524B];
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => _77
  # DEBUG D#313 => &h_16(D)->mb.cache.mv[0][12]
  # DEBUG dst => D#313
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => _77
  _519 = (long unsigned int) _77;
  _520 = _519 << 32;
  val64_521 = _519 + _520;
  # DEBUG val64 => val64_521
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19248B] = val64_521;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19256B] = val64_521;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19280B] = val64_521;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19288B] = val64_521;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19312B] = val64_521;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19320B] = val64_521;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19344B] = val64_521;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19352B] = val64_521;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _78 = a_20(D)->l1.i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG D#89 => (uint8_t) _78
  # DEBUG ref => D#89
  # DEBUG D#312 => &h_16(D)->mb.cache.ref[1][12]
  # DEBUG dst => D#312
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => D#89
  _76 = _78 & 255;
  _493 = _76 * 16843009;
  val2_494 = (uint32_t) _493;
  # DEBUG val2 => val2_494
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_16(D) + 19164B] = val2_494;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_16(D) + 19172B] = val2_494;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_16(D) + 19180B] = val2_494;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_16(D) + 19188B] = val2_494;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _80 = MEM[(uint32_t *)a_20(D) + 6524B];
  # DEBUG h => h_16(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG mv => _80
  # DEBUG D#311 => &h_16(D)->mb.cache.mv[1][12]
  # DEBUG dst => D#311
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => _80
  _478 = (long unsigned int) _80;
  _479 = _478 << 32;
  val64_480 = _478 + _479;
  # DEBUG val64 => val64_480
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19440B] = val64_480;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19448B] = val64_480;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19472B] = val64_480;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19480B] = val64_480;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19504B] = val64_480;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19512B] = val64_480;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_16(D) + 19536B] = val64_480;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_16(D) + 19544B] = val64_480;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  goto <bb 47> (<L54>);

<L34>:
  x264_mb_cache_mv_b16x8 (h_16(D), a_20(D), 0, 1);
  x264_mb_cache_mv_b16x8 (h_16(D), a_20(D), 1, 1);
  goto <bb 47> (<L54>);

<L35>:
  x264_mb_cache_mv_b8x16 (h_16(D), a_20(D), 0, 1);
  x264_mb_cache_mv_b8x16 (h_16(D), a_20(D), 1, 1);
  goto <bb 47> (<L54>);

<L36>:
  x264_log (h_16(D), 0, "internal error (invalid MB type)\n");

<L54>:
  _89 = h_16(D)->param.i_threads;
  if (_89 > 1)
    goto <bb 48>;
  else
    goto <bb 18>;

  <bb 48>:
  _90 = h_16(D)->mb.i_type;
  _91 = (unsigned int) _90;
  if (_91 > 3)
    goto <bb 19>;
  else
    goto <bb 18>;

  <bb 49>:

  <bb 50>:
  # l_82 = PHI <0(19), l_133(49)>
  # DEBUG l => l_82
  _95 = h_16(D)->mb.cache.ref[l_82][12];
  ref_96 = (int) _95;
  # DEBUG ref => ref_96
  if (ref_96 < 0)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 51>:
  goto <bb 58>;

  <bb 52>:
  if (l_82 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  iftmp.148_97 = &h_16(D)->fref1;
  goto <bb 55>;

  <bb 54>:
  iftmp.148_98 = &h_16(D)->fref0;

  <bb 55>:
  # iftmp.148_6 = PHI <iftmp.148_97(53), iftmp.148_98(54)>
  _99 = h_16(D)->mb.b_interlaced;
  _100 = ref_96 >> _99;
  _101 = (long unsigned int) _100;
  _102 = _101 * 8;
  _103 = iftmp.148_6 + _102;
  _104 = *_103;
  completed_105 = _104->i_lines_completed;
  # DEBUG completed => completed_105
  _106 = h_16(D)->mb.cache.mv[l_82][39][1];
  _107 = (int) _106;
  _108 = 2 - _99;
  _109 = _107 >> _108;
  _110 = h_16(D)->mb.i_mb_y;
  _111 = _110 * 16;
  _112 = _109 + _111;
  if (completed_105 < _112)
    goto <bb 56>;
  else
    goto <bb 51>;

  <bb 56>:
  x264_log (h_16(D), 1, "internal error (MV out of thread range)\n");
  _114 = h_16(D)->mb.i_type;
  stderr.149_115 = stderr;
  # DEBUG __stream => stderr.149_115
  # DEBUG __fmt => "mb type: %d \n"
  __fprintf_chk (stderr.149_115, 1, "mb type: %d \n", _114);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  _117 = h_16(D)->mb.cache.mv[l_82][39][1];
  _118 = (int) _117;
  _119 = h_16(D)->mb.cache.mv[l_82][39][0];
  _120 = (int) _119;
  stderr.149_121 = stderr;
  # DEBUG __stream => stderr.149_121
  # DEBUG __fmt => "mv: l%dr%d (%d,%d) \n"
  __fprintf_chk (stderr.149_121, 1, "mv: l%dr%d (%d,%d) \n", l_82, ref_96, _120, _118);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  _122 = h_16(D)->mb.mv_max_spel[1];
  stderr.149_123 = stderr;
  # DEBUG __stream => stderr.149_123
  # DEBUG __fmt => "limit: %d \n"
  __fprintf_chk (stderr.149_123, 1, "limit: %d \n", _122);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  _124 = h_16(D)->mb.i_mb_y;
  _125 = h_16(D)->mb.i_mb_x;
  stderr.149_126 = stderr;
  # DEBUG __stream => stderr.149_126
  # DEBUG __fmt => "mb_xy: %d,%d \n"
  __fprintf_chk (stderr.149_126, 1, "mb_xy: %d,%d \n", _125, _124);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  stderr.149_127 = stderr;
  # DEBUG __stream => stderr.149_127
  # DEBUG __fmt => "completed: %d \n"
  __fprintf_chk (stderr.149_127, 1, "completed: %d \n", completed_105);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  x264_log (h_16(D), 1, "recovering by using intra mode\n");
  x264_mb_analyse_intra (h_16(D), a_20(D), 268435456);
  h_16(D)->mb.i_type = 2;
  _131 = a_20(D)->i_predict16x16;
  h_16(D)->mb.i_intra16x16_pred_mode = _131;
  # DEBUG h => h_16(D)
  # DEBUG a => a_20(D)
  _37 = a_20(D)->i_satd_i8x8chroma;
  if (_37 <= 268435455)
    goto <bb 51>;
  else
    goto <bb 57>;

  <bb 57>:
  x264_mb_analyse_intra_chroma.part.17 (h_16(D), a_20(D));

  <bb 58>:
  l_133 = l_82 + 1;
  # DEBUG l => l_133
  # DEBUG l => l_133
  _92 = h_16(D)->sh.i_type;
  _93 = _92 == 1;
  _94 = (int) _93;
  if (_94 >= l_133)
    goto <bb 49>;
  else
    goto <bb 18>;

  <bb 59>:
  return;

  <bb 60>:
  goto <bb 59>;

}



;; Function x264_slicetype_mb_cost.isra.19 (x264_slicetype_mb_cost.isra.19, funcdef_no=256, decl_uid=18372, cgraph_uid=134, symbol_order=641)


Analyzing loop at encoder/slicetype.c:223
encoder/slicetype.c:223:13: note: ===== analyze_loop_nest =====
encoder/slicetype.c:223:13: note: === vect_analyze_loop_form ===
encoder/slicetype.c:223:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [5, + , 4294967295] != 0
  bounds on difference of bases: -5 ... -5
  result:
    # of iterations 5, bounded by 5
encoder/slicetype.c:223:13: note: === vect_analyze_data_refs ===
Creating dr for h_19(D)->predict_8x8[i_445]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_19(D)
	offset from base address: 0
	constant offset from base address: 24032
	step: 8
	aligned to: 128
	base_object: *h_19(D)
	Access function 0: {3, +, 1}_1
	Access function 1: 192064
encoder/slicetype.c:223:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/slicetype.c:223:13: note: bad data references.

Analyzing loop at encoder/slicetype.c:214
encoder/slicetype.c:214:17: note: ===== analyze_loop_nest =====
encoder/slicetype.c:214:17: note: === vect_analyze_loop_form ===
encoder/slicetype.c:214:17: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/slicetype.c:214:17: note: === vect_analyze_data_refs ===
Creating dr for h_19(D)->predict_8x8c[i_470]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_19(D)
	offset from base address: 0
	constant offset from base address: 23952
	step: 8
	aligned to: 128
	base_object: *h_19(D)
	Access function 0: {0, +, 1}_2
	Access function 1: 191616
encoder/slicetype.c:214:17: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/slicetype.c:214:17: note: bad data references.

Analyzing loop at encoder/slicetype.c:201
encoder/slicetype.c:201:13: note: ===== analyze_loop_nest =====
encoder/slicetype.c:201:13: note: === vect_analyze_loop_form ===
encoder/slicetype.c:201:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/slicetype.c:201:13: note: === vect_analyze_data_refs ===
Creating dr for *_249
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: _237 + (sizetype) ((i_mb_x_20 + _27) * 8)
	offset from base address: 0
	constant offset from base address: -1(OVF)
	step: (ssizetype) i_stride_26
	aligned to: 128
	base_object: *_237 + (sizetype) ((i_mb_x_20 + _27) * 8)
	Access function 0: {-1B, +, (sizetype) i_stride_26}_3
Creating dr for *_246
analyze_innermost: success.
	base_address: &pix1
	offset from base address: 0
	constant offset from base address: 39
	step: 32
	aligned to: 128
	base_object: MEM[(uint8_t *)&pix1]
	Access function 0: {39B, +, 32}_3
encoder/slicetype.c:201:13: note: got vectype for stmt: _250 = *_249;
vector(16) unsigned char
encoder/slicetype.c:201:13: note: got vectype for stmt: *_246 = _250;
vector(16) unsigned char
encoder/slicetype.c:201:13: note: === vect_analyze_scalar_cycles ===
encoder/slicetype.c:201:13: note: Analyze phi: i_444 = PHI <i_251(43), 0(41)>

encoder/slicetype.c:201:13: note: Access function of PHI: {0, +, 1}_3
encoder/slicetype.c:201:13: note: step: 1,  init: 0
encoder/slicetype.c:201:13: note: Detected induction.
encoder/slicetype.c:201:13: note: Analyze phi: .MEM_418 = PHI <.MEM_394(43), .MEM_393(41)>

encoder/slicetype.c:201:13: note: Analyze phi: ivtmp_474 = PHI <ivtmp_473(43), 8(41)>

encoder/slicetype.c:201:13: note: Access function of PHI: {8, +, 4294967295}_3
encoder/slicetype.c:201:13: note: step: 4294967295,  init: 8
encoder/slicetype.c:201:13: note: Detected induction.
encoder/slicetype.c:201:13: note: === vect_pattern_recog ===
encoder/slicetype.c:201:13: note: vect_is_simple_use: operand i_444
encoder/slicetype.c:201:13: note: def_stmt: i_444 = PHI <i_251(43), 0(41)>
encoder/slicetype.c:201:13: note: type of def: 4.
encoder/slicetype.c:201:13: note: vect_is_simple_use: operand i_stride_26
encoder/slicetype.c:201:13: note: def_stmt: i_stride_26 = fenc_16->i_stride_lowres;
encoder/slicetype.c:201:13: note: type of def: 2.
encoder/slicetype.c:201:13: note: === vect_analyze_data_ref_accesses ===
encoder/slicetype.c:201:13: note: not consecutive access *_246 = _250;

encoder/slicetype.c:201:13: note: not vectorized: complicated access pattern.
encoder/slicetype.c:201:13: note: bad data access.

Analyzing loop at encoder/slicetype.c:145
encoder/slicetype.c:145:5: note: ===== analyze_loop_nest =====
encoder/slicetype.c:145:5: note: === vect_analyze_loop_form ===
encoder/slicetype.c:145:5: note: not vectorized: control flow in loop.
encoder/slicetype.c:145:5: note: bad loop form.
encoder/slicetype.c:43:12: note: vectorized 0 loops in function.
x264_slicetype_mb_cost.isra.19 (struct x264_t * h, int16_t * * ISRA.291, struct x264_frame_t * * frames, int p0, int p1, int b, int dist_scale_factor, int * do_search)
{
  struct x264_frame_t * fref0;
  struct x264_frame_t * fref1;
  struct x264_frame_t * fenc;
  const int b_bidir;
  const int i_mb_x;
  const int i_mb_y;
  const int i_mb_stride;
  const int i_mb_xy;
  const int i_stride;
  const int i_pel_offset;
  int16_t[2] * fenc_mvs[2];
  int * fenc_costs[2];
  uint8_t pix1[288];
  struct x264_me_t m[2];
  int i_bcost;
  int l;
  int i;
  int16_t * mvr;
  int stride1;
  int stride2;
  uint8_t * src1;
  uint8_t * src2;
  int stride1;
  int stride2;
  uint8_t * src1;
  uint8_t * src2;
  int16_t mvc[4][2];
  int i_mvc;
  int16_t[2] * fenc_mv;
  int stride1;
  int stride2;
  uint8_t * src1;
  uint8_t * src2;
  int i_icost;
  int b_intra;
  uint8_t edge[33];
  uint8_t * src;
  int satds[4];
  int satd;
  long unsigned int _2;
  long unsigned int _3;
  struct x264_frame_t * * _5;
  long unsigned int _8;
  long unsigned int _9;
  struct x264_frame_t * * _10;
  long unsigned int _13;
  long unsigned int _14;
  struct x264_frame_t * * _15;
  _Bool _17;
  struct x264_sps_t * _22;
  int _24;
  int _27;
  int _28;
  int _30;
  int _32;
  int iftmp.161_33;
  int _34;
  int _35;
  int16_t[2] * _36;
  long unsigned int _37;
  long unsigned int _38;
  int16_t[2] * _39;
  int _40;
  int _41;
  int16_t[2] * _42;
  int16_t[2] * _43;
  int * _44;
  int * _45;
  int * _46;
  int * _47;
  uint8_t[384] * _48;
  void (*<T1462>) (uint8_t *, int, uint8_t *, int, int) _49;
  uint8_t * _50;
  sizetype _51;
  uint8_t * _52;
  int _54;
  int _55;
  int _56;
  int _57;
  struct x264_sps_t * _58;
  int _59;
  int _60;
  int _61;
  int _62;
  int _63;
  int _64;
  int _65;
  int _66;
  int _67;
  _Bool _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  int _76;
  int _77;
  int _78;
  int _79;
  int _80;
  int _81;
  int16_t * _83;
  uint8_t * _84;
  uint8_t * _85;
  uint8_t * _86;
  uint8_t * _87;
  uint8_t * _88;
  uint8_t * _89;
  uint8_t * _90;
  uint8_t * _91;
  uint8_t * _92;
  int _93;
  int _94;
  int16_t[2] * _95;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _97;
  uint8_t * _98;
  uint8_t * _99;
  uint8_t * _100;
  uint8_t * _101;
  uint8_t * _102;
  uint8_t * _103;
  uint8_t * _104;
  uint8_t * _105;
  short int _106;
  int _107;
  int _108;
  int _109;
  int _110;
  short int _111;
  int _112;
  int _113;
  int _114;
  int _115;
  int _116;
  int _117;
  int _118;
  int _119;
  int iftmp.82_120;
  int _121;
  int _122;
  int iftmp.82_123;
  int iftmp.82_124;
  int iftmp.82_125;
  uint8_t * (*<T1451>) (uint8_t *, int *, uint8_t * *, int, int, int, int, int) _126;
  int _127;
  int iftmp.82_128;
  int iftmp.82_129;
  uint8_t * (*<T1451>) (uint8_t *, int *, uint8_t * *, int, int, int, int, int) _131;
  int _132;
  int iftmp.82_133;
  int iftmp.82_134;
  void (*<T1459>) (uint8_t *, int, uint8_t *, int, uint8_t *, int, int) _136;
  int stride2.162_137;
  int stride1.163_138;
  int iftmp.161_139;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _140;
  uint8_t * _141;
  int _143;
  int _144;
  int _145;
  uint8_t * (*<T1451>) (uint8_t *, int *, uint8_t * *, int, int, int, int, int) _146;
  int _147;
  uint8_t * (*<T1451>) (uint8_t *, int *, uint8_t * *, int, int, int, int, int) _149;
  int _150;
  void (*<T1459>) (uint8_t *, int, uint8_t *, int, uint8_t *, int, int) _152;
  int stride2.164_153;
  int stride1.165_154;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _155;
  uint8_t * _156;
  long unsigned int _161;
  long unsigned int _162;
  int * _164;
  int _165;
  struct x264_sps_t * _166;
  int _167;
  int _168;
  unsigned int _169;
  int _170;
  int _171;
  int16_t[2] * _173;
  long unsigned int _174;
  long unsigned int _175;
  uint32_t * _176;
  unsigned int _177;
  int16_t[2] * _179;
  sizetype _180;
  int16_t[2] * _181;
  unsigned int _182;
  int _184;
  int _185;
  int16_t[2] * _187;
  sizetype _188;
  sizetype _189;
  int16_t[2] * _190;
  unsigned int _191;
  int16_t[2] * _193;
  struct x264_me_t * _194;
  int _196;
  int _197;
  int16_t[2] * _198;
  unsigned int _199;
  int _200;
  int16_t[2] * _201;
  int * _203;
  int _204;
  int16_t[2] * _205;
  unsigned int _206;
  int * _207;
  int _208;
  unsigned int _213;
  unsigned int _214;
  uint8_t * (*<T1451>) (uint8_t *, int *, uint8_t * *, int, int, int, int, int) _215;
  short int _216;
  int _217;
  short int _218;
  int _219;
  int _220;
  uint8_t * (*<T1451>) (uint8_t *, int *, uint8_t * *, int, int, int, int, int) _222;
  short int _223;
  int _224;
  short int _225;
  int _226;
  int _227;
  void (*<T1459>) (uint8_t *, int, uint8_t *, int, uint8_t *, int, int) _229;
  int stride2.166_230;
  int stride1.167_231;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _232;
  uint8_t * _233;
  int _234;
  int _236;
  uint8_t * _237;
  sizetype _238;
  sizetype _240;
  sizetype _241;
  uint8_t * _242;
  int _244;
  sizetype _245;
  uint8_t * _246;
  int _247;
  sizetype _248;
  uint8_t * _249;
  unsigned char _250;
  void (*<T1429>) (uint8_t *, uint8_t *, int *) _252;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _253;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _254;
  uint8_t * _255;
  void (*<T1367>) (uint8_t *) _256;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _257;
  uint8_t * _258;
  int _259;
  void (*<T1367>) (uint8_t *) _261;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _262;
  uint8_t * _263;
  int _264;
  int _267;
  int _268;
  int _269;
  int _270;
  int _271;
  void (*<T136f>) (uint8_t *, uint8_t *) _274;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _275;
  uint8_t * _276;
  uint16_t * _282;
  long unsigned int _283;
  uint16_t * _284;
  short unsigned int _285;
  uint16_t * _286;
  long unsigned int _287;
  uint16_t * _288;
  short unsigned int _289;
  _Bool _291;
  _Bool _293;
  struct x264_sps_t * _295;
  int _296;
  int _297;
  int _298;
  int _299;
  int _300;
  int _301;
  int _302;
  int _303;
  int _308;
  unsigned int ivtmp_310;
  _Bool _442;
  unsigned int pretmp_448;
  int pretmp_452;
  unsigned int ivtmp_455;
  int prephitmp_457;
  unsigned int prephitmp_458;
  int prephitmp_459;
  int pretmp_462;
  unsigned int ivtmp_473;
  unsigned int ivtmp_474;
  unsigned int ivtmp_475;
  unsigned int ivtmp_476;

  <bb 2>:
  # DEBUG a s=> a
  _2 = (long unsigned int) p0_1(D);
  _3 = _2 * 8;
  _5 = frames_4(D) + _3;
  fref0_6 = *_5;
  # DEBUG fref0 => fref0_6
  _8 = (long unsigned int) p1_7(D);
  _9 = _8 * 8;
  _10 = frames_4(D) + _9;
  fref1_11 = *_10;
  # DEBUG fref1 => fref1_11
  _13 = (long unsigned int) b_12(D);
  _14 = _13 * 8;
  _15 = frames_4(D) + _14;
  fenc_16 = *_15;
  # DEBUG fenc => fenc_16
  # DEBUG D#388 => p1_7(D) > b_12(D)
  # DEBUG b_bidir => (const int) D#388
  i_mb_x_20 = h_19(D)->mb.i_mb_x;
  # DEBUG i_mb_x => i_mb_x_20
  i_mb_y_21 = h_19(D)->mb.i_mb_y;
  # DEBUG i_mb_y => i_mb_y_21
  _22 = h_19(D)->sps;
  i_mb_stride_23 = _22->i_mb_width;
  # DEBUG i_mb_stride => i_mb_stride_23
  _24 = i_mb_y_21 * i_mb_stride_23;
  i_mb_xy_25 = i_mb_x_20 + _24;
  # DEBUG i_mb_xy => i_mb_xy_25
  i_stride_26 = fenc_16->i_stride_lowres;
  # DEBUG i_stride => i_stride_26
  _27 = i_mb_y_21 * i_stride_26;
  _28 = i_mb_x_20 + _27;
  i_pel_offset_29 = _28 * 8;
  # DEBUG i_pel_offset => i_pel_offset_29
  _30 = h_19(D)->param.analyse.b_weighted_bipred;
  if (_30 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _32 = dist_scale_factor_31(D) >> 2;
  iftmp.161_33 = 64 - _32;

  <bb 4>:
  # iftmp.161_139 = PHI <32(2), iftmp.161_33(3)>
  # DEBUG i_bipred_weight => iftmp.161_139
  _34 = b_12(D) - p0_1(D);
  _35 = _34 + -1;
  _36 = fenc_16->lowres_mvs[0][_35];
  _37 = (long unsigned int) i_mb_xy_25;
  _38 = _37 * 4;
  _39 = _36 + _38;
  fenc_mvs[0] = _39;
  _40 = p1_7(D) - b_12(D);
  _41 = _40 + -1;
  _42 = fenc_16->lowres_mvs[1][_41];
  _43 = _42 + _38;
  fenc_mvs[1] = _43;
  _44 = fenc_16->lowres_mv_costs[0][_35];
  _45 = _44 + _38;
  fenc_costs[0] = _45;
  _46 = fenc_16->lowres_mv_costs[1][_41];
  _47 = _46 + _38;
  fenc_costs[1] = _47;
  # DEBUG pix2 => &MEM[(void *)&pix1 + 8B]
  # DEBUG i_bcost => 268435456
  _48 = &h_19(D)->mb.pic.fenc_buf;
  h_19(D)->mb.pic.p_fenc[0] = _48;
  _49 = h_19(D)->mc.copy[3];
  _50 = fenc_16->lowres[0];
  _51 = (sizetype) i_pel_offset_29;
  _52 = _50 + _51;
  _49 (_48, 16, _52, i_stride_26, 8);
  _308 = p1_7(D) | b_12(D);
  _54 = p0_1(D) | _308;
  if (_54 == 0)
    goto <bb 39> (lowres_intra_mb);
  else
    goto <bb 5>;

  <bb 5>:
  _55 = h_19(D)->mb.i_mb_x;
  _56 = _55 * -8;
  _57 = _56 + -4;
  h_19(D)->mb.mv_min_fpel[0] = _57;
  _58 = h_19(D)->sps;
  _59 = _58->i_mb_width;
  _60 = _59 - _55;
  _61 = _60 + -1;
  _62 = _61 * 8;
  _63 = _62 + 4;
  h_19(D)->mb.mv_max_fpel[0] = _63;
  _64 = _56 + -12;
  _65 = _64 * 4;
  h_19(D)->mb.mv_min_spel[0] = _65;
  _66 = _62 + 12;
  _67 = _66 * 4;
  h_19(D)->mb.mv_max_spel[0] = _67;
  _69 = _59 + -2;
  if (_55 >= _69)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  _70 = h_19(D)->mb.i_mb_y;
  _71 = _70 * -8;
  _72 = _71 + -4;
  h_19(D)->mb.mv_min_fpel[1] = _72;
  _73 = _58->i_mb_height;
  _74 = _73 - _70;
  _75 = _74 + -1;
  _76 = _75 * 8;
  _77 = _76 + 4;
  h_19(D)->mb.mv_max_fpel[1] = _77;
  _78 = _71 + -12;
  _79 = _78 * 4;
  h_19(D)->mb.mv_min_spel[1] = _79;
  _80 = _76 + 12;
  _81 = _80 * 4;
  h_19(D)->mb.mv_max_spel[1] = _81;

  <bb 7>:
  m[0].i_pixel = 3;
  _83 = *ISRA.291_414(D);
  m[0].p_cost_mv = _83;
  m[0].i_stride[0] = i_stride_26;
  _84 = h_19(D)->mb.pic.p_fenc[0];
  m[0].p_fenc[0] = _84;
  _85 = fref0_6->lowres[0];
  _86 = _85 + _51;
  m[0].p_fref[0] = _86;
  _87 = fref0_6->lowres[1];
  _88 = _87 + _51;
  m[0].p_fref[1] = _88;
  _89 = fref0_6->lowres[2];
  _90 = _89 + _51;
  m[0].p_fref[2] = _90;
  _91 = fref0_6->lowres[3];
  _92 = _91 + _51;
  m[0].p_fref[3] = _92;
  if (p1_7(D) > b_12(D))
    goto <bb 8>;
  else
    goto <bb 20>;

  <bb 8>:
  _93 = p1_7(D) - p0_1(D);
  _94 = _93 + -1;
  _95 = fref1_11->lowres_mvs[0][_94];
  mvr_96 = _95 + _38;
  # DEBUG mvr => mvr_96
  # DEBUG mv0$0 => 0
  # DEBUG mv0$1 => 0
  _97 = h_19(D)->mc.memcpy_aligned;
  _97 (&m[1], &m[0], 128);
  _98 = fref1_11->lowres[0];
  _99 = _98 + _51;
  m[1].p_fref[0] = _99;
  _100 = fref1_11->lowres[1];
  _101 = _100 + _51;
  m[1].p_fref[1] = _101;
  _102 = fref1_11->lowres[2];
  _103 = _102 + _51;
  m[1].p_fref[2] = _103;
  _104 = fref1_11->lowres[3];
  _105 = _104 + _51;
  m[1].p_fref[3] = _105;
  _106 = *mvr_96;
  _107 = (int) _106;
  _108 = dist_scale_factor_31(D) * _107;
  _109 = _108 + 128;
  _110 = _109 >> 8;
  # DEBUG dmv$0$0 => _110
  _111 = MEM[(int16_t *)mvr_96 + 2B];
  _112 = (int) _111;
  _113 = dist_scale_factor_31(D) * _112;
  _114 = _113 + 128;
  _115 = _114 >> 8;
  # DEBUG dmv$0$1 => _115
  _116 = _110 - _107;
  # DEBUG dmv$1$0 => _116
  _117 = _115 - _112;
  # DEBUG dmv$1$1 => _117
  _118 = h_19(D)->mb.mv_max_spel[0];
  _119 = h_19(D)->mb.mv_min_spel[0];
  # DEBUG v => _110
  # DEBUG i_min => _119
  # DEBUG i_max => _118
  if (_110 >= _119)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  iftmp.82_120 = MIN_EXPR <_110, _118>;

  <bb 10>:
  # iftmp.82_128 = PHI <_119(8), iftmp.82_120(9)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  # DEBUG dmv$0$0 => iftmp.82_128
  _121 = h_19(D)->mb.mv_max_spel[1];
  _122 = h_19(D)->mb.mv_min_spel[1];
  # DEBUG v => _115
  # DEBUG i_min => _122
  # DEBUG i_max => _121
  if (_115 >= _122)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  iftmp.82_123 = MIN_EXPR <_115, _121>;

  <bb 12>:
  # iftmp.82_129 = PHI <_122(10), iftmp.82_123(11)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  # DEBUG dmv$0$1 => iftmp.82_129
  # DEBUG v => _116
  # DEBUG i_min => _119
  # DEBUG i_max => _118
  if (_116 >= _119)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  iftmp.82_124 = MIN_EXPR <_116, _118>;

  <bb 14>:
  # iftmp.82_133 = PHI <_119(12), iftmp.82_124(13)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  # DEBUG dmv$1$0 => iftmp.82_133
  # DEBUG v => _117
  # DEBUG i_min => _122
  # DEBUG i_max => _121
  if (_117 >= _122)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  iftmp.82_125 = MIN_EXPR <_117, _121>;

  <bb 16>:
  # iftmp.82_134 = PHI <_122(14), iftmp.82_125(15)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  # DEBUG dmv$1$1 => iftmp.82_134
  stride1 = 16;
  stride2 = 16;
  _126 = h_19(D)->mc.get_ref;
  _127 = m[0].i_stride[0];
  src1_130 = _126 (&pix1, &stride1, &m[0].p_fref, _127, iftmp.82_128, iftmp.82_129, 8, 8);
  # DEBUG src1 => src1_130
  _131 = h_19(D)->mc.get_ref;
  _132 = m[1].i_stride[0];
  src2_135 = _131 (&MEM[(void *)&pix1 + 8B], &stride2, &m[1].p_fref, _132, iftmp.82_133, iftmp.82_134, 8, 8);
  # DEBUG src2 => src2_135
  _136 = h_19(D)->mc.avg[3];
  stride2.162_137 = stride2;
  stride1.163_138 = stride1;
  _136 (&pix1, 16, src1_130, stride1.163_138, src2_135, stride2.162_137, iftmp.161_139);
  _140 = h_19(D)->pixf.mbcmp[3];
  _141 = m[0].p_fenc[0];
  i_bcost_142 = _140 (_141, 16, &pix1, 16);
  # DEBUG i_cost => i_bcost_142
  if (i_bcost_142 <= 268435455)
    goto <bb 18>;
  else
    goto <bb 17>;

  <bb 17>:

  <bb 18>:
  # i_bcost_158 = PHI <268435456(17), i_bcost_142(16)>
  # DEBUG i_bcost => i_bcost_158
  stride1 ={v} {CLOBBER};
  stride2 ={v} {CLOBBER};
  _143 = iftmp.82_128 | iftmp.82_129;
  _144 = iftmp.82_133 | _143;
  _145 = iftmp.82_134 | _144;
  if (_145 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:
  stride1 = 16;
  stride2 = 16;
  _146 = h_19(D)->mc.get_ref;
  _147 = m[0].i_stride[0];
  src1_148 = _146 (&pix1, &stride1, &m[0].p_fref, _147, 0, 0, 8, 8);
  # DEBUG src1 => src1_148
  _149 = h_19(D)->mc.get_ref;
  _150 = m[1].i_stride[0];
  src2_151 = _149 (&MEM[(void *)&pix1 + 8B], &stride2, &m[1].p_fref, _150, 0, 0, 8, 8);
  # DEBUG src2 => src2_151
  _152 = h_19(D)->mc.avg[3];
  stride2.164_153 = stride2;
  stride1.165_154 = stride1;
  _152 (&pix1, 16, src1_148, stride1.165_154, src2_151, stride2.164_153, iftmp.161_139);
  _155 = h_19(D)->pixf.mbcmp[3];
  _156 = m[0].p_fenc[0];
  i_bcost_157 = _155 (_156, 16, &pix1, 16);
  # DEBUG i_cost => i_bcost_157
  i_bcost_278 = MIN_EXPR <i_bcost_157, i_bcost_158>;
  # DEBUG i_bcost => i_bcost_278
  stride1 ={v} {CLOBBER};
  stride2 ={v} {CLOBBER};

  <bb 20>:
  # i_bcost_313 = PHI <i_bcost_278(19), i_bcost_158(18), 268435456(7)>
  # DEBUG l => 0
  # DEBUG i_bcost => i_bcost_313
  _174 = (long unsigned int) i_mb_stride_23;
  _175 = _174 * 4;
  _180 = _175 + 18446744073709551612;
  _188 = _174 + 1;
  _189 = _188 * 4;

  <bb 21>:
  # l_428 = PHI <l_212(34), 0(20)>
  # i_bcost_469 = PHI <i_bcost_211(34), i_bcost_313(20)>
  # DEBUG l => l_428
  # DEBUG i_bcost => i_bcost_469
  mvc = {};
  # DEBUG i_mvc => 0
  fenc_mv_160 = fenc_mvs[l_428];
  # DEBUG fenc_mv => fenc_mv_160
  _161 = (long unsigned int) l_428;
  _162 = _161 * 4;
  _164 = do_search_163(D) + _162;
  _165 = *_164;
  if (_165 != 0)
    goto <bb 22>;
  else
    goto <bb 32>;

  <bb 22>:
  _166 = h_19(D)->sps;
  _167 = _166->i_mb_width;
  _168 = _167 + -1;
  if (i_mb_x_20 < _168)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  _169 = MEM[(uint32_t *)fenc_mv_160 + 4B];
  MEM[(uint32_t *)&mvc] = _169;
  # DEBUG i_mvc => 1

  <bb 24>:
  # i_mvc_172 = PHI <0(22), 1(23)>
  # DEBUG i_mvc => i_mvc_172
  _170 = _166->i_mb_height;
  _171 = _170 + -1;
  if (i_mb_y_21 < _171)
    goto <bb 25>;
  else
    goto <bb 29>;

  <bb 25>:
  _173 = &mvc[i_mvc_172];
  _176 = fenc_mv_160 + _175;
  _177 = *_176;
  MEM[(uint32_t *)_173] = _177;
  i_mvc_178 = i_mvc_172 + 1;
  # DEBUG i_mvc => i_mvc_178
  if (i_mb_x_20 > 0)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  _179 = &mvc[i_mvc_178];
  _181 = fenc_mv_160 + _180;
  _182 = MEM[(uint32_t *)_181];
  MEM[(uint32_t *)_179] = _182;
  i_mvc_183 = i_mvc_172 + 2;
  # DEBUG i_mvc => i_mvc_183

  <bb 27>:
  # i_mvc_186 = PHI <i_mvc_178(25), i_mvc_183(26)>
  # DEBUG i_mvc => i_mvc_186
  _184 = _166->i_mb_width;
  _185 = _184 + -1;
  if (i_mb_x_20 < _185)
    goto <bb 28>;
  else
    goto <bb 29>;

  <bb 28>:
  _187 = &mvc[i_mvc_186];
  _190 = fenc_mv_160 + _189;
  _191 = MEM[(uint32_t *)_190];
  MEM[(uint32_t *)_187] = _191;
  i_mvc_192 = i_mvc_186 + 1;
  # DEBUG i_mvc => i_mvc_192

  <bb 29>:
  # i_mvc_195 = PHI <i_mvc_172(24), i_mvc_186(27), i_mvc_192(28)>
  # DEBUG i_mvc => i_mvc_195
  _193 = &m[l_428].mvp;
  # DEBUG dst => _193
  # DEBUG a => &mvc[0]
  # DEBUG b => &mvc[1]
  # DEBUG c => &mvc[2]
  __asm__("movd   %1,    %%mm0 
movd   %2,    %%mm1 
movq   %%mm0, %%mm3 
movd   %3,    %%mm2 
pmaxsw %%mm1, %%mm0 
pminsw %%mm3, %%mm1 
pminsw %%mm2, %%mm0 
pmaxsw %%mm1, %%mm0 
movd   %%mm0, %0    
" : "=m" MEM[(uint32_t *)_193] : "m" MEM[(uint32_t *)&mvc], "m" MEM[(uint32_t *)&mvc + 4B], "m" MEM[(uint32_t *)&mvc + 8B]);
  # DEBUG dst => NULL
  # DEBUG a => NULL
  # DEBUG b => NULL
  # DEBUG c => NULL
  _194 = &m[l_428];
  # DEBUG h => h_19(D)
  # DEBUG m => _194
  # DEBUG mvc => &mvc
  # DEBUG i_mvc => i_mvc_195
  x264_me_search_ref (h_19(D), _194, &mvc, i_mvc_195, 0B);
  # DEBUG h => NULL
  # DEBUG m => NULL
  # DEBUG mvc => NULL
  # DEBUG i_mvc => NULL
  _196 = m[l_428].cost;
  _197 = _196 + -2;
  m[l_428].cost = _197;
  _198 = &m[l_428].mv;
  _199 = MEM[(uint32_t *)_198];
  if (_199 != 0)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  _200 = _196 + 3;
  m[l_428].cost = _200;
  pretmp_448 = MEM[(uint32_t *)_198];

  <bb 31>:
  # prephitmp_458 = PHI <_199(29), pretmp_448(30)>
  _201 = fenc_mvs[l_428];
  MEM[(uint32_t *)_201] = prephitmp_458;
  _203 = fenc_costs[l_428];
  _204 = m[l_428].cost;
  *_203 = _204;
  pretmp_452 = m[l_428].cost;
  goto <bb 33>;

  <bb 32>:
  _205 = &m[l_428].mv;
  _206 = MEM[(uint32_t *)fenc_mv_160];
  MEM[(uint32_t *)_205] = _206;
  _207 = fenc_costs[l_428];
  _208 = *_207;
  m[l_428].cost = _208;

  <bb 33>:
  # prephitmp_457 = PHI <pretmp_452(31), _208(32)>
  i_bcost_211 = MIN_EXPR <prephitmp_457, i_bcost_469>;
  # DEBUG i_bcost => i_bcost_211
  mvc ={v} {CLOBBER};
  l_212 = l_428 + 1;
  # DEBUG l => l_212
  # DEBUG l => l_212
  # DEBUG i_bcost => i_bcost_211
  _17 = p1_7(D) > b_12(D);
  b_bidir_18 = (const int) _17;
  if (b_bidir_18 >= l_212)
    goto <bb 34>;
  else
    goto <bb 35>;

  <bb 34>:
  goto <bb 21>;

  <bb 35>:
  # i_bcost_479 = PHI <i_bcost_211(33)>
  if (p1_7(D) > b_12(D))
    goto <bb 36>;
  else
    goto <bb 40>;

  <bb 36>:
  _213 = MEM[(uint32_t *)&m + 124B];
  if (_213 != 0)
    goto <bb 38>;
  else
    goto <bb 37>;

  <bb 37>:
  _214 = MEM[(uint32_t *)&m + 252B];
  if (_214 != 0)
    goto <bb 38>;
  else
    goto <bb 61>;

  <bb 38>:
  stride1 = 16;
  stride2 = 16;
  _215 = h_19(D)->mc.get_ref;
  _216 = m[0].mv[1];
  _217 = (int) _216;
  _218 = m[0].mv[0];
  _219 = (int) _218;
  _220 = m[0].i_stride[0];
  src1_221 = _215 (&pix1, &stride1, &m[0].p_fref, _220, _219, _217, 8, 8);
  # DEBUG src1 => src1_221
  _222 = h_19(D)->mc.get_ref;
  _223 = m[1].mv[1];
  _224 = (int) _223;
  _225 = m[1].mv[0];
  _226 = (int) _225;
  _227 = m[1].i_stride[0];
  src2_228 = _222 (&MEM[(void *)&pix1 + 8B], &stride2, &m[1].p_fref, _227, _226, _224, 8, 8);
  # DEBUG src2 => src2_228
  _229 = h_19(D)->mc.avg[3];
  stride2.166_230 = stride2;
  stride1.167_231 = stride1;
  _229 (&pix1, 16, src1_221, stride1.167_231, src2_228, stride2.166_230, iftmp.161_139);
  _232 = h_19(D)->pixf.mbcmp[3];
  _233 = m[0].p_fenc[0];
  _234 = _232 (_233, 16, &pix1, 16);
  i_bcost_235 = _234 + 5;
  # DEBUG i_cost => i_bcost_235
  i_bcost_309 = MIN_EXPR <i_bcost_479, i_bcost_235>;
  # DEBUG i_bcost => i_bcost_309
  stride1 ={v} {CLOBBER};
  stride2 ={v} {CLOBBER};
  goto <bb 61>;

lowres_intra_mb:
  # DEBUG i_bcost => 268435456
  if (p1_7(D) <= b_12(D))
    goto <bb 40>;
  else
    goto <bb 60>;

  <bb 40>:
  # i_bcost_422 = PHI <268435456(39), i_bcost_479(35)>
  # DEBUG i_bcost => i_bcost_422
  _236 = fenc_16->b_intra_calculated;
  if (_236 == 0)
    goto <bb 41>;
  else
    goto <bb 55>;

  <bb 41>:
  # DEBUG pix => &pix1[39]
  _237 = fenc_16->lowres[0];
  _238 = _51 + 18446744073709551615;
  src_239 = _237 + _238;
  # DEBUG src => src_239
  # DEBUG intra_penalty => 5
  _240 = (sizetype) i_stride_26;
  _241 = -_240;
  _242 = src_239 + _241;
  # DEBUG __dest => &MEM[(void *)&pix1 + 7B]
  # DEBUG __src => _242
  # DEBUG __len => 17
  __builtin_memcpy (&MEM[(void *)&pix1 + 7B], _242, 17);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 42>:
  # i_444 = PHI <i_251(43), 0(41)>
  # ivtmp_474 = PHI <ivtmp_473(43), 8(41)>
  # DEBUG i => i_444
  _244 = i_444 * 32;
  _245 = (sizetype) _244;
  _246 = &pix1[39] + _245;
  _247 = i_stride_26 * i_444;
  _248 = (sizetype) _247;
  _249 = src_239 + _248;
  _250 = *_249;
  *_246 = _250;
  i_251 = i_444 + 1;
  # DEBUG i => i_251
  # DEBUG i => i_251
  ivtmp_473 = ivtmp_474 - 1;
  if (ivtmp_473 != 0)
    goto <bb 43>;
  else
    goto <bb 44>;

  <bb 43>:
  goto <bb 42>;

  <bb 44>:
  # DEBUG pix => &MEM[(void *)&pix1 + 40B]
  _252 = h_19(D)->pixf.intra_satd_x3_8x8c;
  if (_252 != 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 45>:
  _253 = h_19(D)->pixf.mbcmp[0];
  _254 = h_19(D)->pixf.satd[0];
  if (_253 == _254)
    goto <bb 47>;
  else
    goto <bb 46>;

  <bb 46>:
  goto <bb 49>;

  <bb 47>:
  _255 = h_19(D)->mb.pic.p_fenc[0];
  _252 (_255, &MEM[(void *)&pix1 + 40B], &satds);
  _256 = h_19(D)->predict_8x8c[3];
  _256 (&MEM[(void *)&pix1 + 40B]);
  _257 = h_19(D)->pixf.satd[3];
  _258 = h_19(D)->mb.pic.p_fenc[0];
  _259 = _257 (&MEM[(void *)&pix1 + 40B], 32, _258, 16);
  satds[3] = _259;
  goto <bb 51>;

  <bb 48>:

  <bb 49>:
  # i_470 = PHI <0(46), i_265(48)>
  # ivtmp_476 = PHI <4(46), ivtmp_475(48)>
  # DEBUG i => i_470
  _261 = h_19(D)->predict_8x8c[i_470];
  _261 (&MEM[(void *)&pix1 + 40B]);
  _262 = h_19(D)->pixf.mbcmp[3];
  _263 = h_19(D)->mb.pic.p_fenc[0];
  _264 = _262 (&MEM[(void *)&pix1 + 40B], 32, _263, 16);
  satds[i_470] = _264;
  i_265 = i_470 + 1;
  # DEBUG i => i_265
  # DEBUG i => i_265
  ivtmp_475 = ivtmp_476 - 1;
  if (ivtmp_475 != 0)
    goto <bb 48>;
  else
    goto <bb 50>;

  <bb 50>:
  pretmp_462 = satds[3];

  <bb 51>:
  # prephitmp_459 = PHI <_259(47), pretmp_462(50)>
  _267 = satds[2];
  _268 = MIN_EXPR <_267, prephitmp_459>;
  _269 = satds[1];
  _270 = MIN_EXPR <_268, _269>;
  _271 = satds[0];
  i_icost_272 = MIN_EXPR <_270, _271>;
  # DEBUG i_icost => i_icost_272
  x264_predict_8x8_filter (&MEM[(void *)&pix1 + 40B], &edge, 15, 15);
  # DEBUG i => 3
  # DEBUG i_icost => i_icost_272
  # DEBUG i => 3

  <bb 52>:
  # i_445 = PHI <i_280(53), 3(51)>
  # i_icost_434 = PHI <i_icost_279(53), i_icost_272(51)>
  # ivtmp_310 = PHI <ivtmp_455(53), 6(51)>
  # DEBUG i_icost => i_icost_434
  # DEBUG i => i_445
  _274 = h_19(D)->predict_8x8[i_445];
  _274 (&MEM[(void *)&pix1 + 40B], &edge);
  _275 = h_19(D)->pixf.mbcmp[3];
  _276 = h_19(D)->mb.pic.p_fenc[0];
  satd_277 = _275 (&MEM[(void *)&pix1 + 40B], 32, _276, 16);
  # DEBUG satd => satd_277
  i_icost_279 = MIN_EXPR <satd_277, i_icost_434>;
  # DEBUG i_icost => i_icost_279
  i_280 = i_445 + 1;
  # DEBUG i => i_280
  # DEBUG i_icost => i_icost_279
  # DEBUG i => i_280
  ivtmp_455 = ivtmp_310 - 1;
  if (ivtmp_455 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  goto <bb 52>;

  <bb 54>:
  # i_icost_478 = PHI <i_icost_279(52)>
  i_bcost_281 = i_icost_478 + 5;
  # DEBUG i_icost => i_bcost_281
  _282 = fenc_16->i_intra_cost;
  _283 = _37 * 2;
  _284 = _282 + _283;
  _285 = (short unsigned int) i_bcost_281;
  *_284 = _285;
  edge ={v} {CLOBBER};
  satds ={v} {CLOBBER};
  goto <bb 56>;

  <bb 55>:
  _286 = fenc_16->i_intra_cost;
  _287 = _37 * 2;
  _288 = _286 + _287;
  _289 = *_288;
  i_bcost_290 = (int) _289;
  # DEBUG i_icost => i_bcost_290

  <bb 56>:
  # i_bcost_292 = PHI <i_bcost_281(54), i_bcost_290(55)>
  # DEBUG i_icost => i_bcost_292
  # DEBUG D#387 => i_bcost_292 < i_bcost_422
  # DEBUG b_intra => (int) D#387
  i_bcost_429 = MIN_EXPR <i_bcost_292, i_bcost_422>;
  # DEBUG i_bcost => i_bcost_429
  if (i_mb_x_20 > 0)
    goto <bb 57>;
  else
    goto <bb 60>;

  <bb 57>:
  _295 = h_19(D)->sps;
  _296 = _295->i_mb_width;
  _297 = _296 + -1;
  _291 = i_mb_y_21 > 0;
  _68 = i_mb_x_20 < _297;
  _442 = _68 & _291;
  if (_442 != 0)
    goto <bb 58>;
  else
    goto <bb 60>;

  <bb 58>:
  _298 = _295->i_mb_height;
  _299 = _298 + -1;
  if (i_mb_y_21 < _299)
    goto <bb 59>;
  else
    goto <bb 60>;

  <bb 59>:
  _300 = fenc_16->i_intra_mbs[_34];
  _293 = i_bcost_292 < i_bcost_422;
  b_intra_294 = (int) _293;
  _301 = b_intra_294 + _300;
  fenc_16->i_intra_mbs[_34] = _301;
  _302 = fenc_16->i_cost_est[0][0];
  _303 = i_bcost_292 + _302;
  fenc_16->i_cost_est[0][0] = _303;

  <bb 60>:
  # i_bcost_304 = PHI <268435456(39), i_bcost_429(56), i_bcost_437(61), i_bcost_429(57), i_bcost_429(58), i_bcost_429(59)>
  # DEBUG i_bcost => i_bcost_304
  fenc_mvs ={v} {CLOBBER};
  fenc_costs ={v} {CLOBBER};
  pix1 ={v} {CLOBBER};
  m ={v} {CLOBBER};
  return i_bcost_304;

  <bb 61>:
  # i_bcost_437 = PHI <i_bcost_309(38), i_bcost_479(37)>
  # DEBUG i_bcost => i_bcost_437
  goto <bb 60>;

}



;; Function x264_slicetype_frame_cost (x264_slicetype_frame_cost, funcdef_no=229, decl_uid=9637, cgraph_uid=229, symbol_order=298)


Analyzing loop at encoder/slicetype.c:296
encoder/slicetype.c:296:13: note: ===== analyze_loop_nest =====
encoder/slicetype.c:296:13: note: === vect_analyze_loop_form ===
encoder/slicetype.c:296:13: note: ===== analyze_loop_nest_1 =====
encoder/slicetype.c:296:13: note: === vect_analyze_loop_form ===
encoder/slicetype.c:296:13: note: === get_loop_niters ===
encoder/slicetype.c:296:13: note: not vectorized: number of iterations cannot be computed.
encoder/slicetype.c:296:13: note: bad inner-loop form.
encoder/slicetype.c:296:13: note: not vectorized: Bad inner loop.
encoder/slicetype.c:296:13: note: bad loop form.

Analyzing loop at encoder/slicetype.c:297
encoder/slicetype.c:297:17: note: ===== analyze_loop_nest =====
encoder/slicetype.c:297:17: note: === vect_analyze_loop_form ===
encoder/slicetype.c:297:17: note: === get_loop_niters ===
encoder/slicetype.c:297:17: note: not vectorized: number of iterations cannot be computed.
encoder/slicetype.c:297:17: note: bad loop form.

Analyzing loop at encoder/slicetype.c:304
encoder/slicetype.c:304:13: note: ===== analyze_loop_nest =====
encoder/slicetype.c:304:13: note: === vect_analyze_loop_form ===
encoder/slicetype.c:304:13: note: ===== analyze_loop_nest_1 =====
encoder/slicetype.c:304:13: note: === vect_analyze_loop_form ===
encoder/slicetype.c:304:13: note: not vectorized: control flow in loop.
encoder/slicetype.c:304:13: note: bad inner-loop form.
encoder/slicetype.c:304:13: note: not vectorized: Bad inner loop.
encoder/slicetype.c:304:13: note: bad loop form.

Analyzing loop at encoder/slicetype.c:307
encoder/slicetype.c:307:17: note: ===== analyze_loop_nest =====
encoder/slicetype.c:307:17: note: === vect_analyze_loop_form ===
encoder/slicetype.c:307:17: note: not vectorized: control flow in loop.
encoder/slicetype.c:307:17: note: bad loop form.

Analyzing loop at encoder/slicetype.c:326
encoder/slicetype.c:326:13: note: ===== analyze_loop_nest =====
encoder/slicetype.c:326:13: note: === vect_analyze_loop_form ===
encoder/slicetype.c:326:13: note: ===== analyze_loop_nest_1 =====
encoder/slicetype.c:326:13: note: === vect_analyze_loop_form ===
encoder/slicetype.c:326:13: note: not vectorized: control flow in loop.
encoder/slicetype.c:326:13: note: bad inner-loop form.
encoder/slicetype.c:326:13: note: not vectorized: Bad inner loop.
encoder/slicetype.c:326:13: note: bad loop form.

Analyzing loop at encoder/slicetype.c:327
encoder/slicetype.c:327:17: note: ===== analyze_loop_nest =====
encoder/slicetype.c:327:17: note: === vect_analyze_loop_form ===
encoder/slicetype.c:327:17: note: not vectorized: control flow in loop.
encoder/slicetype.c:327:17: note: bad loop form.
encoder/slicetype.c:256:12: note: vectorized 0 loops in function.
x264_slicetype_frame_cost (struct x264_t * h, struct x264_mb_analysis_t * a, struct x264_frame_t * * frames, int p0, int p1, int b, int b_intra_penalty)
{
  int nmb;
  int i_mb_cost_aq;
  int i_mb_cost_aq;
  int * row_satd;
  int dist_scale_factor;
  int do_search[2];
  int i_score_aq;
  int i_score;
  struct x264_sps_t * pretmp_1;
  int16_t[2] * _2;
  int * prephitmp_5;
  struct x264_sps_t * pretmp_7;
  int prephitmp_13;
  struct x264_frame_t * pretmp_14;
  int pretmp_15;
  struct x264_sps_t * prephitmp_16;
  int iftmp.158_21;
  int _22;
  int _28;
  int * pretmp_29;
  struct x264_frame_t * prephitmp_30;
  int prephitmp_31;
  int16_t * * pretmp_32;
  long unsigned int _37;
  long unsigned int _38;
  struct x264_frame_t * * _40;
  struct x264_frame_t * _42;
  int _44;
  int _46;
  int _49;
  int * _50;
  int _51;
  int _53;
  int16_t[2] * _54;
  short int _55;
  int _57;
  int16_t[2] * _58;
  short int _59;
  int16_t[2] * _60;
  int prephitmp_61;
  int pretmp_62;
  int _69;
  int _70;
  int _71;
  int _72;
  struct x264_sps_t * _74;
  int _75;
  int _76;
  int _77;
  int _78;
  long unsigned int _81;
  long unsigned int _82;
  int * _83;
  int _86;
  int _87;
  int _89;
  int _93;
  struct x264_frame_t * _94;
  uint16_t * _95;
  int _96;
  int _97;
  int _98;
  int _99;
  int _100;
  long unsigned int _101;
  long unsigned int _102;
  uint16_t * _103;
  short unsigned int _104;
  int _105;
  int _106;
  int _107;
  long unsigned int _110;
  long unsigned int _111;
  int * _112;
  int _113;
  int _114;
  int _116;
  struct x264_sps_t * _117;
  int _118;
  int _119;
  int _120;
  int _121;
  int _122;
  int _126;
  int _129;
  int _131;
  int _135;
  int _136;
  int _141;
  struct x264_frame_t * _142;
  uint16_t * _143;
  int _144;
  int _145;
  int _146;
  int _147;
  int _148;
  long unsigned int _149;
  long unsigned int _150;
  uint16_t * _151;
  short unsigned int _152;
  int _153;
  int _154;
  int _155;
  int _160;
  int _162;
  int _163;
  int _166;
  int _170;
  int _171;
  int _175;
  int _177;
  int _178;
  int _180;
  int _181;
  int _183;
  int _184;
  int _185;
  struct x264_frame_t * _187;
  struct x264_sps_t * _194;
  int _195;
  int _196;
  int _197;
  int _198;
  struct x264_frame_t * _202;
  int _203;
  int _204;
  int _205;
  int _206;
  struct x264_sps_t * prephitmp_214;
  int pretmp_215;
  int pretmp_223;
  int pretmp_225;
  int _230;
  int pretmp_241;
  int prephitmp_242;
  int16_t * * pretmp_245;
  struct x264_sps_t * prephitmp_251;
  int pretmp_260;
  int prephitmp_261;
  struct x264_sps_t * pretmp_262;
  int16_t * * pretmp_265;
  int prephitmp_266;

  <bb 2>:
  # DEBUG i_score => 0
  # DEBUG i_score_aq => 0
  _37 = (long unsigned int) b_36(D);
  _38 = _37 * 8;
  _40 = frames_39(D) + _38;
  _42 = *_40;
  _44 = b_36(D) - p0_43(D);
  _46 = p1_45(D) - b_36(D);
  i_score_47 = _42->i_cost_est[_44][_46];
  if (i_score_47 >= 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  pretmp_29 = _42->i_row_satds[_44][_46];
  goto <bb 6>;

  <bb 4>:
  _49 = h_48(D)->param.rc.i_vbv_buffer_size;
  if (_49 == 0)
    goto <bb 69>;
  else
    goto <bb 5>;

  <bb 5>:
  _50 = _42->i_row_satds[_44][_46];
  _51 = *_50;
  if (_51 != -1)
    goto <bb 69>;
  else
    goto <bb 6>;

  <bb 6>:
  # prephitmp_5 = PHI <pretmp_29(3), _50(5)>
  # DEBUG dist_scale_factor => 128
  # DEBUG D#392 => _42->i_row_satds[_44][_46]
  # DEBUG row_satd => D#392
  if (b_36(D) != p0_43(D))
    goto <bb 7>;
  else
    goto <bb 9>;

  <bb 7>:
  _53 = _44 + -1;
  _54 = _42->lowres_mvs[0][_53];
  _55 = *_54[0];
  if (_55 == 32767)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:

  <bb 9>:
  # iftmp.158_21 = PHI <1(7), 0(8), 0(6)>
  do_search[0] = iftmp.158_21;
  if (b_36(D) != p1_45(D))
    goto <bb 10>;
  else
    goto <bb 78>;

  <bb 10>:
  _57 = _46 + -1;
  _58 = _42->lowres_mvs[1][_57];
  _59 = *_58[0];
  if (_59 == 32767)
    goto <bb 77>;
  else
    goto <bb 78>;

  <bb 11>:
  *_58[0] = 0;

  <bb 12>:
  if (b_36(D) == p1_45(D))
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _42->i_intra_mbs[_44] = 0;
  _42->i_cost_est[0][0] = 0;

  <bb 14>:
  if (p0_43(D) != p1_45(D))
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _69 = _44 << 8;
  _70 = p1_45(D) - p0_43(D);
  _71 = _70 >> 1;
  _72 = _69 + _71;
  dist_scale_factor_73 = _72 / _70;
  # DEBUG dist_scale_factor => dist_scale_factor_73

  <bb 16>:
  # dist_scale_factor_18 = PHI <128(14), dist_scale_factor_73(15)>
  # DEBUG dist_scale_factor => dist_scale_factor_18
  _74 = h_48(D)->sps;
  _75 = _74->i_mb_width;
  if (_75 <= 2)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  pretmp_260 = _74->i_mb_height;
  goto <bb 19>;

  <bb 18>:
  _76 = _74->i_mb_height;
  if (_76 <= 2)
    goto <bb 19>;
  else
    goto <bb 29>;

  <bb 19>:
  # prephitmp_31 = PHI <pretmp_260(17), _76(18)>
  _166 = prephitmp_31 + -1;
  h_48(D)->mb.i_mb_y = _166;
  # DEBUG i_score => 0
  if (_166 >= 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  goto <bb 22>;

  <bb 21>:
  goto <bb 65>;

  <bb 22>:
  # i_score_254 = PHI <0(20), i_score_244(28)>
  # prephitmp_16 = PHI <_74(20), pretmp_7(28)>
  # DEBUG i_score => i_score_254
  _170 = prephitmp_16->i_mb_width;
  _171 = _170 + -1;
  h_48(D)->mb.i_mb_x = _171;
  # DEBUG i_score => i_score_254
  if (_171 >= 0)
    goto <bb 23>;
  else
    goto <bb 27>;

  <bb 23>:
  pretmp_32 = &MEM[(int16_t * *)a_90(D) + 16B];

  <bb 24>:
  # i_score_255 = PHI <i_score_254(23), i_score_176(26)>
  # DEBUG i_score => i_score_255
  # DEBUG D#86 => a_90(D)
  _175 = x264_slicetype_mb_cost.isra.19 (h_48(D), pretmp_32, frames_39(D), p0_43(D), p1_45(D), b_36(D), dist_scale_factor_18, &do_search);
  i_score_176 = _175 + i_score_255;
  # DEBUG i_score => i_score_176
  _177 = h_48(D)->mb.i_mb_x;
  _178 = _177 + -1;
  h_48(D)->mb.i_mb_x = _178;
  # DEBUG i_score => i_score_176
  if (_178 >= 0)
    goto <bb 26>;
  else
    goto <bb 25>;

  <bb 25>:
  # i_score_6 = PHI <i_score_176(24)>
  goto <bb 27>;

  <bb 26>:
  goto <bb 24>;

  <bb 27>:
  # i_score_244 = PHI <i_score_6(25), i_score_254(22)>
  _180 = h_48(D)->mb.i_mb_y;
  _181 = _180 + -1;
  h_48(D)->mb.i_mb_y = _181;
  # DEBUG i_score => i_score_244
  if (_181 >= 0)
    goto <bb 28>;
  else
    goto <bb 64>;

  <bb 28>:
  pretmp_7 = h_48(D)->sps;
  goto <bb 22>;

  <bb 29>:
  _77 = h_48(D)->param.rc.i_vbv_buffer_size;
  if (_77 != 0)
    goto <bb 30>;
  else
    goto <bb 51>;

  <bb 30>:
  _78 = _76 + -1;
  h_48(D)->mb.i_mb_y = _78;
  # DEBUG i_score_aq => 0
  # DEBUG i_score => 0
  if (_78 >= 0)
    goto <bb 31>;
  else
    goto <bb 21>;

  <bb 31>:

  <bb 32>:
  # i_score_231 = PHI <0(31), i_score_235(50)>
  # i_score_aq_218 = PHI <0(31), i_score_aq_238(50)>
  # _230 = PHI <_78(31), _129(50)>
  # prephitmp_214 = PHI <_74(31), pretmp_1(50)>
  # DEBUG i_score_aq => i_score_aq_218
  # DEBUG i_score => i_score_231
  _81 = (long unsigned int) _230;
  _82 = _81 * 4;
  _83 = prephitmp_5 + _82;
  *_83 = 0;
  _86 = prephitmp_214->i_mb_width;
  _87 = _86 + -1;
  h_48(D)->mb.i_mb_x = _87;
  # DEBUG i_score_aq => i_score_aq_218
  # DEBUG i_score => i_score_231
  if (_87 >= 0)
    goto <bb 34>;
  else
    goto <bb 33>;

  <bb 33>:
  pretmp_215 = h_48(D)->mb.i_mb_y;
  goto <bb 48>;

  <bb 34>:
  pretmp_265 = &MEM[(int16_t * *)a_90(D) + 16B];

  <bb 35>:
  # i_score_243 = PHI <i_score_231(34), i_score_3(46)>
  # i_score_aq_217 = PHI <i_score_aq_218(34), i_score_aq_12(46)>
  # DEBUG i_score_aq => i_score_aq_217
  # DEBUG i_score => i_score_243
  # DEBUG D#86 => a_90(D)
  i_mb_cost_aq_92 = x264_slicetype_mb_cost.isra.19 (h_48(D), pretmp_265, frames_39(D), p0_43(D), p1_45(D), b_36(D), dist_scale_factor_18, &do_search);
  # DEBUG i_mb_cost => i_mb_cost_aq_92
  # DEBUG i_mb_cost_aq => i_mb_cost_aq_92
  _93 = h_48(D)->param.rc.i_aq_mode;
  if (_93 != 0)
    goto <bb 37>;
  else
    goto <bb 36>;

  <bb 36>:
  pretmp_241 = h_48(D)->mb.i_mb_y;
  goto <bb 38>;

  <bb 37>:
  _94 = *_40;
  _95 = _94->i_inv_qscale_factor;
  _96 = h_48(D)->mb.i_mb_x;
  _97 = h_48(D)->mb.i_mb_y;
  _98 = h_48(D)->mb.i_mb_stride;
  _99 = _97 * _98;
  _100 = _96 + _99;
  _101 = (long unsigned int) _100;
  _102 = _101 * 2;
  _103 = _95 + _102;
  _104 = *_103;
  _105 = (int) _104;
  _106 = i_mb_cost_aq_92 * _105;
  _107 = _106 + 128;
  i_mb_cost_aq_108 = _107 >> 8;
  # DEBUG i_mb_cost_aq => i_mb_cost_aq_108

  <bb 38>:
  # i_mb_cost_aq_19 = PHI <i_mb_cost_aq_92(36), i_mb_cost_aq_108(37)>
  # prephitmp_242 = PHI <pretmp_241(36), _97(37)>
  # DEBUG i_mb_cost_aq => i_mb_cost_aq_19
  _110 = (long unsigned int) prephitmp_242;
  _111 = _110 * 4;
  _112 = prephitmp_5 + _111;
  _113 = *_112;
  _114 = i_mb_cost_aq_19 + _113;
  *_112 = _114;
  _116 = h_48(D)->mb.i_mb_y;
  if (_116 > 0)
    goto <bb 40>;
  else
    goto <bb 39>;

  <bb 39>:
  pretmp_225 = h_48(D)->mb.i_mb_x;
  goto <bb 45>;

  <bb 40>:
  _117 = h_48(D)->sps;
  _118 = _117->i_mb_height;
  _119 = _118 + -1;
  if (_116 < _119)
    goto <bb 42>;
  else
    goto <bb 41>;

  <bb 41>:
  pretmp_223 = h_48(D)->mb.i_mb_x;
  goto <bb 45>;

  <bb 42>:
  _120 = h_48(D)->mb.i_mb_x;
  if (_120 > 0)
    goto <bb 43>;
  else
    goto <bb 45>;

  <bb 43>:
  _121 = _117->i_mb_width;
  _122 = _121 + -1;
  if (_120 < _122)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  i_score_123 = i_mb_cost_aq_92 + i_score_243;
  # DEBUG i_score => i_score_123
  i_score_aq_124 = i_mb_cost_aq_19 + i_score_aq_217;
  # DEBUG i_score_aq => i_score_aq_124

  <bb 45>:
  # i_score_3 = PHI <i_score_243(39), i_score_243(41), i_score_243(42), i_score_243(43), i_score_123(44)>
  # i_score_aq_12 = PHI <i_score_aq_217(39), i_score_aq_217(41), i_score_aq_217(42), i_score_aq_217(43), i_score_aq_124(44)>
  # prephitmp_266 = PHI <pretmp_225(39), pretmp_223(41), _120(42), _120(43), _120(44)>
  # DEBUG i_score_aq => i_score_aq_12
  # DEBUG i_score => i_score_3
  _126 = prephitmp_266 + -1;
  h_48(D)->mb.i_mb_x = _126;
  # DEBUG i_score_aq => i_score_aq_12
  # DEBUG i_score => i_score_3
  if (_126 >= 0)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:
  goto <bb 35>;

  <bb 47>:
  # i_score_138 = PHI <i_score_3(45)>
  # i_score_aq_133 = PHI <i_score_aq_12(45)>
  # _89 = PHI <_116(45)>

  <bb 48>:
  # i_score_235 = PHI <i_score_138(47), i_score_231(33)>
  # i_score_aq_238 = PHI <i_score_aq_133(47), i_score_aq_218(33)>
  # prephitmp_261 = PHI <_89(47), pretmp_215(33)>
  _129 = prephitmp_261 + -1;
  h_48(D)->mb.i_mb_y = _129;
  # DEBUG i_score_aq => i_score_aq_238
  # DEBUG i_score => i_score_235
  if (_129 >= 0)
    goto <bb 50>;
  else
    goto <bb 49>;

  <bb 49>:
  # i_score_64 = PHI <i_score_235(48)>
  # i_score_aq_65 = PHI <i_score_aq_238(48)>
  goto <bb 65>;

  <bb 50>:
  pretmp_1 = h_48(D)->sps;
  goto <bb 32>;

  <bb 51>:
  _131 = _76 + -2;
  h_48(D)->mb.i_mb_y = _131;
  # DEBUG i_score_aq => 0
  # DEBUG i_score => 0
  if (_131 > 0)
    goto <bb 52>;
  else
    goto <bb 21>;

  <bb 52>:

  <bb 53>:
  # i_score_237 = PHI <0(52), i_score_232(63)>
  # i_score_aq_228 = PHI <0(52), i_score_aq_227(63)>
  # prephitmp_251 = PHI <_74(52), pretmp_262(63)>
  # DEBUG i_score_aq => i_score_aq_228
  # DEBUG i_score => i_score_237
  _135 = prephitmp_251->i_mb_width;
  _136 = _135 + -2;
  h_48(D)->mb.i_mb_x = _136;
  # DEBUG i_score_aq => i_score_aq_228
  # DEBUG i_score => i_score_237
  if (_136 > 0)
    goto <bb 54>;
  else
    goto <bb 61>;

  <bb 54>:
  pretmp_245 = &MEM[(int16_t * *)a_90(D) + 16B];

  <bb 55>:
  # i_score_236 = PHI <i_score_237(54), i_score_157(60)>
  # i_score_aq_226 = PHI <i_score_aq_228(54), i_score_aq_158(60)>
  # DEBUG i_score_aq => i_score_aq_226
  # DEBUG i_score => i_score_236
  # DEBUG D#86 => a_90(D)
  i_mb_cost_aq_140 = x264_slicetype_mb_cost.isra.19 (h_48(D), pretmp_245, frames_39(D), p0_43(D), p1_45(D), b_36(D), dist_scale_factor_18, &do_search);
  # DEBUG i_mb_cost => i_mb_cost_aq_140
  # DEBUG i_mb_cost_aq => i_mb_cost_aq_140
  _141 = h_48(D)->param.rc.i_aq_mode;
  if (_141 != 0)
    goto <bb 57>;
  else
    goto <bb 56>;

  <bb 56>:
  pretmp_62 = h_48(D)->mb.i_mb_x;
  goto <bb 58>;

  <bb 57>:
  _142 = *_40;
  _143 = _142->i_inv_qscale_factor;
  _144 = h_48(D)->mb.i_mb_x;
  _145 = h_48(D)->mb.i_mb_y;
  _146 = h_48(D)->mb.i_mb_stride;
  _147 = _145 * _146;
  _148 = _144 + _147;
  _149 = (long unsigned int) _148;
  _150 = _149 * 2;
  _151 = _143 + _150;
  _152 = *_151;
  _153 = (int) _152;
  _154 = i_mb_cost_aq_140 * _153;
  _155 = _154 + 128;
  i_mb_cost_aq_156 = _155 >> 8;
  # DEBUG i_mb_cost_aq => i_mb_cost_aq_156

  <bb 58>:
  # i_mb_cost_aq_20 = PHI <i_mb_cost_aq_140(56), i_mb_cost_aq_156(57)>
  # prephitmp_61 = PHI <pretmp_62(56), _144(57)>
  # DEBUG i_mb_cost_aq => i_mb_cost_aq_20
  i_score_157 = i_mb_cost_aq_140 + i_score_236;
  # DEBUG i_score => i_score_157
  i_score_aq_158 = i_mb_cost_aq_20 + i_score_aq_226;
  # DEBUG i_score_aq => i_score_aq_158
  _160 = prephitmp_61 + -1;
  h_48(D)->mb.i_mb_x = _160;
  # DEBUG i_score_aq => i_score_aq_158
  # DEBUG i_score => i_score_157
  if (_160 > 0)
    goto <bb 60>;
  else
    goto <bb 59>;

  <bb 59>:
  # i_score_80 = PHI <i_score_157(58)>
  # i_score_aq_24 = PHI <i_score_aq_158(58)>
  goto <bb 61>;

  <bb 60>:
  goto <bb 55>;

  <bb 61>:
  # i_score_232 = PHI <i_score_80(59), i_score_237(53)>
  # i_score_aq_227 = PHI <i_score_aq_24(59), i_score_aq_228(53)>
  _162 = h_48(D)->mb.i_mb_y;
  _163 = _162 + -1;
  h_48(D)->mb.i_mb_y = _163;
  # DEBUG i_score_aq => i_score_aq_227
  # DEBUG i_score => i_score_232
  if (_163 > 0)
    goto <bb 63>;
  else
    goto <bb 62>;

  <bb 62>:
  # i_score_aq_4 = PHI <i_score_aq_227(61)>
  # i_score_52 = PHI <i_score_232(61)>
  goto <bb 65>;

  <bb 63>:
  pretmp_262 = h_48(D)->sps;
  goto <bb 53>;

  <bb 64>:
  # i_score_85 = PHI <i_score_244(27)>

  <bb 65>:
  # i_score_8 = PHI <i_score_85(64), i_score_64(49), i_score_52(62), 0(21)>
  # i_score_aq_17 = PHI <0(64), i_score_aq_65(49), i_score_aq_4(62), 0(21)>
  # DEBUG i_score_aq => i_score_aq_17
  # DEBUG i_score => i_score_8
  if (b_36(D) != p1_45(D))
    goto <bb 66>;
  else
    goto <bb 67>;

  <bb 66>:
  _183 = i_score_8 * 100;
  _184 = h_48(D)->param.i_bframe_bias;
  _185 = _184 + 120;
  i_score_186 = _183 / _185;
  # DEBUG i_score => i_score_186
  pretmp_14 = *_40;
  goto <bb 68>;

  <bb 67>:
  _187 = *_40;
  _187->b_intra_calculated = 1;

  <bb 68>:
  # i_score_9 = PHI <i_score_186(66), i_score_8(67)>
  # prephitmp_30 = PHI <pretmp_14(66), _187(67)>
  # DEBUG i_score => i_score_9
  prephitmp_30->i_cost_est[_44][_46] = i_score_9;
  prephitmp_30->i_cost_est_aq[_44][_46] = i_score_aq_17;
  x264_emms ();

  <bb 69>:
  # i_score_10 = PHI <i_score_47(5), i_score_9(68), i_score_47(4)>
  # DEBUG i_score => i_score_10
  if (b_intra_penalty_193(D) != 0)
    goto <bb 70>;
  else
    goto <bb 76>;

  <bb 70>:
  _194 = h_48(D)->sps;
  _195 = _194->i_mb_width;
  if (_195 > 2)
    goto <bb 71>;
  else
    goto <bb 73>;

  <bb 71>:
  _196 = _194->i_mb_height;
  if (_196 > 2)
    goto <bb 72>;
  else
    goto <bb 74>;

  <bb 72>:
  _197 = _195 + -2;
  _198 = _196 + -2;
  nmb_199 = _197 * _198;
  goto <bb 75>;

  <bb 73>:
  pretmp_15 = _194->i_mb_height;

  <bb 74>:
  # prephitmp_13 = PHI <pretmp_15(73), _196(71)>
  nmb_201 = prephitmp_13 * _195;

  <bb 75>:
  # nmb_23 = PHI <nmb_199(72), nmb_201(74)>
  # DEBUG nmb => nmb_23
  _202 = *_40;
  _203 = _202->i_intra_mbs[_44];
  _204 = i_score_10 * _203;
  _205 = nmb_23 * 8;
  _206 = _204 / _205;
  i_score_207 = i_score_10 + _206;
  # DEBUG i_score => i_score_207

  <bb 76>:
  # i_score_11 = PHI <i_score_10(69), i_score_207(75)>
  # DEBUG i_score => i_score_11
  do_search ={v} {CLOBBER};
  return i_score_11;

  <bb 77>:
  do_search[1] = 1;
  if (iftmp.158_21 != 0)
    goto <bb 79>;
  else
    goto <bb 11>;

  <bb 78>:
  do_search[1] = 0;
  if (iftmp.158_21 != 0)
    goto <bb 80>;
  else
    goto <bb 12>;

  <bb 79>:
  _22 = _44 + -1;
  _60 = _42->lowres_mvs[0][_22];
  *_60[0] = 0;
  goto <bb 11>;

  <bb 80>:
  _28 = _44 + -1;
  _2 = _42->lowres_mvs[0][_28];
  *_2[0] = 0;
  goto <bb 12>;

}



;; Function block_residual_write_cabac (block_residual_write_cabac, funcdef_no=169, decl_uid=8380, cgraph_uid=169, symbol_order=229)


Analyzing loop at encoder/cabac.c:782
encoder/cabac.c:782:5: note: ===== analyze_loop_nest =====
encoder/cabac.c:782:5: note: === vect_analyze_loop_form ===
encoder/cabac.c:782:5: note: not vectorized: control flow in loop.
encoder/cabac.c:782:5: note: bad loop form.

Analyzing loop at encoder/cabac.c:730
encoder/cabac.c:730:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:730:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:730:9: note: not vectorized: control flow in loop.
encoder/cabac.c:730:9: note: bad loop form.

Analyzing loop at encoder/cabac.c:732
encoder/cabac.c:732:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:732:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:732:9: note: not vectorized: control flow in loop.
encoder/cabac.c:732:9: note: bad loop form.
encoder/cabac.c:681:13: note: vectorized 0 loops in function.
block_residual_write_cabac (struct x264_t * h, struct x264_cabac_t * cb, int i_ctxBlockCat, int i_idx, int16_t * l, int i_count)
{
  int D.21337;
  int i_mba_xy;
  int i_mbb_xy;
  int i_nza;
  int i_nzb;
  int D.21330;
  int i_idx;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int ctx;
  int i_prefix;
  int ctx;
  int i;
  int node_ctx;
  int i_sigmap_size;
  int i_last;
  int i_coeff;
  int i_coeff_abs_m1[64];
  const uint8_t * significant_coeff_flag_offset;
  const int i_ctx_level;
  const int i_ctx_last;
  const int i_ctx_sig;
  int _24;
  short unsigned int _26;
  short unsigned int _29;
  short unsigned int _31;
  unsigned char _41;
  long int _42;
  unsigned char _44;
  long int _45;
  unsigned char _46;
  int _48;
  int (*<T1662>) (int16_t *) _49;
  int _53;
  int _54;
  long unsigned int _56;
  long unsigned int _57;
  int16_t * _58;
  short int _59;
  int _63;
  int _64;
  int _65;
  const uint8_t * _69;
  unsigned char _70;
  int _71;
  int _72;
  long int _73;
  unsigned char _74;
  _Bool _75;
  long int _76;
  unsigned char _77;
  int _78;
  int _79;
  long int _80;
  unsigned char _81;
  const uint8_t * _82;
  unsigned char _83;
  int _84;
  int _85;
  long int _86;
  unsigned char _87;
  long unsigned int _89;
  long unsigned int _90;
  int16_t * _91;
  short int _92;
  int _93;
  int _94;
  int _95;
  int _98;
  long int _99;
  unsigned char _100;
  _Bool _101;
  long int _102;
  int _103;
  long int _104;
  unsigned char _105;
  int _106;
  long int _107;
  unsigned char _108;
  long unsigned int _110;
  long unsigned int _111;
  int16_t * _112;
  short int _113;
  int _114;
  int _115;
  int _116;
  int _120;
  long int _124;
  unsigned int _125;
  int _126;
  unsigned char _128;
  int _129;
  short unsigned int _130;
  int _131;
  int _132;
  unsigned char _134;
  int _136;
  unsigned int _137;
  unsigned char _138;
  int _139;
  int _140;
  unsigned char _142;
  long int _144;
  unsigned char _146;
  int _148;
  unsigned char _151;
  short unsigned int _152;
  int _153;
  int _154;
  unsigned char _156;
  int _157;
  short unsigned int _158;
  int _159;
  int _160;
  unsigned char _162;
  short unsigned int _164;
  int _165;
  int _166;
  unsigned char _168;
  short unsigned int _170;
  int _171;
  int _172;
  unsigned char _174;
  short unsigned int _176;
  int _177;
  int _178;
  unsigned char _180;
  short unsigned int _181;
  int _182;
  int _183;
  unsigned char _185;
  short unsigned int _187;
  int _188;
  int _189;
  unsigned char _191;
  short unsigned int _193;
  int _194;
  int _195;
  unsigned char _197;
  short unsigned int _199;
  int _200;
  int _201;
  unsigned char _202;
  int _203;
  int _205;
  unsigned char _206;
  unsigned char _208;
  short unsigned int _210;
  int _211;
  int _212;
  unsigned int _232;
  unsigned int _233;
  int _234;
  int16_t * _236;
  long unsigned int _237;
  long unsigned int _238;
  int16_t * _239;
  short int _240;
  short int _241;
  unsigned int _243;
  int16_t * _245;
  long unsigned int _246;
  long unsigned int _247;
  int16_t * _248;
  short int _249;
  short int _250;
  int _252;
  unsigned int _254;
  unsigned int _255;
  int _256;
  int _258;
  unsigned int _260;
  unsigned int _261;
  int _264;
  int _265;
  unsigned char _266;
  int _270;
  unsigned char _271;
  unsigned int _274;
  unsigned int _275;
  int _276;
  int16_t * _278;
  long unsigned int _279;
  long unsigned int _280;
  int16_t * _281;
  short int _282;
  int _283;
  int _284;
  unsigned int _286;
  int16_t * _288;
  long unsigned int _289;
  long unsigned int _290;
  int16_t * _291;
  short int _292;
  int _293;
  int _294;
  int _296;
  unsigned int _298;
  unsigned int _299;
  int _300;
  int _302;
  unsigned int _304;
  unsigned int _305;
  int _308;
  int _309;
  unsigned char _310;
  int _314;
  unsigned char _315;
  int _317;
  unsigned int _318;
  _Bool _320;
  int _321;
  _Bool _325;
  int _326;
  int _329;
  int iftmp.11_331;
  int _332;
  _Bool _334;
  int _335;
  int _336;
  unsigned int _343;
  unsigned int _344;
  unsigned char _345;
  int _346;
  int _347;
  int pretmp_353;
  int pretmp_354;
  int pretmp_361;
  int pretmp_370;
  int prephitmp_372;
  int prephitmp_382;
  int prephitmp_403;
  int pretmp_405;
  int prephitmp_411;
  int prephitmp_412;
  int pretmp_417;
  int pretmp_419;
  int pretmp_420;
  int prephitmp_421;
  int pretmp_422;
  int prephitmp_423;
  int pretmp_424;
  int prephitmp_425;
  int pretmp_427;
  int prephitmp_428;
  int pretmp_429;
  int prephitmp_430;
  int pretmp_431;
  int prephitmp_432;
  int pretmp_433;
  int prephitmp_434;

  <bb 2>:
  _24 = h_23(D)->mb.b_interlaced;
  _26 = significant_coeff_flag_offset[_24][i_ctxBlockCat_25(D)];
  # DEBUG i_ctx_sig => (const int) _26
  _29 = last_coeff_flag_offset[_24][i_ctxBlockCat_25(D)];
  # DEBUG i_ctx_last => (const int) _29
  _31 = coeff_abs_level_m1_offset[i_ctxBlockCat_25(D)];
  # DEBUG i_ctx_level => (const int) _31
  # DEBUG D#396 => &significant_coeff_flag_offset_8x8[_24]
  # DEBUG significant_coeff_flag_offset => D#396
  # DEBUG i_coeff => 0
  # DEBUG node_ctx => 0
  if (i_count_35(D) != 64)
    goto <bb 3>;
  else
    goto <bb 48>;

  <bb 3>:
  # DEBUG h => h_23(D)
  # DEBUG i_cat => i_ctxBlockCat_25(D)
  # DEBUG i_idx => i_idx_36(D)
  # DEBUG i_mba_xy => -1
  # DEBUG i_mbb_xy => -1
  # DEBUG i_nza => 0
  # DEBUG i_nzb => 0
  switch (i_ctxBlockCat_25(D)) <default: <L41>, case 0: <L36>, case 1 ... 2: <L37>, case 3: <L38>, case 4: <L39>>

<L41>:
  pretmp_405 = x264_scan8[i_idx_36(D)];
  goto <bb 41> (<L40>);

<L36>:
  _232 = h_23(D)->mb.i_neighbour;
  _233 = _232 & 1;
  if (_233 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  _234 = h_23(D)->mb.i_mb_xy;
  i_mba_xy_235 = _234 + -1;
  # DEBUG i_mba_xy => i_mba_xy_235
  _236 = h_23(D)->mb.cbp;
  _237 = (long unsigned int) i_mba_xy_235;
  _238 = _237 * 2;
  _239 = _236 + _238;
  _240 = *_239;
  _241 = _240 & 256;
  i_nza_242 = (int) _241;
  # DEBUG i_nza => i_nza_242

  <bb 7>:
  # i_mba_xy_337 = PHI <-1(5), i_mba_xy_235(6)>
  # i_nza_338 = PHI <0(5), i_nza_242(6)>
  # DEBUG i_nza => i_nza_338
  # DEBUG i_mba_xy => i_mba_xy_337
  _243 = _232 & 2;
  if (_243 != 0)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  pretmp_354 = x264_scan8[i_idx_36(D)];
  goto <bb 41> (<L40>);

  <bb 9>:
  i_mbb_xy_244 = h_23(D)->mb.i_mb_top_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_244
  _245 = h_23(D)->mb.cbp;
  _246 = (long unsigned int) i_mbb_xy_244;
  _247 = _246 * 2;
  _248 = _245 + _247;
  _249 = *_248;
  _250 = _249 & 256;
  i_nzb_251 = (int) _250;
  # DEBUG i_nzb => i_nzb_251
  pretmp_370 = x264_scan8[i_idx_36(D)];
  goto <bb 41> (<L40>);

<L37>:
  _252 = i_idx_36(D) & -11;
  if (_252 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  i_mba_xy_253 = h_23(D)->mb.i_mb_xy;
  # DEBUG i_mba_xy => i_mba_xy_253
  goto <bb 14>;

  <bb 12>:
  _254 = h_23(D)->mb.i_neighbour;
  _255 = _254 & 1;
  if (_255 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _256 = h_23(D)->mb.i_mb_xy;
  i_mba_xy_257 = _256 + -1;
  # DEBUG i_mba_xy => i_mba_xy_257

  <bb 14>:
  # i_mba_xy_263 = PHI <i_mba_xy_253(11), -1(12), i_mba_xy_257(13)>
  # DEBUG i_mba_xy => i_mba_xy_263
  _258 = i_idx_36(D) & -6;
  if (_258 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  i_mbb_xy_259 = h_23(D)->mb.i_mb_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_259
  goto <bb 18>;

  <bb 16>:
  _260 = h_23(D)->mb.i_neighbour;
  _261 = _260 & 2;
  if (_261 != 0)
    goto <bb 17>;
  else
    goto <bb 81>;

  <bb 17>:
  i_mbb_xy_262 = h_23(D)->mb.i_mb_top_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_262

  <bb 18>:
  # i_mbb_xy_268 = PHI <i_mbb_xy_259(15), i_mbb_xy_262(17)>
  # DEBUG i_mbb_xy => i_mbb_xy_268
  if (i_mba_xy_263 >= 0)
    goto <bb 20>;
  else
    goto <bb 19>;

  <bb 19>:
  pretmp_424 = x264_scan8[i_idx_36(D)];
  goto <bb 21>;

  <bb 20>:
  # i_mbb_xy_204 = PHI <i_mbb_xy_268(18), -1(81)>
  _264 = x264_scan8[i_idx_36(D)];
  _265 = _264 + -1;
  _266 = h_23(D)->mb.cache.non_zero_count[_265];
  i_nza_267 = (int) _266;
  # DEBUG i_nza => i_nza_267

  <bb 21>:
  # i_nza_339 = PHI <0(19), i_nza_267(20)>
  # i_mbb_xy_68 = PHI <i_mbb_xy_268(19), i_mbb_xy_204(20)>
  # prephitmp_425 = PHI <pretmp_424(19), _264(20)>
  # DEBUG i_nza => i_nza_339
  if (i_mbb_xy_68 >= 0)
    goto <bb 22>;
  else
    goto <bb 41> (<L40>);

  <bb 22>:
  _270 = prephitmp_425 + -8;
  _271 = h_23(D)->mb.cache.non_zero_count[_270];
  i_nzb_272 = (int) _271;
  # DEBUG i_nzb => i_nzb_272
  goto <bb 41> (<L40>);

<L38>:
  i_idx_273 = i_idx_36(D) + -25;
  # DEBUG i_idx => i_idx_273
  _274 = h_23(D)->mb.i_neighbour;
  _275 = _274 & 1;
  if (_275 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  _276 = h_23(D)->mb.i_mb_xy;
  i_mba_xy_277 = _276 + -1;
  # DEBUG i_mba_xy => i_mba_xy_277
  _278 = h_23(D)->mb.cbp;
  _279 = (long unsigned int) i_mba_xy_277;
  _280 = _279 * 2;
  _281 = _278 + _280;
  _282 = *_281;
  _283 = (int) _282;
  _284 = 512 << i_idx_273;
  i_nza_285 = _283 & _284;
  # DEBUG i_nza => i_nza_285

  <bb 25>:
  # i_mba_xy_340 = PHI <-1(23), i_mba_xy_277(24)>
  # i_nza_341 = PHI <0(23), i_nza_285(24)>
  # DEBUG i_nza => i_nza_341
  # DEBUG i_mba_xy => i_mba_xy_340
  _286 = _274 & 2;
  if (_286 != 0)
    goto <bb 27>;
  else
    goto <bb 26>;

  <bb 26>:
  pretmp_353 = x264_scan8[i_idx_36(D)];
  goto <bb 41> (<L40>);

  <bb 27>:
  i_mbb_xy_287 = h_23(D)->mb.i_mb_top_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_287
  _288 = h_23(D)->mb.cbp;
  _289 = (long unsigned int) i_mbb_xy_287;
  _290 = _289 * 2;
  _291 = _288 + _290;
  _292 = *_291;
  _293 = (int) _292;
  _294 = 512 << i_idx_273;
  i_nzb_295 = _293 & _294;
  # DEBUG i_nzb => i_nzb_295
  pretmp_417 = x264_scan8[i_idx_36(D)];
  goto <bb 41> (<L40>);

<L39>:
  _296 = i_idx_36(D) & 1;
  if (_296 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  i_mba_xy_297 = h_23(D)->mb.i_mb_xy;
  # DEBUG i_mba_xy => i_mba_xy_297
  goto <bb 32>;

  <bb 30>:
  _298 = h_23(D)->mb.i_neighbour;
  _299 = _298 & 1;
  if (_299 != 0)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  _300 = h_23(D)->mb.i_mb_xy;
  i_mba_xy_301 = _300 + -1;
  # DEBUG i_mba_xy => i_mba_xy_301

  <bb 32>:
  # i_mba_xy_307 = PHI <i_mba_xy_297(29), -1(30), i_mba_xy_301(31)>
  # DEBUG i_mba_xy => i_mba_xy_307
  _302 = i_idx_36(D) & 2;
  if (_302 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 33>:
  i_mbb_xy_303 = h_23(D)->mb.i_mb_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_303
  goto <bb 36>;

  <bb 34>:
  _304 = h_23(D)->mb.i_neighbour;
  _305 = _304 & 2;
  if (_305 != 0)
    goto <bb 35>;
  else
    goto <bb 83>;

  <bb 35>:
  i_mbb_xy_306 = h_23(D)->mb.i_mb_top_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_306

  <bb 36>:
  # i_mbb_xy_312 = PHI <i_mbb_xy_303(33), i_mbb_xy_306(35)>
  # DEBUG i_mbb_xy => i_mbb_xy_312
  if (i_mba_xy_307 >= 0)
    goto <bb 38>;
  else
    goto <bb 37>;

  <bb 37>:
  pretmp_422 = x264_scan8[i_idx_36(D)];
  goto <bb 39>;

  <bb 38>:
  # i_mbb_xy_351 = PHI <i_mbb_xy_312(36), -1(83)>
  _308 = x264_scan8[i_idx_36(D)];
  _309 = _308 + -1;
  _310 = h_23(D)->mb.cache.non_zero_count[_309];
  i_nza_311 = (int) _310;
  # DEBUG i_nza => i_nza_311

  <bb 39>:
  # i_nza_342 = PHI <0(37), i_nza_311(38)>
  # i_mbb_xy_394 = PHI <i_mbb_xy_312(37), i_mbb_xy_351(38)>
  # prephitmp_423 = PHI <pretmp_422(37), _308(38)>
  # DEBUG i_nza => i_nza_342
  if (i_mbb_xy_394 >= 0)
    goto <bb 40>;
  else
    goto <bb 41> (<L40>);

  <bb 40>:
  _314 = prephitmp_423 + -8;
  _315 = h_23(D)->mb.cache.non_zero_count[_314];
  i_nzb_316 = (int) _315;
  # DEBUG i_nzb => i_nzb_316

  # i_mba_xy_319 = PHI <-1(4), i_mba_xy_337(8), i_mba_xy_337(9), i_mba_xy_263(21), i_mba_xy_263(22), i_mba_xy_340(26), i_mba_xy_340(27), i_mba_xy_307(39), i_mba_xy_307(40), i_mba_xy_263(82), i_mba_xy_307(84)>
  # i_mbb_xy_324 = PHI <-1(4), -1(8), i_mbb_xy_244(9), i_mbb_xy_68(21), i_mbb_xy_68(22), -1(26), i_mbb_xy_287(27), i_mbb_xy_394(39), i_mbb_xy_394(40), -1(82), -1(84)>
  # i_nza_322 = PHI <0(4), i_nza_338(8), i_nza_338(9), i_nza_339(21), i_nza_339(22), i_nza_341(26), i_nza_341(27), i_nza_342(39), i_nza_342(40), 0(82), 0(84)>
  # i_nzb_327 = PHI <0(4), 0(8), i_nzb_251(9), 0(21), i_nzb_272(22), 0(26), i_nzb_295(27), 0(39), i_nzb_316(40), 0(82), 0(84)>
  # prephitmp_421 = PHI <pretmp_405(4), pretmp_354(8), pretmp_370(9), prephitmp_425(21), prephitmp_425(22), pretmp_353(26), pretmp_417(27), prephitmp_423(39), prephitmp_423(40), pretmp_419(82), pretmp_420(84)>
<L40>:
  # DEBUG i_nzb => i_nzb_327
  # DEBUG i_nza => i_nza_322
  # DEBUG i_mbb_xy => i_mbb_xy_324
  # DEBUG i_mba_xy => i_mba_xy_319
  _317 = h_23(D)->mb.i_type;
  _318 = (unsigned int) _317;
  if (_318 <= 3)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  _320 = i_mba_xy_319 < 0;
  _321 = (int) _320;
  i_nza_323 = _321 | i_nza_322;
  # DEBUG i_nza => i_nza_323
  _325 = i_mbb_xy_324 < 0;
  _326 = (int) _325;
  i_nzb_328 = _326 | i_nzb_327;
  # DEBUG i_nzb => i_nzb_328

  <bb 43>:
  # i_nza_333 = PHI <i_nza_322(41), i_nza_323(42)>
  # i_nzb_330 = PHI <i_nzb_327(41), i_nzb_328(42)>
  # DEBUG i_nzb => i_nzb_330
  # DEBUG i_nza => i_nza_333
  _329 = i_ctxBlockCat_25(D) * 4;
  if (i_nzb_330 != 0)
    goto <bb 45>;
  else
    goto <bb 44>;

  <bb 44>:

  <bb 45>:
  # iftmp.11_331 = PHI <2(43), 0(44)>
  _332 = _329 + iftmp.11_331;
  _334 = i_nza_333 != 0;
  _335 = (int) _334;
  _336 = _332 + _335;
  # DEBUG h => NULL
  # DEBUG i_cat => NULL
  # DEBUG i_idx => NULL
  # DEBUG i_nzb => NULL
  # DEBUG i_nza => NULL
  # DEBUG i_mbb_xy => NULL
  # DEBUG i_mba_xy => NULL
  ctx_39 = _336 + 85;
  # DEBUG ctx => ctx_39
  _41 = h_23(D)->mb.cache.non_zero_count[prephitmp_421];
  if (_41 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:
  _42 = (long int) ctx_39;
  # DEBUG cb => cb_43(D)
  # DEBUG i_ctx => _42
  # DEBUG b => 1
  _138 = cb_43(D)->state[_42];
  i_state_37 = (int) _138;
  # DEBUG i_state => i_state_37
  _151 = x264_cabac_transition[i_state_37][1];
  cb_43(D)->state[_42] = _151;
  _48 = cb_43(D)->f8_bits_encoded;
  _152 = x264_cabac_entropy[i_state_37][1];
  _153 = (int) _152;
  _154 = _48 + _153;
  cb_43(D)->f8_bits_encoded = _154;
  goto <bb 48>;

  <bb 47>:
  _45 = (long int) ctx_39;
  # DEBUG cb => cb_43(D)
  # DEBUG i_ctx => _45
  # DEBUG b => 0
  _44 = cb_43(D)->state[_45];
  i_state_155 = (int) _44;
  # DEBUG i_state => i_state_155
  _156 = x264_cabac_transition[i_state_155][0];
  cb_43(D)->state[_45] = _156;
  _157 = cb_43(D)->f8_bits_encoded;
  _158 = x264_cabac_entropy[i_state_155][0];
  _159 = (int) _158;
  _160 = _157 + _159;
  cb_43(D)->f8_bits_encoded = _160;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_coeff_abs_m1 ={v} {CLOBBER};
  goto <bb 80>;

  <bb 48>:
  i_ctx_sig_27 = (const int) _26;
  i_ctx_last_30 = (const int) _29;
  _49 = h_23(D)->quantf.coeff_last[i_ctxBlockCat_25(D)];
  i_last_52 = _49 (l_50(D));
  # DEBUG i_last => i_last_52
  _53 = i_count_35(D) + -1;
  _54 = i_last_52 + 1;
  i_sigmap_size_55 = MIN_EXPR <_53, _54>;
  # DEBUG i_sigmap_size => i_sigmap_size_55
  if (i_ctxBlockCat_25(D) == 5)
    goto <bb 51>;
  else
    goto <bb 49>;

  <bb 49>:
  # DEBUG i => 0
  # DEBUG i_coeff => 0
  if (i_sigmap_size_55 > 0)
    goto <bb 58>;
  else
    goto <bb 50>;

  <bb 50>:
  pretmp_427 = cb_43(D)->f8_bits_encoded;
  goto <bb 66>;

  <bb 51>:
  # DEBUG i => 0
  # DEBUG i_coeff => 0
  if (i_sigmap_size_55 > 0)
    goto <bb 52>;
  else
    goto <bb 50>;

  <bb 52>:
  significant_coeff_flag_offset_34 = &significant_coeff_flag_offset_8x8[_24];
  pretmp_431 = cb_43(D)->f8_bits_encoded;

  <bb 53>:
  # i_coeff_392 = PHI <0(52), i_coeff_1(57)>
  # i_401 = PHI <0(52), i_88(57)>
  # prephitmp_432 = PHI <pretmp_431(52), prephitmp_372(57)>
  # DEBUG i => i_401
  # DEBUG i_coeff => i_coeff_392
  _56 = (long unsigned int) i_401;
  _57 = _56 * 2;
  _58 = l_50(D) + _57;
  _59 = *_58;
  if (_59 != 0)
    goto <bb 54>;
  else
    goto <bb 55>;

  <bb 54>:
  _63 = (int) _59;
  _64 = ABS_EXPR <_63>;
  _65 = _64 + -1;
  i_coeff_abs_m1[i_coeff_392] = _65;
  i_coeff_67 = i_coeff_392 + 1;
  # DEBUG i_coeff => i_coeff_67
  _69 = significant_coeff_flag_offset_34 + _56;
  _70 = *_69;
  _71 = (int) _70;
  _72 = i_ctx_sig_27 + _71;
  _73 = (long int) _72;
  # DEBUG cb => cb_43(D)
  # DEBUG i_ctx => _73
  # DEBUG b => 1
  _81 = cb_43(D)->state[_73];
  i_state_167 = (int) _81;
  # DEBUG i_state => i_state_167
  _168 = x264_cabac_transition[i_state_167][1];
  cb_43(D)->state[_73] = _168;
  _170 = x264_cabac_entropy[i_state_167][1];
  _171 = (int) _170;
  _172 = _171 + prephitmp_432;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _75 = i_last_52 == i_401;
  _76 = (long int) _75;
  _77 = last_coeff_flag_offset_8x8[i_401];
  _78 = (int) _77;
  _79 = i_ctx_last_30 + _78;
  _80 = (long int) _79;
  # DEBUG cb => cb_43(D)
  # DEBUG i_ctx => _80
  # DEBUG b => _76
  _46 = cb_43(D)->state[_80];
  i_state_161 = (int) _46;
  # DEBUG i_state => i_state_161
  _162 = x264_cabac_transition[i_state_161][_76];
  cb_43(D)->state[_80] = _162;
  _164 = x264_cabac_entropy[i_state_161][_76];
  _165 = (int) _164;
  _166 = _165 + _172;
  cb_43(D)->f8_bits_encoded = _166;
  goto <bb 56>;

  <bb 55>:
  _82 = significant_coeff_flag_offset_34 + _56;
  _83 = *_82;
  _84 = (int) _83;
  _85 = i_ctx_sig_27 + _84;
  _86 = (long int) _85;
  # DEBUG cb => cb_43(D)
  # DEBUG i_ctx => _86
  # DEBUG b => 0
  _74 = cb_43(D)->state[_86];
  i_state_173 = (int) _74;
  # DEBUG i_state => i_state_173
  _174 = x264_cabac_transition[i_state_173][0];
  cb_43(D)->state[_86] = _174;
  _176 = x264_cabac_entropy[i_state_173][0];
  _177 = (int) _176;
  _178 = _177 + prephitmp_432;
  cb_43(D)->f8_bits_encoded = _178;

  <bb 56>:
  # i_coeff_1 = PHI <i_coeff_67(54), i_coeff_392(55)>
  # prephitmp_372 = PHI <_166(54), _178(55)>
  # DEBUG i_coeff => i_coeff_1
  i_88 = i_401 + 1;
  # DEBUG i => i_88
  # DEBUG i => i_88
  # DEBUG i_coeff => i_coeff_1
  if (i_sigmap_size_55 > i_88)
    goto <bb 57>;
  else
    goto <bb 65>;

  <bb 57>:
  goto <bb 53>;

  <bb 58>:
  pretmp_433 = cb_43(D)->f8_bits_encoded;

  <bb 59>:
  # i_coeff_402 = PHI <0(58), i_coeff_3(64)>
  # i_391 = PHI <0(58), i_109(64)>
  # prephitmp_434 = PHI <pretmp_433(58), prephitmp_403(64)>
  # DEBUG i => i_391
  # DEBUG i_coeff => i_coeff_402
  _89 = (long unsigned int) i_391;
  _90 = _89 * 2;
  _91 = l_50(D) + _90;
  _92 = *_91;
  if (_92 != 0)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 60>:
  _93 = (int) _92;
  _94 = ABS_EXPR <_93>;
  _95 = _94 + -1;
  i_coeff_abs_m1[i_coeff_402] = _95;
  i_coeff_97 = i_coeff_402 + 1;
  # DEBUG i_coeff => i_coeff_97
  _98 = i_ctx_sig_27 + i_391;
  _99 = (long int) _98;
  # DEBUG cb => cb_43(D)
  # DEBUG i_ctx => _99
  # DEBUG b => 1
  _105 = cb_43(D)->state[_99];
  i_state_184 = (int) _105;
  # DEBUG i_state => i_state_184
  _185 = x264_cabac_transition[i_state_184][1];
  cb_43(D)->state[_99] = _185;
  _187 = x264_cabac_entropy[i_state_184][1];
  _188 = (int) _187;
  _189 = _188 + prephitmp_434;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _101 = i_last_52 == i_391;
  _102 = (long int) _101;
  _103 = i_ctx_last_30 + i_391;
  _104 = (long int) _103;
  # DEBUG cb => cb_43(D)
  # DEBUG i_ctx => _104
  # DEBUG b => _102
  _87 = cb_43(D)->state[_104];
  i_state_179 = (int) _87;
  # DEBUG i_state => i_state_179
  _180 = x264_cabac_transition[i_state_179][_102];
  cb_43(D)->state[_104] = _180;
  _181 = x264_cabac_entropy[i_state_179][_102];
  _182 = (int) _181;
  _183 = _182 + _189;
  cb_43(D)->f8_bits_encoded = _183;
  goto <bb 62>;

  <bb 61>:
  _106 = i_ctx_sig_27 + i_391;
  _107 = (long int) _106;
  # DEBUG cb => cb_43(D)
  # DEBUG i_ctx => _107
  # DEBUG b => 0
  _100 = cb_43(D)->state[_107];
  i_state_190 = (int) _100;
  # DEBUG i_state => i_state_190
  _191 = x264_cabac_transition[i_state_190][0];
  cb_43(D)->state[_107] = _191;
  _193 = x264_cabac_entropy[i_state_190][0];
  _194 = (int) _193;
  _195 = _194 + prephitmp_434;
  cb_43(D)->f8_bits_encoded = _195;

  <bb 62>:
  # i_coeff_3 = PHI <i_coeff_97(60), i_coeff_402(61)>
  # prephitmp_403 = PHI <_183(60), _195(61)>
  # DEBUG i_coeff => i_coeff_3
  i_109 = i_391 + 1;
  # DEBUG i => i_109
  # DEBUG i => i_109
  # DEBUG i_coeff => i_coeff_3
  if (i_sigmap_size_55 > i_109)
    goto <bb 64>;
  else
    goto <bb 63>;

  <bb 63>:
  # i_coeff_415 = PHI <i_coeff_3(62)>
  # prephitmp_411 = PHI <prephitmp_403(62)>
  goto <bb 66>;

  <bb 64>:
  goto <bb 59>;

  <bb 65>:
  # i_coeff_416 = PHI <i_coeff_1(56)>
  # prephitmp_412 = PHI <prephitmp_372(56)>

  <bb 66>:
  # i_coeff_5 = PHI <i_coeff_416(65), i_coeff_415(63), 0(50)>
  # i_11 = PHI <i_sigmap_size_55(65), i_sigmap_size_55(63), 0(50)>
  # prephitmp_428 = PHI <prephitmp_412(65), prephitmp_411(63), pretmp_427(50)>
  # DEBUG i => i_11
  # DEBUG i_coeff => i_coeff_5
  if (i_11 == i_last_52)
    goto <bb 67>;
  else
    goto <bb 68>;

  <bb 67>:
  _110 = (long unsigned int) i_11;
  _111 = _110 * 2;
  _112 = l_50(D) + _111;
  _113 = *_112;
  _114 = (int) _113;
  _115 = ABS_EXPR <_114>;
  _116 = _115 + -1;
  i_coeff_abs_m1[i_coeff_5] = _116;
  i_coeff_118 = i_coeff_5 + 1;
  # DEBUG i_coeff => i_coeff_118

  <bb 68>:
  # i_coeff_62 = PHI <i_coeff_118(67), i_coeff_5(66)>
  i_ctx_level_32 = (const int) _31;

  <bb 69>:
  # i_coeff_6 = PHI <i_coeff_62(68), i_coeff_119(78)>
  # node_ctx_7 = PHI <0(68), node_ctx_8(78)>
  # prephitmp_382 = PHI <1(68), pretmp_361(78)>
  # prephitmp_430 = PHI <prephitmp_428(68), pretmp_429(78)>
  # DEBUG node_ctx => node_ctx_7
  # DEBUG i_coeff => i_coeff_6
  i_coeff_119 = i_coeff_6 + -1;
  # DEBUG i_coeff => i_coeff_119
  _120 = i_coeff_abs_m1[i_coeff_119];
  i_prefix_121 = MIN_EXPR <_120, 14>;
  # DEBUG i_prefix => i_prefix_121
  ctx_123 = i_ctx_level_32 + prephitmp_382;
  # DEBUG ctx => ctx_123
  if (i_prefix_121 != 0)
    goto <bb 70>;
  else
    goto <bb 76>;

  <bb 70>:
  _124 = (long int) ctx_123;
  # DEBUG cb => cb_43(D)
  # DEBUG i_ctx => _124
  # DEBUG b => 1
  _108 = cb_43(D)->state[_124];
  i_state_196 = (int) _108;
  # DEBUG i_state => i_state_196
  _197 = x264_cabac_transition[i_state_196][1];
  cb_43(D)->state[_124] = _197;
  _199 = x264_cabac_entropy[i_state_196][1];
  _200 = (int) _199;
  _201 = _200 + prephitmp_430;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _126 = coeff_abs_levelgt1_ctx[node_ctx_7];
  ctx_127 = i_ctx_level_32 + _126;
  # DEBUG ctx => ctx_127
  _128 = cb_43(D)->state[ctx_127];
  _129 = (int) _128;
  _130 = cabac_size_unary[i_prefix_121][_129];
  _131 = (int) _130;
  _132 = _131 + _201;
  cb_43(D)->f8_bits_encoded = _132;
  _134 = cabac_transition_unary[i_prefix_121][_129];
  cb_43(D)->state[ctx_127] = _134;
  if (i_prefix_121 == 14)
    goto <bb 71>;
  else
    goto <bb 75>;

  <bb 71>:
  _136 = _120 + -14;
  _137 = (unsigned int) _136;
  # DEBUG val => _137
  if (_137 <= 254)
    goto <bb 72>;
  else
    goto <bb 73>;

  <bb 72>:
  _125 = _137 + 1;
  _202 = x264_ue_size_tab[_125];
  _203 = (int) _202;
  goto <bb 74>;

  <bb 73>:
  # DEBUG val => _137
  _343 = _137 + 1;
  _344 = _343 >> 8;
  _345 = x264_ue_size_tab[_344];
  _346 = (int) _345;
  _347 = _346 + 16;
  # DEBUG val => NULL

  <bb 74>:
  # _205 = PHI <_203(72), _347(73)>
  # DEBUG val => NULL
  _139 = _205 << 8;
  _140 = _132 + _139;
  cb_43(D)->f8_bits_encoded = _140;

  <bb 75>:
  _142 = coeff_abs_level_transition[1][node_ctx_7];
  node_ctx_143 = (int) _142;
  # DEBUG node_ctx => node_ctx_143
  goto <bb 77>;

  <bb 76>:
  _144 = (long int) ctx_123;
  # DEBUG cb => cb_43(D)
  # DEBUG i_ctx => _144
  # DEBUG b => 0
  _206 = cb_43(D)->state[_144];
  i_state_207 = (int) _206;
  # DEBUG i_state => i_state_207
  _208 = x264_cabac_transition[i_state_207][0];
  cb_43(D)->state[_144] = _208;
  _210 = x264_cabac_entropy[i_state_207][0];
  _211 = (int) _210;
  _212 = _211 + prephitmp_430;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _146 = coeff_abs_level_transition[0][node_ctx_7];
  node_ctx_147 = (int) _146;
  # DEBUG node_ctx => node_ctx_147
  _148 = _212 + 256;
  cb_43(D)->f8_bits_encoded = _148;

  <bb 77>:
  # node_ctx_8 = PHI <node_ctx_143(75), node_ctx_147(76)>
  # DEBUG node_ctx => node_ctx_8
  if (i_coeff_119 > 0)
    goto <bb 78>;
  else
    goto <bb 79>;

  <bb 78>:
  pretmp_361 = coeff_abs_level1_ctx[node_ctx_8];
  pretmp_429 = cb_43(D)->f8_bits_encoded;
  goto <bb 69>;

  <bb 79>:
  i_coeff_abs_m1 ={v} {CLOBBER};

  <bb 80>:
  return;

  <bb 81>:
  # DEBUG i_mbb_xy => -1
  if (i_mba_xy_263 >= 0)
    goto <bb 20>;
  else
    goto <bb 82>;

  <bb 82>:
  pretmp_419 = x264_scan8[i_idx_36(D)];
  goto <bb 41> (<L40>);

  <bb 83>:
  # DEBUG i_mbb_xy => -1
  if (i_mba_xy_307 >= 0)
    goto <bb 38>;
  else
    goto <bb 84>;

  <bb 84>:
  pretmp_420 = x264_scan8[i_idx_36(D)];
  goto <bb 41> (<L40>);

}



;; Function x264_rd_cost_i8x8_chroma (x264_rd_cost_i8x8_chroma, funcdef_no=185, decl_uid=8604, cgraph_uid=185, symbol_order=245)


Analyzing loop at encoder/cabac.c:1161
encoder/cabac.c:1161:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:1161:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:1161:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 13
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:1161:13: note: === vect_analyze_data_refs ===
encoder/cabac.c:1161:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:1161:13: note: bad data references.

Analyzing loop at encoder/cavlc.c:734
encoder/cavlc.c:734:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:734:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:734:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 14
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cavlc.c:734:13: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[i_90]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: 0
	constant offset from base address: 64
	step: 4
	aligned to: 128
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {16, +, 1}_14
encoder/cavlc.c:734:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:734:13: note: bad data references.
encoder/rdo.c:287:17: note: vectorized 0 loops in function.
x264_rd_cost_i8x8_chroma (struct x264_t * h, int i_lambda2, int i_mode, int b_dct)
{
  int i;
  int count;
  int D.21387;
  int i;
  struct x264_cabac_t cabac_tmp;
  uint64_t i_bits;
  uint64_t i_ssd;
  int _7;
  uint8_t * _9;
  int _10;
  int _14;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _15;
  int * _16;
  int _19;
  long unsigned int _20;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  int _29;
  long unsigned int _31;
  uint64_t _32;
  uint8_t * _33;
  uint8_t * _34;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _35;
  int _36;
  uint8_t * _38;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _40;
  int _41;
  int _42;
  int16_t[4] * _43;
  int16_t[4] * _44;
  int _45;
  int16_t[16] * _47;
  int16_t * _48;
  unsigned char _51;
  unsigned int _52;
  unsigned int _53;
  unsigned char _54;
  int _55;
  int _56;
  int16_t[4] * _57;
  struct bs_t * _58;
  int16_t[4] * _59;
  int _60;
  int _62;
  int16_t[16] * _63;
  int _65;
  unsigned char _66;
  int16_t * _67;
  unsigned int ivtmp_71;
  unsigned int ivtmp_103;
  unsigned int ivtmp_104;
  int pretmp_106;
  int pretmp_107;
  int prephitmp_108;
  unsigned int ivtmp_109;

  <bb 2>:
  if (b_dct_4(D) != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _7 = h_6(D)->mb.i_chroma_qp;
  x264_mb_encode_8x8_chroma (h_6(D), 0, _7);

  <bb 4>:
  # DEBUG h => h_6(D)
  # DEBUG size => 3
  # DEBUG p => 1
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG satd => 0
  _9 = h_6(D)->mb.pic.p_fdec[1];
  # DEBUG fdec => _9
  _38 = h_6(D)->mb.pic.p_fenc[1];
  # DEBUG fenc => _38
  # DEBUG satd => 0
  _40 = h_6(D)->pixf.ssd[3];
  _41 = _40 (_38, 16, _9, 32);
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG p => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG sa8d => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG dc => NULL
  # DEBUG acs => NULL
  # DEBUG fenc => NULL
  # DEBUG fdec => NULL
  # DEBUG satd => NULL
  # DEBUG h => h_6(D)
  # DEBUG size => 3
  # DEBUG p => 2
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG satd => 0
  _33 = h_6(D)->mb.pic.p_fdec[2];
  # DEBUG fdec => _33
  _34 = h_6(D)->mb.pic.p_fenc[2];
  # DEBUG fenc => _34
  # DEBUG satd => 0
  _35 = h_6(D)->pixf.ssd[3];
  _36 = _35 (_34, 16, _33, 32);
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG p => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG sa8d => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG dc => NULL
  # DEBUG acs => NULL
  # DEBUG fenc => NULL
  # DEBUG fdec => NULL
  # DEBUG satd => NULL
  _10 = _36 + _41;
  i_ssd_11 = (uint64_t) _10;
  # DEBUG i_ssd => i_ssd_11
  h_6(D)->mb.i_chroma_pred_mode = i_mode_12(D);
  _14 = h_6(D)->param.b_cabac;
  if (_14 != 0)
    goto <bb 5>;
  else
    goto <bb 12>;

  <bb 5>:
  _15 = h_6(D)->mc.memcpy_aligned;
  _16 = &h_6(D)->cabac.f8_bits_encoded;
  _15 (&cabac_tmp.f8_bits_encoded, _16, 464);
  # DEBUG h => h_6(D)
  # DEBUG cb => &cabac_tmp
  x264_cabac_mb_intra_chroma_pred_mode (h_6(D), &cabac_tmp);
  x264_cabac_mb_cbp_chroma (h_6(D), &cabac_tmp);
  _42 = h_6(D)->mb.i_cbp_chroma;
  if (_42 > 0)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  _19 = cabac_tmp.f8_bits_encoded;
  _20 = (long unsigned int) _19;
  _22 = (long unsigned int) i_lambda2_21(D);
  _23 = _20 * _22;
  _24 = _23 + 128;
  i_bits_25 = _24 >> 8;
  # DEBUG i_bits => i_bits_25
  cabac_tmp ={v} {CLOBBER};
  goto <bb 20>;

  <bb 7>:
  _43 = &h_6(D)->dct.chroma_dc[0];
  block_residual_write_cabac (h_6(D), &cabac_tmp, 3, 25, _43, 4);
  _44 = &h_6(D)->dct.chroma_dc[1];
  block_residual_write_cabac (h_6(D), &cabac_tmp, 3, 26, _44, 4);
  _45 = h_6(D)->mb.i_cbp_chroma;
  if (_45 == 2)
    goto <bb 8>;
  else
    goto <bb 6>;

  <bb 8>:

  <bb 9>:
  # i_89 = PHI <16(8), i_49(11)>
  # ivtmp_71 = PHI <8(8), ivtmp_109(11)>
  # DEBUG i => i_89
  _47 = &h_6(D)->dct.luma4x4[i_89];
  _48 = _47 + 2;
  block_residual_write_cabac (h_6(D), &cabac_tmp, 4, i_89, _48, 15);
  i_49 = i_89 + 1;
  # DEBUG i => i_49
  # DEBUG i => i_49
  ivtmp_109 = ivtmp_71 - 1;
  if (ivtmp_109 != 0)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 6>;

  <bb 11>:
  goto <bb 9>;

  <bb 12>:
  # DEBUG h => h_6(D)
  _51 = x264_mb_pred_mode8x8c_fix[i_mode_12(D)];
  _52 = (unsigned int) _51;
  # DEBUG val => _52
  _53 = _52 + 1;
  _54 = x264_ue_size_tab[_53];
  _55 = (int) _54;
  # DEBUG val => NULL
  h_6(D)->out.bs.i_bits_encoded = _55;
  _56 = h_6(D)->mb.i_cbp_chroma;
  if (_56 != 0)
    goto <bb 13>;
  else
    goto <bb 19>;

  <bb 13>:
  _57 = &h_6(D)->dct.chroma_dc[0];
  _58 = &h_6(D)->out.bs;
  block_residual_write_cavlc (h_6(D), _58, 3, 25, _57, 4);
  _59 = &h_6(D)->dct.chroma_dc[1];
  block_residual_write_cavlc (h_6(D), _58, 3, 26, _59, 4);
  _60 = h_6(D)->mb.i_cbp_chroma;
  if (_60 == 2)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:
  goto <bb 16>;

  <bb 15>:
  pretmp_106 = h_6(D)->out.bs.i_bits_encoded;
  goto <bb 19>;

  <bb 16>:
  # i_90 = PHI <16(14), i_68(17)>
  # ivtmp_104 = PHI <8(14), ivtmp_103(17)>
  # DEBUG i => i_90
  _62 = x264_scan8[i_90];
  _63 = &h_6(D)->dct.luma4x4[i_90];
  # DEBUG v => _63
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_64 : "r" _63, "m" MEM[(struct  *)_63]);
  # DEBUG count => count_64
  _65 = count_64 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _66 = (unsigned char) _65;
  h_6(D)->mb.cache.non_zero_count[_62] = _66;
  _67 = _63 + 2;
  block_residual_write_cavlc (h_6(D), _58, 4, i_90, _67, 15);
  i_68 = i_90 + 1;
  # DEBUG i => i_68
  # DEBUG i => i_68
  ivtmp_103 = ivtmp_104 - 1;
  if (ivtmp_103 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  goto <bb 16>;

  <bb 18>:
  pretmp_107 = h_6(D)->out.bs.i_bits_encoded;

  <bb 19>:
  # prephitmp_108 = PHI <_55(12), pretmp_106(15), pretmp_107(18)>
  # DEBUG h => NULL
  # DEBUG count => NULL
  # DEBUG i => NULL
  _29 = i_lambda2_21(D) * prephitmp_108;
  i_bits_30 = (uint64_t) _29;
  # DEBUG i_bits => i_bits_30

  <bb 20>:
  # i_bits_1 = PHI <i_bits_25(6), i_bits_30(19)>
  # DEBUG i_bits => i_bits_1
  _31 = i_ssd_11 << 8;
  _32 = i_bits_1 + _31;
  return _32;

}



;; Function x264_mb_analyse_inter_p8x4 (x264_mb_analyse_inter_p8x4, funcdef_no=209, decl_uid=9202, cgraph_uid=209, symbol_order=278)


Analyzing loop at encoder/analyse.c:1417
encoder/analyse.c:1417:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1417:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1417:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 4294967295] != 0
  bounds on difference of bases: -1 ... -1
  result:
    # of iterations 1, bounded by 1
encoder/analyse.c:1417:5: note: === vect_analyze_data_refs ===
Creating dr for block_idx_x[idx_14]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: &block_idx_x
	offset from base address: (ssizetype) (i8x8_6(D) * 4)
	constant offset from base address: 0
	step: 2
	aligned to: 4
	base_object: MEM[(uint8_t[16] *)&block_idx_x]
	Access function 0: {pretmp_164 * 2, +, 2}_1
Creating dr for block_idx_y[idx_14]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: &block_idx_y
	offset from base address: (ssizetype) (i8x8_6(D) * 4)
	constant offset from base address: 0
	step: 2
	aligned to: 4
	base_object: MEM[(uint8_t[16] *)&block_idx_y]
	Access function 0: {pretmp_164 * 2, +, 2}_1
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_pixel
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3776
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: {0, +, 1}_1
	Access function 2: i8x8_6(D)
	Access function 3: 27136
	Access function 4: 3072
Creating dr for a_5(D)->p_cost_mv
analyze_innermost: success.
	base_address: a_5(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 128
	base_object: *a_5(D)
	Access function 0: 128
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_cost_mv
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3784
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 64
	Access function 1: {0, +, 1}_1
	Access function 2: i8x8_6(D)
	Access function 3: 27136
	Access function 4: 3072
Creating dr for h_8(D)->mb.pic.i_stride[0]
analyze_innermost: success.
	base_address: h_8(D)
	offset from base address: 0
	constant offset from base address: 18984
	step: 0
	aligned to: 128
	base_object: *h_8(D)
	Access function 0: 0
	Access function 1: 57152
	Access function 2: 7680
	Access function 3: 87040
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3880
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for h_8(D)->mb.pic.i_stride[1]
analyze_innermost: success.
	base_address: h_8(D)
	offset from base address: 0
	constant offset from base address: 18988
	step: 0
	aligned to: 128
	base_object: *h_8(D)
	Access function 0: 1
	Access function 1: 57152
	Access function 2: 7680
	Access function 3: 87040
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3884
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 1
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)h_8(D) + 15576B]
analyze_innermost: success.
	base_address: h_8(D)
	offset from base address: 0
	constant offset from base address: 15576
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_8(D) + 15576B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fenc[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3848
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 576
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)h_8(D) + 15584B]
analyze_innermost: success.
	base_address: h_8(D)
	offset from base address: 0
	constant offset from base address: 15584
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_8(D) + 15584B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fenc[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3856
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 1
	Access function 1: 576
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)h_8(D) + 15592B]
analyze_innermost: success.
	base_address: h_8(D)
	offset from base address: 0
	constant offset from base address: 15592
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_8(D) + 15592B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fenc[2]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3864
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 2
	Access function 1: 576
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for *p_fref_9
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15656
	step: 0
	aligned to: 128
	base_object: *p_fref_9
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3880
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3800
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_9 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15664
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_9 + 8B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3880
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3808
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 1
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_9 + 16B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15672
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_9 + 16B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3880
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[2]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3816
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 2
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_9 + 24B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15680
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_9 + 24B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3880
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[3]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3824
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 3
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_9 + 32B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15688
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_9 + 32B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3884
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 1
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[4]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3832
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 4
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_9 + 40B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15696
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_9 + 40B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3884
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 1
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[5]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3840
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 5
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for h_8(D)->mb.pic.p_integral[0][_7]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D)
	offset from base address: (ssizetype) ((sizetype) _7 * 8)
	constant offset from base address: 18728
	step: 0
	aligned to: 8
	base_object: *h_8(D)
	Access function 0: _7
	Access function 1: 0
	Access function 2: 55104
	Access function 3: 7680
	Access function 4: 87040
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3880
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 27136
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].integral
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 3872
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 768
	Access function 1: {0, +, 1}_1
	Access function 2: i8x8_6(D)
	Access function 3: 27136
	Access function 4: 3072
encoder/analyse.c:1417:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:1417:5: note: bad data references.
encoder/analyse.c:1407:13: note: vectorized 0 loops in function.
x264_mb_analyse_inter_p8x4 (struct x264_t * h, struct x264_mb_analysis_t * a, int i8x8)
{
  uint8_t pix1[128];
  const int i_stride;
  const int or;
  const int oe;
  int D.21441;
  uint64_t val64;
  int dx;
  int dy;
  struct x264_me_t * m;
  const int i_mvc;
  const int y4;
  const int x4;
  const int idx;
  int i8x4;
  uint8_t * * p_fref;
  int _1;
  int _7;
  int _13;
  unsigned char _15;
  unsigned char _17;
  unsigned int ivtmp_19;
  int16_t * _23;
  int _25;
  int _27;
  uint8_t * _29;
  int _30;
  int _31;
  int _32;
  sizetype _33;
  uint8_t * _34;
  uint8_t * _36;
  int _37;
  int _38;
  int _39;
  int _40;
  int _41;
  int _42;
  sizetype _43;
  uint8_t * _44;
  uint8_t * _46;
  uint8_t * _47;
  uint8_t * _49;
  int _50;
  int _51;
  int _52;
  sizetype _53;
  uint8_t * _54;
  uint8_t * _56;
  int _57;
  int _58;
  int _59;
  sizetype _60;
  uint8_t * _61;
  uint8_t * _63;
  int _64;
  int _65;
  int _66;
  sizetype _67;
  uint8_t * _68;
  uint8_t * _70;
  int _71;
  int _72;
  int _73;
  sizetype _74;
  uint8_t * _75;
  uint8_t * _77;
  int _78;
  int _79;
  int _80;
  sizetype _81;
  uint8_t * _82;
  uint8_t * _84;
  int _85;
  int _86;
  int _87;
  sizetype _88;
  uint8_t * _89;
  uint16_t * _91;
  int _92;
  int _93;
  int _94;
  long unsigned int _95;
  long unsigned int _96;
  uint16_t * _97;
  int16_t[2] * _99;
  int _102;
  int16_t[2] * _103;
  unsigned int _104;
  unsigned char _105;
  int _107;
  int _108;
  int _109;
  int _110;
  int _111;
  int _112;
  int _113;
  int _115;
  int _116;
  int _117;
  int _119;
  int _122;
  int _123;
  int _125;
  int _126;
  int16_t[2] * _127;
  long unsigned int _130;
  long unsigned int _131;
  int _144;
  unsigned int ivtmp_145;
  int _147;
  int _148;
  int _149;
  int _150;
  int _151;
  int _153;
  int _154;
  int pretmp_164;
  int16_t[2] * pretmp_165;
  int pretmp_169;
  int prephitmp_170;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _220;
  short int _221;
  int _222;
  short int _223;
  int _224;
  uint8_t * _225;
  sizetype _226;
  uint8_t * _227;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _228;
  short int _229;
  int _230;
  short int _231;
  int _232;
  uint8_t * _233;
  uint8_t * _234;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _235;
  short int _236;
  int _237;
  short int _238;
  int _239;
  uint8_t * _240;
  int _241;
  int _242;
  sizetype _243;
  uint8_t * _244;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _245;
  short int _246;
  int _247;
  short int _248;
  int _249;
  uint8_t * _250;
  uint8_t * _251;
  int _265;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _283;
  uint8_t * _284;
  sizetype _285;
  uint8_t * _286;
  int _287;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _288;
  uint8_t * _289;
  uint8_t * _290;
  int _291;
  int _292;

  <bb 2>:
  _7 = a_5(D)->l0.me8x8[i8x8_6(D)].i_ref;
  p_fref_9 = &h_8(D)->mb.pic.p_fref[0][_7];
  # DEBUG p_fref => p_fref_9
  # DEBUG D#73 => &h_8(D)->mb.pic.p_fenc
  # DEBUG p_fenc => D#73
  # DEBUG i_ref => _7
  h_8(D)->mb.i_partition = 13;
  # DEBUG i8x4 => 0
  # DEBUG i8x4 => 0
  pretmp_164 = i8x8_6(D) * 2;
  pretmp_165 = &a_5(D)->l0.me4x4[i8x8_6(D)][0].mv;

  <bb 3>:
  # i8x4_261 = PHI <i8x4_106(4), 0(2)>
  # ivtmp_145 = PHI <ivtmp_19(4), 2(2)>
  # DEBUG i8x4 => i8x4_261
  _13 = pretmp_164 + i8x4_261;
  idx_14 = _13 * 2;
  # DEBUG idx => idx_14
  _15 = block_idx_x[idx_14];
  x4_16 = (const int) _15;
  # DEBUG x4 => x4_16
  _17 = block_idx_y[idx_14];
  y4_18 = (const int) _17;
  # DEBUG y4 => y4_18
  _265 = i8x4_261 ^ 1;
  _1 = _265 & 1;
  # DEBUG i_mvc => _1
  m_21 = &a_5(D)->l0.me8x4[i8x8_6(D)][i8x4_261];
  # DEBUG m => m_21
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_pixel = 4;
  _23 = a_5(D)->p_cost_mv;
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_cost_mv = _23;
  _25 = h_8(D)->mb.pic.i_stride[0];
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0] = _25;
  _27 = h_8(D)->mb.pic.i_stride[1];
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[1] = _27;
  _29 = MEM[(uint8_t * *)h_8(D) + 15576B];
  _30 = y4_18 * 16;
  _31 = x4_16 + _30;
  _32 = _31 * 4;
  _33 = (sizetype) _32;
  _34 = _29 + _33;
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fenc[0] = _34;
  _36 = MEM[(uint8_t * *)h_8(D) + 15584B];
  _37 = x4_16 * 4;
  _38 = _37 >> 1;
  _39 = y4_18 * 4;
  _40 = _39 >> 1;
  _41 = _40 * 16;
  _42 = _38 + _41;
  _43 = (sizetype) _42;
  _44 = _36 + _43;
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fenc[1] = _44;
  _46 = MEM[(uint8_t * *)h_8(D) + 15592B];
  _47 = _46 + _43;
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fenc[2] = _47;
  _49 = *p_fref_9;
  _50 = MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0];
  _51 = _39 * _50;
  _52 = _37 + _51;
  _53 = (sizetype) _52;
  _54 = _49 + _53;
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[0] = _54;
  _56 = MEM[(uint8_t * *)p_fref_9 + 8B];
  _57 = MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0];
  _58 = _39 * _57;
  _59 = _37 + _58;
  _60 = (sizetype) _59;
  _61 = _56 + _60;
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[1] = _61;
  _63 = MEM[(uint8_t * *)p_fref_9 + 16B];
  _64 = MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0];
  _65 = _39 * _64;
  _66 = _37 + _65;
  _67 = (sizetype) _66;
  _68 = _63 + _67;
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[2] = _68;
  _70 = MEM[(uint8_t * *)p_fref_9 + 24B];
  _71 = MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0];
  _72 = _39 * _71;
  _73 = _37 + _72;
  _74 = (sizetype) _73;
  _75 = _70 + _74;
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[3] = _75;
  _77 = MEM[(uint8_t * *)p_fref_9 + 32B];
  _78 = MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[1];
  _79 = _40 * _78;
  _80 = _38 + _79;
  _81 = (sizetype) _80;
  _82 = _77 + _81;
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[4] = _82;
  _84 = MEM[(uint8_t * *)p_fref_9 + 40B];
  _85 = MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[1];
  _86 = _40 * _85;
  _87 = _38 + _86;
  _88 = (sizetype) _87;
  _89 = _84 + _88;
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].p_fref[5] = _89;
  _91 = h_8(D)->mb.pic.p_integral[0][_7];
  _92 = MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].i_stride[0];
  _93 = _39 * _92;
  _94 = _37 + _93;
  _95 = (long unsigned int) _94;
  _96 = _95 * 2;
  _97 = _91 + _96;
  MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].integral = _97;
  _99 = &MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].mvp;
  x264_mb_predict_mv (h_8(D), 0, idx_14, 2, _99);
  # DEBUG D#428 => &a_5(D)->l0.me4x4[i8x8_6(D)][0].mv
  # DEBUG h => h_8(D)
  # DEBUG m => m_21
  # DEBUG mvc => D#428
  # DEBUG i_mvc => _1
  x264_me_search_ref (h_8(D), m_21, pretmp_165, _1, 0B);
  # DEBUG h => NULL
  # DEBUG m => NULL
  # DEBUG mvc => NULL
  # DEBUG i_mvc => NULL
  _103 = &MEM[(struct x264_me_t *)a_5(D)].l0.me8x4[i8x8_6(D)][i8x4_261].mv;
  _104 = MEM[(uint32_t *)_103];
  # DEBUG h => h_8(D)
  # DEBUG x => x4_16
  # DEBUG y => y4_18
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG i_list => 0
  # DEBUG mv => _104
  _113 = x4_16 + 12;
  _125 = y4_18 * 8;
  _126 = _113 + _125;
  _127 = &h_8(D)->mb.cache.mv[0][_126];
  # DEBUG dst => _127
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG val => _104
  _130 = (long unsigned int) _104;
  _131 = _130 << 32;
  val64_132 = _130 + _131;
  # DEBUG val64 => val64_132
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_127] = val64_132;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  i8x4_106 = i8x4_261 + 1;
  # DEBUG i8x4 => i8x4_106
  # DEBUG i8x4 => i8x4_106
  ivtmp_19 = ivtmp_145 - 1;
  if (ivtmp_19 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  _107 = a_5(D)->l0.me8x4[i8x8_6(D)][0].cost;
  _108 = a_5(D)->l0.me8x4[i8x8_6(D)][1].cost;
  _109 = _107 + _108;
  _110 = a_5(D)->i_lambda;
  _111 = h_8(D)->sh.i_num_ref_idx_l0_active;
  _112 = _111 + -1;
  # DEBUG x => _112
  # DEBUG val => _7
  if (_112 == 1)
    goto <bb 8>;
  else
    goto <bb 6>;

  <bb 6>:
  if (_112 > 1)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _102 = _7 + 1;
  _105 = x264_ue_size_tab[_102];
  _144 = (int) _105;
  pretmp_169 = _110 * _144;

  <bb 8>:
  # prephitmp_170 = PHI <_110(5), 0(6), pretmp_169(7)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _115 = _109 + prephitmp_170;
  _116 = _110 * 3;
  _117 = _115 + _116;
  a_5(D)->l0.i_cost8x4[i8x8_6(D)] = _117;
  _119 = h_8(D)->mb.b_chroma_me;
  if (_119 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # DEBUG h => h_8(D)
  # DEBUG a => a_5(D)
  # DEBUG p_fref => p_fref_9
  # DEBUG i8x8 => i8x8_6(D)
  # DEBUG pixel => 4
  # DEBUG pix2 => &MEM[(void *)&pix1 + 8B]
  i_stride_146 = h_8(D)->mb.pic.i_stride[1];
  # DEBUG i_stride => i_stride_146
  _147 = i8x8_6(D) & 1;
  _148 = _147 * 4;
  _149 = i8x8_6(D) & 2;
  _150 = _149 * 2;
  _151 = i_stride_146 * _150;
  or_152 = _148 + _151;
  # DEBUG or => or_152
  _153 = _149 * 8;
  _154 = _147 + _153;
  oe_155 = _154 * 4;
  # DEBUG oe => oe_155
  _220 = h_8(D)->mc.mc_chroma;
  _221 = a_5(D)->l0.me8x4[i8x8_6(D)][0].mv[1];
  _222 = (int) _221;
  _223 = a_5(D)->l0.me8x4[i8x8_6(D)][0].mv[0];
  _224 = (int) _223;
  _225 = MEM[(uint8_t * *)p_fref_9 + 32B];
  _226 = (sizetype) or_152;
  _227 = _225 + _226;
  _220 (&pix1[0], 16, _227, i_stride_146, _224, _222, 4, 2);
  _228 = h_8(D)->mc.mc_chroma;
  _229 = a_5(D)->l0.me8x4[i8x8_6(D)][0].mv[1];
  _230 = (int) _229;
  _231 = a_5(D)->l0.me8x4[i8x8_6(D)][0].mv[0];
  _232 = (int) _231;
  _233 = MEM[(uint8_t * *)p_fref_9 + 40B];
  _234 = _233 + _226;
  _228 (&MEM[(void *)&pix1 + 8B], 16, _234, i_stride_146, _232, _230, 4, 2);
  _235 = h_8(D)->mc.mc_chroma;
  _236 = a_5(D)->l0.me8x4[i8x8_6(D)][1].mv[1];
  _237 = (int) _236;
  _238 = a_5(D)->l0.me8x4[i8x8_6(D)][1].mv[0];
  _239 = (int) _238;
  _240 = MEM[(uint8_t * *)p_fref_9 + 32B];
  _241 = i_stride_146 * 2;
  _242 = or_152 + _241;
  _243 = (sizetype) _242;
  _244 = _240 + _243;
  _235 (&pix1[32], 16, _244, i_stride_146, _239, _237, 4, 2);
  _245 = h_8(D)->mc.mc_chroma;
  _246 = a_5(D)->l0.me8x4[i8x8_6(D)][1].mv[1];
  _247 = (int) _246;
  _248 = a_5(D)->l0.me8x4[i8x8_6(D)][1].mv[0];
  _249 = (int) _248;
  _250 = MEM[(uint8_t * *)p_fref_9 + 40B];
  _251 = _250 + _243;
  _245 (&MEM[(void *)&pix1 + 40B], 16, _251, i_stride_146, _249, _247, 4, 2);
  _283 = h_8(D)->pixf.mbcmp[6];
  _284 = h_8(D)->mb.pic.p_fenc[1];
  _285 = (sizetype) oe_155;
  _286 = _284 + _285;
  _287 = _283 (_286, 16, &pix1, 16);
  _288 = h_8(D)->pixf.mbcmp[6];
  _289 = h_8(D)->mb.pic.p_fenc[2];
  _290 = _289 + _285;
  _291 = _288 (_290, 16, &MEM[(void *)&pix1 + 8B], 16);
  _292 = _287 + _291;
  pix1 ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG p_fref => NULL
  # DEBUG i8x8 => NULL
  # DEBUG pixel => NULL
  # DEBUG oe => NULL
  # DEBUG or => NULL
  # DEBUG i_stride => NULL
  _122 = a_5(D)->l0.i_cost8x4[i8x8_6(D)];
  _123 = _122 + _292;
  a_5(D)->l0.i_cost8x4[i8x8_6(D)] = _123;

  <bb 10>:
  return;

}



;; Function x264_mb_analyse_inter_p4x8 (x264_mb_analyse_inter_p4x8, funcdef_no=210, decl_uid=9219, cgraph_uid=210, symbol_order=279)


Analyzing loop at encoder/analyse.c:1454
encoder/analyse.c:1454:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1454:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1454:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 4294967295] != 0
  bounds on difference of bases: -1 ... -1
  result:
    # of iterations 1, bounded by 1
encoder/analyse.c:1454:5: note: === vect_analyze_data_refs ===
Creating dr for block_idx_x[idx_13]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: &block_idx_x
	offset from base address: (ssizetype) (i8x8_6(D) * 4)
	constant offset from base address: 0
	step: 1
	aligned to: 4
	base_object: MEM[(uint8_t[16] *)&block_idx_x]
	Access function 0: {pretmp_158, +, 1}_1
Creating dr for block_idx_y[idx_13]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: &block_idx_y
	offset from base address: (ssizetype) (i8x8_6(D) * 4)
	constant offset from base address: 0
	step: 1
	aligned to: 4
	base_object: MEM[(uint8_t[16] *)&block_idx_y]
	Access function 0: {pretmp_158, +, 1}_1
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_pixel
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4816
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: {0, +, 1}_1
	Access function 2: i8x8_6(D)
	Access function 3: 35456
	Access function 4: 3072
Creating dr for a_5(D)->p_cost_mv
analyze_innermost: success.
	base_address: a_5(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 128
	base_object: *a_5(D)
	Access function 0: 128
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_cost_mv
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4824
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 64
	Access function 1: {0, +, 1}_1
	Access function 2: i8x8_6(D)
	Access function 3: 35456
	Access function 4: 3072
Creating dr for h_8(D)->mb.pic.i_stride[0]
analyze_innermost: success.
	base_address: h_8(D)
	offset from base address: 0
	constant offset from base address: 18984
	step: 0
	aligned to: 128
	base_object: *h_8(D)
	Access function 0: 0
	Access function 1: 57152
	Access function 2: 7680
	Access function 3: 87040
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4920
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for h_8(D)->mb.pic.i_stride[1]
analyze_innermost: success.
	base_address: h_8(D)
	offset from base address: 0
	constant offset from base address: 18988
	step: 0
	aligned to: 128
	base_object: *h_8(D)
	Access function 0: 1
	Access function 1: 57152
	Access function 2: 7680
	Access function 3: 87040
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4924
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 1
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)h_8(D) + 15576B]
analyze_innermost: success.
	base_address: h_8(D)
	offset from base address: 0
	constant offset from base address: 15576
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_8(D) + 15576B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fenc[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4888
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 576
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)h_8(D) + 15584B]
analyze_innermost: success.
	base_address: h_8(D)
	offset from base address: 0
	constant offset from base address: 15584
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_8(D) + 15584B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fenc[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4896
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 1
	Access function 1: 576
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)h_8(D) + 15592B]
analyze_innermost: success.
	base_address: h_8(D)
	offset from base address: 0
	constant offset from base address: 15592
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_8(D) + 15592B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fenc[2]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4904
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 2
	Access function 1: 576
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for *p_fref_9
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15656
	step: 0
	aligned to: 128
	base_object: *p_fref_9
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4920
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4840
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_9 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15664
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_9 + 8B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4920
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4848
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 1
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_9 + 16B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15672
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_9 + 16B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4920
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[2]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4856
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 2
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_9 + 24B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15680
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_9 + 24B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4920
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[3]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4864
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 3
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_9 + 32B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15688
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_9 + 32B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4924
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 1
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[4]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4872
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 4
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_9 + 40B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D) + (sizetype) _7 * 48
	offset from base address: 0
	constant offset from base address: 15696
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_9 + 40B]
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4924
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 1
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[5]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4880
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 5
	Access function 1: 192
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for h_8(D)->mb.pic.p_integral[0][_7]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_8(D)
	offset from base address: (ssizetype) ((sizetype) _7 * 8)
	constant offset from base address: 18728
	step: 0
	aligned to: 8
	base_object: *h_8(D)
	Access function 0: _7
	Access function 1: 0
	Access function 2: 55104
	Access function 3: 7680
	Access function 4: 87040
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4920
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_1
	Access function 3: i8x8_6(D)
	Access function 4: 35456
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].integral
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: a_5(D)
	offset from base address: (ssizetype) ((sizetype) i8x8_6(D) * 256)
	constant offset from base address: 4912
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)a_5(D)]
	Access function 0: 768
	Access function 1: {0, +, 1}_1
	Access function 2: i8x8_6(D)
	Access function 3: 35456
	Access function 4: 3072
encoder/analyse.c:1454:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:1454:5: note: bad data references.
encoder/analyse.c:1444:13: note: vectorized 0 loops in function.
x264_mb_analyse_inter_p4x8 (struct x264_t * h, struct x264_mb_analysis_t * a, int i8x8)
{
  uint8_t pix1[128];
  const int i_stride;
  const int or;
  const int oe;
  int D.21496;
  int dx;
  int dy;
  struct x264_me_t * m;
  const int i_mvc;
  const int y4;
  const int x4;
  const int idx;
  int i4x8;
  uint8_t * * p_fref;
  int _1;
  int _7;
  unsigned char _14;
  unsigned char _16;
  unsigned int ivtmp_18;
  int16_t * _22;
  int _24;
  int _26;
  uint8_t * _28;
  int _29;
  int _30;
  int _31;
  sizetype _32;
  uint8_t * _33;
  uint8_t * _35;
  int _36;
  int _37;
  int _38;
  int _39;
  int _40;
  int _41;
  sizetype _42;
  uint8_t * _43;
  uint8_t * _45;
  uint8_t * _46;
  uint8_t * _48;
  int _49;
  int _50;
  int _51;
  sizetype _52;
  uint8_t * _53;
  uint8_t * _55;
  int _56;
  int _57;
  int _58;
  sizetype _59;
  uint8_t * _60;
  uint8_t * _62;
  int _63;
  int _64;
  int _65;
  sizetype _66;
  uint8_t * _67;
  uint8_t * _69;
  int _70;
  int _71;
  int _72;
  sizetype _73;
  uint8_t * _74;
  uint8_t * _76;
  int _77;
  int _78;
  int _79;
  sizetype _80;
  uint8_t * _81;
  uint8_t * _83;
  int _84;
  int _85;
  int _86;
  sizetype _87;
  uint8_t * _88;
  uint16_t * _90;
  int _91;
  int _92;
  int _93;
  long unsigned int _94;
  long unsigned int _95;
  uint16_t * _96;
  int16_t[2] * _98;
  int _101;
  int16_t[2] * _102;
  unsigned int _103;
  unsigned char _104;
  int _106;
  int _107;
  int _108;
  int _109;
  int _110;
  int _111;
  int _112;
  int _114;
  int _115;
  int _116;
  int _118;
  int _121;
  int _122;
  int _124;
  int _125;
  int16_t[2] * _126;
  int _140;
  unsigned int ivtmp_141;
  int _143;
  int _144;
  int _145;
  int _146;
  int _147;
  int _149;
  int _150;
  int pretmp_158;
  int16_t[2] * pretmp_159;
  int pretmp_163;
  int prephitmp_164;
  int _227;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _248;
  short int _249;
  int _250;
  short int _251;
  int _252;
  uint8_t * _253;
  sizetype _254;
  uint8_t * _255;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _256;
  short int _257;
  int _258;
  short int _259;
  int _260;
  uint8_t * _261;
  uint8_t * _262;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _263;
  short int _264;
  int _265;
  short int _266;
  int _267;
  uint8_t * _268;
  int _269;
  sizetype _270;
  uint8_t * _271;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _272;
  short int _273;
  int _274;
  short int _275;
  int _276;
  uint8_t * _277;
  uint8_t * _278;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _279;
  uint8_t * _280;
  sizetype _281;
  uint8_t * _282;
  int _283;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _284;
  uint8_t * _285;
  uint8_t * _286;
  int _287;
  int _288;

  <bb 2>:
  _7 = a_5(D)->l0.me8x8[i8x8_6(D)].i_ref;
  p_fref_9 = &h_8(D)->mb.pic.p_fref[0][_7];
  # DEBUG p_fref => p_fref_9
  # DEBUG D#74 => &h_8(D)->mb.pic.p_fenc
  # DEBUG p_fenc => D#74
  # DEBUG i_ref => _7
  h_8(D)->mb.i_partition = 13;
  # DEBUG i4x8 => 0
  # DEBUG i4x8 => 0
  pretmp_158 = i8x8_6(D) * 4;
  pretmp_159 = &a_5(D)->l0.me4x4[i8x8_6(D)][0].mv;

  <bb 3>:
  # i4x8_10 = PHI <i4x8_105(4), 0(2)>
  # ivtmp_141 = PHI <ivtmp_18(4), 2(2)>
  # DEBUG i4x8 => i4x8_10
  idx_13 = i4x8_10 + pretmp_158;
  # DEBUG idx => idx_13
  _14 = block_idx_x[idx_13];
  x4_15 = (const int) _14;
  # DEBUG x4 => x4_15
  _16 = block_idx_y[idx_13];
  y4_17 = (const int) _16;
  # DEBUG y4 => y4_17
  _227 = i4x8_10 ^ 1;
  _1 = _227 & 1;
  # DEBUG i_mvc => _1
  m_20 = &a_5(D)->l0.me4x8[i8x8_6(D)][i4x8_10];
  # DEBUG m => m_20
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_pixel = 5;
  _22 = a_5(D)->p_cost_mv;
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_cost_mv = _22;
  _24 = h_8(D)->mb.pic.i_stride[0];
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0] = _24;
  _26 = h_8(D)->mb.pic.i_stride[1];
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[1] = _26;
  _28 = MEM[(uint8_t * *)h_8(D) + 15576B];
  _29 = y4_17 * 16;
  _30 = x4_15 + _29;
  _31 = _30 * 4;
  _32 = (sizetype) _31;
  _33 = _28 + _32;
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fenc[0] = _33;
  _35 = MEM[(uint8_t * *)h_8(D) + 15584B];
  _36 = x4_15 * 4;
  _37 = _36 >> 1;
  _38 = y4_17 * 4;
  _39 = _38 >> 1;
  _40 = _39 * 16;
  _41 = _37 + _40;
  _42 = (sizetype) _41;
  _43 = _35 + _42;
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fenc[1] = _43;
  _45 = MEM[(uint8_t * *)h_8(D) + 15592B];
  _46 = _45 + _42;
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fenc[2] = _46;
  _48 = *p_fref_9;
  _49 = MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0];
  _50 = _38 * _49;
  _51 = _36 + _50;
  _52 = (sizetype) _51;
  _53 = _48 + _52;
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[0] = _53;
  _55 = MEM[(uint8_t * *)p_fref_9 + 8B];
  _56 = MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0];
  _57 = _38 * _56;
  _58 = _36 + _57;
  _59 = (sizetype) _58;
  _60 = _55 + _59;
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[1] = _60;
  _62 = MEM[(uint8_t * *)p_fref_9 + 16B];
  _63 = MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0];
  _64 = _38 * _63;
  _65 = _36 + _64;
  _66 = (sizetype) _65;
  _67 = _62 + _66;
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[2] = _67;
  _69 = MEM[(uint8_t * *)p_fref_9 + 24B];
  _70 = MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0];
  _71 = _38 * _70;
  _72 = _36 + _71;
  _73 = (sizetype) _72;
  _74 = _69 + _73;
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[3] = _74;
  _76 = MEM[(uint8_t * *)p_fref_9 + 32B];
  _77 = MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[1];
  _78 = _39 * _77;
  _79 = _37 + _78;
  _80 = (sizetype) _79;
  _81 = _76 + _80;
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[4] = _81;
  _83 = MEM[(uint8_t * *)p_fref_9 + 40B];
  _84 = MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[1];
  _85 = _39 * _84;
  _86 = _37 + _85;
  _87 = (sizetype) _86;
  _88 = _83 + _87;
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].p_fref[5] = _88;
  _90 = h_8(D)->mb.pic.p_integral[0][_7];
  _91 = MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].i_stride[0];
  _92 = _38 * _91;
  _93 = _36 + _92;
  _94 = (long unsigned int) _93;
  _95 = _94 * 2;
  _96 = _90 + _95;
  MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].integral = _96;
  _98 = &MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].mvp;
  x264_mb_predict_mv (h_8(D), 0, idx_13, 1, _98);
  # DEBUG D#431 => &a_5(D)->l0.me4x4[i8x8_6(D)][0].mv
  # DEBUG h => h_8(D)
  # DEBUG m => m_20
  # DEBUG mvc => D#431
  # DEBUG i_mvc => _1
  x264_me_search_ref (h_8(D), m_20, pretmp_159, _1, 0B);
  # DEBUG h => NULL
  # DEBUG m => NULL
  # DEBUG mvc => NULL
  # DEBUG i_mvc => NULL
  _102 = &MEM[(struct x264_me_t *)a_5(D)].l0.me4x8[i8x8_6(D)][i4x8_10].mv;
  _103 = MEM[(uint32_t *)_102];
  # DEBUG h => h_8(D)
  # DEBUG x => x4_15
  # DEBUG y => y4_17
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _103
  _112 = x4_15 + 12;
  _124 = y4_17 * 8;
  _125 = _112 + _124;
  _126 = &h_8(D)->mb.cache.mv[0][_125];
  # DEBUG dst => _126
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG val => _103
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_126] = _103;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint32_t *)_126 + 32B] = _103;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  i4x8_105 = i4x8_10 + 1;
  # DEBUG i4x8 => i4x8_105
  # DEBUG i4x8 => i4x8_105
  ivtmp_18 = ivtmp_141 - 1;
  if (ivtmp_18 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  _106 = a_5(D)->l0.me4x8[i8x8_6(D)][0].cost;
  _107 = a_5(D)->l0.me4x8[i8x8_6(D)][1].cost;
  _108 = _106 + _107;
  _109 = a_5(D)->i_lambda;
  _110 = h_8(D)->sh.i_num_ref_idx_l0_active;
  _111 = _110 + -1;
  # DEBUG x => _111
  # DEBUG val => _7
  if (_111 == 1)
    goto <bb 8>;
  else
    goto <bb 6>;

  <bb 6>:
  if (_111 > 1)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _101 = _7 + 1;
  _104 = x264_ue_size_tab[_101];
  _140 = (int) _104;
  pretmp_163 = _109 * _140;

  <bb 8>:
  # prephitmp_164 = PHI <_109(5), 0(6), pretmp_163(7)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _114 = _108 + prephitmp_164;
  _115 = _109 * 3;
  _116 = _114 + _115;
  a_5(D)->l0.i_cost4x8[i8x8_6(D)] = _116;
  _118 = h_8(D)->mb.b_chroma_me;
  if (_118 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # DEBUG h => h_8(D)
  # DEBUG a => a_5(D)
  # DEBUG p_fref => p_fref_9
  # DEBUG i8x8 => i8x8_6(D)
  # DEBUG pixel => 5
  # DEBUG pix2 => &MEM[(void *)&pix1 + 8B]
  i_stride_142 = h_8(D)->mb.pic.i_stride[1];
  # DEBUG i_stride => i_stride_142
  _143 = i8x8_6(D) & 1;
  _144 = _143 * 4;
  _145 = i8x8_6(D) & 2;
  _146 = _145 * 2;
  _147 = i_stride_142 * _146;
  or_148 = _144 + _147;
  # DEBUG or => or_148
  _149 = _145 * 8;
  _150 = _143 + _149;
  oe_151 = _150 * 4;
  # DEBUG oe => oe_151
  _248 = h_8(D)->mc.mc_chroma;
  _249 = a_5(D)->l0.me4x8[i8x8_6(D)][0].mv[1];
  _250 = (int) _249;
  _251 = a_5(D)->l0.me4x8[i8x8_6(D)][0].mv[0];
  _252 = (int) _251;
  _253 = MEM[(uint8_t * *)p_fref_9 + 32B];
  _254 = (sizetype) or_148;
  _255 = _253 + _254;
  _248 (&pix1[0], 16, _255, i_stride_142, _252, _250, 2, 4);
  _256 = h_8(D)->mc.mc_chroma;
  _257 = a_5(D)->l0.me4x8[i8x8_6(D)][0].mv[1];
  _258 = (int) _257;
  _259 = a_5(D)->l0.me4x8[i8x8_6(D)][0].mv[0];
  _260 = (int) _259;
  _261 = MEM[(uint8_t * *)p_fref_9 + 40B];
  _262 = _261 + _254;
  _256 (&MEM[(void *)&pix1 + 8B], 16, _262, i_stride_142, _260, _258, 2, 4);
  _263 = h_8(D)->mc.mc_chroma;
  _264 = a_5(D)->l0.me4x8[i8x8_6(D)][1].mv[1];
  _265 = (int) _264;
  _266 = a_5(D)->l0.me4x8[i8x8_6(D)][1].mv[0];
  _267 = (int) _266;
  _268 = MEM[(uint8_t * *)p_fref_9 + 32B];
  _269 = or_148 + 2;
  _270 = (sizetype) _269;
  _271 = _268 + _270;
  _263 (&pix1[2], 16, _271, i_stride_142, _267, _265, 2, 4);
  _272 = h_8(D)->mc.mc_chroma;
  _273 = a_5(D)->l0.me4x8[i8x8_6(D)][1].mv[1];
  _274 = (int) _273;
  _275 = a_5(D)->l0.me4x8[i8x8_6(D)][1].mv[0];
  _276 = (int) _275;
  _277 = MEM[(uint8_t * *)p_fref_9 + 40B];
  _278 = _277 + _270;
  _272 (&MEM[(void *)&pix1 + 10B], 16, _278, i_stride_142, _276, _274, 2, 4);
  _279 = h_8(D)->pixf.mbcmp[6];
  _280 = h_8(D)->mb.pic.p_fenc[1];
  _281 = (sizetype) oe_151;
  _282 = _280 + _281;
  _283 = _279 (_282, 16, &pix1, 16);
  _284 = h_8(D)->pixf.mbcmp[6];
  _285 = h_8(D)->mb.pic.p_fenc[2];
  _286 = _285 + _281;
  _287 = _284 (_286, 16, &MEM[(void *)&pix1 + 8B], 16);
  _288 = _283 + _287;
  pix1 ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG p_fref => NULL
  # DEBUG i8x8 => NULL
  # DEBUG pixel => NULL
  # DEBUG oe => NULL
  # DEBUG or => NULL
  # DEBUG i_stride => NULL
  _121 = a_5(D)->l0.i_cost4x8[i8x8_6(D)];
  _122 = _121 + _288;
  a_5(D)->l0.i_cost4x8[i8x8_6(D)] = _122;

  <bb 10>:
  return;

}



;; Function x264_mb_analyse_load_costs.isra.18 (x264_mb_analyse_load_costs.isra.18, funcdef_no=255, decl_uid=18126, cgraph_uid=11, symbol_order=621)


Analyzing loop at encoder/analyse.c:195
encoder/analyse.c:195:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:195:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:195:9: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:195:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:195:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [8191, + , 4294967295] != 0
  bounds on difference of bases: -8191 ... -8191
  result:
    # of iterations 8191, bounded by 8191
encoder/analyse.c:195:9: note: Considering outer-loop vectorization.
encoder/analyse.c:195:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/analyse.c:195:9: note: === vect_analyze_data_refs ===
encoder/analyse.c:195:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:195:9: note: bad data references.

Analyzing loop at encoder/analyse.c:199
encoder/analyse.c:199:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:199:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:199:13: note: === get_loop_niters ===
encoder/analyse.c:199:13: note: === vect_analyze_data_refs ===
Creating dr for *_43
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: pretmp_115 + (sizetype) ((long unsigned int) j_83 * 2)
	offset from base address: 0
	constant offset from base address: -32768(OVF)
	step: 8
	aligned to: 128
	base_object: *pretmp_115 + (sizetype) ((long unsigned int) j_83 * 2)
	Access function 0: {-32768B, +, 8}_2
Creating dr for *_37
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
	base_address: _32
	offset from base address: 0
	constant offset from base address: 0(OVF)
	step: 2
	aligned to: 128
	base_object: *_32
	Access function 0: {0B, +, 2}_2
encoder/analyse.c:199:13: note: got vectype for stmt: _44 = *_43;
vector(8) short int
encoder/analyse.c:199:13: note: got vectype for stmt: *_37 = _45;
vector(8) short unsigned int
encoder/analyse.c:199:13: note: === vect_analyze_scalar_cycles ===
encoder/analyse.c:199:13: note: Analyze phi: i_90 = PHI <i_46(18), -4096(16)>

encoder/analyse.c:199:13: note: Access function of PHI: {-4096, +, 1}_2
encoder/analyse.c:199:13: note: step: 1,  init: -4096
encoder/analyse.c:199:13: note: Detected induction.
encoder/analyse.c:199:13: note: Analyze phi: .MEM_92 = PHI <.MEM_64(18), .MEM_63(16)>

encoder/analyse.c:199:13: note: Analyze phi: ivtmp_133 = PHI <ivtmp_94(18), 8192(16)>

encoder/analyse.c:199:13: note: Access function of PHI: {8192, +, 4294967295}_2
encoder/analyse.c:199:13: note: step: 4294967295,  init: 8192
encoder/analyse.c:199:13: note: Detected induction.
encoder/analyse.c:199:13: note: === vect_pattern_recog ===
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _35
encoder/analyse.c:199:13: note: def_stmt: _35 = (long unsigned int) i_90;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: vect_is_simple_use: operand i_90
encoder/analyse.c:199:13: note: def_stmt: i_90 = PHI <i_46(18), -4096(16)>
encoder/analyse.c:199:13: note: type of def: 4.
encoder/analyse.c:199:13: note: vect_is_simple_use: operand 2
encoder/analyse.c:199:13: note: vect_is_simple_use: operand i_90
encoder/analyse.c:199:13: note: def_stmt: i_90 = PHI <i_46(18), -4096(16)>
encoder/analyse.c:199:13: note: type of def: 4.
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _41
encoder/analyse.c:199:13: note: def_stmt: _41 = (long unsigned int) _40;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _40
encoder/analyse.c:199:13: note: def_stmt: _40 = _39 + j_83;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: vect_is_simple_use: operand 2
encoder/analyse.c:199:13: note: === vect_analyze_data_ref_accesses ===
encoder/analyse.c:199:13: note: Detected single element interleaving *_43 step 8
encoder/analyse.c:199:13: note: Data access with gaps requires scalar epilogue loop
encoder/analyse.c:199:13: note: === vect_mark_stmts_to_be_vectorized ===
encoder/analyse.c:199:13: note: init: phi relevant? i_90 = PHI <i_46(18), -4096(16)>
encoder/analyse.c:199:13: note: init: phi relevant? .MEM_92 = PHI <.MEM_64(18), .MEM_63(16)>
encoder/analyse.c:199:13: note: init: phi relevant? ivtmp_133 = PHI <ivtmp_94(18), 8192(16)>
encoder/analyse.c:199:13: note: init: stmt relevant? # DEBUG i => i_90
encoder/analyse.c:199:13: note: init: stmt relevant? _35 = (long unsigned int) i_90;
encoder/analyse.c:199:13: note: init: stmt relevant? _36 = _35 * 2;
encoder/analyse.c:199:13: note: init: stmt relevant? _37 = _33 + _36;
encoder/analyse.c:199:13: note: init: stmt relevant? _39 = i_90 * 4;
encoder/analyse.c:199:13: note: init: stmt relevant? _40 = _39 + j_83;
encoder/analyse.c:199:13: note: init: stmt relevant? _41 = (long unsigned int) _40;
encoder/analyse.c:199:13: note: init: stmt relevant? _42 = _41 * 2;
encoder/analyse.c:199:13: note: init: stmt relevant? _43 = pretmp_115 + _42;
encoder/analyse.c:199:13: note: init: stmt relevant? _44 = *_43;
encoder/analyse.c:199:13: note: init: stmt relevant? _45 = (short unsigned int) _44;
encoder/analyse.c:199:13: note: init: stmt relevant? *_37 = _45;
encoder/analyse.c:199:13: note: vec_stmt_relevant_p: stmt has vdefs.
encoder/analyse.c:199:13: note: mark relevant 4, live 0.
encoder/analyse.c:199:13: note: init: stmt relevant? i_46 = i_90 + 1;
encoder/analyse.c:199:13: note: init: stmt relevant? # DEBUG i => i_46
encoder/analyse.c:199:13: note: init: stmt relevant? # DEBUG i => i_46
encoder/analyse.c:199:13: note: init: stmt relevant? ivtmp_94 = ivtmp_133 - 1;
encoder/analyse.c:199:13: note: init: stmt relevant? if (ivtmp_94 != 0)
encoder/analyse.c:199:13: note: worklist: examine stmt: *_37 = _45;
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _45
encoder/analyse.c:199:13: note: def_stmt: _45 = (short unsigned int) _44;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: mark relevant 4, live 0.
encoder/analyse.c:199:13: note: worklist: examine stmt: _45 = (short unsigned int) _44;
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _44
encoder/analyse.c:199:13: note: def_stmt: _44 = *_43;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: mark relevant 4, live 0.
encoder/analyse.c:199:13: note: worklist: examine stmt: _44 = *_43;
encoder/analyse.c:199:13: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: *_37 = _45;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _44 = *_43;
(analyze_overlapping_iterations 
  (chrec_a = {-32768B, +, 8}_2)
  (chrec_b = {-32768B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_37 = _45;
  stmt_b: *_37 = _45;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {0B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/analyse.c:199:13: note: versioning for alias required: can't determine dependence between *_43 and *_37
encoder/analyse.c:199:13: note: mark for run-time aliasing test between *_43 and *_37
encoder/analyse.c:199:13: note: === vect_determine_vectorization_factor ===
encoder/analyse.c:199:13: note: ==> examining phi: i_90 = PHI <i_46(18), -4096(16)>

encoder/analyse.c:199:13: note: ==> examining phi: .MEM_92 = PHI <.MEM_64(18), .MEM_63(16)>

encoder/analyse.c:199:13: note: ==> examining phi: ivtmp_133 = PHI <ivtmp_94(18), 8192(16)>

encoder/analyse.c:199:13: note: ==> examining statement: # DEBUG i => i_90

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: _35 = (long unsigned int) i_90;

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: _36 = _35 * 2;

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: _37 = _33 + _36;

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: _39 = i_90 * 4;

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: _40 = _39 + j_83;

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: _41 = (long unsigned int) _40;

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: _42 = _41 * 2;

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: _43 = pretmp_115 + _42;

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: _44 = *_43;

encoder/analyse.c:199:13: note: get vectype for scalar type:  short int
encoder/analyse.c:199:13: note: vectype: vector(8) short int
encoder/analyse.c:199:13: note: nunits = 8
encoder/analyse.c:199:13: note: ==> examining statement: _45 = (short unsigned int) _44;

encoder/analyse.c:199:13: note: get vectype for scalar type:  short unsigned int
encoder/analyse.c:199:13: note: vectype: vector(8) short unsigned int
encoder/analyse.c:199:13: note: get vectype for scalar type:  short unsigned int
encoder/analyse.c:199:13: note: vectype: vector(8) short unsigned int
encoder/analyse.c:199:13: note: nunits = 8
encoder/analyse.c:199:13: note: ==> examining statement: *_37 = _45;

encoder/analyse.c:199:13: note: get vectype for scalar type:  uint16_t
encoder/analyse.c:199:13: note: vectype: vector(8) short unsigned int
encoder/analyse.c:199:13: note: nunits = 8
encoder/analyse.c:199:13: note: ==> examining statement: i_46 = i_90 + 1;

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: # DEBUG i => i_46

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: # DEBUG i => i_46

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: ivtmp_94 = ivtmp_133 - 1;

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: ==> examining statement: if (ivtmp_94 != 0)

encoder/analyse.c:199:13: note: skip.
encoder/analyse.c:199:13: note: vectorization factor = 8
encoder/analyse.c:199:13: note: === vect_analyze_data_refs_alignment ===
encoder/analyse.c:199:13: note: vect_compute_data_ref_alignment:
encoder/analyse.c:199:13: note: can't force alignment of ref: *_43
encoder/analyse.c:199:13: note: vect_compute_data_ref_alignment:
encoder/analyse.c:199:13: note: can't force alignment of ref: *_37
encoder/analyse.c:199:13: note: === vect_prune_runtime_alias_test_list ===
encoder/analyse.c:199:13: note: improved number of alias checks from 1 to 1
encoder/analyse.c:199:13: note: === vect_enhance_data_refs_alignment ===
encoder/analyse.c:199:13: note: vector alignment may not be reachable
encoder/analyse.c:199:13: note: vect_can_advance_ivs_p:
encoder/analyse.c:199:13: note: Analyze phi: i_90 = PHI <i_46(18), -4096(16)>

encoder/analyse.c:199:13: note: Analyze phi: .MEM_92 = PHI <.MEM_64(18), .MEM_63(16)>

encoder/analyse.c:199:13: note: virtual phi. skip.
encoder/analyse.c:199:13: note: Analyze phi: ivtmp_133 = PHI <ivtmp_94(18), 8192(16)>

encoder/analyse.c:199:13: note: Vectorizing an unaligned access.
encoder/analyse.c:199:13: note: Vectorizing an unaligned access.
encoder/analyse.c:199:13: note: === vect_analyze_slp ===
encoder/analyse.c:199:13: note: === vect_make_slp_decision ===
encoder/analyse.c:199:13: note: === vect_detect_hybrid_slp ===
encoder/analyse.c:199:13: note: === vect_analyze_loop_operations ===
encoder/analyse.c:199:13: note: examining phi: i_90 = PHI <i_46(18), -4096(16)>

encoder/analyse.c:199:13: note: examining phi: .MEM_92 = PHI <.MEM_64(18), .MEM_63(16)>

encoder/analyse.c:199:13: note: examining phi: ivtmp_133 = PHI <ivtmp_94(18), 8192(16)>

encoder/analyse.c:199:13: note: ==> examining statement: # DEBUG i => i_90
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: _35 = (long unsigned int) i_90;
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: _36 = _35 * 2;
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: _37 = _33 + _36;
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: _39 = i_90 * 4;
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: _40 = _39 + j_83;
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: _41 = (long unsigned int) _40;
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: _42 = _41 * 2;
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: _43 = pretmp_115 + _42;
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: _44 = *_43;
encoder/analyse.c:199:13: note: vect_is_simple_use: operand *_43
encoder/analyse.c:199:13: note: not ssa-name.
encoder/analyse.c:199:13: note: use not simple.
encoder/analyse.c:199:13: note: vect_is_simple_use: operand *_43
encoder/analyse.c:199:13: note: not ssa-name.
encoder/analyse.c:199:13: note: use not simple.
encoder/analyse.c:199:13: note: no array mode for V8HI[4]
encoder/analyse.c:199:13: note: vect_model_load_cost: strided group_size = 4 .
encoder/analyse.c:199:13: note: vect_model_load_cost: unaligned supported by hardware.
encoder/analyse.c:199:13: note: vect_model_load_cost: inside_cost = 10, prologue_cost = 0 .
encoder/analyse.c:199:13: note: ==> examining statement: _45 = (short unsigned int) _44;
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _44
encoder/analyse.c:199:13: note: def_stmt: _44 = *_43;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _44
encoder/analyse.c:199:13: note: def_stmt: _44 = *_43;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: no optab.
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _44
encoder/analyse.c:199:13: note: def_stmt: _44 = *_43;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: === vectorizable_assignment ===
encoder/analyse.c:199:13: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
encoder/analyse.c:199:13: note: ==> examining statement: *_37 = _45;
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _45
encoder/analyse.c:199:13: note: def_stmt: _45 = (short unsigned int) _44;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: vect_model_store_cost: unaligned supported by hardware.
encoder/analyse.c:199:13: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
encoder/analyse.c:199:13: note: ==> examining statement: i_46 = i_90 + 1;
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: # DEBUG i => i_46
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: # DEBUG i => i_46
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: ivtmp_94 = ivtmp_133 - 1;
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: ==> examining statement: if (ivtmp_94 != 0)
encoder/analyse.c:199:13: note: irrelevant.
encoder/analyse.c:199:13: note: vectorization_factor = 8, niters = 8192
encoder/analyse.c:199:13: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
encoder/analyse.c:199:13: note: Cost model analysis: 
  Vector inside of loop cost: 13
  Vector prologue cost: 4
  Vector epilogue cost: 24
  Scalar iteration cost: 3
  Scalar outside cost: 1
  Vector outside cost: 28
  prologue iterations: 0
  epilogue iterations: 8
  Calculated minimum iters for profitability: 11
encoder/analyse.c:199:13: note:   Runtime profitability threshold = 10
encoder/analyse.c:199:13: note:   Static estimate profitability threshold = 10
encoder/analyse.c:199:13: note: epilog loop required
encoder/analyse.c:199:13: note: vect_can_advance_ivs_p:
encoder/analyse.c:199:13: note: Analyze phi: i_90 = PHI <i_46(18), -4096(16)>

encoder/analyse.c:199:13: note: Analyze phi: .MEM_92 = PHI <.MEM_64(18), .MEM_63(16)>

encoder/analyse.c:199:13: note: virtual phi. skip.
encoder/analyse.c:199:13: note: Analyze phi: ivtmp_133 = PHI <ivtmp_94(18), 8192(16)>

encoder/analyse.c:199:13: note: loop vectorized
encoder/analyse.c:199:13: note: === vec_transform_loop ===
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:49, generic-match.c:4015
encoder/analyse.c:199:13: note: create runtime check for data references *_43 and *_37
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:724, generic-match.c:1428
encoder/analyse.c:199:13: note: created 1 versioning for alias checks.
gimple_simplified to _96 = _32 >= _97;
gimple_simplified to _85 = _86 >= _95;
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _84 = _85 | _96;
Applying pattern match.pd:318, generic-match.c:18
encoder/analyse.c:199:13: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
creating PHI node in block #19 for .MEM_64
Registering new PHI nodes in block #16
Registering new PHI nodes in block #24
Registering new PHI nodes in block #25
Registering new PHI nodes in block #17
Updating SSA information for statement # DEBUG i => i_90
Updating SSA information for statement _35 = (long unsigned int) i_90;
Updating SSA information for statement _36 = _35 * 2;
Updating SSA information for statement _37 = _33 + _36;
Updating SSA information for statement _39 = i_90 * 4;
Updating SSA information for statement _40 = _39 + j_83;
Updating SSA information for statement _41 = (long unsigned int) _40;
Updating SSA information for statement _42 = _41 * 2;
Updating SSA information for statement _43 = pretmp_115 + _42;
Updating SSA information for statement _44 = *_43;
Updating SSA information for statement _45 = (short unsigned int) _44;
Updating SSA information for statement *_37 = _45;
Updating SSA information for statement i_46 = i_90 + 1;
Updating SSA information for statement # DEBUG i => i_46
Updating SSA information for statement # DEBUG i => i_46
Updating SSA information for statement ivtmp_94 = ivtmp_133 - 1;
Updating SSA information for statement if (ivtmp_94 != 0)
Registering new PHI nodes in block #18
Registering new PHI nodes in block #27
Registering new PHI nodes in block #26
Registering new PHI nodes in block #22
Updating SSA information for statement # DEBUG i => i_90
Updating SSA information for statement _67 = (long unsigned int) i_90;
Updating SSA information for statement _66 = _35 * 2;
Updating SSA information for statement _52 = _33 + _36;
Updating SSA information for statement _51 = i_90 * 4;
Updating SSA information for statement _49 = _39 + j_83;
Updating SSA information for statement _48 = (long unsigned int) _40;
Updating SSA information for statement _34 = _41 * 2;
Updating SSA information for statement _30 = pretmp_115 + _42;
Updating SSA information for statement _8 = *_43;
Updating SSA information for statement _131 = (short unsigned int) _44;
Updating SSA information for statement *_37 = _45;
Updating SSA information for statement i_127 = i_90 + 1;
Updating SSA information for statement # DEBUG i => i_46
Updating SSA information for statement # DEBUG i => i_46
Updating SSA information for statement ivtmp_123 = ivtmp_133 - 1;
Updating SSA information for statement if (ivtmp_94 != 0)
Registering new PHI nodes in block #23
Registering new PHI nodes in block #19
Registering new PHI nodes in block #21
Registering new PHI nodes in block #20

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_8 -> { _44 }
_30 -> { _43 }
_34 -> { _42 }
_48 -> { _41 }
_49 -> { _40 }
_51 -> { _39 }
_52 -> { _37 }
_66 -> { _36 }
_67 -> { _35 }
ivtmp_71 -> { ivtmp_133 }
.MEM_75 -> { .MEM_92 }
i_82 -> { i_90 }
.MEM_122 -> { .MEM_64 }
ivtmp_123 -> { ivtmp_94 }
i_127 -> { i_46 }
.MEM_129 -> { .MEM_64 }
_131 -> { _45 }
Incremental SSA update started at block: 16
Number of blocks in CFG: 28
Number of blocks to update: 11 ( 39%)
Affected blocks: 16 17 18 19 20 21 22 23 25 26 27


encoder/analyse.c:199:13: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 28
basic block 28, loop depth 1
 pred:       25
 succ:      


;; Scaling loop 2 with scale 0.666600, bounding iterations to 0 from guessed 148
;; guessed iterations are now 99
;; Scaling loop 5 with scale 0.777800, bounding iterations to 8 from guessed 127
;; guessed iterations are now 8
encoder/analyse.c:199:13: note: vect_update_ivs_after_vectorizer: phi: i_90 = PHI <i_46(18), -4096(32)>

encoder/analyse.c:199:13: note: vect_update_ivs_after_vectorizer: phi: .MEM_92 = PHI <.MEM_64(18), .MEM_63(32)>

encoder/analyse.c:199:13: note: virtual phi. skip.
encoder/analyse.c:199:13: note: vect_update_ivs_after_vectorizer: phi: ivtmp_133 = PHI <ivtmp_94(18), 8192(32)>

Setting upper bound of nb iterations for epilogue loop to 14
encoder/analyse.c:199:13: note: ------>vectorizing phi: i_90 = PHI <i_46(18), -4096(36)>

encoder/analyse.c:199:13: note: ------>vectorizing phi: .MEM_92 = PHI <.MEM_64(18), .MEM_63(36)>

encoder/analyse.c:199:13: note: ------>vectorizing phi: ivtmp_133 = PHI <ivtmp_94(18), 8192(36)>

encoder/analyse.c:199:13: note: ------>vectorizing statement: # DEBUG i => i_90

encoder/analyse.c:199:13: note: ------>vectorizing statement: _35 = (long unsigned int) i_90;

encoder/analyse.c:199:13: note: ------>vectorizing statement: _36 = _35 * 2;

encoder/analyse.c:199:13: note: ------>vectorizing statement: _37 = _33 + _36;

encoder/analyse.c:199:13: note: ------>vectorizing statement: _39 = i_90 * 4;

encoder/analyse.c:199:13: note: ------>vectorizing statement: _40 = _39 + j_83;

encoder/analyse.c:199:13: note: ------>vectorizing statement: _41 = (long unsigned int) _40;

encoder/analyse.c:199:13: note: ------>vectorizing statement: _42 = _41 * 2;

encoder/analyse.c:199:13: note: ------>vectorizing statement: _43 = pretmp_115 + _42;

encoder/analyse.c:199:13: note: ------>vectorizing statement: _44 = *_43;

encoder/analyse.c:199:13: note: transform statement.
encoder/analyse.c:199:13: note: no array mode for V8HI[4]
encoder/analyse.c:199:13: note: transform load. ncopies = 1
encoder/analyse.c:199:13: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing a pointer ref: *pretmp_115 + (sizetype) ((long unsigned int) j_83 * 2)
Applying pattern match.pd:400, generic-match.c:4039
encoder/analyse.c:199:13: note: created vectp.727_140
encoder/analyse.c:199:13: note: add new stmt: vect__44.728_145 = MEM[(int16_t *)vectp.726_143];
encoder/analyse.c:199:13: note: add new stmt: vectp.726_146 = vectp.726_143 + 16;
encoder/analyse.c:199:13: note: add new stmt: vect__44.729_147 = MEM[(int16_t *)vectp.726_146];
encoder/analyse.c:199:13: note: add new stmt: vectp.726_148 = vectp.726_146 + 16;
encoder/analyse.c:199:13: note: add new stmt: vect__44.730_149 = MEM[(int16_t *)vectp.726_148];
encoder/analyse.c:199:13: note: add new stmt: vectp.726_150 = vectp.726_148 + 16;
encoder/analyse.c:199:13: note: add new stmt: vect__44.731_151 = MEM[(int16_t *)vectp.726_150];
encoder/analyse.c:199:13: note: add new stmt: vect_perm_even_152 = VEC_PERM_EXPR <vect__44.728_145, vect__44.729_147, { 0, 2, 4, 6, 8, 10, 12, 14 }>;
encoder/analyse.c:199:13: note: add new stmt: vect_perm_odd_153 = VEC_PERM_EXPR <vect__44.728_145, vect__44.729_147, { 1, 3, 5, 7, 9, 11, 13, 15 }>;
encoder/analyse.c:199:13: note: add new stmt: vect_perm_even_154 = VEC_PERM_EXPR <vect__44.730_149, vect__44.731_151, { 0, 2, 4, 6, 8, 10, 12, 14 }>;
encoder/analyse.c:199:13: note: add new stmt: vect_perm_odd_155 = VEC_PERM_EXPR <vect__44.730_149, vect__44.731_151, { 1, 3, 5, 7, 9, 11, 13, 15 }>;
encoder/analyse.c:199:13: note: add new stmt: vect_perm_even_156 = VEC_PERM_EXPR <vect_perm_even_152, vect_perm_even_154, { 0, 2, 4, 6, 8, 10, 12, 14 }>;
encoder/analyse.c:199:13: note: add new stmt: vect_perm_odd_157 = VEC_PERM_EXPR <vect_perm_even_152, vect_perm_even_154, { 1, 3, 5, 7, 9, 11, 13, 15 }>;
encoder/analyse.c:199:13: note: add new stmt: vect_perm_even_158 = VEC_PERM_EXPR <vect_perm_odd_153, vect_perm_odd_155, { 0, 2, 4, 6, 8, 10, 12, 14 }>;
encoder/analyse.c:199:13: note: add new stmt: vect_perm_odd_159 = VEC_PERM_EXPR <vect_perm_odd_153, vect_perm_odd_155, { 1, 3, 5, 7, 9, 11, 13, 15 }>;
encoder/analyse.c:199:13: note: ------>vectorizing statement: _45 = (short unsigned int) _44;

encoder/analyse.c:199:13: note: transform statement.
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _44
encoder/analyse.c:199:13: note: def_stmt: _44 = *_43;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: transform assignment.
encoder/analyse.c:199:13: note: vect_get_vec_def_for_operand: _44
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _44
encoder/analyse.c:199:13: note: def_stmt: _44 = *_43;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: def =  _44
  def_stmt =  _44 = *_43;
encoder/analyse.c:199:13: note: add new stmt: vect__45.732_160 = VIEW_CONVERT_EXPR<vector(8) short unsigned int>(vect_perm_even_156);
encoder/analyse.c:199:13: note: ------>vectorizing statement: *_37 = _45;

encoder/analyse.c:199:13: note: transform statement.
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _45
encoder/analyse.c:199:13: note: def_stmt: _45 = (short unsigned int) _44;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: transform store. ncopies = 1
encoder/analyse.c:199:13: note: vect_get_vec_def_for_operand: _45
encoder/analyse.c:199:13: note: vect_is_simple_use: operand _45
encoder/analyse.c:199:13: note: def_stmt: _45 = (short unsigned int) _44;
encoder/analyse.c:199:13: note: type of def: 3.
encoder/analyse.c:199:13: note: def =  _45
  def_stmt =  _45 = (short unsigned int) _44;
encoder/analyse.c:199:13: note: create vector_type-pointer variable to type: vector(8) short unsigned int  vectorizing a pointer ref: *_32
Applying pattern match.pd:49, generic-match.c:4015
encoder/analyse.c:199:13: note: created vectp.734_161
encoder/analyse.c:199:13: note: add new stmt: MEM[(uint16_t *)vectp.733_162] = vect__45.732_160;
encoder/analyse.c:199:13: note: ------>vectorizing statement: i_46 = i_90 + 1;

encoder/analyse.c:199:13: note: ------>vectorizing statement: # DEBUG i => i_46

encoder/analyse.c:199:13: note: ------>vectorizing statement: # DEBUG i => i_46

encoder/analyse.c:199:13: note: ------>vectorizing statement: ivtmp_94 = ivtmp_133 - 1;

encoder/analyse.c:199:13: note: ------>vectorizing statement: vectp.726_144 = vectp.726_150 + 16;

encoder/analyse.c:199:13: note: ------>vectorizing statement: vectp.733_163 = vectp.733_162 + 16;

encoder/analyse.c:199:13: note: ------>vectorizing statement: if (ivtmp_94 != 0)


loop at encoder/analyse.c:200: if (ivtmp_165 < 1023)

;; Scaling loop 2 with scale 0.125000, bounding iterations to 1024 from guessed 99
;; guessed iterations are now 13
encoder/analyse.c:199:13: note: LOOP VECTORIZED


Analyzing loop at encoder/analyse.c:184
encoder/analyse.c:184:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:184:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:184:9: note: not vectorized: control flow in loop.
encoder/analyse.c:184:9: note: bad loop form.
encoder/analyse.c:173:13: note: vectorized 1 loops in function.
Merging blocks 16 and 24
Removing basic block 25
basic block 25, loop depth 1
 pred:      
 succ:       32


Removing basic block 32
basic block 32, loop depth 1
 pred:      
 succ:       36


Merging blocks 33 and 31
Merging blocks 35 and 34
Merging blocks 35 and 27
x264_mb_analyse_load_costs.isra.18 (int * ISRA.280, struct x264_mb_analysis_t * a)
{
  vector(8) short unsigned int * vectp.734;
  vector(8) short unsigned int * vectp.733;
  vector(8) short unsigned int vect__45.732;
  vector(8) short int vect__44.731;
  vector(8) short int vect__44.730;
  vector(8) short int vect__44.729;
  vector(8) short int vect__44.728;
  vector(8) short int * vectp.727;
  vector(8) short int * vectp.726;
  unsigned int tmp.725;
  int tmp.724;
  int D.21545;
  int D.21543;
  int i;
  int j;
  static int16_t * p_cost_mv[52];
  int _2;
  int16_t * _3;
  void * _4;
  int _5;
  int16_t * _6;
  int16_t * _7;
  short int _8;
  int _9;
  long unsigned int _10;
  long unsigned int _11;
  int16_t * _12;
  long unsigned int _13;
  long unsigned int _14;
  int16_t * _15;
  short int _16;
  short unsigned int _17;
  unsigned short _20;
  short int _21;
  int _26;
  uint16_t * _27;
  void * _29;
  int16_t * _30;
  int _31;
  uint16_t * _32;
  uint16_t * _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  uint16_t * _37;
  int _39;
  int _40;
  long unsigned int _41;
  long unsigned int _42;
  int16_t * _43;
  short int _44;
  short unsigned int _45;
  long unsigned int _48;
  int _49;
  int _51;
  uint16_t * _52;
  unsigned int ivtmp_53;
  unsigned int ivtmp_64;
  long unsigned int _66;
  long unsigned int _67;
  int _68;
  int _69;
  unsigned int iftmp.17_70;
  unsigned int ivtmp_71;
  unsigned int ivtmp_74;
  unsigned int _77;
  unsigned int _78;
  unsigned char _79;
  int _80;
  int _81;
  _Bool _84;
  _Bool _85;
  int16_t * _86;
  sizetype _87;
  long unsigned int _88;
  long unsigned int _89;
  unsigned int ivtmp_94;
  uint16_t * _95;
  _Bool _96;
  int16_t * _97;
  sizetype _98;
  sizetype _99;
  sizetype _100;
  unsigned int ivtmp_101;
  unsigned int ivtmp_102;
  unsigned int ivtmp_103;
  int prephitmp_106;
  int16_t * prephitmp_107;
  int prephitmp_108;
  long unsigned int _109;
  long unsigned int _110;
  int _111;
  int _112;
  uint16_t * _113;
  long unsigned int _114;
  int16_t * pretmp_115;
  unsigned int ivtmp_116;
  long unsigned int _117;
  unsigned int ivtmp_118;
  unsigned int ivtmp_123;
  int pretmp_124;
  int16_t * _125;
  unsigned short pretmp_126;
  unsigned int pretmp_128;
  unsigned char pretmp_130;
  short unsigned int _131;
  int pretmp_132;
  unsigned int ivtmp_133;
  unsigned short pretmp_134;
  unsigned short prephitmp_135;
  unsigned short pretmp_136;
  unsigned short prephitmp_137;
  long unsigned int _141;
  sizetype _142;
  vector(8) short int vect_perm_even_152;
  vector(8) short int vect_perm_odd_153;
  vector(8) short int vect_perm_even_154;
  vector(8) short int vect_perm_odd_155;
  vector(8) short int vect_perm_even_156;
  vector(8) short int vect_perm_odd_157;
  vector(8) short int vect_perm_even_158;
  vector(8) short int vect_perm_odd_159;
  unsigned int ivtmp_165;

  <bb 2>:
  # DEBUG h s=> h
  _2 = a_1(D)->i_qp;
  _3 = p_cost_mv[_2];
  if (_3 == 0B)
    goto <bb 3>;
  else
    goto <bb 12>;

  <bb 3>:
  _4 = x264_malloc (65538);
  p_cost_mv[_2] = _4;
  _5 = a_1(D)->i_qp;
  _6 = p_cost_mv[_5];
  _7 = _6 + 32768;
  p_cost_mv[_5] = _7;
  # DEBUG i => 0
  # DEBUG i => 0
  pretmp_124 = a_1(D)->i_lambda;
  pretmp_126 = (unsigned short) pretmp_124;

  <bb 4>:
  # i_18 = PHI <i_22(10), 0(3)>
  # ivtmp_102 = PHI <ivtmp_101(10), 16385(3)>
  # DEBUG i => i_18
  _9 = -i_18;
  _10 = (long unsigned int) _9;
  _11 = _10 * 2;
  _12 = _7 + _11;
  _13 = (long unsigned int) i_18;
  _14 = _13 * 2;
  _15 = _7 + _14;
  # DEBUG val => i_18
  if (i_18 == 0)
    goto <bb 7>;
  else
    goto <bb 5>;

  <bb 5>:
  _68 = i_18 * 2;
  _69 = _68 + -1;
  iftmp.17_70 = (unsigned int) _69;
  # DEBUG val => iftmp.17_70
  if (iftmp.17_70 <= 254)
    goto <bb 6>;
  else
    goto <bb 8>;

  <bb 6>:
  pretmp_128 = iftmp.17_70 + 1;
  pretmp_130 = x264_ue_size_tab[pretmp_128];
  pretmp_132 = (int) pretmp_130;
  pretmp_134 = (unsigned short) pretmp_132;

  <bb 7>:
  # prephitmp_135 = PHI <pretmp_134(6), 1(4)>
  # DEBUG val => NULL
  goto <bb 9>;

  <bb 8>:
  # DEBUG val => iftmp.17_70
  _77 = iftmp.17_70 + 1;
  _78 = _77 >> 8;
  _79 = x264_ue_size_tab[_78];
  _80 = (int) _79;
  _81 = _80 + 16;
  # DEBUG val => NULL
  pretmp_136 = (unsigned short) _81;

  <bb 9>:
  # prephitmp_137 = PHI <prephitmp_135(7), pretmp_136(8)>
  # DEBUG val => NULL
  # DEBUG val => NULL
  _20 = pretmp_126 * prephitmp_137;
  _21 = (short int) _20;
  *_15 = _21;
  *_12 = _21;
  i_22 = i_18 + 1;
  # DEBUG i => i_22
  # DEBUG i => i_22
  ivtmp_101 = ivtmp_102 - 1;
  if (ivtmp_101 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  goto <bb 4>;

  <bb 11>:

  <bb 12>:
  # prephitmp_106 = PHI <_2(2), _5(11)>
  # prephitmp_107 = PHI <_3(2), _7(11)>
  a_1(D)->p_cost_mv = prephitmp_107;
  _26 = *ISRA.280_65(D);
  if (_26 > 2)
    goto <bb 14>;
  else
    goto <bb 13>;

  <bb 13>:
  return;

  <bb 14>:
  _27 = x264_cost_mv_fpel[prephitmp_106][0];
  if (_27 == 0B)
    goto <bb 15>;
  else
    goto <bb 13>;

  <bb 15>:

  <bb 16>:
  # j_83 = PHI <0(15), j_47(29)>
  # prephitmp_108 = PHI <prephitmp_106(15), _31(29)>
  # ivtmp_53 = PHI <4(15), ivtmp_103(29)>
  # DEBUG j => j_83
  _29 = x264_malloc (16386);
  x264_cost_mv_fpel[prephitmp_108][j_83] = _29;
  _31 = a_1(D)->i_qp;
  _32 = x264_cost_mv_fpel[_31][j_83];
  _33 = _32 + 8192;
  x264_cost_mv_fpel[_31][j_83] = _33;
  # DEBUG i => -4096
  # DEBUG i => -4096
  pretmp_115 = p_cost_mv[_31];
  _100 = (sizetype) j_83;
  _99 = _100 + 16384;
  _98 = _99 * 2;
  _97 = pretmp_115 + _98;
  _96 = _32 >= _97;
  _95 = _32 + 16384;
  _89 = (long unsigned int) j_83;
  _88 = _89 * 2;
  _87 = _88 + 18446744073709518848;
  _86 = pretmp_115 + _87;
  _85 = _86 >= _95;
  _84 = _85 | _96;
  if (_84 != 0)
    goto <bb 17>;
  else
    goto <bb 23>;

  <bb 17>:
  _141 = _89 * 2;
  _142 = _141 + 18446744073709518848;
  vectp.727_140 = pretmp_115 + _142;
  vectp.734_161 = _32;

  <bb 18>:
  # i_90 = PHI <i_46(22), -4096(17)>
  # ivtmp_133 = PHI <ivtmp_94(22), 8192(17)>
  # vectp.726_143 = PHI <vectp.726_144(22), vectp.727_140(17)>
  # vectp.733_162 = PHI <vectp.733_163(22), vectp.734_161(17)>
  # ivtmp_64 = PHI <ivtmp_165(22), 0(17)>
  # DEBUG i => i_90
  _35 = (long unsigned int) i_90;
  _36 = _35 * 2;
  _37 = _33 + _36;
  _39 = i_90 * 4;
  _40 = _39 + j_83;
  _41 = (long unsigned int) _40;
  _42 = _41 * 2;
  _43 = pretmp_115 + _42;
  vect__44.728_145 = MEM[(int16_t *)vectp.726_143];
  vectp.726_146 = vectp.726_143 + 16;
  vect__44.729_147 = MEM[(int16_t *)vectp.726_146];
  vectp.726_148 = vectp.726_146 + 16;
  vect__44.730_149 = MEM[(int16_t *)vectp.726_148];
  vectp.726_150 = vectp.726_148 + 16;
  vect__44.731_151 = MEM[(int16_t *)vectp.726_150];
  vect_perm_even_152 = VEC_PERM_EXPR <vect__44.728_145, vect__44.729_147, { 0, 2, 4, 6, 8, 10, 12, 14 }>;
  vect_perm_odd_153 = VEC_PERM_EXPR <vect__44.728_145, vect__44.729_147, { 1, 3, 5, 7, 9, 11, 13, 15 }>;
  vect_perm_even_154 = VEC_PERM_EXPR <vect__44.730_149, vect__44.731_151, { 0, 2, 4, 6, 8, 10, 12, 14 }>;
  vect_perm_odd_155 = VEC_PERM_EXPR <vect__44.730_149, vect__44.731_151, { 1, 3, 5, 7, 9, 11, 13, 15 }>;
  vect_perm_even_156 = VEC_PERM_EXPR <vect_perm_even_152, vect_perm_even_154, { 0, 2, 4, 6, 8, 10, 12, 14 }>;
  vect_perm_odd_157 = VEC_PERM_EXPR <vect_perm_even_152, vect_perm_even_154, { 1, 3, 5, 7, 9, 11, 13, 15 }>;
  vect_perm_even_158 = VEC_PERM_EXPR <vect_perm_odd_153, vect_perm_odd_155, { 0, 2, 4, 6, 8, 10, 12, 14 }>;
  vect_perm_odd_159 = VEC_PERM_EXPR <vect_perm_odd_153, vect_perm_odd_155, { 1, 3, 5, 7, 9, 11, 13, 15 }>;
  _44 = *_43;
  vect__45.732_160 = VIEW_CONVERT_EXPR<vector(8) short unsigned int>(vect_perm_even_156);
  _45 = (short unsigned int) _44;
  MEM[(uint16_t *)vectp.733_162] = vect__45.732_160;
  i_46 = i_90 + 1;
  # DEBUG i => i_46
  # DEBUG i => i_46
  ivtmp_94 = ivtmp_133 - 1;
  vectp.726_144 = vectp.726_150 + 16;
  vectp.733_163 = vectp.733_162 + 16;
  ivtmp_165 = ivtmp_64 + 1;
  if (ivtmp_165 < 1023)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 19>:
  # i_120 = PHI <i_73(20), 4088(21)>
  # ivtmp_118 = PHI <ivtmp_74(20), 8(21)>
  # DEBUG i => i_120
  _117 = (long unsigned int) i_120;
  _114 = _117 * 2;
  _113 = _33 + _114;
  _112 = i_120 * 4;
  _111 = _112 + j_83;
  _110 = (long unsigned int) _111;
  _109 = _110 * 2;
  _125 = pretmp_115 + _109;
  _16 = *_125;
  _17 = (short unsigned int) _16;
  *_113 = _17;
  i_73 = i_120 + 1;
  # DEBUG i => i_73
  # DEBUG i => i_73
  ivtmp_74 = ivtmp_118 - 1;
  if (ivtmp_74 != 0)
    goto <bb 20>;
  else
    goto <bb 26>;

  <bb 20>:
  goto <bb 19>;

  <bb 21>:
  # i_23 = PHI <i_46(18)>
  # ivtmp_116 = PHI <ivtmp_94(18)>
  goto <bb 19>;

  <bb 22>:
  goto <bb 18>;

  <bb 23>:

  <bb 24>:
  # i_82 = PHI <-4096(23), i_127(25)>
  # ivtmp_71 = PHI <8192(23), ivtmp_123(25)>
  # DEBUG i => i_82
  _67 = (long unsigned int) i_82;
  _66 = _67 * 2;
  _52 = _33 + _66;
  _51 = i_82 * 4;
  _49 = _51 + j_83;
  _48 = (long unsigned int) _49;
  _34 = _48 * 2;
  _30 = pretmp_115 + _34;
  _8 = *_30;
  _131 = (short unsigned int) _8;
  *_52 = _131;
  i_127 = i_82 + 1;
  # DEBUG i => i_127
  # DEBUG i => i_127
  ivtmp_123 = ivtmp_71 - 1;
  if (ivtmp_123 != 0)
    goto <bb 25>;
  else
    goto <bb 27>;

  <bb 25>:
  goto <bb 24>;

  <bb 26>:

  <bb 27>:
  j_47 = j_83 + 1;
  # DEBUG j => j_47
  # DEBUG j => j_47
  ivtmp_103 = ivtmp_53 - 1;
  if (ivtmp_103 != 0)
    goto <bb 29>;
  else
    goto <bb 28>;

  <bb 28>:
  goto <bb 13>;

  <bb 29>:
  goto <bb 16>;

}



;; Function x264_slicetype_analyse (x264_slicetype_analyse, funcdef_no=234, decl_uid=9746, cgraph_uid=234, symbol_order=303)


Analyzing loop at encoder/slicetype.c:533
encoder/slicetype.c:533:25: note: ===== analyze_loop_nest =====
encoder/slicetype.c:533:25: note: === vect_analyze_loop_form ===
encoder/slicetype.c:533:25: note: not vectorized: control flow in loop.
encoder/slicetype.c:533:25: note: bad loop form.

Analyzing loop at /usr/include/x86_64-linux-gnu/bits/string2.h:1027
/usr/include/x86_64-linux-gnu/bits/string2.h:1027:9: note: ===== analyze_loop_nest =====
/usr/include/x86_64-linux-gnu/bits/string2.h:1027:9: note: === vect_analyze_loop_form ===
/usr/include/x86_64-linux-gnu/bits/string2.h:1027:9: note: === get_loop_niters ===
/usr/include/x86_64-linux-gnu/bits/string2.h:1027:9: note: not vectorized: number of iterations cannot be computed.
/usr/include/x86_64-linux-gnu/bits/string2.h:1027:9: note: bad loop form.

Analyzing loop at encoder/slicetype.c:432
encoder/slicetype.c:432:5: note: ===== analyze_loop_nest =====
encoder/slicetype.c:432:5: note: === vect_analyze_loop_form ===
encoder/slicetype.c:432:5: note: not vectorized: multiple nested loops.
encoder/slicetype.c:432:5: note: bad loop form.

Analyzing loop at encoder/slicetype.c:414
encoder/slicetype.c:414:5: note: ===== analyze_loop_nest =====
encoder/slicetype.c:414:5: note: === vect_analyze_loop_form ===
encoder/slicetype.c:414:5: note: not vectorized: multiple nested loops.
encoder/slicetype.c:414:5: note: bad loop form.

Analyzing loop at encoder/slicetype.c:370
encoder/slicetype.c:370:29: note: ===== analyze_loop_nest =====
encoder/slicetype.c:370:29: note: === vect_analyze_loop_form ===
encoder/slicetype.c:370:29: note: not vectorized: multiple nested loops.
encoder/slicetype.c:370:29: note: bad loop form.

Analyzing loop at encoder/slicetype.c:382
encoder/slicetype.c:382:9: note: ===== analyze_loop_nest =====
encoder/slicetype.c:382:9: note: === vect_analyze_loop_form ===
encoder/slicetype.c:382:9: note: === get_loop_niters ===
encoder/slicetype.c:382:9: note: not vectorized: number of iterations cannot be computed.
encoder/slicetype.c:382:9: note: bad loop form.

Analyzing loop at encoder/slicetype.c:370
encoder/slicetype.c:370:14: note: ===== analyze_loop_nest =====
encoder/slicetype.c:370:14: note: === vect_analyze_loop_form ===
encoder/slicetype.c:370:14: note: === get_loop_niters ===
encoder/slicetype.c:370:14: note: not vectorized: number of iterations cannot be computed.
encoder/slicetype.c:370:14: note: bad loop form.

Analyzing loop at encoder/slicetype.c:405
encoder/slicetype.c:405:5: note: ===== analyze_loop_nest =====
encoder/slicetype.c:405:5: note: === vect_analyze_loop_form ===
encoder/slicetype.c:405:5: note: ===== analyze_loop_nest_1 =====
encoder/slicetype.c:405:5: note: === vect_analyze_loop_form ===
encoder/slicetype.c:405:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [1, + , 1](no_overflow) < suffix_size_200
  bounds on difference of bases: 0 ... 63
  result:
    # of iterations (unsigned int) suffix_size_200 + 4294967295, bounded by 63
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
encoder/slicetype.c:405:5: note: Symbolic number of iterations is (unsigned int) suffix_size_200
encoder/slicetype.c:405:5: note: not vectorized: inner-loop count not invariant.
encoder/slicetype.c:405:5: note: bad loop form.

Analyzing loop at encoder/slicetype.c:408
encoder/slicetype.c:408:9: note: ===== analyze_loop_nest =====
encoder/slicetype.c:408:9: note: === vect_analyze_loop_form ===
encoder/slicetype.c:408:9: note: === get_loop_niters ===
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
encoder/slicetype.c:408:9: note: Symbolic number of iterations is (unsigned int) suffix_size_200
encoder/slicetype.c:408:9: note: === vect_analyze_data_refs ===
encoder/slicetype.c:408:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/slicetype.c:408:9: note: bad data references.

Analyzing loop at encoder/slicetype.c:563
encoder/slicetype.c:563:27: note: ===== analyze_loop_nest =====
encoder/slicetype.c:563:27: note: === vect_analyze_loop_form ===
encoder/slicetype.c:563:27: note: not vectorized: control flow in loop.
encoder/slicetype.c:563:27: note: bad loop form.

Analyzing loop at encoder/slicetype.c:492
encoder/slicetype.c:492:5: note: ===== analyze_loop_nest =====
encoder/slicetype.c:492:5: note: === vect_analyze_loop_form ===
encoder/slicetype.c:492:5: note: === get_loop_niters ===
encoder/slicetype.c:492:5: note: not vectorized: number of iterations cannot be computed.
encoder/slicetype.c:492:5: note: bad loop form.
encoder/slicetype.c:476:13: note: vectorized 0 loops in function.
x264_slicetype_analyse (struct x264_t * h)
{
  int cost;
  int cur_p;
  int D.21712;
  char * path;
  int best_path_index;
  int best_cost;
  int loc;
  int suffix_size;
  int num_paths;
  char paths[18][64];
  int length;
  size_t __result;
  int n;
  char best_paths[64][64];
  int D.21676;
  int pcost;
  int pthresh;
  int max_bframes;
  int num_bframes;
  static const char __PRETTY_FUNCTION__[23] = "x264_slicetype_analyse";
  int idr_frame_type;
  int cost2p1;
  int cost1b1;
  int cost2p0;
  int cost1p0;
  int i_mb_count;
  int j;
  int keyint_limit;
  int num_frames;
  struct x264_frame_t * frames[67];
  struct x264_mb_analysis_t a;
  struct x264_sps_t * _19;
  int _20;
  long unsigned int _21;
  int _22;
  int _23;
  int _24;
  int _28;
  struct x264_frame_t * _29;
  struct x264_frame_t * _31;
  int _34;
  int _36;
  int _37;
  int _38;
  int _39;
  struct x264_frame_t * _43;
  int _44;
  int _45;
  int _46;
  int _47;
  int _48;
  int _51;
  struct x264_frame_t * _53;
  int _55;
  struct x264_frame_t * _56;
  char _59;
  int _60;
  int _61;
  struct x264_frame_t * _62;
  int _64;
  struct x264_frame_t * _65;
  struct x264_frame_t * _67;
  struct x264_frame_t * _69;
  struct x264_frame_t * _73;
  struct x264_frame_t * _78;
  int _79;
  int _80;
  int _87;
  int _88;
  struct x264_frame_t * _89;
  int _92;
  int _93;
  int _94;
  int _95;
  int _96;
  int _97;
  int _98;
  int _103;
  struct x264_frame_t * _104;
  int _105;
  int _106;
  struct x264_frame_t * _107;
  struct x264_frame_t * _109;
  int _115;
  struct x264_frame_t * _117;
  int _119;
  struct x264_frame_t * _120;
  int * _125;
  int _126;
  int _127;
  int _136;
  char[64] * _137;
  const char * _140;
  char _141;
  int _142;
  long unsigned int _145;
  int _147;
  long unsigned int _148;
  long unsigned int _149;
  char * _150;
  char[64] * _151;
  char * _154;
  char[64] * _158;
  long unsigned int _162;
  char[64] * _164;
  long unsigned int _165;
  char * _166;
  char _167;
  sizetype _176;
  char * _177;
  char _178;
  _Bool _179;
  _Bool _180;
  _Bool _181;
  int _183;
  int _187;
  _Bool _191;
  _Bool _192;
  _Bool _193;
  sizetype _196;
  char * _197;
  char _198;
  long unsigned int _203;
  int _204;
  char _205;
  int _218;
  char[64] * _223;
  long unsigned int _224;
  char[64] * _225;
  int _231;
  char[64] * _232;
  struct x264_frame_t * _237;
  struct x264_frame_t * _247;
  int _250;
  int _252;
  int _256;
  _Bool _261;
  _Bool _266;
  _Bool _267;
  _Bool _268;
  _Bool _269;
  _Bool _270;
  char _283;
  struct x264_frame_t * pretmp_302;
  struct x264_frame_t * prephitmp_303;
  int pretmp_306;
  int pretmp_307;
  int prephitmp_308;
  int pretmp_311;
  int prephitmp_312;
  int pretmp_313;
  char * pretmp_319;
  char pretmp_320;
  char prephitmp_321;
  struct x264_frame_t * pretmp_323;
  struct x264_frame_t * pretmp_324;
  struct x264_frame_t * prephitmp_325;
  int pretmp_327;
  int prephitmp_328;

  <bb 2>:
  frames = {};
  _19 = h_18(D)->sps;
  _20 = _19->i_mb_width;
  if (_20 > 2)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 3>:
  _22 = _19->i_mb_height;
  if (_22 > 2)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 4>:
  _23 = _20 + -2;
  _24 = _22 + -2;
  i_mb_count_25 = _23 * _24;
  goto <bb 7>;

  <bb 5>:
  pretmp_327 = _19->i_mb_height;

  <bb 6>:
  # prephitmp_328 = PHI <pretmp_327(5), _22(3)>
  i_mb_count_27 = _20 * prephitmp_328;

  <bb 7>:
  # i_mb_count_4 = PHI <i_mb_count_25(4), i_mb_count_27(6)>
  # DEBUG i_mb_count => i_mb_count_4
  _28 = h_18(D)->frames.b_have_lowres;
  if (_28 == 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  __assert_fail ("h->frames.b_have_lowres", "encoder/slicetype.c", 487, &__PRETTY_FUNCTION__);

  <bb 9>:
  _29 = h_18(D)->frames.last_nonb;
  if (_29 == 0B)
    goto <bb 97>;
  else
    goto <bb 10>;

  <bb 10>:
  frames[0] = _29;
  # DEBUG j => 0
  # DEBUG j => 0
  _247 = h_18(D)->frames.next[0];
  if (_247 != 0B)
    goto <bb 11>;
  else
    goto <bb 15>;

  <bb 11>:

  <bb 12>:
  # j_238 = PHI <0(11), j_32(13)>
  # _237 = PHI <_247(11), _31(13)>
  # DEBUG j => j_238
  j_32 = j_238 + 1;
  frames[j_32] = _237;
  # DEBUG j => j_32
  # DEBUG j => j_32
  _31 = h_18(D)->frames.next[j_32];
  if (_31 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  goto <bb 12>;

  <bb 14>:
  # j_222 = PHI <j_32(12)>
  pretmp_302 = frames[0];

  <bb 15>:
  # j_248 = PHI <j_222(14), 0(10)>
  # prephitmp_303 = PHI <pretmp_302(14), _29(10)>
  _34 = h_18(D)->param.i_keyint_max;
  _36 = prephitmp_303->i_frame;
  _37 = _34 - _36;
  _38 = h_18(D)->frames.i_last_idr;
  _39 = _37 + _38;
  keyint_limit_40 = _39 + -1;
  # DEBUG keyint_limit => keyint_limit_40
  num_frames_41 = MIN_EXPR <keyint_limit_40, j_248>;
  # DEBUG num_frames => num_frames_41
  if (num_frames_41 == 0)
    goto <bb 97>;
  else
    goto <bb 16>;

  <bb 16>:
  # DEBUG h => h_18(D)
  # DEBUG a => &a
  a.i_qp = 12;
  a.i_lambda = 1;
  _125 = &MEM[(int *)h_18(D) + 404B];
  # DEBUG D#83 => h_18(D)
  x264_mb_analyse_load_costs.isra.18 (_125, &a);
  _126 = h_18(D)->param.analyse.i_me_method;
  _127 = MIN_EXPR <_126, 1>;
  h_18(D)->mb.i_me_method = _127;
  h_18(D)->mb.i_subpel_refine = 4;
  h_18(D)->mb.b_chroma_me = 0;
  # DEBUG h => NULL
  # DEBUG a => NULL
  _43 = frames[1];
  _44 = _43->i_frame;
  _45 = h_18(D)->frames.i_last_idr;
  _46 = _44 - _45;
  _47 = h_18(D)->param.i_keyint_min;
  if (_46 >= _47)
    goto <bb 18>;
  else
    goto <bb 17>;

  <bb 17>:

  <bb 18>:
  # idr_frame_type_5 = PHI <1(16), 2(17)>
  # DEBUG idr_frame_type => idr_frame_type_5
  if (num_frames_41 == 1)
    goto <bb 19> (no_b_frames);
  else
    goto <bb 22>;

  # prephitmp_325 = PHI <_43(18), pretmp_323(83), pretmp_324(85)>
no_b_frames:
  prephitmp_325->i_type = 3;
  _115 = h_18(D)->param.b_pre_scenecut;
  if (_115 != 0)
    goto <bb 20>;
  else
    goto <bb 97>;

  <bb 20>:
  x264_slicetype_frame_cost (h_18(D), &a, &frames, 0, 1, 1, 0);
  _117 = frames[1];
  _119 = scenecut (h_18(D), _117, 1);
  if (_119 != 0)
    goto <bb 21>;
  else
    goto <bb 97>;

  <bb 21>:
  _120 = frames[1];
  _120->i_type = idr_frame_type_5;
  goto <bb 98>;

  <bb 22>:
  _48 = h_18(D)->param.i_bframe_adaptive;
  if (_48 == 2)
    goto <bb 23>;
  else
    goto <bb 82>;

  <bb 23>:
  max_bframes_49 = h_18(D)->param.i_bframe;
  if (num_frames_41 <= max_bframes_49)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  max_bframes_50 = num_frames_41 + -1;

  <bb 25>:
  # max_bframes_6 = PHI <max_bframes_50(24), max_bframes_49(23)>
  # DEBUG max_bframes => max_bframes_6
  _51 = h_18(D)->param.b_pre_scenecut;
  if (_51 != 0)
    goto <bb 26>;
  else
    goto <bb 28>;

  <bb 26>:
  x264_slicetype_frame_cost (h_18(D), &a, &frames, 0, 1, 1, 0);
  _53 = frames[1];
  _55 = scenecut (h_18(D), _53, 1);
  if (_55 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  _56 = frames[1];
  _56->i_type = idr_frame_type_5;
  goto <bb 98>;

  <bb 28>:
  # DEBUG D#134 => num_frames_41 - max_bframes_6
  # DEBUG h => h_18(D)
  # DEBUG a => &a
  # DEBUG frames => &frames
  # DEBUG length => num_frames_41
  # DEBUG bframes => max_bframes_6
  # DEBUG buffer => D#134
  # DEBUG D#133 => D#134
  best_paths = {};
  best_paths[1] = "P";
  # DEBUG n => 2
  # DEBUG n => 2
  _231 = num_frames_41 + -1;
  if (_231 > 2)
    goto <bb 30>;
  else
    goto <bb 29>;

  <bb 29>:
  # DEBUG __a0 => 66
  # DEBUG __a1 => 0
  _136 = num_frames_41 + -2;
  _137 = &best_paths[_136];
  # DEBUG __s => _137
  # DEBUG __accept => 66
  # DEBUG __result => 0
  # DEBUG __result => 0
  _59 = MEM[(const char *)_137];
  if (_59 == 66)
    goto <bb 66>;
  else
    goto <bb 100>;

  <bb 30>:
  pretmp_313 = max_bframes_6 + 1;

  <bb 31>:
  # n_272 = PHI <2(30), n_134(65)>
  # DEBUG n => n_272
  # DEBUG D#132 => D#133
  # DEBUG h => h_18(D)
  # DEBUG a => &a
  # DEBUG frames => &frames
  # DEBUG length => n_272
  # DEBUG max_bframes => max_bframes_6
  # DEBUG best_paths => &best_paths
  # DEBUG buffer_size => D#132
  paths = {};
  num_paths_143 = MIN_EXPR <n_272, pretmp_313>;
  # DEBUG num_paths => num_paths_143
  # DEBUG best_cost => 268435456
  # DEBUG best_path_index => 0
  length_144 = MIN_EXPR <n_272, 64>;
  # DEBUG length => length_144
  # DEBUG suffix_size => 0
  # DEBUG suffix_size => 0
  if (num_paths_143 > 0)
    goto <bb 101>;
  else
    goto <bb 63>;

  <bb 32>:
  # DEBUG suffix_size => suffix_size_200
  suffix_size_146 = suffix_size_200 + 1;
  _147 = length_144 - suffix_size_146;
  _148 = (long unsigned int) _147;
  _149 = _148 * 64;
  _150 = &best_paths + _149;
  _151 = &paths[suffix_size_200];
  # DEBUG __dest => _151
  # DEBUG __src => _150
  # DEBUG __len => _148
  __builtin_memcpy (_151, _150, _148);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  # DEBUG loc => 0
  # DEBUG loc => 0
  if (suffix_size_200 > 0)
    goto <bb 34>;
  else
    goto <bb 33>;

  <bb 33>:
  goto <bb 38>;

  <bb 34>:

  <bb 35>:
  # loc_276 = PHI <0(34), loc_155(37)>
  # DEBUG loc => loc_276
  # DEBUG __dest => _151
  # DEBUG __src => "B"
  _21 = __builtin_strlen (_151);
  _223 = _151 + _21;
  __builtin_memcpy (_223, "B", 2);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  loc_155 = loc_276 + 1;
  # DEBUG loc => loc_155
  # DEBUG loc => loc_155
  if (loc_155 < suffix_size_200)
    goto <bb 37>;
  else
    goto <bb 36>;

  <bb 36>:
  goto <bb 33>;

  <bb 37>:
  goto <bb 35>;

  <bb 38>:
  # suffix_size_200 = PHI <suffix_size_146(33), 1(101)>
  # _232 = PHI <_151(33), &paths[0](101)>
  # DEBUG __dest => _232
  # DEBUG __src => "P"
  _224 = __builtin_strlen (_232);
  _225 = _232 + _224;
  __builtin_memcpy (_225, "P", 2);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG suffix_size => suffix_size_200
  # DEBUG suffix_size => suffix_size_200
  if (num_paths_143 > suffix_size_200)
    goto <bb 32>;
  else
    goto <bb 39>;

  <bb 39>:

  <bb 40>:
  # best_path_index_277 = PHI <0(39), best_path_index_161(62)>
  # best_cost_278 = PHI <268435456(39), best_cost_171(62)>
  # best_path_index_279 = PHI <0(39), best_path_index_172(62)>
  # DEBUG best_path_index => best_path_index_279
  # DEBUG best_cost => best_cost_278
  # DEBUG path => best_path_index_277
  _158 = &paths[best_path_index_277];
  # DEBUG h => h_18(D)
  # DEBUG a => &a
  # DEBUG frames => &frames
  # DEBUG path => _158
  # DEBUG threshold => best_cost_278
  # DEBUG loc => 1
  # DEBUG cost => 0
  # DEBUG cur_p => 0
  path_173 = _158 + 18446744073709551615;
  # DEBUG path => path_173
  # DEBUG cur_p => 0
  # DEBUG cost => 0
  # DEBUG loc => 1
  _167 = MEM[(char *)_158];
  if (_167 != 0)
    goto <bb 41>;
  else
    goto <bb 59>;

  <bb 41>:
  pretmp_319 = path_173 + 1;
  pretmp_320 = *pretmp_319;
  goto <bb 58>;

  <bb 42>:

  <bb 43>:
  # cur_p_281 = PHI <cur_p_207(42), cur_p_175(44)>
  # DEBUG next_p => cur_p_281
  cur_p_175 = cur_p_281 + 1;
  # DEBUG next_p => cur_p_175
  # DEBUG next_p => cur_p_175
  _176 = (sizetype) cur_p_175;
  _177 = path_173 + _176;
  _178 = *_177;
  _179 = _178 != 0;
  _180 = _178 != 80;
  _181 = _179 & _180;
  if (_181 != 0)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  goto <bb 43>;

  <bb 45>:
  # cur_p_206 = PHI <cur_p_175(43)>
  # _205 = PHI <_178(43)>

  <bb 46>:
  # cur_p_282 = PHI <cur_p_206(45), cur_p_207(58)>
  # _283 = PHI <_205(45), prephitmp_321(58)>
  if (_283 != 80)
    goto <bb 47>;
  else
    goto <bb 48>;

  <bb 47>:
  # best_cost_188 = PHI <best_cost_285(46)>
  goto <bb 59>;

  <bb 48>:
  _183 = x264_slicetype_frame_cost (h_18(D), &a, &frames, cur_p_284, cur_p_282, cur_p_282, 0);
  best_cost_185 = _183 + best_cost_285;
  # DEBUG cost => best_cost_185
  if (best_cost_185 > best_cost_278)
    goto <bb 49>;
  else
    goto <bb 50>;

  <bb 49>:
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG frames => NULL
  # DEBUG path => NULL
  # DEBUG threshold => NULL
  # DEBUG cur_p => NULL
  # DEBUG cost => NULL
  # DEBUG cost => NULL
  goto <bb 60>;

  <bb 50>:
  # DEBUG next_b => cur_p_207
  # DEBUG cost => best_cost_185
  _269 = cur_p_207 < cur_p_282;
  _261 = best_cost_185 < best_cost_278;
  _270 = _261 & _269;
  if (_270 != 0)
    goto <bb 51>;
  else
    goto <bb 55>;

  <bb 51>:

  <bb 52>:
  # cur_p_287 = PHI <cur_p_207(51), cur_p_190(54)>
  # best_cost_288 = PHI <best_cost_185(51), best_cost_189(54)>
  # DEBUG next_b => cur_p_287
  # DEBUG cost => best_cost_288
  _187 = x264_slicetype_frame_cost (h_18(D), &a, &frames, cur_p_284, cur_p_282, cur_p_287, 0);
  best_cost_189 = _187 + best_cost_288;
  # DEBUG cost => best_cost_189
  cur_p_190 = cur_p_287 + 1;
  # DEBUG next_b => cur_p_190
  # DEBUG next_b => cur_p_190
  # DEBUG cost => best_cost_189
  _191 = cur_p_190 < cur_p_282;
  _192 = best_cost_189 < best_cost_278;
  _193 = _191 & _192;
  if (_193 != 0)
    goto <bb 54>;
  else
    goto <bb 53>;

  <bb 53>:
  # best_cost_202 = PHI <best_cost_189(52)>
  goto <bb 55>;

  <bb 54>:
  goto <bb 52>;

  <bb 55>:
  # best_cost_289 = PHI <best_cost_202(53), best_cost_185(50)>
  cur_p_194 = cur_p_282 + 1;
  # DEBUG loc => cur_p_194
  # DEBUG cur_p => cur_p_282
  # DEBUG cur_p => cur_p_282
  # DEBUG cost => best_cost_289
  # DEBUG loc => cur_p_194
  _196 = (sizetype) cur_p_194;
  _197 = path_173 + _196;
  _198 = *_197;
  if (_198 != 0)
    goto <bb 57>;
  else
    goto <bb 56>;

  <bb 56>:
  # best_cost_186 = PHI <best_cost_289(55)>
  goto <bb 59>;

  <bb 57>:

  <bb 58>:
  # cur_p_207 = PHI <1(41), cur_p_194(57)>
  # cur_p_284 = PHI <0(41), cur_p_282(57)>
  # best_cost_285 = PHI <0(41), best_cost_289(57)>
  # prephitmp_321 = PHI <pretmp_320(41), _198(57)>
  # DEBUG cur_p => cur_p_284
  # DEBUG cost => best_cost_285
  # DEBUG loc => NULL
  # DEBUG next_p => cur_p_207
  _268 = prephitmp_321 != 0;
  _267 = prephitmp_321 != 80;
  _266 = _267 & _268;
  if (_266 != 0)
    goto <bb 42>;
  else
    goto <bb 46>;

  <bb 59>:
  # best_cost_286 = PHI <best_cost_188(47), best_cost_186(56), 0(40)>
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG frames => NULL
  # DEBUG path => NULL
  # DEBUG threshold => NULL
  # DEBUG cur_p => NULL
  # DEBUG cost => NULL
  # DEBUG cost => NULL
  if (best_cost_278 > best_cost_286)
    goto <bb 60>;
  else
    goto <bb 49>;

  <bb 60>:
  # best_cost_171 = PHI <best_cost_278(49), best_cost_286(59)>
  # best_path_index_172 = PHI <best_path_index_279(49), best_path_index_277(59)>
  # DEBUG best_path_index => best_path_index_172
  # DEBUG best_cost => best_cost_171
  best_path_index_161 = best_path_index_277 + 1;
  # DEBUG path => best_path_index_161
  # DEBUG best_path_index => best_path_index_172
  # DEBUG best_cost => best_cost_171
  # DEBUG path => best_path_index_161
  if (num_paths_143 > best_path_index_161)
    goto <bb 62>;
  else
    goto <bb 61>;

  <bb 61>:
  # best_path_index_208 = PHI <best_path_index_172(60)>
  goto <bb 63>;

  <bb 62>:
  goto <bb 40>;

  <bb 63>:
  # best_path_index_280 = PHI <best_path_index_208(61), 0(31)>
  _162 = (long unsigned int) length_144;
  _164 = &paths[best_path_index_280];
  _165 = _162 * 64;
  _166 = &best_paths + _165;
  # DEBUG __dest => _166
  # DEBUG __src => _164
  # DEBUG __len => _162
  __builtin_memcpy (_166, _164, _162);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  paths ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG frames => NULL
  # DEBUG length => NULL
  # DEBUG max_bframes => NULL
  # DEBUG best_paths => NULL
  # DEBUG num_paths => NULL
  # DEBUG suffix_size => NULL
  # DEBUG loc => NULL
  # DEBUG best_cost => NULL
  # DEBUG best_path_index => NULL
  n_134 = n_272 + 1;
  # DEBUG n => n_134
  # DEBUG n => n_134
  if (n_134 < _231)
    goto <bb 65>;
  else
    goto <bb 64>;

  <bb 64>:
  goto <bb 29>;

  <bb 65>:
  goto <bb 31>;

  <bb 66>:

  <bb 67>:
  # __result_273 = PHI <0(66), __result_139(68)>
  # DEBUG __result => __result_273
  __result_139 = __result_273 + 1;
  # DEBUG __result => __result_139
  # DEBUG __result => __result_139
  _140 = _137 + __result_139;
  _141 = *_140;
  if (_141 == 66)
    goto <bb 68>;
  else
    goto <bb 69>;

  <bb 68>:
  goto <bb 67>;

  <bb 69>:
  # __result_209 = PHI <__result_139(67)>
  # DEBUG __s => NULL
  # DEBUG __accept => NULL
  # DEBUG __result => NULL
  _142 = (int) __result_209;
  best_paths ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG frames => NULL
  # DEBUG length => NULL
  # DEBUG bframes => NULL
  # DEBUG n => NULL
  # DEBUG __result => NULL
  # DEBUG num_bframes => NULL
  if (num_frames_41 <= _142)
    goto <bb 72>;
  else
    goto <bb 70>;

  <bb 70>:
  # DEBUG j => 1
  if (_142 > 0)
    goto <bb 73>;
  else
    goto <bb 71>;

  <bb 71>:
  pretmp_307 = _142 + 1;
  goto <bb 81>;

  <bb 72>:
  __assert_fail ("num_bframes < num_frames", "encoder/slicetype.c", 529, &__PRETTY_FUNCTION__);

  <bb 73>:

  <bb 74>:
  # j_249 = PHI <1(73), prephitmp_312(79)>
  # DEBUG j => j_249
  _60 = h_18(D)->param.b_pre_scenecut;
  if (_60 != 0)
    goto <bb 75>;
  else
    goto <bb 77>;

  <bb 75>:
  _61 = j_249 + 1;
  _62 = frames[_61];
  _64 = scenecut (h_18(D), _62, _61);
  if (_64 != 0)
    goto <bb 76>;
  else
    goto <bb 78>;

  <bb 76>:
  # _218 = PHI <_61(75)>
  # j_195 = PHI <j_249(75)>
  _65 = frames[j_195];
  _65->i_type = 3;
  _67 = frames[_218];
  _67->i_type = idr_frame_type_5;
  goto <bb 98>;

  <bb 77>:
  pretmp_311 = j_249 + 1;

  <bb 78>:
  # prephitmp_312 = PHI <pretmp_311(77), _61(75)>
  _69 = frames[j_249];
  _69->i_type = 5;
  # DEBUG D#447 => j_249 + 1
  # DEBUG j => D#447
  # DEBUG j => D#447
  if (_142 >= prephitmp_312)
    goto <bb 79>;
  else
    goto <bb 80>;

  <bb 79>:
  goto <bb 74>;

  <bb 80>:
  pretmp_306 = _142 + 1;

  <bb 81>:
  # prephitmp_308 = PHI <pretmp_306(80), pretmp_307(71), 1(100)>
  _73 = frames[prephitmp_308];
  _73->i_type = 3;
  goto <bb 96>;

  <bb 82>:
  cost2p1_77 = x264_slicetype_frame_cost (h_18(D), &a, &frames, 0, 2, 2, 1);
  # DEBUG cost2p1 => cost2p1_77
  _78 = frames[2];
  _79 = _78->i_intra_mbs[2];
  _80 = i_mb_count_4 / 2;
  if (_79 > _80)
    goto <bb 83>;
  else
    goto <bb 84>;

  <bb 83>:
  pretmp_323 = frames[1];
  goto <bb 19> (no_b_frames);

  <bb 84>:
  cost1b1_82 = x264_slicetype_frame_cost (h_18(D), &a, &frames, 0, 2, 1, 0);
  # DEBUG cost1b1 => cost1b1_82
  cost1p0_84 = x264_slicetype_frame_cost (h_18(D), &a, &frames, 0, 1, 1, 0);
  # DEBUG cost1p0 => cost1p0_84
  cost2p0_86 = x264_slicetype_frame_cost (h_18(D), &a, &frames, 1, 2, 2, 0);
  # DEBUG cost2p0 => cost2p0_86
  _87 = cost1p0_84 + cost2p0_86;
  _88 = cost2p1_77 + cost1b1_82;
  if (_87 < _88)
    goto <bb 85>;
  else
    goto <bb 86>;

  <bb 85>:
  pretmp_324 = frames[1];
  goto <bb 19> (no_b_frames);

  <bb 86>:
  _89 = frames[1];
  _89->i_type = 5;
  # DEBUG j => 2
  # DEBUG j => 2
  _256 = num_frames_41 + -1;
  _252 = h_18(D)->param.i_bframe;
  _250 = MIN_EXPR <_252, _256>;
  if (_250 > 1)
    goto <bb 88>;
  else
    goto <bb 87>;

  <bb 87>:
  goto <bb 96>;

  <bb 88>:
  _106 = i_mb_count_4 / 3;

  <bb 89>:
  # j_245 = PHI <2(88), j_100(95)>
  # DEBUG j => j_245
  _94 = h_18(D)->param.i_bframe_bias;
  _95 = 50 - _94;
  _96 = j_245 + -1;
  _97 = _95 * _96;
  _98 = 300 - _97;
  pthresh_99 = MAX_EXPR <_98, 30>;
  # DEBUG pthresh => pthresh_99
  j_100 = j_245 + 1;
  pcost_102 = x264_slicetype_frame_cost (h_18(D), &a, &frames, 0, j_100, j_100, 1);
  # DEBUG pcost => pcost_102
  _103 = i_mb_count_4 * pthresh_99;
  if (pcost_102 > _103)
    goto <bb 90>;
  else
    goto <bb 91>;

  <bb 90>:
  # j_201 = PHI <j_245(89)>
  goto <bb 93>;

  <bb 91>:
  _104 = frames[j_100];
  _105 = _104->i_intra_mbs[j_100];
  if (_105 > _106)
    goto <bb 92>;
  else
    goto <bb 94>;

  <bb 92>:
  # j_199 = PHI <j_245(91)>

  <bb 93>:
  # j_184 = PHI <j_199(92), j_201(90)>
  _109 = frames[j_184];
  _109->i_type = 3;
  goto <bb 96>;

  <bb 94>:
  _107 = frames[j_245];
  _107->i_type = 5;
  # DEBUG j => j_100
  # DEBUG j => j_100
  _92 = h_18(D)->param.i_bframe;
  _93 = MIN_EXPR <_92, _256>;
  if (_93 >= j_100)
    goto <bb 95>;
  else
    goto <bb 87>;

  <bb 95>:
  goto <bb 89>;

  <bb 96>:
  a ={v} {CLOBBER};
  frames ={v} {CLOBBER};
  goto <bb 99>;

  <bb 97>:

  <bb 98>:
  a ={v} {CLOBBER};
  frames ={v} {CLOBBER};

  <bb 99>:
  return;

  <bb 100>:
  # DEBUG __s => NULL
  # DEBUG __accept => NULL
  # DEBUG __result => NULL
  best_paths ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG frames => NULL
  # DEBUG length => NULL
  # DEBUG bframes => NULL
  # DEBUG n => NULL
  # DEBUG __result => NULL
  # DEBUG num_bframes => NULL
  if (num_frames_41 <= 0)
    goto <bb 72>;
  else
    goto <bb 81>;

  <bb 101>:
  # DEBUG suffix_size => 0
  _204 = length_144 + -1;
  _145 = (long unsigned int) _204;
  _203 = _145 * 64;
  _154 = &best_paths + _203;
  # DEBUG __dest => &paths[0]
  # DEBUG __src => _154
  # DEBUG __len => _145
  __builtin_memcpy (&paths[0], _154, _145);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  # DEBUG loc => 0
  # DEBUG loc => 0
  goto <bb 38>;

}



;; Function x264_cabac_mb_mvd (x264_cabac_mb_mvd, funcdef_no=166, decl_uid=8327, cgraph_uid=166, symbol_order=218)


Analyzing loop at ./common/macroblock.h:373
./common/macroblock.h:373:9: note: ===== analyze_loop_nest =====
./common/macroblock.h:373:9: note: === vect_analyze_loop_form ===
./common/macroblock.h:373:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < height_27(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) height_27(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
./common/macroblock.h:373:9: note: Symbolic number of iterations is (unsigned int) height_27(D)
./common/macroblock.h:373:9: note: === vect_analyze_data_refs ===
Creating dr for *_39
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
	base_address: h_2(D) + ((sizetype) (_24 * 8 + _26) + (sizetype) i_list_3(D) * 48) * 4
	offset from base address: 0
	constant offset from base address: 19632
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)h_2(D) + ((sizetype) (_24 * 8 + _26) + (sizetype) i_list_3(D) * 48) * 4]
	Access function 0: {19632B, +, 32}_1
./common/macroblock.h:373:9: note: got vectype for stmt: *_39 = _59;
vector(4) unsigned int
./common/macroblock.h:373:9: note: === vect_analyze_scalar_cycles ===
./common/macroblock.h:373:9: note: Analyze phi: .MEM_377 = PHI <.MEM_328(46), .MEM_66(48)>

./common/macroblock.h:373:9: note: Analyze phi: dy_117 = PHI <0(46), dy_41(48)>

./common/macroblock.h:373:9: note: Access function of PHI: {0, +, 1}_1
./common/macroblock.h:373:9: note: step: 1,  init: 0
./common/macroblock.h:373:9: note: Detected induction.
./common/macroblock.h:373:9: note: === vect_pattern_recog ===
./common/macroblock.h:373:9: note: vect_is_simple_use: operand dy_117
./common/macroblock.h:373:9: note: def_stmt: dy_117 = PHI <0(46), dy_41(48)>
./common/macroblock.h:373:9: note: type of def: 4.
./common/macroblock.h:373:9: note: vect_is_simple_use: operand _37
./common/macroblock.h:373:9: note: def_stmt: _37 = (long unsigned int) _34;
./common/macroblock.h:373:9: note: type of def: 3.
./common/macroblock.h:373:9: note: vect_is_simple_use: operand _34
./common/macroblock.h:373:9: note: def_stmt: _34 = dy_117 * 8;
./common/macroblock.h:373:9: note: type of def: 3.
./common/macroblock.h:373:9: note: vect_is_simple_use: operand 4
./common/macroblock.h:373:9: note: === vect_analyze_data_ref_accesses ===
./common/macroblock.h:373:9: note: not consecutive access *_39 = _59;

./common/macroblock.h:373:9: note: not vectorized: complicated access pattern.
./common/macroblock.h:373:9: note: bad data access.

Analyzing loop at ./common/macroblock.h:380
./common/macroblock.h:380:9: note: ===== analyze_loop_nest =====
./common/macroblock.h:380:9: note: === vect_analyze_loop_form ===
./common/macroblock.h:380:9: note: ===== analyze_loop_nest_1 =====
./common/macroblock.h:380:9: note: === vect_analyze_loop_form ===
./common/macroblock.h:380:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [1, + , 1](no_overflow) < pretmp_518
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) pretmp_518 + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
./common/macroblock.h:380:9: note: Symbolic number of iterations is (unsigned int) pretmp_518
./common/macroblock.h:380:9: note: not vectorized: control flow in loop.
./common/macroblock.h:380:9: note: bad loop form.

Analyzing loop at ./common/macroblock.h:381
./common/macroblock.h:381:13: note: ===== analyze_loop_nest =====
./common/macroblock.h:381:13: note: === vect_analyze_loop_form ===
./common/macroblock.h:381:13: note: === get_loop_niters ===
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
./common/macroblock.h:381:13: note: Symbolic number of iterations is (unsigned int) pretmp_518
./common/macroblock.h:381:13: note: === vect_analyze_data_refs ===
Creating dr for *_51
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:749, generic-match.c:1467
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:749, generic-match.c:1467
	base_address: (uint64_t *) (h_2(D) + ((sizetype) (_24 * 8 + _26) + (sizetype) i_list_3(D) * 48) * 4) + (sizetype) ((long unsigned int) (dy_60 * 4) * 8)
	offset from base address: 0
	constant offset from base address: 19632
	step: 8
	aligned to: 128
	base_object: *(uint64_t *) (h_2(D) + ((sizetype) (_24 * 8 + _26) + (sizetype) i_list_3(D) * 48) * 4) + (sizetype) ((long unsigned int) (dy_60 * 4) * 8)
	Access function 0: {19632B, +, 8}_4
./common/macroblock.h:381:13: note: got vectype for stmt: *_51 = val64_44;
vector(2) long unsigned int
./common/macroblock.h:381:13: note: === vect_analyze_scalar_cycles ===
./common/macroblock.h:381:13: note: Analyze phi: dx_172 = PHI <0(58), dx_52(51)>

./common/macroblock.h:381:13: note: Access function of PHI: {0, +, 1}_4
./common/macroblock.h:381:13: note: step: 1,  init: 0
./common/macroblock.h:381:13: note: Detected induction.
./common/macroblock.h:381:13: note: Analyze phi: .MEM_13 = PHI <.MEM_102(58), .MEM_65(51)>

./common/macroblock.h:381:13: note: === vect_pattern_recog ===
./common/macroblock.h:381:13: note: vect_is_simple_use: operand _49
./common/macroblock.h:381:13: note: def_stmt: _49 = (long unsigned int) _48;
./common/macroblock.h:381:13: note: type of def: 3.
./common/macroblock.h:381:13: note: vect_is_simple_use: operand _48
./common/macroblock.h:381:13: note: def_stmt: _48 = dx_172 + pretmp_519;
./common/macroblock.h:381:13: note: type of def: 3.
./common/macroblock.h:381:13: note: vect_is_simple_use: operand 8
./common/macroblock.h:381:13: note: === vect_analyze_data_ref_accesses ===
./common/macroblock.h:381:13: note: === vect_mark_stmts_to_be_vectorized ===
./common/macroblock.h:381:13: note: init: phi relevant? dx_172 = PHI <0(58), dx_52(51)>
./common/macroblock.h:381:13: note: init: phi relevant? .MEM_13 = PHI <.MEM_102(58), .MEM_65(51)>
./common/macroblock.h:381:13: note: init: stmt relevant? # DEBUG dx => dx_172
./common/macroblock.h:381:13: note: init: stmt relevant? _48 = dx_172 + pretmp_519;
./common/macroblock.h:381:13: note: init: stmt relevant? _49 = (long unsigned int) _48;
./common/macroblock.h:381:13: note: init: stmt relevant? _50 = _49 * 8;
./common/macroblock.h:381:13: note: init: stmt relevant? _51 = _32 + _50;
./common/macroblock.h:381:13: note: init: stmt relevant? *_51 = val64_44;
./common/macroblock.h:381:13: note: vec_stmt_relevant_p: stmt has vdefs.
./common/macroblock.h:381:13: note: mark relevant 4, live 0.
./common/macroblock.h:381:13: note: init: stmt relevant? dx_52 = dx_172 + 1;
./common/macroblock.h:381:13: note: init: stmt relevant? # DEBUG dx => dx_52
./common/macroblock.h:381:13: note: init: stmt relevant? # DEBUG dx => dx_52
./common/macroblock.h:381:13: note: init: stmt relevant? if (dx_52 < pretmp_518)
./common/macroblock.h:381:13: note: worklist: examine stmt: *_51 = val64_44;
./common/macroblock.h:381:13: note: vect_is_simple_use: operand val64_44
./common/macroblock.h:381:13: note: def_stmt: val64_44 = _42 + _43;
./common/macroblock.h:381:13: note: type of def: 2.
./common/macroblock.h:381:13: note: def_stmt is out of loop.
./common/macroblock.h:381:13: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: *_51 = val64_44;
  stmt_b: *_51 = val64_44;
(analyze_overlapping_iterations 
  (chrec_a = {19632B, +, 8}_4)
  (chrec_b = {19632B, +, 8}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
./common/macroblock.h:381:13: note: === vect_determine_vectorization_factor ===
./common/macroblock.h:381:13: note: ==> examining phi: dx_172 = PHI <0(58), dx_52(51)>

./common/macroblock.h:381:13: note: ==> examining phi: .MEM_13 = PHI <.MEM_102(58), .MEM_65(51)>

./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_172

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: _48 = dx_172 + pretmp_519;

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: _49 = (long unsigned int) _48;

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: _50 = _49 * 8;

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: _51 = _32 + _50;

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: *_51 = val64_44;

./common/macroblock.h:381:13: note: get vectype for scalar type:  uint64_t
./common/macroblock.h:381:13: note: vectype: vector(2) long unsigned int
./common/macroblock.h:381:13: note: nunits = 2
./common/macroblock.h:381:13: note: ==> examining statement: dx_52 = dx_172 + 1;

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_52

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_52

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: if (dx_52 < pretmp_518)

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: vectorization factor = 2
./common/macroblock.h:381:13: note: === vect_analyze_data_refs_alignment ===
./common/macroblock.h:381:13: note: vect_compute_data_ref_alignment:
./common/macroblock.h:381:13: note: can't force alignment of ref: *_51
./common/macroblock.h:381:13: note: === vect_prune_runtime_alias_test_list ===
./common/macroblock.h:381:13: note: === vect_enhance_data_refs_alignment ===
./common/macroblock.h:381:13: note: Unknown misalignment, is_packed = 0
./common/macroblock.h:381:13: note: vect_can_advance_ivs_p:
./common/macroblock.h:381:13: note: Analyze phi: dx_172 = PHI <0(58), dx_52(51)>

./common/macroblock.h:381:13: note: Analyze phi: .MEM_13 = PHI <.MEM_102(58), .MEM_65(51)>

./common/macroblock.h:381:13: note: virtual phi. skip.
./common/macroblock.h:381:13: note: Disable peeling, max peels reached: 1
./common/macroblock.h:381:13: note: Vectorizing an unaligned access.
./common/macroblock.h:381:13: note: === vect_analyze_slp ===
./common/macroblock.h:381:13: note: === vect_make_slp_decision ===
./common/macroblock.h:381:13: note: === vect_detect_hybrid_slp ===
./common/macroblock.h:381:13: note: === vect_analyze_loop_operations ===
./common/macroblock.h:381:13: note: examining phi: dx_172 = PHI <0(58), dx_52(51)>

./common/macroblock.h:381:13: note: examining phi: .MEM_13 = PHI <.MEM_102(58), .MEM_65(51)>

./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_172
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: _48 = dx_172 + pretmp_519;
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: _49 = (long unsigned int) _48;
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: _50 = _49 * 8;
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: _51 = _32 + _50;
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: *_51 = val64_44;
./common/macroblock.h:381:13: note: vect_is_simple_use: operand val64_44
./common/macroblock.h:381:13: note: def_stmt: val64_44 = _42 + _43;
./common/macroblock.h:381:13: note: type of def: 2.
./common/macroblock.h:381:13: note: vect_model_store_cost: unaligned supported by hardware.
./common/macroblock.h:381:13: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 1 .
./common/macroblock.h:381:13: note: ==> examining statement: dx_52 = dx_172 + 1;
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_52
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_52
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: if (dx_52 < pretmp_518)
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: === vect_update_slp_costs_according_to_vf ===
./common/macroblock.h:381:13: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
./common/macroblock.h:381:13: note: Cost model analysis: 
  Vector inside of loop cost: 2
  Vector prologue cost: 7
  Vector epilogue cost: 1
  Scalar iteration cost: 1
  Scalar outside cost: 6
  Vector outside cost: 8
  prologue iterations: 0
  epilogue iterations: 1
./common/macroblock.h:381:13: note: cost model: the vector iteration cost = 2 divided by the scalar iteration cost = 1 is greater or equal to the vectorization factor = 2.
./common/macroblock.h:381:13: note: not vectorized: vectorization not profitable.
./common/macroblock.h:381:13: note: not vectorized: vector version will never be profitable.
./common/macroblock.h:381:13: note: bad operation or unsupported loop bound.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_376]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_5
Creating dr for cb_19(D)->state[_106]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_108][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_19(D)->state[_106]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_108][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _103 = ctxes[i_376];
const vector(16) unsigned char
Creating dr for cb_19(D)->state[_106]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_19(D)
	offset from base address: (ssizetype) _104
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_19(D)->state[_106]
encoder/cabac.c:465:13: note: got vectype for stmt: _107 = cb_19(D)->state[_106];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _107 = cb_19(D)->state[_106];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 6
  exit condition [2, + , 1](no_overflow) < i_abs_77
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_77 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_77 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_325]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_6
Creating dr for cb_19(D)->state[_128]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_130][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_19(D)->state[_128]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_130][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _125 = ctxes[i_325];
const vector(16) unsigned char
Creating dr for cb_19(D)->state[_128]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_19(D)
	offset from base address: (ssizetype) _126
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_19(D)->state[_128]
encoder/cabac.c:473:13: note: got vectype for stmt: _129 = cb_19(D)->state[_128];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _129 = cb_19(D)->state[_128];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 7
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_390]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_7
Creating dr for cb_19(D)->state[_162]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_164][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_19(D)->state[_162]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_164][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _159 = ctxes[i_390];
const vector(16) unsigned char
Creating dr for cb_19(D)->state[_162]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_19(D)
	offset from base address: (ssizetype) _160
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_19(D)->state[_162]
encoder/cabac.c:483:9: note: got vectype for stmt: _163 = cb_19(D)->state[_162];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _163 = cb_19(D)->state[_162];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_375]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_8
Creating dr for cb_19(D)->state[_229]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_231][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_19(D)->state[_229]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_231][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _226 = ctxes[i_375];
const vector(16) unsigned char
Creating dr for cb_19(D)->state[_229]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_19(D)
	offset from base address: (ssizetype) _227
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_19(D)->state[_229]
encoder/cabac.c:465:13: note: got vectype for stmt: _230 = cb_19(D)->state[_229];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _230 = cb_19(D)->state[_229];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 9
  exit condition [2, + , 1](no_overflow) < i_abs_200
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_200 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_200 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_55]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_9
Creating dr for cb_19(D)->state[_251]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_253][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_19(D)->state[_251]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_253][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _248 = ctxes[i_55];
const vector(16) unsigned char
Creating dr for cb_19(D)->state[_251]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_19(D)
	offset from base address: (ssizetype) _249
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_19(D)->state[_251]
encoder/cabac.c:473:13: note: got vectype for stmt: _252 = cb_19(D)->state[_251];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _252 = cb_19(D)->state[_251];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 10
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_397]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_10
Creating dr for cb_19(D)->state[_285]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_287][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_19(D)->state[_285]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_19(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_287][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _282 = ctxes[i_397];
const vector(16) unsigned char
Creating dr for cb_19(D)->state[_285]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_19(D)
	offset from base address: (ssizetype) _283
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_19(D)->state[_285]
encoder/cabac.c:483:9: note: got vectype for stmt: _286 = cb_19(D)->state[_285];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _286 = cb_19(D)->state[_285];

encoder/cabac.c:483:9: note: bad data references.
encoder/cabac.c:497:20: note: vectorized 0 loops in function.
x264_cabac_mb_mvd (struct x264_t * h, struct x264_cabac_t * cb, int i_list, int idx, int width, int height)
{
  _Bool cb__f8_bits_encoded_lsm.903;
  int cb__f8_bits_encoded_lsm.902;
  _Bool cb__f8_bits_encoded_lsm.901;
  int cb__f8_bits_encoded_lsm.900;
  _Bool cb__f8_bits_encoded_lsm.899;
  int cb__f8_bits_encoded_lsm.898;
  _Bool cb__f8_bits_encoded_lsm.897;
  int cb__f8_bits_encoded_lsm.896;
  _Bool cb__f8_bits_encoded_lsm.895;
  int cb__f8_bits_encoded_lsm.894;
  _Bool cb__f8_bits_encoded_lsm.893;
  int cb__f8_bits_encoded_lsm.892;
  int D.21913;
  int D.21911;
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int _7;
  short int _8;
  int _9;
  short int _10;
  int _11;
  short int _14;
  int _15;
  short int _16;
  int _17;
  unsigned int _20;
  int _22;
  unsigned char _23;
  int _24;
  unsigned char _25;
  int _26;
  int _28;
  int _30;
  int _31;
  int16_t[2] * _32;
  int _34;
  long unsigned int _37;
  long unsigned int _38;
  uint32_t * _39;
  long unsigned int _42;
  long unsigned int _43;
  int _48;
  long unsigned int _49;
  long unsigned int _50;
  uint64_t * _51;
  int _57;
  int _58;
  unsigned int _59;
  short int _69;
  int _70;
  int _71;
  short int _73;
  int _74;
  int _75;
  _Bool _78;
  int _79;
  _Bool _80;
  int _81;
  int _84;
  long int _85;
  unsigned char _86;
  unsigned char _88;
  short unsigned int _90;
  int _91;
  int _92;
  int _93;
  long int _94;
  unsigned char _95;
  unsigned char _97;
  short unsigned int _99;
  int _100;
  int _101;
  unsigned char _103;
  int _104;
  int _105;
  long int _106;
  unsigned char _107;
  unsigned char _109;
  short unsigned int _111;
  int _112;
  int _113;
  int _116;
  unsigned char _118;
  int _119;
  short unsigned int _120;
  int _121;
  int _122;
  unsigned char _123;
  unsigned char _125;
  int _126;
  int _127;
  long int _128;
  unsigned char _129;
  unsigned char _131;
  short unsigned int _133;
  int _134;
  int _135;
  unsigned char _137;
  int _138;
  int _139;
  long int _140;
  unsigned char _141;
  unsigned char _143;
  short unsigned int _145;
  int _146;
  int _147;
  int _148;
  int _149;
  long int _150;
  unsigned char _151;
  unsigned char _153;
  short unsigned int _155;
  int _156;
  int _157;
  unsigned char _159;
  int _160;
  int _161;
  long int _162;
  unsigned char _163;
  unsigned char _165;
  short unsigned int _167;
  int _168;
  int _169;
  unsigned char _173;
  int _174;
  short unsigned int _175;
  int _176;
  int _177;
  unsigned char _178;
  int _179;
  unsigned int _180;
  unsigned int _181;
  unsigned char _182;
  int _183;
  int _185;
  int _186;
  int _187;
  int _188;
  int _191;
  short int _192;
  int _193;
  int _194;
  int _195;
  short int _196;
  int _197;
  int _198;
  _Bool _201;
  int _202;
  _Bool _203;
  int _204;
  int _207;
  long int _208;
  unsigned char _209;
  unsigned char _211;
  int _212;
  short unsigned int _213;
  int _214;
  int _215;
  int _216;
  long int _217;
  unsigned char _218;
  unsigned char _220;
  int _221;
  short unsigned int _222;
  int _223;
  int _224;
  unsigned char _226;
  int _227;
  int _228;
  long int _229;
  unsigned char _230;
  unsigned char _232;
  short unsigned int _234;
  int _235;
  int _236;
  int _239;
  unsigned char _241;
  int _242;
  short unsigned int _243;
  int _244;
  int _245;
  unsigned char _246;
  unsigned char _248;
  int _249;
  int _250;
  long int _251;
  unsigned char _252;
  unsigned char _254;
  short unsigned int _256;
  int _257;
  int _258;
  unsigned char _260;
  int _261;
  int _262;
  long int _263;
  unsigned char _264;
  unsigned char _266;
  short unsigned int _268;
  int _269;
  int _270;
  int _271;
  int _272;
  long int _273;
  unsigned char _274;
  unsigned char _276;
  int _277;
  short unsigned int _278;
  int _279;
  int _280;
  unsigned char _282;
  int _283;
  int _284;
  long int _285;
  unsigned char _286;
  unsigned char _288;
  short unsigned int _290;
  int _291;
  int _292;
  unsigned char _296;
  int _297;
  short unsigned int _298;
  int _299;
  int _300;
  unsigned char _301;
  int _302;
  unsigned int _303;
  unsigned int _304;
  unsigned char _305;
  int _306;
  int _308;
  int _309;
  int _310;
  int _311;
  unsigned int _314;
  unsigned char _315;
  int _316;
  int _317;
  unsigned int _319;
  unsigned int _320;
  unsigned char _321;
  int _322;
  int _323;
  unsigned int ivtmp_467;
  unsigned int ivtmp_477;
  unsigned int ivtmp_482;
  unsigned int ivtmp_487;
  unsigned int ivtmp_492;
  int _493;
  int _494;
  int _495;
  int _496;
  int _497;
  int _498;
  unsigned int ivtmp_501;
  unsigned int ivtmp_504;
  int prephitmp_516;
  int pretmp_518;
  int pretmp_519;
  int prephitmp_530;
  int prephitmp_537;
  int prephitmp_539;
  int prephitmp_545;
  unsigned int ivtmp_547;
  int prephitmp_552;
  int prephitmp_559;
  int prephitmp_561;
  int prephitmp_567;

  <bb 2>:
  x264_mb_predict_mv (h_2(D), i_list_3(D), idx_4(D), width_5(D), &mvp);
  _7 = x264_scan8[idx_4(D)];
  _8 = h_2(D)->mb.cache.mv[i_list_3(D)][_7][0];
  _9 = (int) _8;
  _10 = mvp[0];
  _11 = (int) _10;
  mdx_12 = _9 - _11;
  # DEBUG mdx => mdx_12
  _14 = h_2(D)->mb.cache.mv[i_list_3(D)][_7][1];
  _15 = (int) _14;
  _16 = mvp[1];
  _17 = (int) _16;
  mdy_18 = _15 - _17;
  # DEBUG mdy => mdy_18
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_19(D)
  # DEBUG i_list => i_list_3(D)
  # DEBUG idx => idx_4(D)
  # DEBUG l => 0
  # DEBUG mvd => mdx_12
  _191 = _7 + -1;
  _192 = h_2(D)->mb.cache.mvd[i_list_3(D)][_191][0];
  _193 = (int) _192;
  _194 = ABS_EXPR <_193>;
  _195 = _7 + -8;
  _196 = h_2(D)->mb.cache.mvd[i_list_3(D)][_195][0];
  _197 = (int) _196;
  _198 = ABS_EXPR <_197>;
  amvd_199 = _194 + _198;
  # DEBUG amvd => amvd_199
  i_abs_200 = ABS_EXPR <mdx_12>;
  # DEBUG i_abs => i_abs_200
  # DEBUG ctxbase => 40
  _201 = amvd_199 > 2;
  _202 = (int) _201;
  _203 = amvd_199 > 32;
  _204 = (int) _203;
  ctx_205 = _202 + _204;
  # DEBUG ctx => ctx_205
  if (i_abs_200 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _207 = ctx_205 + 40;
  _208 = (long int) _207;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _208
  # DEBUG b => 0
  _209 = cb_19(D)->state[_208];
  i_state_210 = (int) _209;
  # DEBUG i_state => i_state_210
  _211 = x264_cabac_transition[i_state_210][0];
  cb_19(D)->state[_208] = _211;
  _212 = cb_19(D)->f8_bits_encoded;
  _213 = x264_cabac_entropy[i_state_210][0];
  _214 = (int) _213;
  _215 = _212 + _214;
  cb_19(D)->f8_bits_encoded = _215;
  goto <bb 23>;

  <bb 4>:
  if (i_abs_200 <= 8)
    goto <bb 5>;
  else
    goto <bb 16>;

  <bb 5>:
  _216 = ctx_205 + 40;
  _217 = (long int) _216;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _217
  # DEBUG b => 1
  _218 = cb_19(D)->state[_217];
  i_state_219 = (int) _218;
  # DEBUG i_state => i_state_219
  _220 = x264_cabac_transition[i_state_219][1];
  cb_19(D)->state[_217] = _220;
  _221 = cb_19(D)->f8_bits_encoded;
  _222 = x264_cabac_entropy[i_state_219][1];
  _223 = (int) _222;
  _224 = _221 + _223;
  cb_19(D)->f8_bits_encoded = _224;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_200 > 4)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  goto <bb 9>;

  <bb 7>:
  # DEBUG i => 1
  if (i_abs_200 > 1)
    goto <bb 8>;
  else
    goto <bb 15>;

  <bb 8>:
  goto <bb 12>;

  <bb 9>:
  # i_375 = PHI <1(6), i_237(10)>
  # prephitmp_559 = PHI <_224(6), _236(10)>
  # ivtmp_492 = PHI <3(6), ivtmp_477(10)>
  # DEBUG i => i_375
  _226 = ctxes[i_375];
  _227 = (int) _226;
  _228 = _227 + 40;
  _229 = (long int) _228;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _229
  # DEBUG b => 1
  _230 = cb_19(D)->state[_229];
  i_state_231 = (int) _230;
  # DEBUG i_state => i_state_231
  _232 = x264_cabac_transition[i_state_231][1];
  cb_19(D)->state[_229] = _232;
  _234 = x264_cabac_entropy[i_state_231][1];
  _235 = (int) _234;
  _236 = _235 + prephitmp_559;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_237 = i_375 + 1;
  # DEBUG i => i_237
  # DEBUG i => i_237
  ivtmp_477 = ivtmp_492 - 1;
  if (ivtmp_477 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  goto <bb 9>;

  <bb 11>:
  # _495 = PHI <_236(9)>
  # cb__f8_bits_encoded_lsm.898_451 = PHI <_236(9)>
  cb_19(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.898_451;
  _239 = i_abs_200 + -3;
  _241 = cb_19(D)->state[46];
  _242 = (int) _241;
  _243 = cabac_size_unary[_239][_242];
  _244 = (int) _243;
  _245 = _495 + _244;
  cb_19(D)->f8_bits_encoded = _245;
  _246 = cabac_transition_unary[_239][_242];
  cb_19(D)->state[46] = _246;
  goto <bb 23>;

  <bb 12>:
  # i_55 = PHI <1(8), i_259(14)>
  # prephitmp_567 = PHI <_224(8), _258(14)>
  # DEBUG i => i_55
  _248 = ctxes[i_55];
  _249 = (int) _248;
  _250 = _249 + 40;
  _251 = (long int) _250;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _251
  # DEBUG b => 1
  _252 = cb_19(D)->state[_251];
  i_state_253 = (int) _252;
  # DEBUG i_state => i_state_253
  _254 = x264_cabac_transition[i_state_253][1];
  cb_19(D)->state[_251] = _254;
  _256 = x264_cabac_entropy[i_state_253][1];
  _257 = (int) _256;
  _258 = _257 + prephitmp_567;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_259 = i_55 + 1;
  # DEBUG i => i_259
  # DEBUG i => i_259
  if (i_abs_200 > i_259)
    goto <bb 14>;
  else
    goto <bb 13>;

  <bb 13>:
  # _494 = PHI <_258(12)>
  # cb__f8_bits_encoded_lsm.900_453 = PHI <_258(12)>
  cb_19(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.900_453;
  goto <bb 15>;

  <bb 14>:
  goto <bb 12>;

  <bb 15>:
  # prephitmp_561 = PHI <_494(13), _224(7)>
  _260 = ctxes[i_abs_200];
  _261 = (int) _260;
  _262 = _261 + 40;
  _263 = (long int) _262;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _263
  # DEBUG b => 0
  _264 = cb_19(D)->state[_263];
  i_state_265 = (int) _264;
  # DEBUG i_state => i_state_265
  _266 = x264_cabac_transition[i_state_265][0];
  cb_19(D)->state[_263] = _266;
  _268 = x264_cabac_entropy[i_state_265][0];
  _269 = (int) _268;
  _270 = _269 + prephitmp_561;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _271 = _270 + 256;
  cb_19(D)->f8_bits_encoded = _271;
  goto <bb 23>;

  <bb 16>:
  _272 = ctx_205 + 40;
  _273 = (long int) _272;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _273
  # DEBUG b => 1
  _274 = cb_19(D)->state[_273];
  i_state_275 = (int) _274;
  # DEBUG i_state => i_state_275
  _276 = x264_cabac_transition[i_state_275][1];
  cb_19(D)->state[_273] = _276;
  _277 = cb_19(D)->f8_bits_encoded;
  _278 = x264_cabac_entropy[i_state_275][1];
  _279 = (int) _278;
  _280 = _277 + _279;
  cb_19(D)->f8_bits_encoded = _280;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 17>:
  # i_397 = PHI <i_293(18), 1(16)>
  # prephitmp_552 = PHI <_292(18), _280(16)>
  # ivtmp_547 = PHI <ivtmp_487(18), 3(16)>
  # DEBUG i => i_397
  _282 = ctxes[i_397];
  _283 = (int) _282;
  _284 = _283 + 40;
  _285 = (long int) _284;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _285
  # DEBUG b => 1
  _286 = cb_19(D)->state[_285];
  i_state_287 = (int) _286;
  # DEBUG i_state => i_state_287
  _288 = x264_cabac_transition[i_state_287][1];
  cb_19(D)->state[_285] = _288;
  _290 = x264_cabac_entropy[i_state_287][1];
  _291 = (int) _290;
  _292 = _291 + prephitmp_552;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_293 = i_397 + 1;
  # DEBUG i => i_293
  # DEBUG i => i_293
  ivtmp_487 = ivtmp_547 - 1;
  if (ivtmp_487 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  goto <bb 17>;

  <bb 19>:
  # _493 = PHI <_292(17)>
  # cb__f8_bits_encoded_lsm.902_455 = PHI <_292(17)>
  cb_19(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.902_455;
  _296 = cb_19(D)->state[46];
  _297 = (int) _296;
  _298 = cabac_size_5ones[_297];
  _299 = (int) _298;
  _300 = _493 + _299;
  _301 = cabac_transition_5ones[_297];
  cb_19(D)->state[46] = _301;
  _302 = i_abs_200 + -2;
  _303 = (unsigned int) _302;
  # DEBUG val => _303
  if (_302 <= 254)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  _304 = _303 + 1;
  _305 = x264_ue_size_tab[_304];
  _306 = (int) _305;
  goto <bb 22>;

  <bb 21>:
  # DEBUG val => _303
  _20 = _303 + 1;
  _314 = _20 >> 8;
  _315 = x264_ue_size_tab[_314];
  _316 = (int) _315;
  _317 = _316 + 16;
  # DEBUG val => NULL

  <bb 22>:
  # _308 = PHI <_306(20), _317(21)>
  # DEBUG val => NULL
  _309 = _308 + -3;
  _310 = _309 << 8;
  _311 = _300 + _310;
  cb_19(D)->f8_bits_encoded = _311;

  <bb 23>:
  # prephitmp_516 = PHI <_245(11), _215(3), _311(22), _271(15)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_19(D)
  # DEBUG i_list => i_list_3(D)
  # DEBUG idx => idx_4(D)
  # DEBUG l => 1
  # DEBUG mvd => mdy_18
  _69 = h_2(D)->mb.cache.mvd[i_list_3(D)][_191][1];
  _70 = (int) _69;
  _71 = ABS_EXPR <_70>;
  _73 = h_2(D)->mb.cache.mvd[i_list_3(D)][_195][1];
  _74 = (int) _73;
  _75 = ABS_EXPR <_74>;
  amvd_76 = _71 + _75;
  # DEBUG amvd => amvd_76
  i_abs_77 = ABS_EXPR <mdy_18>;
  # DEBUG i_abs => i_abs_77
  # DEBUG ctxbase => 47
  _78 = amvd_76 > 2;
  _79 = (int) _78;
  _80 = amvd_76 > 32;
  _81 = (int) _80;
  ctx_82 = _79 + _81;
  # DEBUG ctx => ctx_82
  if (i_abs_77 == 0)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  _84 = ctx_82 + 47;
  _85 = (long int) _84;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _85
  # DEBUG b => 0
  _86 = cb_19(D)->state[_85];
  i_state_87 = (int) _86;
  # DEBUG i_state => i_state_87
  _88 = x264_cabac_transition[i_state_87][0];
  cb_19(D)->state[_85] = _88;
  _90 = x264_cabac_entropy[i_state_87][0];
  _91 = (int) _90;
  _92 = _91 + prephitmp_516;
  cb_19(D)->f8_bits_encoded = _92;
  goto <bb 44>;

  <bb 25>:
  if (i_abs_77 <= 8)
    goto <bb 26>;
  else
    goto <bb 37>;

  <bb 26>:
  _93 = ctx_82 + 47;
  _94 = (long int) _93;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _94
  # DEBUG b => 1
  _95 = cb_19(D)->state[_94];
  i_state_96 = (int) _95;
  # DEBUG i_state => i_state_96
  _97 = x264_cabac_transition[i_state_96][1];
  cb_19(D)->state[_94] = _97;
  _99 = x264_cabac_entropy[i_state_96][1];
  _100 = (int) _99;
  _101 = _100 + prephitmp_516;
  cb_19(D)->f8_bits_encoded = _101;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_77 > 4)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  goto <bb 30>;

  <bb 28>:
  # DEBUG i => 1
  if (i_abs_77 > 1)
    goto <bb 29>;
  else
    goto <bb 36>;

  <bb 29>:
  goto <bb 33>;

  <bb 30>:
  # i_376 = PHI <1(27), i_114(31)>
  # prephitmp_537 = PHI <_101(27), _113(31)>
  # ivtmp_501 = PHI <3(27), ivtmp_504(31)>
  # DEBUG i => i_376
  _103 = ctxes[i_376];
  _104 = (int) _103;
  _105 = _104 + 47;
  _106 = (long int) _105;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _106
  # DEBUG b => 1
  _107 = cb_19(D)->state[_106];
  i_state_108 = (int) _107;
  # DEBUG i_state => i_state_108
  _109 = x264_cabac_transition[i_state_108][1];
  cb_19(D)->state[_106] = _109;
  _111 = x264_cabac_entropy[i_state_108][1];
  _112 = (int) _111;
  _113 = _112 + prephitmp_537;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_114 = i_376 + 1;
  # DEBUG i => i_114
  # DEBUG i => i_114
  ivtmp_504 = ivtmp_501 - 1;
  if (ivtmp_504 != 0)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  goto <bb 30>;

  <bb 32>:
  # _498 = PHI <_113(30)>
  # cb__f8_bits_encoded_lsm.892_457 = PHI <_113(30)>
  cb_19(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.892_457;
  _116 = i_abs_77 + -3;
  _118 = cb_19(D)->state[53];
  _119 = (int) _118;
  _120 = cabac_size_unary[_116][_119];
  _121 = (int) _120;
  _122 = _498 + _121;
  cb_19(D)->f8_bits_encoded = _122;
  _123 = cabac_transition_unary[_116][_119];
  cb_19(D)->state[53] = _123;
  goto <bb 44>;

  <bb 33>:
  # i_325 = PHI <1(29), i_136(35)>
  # prephitmp_545 = PHI <_101(29), _135(35)>
  # DEBUG i => i_325
  _125 = ctxes[i_325];
  _126 = (int) _125;
  _127 = _126 + 47;
  _128 = (long int) _127;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _128
  # DEBUG b => 1
  _129 = cb_19(D)->state[_128];
  i_state_130 = (int) _129;
  # DEBUG i_state => i_state_130
  _131 = x264_cabac_transition[i_state_130][1];
  cb_19(D)->state[_128] = _131;
  _133 = x264_cabac_entropy[i_state_130][1];
  _134 = (int) _133;
  _135 = _134 + prephitmp_545;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_136 = i_325 + 1;
  # DEBUG i => i_136
  # DEBUG i => i_136
  if (i_abs_77 > i_136)
    goto <bb 35>;
  else
    goto <bb 34>;

  <bb 34>:
  # _497 = PHI <_135(33)>
  # cb__f8_bits_encoded_lsm.894_459 = PHI <_135(33)>
  cb_19(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.894_459;
  goto <bb 36>;

  <bb 35>:
  goto <bb 33>;

  <bb 36>:
  # prephitmp_539 = PHI <_497(34), _101(28)>
  _137 = ctxes[i_abs_77];
  _138 = (int) _137;
  _139 = _138 + 47;
  _140 = (long int) _139;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _140
  # DEBUG b => 0
  _141 = cb_19(D)->state[_140];
  i_state_142 = (int) _141;
  # DEBUG i_state => i_state_142
  _143 = x264_cabac_transition[i_state_142][0];
  cb_19(D)->state[_140] = _143;
  _145 = x264_cabac_entropy[i_state_142][0];
  _146 = (int) _145;
  _147 = _146 + prephitmp_539;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _148 = _147 + 256;
  cb_19(D)->f8_bits_encoded = _148;
  goto <bb 44>;

  <bb 37>:
  _149 = ctx_82 + 47;
  _150 = (long int) _149;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _150
  # DEBUG b => 1
  _151 = cb_19(D)->state[_150];
  i_state_152 = (int) _151;
  # DEBUG i_state => i_state_152
  _153 = x264_cabac_transition[i_state_152][1];
  cb_19(D)->state[_150] = _153;
  _155 = x264_cabac_entropy[i_state_152][1];
  _156 = (int) _155;
  _157 = _156 + prephitmp_516;
  cb_19(D)->f8_bits_encoded = _157;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 38>:
  # i_390 = PHI <i_170(39), 1(37)>
  # prephitmp_530 = PHI <_169(39), _157(37)>
  # ivtmp_482 = PHI <ivtmp_467(39), 3(37)>
  # DEBUG i => i_390
  _159 = ctxes[i_390];
  _160 = (int) _159;
  _161 = _160 + 47;
  _162 = (long int) _161;
  # DEBUG cb => cb_19(D)
  # DEBUG i_ctx => _162
  # DEBUG b => 1
  _163 = cb_19(D)->state[_162];
  i_state_164 = (int) _163;
  # DEBUG i_state => i_state_164
  _165 = x264_cabac_transition[i_state_164][1];
  cb_19(D)->state[_162] = _165;
  _167 = x264_cabac_entropy[i_state_164][1];
  _168 = (int) _167;
  _169 = _168 + prephitmp_530;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_170 = i_390 + 1;
  # DEBUG i => i_170
  # DEBUG i => i_170
  ivtmp_467 = ivtmp_482 - 1;
  if (ivtmp_467 != 0)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 39>:
  goto <bb 38>;

  <bb 40>:
  # _496 = PHI <_169(38)>
  # cb__f8_bits_encoded_lsm.896_461 = PHI <_169(38)>
  cb_19(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.896_461;
  _173 = cb_19(D)->state[53];
  _174 = (int) _173;
  _175 = cabac_size_5ones[_174];
  _176 = (int) _175;
  _177 = _496 + _176;
  _178 = cabac_transition_5ones[_174];
  cb_19(D)->state[53] = _178;
  _179 = i_abs_77 + -2;
  _180 = (unsigned int) _179;
  # DEBUG val => _180
  if (_179 <= 254)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  _181 = _180 + 1;
  _182 = x264_ue_size_tab[_181];
  _183 = (int) _182;
  goto <bb 43>;

  <bb 42>:
  # DEBUG val => _180
  _319 = _180 + 1;
  _320 = _319 >> 8;
  _321 = x264_ue_size_tab[_320];
  _322 = (int) _321;
  _323 = _322 + 16;
  # DEBUG val => NULL

  <bb 43>:
  # _185 = PHI <_183(41), _323(42)>
  # DEBUG val => NULL
  _186 = _185 + -3;
  _187 = _186 << 8;
  _188 = _177 + _187;
  cb_19(D)->f8_bits_encoded = _188;

  <bb 44>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_12
  # DEBUG b => mdy_18
  _28 = mdx_12 & 65535;
  _57 = mdy_18 << 16;
  _58 = _28 + _57;
  _59 = (unsigned int) _58;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _23 = block_idx_y[idx_4(D)];
  _24 = (int) _23;
  _25 = block_idx_x[idx_4(D)];
  _26 = (int) _25;
  # DEBUG h => h_2(D)
  # DEBUG x => _26
  # DEBUG y => _24
  # DEBUG width => width_5(D)
  # DEBUG height => height_27(D)
  # DEBUG i_list => i_list_3(D)
  # DEBUG mv => NULL
  _22 = _26 + 12;
  _30 = _24 * 8;
  _31 = _22 + _30;
  _32 = &h_2(D)->mb.cache.mvd[i_list_3(D)][_31];
  # DEBUG dst => _32
  # DEBUG width => width_5(D)
  # DEBUG height => height_27(D)
  # DEBUG val => NULL
  if (width_5(D) == 1)
    goto <bb 45>;
  else
    goto <bb 49>;

  <bb 45>:
  # DEBUG dy => 0
  if (height_27(D) > 0)
    goto <bb 46>;
  else
    goto <bb 60>;

  <bb 46>:

  <bb 47>:
  # dy_117 = PHI <0(46), dy_41(48)>
  # DEBUG dy => dy_117
  # DEBUG dx => 0
  _34 = dy_117 * 8;
  _37 = (long unsigned int) _34;
  _38 = _37 * 4;
  _39 = _32 + _38;
  *_39 = _59;
  # DEBUG dx => 1
  # DEBUG dx => 1
  dy_41 = dy_117 + 1;
  # DEBUG dy => dy_41
  # DEBUG dy => dy_41
  if (height_27(D) > dy_41)
    goto <bb 48>;
  else
    goto <bb 59>;

  <bb 48>:
  goto <bb 47>;

  <bb 49>:
  _42 = (long unsigned int) _59;
  _43 = _42 << 32;
  val64_44 = _42 + _43;
  # DEBUG val64 => val64_44
  # DEBUG dy => 0
  # DEBUG dy => 0
  if (height_27(D) > 0)
    goto <bb 50>;
  else
    goto <bb 60>;

  <bb 50>:
  pretmp_518 = width_5(D) / 2;
  goto <bb 57>;

  <bb 51>:

  <bb 52>:
  # dx_172 = PHI <0(58), dx_52(51)>
  # DEBUG dx => dx_172
  _48 = dx_172 + pretmp_519;
  _49 = (long unsigned int) _48;
  _50 = _49 * 8;
  _51 = _32 + _50;
  *_51 = val64_44;
  dx_52 = dx_172 + 1;
  # DEBUG dx => dx_52
  # DEBUG dx => dx_52
  if (dx_52 < pretmp_518)
    goto <bb 51>;
  else
    goto <bb 53>;

  <bb 53>:

  <bb 54>:
  dy_54 = dy_60 + 1;
  # DEBUG dy => dy_54
  # DEBUG dy => dy_54
  if (height_27(D) > dy_54)
    goto <bb 56>;
  else
    goto <bb 55>;

  <bb 55>:
  goto <bb 60>;

  <bb 56>:

  <bb 57>:
  # dy_60 = PHI <0(50), dy_54(56)>
  # DEBUG dy => dy_60
  # DEBUG dx => 0
  if (pretmp_518 > 0)
    goto <bb 58>;
  else
    goto <bb 54>;

  <bb 58>:
  pretmp_519 = dy_60 * 4;
  goto <bb 52>;

  <bb 59>:

  <bb 60>:
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  return;

}



;; Function x264_mb_analyse_inter_b8x8 (x264_mb_analyse_inter_b8x8, funcdef_no=217, decl_uid=9302, cgraph_uid=217, symbol_order=286)


Analyzing loop at encoder/analyse.c:1703
encoder/analyse.c:1703:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1703:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1703:5: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:1703:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1703:5: note: not vectorized: control flow in loop.
encoder/analyse.c:1703:5: note: bad inner-loop form.
encoder/analyse.c:1703:5: note: not vectorized: Bad inner loop.
encoder/analyse.c:1703:5: note: bad loop form.

Analyzing loop at encoder/analyse.c:1712
encoder/analyse.c:1712:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:1712:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:1712:9: note: not vectorized: control flow in loop.
encoder/analyse.c:1712:9: note: bad loop form.
encoder/analyse.c:1690:13: note: vectorized 0 loops in function.
x264_mb_analyse_inter_b8x8 (struct x264_t * h, struct x264_mb_analysis_t * a)
{
  int x;
  int y;
  int dy;
  int dx;
  uint64_t val64;
  int dy;
  int dy;
  int dx;
  int dy;
  int dy;
  int dx;
  uint64_t val64;
  int dy;
  int dy;
  int dx;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  struct x264_me_t * m;
  struct x264_mb_analysis_list_t * lX;
  uint8_t * src[2];
  int stride[2];
  int i_part_cost_bi;
  int i_part_cost;
  const int y8;
  const int x8;
  int l;
  int i;
  uint8_t pix[2][64];
  uint8_t * * p_fref[2];
  int _15;
  uint8_t *[6] * _17;
  int _19;
  uint8_t *[6] * _20;
  int16_t * _33;
  int _35;
  int _37;
  uint8_t * _39;
  uint8_t * _44;
  uint8_t * _46;
  uint8_t * _54;
  uint8_t * _56;
  uint8_t * _57;
  uint8_t * * _59;
  uint8_t * _60;
  int _61;
  int _62;
  int _63;
  sizetype _64;
  uint8_t * _65;
  uint8_t * _67;
  int _68;
  int _69;
  int _70;
  sizetype _71;
  uint8_t * _72;
  uint8_t * _74;
  int _75;
  int _76;
  int _77;
  sizetype _78;
  uint8_t * _79;
  uint8_t * _81;
  int _82;
  int _83;
  int _84;
  sizetype _85;
  uint8_t * _86;
  uint8_t * _88;
  int _89;
  int _90;
  int _91;
  sizetype _92;
  uint8_t * _93;
  uint8_t * _95;
  int _96;
  int _97;
  int _98;
  sizetype _99;
  uint8_t * _100;
  int _102;
  uint16_t * _103;
  int _104;
  int _105;
  int _106;
  long unsigned int _107;
  long unsigned int _108;
  uint16_t * _109;
  int16_t[2] * _111;
  int16_t[2] * _114;
  int16_t[2] * _115;
  unsigned int _116;
  uint8_t * (*<T1451>) (uint8_t *, int *, uint8_t * *, int, int, int, int, int) _119;
  short int _120;
  int _121;
  short int _122;
  int _123;
  int _124;
  uint8_t *[6] * _125;
  int * _126;
  uint8_t[64] * _127;
  uint8_t * _129;
  int _131;
  void (*<T1459>) (uint8_t *, int, uint8_t *, int, uint8_t *, int, int) _134;
  int _135;
  int _136;
  short int _137;
  int _138;
  int _139;
  uint8_t * _140;
  int _141;
  uint8_t * _142;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _144;
  uint8_t * _145;
  int _147;
  int _148;
  int _149;
  int _150;
  int _152;
  int _153;
  int _156;
  int _164;
  int _165;
  int _171;
  int _172;
  int _173;
  int _174;
  int16_t[2] * _181;
  sizetype pretmp_182;
  long unsigned int _184;
  long unsigned int _185;
  int pretmp_193;
  unsigned int ivtmp_198;
  int prephitmp_208;
  int pretmp_209;
  int pretmp_215;
  int pretmp_226;
  int pretmp_228;
  short unsigned int _229;
  unsigned char _233;
  int _234;
  int8_t * _238;
  int _239;
  int _240;
  int16_t[2] * _248;
  unsigned int _249;
  int16_t[2] * _250;
  long unsigned int _251;
  long unsigned int _252;
  int8_t * _266;
  int16_t[2] * _273;
  int pretmp_277;
  int _293;
  unsigned char _294;
  int _295;
  int8_t * _299;
  int _300;
  int _301;
  int16_t[2] * _309;
  unsigned int _310;
  int16_t[2] * _311;
  long unsigned int _312;
  long unsigned int _313;
  int pretmp_318;
  int8_t * _327;
  int16_t[2] * _334;
  int pretmp_343;
  int pretmp_355;
  int pretmp_360;
  unsigned int ivtmp_361;
  int pretmp_364;
  int pretmp_365;
  sizetype pretmp_366;
  unsigned int ivtmp_367;
  int pretmp_369;
  short unsigned int _402;
  int pretmp_405;
  int pretmp_407;
  unsigned int ivtmp_411;
  int pretmp_440;

  <bb 2>:
  _15 = a_14(D)->l0.i_ref;
  _17 = &h_16(D)->mb.pic.p_fref[0][_15];
  p_fref[0] = _17;
  _19 = a_14(D)->l1.i_ref;
  _20 = &h_16(D)->mb.pic.p_fref[1][_19];
  p_fref[1] = _20;
  h_16(D)->mb.i_partition = 13;
  a_14(D)->i_cost8x8bi = 0;
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 3>:
  # i_272 = PHI <i_170(26), 0(2)>
  # ivtmp_411 = PHI <ivtmp_361(26), 4(2)>
  # DEBUG i => i_272
  x8_24 = i_272 & 1;
  # DEBUG x8 => x8_24
  y8_25 = i_272 >> 1;
  # DEBUG y8 => y8_25
  # DEBUG i_part_cost_bi => 0
  stride[0] = 8;
  stride[1] = 8;
  # DEBUG l => 0
  # DEBUG i_part_cost_bi => 0
  # DEBUG l => 0
  pretmp_193 = y8_25 * 16;
  pretmp_228 = x8_24 + pretmp_193;
  pretmp_318 = pretmp_228 * 8;
  pretmp_182 = (sizetype) pretmp_318;
  pretmp_405 = x8_24 * 8;
  pretmp_407 = pretmp_405 >> 1;
  pretmp_440 = y8_25 * 8;
  pretmp_360 = pretmp_440 >> 1;
  pretmp_364 = pretmp_360 * 16;
  pretmp_365 = pretmp_364 + pretmp_407;
  pretmp_366 = (sizetype) pretmp_365;
  pretmp_369 = i_272 * 4;
  pretmp_343 = y8_25 * 2;
  pretmp_277 = x8_24 * 2;
  pretmp_209 = pretmp_277 + 12;
  pretmp_226 = pretmp_343 * 8;
  pretmp_355 = pretmp_209 + pretmp_226;

  <bb 4>:
  # l_424 = PHI <l_133(8), 0(3)>
  # i_part_cost_bi_346 = PHI <i_part_cost_bi_132(8), 0(3)>
  # ivtmp_198 = PHI <ivtmp_367(8), 2(3)>
  # DEBUG i_part_cost_bi => i_part_cost_bi_346
  # DEBUG l => l_424
  if (l_424 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  lX_28 = &a_14(D)->l1;
  goto <bb 7>;

  <bb 6>:
  # DEBUG i_part_cost_bi => i_part_cost_bi_346
  # DEBUG l => l_424
  lX_29 = &a_14(D)->l0;

  <bb 7>:
  # lX_7 = PHI <lX_28(5), lX_29(6)>
  # DEBUG lX => lX_7
  m_31 = &lX_7->me8x8[i_272];
  # DEBUG m => m_31
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].i_pixel = 3;
  _33 = a_14(D)->p_cost_mv;
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].p_cost_mv = _33;
  _35 = h_16(D)->mb.pic.i_stride[0];
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].i_stride[0] = _35;
  _37 = h_16(D)->mb.pic.i_stride[1];
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].i_stride[1] = _37;
  _39 = h_16(D)->mb.pic.p_fenc[0];
  _44 = _39 + pretmp_182;
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].p_fenc[0] = _44;
  _46 = h_16(D)->mb.pic.p_fenc[1];
  _54 = _46 + pretmp_366;
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].p_fenc[1] = _54;
  _56 = h_16(D)->mb.pic.p_fenc[2];
  _57 = _56 + pretmp_366;
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].p_fenc[2] = _57;
  _59 = p_fref[l_424];
  _60 = *_59;
  _61 = MEM[(struct x264_me_t *)lX_7].me8x8[i_272].i_stride[0];
  _62 = _61 * pretmp_440;
  _63 = _62 + pretmp_405;
  _64 = (sizetype) _63;
  _65 = _60 + _64;
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].p_fref[0] = _65;
  _67 = MEM[(uint8_t * *)_59 + 8B];
  _68 = MEM[(struct x264_me_t *)lX_7].me8x8[i_272].i_stride[0];
  _69 = _68 * pretmp_440;
  _70 = _69 + pretmp_405;
  _71 = (sizetype) _70;
  _72 = _67 + _71;
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].p_fref[1] = _72;
  _74 = MEM[(uint8_t * *)_59 + 16B];
  _75 = MEM[(struct x264_me_t *)lX_7].me8x8[i_272].i_stride[0];
  _76 = _75 * pretmp_440;
  _77 = _76 + pretmp_405;
  _78 = (sizetype) _77;
  _79 = _74 + _78;
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].p_fref[2] = _79;
  _81 = MEM[(uint8_t * *)_59 + 24B];
  _82 = MEM[(struct x264_me_t *)lX_7].me8x8[i_272].i_stride[0];
  _83 = _82 * pretmp_440;
  _84 = _83 + pretmp_405;
  _85 = (sizetype) _84;
  _86 = _81 + _85;
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].p_fref[3] = _86;
  _88 = MEM[(uint8_t * *)_59 + 32B];
  _89 = MEM[(struct x264_me_t *)lX_7].me8x8[i_272].i_stride[1];
  _90 = _89 * pretmp_360;
  _91 = _90 + pretmp_407;
  _92 = (sizetype) _91;
  _93 = _88 + _92;
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].p_fref[4] = _93;
  _95 = MEM[(uint8_t * *)_59 + 40B];
  _96 = MEM[(struct x264_me_t *)lX_7].me8x8[i_272].i_stride[1];
  _97 = _96 * pretmp_360;
  _98 = _97 + pretmp_407;
  _99 = (sizetype) _98;
  _100 = _95 + _99;
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].p_fref[5] = _100;
  _102 = lX_7->i_ref;
  _103 = h_16(D)->mb.pic.p_integral[l_424][_102];
  _104 = MEM[(struct x264_me_t *)lX_7].me8x8[i_272].i_stride[0];
  _105 = _104 * pretmp_440;
  _106 = _105 + pretmp_405;
  _107 = (long unsigned int) _106;
  _108 = _107 * 2;
  _109 = _103 + _108;
  MEM[(struct x264_me_t *)lX_7].me8x8[i_272].integral = _109;
  _111 = &MEM[(struct x264_me_t *)lX_7].me8x8[i_272].mvp;
  x264_mb_predict_mv (h_16(D), l_424, pretmp_369, 2, _111);
  _114 = &lX_7->me16x16.mv;
  # DEBUG h => h_16(D)
  # DEBUG m => m_31
  # DEBUG mvc => _114
  # DEBUG i_mvc => 1
  x264_me_search_ref (h_16(D), m_31, _114, 1, 0B);
  # DEBUG h => NULL
  # DEBUG m => NULL
  # DEBUG mvc => NULL
  # DEBUG i_mvc => NULL
  _115 = &MEM[(struct x264_me_t *)lX_7].me8x8[i_272].mv;
  _116 = MEM[(uint32_t *)_115];
  # DEBUG D#476 => y8_25 * 2
  # DEBUG D#475 => x8_24 * 2
  # DEBUG h => h_16(D)
  # DEBUG x => D#475
  # DEBUG y => D#476
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => l_424
  # DEBUG mv => _116
  _181 = &h_16(D)->mb.cache.mv[l_424][pretmp_355];
  # DEBUG dst => _181
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => _116
  _184 = (long unsigned int) _116;
  _185 = _184 << 32;
  val64_186 = _184 + _185;
  # DEBUG val64 => val64_186
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_181] = val64_186;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_181 + 32B] = val64_186;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _119 = h_16(D)->mc.get_ref;
  _120 = MEM[(struct x264_me_t *)lX_7].me8x8[i_272].mv[1];
  _121 = (int) _120;
  _122 = MEM[(struct x264_me_t *)lX_7].me8x8[i_272].mv[0];
  _123 = (int) _122;
  _124 = MEM[(struct x264_me_t *)lX_7].me8x8[i_272].i_stride[0];
  _125 = &MEM[(struct x264_me_t *)lX_7].me8x8[i_272].p_fref;
  _126 = &stride[l_424];
  _127 = &pix[l_424];
  _129 = _119 (_127, _126, _125, _124, _123, _121, 8, 8);
  src[l_424] = _129;
  _131 = MEM[(struct x264_me_t *)lX_7].me8x8[i_272].cost_mv;
  i_part_cost_bi_132 = _131 + i_part_cost_bi_346;
  # DEBUG i_part_cost_bi => i_part_cost_bi_132
  l_133 = l_424 + 1;
  # DEBUG l => l_133
  # DEBUG i_part_cost_bi => i_part_cost_bi_132
  # DEBUG l => l_133
  ivtmp_367 = ivtmp_198 - 1;
  if (ivtmp_367 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  goto <bb 4>;

  <bb 9>:
  # i_part_cost_bi_406 = PHI <i_part_cost_bi_132(7)>
  _134 = h_16(D)->mc.avg[3];
  _135 = a_14(D)->l0.i_ref;
  _136 = a_14(D)->l1.i_ref;
  _137 = h_16(D)->mb.bipred_weight[_135][_136];
  _138 = (int) _137;
  _139 = stride[1];
  _140 = src[1];
  _141 = stride[0];
  _142 = src[0];
  _134 (&pix[0], 8, _142, _141, _140, _139, _138);
  _144 = h_16(D)->pixf.mbcmp[3];
  _145 = a_14(D)->l0.me8x8[i_272].p_fenc[0];
  _147 = _144 (_145, 16, &pix[0], 8);
  _148 = a_14(D)->i_lambda;
  _149 = _148 * 5;
  _150 = _147 + _149;
  i_part_cost_151 = i_part_cost_bi_406 + _150;
  # DEBUG i_part_cost_bi => i_part_cost_151
  _152 = a_14(D)->l0.me8x8[i_272].cost;
  _153 = _148 * 3;
  i_part_cost_154 = _152 + _153;
  a_14(D)->l0.me8x8[i_272].cost = i_part_cost_154;
  _156 = a_14(D)->l1.me8x8[i_272].cost;
  i_part_cost_157 = _153 + _156;
  a_14(D)->l1.me8x8[i_272].cost = i_part_cost_157;
  # DEBUG i_part_cost => i_part_cost_154
  if (i_part_cost_154 > i_part_cost_157)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  h_16(D)->mb.i_sub_partition[i_272] = 3;
  goto <bb 12>;

  <bb 11>:
  # DEBUG i_part_cost => i_part_cost_157
  h_16(D)->mb.i_sub_partition[i_272] = 7;

  <bb 12>:
  # i_part_cost_3 = PHI <i_part_cost_154(10), i_part_cost_157(11)>
  # DEBUG i_part_cost => i_part_cost_3
  if (i_part_cost_3 > i_part_cost_151)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  # DEBUG i_part_cost => i_part_cost_151
  h_16(D)->mb.i_sub_partition[i_272] = 11;

  <bb 14>:
  # i_part_cost_4 = PHI <i_part_cost_3(12), i_part_cost_151(13)>
  # DEBUG i_part_cost => i_part_cost_4
  i_part_cost_162 = a_14(D)->i_cost8x8direct[i_272];
  if (i_part_cost_4 > i_part_cost_162)
    goto <bb 16>;
  else
    goto <bb 15>;

  <bb 15>:
  pretmp_215 = h_16(D)->mb.i_sub_partition[i_272];
  goto <bb 17>;

  <bb 16>:
  # DEBUG i_part_cost => i_part_cost_162
  h_16(D)->mb.i_sub_partition[i_272] = 12;

  <bb 17>:
  # i_part_cost_5 = PHI <i_part_cost_4(15), i_part_cost_162(16)>
  # prephitmp_208 = PHI <pretmp_215(15), 12(16)>
  # DEBUG i_part_cost => i_part_cost_5
  _164 = a_14(D)->i_cost8x8bi;
  _165 = i_part_cost_5 + _164;
  a_14(D)->i_cost8x8bi = _165;
  # DEBUG h => h_16(D)
  # DEBUG a => a_14(D)
  # DEBUG i => i_272
  # DEBUG b_mvd => 0
  # DEBUG x => D#475
  # DEBUG y => D#476
  if (prephitmp_208 == 12)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  x264_mb_load_mv_direct8x8 (h_16(D), i_272);
  goto <bb 25>;

  <bb 19>:
  _233 = x264_mb_partition_listX_table[0][prephitmp_208];
  if (_233 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  _234 = a_14(D)->l0.i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => D#475
  # DEBUG y => D#476
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#85 => (uint8_t) _234
  # DEBUG ref => D#85
  _238 = &h_16(D)->mb.cache.ref[0][pretmp_355];
  # DEBUG dst => _238
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#85
  _239 = _234 & 255;
  _240 = _239 * 257;
  # DEBUG val2 => (uint32_t) _240
  # DEBUG dy => 0
  # DEBUG dy => 0
  _402 = (short unsigned int) _240;
  MEM[(uint16_t *)_238] = _402;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_238 + 8B] = _402;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _248 = &a_14(D)->l0.me8x8[i_272].mv;
  _249 = MEM[(uint32_t *)_248];
  # DEBUG h => h_16(D)
  # DEBUG x => D#475
  # DEBUG y => D#476
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _249
  _250 = &h_16(D)->mb.cache.mv[0][pretmp_355];
  # DEBUG dst => _250
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => _249
  _251 = (long unsigned int) _249;
  _252 = _251 << 32;
  val64_253 = _251 + _252;
  # DEBUG val64 => val64_253
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_250] = val64_253;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_250 + 32B] = val64_253;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 22>;

  <bb 21>:
  # DEBUG h => h_16(D)
  # DEBUG x => D#475
  # DEBUG y => D#476
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG ref => 255
  _266 = &h_16(D)->mb.cache.ref[0][pretmp_355];
  # DEBUG dst => _266
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 255
  # DEBUG val2 => (uint32_t) 65535
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint16_t *)_266] = 65535;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_266 + 8B] = 65535;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => D#475
  # DEBUG y => D#476
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => 0
  _273 = &h_16(D)->mb.cache.mv[0][pretmp_355];
  # DEBUG dst => _273
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_273] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_273 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2

  <bb 22>:
  _293 = h_16(D)->mb.i_sub_partition[i_272];
  _294 = x264_mb_partition_listX_table[1][_293];
  if (_294 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  _295 = a_14(D)->l1.i_ref;
  # DEBUG h => h_16(D)
  # DEBUG x => D#475
  # DEBUG y => D#476
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG D#84 => (uint8_t) _295
  # DEBUG ref => D#84
  _299 = &h_16(D)->mb.cache.ref[1][pretmp_355];
  # DEBUG dst => _299
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#84
  _300 = _295 & 255;
  _301 = _300 * 257;
  # DEBUG val2 => (uint32_t) _301
  # DEBUG dy => 0
  # DEBUG dy => 0
  _229 = (short unsigned int) _301;
  MEM[(uint16_t *)_299] = _229;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_299 + 8B] = _229;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _309 = &a_14(D)->l1.me8x8[i_272].mv;
  _310 = MEM[(uint32_t *)_309];
  # DEBUG h => h_16(D)
  # DEBUG x => D#475
  # DEBUG y => D#476
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG mv => _310
  _311 = &h_16(D)->mb.cache.mv[1][pretmp_355];
  # DEBUG dst => _311
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => _310
  _312 = (long unsigned int) _310;
  _313 = _312 << 32;
  val64_314 = _312 + _313;
  # DEBUG val64 => val64_314
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_311] = val64_314;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_311 + 32B] = val64_314;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 25>;

  <bb 24>:
  # DEBUG h => h_16(D)
  # DEBUG x => D#475
  # DEBUG y => D#476
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG ref => 255
  _327 = &h_16(D)->mb.cache.ref[1][pretmp_355];
  # DEBUG dst => _327
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 255
  # DEBUG val2 => (uint32_t) 65535
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint16_t *)_327] = 65535;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_327 + 8B] = 65535;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_16(D)
  # DEBUG x => D#475
  # DEBUG y => D#476
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG mv => 0
  _334 = &h_16(D)->mb.cache.mv[1][pretmp_355];
  # DEBUG dst => _334
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_334] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_334 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2

  <bb 25>:
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG i => NULL
  # DEBUG b_mvd => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  stride ={v} {CLOBBER};
  src ={v} {CLOBBER};
  i_170 = i_272 + 1;
  # DEBUG i => i_170
  # DEBUG i => i_170
  ivtmp_361 = ivtmp_411 - 1;
  if (ivtmp_361 != 0)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  goto <bb 3>;

  <bb 27>:
  _171 = a_14(D)->i_cost8x8bi;
  _172 = a_14(D)->i_lambda;
  _173 = _172 * 9;
  _174 = _171 + _173;
  a_14(D)->i_cost8x8bi = _174;
  p_fref ={v} {CLOBBER};
  pix ={v} {CLOBBER};
  return;

}



;; Function ssd_mb (ssd_mb, funcdef_no=179, decl_uid=8550, cgraph_uid=179, symbol_order=239)

encoder/rdo.c:132:19: note: vectorized 0 loops in function.
ssd_mb (struct x264_t * h)
{
  int max_x;
  int max_y;
  int x;
  int y;
  int max_x;
  int max_y;
  int x;
  int y;
  uint64_t acs;
  uint8_t * fenc;
  uint8_t * fdec;
  int satd;
  int D.22315;
  int _5;
  uint8_t * _6;
  int _7;
  uint8_t * _8;
  uint8_t * _9;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _10;
  int _11;
  uint8_t * _13;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _15;
  int _16;
  uint8_t * _17;
  uint8_t * _23;
  int _28;
  uint64_t (*<T13f5>) (uint8_t *, int) _29;
  int _31;
  int _40;
  int _49;
  int _50;
  long unsigned int _51;
  int _52;
  int _59;
  int _68;
  int _69;
  int _97;
  int _99;
  int _100;
  int _101;
  int _102;
  int _103;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _105;
  int _106;
  int _108;

  <bb 2>:
  # DEBUG h => h_2(D)
  # DEBUG size => 0
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG p => 0
  # DEBUG satd => 0
  _17 = h_2(D)->mb.pic.p_fdec[0];
  # DEBUG fdec => _17
  _23 = h_2(D)->mb.pic.p_fenc[0];
  # DEBUG fenc => _23
  _28 = h_2(D)->mb.i_psy_rd;
  if (_28 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _29 = h_2(D)->pixf.hadamard_ac[0];
  acs_30 = _29 (_17, 32);
  # DEBUG acs => acs_30
  _31 = (int) acs_30;
  # DEBUG h => h_2(D)
  # DEBUG pixel => 0
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG satd => 0
  # DEBUG min_x => 0
  # DEBUG min_y => 0
  # DEBUG max_x => 4
  # DEBUG max_y => 4
  _40 = h_2(D)->mb.pic.fenc_satd_sum;
  # DEBUG h => NULL
  # DEBUG pixel => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  _49 = _31 - _40;
  _50 = ABS_EXPR <_49>;
  _51 = acs_30 >> 32;
  _52 = (int) _51;
  # DEBUG h => h_2(D)
  # DEBUG pixel => 0
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG sa8d => 0
  # DEBUG min_x => 0
  # DEBUG min_y => 0
  # DEBUG max_x => 2
  # DEBUG max_y => 2
  _59 = h_2(D)->mb.pic.fenc_sa8d_sum;
  # DEBUG h => NULL
  # DEBUG pixel => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG sa8d => NULL
  _68 = _52 - _59;
  _69 = ABS_EXPR <_68>;
  satd_70 = _50 + _69;
  # DEBUG satd => satd_70
  satd_71 = satd_70 >> 1;
  # DEBUG satd => satd_71
  # DEBUG satd => satd_71
  _97 = h_2(D)->mb.i_psy_rd;
  _99 = satd_71 * _97;
  _100 = h_2(D)->mb.i_qp;
  _101 = x264_lambda_tab[_100];
  _102 = _99 * _101;
  _103 = _102 + 128;
  satd_104 = _103 >> 8;
  # DEBUG satd => satd_104

  <bb 4>:
  # satd_107 = PHI <satd_104(3), 0(2)>
  # DEBUG satd => satd_107
  _105 = h_2(D)->pixf.ssd[0];
  _106 = _105 (_23, 16, _17, 32);
  _108 = _106 + satd_107;
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG fdec => NULL
  # DEBUG fenc => NULL
  # DEBUG acs => NULL
  # DEBUG dc => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG sa8d => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG p => NULL
  # DEBUG h => h_2(D)
  # DEBUG size => 3
  # DEBUG p => 1
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG satd => 0
  _6 = h_2(D)->mb.pic.p_fdec[1];
  # DEBUG fdec => _6
  _13 = h_2(D)->mb.pic.p_fenc[1];
  # DEBUG fenc => _13
  # DEBUG satd => 0
  _15 = h_2(D)->pixf.ssd[3];
  _16 = _15 (_13, 16, _6, 32);
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG p => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG sa8d => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG dc => NULL
  # DEBUG acs => NULL
  # DEBUG fenc => NULL
  # DEBUG fdec => NULL
  # DEBUG satd => NULL
  _5 = _16 + _108;
  # DEBUG h => h_2(D)
  # DEBUG size => 3
  # DEBUG p => 2
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG satd => 0
  _8 = h_2(D)->mb.pic.p_fdec[2];
  # DEBUG fdec => _8
  _9 = h_2(D)->mb.pic.p_fenc[2];
  # DEBUG fenc => _9
  # DEBUG satd => 0
  _10 = h_2(D)->pixf.ssd[3];
  _11 = _10 (_9, 16, _8, 32);
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG p => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG sa8d => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG dc => NULL
  # DEBUG acs => NULL
  # DEBUG fenc => NULL
  # DEBUG fdec => NULL
  # DEBUG satd => NULL
  _7 = _5 + _11;
  return _7;

}



;; Function x264_mb_analyse_inter_b8x16 (x264_mb_analyse_inter_b8x16, funcdef_no=219, decl_uid=9345, cgraph_uid=219, symbol_order=288)


Analyzing loop at encoder/analyse.c:1837
encoder/analyse.c:1837:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1837:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1837:5: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:1837:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1837:5: note: not vectorized: control flow in loop.
encoder/analyse.c:1837:5: note: bad inner-loop form.
encoder/analyse.c:1837:5: note: not vectorized: Bad inner loop.
encoder/analyse.c:1837:5: note: bad loop form.

Analyzing loop at encoder/analyse.c:1844
encoder/analyse.c:1844:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:1844:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:1844:9: note: not vectorized: control flow in loop.
encoder/analyse.c:1844:9: note: bad loop form.
encoder/analyse.c:1825:13: note: vectorized 0 loops in function.
x264_mb_analyse_inter_b8x16 (struct x264_t * h, struct x264_mb_analysis_t * a)
{
  int dy;
  int dx;
  int dy;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  int dy;
  int dx;
  int dy;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  struct x264_me_t * m;
  struct x264_mb_analysis_list_t * lX;
  uint8_t * src[2];
  int stride[2];
  int i_part_cost_bi;
  int i_part_cost;
  int l;
  int i;
  int16_t mvc[2][2];
  uint8_t pix[2][128];
  uint8_t * * p_fref[2];
  int _13;
  uint8_t *[6] * _15;
  int _17;
  uint8_t *[6] * _18;
  int16_t * _28;
  int _30;
  int _32;
  uint8_t * _34;
  uint8_t * _37;
  uint8_t * _39;
  uint8_t * _42;
  uint8_t * _44;
  uint8_t * _45;
  uint8_t * * _47;
  uint8_t * _48;
  uint8_t * _49;
  uint8_t * _51;
  uint8_t * _52;
  uint8_t * _54;
  uint8_t * _55;
  uint8_t * _57;
  uint8_t * _58;
  uint8_t * _60;
  uint8_t * _61;
  uint8_t * _63;
  uint8_t * _64;
  int _66;
  uint16_t * _67;
  uint16_t * _69;
  int16_t[2] * _71;
  unsigned int _72;
  int16_t[2] * _75;
  unsigned int _76;
  int16_t[2] * _78;
  uint8_t * (*<T1451>) (uint8_t *, int *, uint8_t * *, int, int, int, int, int) _82;
  short int _83;
  int _84;
  short int _85;
  int _86;
  int _87;
  uint8_t *[6] * _88;
  int * _89;
  uint8_t[128] * _90;
  uint8_t * _92;
  int _94;
  void (*<T1459>) (uint8_t *, int, uint8_t *, int, uint8_t *, int, int) _97;
  int _98;
  int _99;
  short int _100;
  int _101;
  int _102;
  uint8_t * _103;
  int _104;
  uint8_t * _105;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _107;
  uint8_t * _108;
  int _110;
  int _116;
  int _117;
  int _119;
  int _120;
  int _126;
  int _127;
  int _128;
  int _129;
  int _130;
  int _131;
  int _132;
  int _134;
  int _135;
  int _136;
  int _137;
  int _138;
  int _145;
  int _146;
  int _147;
  int8_t * _148;
  int _149;
  int _150;
  int16_t[2] * _158;
  unsigned int _159;
  int16_t[2] * _160;
  long unsigned int _161;
  long unsigned int _162;
  int pretmp_170;
  int _173;
  int _174;
  int8_t * _175;
  int pretmp_181;
  int16_t[2] * _182;
  int pretmp_186;
  unsigned int ivtmp_193;
  sizetype pretmp_199;
  int pretmp_201;
  unsigned char _203;
  int _204;
  int8_t * _207;
  int _208;
  int _209;
  int pretmp_215;
  int16_t[2] * _217;
  unsigned int _218;
  int16_t[2] * _219;
  long unsigned int _220;
  long unsigned int _221;
  int8_t * _237;
  unsigned int ivtmp_241;
  sizetype pretmp_242;
  int16_t[2] * _244;
  unsigned char pretmp_257;
  long unsigned int pretmp_261;
  short unsigned int _285;
  unsigned char prephitmp_349;
  int prephitmp_365;
  short unsigned int _371;
  unsigned int ivtmp_383;
  unsigned int ivtmp_411;
  int prephitmp_435;

  <bb 2>:
  _13 = a_12(D)->l0.i_ref;
  _15 = &h_14(D)->mb.pic.p_fref[0][_13];
  p_fref[0] = _15;
  _17 = a_12(D)->l1.i_ref;
  _18 = &h_14(D)->mb.pic.p_fref[1][_17];
  p_fref[1] = _18;
  h_14(D)->mb.i_partition = 15;
  a_12(D)->i_cost8x16bi = 0;
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 3>:
  # i_353 = PHI <i_125(21), 0(2)>
  # ivtmp_193 = PHI <ivtmp_383(21), 2(2)>
  # DEBUG i => i_353
  # DEBUG i_part_cost_bi => 0
  stride[0] = 8;
  stride[1] = 8;
  # DEBUG l => 0
  # DEBUG i_part_cost_bi => 0
  # DEBUG l => 0
  pretmp_181 = i_353 * 8;
  pretmp_199 = (sizetype) pretmp_181;
  pretmp_215 = pretmp_181 >> 1;
  pretmp_242 = (sizetype) pretmp_215;
  pretmp_261 = pretmp_199 * 2;
  pretmp_201 = i_353 + 2;
  pretmp_170 = i_353 * 4;

  <bb 4>:
  # l_211 = PHI <l_96(8), 0(3)>
  # i_part_cost_bi_178 = PHI <i_part_cost_bi_95(8), 0(3)>
  # ivtmp_411 = PHI <ivtmp_241(8), 2(3)>
  # DEBUG i_part_cost_bi => i_part_cost_bi_178
  # DEBUG l => l_211
  if (l_211 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  lX_24 = &a_12(D)->l1;
  goto <bb 7>;

  <bb 6>:
  # DEBUG i_part_cost_bi => i_part_cost_bi_178
  # DEBUG l => l_211
  lX_25 = &a_12(D)->l0;

  <bb 7>:
  # lX_6 = PHI <lX_24(5), lX_25(6)>
  # DEBUG lX => lX_6
  m_26 = &lX_6->me8x16[i_353];
  # DEBUG m => m_26
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].i_pixel = 2;
  _28 = a_12(D)->p_cost_mv;
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].p_cost_mv = _28;
  _30 = h_14(D)->mb.pic.i_stride[0];
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].i_stride[0] = _30;
  _32 = h_14(D)->mb.pic.i_stride[1];
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].i_stride[1] = _32;
  _34 = h_14(D)->mb.pic.p_fenc[0];
  _37 = _34 + pretmp_199;
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].p_fenc[0] = _37;
  _39 = h_14(D)->mb.pic.p_fenc[1];
  _42 = _39 + pretmp_242;
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].p_fenc[1] = _42;
  _44 = h_14(D)->mb.pic.p_fenc[2];
  _45 = _44 + pretmp_242;
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].p_fenc[2] = _45;
  _47 = p_fref[l_211];
  _48 = *_47;
  _49 = _48 + pretmp_199;
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].p_fref[0] = _49;
  _51 = MEM[(uint8_t * *)_47 + 8B];
  _52 = _51 + pretmp_199;
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].p_fref[1] = _52;
  _54 = MEM[(uint8_t * *)_47 + 16B];
  _55 = _54 + pretmp_199;
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].p_fref[2] = _55;
  _57 = MEM[(uint8_t * *)_47 + 24B];
  _58 = _57 + pretmp_199;
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].p_fref[3] = _58;
  _60 = MEM[(uint8_t * *)_47 + 32B];
  _61 = _60 + pretmp_242;
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].p_fref[4] = _61;
  _63 = MEM[(uint8_t * *)_47 + 40B];
  _64 = _63 + pretmp_242;
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].p_fref[5] = _64;
  _66 = lX_6->i_ref;
  _67 = h_14(D)->mb.pic.p_integral[l_211][_66];
  _69 = _67 + pretmp_261;
  MEM[(struct x264_me_t *)lX_6].me8x16[i_353].integral = _69;
  _71 = &lX_6->me8x8[i_353].mv;
  _72 = MEM[(uint32_t *)_71];
  MEM[(uint32_t *)&mvc] = _72;
  _75 = &lX_6->me8x8[pretmp_201].mv;
  _76 = MEM[(uint32_t *)_75];
  MEM[(uint32_t *)&mvc + 4B] = _76;
  _78 = &MEM[(struct x264_me_t *)lX_6].me8x16[i_353].mvp;
  x264_mb_predict_mv (h_14(D), l_211, pretmp_170, 2, _78);
  # DEBUG h => h_14(D)
  # DEBUG m => m_26
  # DEBUG mvc => &mvc
  # DEBUG i_mvc => 2
  x264_me_search_ref (h_14(D), m_26, &mvc, 2, 0B);
  # DEBUG h => NULL
  # DEBUG m => NULL
  # DEBUG mvc => NULL
  # DEBUG i_mvc => NULL
  _82 = h_14(D)->mc.get_ref;
  _83 = MEM[(struct x264_me_t *)lX_6].me8x16[i_353].mv[1];
  _84 = (int) _83;
  _85 = MEM[(struct x264_me_t *)lX_6].me8x16[i_353].mv[0];
  _86 = (int) _85;
  _87 = MEM[(struct x264_me_t *)lX_6].me8x16[i_353].i_stride[0];
  _88 = &MEM[(struct x264_me_t *)lX_6].me8x16[i_353].p_fref;
  _89 = &stride[l_211];
  _90 = &pix[l_211];
  _92 = _82 (_90, _89, _88, _87, _86, _84, 8, 16);
  src[l_211] = _92;
  _94 = MEM[(struct x264_me_t *)lX_6].me8x16[i_353].cost_mv;
  i_part_cost_bi_95 = _94 + i_part_cost_bi_178;
  # DEBUG i_part_cost_bi => i_part_cost_bi_95
  l_96 = l_211 + 1;
  # DEBUG l => l_96
  # DEBUG i_part_cost_bi => i_part_cost_bi_95
  # DEBUG l => l_96
  ivtmp_241 = ivtmp_411 - 1;
  if (ivtmp_241 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  goto <bb 4>;

  <bb 9>:
  # i_part_cost_bi_415 = PHI <i_part_cost_bi_95(7)>
  _97 = h_14(D)->mc.avg[2];
  _98 = a_12(D)->l0.i_ref;
  _99 = a_12(D)->l1.i_ref;
  _100 = h_14(D)->mb.bipred_weight[_98][_99];
  _101 = (int) _100;
  _102 = stride[1];
  _103 = src[1];
  _104 = stride[0];
  _105 = src[0];
  _97 (&pix[0], 8, _105, _104, _103, _102, _101);
  _107 = h_14(D)->pixf.mbcmp[2];
  _108 = a_12(D)->l0.me8x16[i_353].p_fenc[0];
  _110 = _107 (_108, 16, &pix[0], 8);
  i_part_cost_111 = i_part_cost_bi_415 + _110;
  # DEBUG i_part_cost_bi => i_part_cost_111
  i_part_cost_112 = a_12(D)->l0.me8x16[i_353].cost;
  # DEBUG i_part_cost => i_part_cost_112
  a_12(D)->i_mb_partition8x16[i_353] = 3;
  i_part_cost_114 = a_12(D)->l1.me8x16[i_353].cost;
  if (i_part_cost_112 > i_part_cost_114)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  # DEBUG i_part_cost => i_part_cost_114
  a_12(D)->i_mb_partition8x16[i_353] = 7;

  <bb 11>:
  # i_part_cost_3 = PHI <i_part_cost_112(9), i_part_cost_114(10)>
  # DEBUG i_part_cost => i_part_cost_3
  _116 = a_12(D)->i_lambda;
  _117 = i_part_cost_111 + _116;
  if (i_part_cost_3 > _117)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:
  pretmp_186 = a_12(D)->i_mb_partition8x16[i_353];
  pretmp_257 = x264_mb_partition_listX_table[0][pretmp_186];
  goto <bb 14>;

  <bb 13>:
  # DEBUG i_part_cost => i_part_cost_111
  a_12(D)->i_mb_partition8x16[i_353] = 11;

  <bb 14>:
  # i_part_cost_4 = PHI <i_part_cost_3(12), i_part_cost_111(13)>
  # prephitmp_435 = PHI <pretmp_186(12), 11(13)>
  # prephitmp_349 = PHI <pretmp_257(12), 1(13)>
  # DEBUG i_part_cost => i_part_cost_4
  _119 = a_12(D)->i_cost8x16bi;
  _120 = i_part_cost_4 + _119;
  a_12(D)->i_cost8x16bi = _120;
  # DEBUG h => h_14(D)
  # DEBUG a => a_12(D)
  # DEBUG i => i_353
  # DEBUG b_mvd => 0
  if (prephitmp_349 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _145 = a_12(D)->l0.i_ref;
  _146 = i_353 * 2;
  # DEBUG h => h_14(D)
  # DEBUG x => _146
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#60 => (uint8_t) _145
  # DEBUG ref => D#60
  _147 = _146 + 12;
  _148 = &h_14(D)->mb.cache.ref[0][_147];
  # DEBUG dst => _148
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => D#60
  _149 = _145 & 255;
  _150 = _149 * 257;
  # DEBUG val2 => (uint32_t) _150
  # DEBUG dy => 0
  # DEBUG dy => 0
  _371 = (short unsigned int) _150;
  MEM[(uint16_t *)_148] = _371;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_148 + 8B] = _371;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)_148 + 16B] = _371;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)_148 + 24B] = _371;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _158 = &a_12(D)->l0.me8x16[i_353].mv;
  _159 = MEM[(uint32_t *)_158];
  # DEBUG h => h_14(D)
  # DEBUG x => _146
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => _159
  _160 = &h_14(D)->mb.cache.mv[0][_147];
  # DEBUG dst => _160
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => _159
  _161 = (long unsigned int) _159;
  _162 = _161 << 32;
  val64_163 = _161 + _162;
  # DEBUG val64 => val64_163
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_160] = val64_163;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_160 + 32B] = val64_163;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_160 + 64B] = val64_163;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_160 + 96B] = val64_163;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4
  goto <bb 17>;

  <bb 16>:
  _173 = i_353 * 2;
  # DEBUG h => h_14(D)
  # DEBUG x => _173
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG ref => 255
  _174 = _173 + 12;
  _175 = &h_14(D)->mb.cache.ref[0][_174];
  # DEBUG dst => _175
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => 255
  # DEBUG val2 => (uint32_t) 65535
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint16_t *)_175] = 65535;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_175 + 8B] = 65535;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)_175 + 16B] = 65535;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)_175 + 24B] = 65535;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_14(D)
  # DEBUG x => _173
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => 0
  _182 = &h_14(D)->mb.cache.mv[0][_174];
  # DEBUG dst => _182
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_182] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_182 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_182 + 64B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_182 + 96B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4

  <bb 17>:
  # prephitmp_365 = PHI <_147(15), _174(16)>
  _203 = x264_mb_partition_listX_table[1][prephitmp_435];
  if (_203 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  _204 = a_12(D)->l1.i_ref;
  # DEBUG D#486 => i_353 * 2
  # DEBUG h => h_14(D)
  # DEBUG x => D#486
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG D#59 => (uint8_t) _204
  # DEBUG ref => D#59
  _207 = &h_14(D)->mb.cache.ref[1][prephitmp_365];
  # DEBUG dst => _207
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => D#59
  _208 = _204 & 255;
  _209 = _208 * 257;
  # DEBUG val2 => (uint32_t) _209
  # DEBUG dy => 0
  # DEBUG dy => 0
  _285 = (short unsigned int) _209;
  MEM[(uint16_t *)_207] = _285;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_207 + 8B] = _285;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)_207 + 16B] = _285;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)_207 + 24B] = _285;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _217 = &a_12(D)->l1.me8x16[i_353].mv;
  _218 = MEM[(uint32_t *)_217];
  # DEBUG h => h_14(D)
  # DEBUG x => D#486
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG mv => _218
  _219 = &h_14(D)->mb.cache.mv[1][prephitmp_365];
  # DEBUG dst => _219
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => _218
  _220 = (long unsigned int) _218;
  _221 = _220 << 32;
  val64_222 = _220 + _221;
  # DEBUG val64 => val64_222
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_219] = val64_222;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_219 + 32B] = val64_222;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_219 + 64B] = val64_222;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_219 + 96B] = val64_222;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4
  goto <bb 20>;

  <bb 19>:
  # DEBUG D#61 => a_12(D)
  # DEBUG h => h_14(D)
  # DEBUG i => i_353
  # DEBUG b_mvd => 0
  # DEBUG D#62 => D#61
  # DEBUG a => D#62
  # DEBUG D#487 => i_353 * 2
  # DEBUG h => h_14(D)
  # DEBUG x => D#487
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG ref => 255
  _237 = &h_14(D)->mb.cache.ref[1][prephitmp_365];
  # DEBUG dst => _237
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => 255
  # DEBUG val2 => (uint32_t) 65535
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint16_t *)_237] = 65535;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)_237 + 8B] = 65535;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)_237 + 16B] = 65535;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)_237 + 24B] = 65535;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_14(D)
  # DEBUG x => D#487
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG mv => 0
  _244 = &h_14(D)->mb.cache.mv[1][prephitmp_365];
  # DEBUG dst => _244
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_244] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_244 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_244 + 64B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_244 + 96B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4

  <bb 20>:
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG i => NULL
  # DEBUG b_mvd => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG dy => NULL
  stride ={v} {CLOBBER};
  src ={v} {CLOBBER};
  i_125 = i_353 + 1;
  # DEBUG i => i_125
  # DEBUG i => i_125
  ivtmp_383 = ivtmp_193 - 1;
  if (ivtmp_383 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  goto <bb 3>;

  <bb 22>:
  _126 = a_12(D)->i_mb_partition8x16[0];
  _127 = _126 >> 2;
  _128 = _127 * 3;
  _129 = _128 + 8;
  _130 = a_12(D)->i_mb_partition8x16[1];
  _131 = _130 >> 2;
  _132 = _129 + _131;
  a_12(D)->i_mb_type8x16 = _132;
  _134 = a_12(D)->i_cost8x16bi;
  _135 = a_12(D)->i_lambda;
  _136 = i_mb_b16x8_cost_table[_132];
  _137 = _135 * _136;
  _138 = _134 + _137;
  a_12(D)->i_cost8x16bi = _138;
  p_fref ={v} {CLOBBER};
  pix ={v} {CLOBBER};
  mvc ={v} {CLOBBER};
  return;

}



;; Function x264_mb_analyse_inter_b16x8 (x264_mb_analyse_inter_b16x8, funcdef_no=218, decl_uid=9324, cgraph_uid=218, symbol_order=287)


Analyzing loop at encoder/analyse.c:1767
encoder/analyse.c:1767:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1767:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1767:5: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:1767:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1767:5: note: not vectorized: control flow in loop.
encoder/analyse.c:1767:5: note: bad inner-loop form.
encoder/analyse.c:1767:5: note: not vectorized: Bad inner loop.
encoder/analyse.c:1767:5: note: bad loop form.

Analyzing loop at encoder/analyse.c:1775
encoder/analyse.c:1775:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:1775:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:1775:9: note: not vectorized: control flow in loop.
encoder/analyse.c:1775:9: note: bad loop form.
encoder/analyse.c:1755:13: note: vectorized 0 loops in function.
x264_mb_analyse_inter_b16x8 (struct x264_t * h, struct x264_mb_analysis_t * a)
{
  int dy;
  int dx;
  int dy;
  uint32_t val2;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  int dy;
  int dx;
  int dy;
  uint32_t val2;
  int dy;
  uint64_t val64;
  int dx;
  int dy;
  struct x264_me_t * m;
  struct x264_mb_analysis_list_t * lX;
  uint8_t * src[2];
  int stride[2];
  int i_part_cost_bi;
  int i_part_cost;
  int l;
  int i;
  int16_t mvc[2][2];
  uint8_t pix[2][128];
  uint8_t * * p_fref[2];
  int _13;
  uint8_t *[6] * _15;
  int _17;
  uint8_t *[6] * _18;
  int16_t * _28;
  int _30;
  int _32;
  uint8_t * _34;
  uint8_t * _37;
  uint8_t * _39;
  uint8_t * _44;
  uint8_t * _46;
  uint8_t * _47;
  uint8_t * * _49;
  uint8_t * _50;
  int _51;
  int _52;
  sizetype _53;
  uint8_t * _54;
  uint8_t * _56;
  int _57;
  int _58;
  sizetype _59;
  uint8_t * _60;
  uint8_t * _62;
  int _63;
  int _64;
  sizetype _65;
  uint8_t * _66;
  uint8_t * _68;
  int _69;
  int _70;
  sizetype _71;
  uint8_t * _72;
  uint8_t * _74;
  int _75;
  int _76;
  sizetype _77;
  uint8_t * _78;
  uint8_t * _80;
  int _81;
  int _82;
  sizetype _83;
  uint8_t * _84;
  int _86;
  uint16_t * _87;
  int _88;
  int _89;
  long unsigned int _90;
  long unsigned int _91;
  uint16_t * _92;
  int16_t[2] * _95;
  unsigned int _96;
  int16_t[2] * _99;
  unsigned int _100;
  int16_t[2] * _102;
  uint8_t * (*<T1451>) (uint8_t *, int *, uint8_t * *, int, int, int, int, int) _105;
  short int _106;
  int _107;
  short int _108;
  int _109;
  int _110;
  uint8_t *[6] * _111;
  int * _112;
  uint8_t[128] * _113;
  uint8_t * _115;
  int _117;
  void (*<T1459>) (uint8_t *, int, uint8_t *, int, uint8_t *, int, int) _120;
  int _121;
  int _122;
  short int _123;
  int _124;
  int _125;
  uint8_t * _126;
  int _127;
  uint8_t * _128;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _130;
  uint8_t * _131;
  int _133;
  int _139;
  int _140;
  int _142;
  int _143;
  int _149;
  int _150;
  int _151;
  int _152;
  int _153;
  int _154;
  int _155;
  int _157;
  int _158;
  int _159;
  int _160;
  int _161;
  int _168;
  int _170;
  int _171;
  int8_t * _172;
  int _173;
  int _174;
  int16_t[2] * _182;
  unsigned int _183;
  int16_t[2] * _184;
  long unsigned int _185;
  long unsigned int _186;
  int _198;
  int _199;
  int8_t * _200;
  unsigned int ivtmp_206;
  int16_t[2] * _207;
  int _227;
  unsigned char _228;
  int _229;
  int8_t * _233;
  int _234;
  int _235;
  int16_t[2] * _243;
  unsigned int _244;
  int16_t[2] * _245;
  long unsigned int _246;
  long unsigned int _247;
  unsigned char prephitmp_259;
  unsigned int ivtmp_261;
  int8_t * _264;
  int16_t[2] * _271;
  unsigned char pretmp_277;
  int prephitmp_300;
  int pretmp_333;
  sizetype pretmp_334;
  int pretmp_335;
  int pretmp_336;
  int pretmp_337;
  sizetype pretmp_338;
  unsigned int ivtmp_342;
  int pretmp_344;
  int pretmp_345;
  int pretmp_347;
  unsigned int ivtmp_422;

  <bb 2>:
  _13 = a_12(D)->l0.i_ref;
  _15 = &h_14(D)->mb.pic.p_fref[0][_13];
  p_fref[0] = _15;
  _17 = a_12(D)->l1.i_ref;
  _18 = &h_14(D)->mb.pic.p_fref[1][_17];
  p_fref[1] = _18;
  h_14(D)->mb.i_partition = 14;
  a_12(D)->i_cost16x8bi = 0;
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 3>:
  # i_396 = PHI <i_148(21), 0(2)>
  # ivtmp_206 = PHI <ivtmp_422(21), 2(2)>
  # DEBUG i => i_396
  # DEBUG i_part_cost_bi => 0
  stride[0] = 16;
  stride[1] = 16;
  # DEBUG l => 0
  # DEBUG i_part_cost_bi => 0
  # DEBUG l => 0
  pretmp_333 = i_396 * 128;
  pretmp_334 = (sizetype) pretmp_333;
  pretmp_335 = i_396 * 8;
  pretmp_336 = pretmp_335 >> 1;
  pretmp_337 = pretmp_336 * 16;
  pretmp_338 = (sizetype) pretmp_337;
  pretmp_344 = i_396 * 2;
  pretmp_345 = pretmp_344 + 1;

  <bb 4>:
  # l_330 = PHI <l_119(8), 0(3)>
  # i_part_cost_bi_274 = PHI <i_part_cost_bi_118(8), 0(3)>
  # ivtmp_261 = PHI <ivtmp_342(8), 2(3)>
  # DEBUG i_part_cost_bi => i_part_cost_bi_274
  # DEBUG l => l_330
  if (l_330 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  lX_24 = &a_12(D)->l1;
  goto <bb 7>;

  <bb 6>:
  # DEBUG i_part_cost_bi => i_part_cost_bi_274
  # DEBUG l => l_330
  lX_25 = &a_12(D)->l0;

  <bb 7>:
  # lX_6 = PHI <lX_24(5), lX_25(6)>
  # DEBUG lX => lX_6
  m_26 = &lX_6->me16x8[i_396];
  # DEBUG m => m_26
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].i_pixel = 1;
  _28 = a_12(D)->p_cost_mv;
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].p_cost_mv = _28;
  _30 = h_14(D)->mb.pic.i_stride[0];
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].i_stride[0] = _30;
  _32 = h_14(D)->mb.pic.i_stride[1];
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].i_stride[1] = _32;
  _34 = h_14(D)->mb.pic.p_fenc[0];
  _37 = _34 + pretmp_334;
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].p_fenc[0] = _37;
  _39 = h_14(D)->mb.pic.p_fenc[1];
  _44 = _39 + pretmp_338;
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].p_fenc[1] = _44;
  _46 = h_14(D)->mb.pic.p_fenc[2];
  _47 = _46 + pretmp_338;
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].p_fenc[2] = _47;
  _49 = p_fref[l_330];
  _50 = *_49;
  _51 = MEM[(struct x264_me_t *)lX_6].me16x8[i_396].i_stride[0];
  _52 = _51 * pretmp_335;
  _53 = (sizetype) _52;
  _54 = _50 + _53;
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].p_fref[0] = _54;
  _56 = MEM[(uint8_t * *)_49 + 8B];
  _57 = MEM[(struct x264_me_t *)lX_6].me16x8[i_396].i_stride[0];
  _58 = _57 * pretmp_335;
  _59 = (sizetype) _58;
  _60 = _56 + _59;
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].p_fref[1] = _60;
  _62 = MEM[(uint8_t * *)_49 + 16B];
  _63 = MEM[(struct x264_me_t *)lX_6].me16x8[i_396].i_stride[0];
  _64 = _63 * pretmp_335;
  _65 = (sizetype) _64;
  _66 = _62 + _65;
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].p_fref[2] = _66;
  _68 = MEM[(uint8_t * *)_49 + 24B];
  _69 = MEM[(struct x264_me_t *)lX_6].me16x8[i_396].i_stride[0];
  _70 = _69 * pretmp_335;
  _71 = (sizetype) _70;
  _72 = _68 + _71;
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].p_fref[3] = _72;
  _74 = MEM[(uint8_t * *)_49 + 32B];
  _75 = MEM[(struct x264_me_t *)lX_6].me16x8[i_396].i_stride[1];
  _76 = _75 * pretmp_336;
  _77 = (sizetype) _76;
  _78 = _74 + _77;
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].p_fref[4] = _78;
  _80 = MEM[(uint8_t * *)_49 + 40B];
  _81 = MEM[(struct x264_me_t *)lX_6].me16x8[i_396].i_stride[1];
  _82 = _81 * pretmp_336;
  _83 = (sizetype) _82;
  _84 = _80 + _83;
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].p_fref[5] = _84;
  _86 = lX_6->i_ref;
  _87 = h_14(D)->mb.pic.p_integral[l_330][_86];
  _88 = MEM[(struct x264_me_t *)lX_6].me16x8[i_396].i_stride[0];
  _89 = _88 * pretmp_335;
  _90 = (long unsigned int) _89;
  _91 = _90 * 2;
  _92 = _87 + _91;
  MEM[(struct x264_me_t *)lX_6].me16x8[i_396].integral = _92;
  # DEBUG D#494 => i_396 * 2
  _95 = &lX_6->me8x8[pretmp_344].mv;
  _96 = MEM[(uint32_t *)_95];
  MEM[(uint32_t *)&mvc] = _96;
  _99 = &lX_6->me8x8[pretmp_345].mv;
  _100 = MEM[(uint32_t *)_99];
  MEM[(uint32_t *)&mvc + 4B] = _100;
  _102 = &MEM[(struct x264_me_t *)lX_6].me16x8[i_396].mvp;
  x264_mb_predict_mv (h_14(D), l_330, pretmp_335, 2, _102);
  # DEBUG h => h_14(D)
  # DEBUG m => m_26
  # DEBUG mvc => &mvc
  # DEBUG i_mvc => 2
  x264_me_search_ref (h_14(D), m_26, &mvc, 2, 0B);
  # DEBUG h => NULL
  # DEBUG m => NULL
  # DEBUG mvc => NULL
  # DEBUG i_mvc => NULL
  _105 = h_14(D)->mc.get_ref;
  _106 = MEM[(struct x264_me_t *)lX_6].me16x8[i_396].mv[1];
  _107 = (int) _106;
  _108 = MEM[(struct x264_me_t *)lX_6].me16x8[i_396].mv[0];
  _109 = (int) _108;
  _110 = MEM[(struct x264_me_t *)lX_6].me16x8[i_396].i_stride[0];
  _111 = &MEM[(struct x264_me_t *)lX_6].me16x8[i_396].p_fref;
  _112 = &stride[l_330];
  _113 = &pix[l_330];
  _115 = _105 (_113, _112, _111, _110, _109, _107, 16, 8);
  src[l_330] = _115;
  _117 = MEM[(struct x264_me_t *)lX_6].me16x8[i_396].cost_mv;
  i_part_cost_bi_118 = _117 + i_part_cost_bi_274;
  # DEBUG i_part_cost_bi => i_part_cost_bi_118
  l_119 = l_330 + 1;
  # DEBUG l => l_119
  # DEBUG i_part_cost_bi => i_part_cost_bi_118
  # DEBUG l => l_119
  ivtmp_342 = ivtmp_261 - 1;
  if (ivtmp_342 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  goto <bb 4>;

  <bb 9>:
  # i_part_cost_bi_430 = PHI <i_part_cost_bi_118(7)>
  _120 = h_14(D)->mc.avg[1];
  _121 = a_12(D)->l0.i_ref;
  _122 = a_12(D)->l1.i_ref;
  _123 = h_14(D)->mb.bipred_weight[_121][_122];
  _124 = (int) _123;
  _125 = stride[1];
  _126 = src[1];
  _127 = stride[0];
  _128 = src[0];
  _120 (&pix[0], 16, _128, _127, _126, _125, _124);
  _130 = h_14(D)->pixf.mbcmp[1];
  _131 = a_12(D)->l0.me16x8[i_396].p_fenc[0];
  _133 = _130 (_131, 16, &pix[0], 16);
  i_part_cost_134 = i_part_cost_bi_430 + _133;
  # DEBUG i_part_cost_bi => i_part_cost_134
  i_part_cost_135 = a_12(D)->l0.me16x8[i_396].cost;
  # DEBUG i_part_cost => i_part_cost_135
  a_12(D)->i_mb_partition16x8[i_396] = 3;
  i_part_cost_137 = a_12(D)->l1.me16x8[i_396].cost;
  if (i_part_cost_135 > i_part_cost_137)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  # DEBUG i_part_cost => i_part_cost_137
  a_12(D)->i_mb_partition16x8[i_396] = 7;

  <bb 11>:
  # i_part_cost_3 = PHI <i_part_cost_135(9), i_part_cost_137(10)>
  # DEBUG i_part_cost => i_part_cost_3
  _139 = a_12(D)->i_lambda;
  _140 = i_part_cost_134 + _139;
  if (i_part_cost_3 > _140)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:
  pretmp_347 = a_12(D)->i_mb_partition16x8[i_396];
  pretmp_277 = x264_mb_partition_listX_table[0][pretmp_347];
  goto <bb 14>;

  <bb 13>:
  # DEBUG i_part_cost => i_part_cost_134
  a_12(D)->i_mb_partition16x8[i_396] = 11;

  <bb 14>:
  # i_part_cost_4 = PHI <i_part_cost_3(12), i_part_cost_134(13)>
  # prephitmp_259 = PHI <pretmp_277(12), 1(13)>
  # DEBUG i_part_cost => i_part_cost_4
  _142 = a_12(D)->i_cost16x8bi;
  _143 = i_part_cost_4 + _142;
  a_12(D)->i_cost16x8bi = _143;
  # DEBUG h => h_14(D)
  # DEBUG a => a_12(D)
  # DEBUG i => i_396
  # DEBUG b_mvd => 0
  if (prephitmp_259 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _168 = a_12(D)->l0.i_ref;
  # DEBUG h => h_14(D)
  # DEBUG x => 0
  # DEBUG y => D#494
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#56 => (uint8_t) _168
  # DEBUG ref => D#56
  _170 = pretmp_344 * 8;
  _171 = _170 + 12;
  _172 = &h_14(D)->mb.cache.ref[0][_171];
  # DEBUG dst => _172
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => D#56
  _173 = _168 & 255;
  _174 = _173 * 16843009;
  val2_175 = (uint32_t) _174;
  # DEBUG val2 => val2_175
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)_172] = val2_175;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)_172 + 8B] = val2_175;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _182 = &a_12(D)->l0.me16x8[i_396].mv;
  _183 = MEM[(uint32_t *)_182];
  # DEBUG h => h_14(D)
  # DEBUG x => 0
  # DEBUG y => D#494
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _183
  _184 = &h_14(D)->mb.cache.mv[0][_171];
  # DEBUG dst => _184
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => _183
  _185 = (long unsigned int) _183;
  _186 = _185 << 32;
  val64_187 = _185 + _186;
  # DEBUG val64 => val64_187
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_184] = val64_187;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_184 + 8B] = val64_187;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_184 + 32B] = val64_187;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_184 + 40B] = val64_187;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 17>;

  <bb 16>:
  # DEBUG h => h_14(D)
  # DEBUG x => 0
  # DEBUG y => D#494
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG ref => 255
  _198 = pretmp_344 * 8;
  _199 = _198 + 12;
  _200 = &h_14(D)->mb.cache.ref[0][_199];
  # DEBUG dst => _200
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => 255
  # DEBUG val2 => 4294967295
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)_200] = 4294967295;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)_200 + 8B] = 4294967295;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_14(D)
  # DEBUG x => 0
  # DEBUG y => D#494
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => 0
  _207 = &h_14(D)->mb.cache.mv[0][_199];
  # DEBUG dst => _207
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_207] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_207 + 8B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_207 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_207 + 40B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2

  <bb 17>:
  # prephitmp_300 = PHI <_171(15), _199(16)>
  _227 = a_12(D)->i_mb_partition16x8[i_396];
  _228 = x264_mb_partition_listX_table[1][_227];
  if (_228 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  _229 = a_12(D)->l1.i_ref;
  # DEBUG h => h_14(D)
  # DEBUG x => 0
  # DEBUG y => D#494
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG D#55 => (uint8_t) _229
  # DEBUG ref => D#55
  _233 = &h_14(D)->mb.cache.ref[1][prephitmp_300];
  # DEBUG dst => _233
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => D#55
  _234 = _229 & 255;
  _235 = _234 * 16843009;
  val2_236 = (uint32_t) _235;
  # DEBUG val2 => val2_236
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)_233] = val2_236;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)_233 + 8B] = val2_236;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _243 = &a_12(D)->l1.me16x8[i_396].mv;
  _244 = MEM[(uint32_t *)_243];
  # DEBUG h => h_14(D)
  # DEBUG x => 0
  # DEBUG y => D#494
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG mv => _244
  _245 = &h_14(D)->mb.cache.mv[1][prephitmp_300];
  # DEBUG dst => _245
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => _244
  _246 = (long unsigned int) _244;
  _247 = _246 << 32;
  val64_248 = _246 + _247;
  # DEBUG val64 => val64_248
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_245] = val64_248;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_245 + 8B] = val64_248;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_245 + 32B] = val64_248;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_245 + 40B] = val64_248;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  goto <bb 20>;

  <bb 19>:
  # DEBUG D#57 => a_12(D)
  # DEBUG h => h_14(D)
  # DEBUG i => i_396
  # DEBUG b_mvd => 0
  # DEBUG D#58 => D#57
  # DEBUG a => D#58
  # DEBUG h => h_14(D)
  # DEBUG x => 0
  # DEBUG y => D#494
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG ref => 255
  _264 = &h_14(D)->mb.cache.ref[1][prephitmp_300];
  # DEBUG dst => _264
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => 255
  # DEBUG val2 => 4294967295
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)_264] = 4294967295;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)_264 + 8B] = 4294967295;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_14(D)
  # DEBUG x => 0
  # DEBUG y => D#494
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 1
  # DEBUG mv => 0
  _271 = &h_14(D)->mb.cache.mv[1][prephitmp_300];
  # DEBUG dst => _271
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => 0
  # DEBUG val64 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_271] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_271 + 8B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_271 + 32B] = 0;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_271 + 40B] = 0;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2

  <bb 20>:
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG i => NULL
  # DEBUG b_mvd => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  stride ={v} {CLOBBER};
  src ={v} {CLOBBER};
  i_148 = i_396 + 1;
  # DEBUG i => i_148
  # DEBUG i => i_148
  ivtmp_422 = ivtmp_206 - 1;
  if (ivtmp_422 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  goto <bb 3>;

  <bb 22>:
  _149 = a_12(D)->i_mb_partition16x8[0];
  _150 = _149 >> 2;
  _151 = _150 * 3;
  _152 = _151 + 8;
  _153 = a_12(D)->i_mb_partition16x8[1];
  _154 = _153 >> 2;
  _155 = _152 + _154;
  a_12(D)->i_mb_type16x8 = _155;
  _157 = a_12(D)->i_cost16x8bi;
  _158 = a_12(D)->i_lambda;
  _159 = i_mb_b16x8_cost_table[_155];
  _160 = _158 * _159;
  _161 = _157 + _160;
  a_12(D)->i_cost16x8bi = _161;
  p_fref ={v} {CLOBBER};
  pix ={v} {CLOBBER};
  mvc ={v} {CLOBBER};
  return;

}



;; Function x264_cabac_mb8x8_mvd (x264_cabac_mb8x8_mvd, funcdef_no=167, decl_uid=8336, cgraph_uid=167, symbol_order=219)


Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 85
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3288]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_85
Creating dr for cb_8(D)->state[_2569]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2571][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2569]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2571][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _2566 = ctxes[i_3288];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2569]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2567
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2569]
encoder/cabac.c:465:13: note: got vectype for stmt: _2570 = cb_8(D)->state[_2569];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _2570 = cb_8(D)->state[_2569];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 86
  exit condition [2, + , 1](no_overflow) < i_abs_2540
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_2540 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_2540 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_241]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_86
Creating dr for cb_8(D)->state[_2591]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2593][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2591]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2593][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _2588 = ctxes[i_241];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2591]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2589
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2591]
encoder/cabac.c:473:13: note: got vectype for stmt: _2592 = cb_8(D)->state[_2591];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _2592 = cb_8(D)->state[_2591];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 87
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3289]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_87
Creating dr for cb_8(D)->state[_2625]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2627][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2625]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2627][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _2622 = ctxes[i_3289];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2625]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2623
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2625]
encoder/cabac.c:483:9: note: got vectype for stmt: _2626 = cb_8(D)->state[_2625];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _2626 = cb_8(D)->state[_2625];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 88
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3290]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_88
Creating dr for cb_8(D)->state[_2693]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2695][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2693]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2695][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _2690 = ctxes[i_3290];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2693]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2691
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2693]
encoder/cabac.c:465:13: note: got vectype for stmt: _2694 = cb_8(D)->state[_2693];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _2694 = cb_8(D)->state[_2693];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 89
  exit condition [2, + , 1](no_overflow) < i_abs_2664
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_2664 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_2664 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_296]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_89
Creating dr for cb_8(D)->state[_2715]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2717][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2715]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2717][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _2712 = ctxes[i_296];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2715]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2713
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2715]
encoder/cabac.c:473:13: note: got vectype for stmt: _2716 = cb_8(D)->state[_2715];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _2716 = cb_8(D)->state[_2715];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 90
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3292]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_90
Creating dr for cb_8(D)->state[_2749]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2751][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2749]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2751][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _2746 = ctxes[i_3292];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2749]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2747
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2749]
encoder/cabac.c:483:9: note: got vectype for stmt: _2750 = cb_8(D)->state[_2749];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _2750 = cb_8(D)->state[_2749];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 79
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_308]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_79
Creating dr for cb_8(D)->state[_2309]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2311][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2309]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2311][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _2306 = ctxes[i_308];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2309]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2307
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2309]
encoder/cabac.c:465:13: note: got vectype for stmt: _2310 = cb_8(D)->state[_2309];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _2310 = cb_8(D)->state[_2309];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 80
  exit condition [2, + , 1](no_overflow) < i_abs_2280
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_2280 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_2280 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_786]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_80
Creating dr for cb_8(D)->state[_2331]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2333][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2331]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2333][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _2328 = ctxes[i_786];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2331]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2329
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2331]
encoder/cabac.c:473:13: note: got vectype for stmt: _2332 = cb_8(D)->state[_2331];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _2332 = cb_8(D)->state[_2331];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 81
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3287]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_81
Creating dr for cb_8(D)->state[_2365]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2367][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2365]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2367][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _2362 = ctxes[i_3287];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2365]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2363
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2365]
encoder/cabac.c:483:9: note: got vectype for stmt: _2366 = cb_8(D)->state[_2365];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _2366 = cb_8(D)->state[_2365];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 82
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3131]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_82
Creating dr for cb_8(D)->state[_2433]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2435][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2433]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2435][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _2430 = ctxes[i_3131];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2433]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2431
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2433]
encoder/cabac.c:465:13: note: got vectype for stmt: _2434 = cb_8(D)->state[_2433];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _2434 = cb_8(D)->state[_2433];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 83
  exit condition [2, + , 1](no_overflow) < i_abs_2404
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_2404 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_2404 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_370]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_83
Creating dr for cb_8(D)->state[_2455]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2457][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2455]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2457][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _2452 = ctxes[i_370];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2455]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2453
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2455]
encoder/cabac.c:473:13: note: got vectype for stmt: _2456 = cb_8(D)->state[_2455];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _2456 = cb_8(D)->state[_2455];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 84
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3294]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_84
Creating dr for cb_8(D)->state[_2489]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2491][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2489]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2491][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _2486 = ctxes[i_3294];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2489]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2487
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2489]
encoder/cabac.c:483:9: note: got vectype for stmt: _2490 = cb_8(D)->state[_2489];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _2490 = cb_8(D)->state[_2489];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 73
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3297]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_73
Creating dr for cb_8(D)->state[_2049]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2051][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2049]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2051][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _2046 = ctxes[i_3297];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2049]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2047
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2049]
encoder/cabac.c:465:13: note: got vectype for stmt: _2050 = cb_8(D)->state[_2049];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _2050 = cb_8(D)->state[_2049];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 74
  exit condition [2, + , 1](no_overflow) < i_abs_2020
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_2020 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_2020 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1209]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_74
Creating dr for cb_8(D)->state[_2071]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2073][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2071]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2073][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _2068 = ctxes[i_1209];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2071]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2069
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2071]
encoder/cabac.c:473:13: note: got vectype for stmt: _2072 = cb_8(D)->state[_2071];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _2072 = cb_8(D)->state[_2071];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 75
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3296]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_75
Creating dr for cb_8(D)->state[_2105]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2107][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2105]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2107][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _2102 = ctxes[i_3296];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2105]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2103
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2105]
encoder/cabac.c:483:9: note: got vectype for stmt: _2106 = cb_8(D)->state[_2105];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _2106 = cb_8(D)->state[_2105];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 76
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2257]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_76
Creating dr for cb_8(D)->state[_2173]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2175][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2173]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2175][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _2170 = ctxes[i_2257];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2173]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2171
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2173]
encoder/cabac.c:465:13: note: got vectype for stmt: _2174 = cb_8(D)->state[_2173];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _2174 = cb_8(D)->state[_2173];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 77
  exit condition [2, + , 1](no_overflow) < i_abs_2144
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_2144 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_2144 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1264]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_77
Creating dr for cb_8(D)->state[_2195]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2197][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2195]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2197][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _2192 = ctxes[i_1264];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2195]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2193
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2195]
encoder/cabac.c:473:13: note: got vectype for stmt: _2196 = cb_8(D)->state[_2195];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _2196 = cb_8(D)->state[_2195];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 78
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3295]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_78
Creating dr for cb_8(D)->state[_2229]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_2231][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_2229]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_2231][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _2226 = ctxes[i_3295];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_2229]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _2227
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_2229]
encoder/cabac.c:483:9: note: got vectype for stmt: _2230 = cb_8(D)->state[_2229];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _2230 = cb_8(D)->state[_2229];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 67
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3277]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_67
Creating dr for cb_8(D)->state[_1789]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1791][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1789]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1791][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _1786 = ctxes[i_3277];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1789]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1787
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1789]
encoder/cabac.c:465:13: note: got vectype for stmt: _1790 = cb_8(D)->state[_1789];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _1790 = cb_8(D)->state[_1789];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 68
  exit condition [2, + , 1](no_overflow) < i_abs_1760
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_1760 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1760 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1140]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_68
Creating dr for cb_8(D)->state[_1811]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1813][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1811]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1813][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _1808 = ctxes[i_1140];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1811]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1809
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1811]
encoder/cabac.c:473:13: note: got vectype for stmt: _1812 = cb_8(D)->state[_1811];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _1812 = cb_8(D)->state[_1811];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 69
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3278]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_69
Creating dr for cb_8(D)->state[_1845]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1847][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1845]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1847][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _1842 = ctxes[i_3278];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1845]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1843
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1845]
encoder/cabac.c:483:9: note: got vectype for stmt: _1846 = cb_8(D)->state[_1845];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _1846 = cb_8(D)->state[_1845];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 70
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2854]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_70
Creating dr for cb_8(D)->state[_1913]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1915][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1913]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1915][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _1910 = ctxes[i_2854];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1913]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1911
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1913]
encoder/cabac.c:465:13: note: got vectype for stmt: _1914 = cb_8(D)->state[_1913];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _1914 = cb_8(D)->state[_1913];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 71
  exit condition [2, + , 1](no_overflow) < i_abs_1884
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_1884 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1884 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1697]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_71
Creating dr for cb_8(D)->state[_1935]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1937][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1935]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1937][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _1932 = ctxes[i_1697];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1935]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1933
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1935]
encoder/cabac.c:473:13: note: got vectype for stmt: _1936 = cb_8(D)->state[_1935];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _1936 = cb_8(D)->state[_1935];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 72
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3279]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_72
Creating dr for cb_8(D)->state[_1969]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1971][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1969]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1971][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _1966 = ctxes[i_3279];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1969]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1967
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1969]
encoder/cabac.c:483:9: note: got vectype for stmt: _1970 = cb_8(D)->state[_1969];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _1970 = cb_8(D)->state[_1969];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 25
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_964]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_25
Creating dr for cb_8(D)->state[_720]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_722][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_720]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_722][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _717 = ctxes[i_964];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_720]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _718
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_720]
encoder/cabac.c:465:13: note: got vectype for stmt: _721 = cb_8(D)->state[_720];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _721 = cb_8(D)->state[_720];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 26
  exit condition [2, + , 1](no_overflow) < i_abs_691
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_691 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_691 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3360]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_26
Creating dr for cb_8(D)->state[_742]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_744][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_742]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_744][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _739 = ctxes[i_3360];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_742]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _740
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_742]
encoder/cabac.c:473:13: note: got vectype for stmt: _743 = cb_8(D)->state[_742];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _743 = cb_8(D)->state[_742];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 27
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3304]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_27
Creating dr for cb_8(D)->state[_776]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_778][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_776]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_778][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _773 = ctxes[i_3304];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_776]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _774
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_776]
encoder/cabac.c:483:9: note: got vectype for stmt: _777 = cb_8(D)->state[_776];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _777 = cb_8(D)->state[_776];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 28
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3299]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_28
Creating dr for cb_8(D)->state[_844]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_846][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_844]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_846][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _841 = ctxes[i_3299];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_844]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _842
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_844]
encoder/cabac.c:465:13: note: got vectype for stmt: _845 = cb_8(D)->state[_844];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _845 = cb_8(D)->state[_844];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 29
  exit condition [2, + , 1](no_overflow) < i_abs_815
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_815 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_815 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3353]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_29
Creating dr for cb_8(D)->state[_866]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_868][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_866]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_868][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _863 = ctxes[i_3353];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_866]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _864
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_866]
encoder/cabac.c:473:13: note: got vectype for stmt: _867 = cb_8(D)->state[_866];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _867 = cb_8(D)->state[_866];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 30
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3300]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_30
Creating dr for cb_8(D)->state[_900]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_902][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_900]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_902][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _897 = ctxes[i_3300];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_900]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _898
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_900]
encoder/cabac.c:483:9: note: got vectype for stmt: _901 = cb_8(D)->state[_900];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _901 = cb_8(D)->state[_900];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 19
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3302]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_19
Creating dr for cb_8(D)->state[_460]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_462][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_460]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_462][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _457 = ctxes[i_3302];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_460]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _458
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_460]
encoder/cabac.c:465:13: note: got vectype for stmt: _461 = cb_8(D)->state[_460];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _461 = cb_8(D)->state[_460];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 20
  exit condition [2, + , 1](no_overflow) < i_abs_431
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_431 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_431 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3355]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_20
Creating dr for cb_8(D)->state[_482]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_484][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_482]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_484][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _479 = ctxes[i_3355];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_482]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _480
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_482]
encoder/cabac.c:473:13: note: got vectype for stmt: _483 = cb_8(D)->state[_482];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _483 = cb_8(D)->state[_482];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 21
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1588]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_21
Creating dr for cb_8(D)->state[_516]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_518][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_516]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_518][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _513 = ctxes[i_1588];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_516]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _514
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_516]
encoder/cabac.c:483:9: note: got vectype for stmt: _517 = cb_8(D)->state[_516];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _517 = cb_8(D)->state[_516];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 22
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1855]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_22
Creating dr for cb_8(D)->state[_584]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_586][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_584]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_586][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _581 = ctxes[i_1855];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_584]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _582
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_584]
encoder/cabac.c:465:13: note: got vectype for stmt: _585 = cb_8(D)->state[_584];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _585 = cb_8(D)->state[_584];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 23
  exit condition [2, + , 1](no_overflow) < i_abs_555
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_555 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_555 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3359]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_23
Creating dr for cb_8(D)->state[_606]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_608][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_606]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_608][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _603 = ctxes[i_3359];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_606]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _604
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_606]
encoder/cabac.c:473:13: note: got vectype for stmt: _607 = cb_8(D)->state[_606];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _607 = cb_8(D)->state[_606];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 24
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3305]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_24
Creating dr for cb_8(D)->state[_640]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_642][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_640]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_642][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _637 = ctxes[i_3305];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_640]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _638
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_640]
encoder/cabac.c:483:9: note: got vectype for stmt: _641 = cb_8(D)->state[_640];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _641 = cb_8(D)->state[_640];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 45
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1593]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_45
Creating dr for cb_8(D)->state[_1334]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1336][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1334]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1336][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _1331 = ctxes[i_1593];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1334]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1332
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1334]
encoder/cabac.c:465:13: note: got vectype for stmt: _1335 = cb_8(D)->state[_1334];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _1335 = cb_8(D)->state[_1334];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 46
  exit condition [2, + , 1](no_overflow) < i_abs_1305
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_1305 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1305 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3348]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_46
Creating dr for cb_8(D)->state[_1356]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1358][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1356]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1358][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _1353 = ctxes[i_3348];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1356]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1354
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1356]
encoder/cabac.c:473:13: note: got vectype for stmt: _1357 = cb_8(D)->state[_1356];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _1357 = cb_8(D)->state[_1356];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 47
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3317]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_47
Creating dr for cb_8(D)->state[_1390]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1392][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1390]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1392][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _1387 = ctxes[i_3317];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1390]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1388
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1390]
encoder/cabac.c:483:9: note: got vectype for stmt: _1391 = cb_8(D)->state[_1390];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _1391 = cb_8(D)->state[_1390];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 48
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3313]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_48
Creating dr for cb_8(D)->state[_1458]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1460][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1458]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1460][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _1455 = ctxes[i_3313];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1458]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1456
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1458]
encoder/cabac.c:465:13: note: got vectype for stmt: _1459 = cb_8(D)->state[_1458];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _1459 = cb_8(D)->state[_1458];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 49
  exit condition [2, + , 1](no_overflow) < i_abs_1429
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_1429 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1429 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3349]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_49
Creating dr for cb_8(D)->state[_1480]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1482][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1480]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1482][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _1477 = ctxes[i_3349];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1480]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1478
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1480]
encoder/cabac.c:473:13: note: got vectype for stmt: _1481 = cb_8(D)->state[_1480];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _1481 = cb_8(D)->state[_1480];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 50
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3158]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_50
Creating dr for cb_8(D)->state[_1514]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1516][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1514]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1516][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _1511 = ctxes[i_3158];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1514]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1512
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1514]
encoder/cabac.c:483:9: note: got vectype for stmt: _1515 = cb_8(D)->state[_1514];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _1515 = cb_8(D)->state[_1514];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 39
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3301]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_39
Creating dr for cb_8(D)->state[_1074]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1076][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1074]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1076][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _1071 = ctxes[i_3301];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1074]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1072
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1074]
encoder/cabac.c:465:13: note: got vectype for stmt: _1075 = cb_8(D)->state[_1074];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _1075 = cb_8(D)->state[_1074];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 40
  exit condition [2, + , 1](no_overflow) < i_abs_1045
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_1045 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1045 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3362]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_40
Creating dr for cb_8(D)->state[_1096]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1098][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1096]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1098][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _1093 = ctxes[i_3362];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1096]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1094
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1096]
encoder/cabac.c:473:13: note: got vectype for stmt: _1097 = cb_8(D)->state[_1096];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _1097 = cb_8(D)->state[_1096];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 41
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3303]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_41
Creating dr for cb_8(D)->state[_1130]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1132][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1130]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1132][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _1127 = ctxes[i_3303];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1130]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1128
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1130]
encoder/cabac.c:483:9: note: got vectype for stmt: _1131 = cb_8(D)->state[_1130];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _1131 = cb_8(D)->state[_1130];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 42
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_413]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_42
Creating dr for cb_8(D)->state[_1198]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1200][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1198]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1200][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _1195 = ctxes[i_413];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1198]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1196
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1198]
encoder/cabac.c:465:13: note: got vectype for stmt: _1199 = cb_8(D)->state[_1198];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _1199 = cb_8(D)->state[_1198];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 43
  exit condition [2, + , 1](no_overflow) < i_abs_1169
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_1169 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1169 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3344]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_43
Creating dr for cb_8(D)->state[_1220]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1222][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1220]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1222][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _1217 = ctxes[i_3344];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1220]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1218
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1220]
encoder/cabac.c:473:13: note: got vectype for stmt: _1221 = cb_8(D)->state[_1220];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _1221 = cb_8(D)->state[_1220];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 44
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3319]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_44
Creating dr for cb_8(D)->state[_1254]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_1256][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_1254]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_1256][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _1251 = ctxes[i_3319];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_1254]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _1252
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_1254]
encoder/cabac.c:483:9: note: got vectype for stmt: _1255 = cb_8(D)->state[_1254];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _1255 = cb_8(D)->state[_1254];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3307]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_5
Creating dr for cb_8(D)->state[_106]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_108][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_106]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_108][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _103 = ctxes[i_3307];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_106]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _104
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_106]
encoder/cabac.c:465:13: note: got vectype for stmt: _107 = cb_8(D)->state[_106];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _107 = cb_8(D)->state[_106];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 6
  exit condition [2, + , 1](no_overflow) < i_abs_77
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_77 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_77 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2940]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_6
Creating dr for cb_8(D)->state[_128]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_130][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_128]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_130][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _125 = ctxes[i_2940];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_128]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _126
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_128]
encoder/cabac.c:473:13: note: got vectype for stmt: _129 = cb_8(D)->state[_128];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _129 = cb_8(D)->state[_128];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 7
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1635]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_7
Creating dr for cb_8(D)->state[_162]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_164][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_162]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_164][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _159 = ctxes[i_1635];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_162]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _160
	constant offset from base address: 99
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_162]
encoder/cabac.c:483:9: note: got vectype for stmt: _163 = cb_8(D)->state[_162];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _163 = cb_8(D)->state[_162];

encoder/cabac.c:483:9: note: bad data references.

Analyzing loop at encoder/cabac.c:465
encoder/cabac.c:465:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:465:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:465:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:465:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3306]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_8
Creating dr for cb_8(D)->state[_230]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_232][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_230]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_232][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:465:13: note: got vectype for stmt: _227 = ctxes[i_3306];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_230]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _228
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_230]
encoder/cabac.c:465:13: note: got vectype for stmt: _231 = cb_8(D)->state[_230];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:465:13: note: not vectorized: not suitable for gather load _231 = cb_8(D)->state[_230];

encoder/cabac.c:465:13: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 9
  exit condition [2, + , 1](no_overflow) < i_abs_201
  bounds on difference of bases: 0 ... 2
  result:
    # of iterations (unsigned int) i_abs_201 + 4294967294, bounded by 2
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_201 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3356]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_9
Creating dr for cb_8(D)->state[_252]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_254][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_252]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_254][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:473:13: note: got vectype for stmt: _249 = ctxes[i_3356];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_252]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _250
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_252]
encoder/cabac.c:473:13: note: got vectype for stmt: _253 = cb_8(D)->state[_252];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: not vectorized: not suitable for gather load _253 = cb_8(D)->state[_252];

encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:483
encoder/cabac.c:483:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:483:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:483:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 10
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/cabac.c:483:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_3124]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_10
Creating dr for cb_8(D)->state[_286]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_transition[i_state_288][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cb_8(D)->state[_286]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *cb_8(D)
	Access function 0: scev_not_known;
	Access function 1: 416
Creating dr for x264_cabac_entropy[i_state_288][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
encoder/cabac.c:483:9: note: got vectype for stmt: _283 = ctxes[i_3124];
const vector(16) unsigned char
Creating dr for cb_8(D)->state[_286]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: cb_8(D)
	offset from base address: (ssizetype) _284
	constant offset from base address: 92
	step: 0
	aligned to: 1
	base_object: cb_8(D)->state[_286]
encoder/cabac.c:483:9: note: got vectype for stmt: _287 = cb_8(D)->state[_286];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:483:9: note: not vectorized: not suitable for gather load _287 = cb_8(D)->state[_286];

encoder/cabac.c:483:9: note: bad data references.
encoder/cabac.c:515:20: note: vectorized 0 loops in function.
x264_cabac_mb8x8_mvd (struct x264_t * h, struct x264_cabac_t * cb, int i_list, int i)
{
  _Bool cb__f8_bits_encoded_lsm.1204;
  int cb__f8_bits_encoded_lsm.1203;
  _Bool cb__f8_bits_encoded_lsm.1202;
  int cb__f8_bits_encoded_lsm.1201;
  _Bool cb__f8_bits_encoded_lsm.1200;
  int cb__f8_bits_encoded_lsm.1199;
  _Bool cb__f8_bits_encoded_lsm.1198;
  int cb__f8_bits_encoded_lsm.1197;
  _Bool cb__f8_bits_encoded_lsm.1196;
  int cb__f8_bits_encoded_lsm.1195;
  _Bool cb__f8_bits_encoded_lsm.1194;
  int cb__f8_bits_encoded_lsm.1193;
  _Bool cb__f8_bits_encoded_lsm.1192;
  int cb__f8_bits_encoded_lsm.1191;
  _Bool cb__f8_bits_encoded_lsm.1190;
  int cb__f8_bits_encoded_lsm.1189;
  _Bool cb__f8_bits_encoded_lsm.1188;
  int cb__f8_bits_encoded_lsm.1187;
  _Bool cb__f8_bits_encoded_lsm.1186;
  int cb__f8_bits_encoded_lsm.1185;
  _Bool cb__f8_bits_encoded_lsm.1184;
  int cb__f8_bits_encoded_lsm.1183;
  _Bool cb__f8_bits_encoded_lsm.1182;
  int cb__f8_bits_encoded_lsm.1181;
  _Bool cb__f8_bits_encoded_lsm.1180;
  int cb__f8_bits_encoded_lsm.1179;
  _Bool cb__f8_bits_encoded_lsm.1178;
  int cb__f8_bits_encoded_lsm.1177;
  _Bool cb__f8_bits_encoded_lsm.1176;
  int cb__f8_bits_encoded_lsm.1175;
  _Bool cb__f8_bits_encoded_lsm.1174;
  int cb__f8_bits_encoded_lsm.1173;
  _Bool cb__f8_bits_encoded_lsm.1172;
  int cb__f8_bits_encoded_lsm.1171;
  _Bool cb__f8_bits_encoded_lsm.1170;
  int cb__f8_bits_encoded_lsm.1169;
  _Bool cb__f8_bits_encoded_lsm.1168;
  int cb__f8_bits_encoded_lsm.1167;
  _Bool cb__f8_bits_encoded_lsm.1166;
  int cb__f8_bits_encoded_lsm.1165;
  _Bool cb__f8_bits_encoded_lsm.1164;
  int cb__f8_bits_encoded_lsm.1163;
  _Bool cb__f8_bits_encoded_lsm.1162;
  int cb__f8_bits_encoded_lsm.1161;
  _Bool cb__f8_bits_encoded_lsm.1160;
  int cb__f8_bits_encoded_lsm.1159;
  _Bool cb__f8_bits_encoded_lsm.1158;
  int cb__f8_bits_encoded_lsm.1157;
  _Bool cb__f8_bits_encoded_lsm.1156;
  int cb__f8_bits_encoded_lsm.1155;
  _Bool cb__f8_bits_encoded_lsm.1154;
  int cb__f8_bits_encoded_lsm.1153;
  _Bool cb__f8_bits_encoded_lsm.1152;
  int cb__f8_bits_encoded_lsm.1151;
  _Bool cb__f8_bits_encoded_lsm.1150;
  int cb__f8_bits_encoded_lsm.1149;
  _Bool cb__f8_bits_encoded_lsm.1148;
  int cb__f8_bits_encoded_lsm.1147;
  _Bool cb__f8_bits_encoded_lsm.1146;
  int cb__f8_bits_encoded_lsm.1145;
  _Bool cb__f8_bits_encoded_lsm.1144;
  int cb__f8_bits_encoded_lsm.1143;
  _Bool cb__f8_bits_encoded_lsm.1142;
  int cb__f8_bits_encoded_lsm.1141;
  _Bool cb__f8_bits_encoded_lsm.1140;
  int cb__f8_bits_encoded_lsm.1139;
  _Bool cb__f8_bits_encoded_lsm.1138;
  int cb__f8_bits_encoded_lsm.1137;
  _Bool cb__f8_bits_encoded_lsm.1136;
  int cb__f8_bits_encoded_lsm.1135;
  _Bool cb__f8_bits_encoded_lsm.1134;
  int cb__f8_bits_encoded_lsm.1133;
  _Bool cb__f8_bits_encoded_lsm.1132;
  int cb__f8_bits_encoded_lsm.1131;
  _Bool cb__f8_bits_encoded_lsm.1130;
  int cb__f8_bits_encoded_lsm.1129;
  _Bool cb__f8_bits_encoded_lsm.1128;
  int cb__f8_bits_encoded_lsm.1127;
  _Bool cb__f8_bits_encoded_lsm.1126;
  int cb__f8_bits_encoded_lsm.1125;
  _Bool cb__f8_bits_encoded_lsm.1124;
  int cb__f8_bits_encoded_lsm.1123;
  _Bool cb__f8_bits_encoded_lsm.1122;
  int cb__f8_bits_encoded_lsm.1121;
  _Bool cb__f8_bits_encoded_lsm.1120;
  int cb__f8_bits_encoded_lsm.1119;
  _Bool cb__f8_bits_encoded_lsm.1118;
  int cb__f8_bits_encoded_lsm.1117;
  _Bool cb__f8_bits_encoded_lsm.1116;
  int cb__f8_bits_encoded_lsm.1115;
  _Bool cb__f8_bits_encoded_lsm.1114;
  int cb__f8_bits_encoded_lsm.1113;
  _Bool cb__f8_bits_encoded_lsm.1112;
  int cb__f8_bits_encoded_lsm.1111;
  _Bool cb__f8_bits_encoded_lsm.1110;
  int cb__f8_bits_encoded_lsm.1109;
  _Bool cb__f8_bits_encoded_lsm.1108;
  int cb__f8_bits_encoded_lsm.1107;
  _Bool cb__f8_bits_encoded_lsm.1106;
  int cb__f8_bits_encoded_lsm.1105;
  _Bool cb__f8_bits_encoded_lsm.1104;
  int cb__f8_bits_encoded_lsm.1103;
  _Bool cb__f8_bits_encoded_lsm.1102;
  int cb__f8_bits_encoded_lsm.1101;
  _Bool cb__f8_bits_encoded_lsm.1100;
  int cb__f8_bits_encoded_lsm.1099;
  _Bool cb__f8_bits_encoded_lsm.1098;
  int cb__f8_bits_encoded_lsm.1097;
  int D.23939;
  int D.23937;
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  int D.23855;
  int D.23853;
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  int D.23771;
  int D.23769;
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  int D.23687;
  int D.23685;
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int D.23497;
  int D.23495;
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  int D.23413;
  int D.23411;
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int D.23279;
  int D.23277;
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  int D.23195;
  int D.23193;
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int D.23061;
  int D.23059;
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int _4;
  unsigned char _6;
  int _7;
  int _10;
  int _12;
  int _13;
  int _14;
  int _16;
  int _17;
  int _19;
  int _20;
  short int _21;
  int _22;
  short int _23;
  int _24;
  short int _26;
  int _27;
  short int _28;
  int _29;
  int _31;
  int _32;
  int _33;
  unsigned int _34;
  unsigned char _35;
  int _36;
  unsigned char _37;
  int _38;
  int _39;
  int _40;
  int _41;
  int16_t[2] * _42;
  long unsigned int _52;
  long unsigned int _53;
  short int _69;
  int _70;
  int _71;
  short int _73;
  int _74;
  int _75;
  _Bool _78;
  int _79;
  _Bool _80;
  int _81;
  int _84;
  long int _85;
  unsigned char _86;
  unsigned char _88;
  short unsigned int _90;
  int _91;
  int _92;
  int _93;
  long int _94;
  unsigned char _95;
  unsigned char _97;
  short unsigned int _99;
  int _100;
  int _101;
  unsigned char _103;
  int _104;
  int _105;
  long int _106;
  unsigned char _107;
  unsigned char _109;
  short unsigned int _111;
  int _112;
  int _113;
  int _116;
  unsigned char _118;
  int _119;
  short unsigned int _120;
  int _121;
  int _122;
  unsigned char _123;
  unsigned char _125;
  int _126;
  int _127;
  long int _128;
  unsigned char _129;
  unsigned char _131;
  short unsigned int _133;
  int _134;
  int _135;
  unsigned char _137;
  int _138;
  int _139;
  long int _140;
  unsigned char _141;
  unsigned char _143;
  short unsigned int _145;
  int _146;
  int _147;
  int _148;
  int _149;
  long int _150;
  unsigned char _151;
  unsigned char _153;
  short unsigned int _155;
  int _156;
  int _157;
  unsigned char _159;
  int _160;
  int _161;
  long int _162;
  unsigned char _163;
  unsigned char _165;
  short unsigned int _167;
  int _168;
  int _169;
  unsigned char _173;
  int _174;
  short unsigned int _175;
  int _176;
  int _177;
  unsigned char _178;
  int _179;
  unsigned int _180;
  unsigned int _181;
  unsigned char _182;
  int _183;
  int _185;
  int _186;
  int _187;
  int _188;
  int _192;
  short int _193;
  int _194;
  int _195;
  int _196;
  short int _197;
  int _198;
  int _199;
  _Bool _202;
  int _203;
  _Bool _204;
  int _205;
  int _208;
  long int _209;
  unsigned char _210;
  unsigned char _212;
  int _213;
  short unsigned int _214;
  int _215;
  int _216;
  int _217;
  long int _218;
  unsigned char _219;
  unsigned char _221;
  int _222;
  short unsigned int _223;
  int _224;
  int _225;
  unsigned char _227;
  int _228;
  int _229;
  long int _230;
  unsigned char _231;
  unsigned char _233;
  short unsigned int _235;
  int _236;
  int _237;
  int _240;
  unsigned char _242;
  int _243;
  short unsigned int _244;
  int _245;
  int _246;
  unsigned char _247;
  unsigned char _249;
  int _250;
  int _251;
  long int _252;
  unsigned char _253;
  unsigned char _255;
  short unsigned int _257;
  int _258;
  int _259;
  unsigned char _261;
  int _262;
  int _263;
  long int _264;
  unsigned char _265;
  unsigned char _267;
  short unsigned int _269;
  int _270;
  int _271;
  int _272;
  int _273;
  long int _274;
  unsigned char _275;
  unsigned char _277;
  int _278;
  short unsigned int _279;
  int _280;
  int _281;
  unsigned char _283;
  int _284;
  int _285;
  long int _286;
  unsigned char _287;
  unsigned char _289;
  short unsigned int _291;
  int _292;
  int _293;
  unsigned char _297;
  int _298;
  short unsigned int _299;
  int _300;
  int _301;
  unsigned char _302;
  int _303;
  unsigned int _304;
  unsigned int _305;
  unsigned char _306;
  int _307;
  int _309;
  int _310;
  int _311;
  int _312;
  unsigned int _315;
  unsigned int _316;
  unsigned char _317;
  int _318;
  int _319;
  unsigned int _321;
  unsigned int _322;
  unsigned char _323;
  int _324;
  int _325;
  int _327;
  short int _328;
  int _329;
  short int _330;
  int _331;
  short int _333;
  int _334;
  short int _335;
  int _336;
  int _338;
  int _339;
  int _340;
  unsigned int _341;
  unsigned char _342;
  int _343;
  unsigned char _344;
  int _345;
  int _346;
  int _347;
  int _348;
  int16_t[2] * _349;
  long unsigned int _359;
  long unsigned int _360;
  short int _375;
  int _376;
  short int _377;
  int _378;
  short int _380;
  int _381;
  short int _382;
  int _383;
  int _385;
  int _386;
  int _387;
  unsigned int _388;
  unsigned char _389;
  int _390;
  unsigned char _391;
  int _392;
  int _393;
  int _394;
  int _395;
  int16_t[2] * _396;
  long unsigned int _406;
  long unsigned int _407;
  short int _423;
  int _424;
  int _425;
  short int _427;
  int _428;
  int _429;
  _Bool _432;
  int _433;
  _Bool _434;
  int _435;
  int _438;
  long int _439;
  unsigned char _440;
  unsigned char _442;
  short unsigned int _444;
  int _445;
  int _446;
  int _447;
  long int _448;
  unsigned char _449;
  unsigned char _451;
  short unsigned int _453;
  int _454;
  int _455;
  unsigned char _457;
  int _458;
  int _459;
  long int _460;
  unsigned char _461;
  unsigned char _463;
  short unsigned int _465;
  int _466;
  int _467;
  int _470;
  unsigned char _472;
  int _473;
  short unsigned int _474;
  int _475;
  int _476;
  unsigned char _477;
  unsigned char _479;
  int _480;
  int _481;
  long int _482;
  unsigned char _483;
  unsigned char _485;
  short unsigned int _487;
  int _488;
  int _489;
  unsigned char _491;
  int _492;
  int _493;
  long int _494;
  unsigned char _495;
  unsigned char _497;
  short unsigned int _499;
  int _500;
  int _501;
  int _502;
  int _503;
  long int _504;
  unsigned char _505;
  unsigned char _507;
  short unsigned int _509;
  int _510;
  int _511;
  unsigned char _513;
  int _514;
  int _515;
  long int _516;
  unsigned char _517;
  unsigned char _519;
  short unsigned int _521;
  int _522;
  int _523;
  unsigned char _527;
  int _528;
  short unsigned int _529;
  int _530;
  int _531;
  unsigned char _532;
  int _533;
  unsigned int _534;
  unsigned int _535;
  unsigned char _536;
  int _537;
  int _539;
  int _540;
  int _541;
  int _542;
  int _546;
  short int _547;
  int _548;
  int _549;
  int _550;
  short int _551;
  int _552;
  int _553;
  _Bool _556;
  int _557;
  _Bool _558;
  int _559;
  int _562;
  long int _563;
  unsigned char _564;
  unsigned char _566;
  int _567;
  short unsigned int _568;
  int _569;
  int _570;
  int _571;
  long int _572;
  unsigned char _573;
  unsigned char _575;
  int _576;
  short unsigned int _577;
  int _578;
  int _579;
  unsigned char _581;
  int _582;
  int _583;
  long int _584;
  unsigned char _585;
  unsigned char _587;
  short unsigned int _589;
  int _590;
  int _591;
  int _594;
  unsigned char _596;
  int _597;
  short unsigned int _598;
  int _599;
  int _600;
  unsigned char _601;
  unsigned char _603;
  int _604;
  int _605;
  long int _606;
  unsigned char _607;
  unsigned char _609;
  short unsigned int _611;
  int _612;
  int _613;
  unsigned char _615;
  int _616;
  int _617;
  long int _618;
  unsigned char _619;
  unsigned char _621;
  short unsigned int _623;
  int _624;
  int _625;
  int _626;
  int _627;
  long int _628;
  unsigned char _629;
  unsigned char _631;
  int _632;
  short unsigned int _633;
  int _634;
  int _635;
  unsigned char _637;
  int _638;
  int _639;
  long int _640;
  unsigned char _641;
  unsigned char _643;
  short unsigned int _645;
  int _646;
  int _647;
  unsigned char _651;
  int _652;
  short unsigned int _653;
  int _654;
  int _655;
  unsigned char _656;
  int _657;
  unsigned int _658;
  unsigned int _659;
  unsigned char _660;
  int _661;
  int _663;
  int _664;
  int _665;
  int _666;
  unsigned int _669;
  unsigned int _670;
  unsigned char _671;
  int _672;
  int _673;
  unsigned int _675;
  unsigned int _676;
  unsigned char _677;
  int _678;
  int _679;
  short int _683;
  int _684;
  int _685;
  short int _687;
  int _688;
  int _689;
  _Bool _692;
  int _693;
  _Bool _694;
  int _695;
  int _698;
  long int _699;
  unsigned char _700;
  unsigned char _702;
  short unsigned int _704;
  int _705;
  int _706;
  int _707;
  long int _708;
  unsigned char _709;
  unsigned char _711;
  short unsigned int _713;
  int _714;
  int _715;
  unsigned char _717;
  int _718;
  int _719;
  long int _720;
  unsigned char _721;
  unsigned char _723;
  short unsigned int _725;
  int _726;
  int _727;
  int _730;
  unsigned char _732;
  int _733;
  short unsigned int _734;
  int _735;
  int _736;
  unsigned char _737;
  unsigned char _739;
  int _740;
  int _741;
  long int _742;
  unsigned char _743;
  unsigned char _745;
  short unsigned int _747;
  int _748;
  int _749;
  unsigned char _751;
  int _752;
  int _753;
  long int _754;
  unsigned char _755;
  unsigned char _757;
  short unsigned int _759;
  int _760;
  int _761;
  int _762;
  int _763;
  long int _764;
  unsigned char _765;
  unsigned char _767;
  short unsigned int _769;
  int _770;
  int _771;
  unsigned char _773;
  int _774;
  int _775;
  long int _776;
  unsigned char _777;
  unsigned char _779;
  short unsigned int _781;
  int _782;
  int _783;
  unsigned char _787;
  int _788;
  short unsigned int _789;
  int _790;
  int _791;
  unsigned char _792;
  int _793;
  unsigned int _794;
  unsigned int _795;
  unsigned char _796;
  int _797;
  int _799;
  int _800;
  int _801;
  int _802;
  int _806;
  short int _807;
  int _808;
  int _809;
  int _810;
  short int _811;
  int _812;
  int _813;
  _Bool _816;
  int _817;
  _Bool _818;
  int _819;
  int _822;
  long int _823;
  unsigned char _824;
  unsigned char _826;
  int _827;
  short unsigned int _828;
  int _829;
  int _830;
  int _831;
  long int _832;
  unsigned char _833;
  unsigned char _835;
  int _836;
  short unsigned int _837;
  int _838;
  int _839;
  unsigned char _841;
  int _842;
  int _843;
  long int _844;
  unsigned char _845;
  unsigned char _847;
  short unsigned int _849;
  int _850;
  int _851;
  int _854;
  unsigned char _856;
  int _857;
  short unsigned int _858;
  int _859;
  int _860;
  unsigned char _861;
  unsigned char _863;
  int _864;
  int _865;
  long int _866;
  unsigned char _867;
  unsigned char _869;
  short unsigned int _871;
  int _872;
  int _873;
  unsigned char _875;
  int _876;
  int _877;
  long int _878;
  unsigned char _879;
  unsigned char _881;
  short unsigned int _883;
  int _884;
  int _885;
  int _886;
  int _887;
  long int _888;
  unsigned char _889;
  unsigned char _891;
  int _892;
  short unsigned int _893;
  int _894;
  int _895;
  unsigned char _897;
  int _898;
  int _899;
  long int _900;
  unsigned char _901;
  unsigned char _903;
  short unsigned int _905;
  int _906;
  int _907;
  unsigned char _911;
  int _912;
  short unsigned int _913;
  int _914;
  int _915;
  unsigned char _916;
  int _917;
  unsigned int _918;
  unsigned int _919;
  unsigned char _920;
  int _921;
  int _923;
  int _924;
  int _925;
  int _926;
  unsigned int _929;
  unsigned int _930;
  unsigned char _931;
  int _932;
  int _933;
  unsigned int _935;
  unsigned int _936;
  unsigned char _937;
  int _938;
  int _939;
  int _941;
  short int _942;
  int _943;
  short int _944;
  int _945;
  short int _947;
  int _948;
  short int _949;
  int _950;
  int _952;
  int _953;
  int _954;
  unsigned int _955;
  unsigned char _956;
  int _957;
  unsigned char _958;
  int _959;
  int _960;
  int _961;
  int _962;
  int16_t[2] * _963;
  short int _989;
  int _990;
  short int _991;
  int _992;
  short int _994;
  int _995;
  short int _996;
  int _997;
  int _999;
  int _1000;
  int _1001;
  unsigned int _1002;
  unsigned char _1003;
  int _1004;
  unsigned char _1005;
  int _1006;
  int _1007;
  int _1008;
  int _1009;
  int16_t[2] * _1010;
  short int _1037;
  int _1038;
  int _1039;
  short int _1041;
  int _1042;
  int _1043;
  _Bool _1046;
  int _1047;
  _Bool _1048;
  int _1049;
  int _1052;
  long int _1053;
  unsigned char _1054;
  unsigned char _1056;
  short unsigned int _1058;
  int _1059;
  int _1060;
  int _1061;
  long int _1062;
  unsigned char _1063;
  unsigned char _1065;
  short unsigned int _1067;
  int _1068;
  int _1069;
  unsigned char _1071;
  int _1072;
  int _1073;
  long int _1074;
  unsigned char _1075;
  unsigned char _1077;
  short unsigned int _1079;
  int _1080;
  int _1081;
  int _1084;
  unsigned char _1086;
  int _1087;
  short unsigned int _1088;
  int _1089;
  int _1090;
  unsigned char _1091;
  unsigned char _1093;
  int _1094;
  int _1095;
  long int _1096;
  unsigned char _1097;
  unsigned char _1099;
  short unsigned int _1101;
  int _1102;
  int _1103;
  unsigned char _1105;
  int _1106;
  int _1107;
  long int _1108;
  unsigned char _1109;
  unsigned char _1111;
  short unsigned int _1113;
  int _1114;
  int _1115;
  int _1116;
  int _1117;
  long int _1118;
  unsigned char _1119;
  unsigned char _1121;
  short unsigned int _1123;
  int _1124;
  int _1125;
  unsigned char _1127;
  int _1128;
  int _1129;
  long int _1130;
  unsigned char _1131;
  unsigned char _1133;
  short unsigned int _1135;
  int _1136;
  int _1137;
  unsigned char _1141;
  int _1142;
  short unsigned int _1143;
  int _1144;
  int _1145;
  unsigned char _1146;
  int _1147;
  unsigned int _1148;
  unsigned int _1149;
  unsigned char _1150;
  int _1151;
  int _1153;
  int _1154;
  int _1155;
  int _1156;
  int _1160;
  short int _1161;
  int _1162;
  int _1163;
  int _1164;
  short int _1165;
  int _1166;
  int _1167;
  _Bool _1170;
  int _1171;
  _Bool _1172;
  int _1173;
  int _1176;
  long int _1177;
  unsigned char _1178;
  unsigned char _1180;
  int _1181;
  short unsigned int _1182;
  int _1183;
  int _1184;
  int _1185;
  long int _1186;
  unsigned char _1187;
  unsigned char _1189;
  int _1190;
  short unsigned int _1191;
  int _1192;
  int _1193;
  unsigned char _1195;
  int _1196;
  int _1197;
  long int _1198;
  unsigned char _1199;
  unsigned char _1201;
  short unsigned int _1203;
  int _1204;
  int _1205;
  int _1208;
  unsigned char _1210;
  int _1211;
  short unsigned int _1212;
  int _1213;
  int _1214;
  unsigned char _1215;
  unsigned char _1217;
  int _1218;
  int _1219;
  long int _1220;
  unsigned char _1221;
  unsigned char _1223;
  short unsigned int _1225;
  int _1226;
  int _1227;
  unsigned char _1229;
  int _1230;
  int _1231;
  long int _1232;
  unsigned char _1233;
  unsigned char _1235;
  short unsigned int _1237;
  int _1238;
  int _1239;
  int _1240;
  int _1241;
  long int _1242;
  unsigned char _1243;
  unsigned char _1245;
  int _1246;
  short unsigned int _1247;
  int _1248;
  int _1249;
  unsigned char _1251;
  int _1252;
  int _1253;
  long int _1254;
  unsigned char _1255;
  unsigned char _1257;
  short unsigned int _1259;
  int _1260;
  int _1261;
  unsigned char _1265;
  int _1266;
  short unsigned int _1267;
  int _1268;
  int _1269;
  unsigned char _1270;
  int _1271;
  unsigned int _1272;
  unsigned int _1273;
  unsigned char _1274;
  int _1275;
  int _1277;
  int _1278;
  int _1279;
  int _1280;
  unsigned int _1283;
  unsigned int _1284;
  unsigned char _1285;
  int _1286;
  int _1287;
  unsigned int _1289;
  unsigned int _1290;
  unsigned char _1291;
  int _1292;
  int _1293;
  short int _1297;
  int _1298;
  int _1299;
  short int _1301;
  int _1302;
  int _1303;
  _Bool _1306;
  int _1307;
  _Bool _1308;
  int _1309;
  int _1312;
  long int _1313;
  unsigned char _1314;
  unsigned char _1316;
  short unsigned int _1318;
  int _1319;
  int _1320;
  int _1321;
  long int _1322;
  unsigned char _1323;
  unsigned char _1325;
  short unsigned int _1327;
  int _1328;
  int _1329;
  unsigned char _1331;
  int _1332;
  int _1333;
  long int _1334;
  unsigned char _1335;
  unsigned char _1337;
  short unsigned int _1339;
  int _1340;
  int _1341;
  int _1344;
  unsigned char _1346;
  int _1347;
  short unsigned int _1348;
  int _1349;
  int _1350;
  unsigned char _1351;
  unsigned char _1353;
  int _1354;
  int _1355;
  long int _1356;
  unsigned char _1357;
  unsigned char _1359;
  short unsigned int _1361;
  int _1362;
  int _1363;
  unsigned char _1365;
  int _1366;
  int _1367;
  long int _1368;
  unsigned char _1369;
  unsigned char _1371;
  short unsigned int _1373;
  int _1374;
  int _1375;
  int _1376;
  int _1377;
  long int _1378;
  unsigned char _1379;
  unsigned char _1381;
  short unsigned int _1383;
  int _1384;
  int _1385;
  unsigned char _1387;
  int _1388;
  int _1389;
  long int _1390;
  unsigned char _1391;
  unsigned char _1393;
  short unsigned int _1395;
  int _1396;
  int _1397;
  unsigned char _1401;
  int _1402;
  short unsigned int _1403;
  int _1404;
  int _1405;
  unsigned char _1406;
  int _1407;
  unsigned int _1408;
  unsigned int _1409;
  unsigned char _1410;
  int _1411;
  int _1413;
  int _1414;
  int _1415;
  int _1416;
  int _1420;
  short int _1421;
  int _1422;
  int _1423;
  int _1424;
  short int _1425;
  int _1426;
  int _1427;
  _Bool _1430;
  int _1431;
  _Bool _1432;
  int _1433;
  int _1436;
  long int _1437;
  unsigned char _1438;
  unsigned char _1440;
  int _1441;
  short unsigned int _1442;
  int _1443;
  int _1444;
  int _1445;
  long int _1446;
  unsigned char _1447;
  unsigned char _1449;
  int _1450;
  short unsigned int _1451;
  int _1452;
  int _1453;
  unsigned char _1455;
  int _1456;
  int _1457;
  long int _1458;
  unsigned char _1459;
  unsigned char _1461;
  short unsigned int _1463;
  int _1464;
  int _1465;
  int _1468;
  unsigned char _1470;
  int _1471;
  short unsigned int _1472;
  int _1473;
  int _1474;
  unsigned char _1475;
  unsigned char _1477;
  int _1478;
  int _1479;
  long int _1480;
  unsigned char _1481;
  unsigned char _1483;
  short unsigned int _1485;
  int _1486;
  int _1487;
  unsigned char _1489;
  int _1490;
  int _1491;
  long int _1492;
  unsigned char _1493;
  unsigned char _1495;
  short unsigned int _1497;
  int _1498;
  int _1499;
  int _1500;
  int _1501;
  long int _1502;
  unsigned char _1503;
  unsigned char _1505;
  int _1506;
  short unsigned int _1507;
  int _1508;
  int _1509;
  unsigned char _1511;
  int _1512;
  int _1513;
  long int _1514;
  unsigned char _1515;
  unsigned char _1517;
  short unsigned int _1519;
  int _1520;
  int _1521;
  unsigned char _1525;
  int _1526;
  short unsigned int _1527;
  int _1528;
  int _1529;
  unsigned char _1530;
  int _1531;
  unsigned int _1532;
  unsigned int _1533;
  unsigned char _1534;
  int _1535;
  int _1537;
  int _1538;
  int _1539;
  int _1540;
  unsigned int _1543;
  unsigned int _1544;
  unsigned char _1545;
  int _1546;
  int _1547;
  unsigned int _1549;
  unsigned int _1550;
  unsigned char _1551;
  int _1552;
  int _1553;
  int _1555;
  int _1556;
  int _1557;
  int _1558;
  short int _1559;
  int _1560;
  short int _1561;
  int _1562;
  short int _1564;
  int _1565;
  short int _1566;
  int _1567;
  int _1569;
  int _1570;
  int _1571;
  unsigned int _1572;
  unsigned char _1573;
  int _1574;
  unsigned char _1575;
  int _1576;
  int _1577;
  int _1578;
  int _1579;
  int16_t[2] * _1580;
  int _1606;
  short int _1607;
  int _1608;
  short int _1609;
  int _1610;
  short int _1612;
  int _1613;
  short int _1614;
  int _1615;
  int _1617;
  int _1618;
  int _1619;
  unsigned int _1620;
  unsigned char _1621;
  int _1622;
  unsigned char _1623;
  int _1624;
  int _1625;
  int _1626;
  int _1627;
  int16_t[2] * _1628;
  int _1654;
  short int _1655;
  int _1656;
  short int _1657;
  int _1658;
  short int _1660;
  int _1661;
  short int _1662;
  int _1663;
  int _1665;
  int _1666;
  int _1667;
  unsigned int _1668;
  unsigned char _1669;
  int _1670;
  unsigned char _1671;
  int _1672;
  int _1673;
  int _1674;
  int _1675;
  int16_t[2] * _1676;
  int _1702;
  short int _1703;
  int _1704;
  short int _1705;
  int _1706;
  short int _1708;
  int _1709;
  short int _1710;
  int _1711;
  int _1713;
  int _1714;
  int _1715;
  unsigned int _1716;
  unsigned char _1717;
  int _1718;
  unsigned char _1719;
  int _1720;
  int _1721;
  int _1722;
  int _1723;
  int16_t[2] * _1724;
  short int _1752;
  int _1753;
  int _1754;
  short int _1756;
  int _1757;
  int _1758;
  _Bool _1761;
  int _1762;
  _Bool _1763;
  int _1764;
  int _1767;
  long int _1768;
  unsigned char _1769;
  unsigned char _1771;
  short unsigned int _1773;
  int _1774;
  int _1775;
  int _1776;
  long int _1777;
  unsigned char _1778;
  unsigned char _1780;
  short unsigned int _1782;
  int _1783;
  int _1784;
  unsigned char _1786;
  int _1787;
  int _1788;
  long int _1789;
  unsigned char _1790;
  unsigned char _1792;
  short unsigned int _1794;
  int _1795;
  int _1796;
  int _1799;
  unsigned char _1801;
  int _1802;
  short unsigned int _1803;
  int _1804;
  int _1805;
  unsigned char _1806;
  unsigned char _1808;
  int _1809;
  int _1810;
  long int _1811;
  unsigned char _1812;
  unsigned char _1814;
  short unsigned int _1816;
  int _1817;
  int _1818;
  unsigned char _1820;
  int _1821;
  int _1822;
  long int _1823;
  unsigned char _1824;
  unsigned char _1826;
  short unsigned int _1828;
  int _1829;
  int _1830;
  int _1831;
  int _1832;
  long int _1833;
  unsigned char _1834;
  unsigned char _1836;
  short unsigned int _1838;
  int _1839;
  int _1840;
  unsigned char _1842;
  int _1843;
  int _1844;
  long int _1845;
  unsigned char _1846;
  unsigned char _1848;
  short unsigned int _1850;
  int _1851;
  int _1852;
  unsigned char _1856;
  int _1857;
  short unsigned int _1858;
  int _1859;
  int _1860;
  unsigned char _1861;
  int _1862;
  unsigned int _1863;
  unsigned int _1864;
  unsigned char _1865;
  int _1866;
  int _1868;
  int _1869;
  int _1870;
  int _1871;
  int _1875;
  short int _1876;
  int _1877;
  int _1878;
  int _1879;
  short int _1880;
  int _1881;
  int _1882;
  _Bool _1885;
  int _1886;
  _Bool _1887;
  int _1888;
  int _1891;
  long int _1892;
  unsigned char _1893;
  unsigned char _1895;
  int _1896;
  short unsigned int _1897;
  int _1898;
  int _1899;
  int _1900;
  long int _1901;
  unsigned char _1902;
  unsigned char _1904;
  int _1905;
  short unsigned int _1906;
  int _1907;
  int _1908;
  unsigned char _1910;
  int _1911;
  int _1912;
  long int _1913;
  unsigned char _1914;
  unsigned char _1916;
  short unsigned int _1918;
  int _1919;
  int _1920;
  int _1923;
  unsigned char _1925;
  int _1926;
  short unsigned int _1927;
  int _1928;
  int _1929;
  unsigned char _1930;
  unsigned char _1932;
  int _1933;
  int _1934;
  long int _1935;
  unsigned char _1936;
  unsigned char _1938;
  short unsigned int _1940;
  int _1941;
  int _1942;
  unsigned char _1944;
  int _1945;
  int _1946;
  long int _1947;
  unsigned char _1948;
  unsigned char _1950;
  short unsigned int _1952;
  int _1953;
  int _1954;
  int _1955;
  int _1956;
  long int _1957;
  unsigned char _1958;
  unsigned char _1960;
  int _1961;
  short unsigned int _1962;
  int _1963;
  int _1964;
  unsigned char _1966;
  int _1967;
  int _1968;
  long int _1969;
  unsigned char _1970;
  unsigned char _1972;
  short unsigned int _1974;
  int _1975;
  int _1976;
  unsigned char _1980;
  int _1981;
  short unsigned int _1982;
  int _1983;
  int _1984;
  unsigned char _1985;
  int _1986;
  unsigned int _1987;
  unsigned int _1988;
  unsigned char _1989;
  int _1990;
  int _1992;
  int _1993;
  int _1994;
  int _1995;
  unsigned int _1998;
  unsigned int _1999;
  unsigned char _2000;
  int _2001;
  int _2002;
  unsigned int _2004;
  unsigned int _2005;
  unsigned char _2006;
  int _2007;
  int _2008;
  short int _2012;
  int _2013;
  int _2014;
  short int _2016;
  int _2017;
  int _2018;
  _Bool _2021;
  int _2022;
  _Bool _2023;
  int _2024;
  int _2027;
  long int _2028;
  unsigned char _2029;
  unsigned char _2031;
  short unsigned int _2033;
  int _2034;
  int _2035;
  int _2036;
  long int _2037;
  unsigned char _2038;
  unsigned char _2040;
  short unsigned int _2042;
  int _2043;
  int _2044;
  unsigned char _2046;
  int _2047;
  int _2048;
  long int _2049;
  unsigned char _2050;
  unsigned char _2052;
  short unsigned int _2054;
  int _2055;
  int _2056;
  int _2059;
  unsigned char _2061;
  int _2062;
  short unsigned int _2063;
  int _2064;
  int _2065;
  unsigned char _2066;
  unsigned char _2068;
  int _2069;
  int _2070;
  long int _2071;
  unsigned char _2072;
  unsigned char _2074;
  short unsigned int _2076;
  int _2077;
  int _2078;
  unsigned char _2080;
  int _2081;
  int _2082;
  long int _2083;
  unsigned char _2084;
  unsigned char _2086;
  short unsigned int _2088;
  int _2089;
  int _2090;
  int _2091;
  int _2092;
  long int _2093;
  unsigned char _2094;
  unsigned char _2096;
  short unsigned int _2098;
  int _2099;
  int _2100;
  unsigned char _2102;
  int _2103;
  int _2104;
  long int _2105;
  unsigned char _2106;
  unsigned char _2108;
  short unsigned int _2110;
  int _2111;
  int _2112;
  unsigned char _2116;
  int _2117;
  short unsigned int _2118;
  int _2119;
  int _2120;
  unsigned char _2121;
  int _2122;
  unsigned int _2123;
  unsigned int _2124;
  unsigned char _2125;
  int _2126;
  int _2128;
  int _2129;
  int _2130;
  int _2131;
  int _2135;
  short int _2136;
  int _2137;
  int _2138;
  int _2139;
  short int _2140;
  int _2141;
  int _2142;
  _Bool _2145;
  int _2146;
  _Bool _2147;
  int _2148;
  int _2151;
  long int _2152;
  unsigned char _2153;
  unsigned char _2155;
  int _2156;
  short unsigned int _2157;
  int _2158;
  int _2159;
  int _2160;
  long int _2161;
  unsigned char _2162;
  unsigned char _2164;
  int _2165;
  short unsigned int _2166;
  int _2167;
  int _2168;
  unsigned char _2170;
  int _2171;
  int _2172;
  long int _2173;
  unsigned char _2174;
  unsigned char _2176;
  short unsigned int _2178;
  int _2179;
  int _2180;
  int _2183;
  unsigned char _2185;
  int _2186;
  short unsigned int _2187;
  int _2188;
  int _2189;
  unsigned char _2190;
  unsigned char _2192;
  int _2193;
  int _2194;
  long int _2195;
  unsigned char _2196;
  unsigned char _2198;
  short unsigned int _2200;
  int _2201;
  int _2202;
  unsigned char _2204;
  int _2205;
  int _2206;
  long int _2207;
  unsigned char _2208;
  unsigned char _2210;
  short unsigned int _2212;
  int _2213;
  int _2214;
  int _2215;
  int _2216;
  long int _2217;
  unsigned char _2218;
  unsigned char _2220;
  int _2221;
  short unsigned int _2222;
  int _2223;
  int _2224;
  unsigned char _2226;
  int _2227;
  int _2228;
  long int _2229;
  unsigned char _2230;
  unsigned char _2232;
  short unsigned int _2234;
  int _2235;
  int _2236;
  unsigned char _2240;
  int _2241;
  short unsigned int _2242;
  int _2243;
  int _2244;
  unsigned char _2245;
  int _2246;
  unsigned int _2247;
  unsigned int _2248;
  unsigned char _2249;
  int _2250;
  int _2252;
  int _2253;
  int _2254;
  int _2255;
  unsigned int _2258;
  unsigned int _2259;
  unsigned char _2260;
  int _2261;
  int _2262;
  unsigned int _2264;
  unsigned int _2265;
  unsigned char _2266;
  int _2267;
  int _2268;
  short int _2272;
  int _2273;
  int _2274;
  short int _2276;
  int _2277;
  int _2278;
  _Bool _2281;
  int _2282;
  _Bool _2283;
  int _2284;
  int _2287;
  long int _2288;
  unsigned char _2289;
  unsigned char _2291;
  short unsigned int _2293;
  int _2294;
  int _2295;
  int _2296;
  long int _2297;
  unsigned char _2298;
  unsigned char _2300;
  short unsigned int _2302;
  int _2303;
  int _2304;
  unsigned char _2306;
  int _2307;
  int _2308;
  long int _2309;
  unsigned char _2310;
  unsigned char _2312;
  short unsigned int _2314;
  int _2315;
  int _2316;
  int _2319;
  unsigned char _2321;
  int _2322;
  short unsigned int _2323;
  int _2324;
  int _2325;
  unsigned char _2326;
  unsigned char _2328;
  int _2329;
  int _2330;
  long int _2331;
  unsigned char _2332;
  unsigned char _2334;
  short unsigned int _2336;
  int _2337;
  int _2338;
  unsigned char _2340;
  int _2341;
  int _2342;
  long int _2343;
  unsigned char _2344;
  unsigned char _2346;
  short unsigned int _2348;
  int _2349;
  int _2350;
  int _2351;
  int _2352;
  long int _2353;
  unsigned char _2354;
  unsigned char _2356;
  short unsigned int _2358;
  int _2359;
  int _2360;
  unsigned char _2362;
  int _2363;
  int _2364;
  long int _2365;
  unsigned char _2366;
  unsigned char _2368;
  short unsigned int _2370;
  int _2371;
  int _2372;
  unsigned char _2376;
  int _2377;
  short unsigned int _2378;
  int _2379;
  int _2380;
  unsigned char _2381;
  int _2382;
  unsigned int _2383;
  unsigned int _2384;
  unsigned char _2385;
  int _2386;
  int _2388;
  int _2389;
  int _2390;
  int _2391;
  int _2395;
  short int _2396;
  int _2397;
  int _2398;
  int _2399;
  short int _2400;
  int _2401;
  int _2402;
  _Bool _2405;
  int _2406;
  _Bool _2407;
  int _2408;
  int _2411;
  long int _2412;
  unsigned char _2413;
  unsigned char _2415;
  int _2416;
  short unsigned int _2417;
  int _2418;
  int _2419;
  int _2420;
  long int _2421;
  unsigned char _2422;
  unsigned char _2424;
  int _2425;
  short unsigned int _2426;
  int _2427;
  int _2428;
  unsigned char _2430;
  int _2431;
  int _2432;
  long int _2433;
  unsigned char _2434;
  unsigned char _2436;
  short unsigned int _2438;
  int _2439;
  int _2440;
  int _2443;
  unsigned char _2445;
  int _2446;
  short unsigned int _2447;
  int _2448;
  int _2449;
  unsigned char _2450;
  unsigned char _2452;
  int _2453;
  int _2454;
  long int _2455;
  unsigned char _2456;
  unsigned char _2458;
  short unsigned int _2460;
  int _2461;
  int _2462;
  unsigned char _2464;
  int _2465;
  int _2466;
  long int _2467;
  unsigned char _2468;
  unsigned char _2470;
  short unsigned int _2472;
  int _2473;
  int _2474;
  int _2475;
  int _2476;
  long int _2477;
  unsigned char _2478;
  unsigned char _2480;
  int _2481;
  short unsigned int _2482;
  int _2483;
  int _2484;
  unsigned char _2486;
  int _2487;
  int _2488;
  long int _2489;
  unsigned char _2490;
  unsigned char _2492;
  short unsigned int _2494;
  int _2495;
  int _2496;
  unsigned char _2500;
  int _2501;
  short unsigned int _2502;
  int _2503;
  int _2504;
  unsigned char _2505;
  int _2506;
  unsigned int _2507;
  unsigned int _2508;
  unsigned char _2509;
  int _2510;
  int _2512;
  int _2513;
  int _2514;
  int _2515;
  unsigned int _2518;
  unsigned int _2519;
  unsigned char _2520;
  int _2521;
  int _2522;
  unsigned int _2524;
  unsigned int _2525;
  unsigned char _2526;
  int _2527;
  int _2528;
  short int _2532;
  int _2533;
  int _2534;
  short int _2536;
  int _2537;
  int _2538;
  _Bool _2541;
  int _2542;
  _Bool _2543;
  int _2544;
  int _2547;
  long int _2548;
  unsigned char _2549;
  unsigned char _2551;
  short unsigned int _2553;
  int _2554;
  int _2555;
  int _2556;
  long int _2557;
  unsigned char _2558;
  unsigned char _2560;
  short unsigned int _2562;
  int _2563;
  int _2564;
  unsigned char _2566;
  int _2567;
  int _2568;
  long int _2569;
  unsigned char _2570;
  unsigned char _2572;
  short unsigned int _2574;
  int _2575;
  int _2576;
  int _2579;
  unsigned char _2581;
  int _2582;
  short unsigned int _2583;
  int _2584;
  int _2585;
  unsigned char _2586;
  unsigned char _2588;
  int _2589;
  int _2590;
  long int _2591;
  unsigned char _2592;
  unsigned char _2594;
  short unsigned int _2596;
  int _2597;
  int _2598;
  unsigned char _2600;
  int _2601;
  int _2602;
  long int _2603;
  unsigned char _2604;
  unsigned char _2606;
  short unsigned int _2608;
  int _2609;
  int _2610;
  int _2611;
  int _2612;
  long int _2613;
  unsigned char _2614;
  unsigned char _2616;
  short unsigned int _2618;
  int _2619;
  int _2620;
  unsigned char _2622;
  int _2623;
  int _2624;
  long int _2625;
  unsigned char _2626;
  unsigned char _2628;
  short unsigned int _2630;
  int _2631;
  int _2632;
  unsigned char _2636;
  int _2637;
  short unsigned int _2638;
  int _2639;
  int _2640;
  unsigned char _2641;
  int _2642;
  unsigned int _2643;
  unsigned int _2644;
  unsigned char _2645;
  int _2646;
  int _2648;
  int _2649;
  int _2650;
  int _2651;
  int _2655;
  short int _2656;
  int _2657;
  int _2658;
  int _2659;
  short int _2660;
  int _2661;
  int _2662;
  _Bool _2665;
  int _2666;
  _Bool _2667;
  int _2668;
  int _2671;
  long int _2672;
  unsigned char _2673;
  unsigned char _2675;
  int _2676;
  short unsigned int _2677;
  int _2678;
  int _2679;
  int _2680;
  long int _2681;
  unsigned char _2682;
  unsigned char _2684;
  int _2685;
  short unsigned int _2686;
  int _2687;
  int _2688;
  unsigned char _2690;
  int _2691;
  int _2692;
  long int _2693;
  unsigned char _2694;
  unsigned char _2696;
  short unsigned int _2698;
  int _2699;
  int _2700;
  int _2703;
  unsigned char _2705;
  int _2706;
  short unsigned int _2707;
  int _2708;
  int _2709;
  unsigned char _2710;
  unsigned char _2712;
  int _2713;
  int _2714;
  long int _2715;
  unsigned char _2716;
  unsigned char _2718;
  short unsigned int _2720;
  int _2721;
  int _2722;
  unsigned char _2724;
  int _2725;
  int _2726;
  long int _2727;
  unsigned char _2728;
  unsigned char _2730;
  short unsigned int _2732;
  int _2733;
  int _2734;
  int _2735;
  int _2736;
  long int _2737;
  unsigned char _2738;
  unsigned char _2740;
  int _2741;
  short unsigned int _2742;
  int _2743;
  int _2744;
  unsigned char _2746;
  int _2747;
  int _2748;
  long int _2749;
  unsigned char _2750;
  unsigned char _2752;
  short unsigned int _2754;
  int _2755;
  int _2756;
  unsigned char _2760;
  int _2761;
  short unsigned int _2762;
  int _2763;
  int _2764;
  unsigned char _2765;
  int _2766;
  unsigned int _2767;
  unsigned int _2768;
  unsigned char _2769;
  int _2770;
  int _2772;
  int _2773;
  int _2774;
  int _2775;
  unsigned int _2778;
  unsigned int _2779;
  unsigned char _2780;
  int _2781;
  int _2782;
  unsigned int _2784;
  unsigned int _2785;
  unsigned char _2786;
  int _2787;
  int _2788;
  unsigned int ivtmp_3911;
  unsigned int ivtmp_3926;
  unsigned int ivtmp_3936;
  unsigned int ivtmp_3941;
  unsigned int ivtmp_3946;
  unsigned int ivtmp_3951;
  unsigned int ivtmp_3956;
  unsigned int ivtmp_3961;
  unsigned int ivtmp_3966;
  unsigned int ivtmp_3971;
  unsigned int ivtmp_3986;
  unsigned int ivtmp_3996;
  unsigned int ivtmp_4001;
  unsigned int ivtmp_4006;
  unsigned int ivtmp_4011;
  unsigned int ivtmp_4016;
  unsigned int ivtmp_4021;
  unsigned int ivtmp_4026;
  unsigned int ivtmp_4046;
  unsigned int ivtmp_4061;
  unsigned int ivtmp_4071;
  unsigned int ivtmp_4076;
  unsigned int ivtmp_4081;
  unsigned int ivtmp_4086;
  unsigned int ivtmp_4091;
  unsigned int ivtmp_4101;
  unsigned int ivtmp_4106;
  unsigned int ivtmp_4111;
  unsigned int ivtmp_4116;
  int _4117;
  int _4118;
  int _4119;
  int _4120;
  int _4121;
  int _4122;
  int _4123;
  int _4124;
  int _4125;
  int _4126;
  int _4127;
  int _4128;
  int _4129;
  int _4130;
  int _4131;
  int _4132;
  int _4133;
  int _4134;
  int _4135;
  int _4136;
  int _4137;
  int _4138;
  int _4139;
  int _4140;
  int _4141;
  int _4142;
  int _4143;
  int _4144;
  int _4145;
  int _4146;
  int _4147;
  int _4148;
  int _4149;
  int _4150;
  int _4151;
  int _4152;
  int _4153;
  int _4154;
  int _4155;
  int _4156;
  int _4157;
  int _4158;
  int _4159;
  int _4160;
  int _4161;
  int _4162;
  int _4163;
  int _4164;
  int _4165;
  int _4166;
  int _4167;
  int _4168;
  int _4169;
  int _4170;
  unsigned int ivtmp_4172;
  unsigned int ivtmp_4175;
  unsigned int ivtmp_4178;
  unsigned int ivtmp_4181;
  unsigned int ivtmp_4184;
  unsigned int ivtmp_4187;
  unsigned int ivtmp_4190;
  unsigned int ivtmp_4193;
  unsigned int ivtmp_4196;
  unsigned int ivtmp_4199;
  unsigned int ivtmp_4202;
  unsigned int ivtmp_4205;
  unsigned int ivtmp_4208;
  unsigned int ivtmp_4211;
  unsigned int ivtmp_4214;
  unsigned int ivtmp_4217;
  unsigned int ivtmp_4220;
  unsigned int ivtmp_4224;
  unsigned int ivtmp_4226;
  unsigned int ivtmp_4229;
  unsigned int ivtmp_4233;
  unsigned int ivtmp_4236;
  unsigned int ivtmp_4239;
  unsigned int ivtmp_4242;
  unsigned int ivtmp_4245;
  unsigned int ivtmp_4248;
  unsigned int ivtmp_4251;
  unsigned int ivtmp_4254;
  unsigned int ivtmp_4257;
  unsigned int ivtmp_4260;
  unsigned int ivtmp_4263;
  unsigned int ivtmp_4266;
  unsigned int ivtmp_4269;
  unsigned int ivtmp_4272;
  unsigned int ivtmp_4275;
  unsigned int ivtmp_4278;
  int prephitmp_4282;
  int prephitmp_4286;
  int prephitmp_4290;
  int prephitmp_4294;
  int prephitmp_4300;
  int prephitmp_4307;
  int prephitmp_4309;
  int prephitmp_4315;
  int prephitmp_4322;
  int prephitmp_4329;
  int prephitmp_4331;
  int prephitmp_4337;
  int prephitmp_4344;
  int prephitmp_4351;
  int prephitmp_4353;
  int prephitmp_4359;
  int prephitmp_4366;
  int prephitmp_4373;
  int prephitmp_4375;
  int prephitmp_4381;
  int prephitmp_4388;
  int prephitmp_4395;
  int prephitmp_4397;
  int prephitmp_4403;
  int prephitmp_4410;
  int prephitmp_4417;
  int prephitmp_4419;
  int prephitmp_4425;
  unsigned int ivtmp_4427;
  int prephitmp_4432;
  int prephitmp_4439;
  int prephitmp_4441;
  int prephitmp_4447;
  unsigned int ivtmp_4449;
  int prephitmp_4454;
  unsigned int ivtmp_4456;
  int prephitmp_4461;
  int prephitmp_4463;
  int prephitmp_4469;
  int prephitmp_4474;
  int prephitmp_4478;
  int prephitmp_4484;
  int prephitmp_4491;
  int prephitmp_4493;
  int prephitmp_4499;
  int prephitmp_4506;
  int prephitmp_4513;
  int prephitmp_4515;
  int prephitmp_4521;
  unsigned int ivtmp_4523;
  int prephitmp_4528;
  int prephitmp_4535;
  int prephitmp_4537;
  int prephitmp_4543;
  unsigned int ivtmp_4545;
  int prephitmp_4550;
  int prephitmp_4557;
  int prephitmp_4559;
  int prephitmp_4565;
  int prephitmp_4570;
  int prephitmp_4574;
  int prephitmp_4580;
  int prephitmp_4587;
  int prephitmp_4589;
  int prephitmp_4595;
  int prephitmp_4602;
  int prephitmp_4609;
  int prephitmp_4611;
  int prephitmp_4617;
  int prephitmp_4624;
  int prephitmp_4631;
  int prephitmp_4633;
  int prephitmp_4639;
  unsigned int ivtmp_4641;
  int prephitmp_4646;
  int prephitmp_4653;
  int prephitmp_4655;
  int prephitmp_4661;
  int prephitmp_4666;
  int prephitmp_4672;
  int prephitmp_4679;
  int prephitmp_4681;
  int prephitmp_4687;
  unsigned int ivtmp_4689;
  int prephitmp_4694;
  int prephitmp_4701;
  int prephitmp_4703;
  int prephitmp_4709;

  <bb 2>:
  _4 = h_2(D)->mb.i_sub_partition[i_3(D)];
  _6 = x264_mb_partition_listX_table[i_list_5(D)][_4];
  if (_6 == 0)
    goto <bb 386> (<L14>);
  else
    goto <bb 3>;

  <bb 3>:
  switch (_4) <default: <L14>, case 0: <L17>, case 1: <L5>, case 2: <L8>, case 3: <L2>, case 4: <L17>, case 5: <L5>, case 6: <L8>, case 7: <L2>, case 8: <L17>, case 9: <L5>, case 10: <L8>, case 11: <L2>>

<L2>:
  _7 = i_3(D) * 4;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _7
  # DEBUG width => 2
  # DEBUG height => 2
  x264_mb_predict_mv (h_2(D), i_list_5(D), _7, 2, &mvp);
  _20 = x264_scan8[_7];
  _21 = h_2(D)->mb.cache.mv[i_list_5(D)][_20][0];
  _22 = (int) _21;
  _23 = mvp[0];
  _24 = (int) _23;
  mdx_25 = _22 - _24;
  # DEBUG mdx => mdx_25
  _26 = h_2(D)->mb.cache.mv[i_list_5(D)][_20][1];
  _27 = (int) _26;
  _28 = mvp[1];
  _29 = (int) _28;
  mdy_30 = _27 - _29;
  # DEBUG mdy => mdy_30
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _7
  # DEBUG l => 0
  # DEBUG mvd => mdx_25
  _192 = _20 + -1;
  _193 = h_2(D)->mb.cache.mvd[i_list_5(D)][_192][0];
  _194 = (int) _193;
  _195 = ABS_EXPR <_194>;
  _196 = _20 + -8;
  _197 = h_2(D)->mb.cache.mvd[i_list_5(D)][_196][0];
  _198 = (int) _197;
  _199 = ABS_EXPR <_198>;
  amvd_200 = _195 + _199;
  # DEBUG amvd => amvd_200
  i_abs_201 = ABS_EXPR <mdx_25>;
  # DEBUG i_abs => i_abs_201
  # DEBUG ctxbase => 40
  _202 = amvd_200 > 2;
  _203 = (int) _202;
  _204 = amvd_200 > 32;
  _205 = (int) _204;
  ctx_206 = _203 + _205;
  # DEBUG ctx => ctx_206
  if (i_abs_201 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  _208 = ctx_206 + 40;
  _209 = (long int) _208;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _209
  # DEBUG b => 0
  _210 = cb_8(D)->state[_209];
  i_state_211 = (int) _210;
  # DEBUG i_state => i_state_211
  _212 = x264_cabac_transition[i_state_211][0];
  cb_8(D)->state[_209] = _212;
  _213 = cb_8(D)->f8_bits_encoded;
  _214 = x264_cabac_entropy[i_state_211][0];
  _215 = (int) _214;
  _216 = _213 + _215;
  cb_8(D)->f8_bits_encoded = _216;
  goto <bb 25>;

  <bb 6>:
  if (i_abs_201 <= 8)
    goto <bb 7>;
  else
    goto <bb 18>;

  <bb 7>:
  _217 = ctx_206 + 40;
  _218 = (long int) _217;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _218
  # DEBUG b => 1
  _219 = cb_8(D)->state[_218];
  i_state_220 = (int) _219;
  # DEBUG i_state => i_state_220
  _221 = x264_cabac_transition[i_state_220][1];
  cb_8(D)->state[_218] = _221;
  _222 = cb_8(D)->f8_bits_encoded;
  _223 = x264_cabac_entropy[i_state_220][1];
  _224 = (int) _223;
  _225 = _222 + _224;
  cb_8(D)->f8_bits_encoded = _225;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_201 > 4)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  goto <bb 11>;

  <bb 9>:
  # DEBUG i => 1
  if (i_abs_201 > 1)
    goto <bb 10>;
  else
    goto <bb 17>;

  <bb 10>:
  goto <bb 14>;

  <bb 11>:
  # i_3306 = PHI <1(8), i_238(12)>
  # prephitmp_4701 = PHI <_225(8), _237(12)>
  # ivtmp_3971 = PHI <3(8), ivtmp_3996(12)>
  # DEBUG i => i_3306
  _227 = ctxes[i_3306];
  _228 = (int) _227;
  _229 = _228 + 40;
  _230 = (long int) _229;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _230
  # DEBUG b => 1
  _231 = cb_8(D)->state[_230];
  i_state_232 = (int) _231;
  # DEBUG i_state => i_state_232
  _233 = x264_cabac_transition[i_state_232][1];
  cb_8(D)->state[_230] = _233;
  _235 = x264_cabac_entropy[i_state_232][1];
  _236 = (int) _235;
  _237 = _236 + prephitmp_4701;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_238 = i_3306 + 1;
  # DEBUG i => i_238
  # DEBUG i => i_238
  ivtmp_3996 = ivtmp_3971 - 1;
  if (ivtmp_3996 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  goto <bb 11>;

  <bb 13>:
  # _4167 = PHI <_237(11)>
  # cb__f8_bits_encoded_lsm.1199_3739 = PHI <_237(11)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1199_3739;
  _240 = i_abs_201 + -3;
  _242 = cb_8(D)->state[46];
  _243 = (int) _242;
  _244 = cabac_size_unary[_240][_243];
  _245 = (int) _244;
  _246 = _4167 + _245;
  cb_8(D)->f8_bits_encoded = _246;
  _247 = cabac_transition_unary[_240][_243];
  cb_8(D)->state[46] = _247;
  goto <bb 25>;

  <bb 14>:
  # i_3356 = PHI <1(10), i_260(16)>
  # prephitmp_4709 = PHI <_225(10), _259(16)>
  # DEBUG i => i_3356
  _249 = ctxes[i_3356];
  _250 = (int) _249;
  _251 = _250 + 40;
  _252 = (long int) _251;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _252
  # DEBUG b => 1
  _253 = cb_8(D)->state[_252];
  i_state_254 = (int) _253;
  # DEBUG i_state => i_state_254
  _255 = x264_cabac_transition[i_state_254][1];
  cb_8(D)->state[_252] = _255;
  _257 = x264_cabac_entropy[i_state_254][1];
  _258 = (int) _257;
  _259 = _258 + prephitmp_4709;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_260 = i_3356 + 1;
  # DEBUG i => i_260
  # DEBUG i => i_260
  if (i_abs_201 > i_260)
    goto <bb 16>;
  else
    goto <bb 15>;

  <bb 15>:
  # _4166 = PHI <_259(14)>
  # cb__f8_bits_encoded_lsm.1201_3741 = PHI <_259(14)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1201_3741;
  goto <bb 17>;

  <bb 16>:
  goto <bb 14>;

  <bb 17>:
  # prephitmp_4703 = PHI <_4166(15), _225(9)>
  _261 = ctxes[i_abs_201];
  _262 = (int) _261;
  _263 = _262 + 40;
  _264 = (long int) _263;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _264
  # DEBUG b => 0
  _265 = cb_8(D)->state[_264];
  i_state_266 = (int) _265;
  # DEBUG i_state => i_state_266
  _267 = x264_cabac_transition[i_state_266][0];
  cb_8(D)->state[_264] = _267;
  _269 = x264_cabac_entropy[i_state_266][0];
  _270 = (int) _269;
  _271 = _270 + prephitmp_4703;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _272 = _271 + 256;
  cb_8(D)->f8_bits_encoded = _272;
  goto <bb 25>;

  <bb 18>:
  _273 = ctx_206 + 40;
  _274 = (long int) _273;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _274
  # DEBUG b => 1
  _275 = cb_8(D)->state[_274];
  i_state_276 = (int) _275;
  # DEBUG i_state => i_state_276
  _277 = x264_cabac_transition[i_state_276][1];
  cb_8(D)->state[_274] = _277;
  _278 = cb_8(D)->f8_bits_encoded;
  _279 = x264_cabac_entropy[i_state_276][1];
  _280 = (int) _279;
  _281 = _278 + _280;
  cb_8(D)->f8_bits_encoded = _281;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 19>:
  # i_3124 = PHI <i_294(20), 1(18)>
  # prephitmp_4694 = PHI <_293(20), _281(18)>
  # ivtmp_4523 = PHI <ivtmp_4006(20), 3(18)>
  # DEBUG i => i_3124
  _283 = ctxes[i_3124];
  _284 = (int) _283;
  _285 = _284 + 40;
  _286 = (long int) _285;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _286
  # DEBUG b => 1
  _287 = cb_8(D)->state[_286];
  i_state_288 = (int) _287;
  # DEBUG i_state => i_state_288
  _289 = x264_cabac_transition[i_state_288][1];
  cb_8(D)->state[_286] = _289;
  _291 = x264_cabac_entropy[i_state_288][1];
  _292 = (int) _291;
  _293 = _292 + prephitmp_4694;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_294 = i_3124 + 1;
  # DEBUG i => i_294
  # DEBUG i => i_294
  ivtmp_4006 = ivtmp_4523 - 1;
  if (ivtmp_4006 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  goto <bb 19>;

  <bb 21>:
  # _4165 = PHI <_293(19)>
  # cb__f8_bits_encoded_lsm.1203_3743 = PHI <_293(19)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1203_3743;
  _297 = cb_8(D)->state[46];
  _298 = (int) _297;
  _299 = cabac_size_5ones[_298];
  _300 = (int) _299;
  _301 = _4165 + _300;
  _302 = cabac_transition_5ones[_298];
  cb_8(D)->state[46] = _302;
  _303 = i_abs_201 + -2;
  _304 = (unsigned int) _303;
  # DEBUG val => _304
  if (_303 <= 254)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  _305 = _304 + 1;
  _306 = x264_ue_size_tab[_305];
  _307 = (int) _306;
  goto <bb 24>;

  <bb 23>:
  # DEBUG val => _304
  _315 = _304 + 1;
  _316 = _315 >> 8;
  _317 = x264_ue_size_tab[_316];
  _318 = (int) _317;
  _319 = _318 + 16;
  # DEBUG val => NULL

  <bb 24>:
  # _309 = PHI <_307(22), _319(23)>
  # DEBUG val => NULL
  _310 = _309 + -3;
  _311 = _310 << 8;
  _312 = _301 + _311;
  cb_8(D)->f8_bits_encoded = _312;

  <bb 25>:
  # prephitmp_4666 = PHI <_246(13), _216(5), _312(24), _272(17)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _7
  # DEBUG l => 1
  # DEBUG mvd => mdy_30
  _69 = h_2(D)->mb.cache.mvd[i_list_5(D)][_192][1];
  _70 = (int) _69;
  _71 = ABS_EXPR <_70>;
  _73 = h_2(D)->mb.cache.mvd[i_list_5(D)][_196][1];
  _74 = (int) _73;
  _75 = ABS_EXPR <_74>;
  amvd_76 = _71 + _75;
  # DEBUG amvd => amvd_76
  i_abs_77 = ABS_EXPR <mdy_30>;
  # DEBUG i_abs => i_abs_77
  # DEBUG ctxbase => 47
  _78 = amvd_76 > 2;
  _79 = (int) _78;
  _80 = amvd_76 > 32;
  _81 = (int) _80;
  ctx_82 = _79 + _81;
  # DEBUG ctx => ctx_82
  if (i_abs_77 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  _84 = ctx_82 + 47;
  _85 = (long int) _84;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _85
  # DEBUG b => 0
  _86 = cb_8(D)->state[_85];
  i_state_87 = (int) _86;
  # DEBUG i_state => i_state_87
  _88 = x264_cabac_transition[i_state_87][0];
  cb_8(D)->state[_85] = _88;
  _90 = x264_cabac_entropy[i_state_87][0];
  _91 = (int) _90;
  _92 = _91 + prephitmp_4666;
  cb_8(D)->f8_bits_encoded = _92;
  goto <bb 46>;

  <bb 27>:
  if (i_abs_77 <= 8)
    goto <bb 28>;
  else
    goto <bb 39>;

  <bb 28>:
  _93 = ctx_82 + 47;
  _94 = (long int) _93;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _94
  # DEBUG b => 1
  _95 = cb_8(D)->state[_94];
  i_state_96 = (int) _95;
  # DEBUG i_state => i_state_96
  _97 = x264_cabac_transition[i_state_96][1];
  cb_8(D)->state[_94] = _97;
  _99 = x264_cabac_entropy[i_state_96][1];
  _100 = (int) _99;
  _101 = _100 + prephitmp_4666;
  cb_8(D)->f8_bits_encoded = _101;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_77 > 4)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  goto <bb 32>;

  <bb 30>:
  # DEBUG i => 1
  if (i_abs_77 > 1)
    goto <bb 31>;
  else
    goto <bb 38>;

  <bb 31>:
  goto <bb 35>;

  <bb 32>:
  # i_3307 = PHI <1(29), i_114(33)>
  # prephitmp_4679 = PHI <_101(29), _113(33)>
  # ivtmp_3936 = PHI <3(29), ivtmp_4427(33)>
  # DEBUG i => i_3307
  _103 = ctxes[i_3307];
  _104 = (int) _103;
  _105 = _104 + 47;
  _106 = (long int) _105;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _106
  # DEBUG b => 1
  _107 = cb_8(D)->state[_106];
  i_state_108 = (int) _107;
  # DEBUG i_state => i_state_108
  _109 = x264_cabac_transition[i_state_108][1];
  cb_8(D)->state[_106] = _109;
  _111 = x264_cabac_entropy[i_state_108][1];
  _112 = (int) _111;
  _113 = _112 + prephitmp_4679;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_114 = i_3307 + 1;
  # DEBUG i => i_114
  # DEBUG i => i_114
  ivtmp_4427 = ivtmp_3936 - 1;
  if (ivtmp_4427 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 33>:
  goto <bb 32>;

  <bb 34>:
  # _4170 = PHI <_113(32)>
  # cb__f8_bits_encoded_lsm.1193_3745 = PHI <_113(32)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1193_3745;
  _116 = i_abs_77 + -3;
  _118 = cb_8(D)->state[53];
  _119 = (int) _118;
  _120 = cabac_size_unary[_116][_119];
  _121 = (int) _120;
  _122 = _4170 + _121;
  cb_8(D)->f8_bits_encoded = _122;
  _123 = cabac_transition_unary[_116][_119];
  cb_8(D)->state[53] = _123;
  goto <bb 46>;

  <bb 35>:
  # i_2940 = PHI <1(31), i_136(37)>
  # prephitmp_4687 = PHI <_101(31), _135(37)>
  # DEBUG i => i_2940
  _125 = ctxes[i_2940];
  _126 = (int) _125;
  _127 = _126 + 47;
  _128 = (long int) _127;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _128
  # DEBUG b => 1
  _129 = cb_8(D)->state[_128];
  i_state_130 = (int) _129;
  # DEBUG i_state => i_state_130
  _131 = x264_cabac_transition[i_state_130][1];
  cb_8(D)->state[_128] = _131;
  _133 = x264_cabac_entropy[i_state_130][1];
  _134 = (int) _133;
  _135 = _134 + prephitmp_4687;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_136 = i_2940 + 1;
  # DEBUG i => i_136
  # DEBUG i => i_136
  if (i_abs_77 > i_136)
    goto <bb 37>;
  else
    goto <bb 36>;

  <bb 36>:
  # _4169 = PHI <_135(35)>
  # cb__f8_bits_encoded_lsm.1195_3747 = PHI <_135(35)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1195_3747;
  goto <bb 38>;

  <bb 37>:
  goto <bb 35>;

  <bb 38>:
  # prephitmp_4681 = PHI <_4169(36), _101(30)>
  _137 = ctxes[i_abs_77];
  _138 = (int) _137;
  _139 = _138 + 47;
  _140 = (long int) _139;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _140
  # DEBUG b => 0
  _141 = cb_8(D)->state[_140];
  i_state_142 = (int) _141;
  # DEBUG i_state => i_state_142
  _143 = x264_cabac_transition[i_state_142][0];
  cb_8(D)->state[_140] = _143;
  _145 = x264_cabac_entropy[i_state_142][0];
  _146 = (int) _145;
  _147 = _146 + prephitmp_4681;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _148 = _147 + 256;
  cb_8(D)->f8_bits_encoded = _148;
  goto <bb 46>;

  <bb 39>:
  _149 = ctx_82 + 47;
  _150 = (long int) _149;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _150
  # DEBUG b => 1
  _151 = cb_8(D)->state[_150];
  i_state_152 = (int) _151;
  # DEBUG i_state => i_state_152
  _153 = x264_cabac_transition[i_state_152][1];
  cb_8(D)->state[_150] = _153;
  _155 = x264_cabac_entropy[i_state_152][1];
  _156 = (int) _155;
  _157 = _156 + prephitmp_4666;
  cb_8(D)->f8_bits_encoded = _157;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 40>:
  # i_1635 = PHI <i_170(41), 1(39)>
  # prephitmp_4672 = PHI <_169(41), _157(39)>
  # ivtmp_3946 = PHI <ivtmp_4456(41), 3(39)>
  # DEBUG i => i_1635
  _159 = ctxes[i_1635];
  _160 = (int) _159;
  _161 = _160 + 47;
  _162 = (long int) _161;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _162
  # DEBUG b => 1
  _163 = cb_8(D)->state[_162];
  i_state_164 = (int) _163;
  # DEBUG i_state => i_state_164
  _165 = x264_cabac_transition[i_state_164][1];
  cb_8(D)->state[_162] = _165;
  _167 = x264_cabac_entropy[i_state_164][1];
  _168 = (int) _167;
  _169 = _168 + prephitmp_4672;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_170 = i_1635 + 1;
  # DEBUG i => i_170
  # DEBUG i => i_170
  ivtmp_4456 = ivtmp_3946 - 1;
  if (ivtmp_4456 != 0)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  goto <bb 40>;

  <bb 42>:
  # _4168 = PHI <_169(40)>
  # cb__f8_bits_encoded_lsm.1197_3749 = PHI <_169(40)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1197_3749;
  _173 = cb_8(D)->state[53];
  _174 = (int) _173;
  _175 = cabac_size_5ones[_174];
  _176 = (int) _175;
  _177 = _4168 + _176;
  _178 = cabac_transition_5ones[_174];
  cb_8(D)->state[53] = _178;
  _179 = i_abs_77 + -2;
  _180 = (unsigned int) _179;
  # DEBUG val => _180
  if (_179 <= 254)
    goto <bb 43>;
  else
    goto <bb 44>;

  <bb 43>:
  _181 = _180 + 1;
  _182 = x264_ue_size_tab[_181];
  _183 = (int) _182;
  goto <bb 45>;

  <bb 44>:
  # DEBUG val => _180
  _321 = _180 + 1;
  _322 = _321 >> 8;
  _323 = x264_ue_size_tab[_322];
  _324 = (int) _323;
  _325 = _324 + 16;
  # DEBUG val => NULL

  <bb 45>:
  # _185 = PHI <_183(43), _325(44)>
  # DEBUG val => NULL
  _186 = _185 + -3;
  _187 = _186 << 8;
  _188 = _177 + _187;
  cb_8(D)->f8_bits_encoded = _188;

  <bb 46>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_25
  # DEBUG b => mdy_30
  _31 = mdx_25 & 65535;
  _32 = mdy_30 << 16;
  _33 = _31 + _32;
  _34 = (unsigned int) _33;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _35 = block_idx_y[_7];
  _36 = (int) _35;
  _37 = block_idx_x[_7];
  _38 = (int) _37;
  # DEBUG h => h_2(D)
  # DEBUG x => _38
  # DEBUG y => _36
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _39 = _38 + 12;
  _40 = _36 * 8;
  _41 = _39 + _40;
  _42 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_41];
  # DEBUG dst => _42
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => NULL
  _52 = (long unsigned int) _34;
  _53 = _52 << 32;
  val64_54 = _52 + _53;
  # DEBUG val64 => val64_54
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_42] = val64_54;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_42 + 32B] = val64_54;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  goto <bb 386> (<L14>);

<L5>:
  _10 = i_3(D) * 4;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _10
  # DEBUG width => 2
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _10, 2, &mvp);
  _13 = x264_scan8[_10];
  _375 = h_2(D)->mb.cache.mv[i_list_5(D)][_13][0];
  _376 = (int) _375;
  _377 = mvp[0];
  _378 = (int) _377;
  mdx_379 = _376 - _378;
  # DEBUG mdx => mdx_379
  _380 = h_2(D)->mb.cache.mv[i_list_5(D)][_13][1];
  _381 = (int) _380;
  _382 = mvp[1];
  _383 = (int) _382;
  mdy_384 = _381 - _383;
  # DEBUG mdy => mdy_384
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _10
  # DEBUG l => 0
  # DEBUG mvd => mdx_379
  _546 = _13 + -1;
  _547 = h_2(D)->mb.cache.mvd[i_list_5(D)][_546][0];
  _548 = (int) _547;
  _549 = ABS_EXPR <_548>;
  _550 = _13 + -8;
  _551 = h_2(D)->mb.cache.mvd[i_list_5(D)][_550][0];
  _552 = (int) _551;
  _553 = ABS_EXPR <_552>;
  amvd_554 = _549 + _553;
  # DEBUG amvd => amvd_554
  i_abs_555 = ABS_EXPR <mdx_379>;
  # DEBUG i_abs => i_abs_555
  # DEBUG ctxbase => 40
  _556 = amvd_554 > 2;
  _557 = (int) _556;
  _558 = amvd_554 > 32;
  _559 = (int) _558;
  ctx_560 = _557 + _559;
  # DEBUG ctx => ctx_560
  if (i_abs_555 == 0)
    goto <bb 48>;
  else
    goto <bb 49>;

  <bb 48>:
  _562 = ctx_560 + 40;
  _563 = (long int) _562;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _563
  # DEBUG b => 0
  _564 = cb_8(D)->state[_563];
  i_state_565 = (int) _564;
  # DEBUG i_state => i_state_565
  _566 = x264_cabac_transition[i_state_565][0];
  cb_8(D)->state[_563] = _566;
  _567 = cb_8(D)->f8_bits_encoded;
  _568 = x264_cabac_entropy[i_state_565][0];
  _569 = (int) _568;
  _570 = _567 + _569;
  cb_8(D)->f8_bits_encoded = _570;
  goto <bb 68>;

  <bb 49>:
  if (i_abs_555 <= 8)
    goto <bb 50>;
  else
    goto <bb 61>;

  <bb 50>:
  _571 = ctx_560 + 40;
  _572 = (long int) _571;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _572
  # DEBUG b => 1
  _573 = cb_8(D)->state[_572];
  i_state_574 = (int) _573;
  # DEBUG i_state => i_state_574
  _575 = x264_cabac_transition[i_state_574][1];
  cb_8(D)->state[_572] = _575;
  _576 = cb_8(D)->f8_bits_encoded;
  _577 = x264_cabac_entropy[i_state_574][1];
  _578 = (int) _577;
  _579 = _576 + _578;
  cb_8(D)->f8_bits_encoded = _579;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_555 > 4)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 51>:
  goto <bb 54>;

  <bb 52>:
  # DEBUG i => 1
  if (i_abs_555 > 1)
    goto <bb 53>;
  else
    goto <bb 60>;

  <bb 53>:
  goto <bb 57>;

  <bb 54>:
  # i_1855 = PHI <1(51), i_592(55)>
  # prephitmp_4653 = PHI <_579(51), _591(55)>
  # ivtmp_4061 = PHI <3(51), ivtmp_4086(55)>
  # DEBUG i => i_1855
  _581 = ctxes[i_1855];
  _582 = (int) _581;
  _583 = _582 + 40;
  _584 = (long int) _583;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _584
  # DEBUG b => 1
  _585 = cb_8(D)->state[_584];
  i_state_586 = (int) _585;
  # DEBUG i_state => i_state_586
  _587 = x264_cabac_transition[i_state_586][1];
  cb_8(D)->state[_584] = _587;
  _589 = x264_cabac_entropy[i_state_586][1];
  _590 = (int) _589;
  _591 = _590 + prephitmp_4653;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_592 = i_1855 + 1;
  # DEBUG i => i_592
  # DEBUG i => i_592
  ivtmp_4086 = ivtmp_4061 - 1;
  if (ivtmp_4086 != 0)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 55>:
  goto <bb 54>;

  <bb 56>:
  # _4161 = PHI <_591(54)>
  # cb__f8_bits_encoded_lsm.1163_3751 = PHI <_591(54)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1163_3751;
  _594 = i_abs_555 + -3;
  _596 = cb_8(D)->state[46];
  _597 = (int) _596;
  _598 = cabac_size_unary[_594][_597];
  _599 = (int) _598;
  _600 = _4161 + _599;
  cb_8(D)->f8_bits_encoded = _600;
  _601 = cabac_transition_unary[_594][_597];
  cb_8(D)->state[46] = _601;
  goto <bb 68>;

  <bb 57>:
  # i_3359 = PHI <1(53), i_614(59)>
  # prephitmp_4661 = PHI <_579(53), _613(59)>
  # DEBUG i => i_3359
  _603 = ctxes[i_3359];
  _604 = (int) _603;
  _605 = _604 + 40;
  _606 = (long int) _605;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _606
  # DEBUG b => 1
  _607 = cb_8(D)->state[_606];
  i_state_608 = (int) _607;
  # DEBUG i_state => i_state_608
  _609 = x264_cabac_transition[i_state_608][1];
  cb_8(D)->state[_606] = _609;
  _611 = x264_cabac_entropy[i_state_608][1];
  _612 = (int) _611;
  _613 = _612 + prephitmp_4661;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_614 = i_3359 + 1;
  # DEBUG i => i_614
  # DEBUG i => i_614
  if (i_abs_555 > i_614)
    goto <bb 59>;
  else
    goto <bb 58>;

  <bb 58>:
  # _4160 = PHI <_613(57)>
  # cb__f8_bits_encoded_lsm.1165_3753 = PHI <_613(57)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1165_3753;
  goto <bb 60>;

  <bb 59>:
  goto <bb 57>;

  <bb 60>:
  # prephitmp_4655 = PHI <_4160(58), _579(52)>
  _615 = ctxes[i_abs_555];
  _616 = (int) _615;
  _617 = _616 + 40;
  _618 = (long int) _617;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _618
  # DEBUG b => 0
  _619 = cb_8(D)->state[_618];
  i_state_620 = (int) _619;
  # DEBUG i_state => i_state_620
  _621 = x264_cabac_transition[i_state_620][0];
  cb_8(D)->state[_618] = _621;
  _623 = x264_cabac_entropy[i_state_620][0];
  _624 = (int) _623;
  _625 = _624 + prephitmp_4655;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _626 = _625 + 256;
  cb_8(D)->f8_bits_encoded = _626;
  goto <bb 68>;

  <bb 61>:
  _627 = ctx_560 + 40;
  _628 = (long int) _627;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _628
  # DEBUG b => 1
  _629 = cb_8(D)->state[_628];
  i_state_630 = (int) _629;
  # DEBUG i_state => i_state_630
  _631 = x264_cabac_transition[i_state_630][1];
  cb_8(D)->state[_628] = _631;
  _632 = cb_8(D)->f8_bits_encoded;
  _633 = x264_cabac_entropy[i_state_630][1];
  _634 = (int) _633;
  _635 = _632 + _634;
  cb_8(D)->f8_bits_encoded = _635;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 62>:
  # i_3305 = PHI <i_648(63), 1(61)>
  # prephitmp_4646 = PHI <_647(63), _635(61)>
  # ivtmp_4091 = PHI <ivtmp_4116(63), 3(61)>
  # DEBUG i => i_3305
  _637 = ctxes[i_3305];
  _638 = (int) _637;
  _639 = _638 + 40;
  _640 = (long int) _639;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _640
  # DEBUG b => 1
  _641 = cb_8(D)->state[_640];
  i_state_642 = (int) _641;
  # DEBUG i_state => i_state_642
  _643 = x264_cabac_transition[i_state_642][1];
  cb_8(D)->state[_640] = _643;
  _645 = x264_cabac_entropy[i_state_642][1];
  _646 = (int) _645;
  _647 = _646 + prephitmp_4646;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_648 = i_3305 + 1;
  # DEBUG i => i_648
  # DEBUG i => i_648
  ivtmp_4116 = ivtmp_4091 - 1;
  if (ivtmp_4116 != 0)
    goto <bb 63>;
  else
    goto <bb 64>;

  <bb 63>:
  goto <bb 62>;

  <bb 64>:
  # _4159 = PHI <_647(62)>
  # cb__f8_bits_encoded_lsm.1167_3755 = PHI <_647(62)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1167_3755;
  _651 = cb_8(D)->state[46];
  _652 = (int) _651;
  _653 = cabac_size_5ones[_652];
  _654 = (int) _653;
  _655 = _4159 + _654;
  _656 = cabac_transition_5ones[_652];
  cb_8(D)->state[46] = _656;
  _657 = i_abs_555 + -2;
  _658 = (unsigned int) _657;
  # DEBUG val => _658
  if (_657 <= 254)
    goto <bb 65>;
  else
    goto <bb 66>;

  <bb 65>:
  _659 = _658 + 1;
  _660 = x264_ue_size_tab[_659];
  _661 = (int) _660;
  goto <bb 67>;

  <bb 66>:
  # DEBUG val => _658
  _669 = _658 + 1;
  _670 = _669 >> 8;
  _671 = x264_ue_size_tab[_670];
  _672 = (int) _671;
  _673 = _672 + 16;
  # DEBUG val => NULL

  <bb 67>:
  # _663 = PHI <_661(65), _673(66)>
  # DEBUG val => NULL
  _664 = _663 + -3;
  _665 = _664 << 8;
  _666 = _655 + _665;
  cb_8(D)->f8_bits_encoded = _666;

  <bb 68>:
  # prephitmp_4570 = PHI <_600(56), _570(48), _666(67), _626(60)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _10
  # DEBUG l => 1
  # DEBUG mvd => mdy_384
  _423 = h_2(D)->mb.cache.mvd[i_list_5(D)][_546][1];
  _424 = (int) _423;
  _425 = ABS_EXPR <_424>;
  _427 = h_2(D)->mb.cache.mvd[i_list_5(D)][_550][1];
  _428 = (int) _427;
  _429 = ABS_EXPR <_428>;
  amvd_430 = _425 + _429;
  # DEBUG amvd => amvd_430
  i_abs_431 = ABS_EXPR <mdy_384>;
  # DEBUG i_abs => i_abs_431
  # DEBUG ctxbase => 47
  _432 = amvd_430 > 2;
  _433 = (int) _432;
  _434 = amvd_430 > 32;
  _435 = (int) _434;
  ctx_436 = _433 + _435;
  # DEBUG ctx => ctx_436
  if (i_abs_431 == 0)
    goto <bb 69>;
  else
    goto <bb 70>;

  <bb 69>:
  _438 = ctx_436 + 47;
  _439 = (long int) _438;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _439
  # DEBUG b => 0
  _440 = cb_8(D)->state[_439];
  i_state_441 = (int) _440;
  # DEBUG i_state => i_state_441
  _442 = x264_cabac_transition[i_state_441][0];
  cb_8(D)->state[_439] = _442;
  _444 = x264_cabac_entropy[i_state_441][0];
  _445 = (int) _444;
  _446 = _445 + prephitmp_4570;
  cb_8(D)->f8_bits_encoded = _446;
  goto <bb 89>;

  <bb 70>:
  if (i_abs_431 <= 8)
    goto <bb 71>;
  else
    goto <bb 82>;

  <bb 71>:
  _447 = ctx_436 + 47;
  _448 = (long int) _447;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _448
  # DEBUG b => 1
  _449 = cb_8(D)->state[_448];
  i_state_450 = (int) _449;
  # DEBUG i_state => i_state_450
  _451 = x264_cabac_transition[i_state_450][1];
  cb_8(D)->state[_448] = _451;
  _453 = x264_cabac_entropy[i_state_450][1];
  _454 = (int) _453;
  _455 = _454 + prephitmp_4570;
  cb_8(D)->f8_bits_encoded = _455;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_431 > 4)
    goto <bb 72>;
  else
    goto <bb 73>;

  <bb 72>:
  goto <bb 75>;

  <bb 73>:
  # DEBUG i => 1
  if (i_abs_431 > 1)
    goto <bb 74>;
  else
    goto <bb 81>;

  <bb 74>:
  goto <bb 78>;

  <bb 75>:
  # i_3302 = PHI <1(72), i_468(76)>
  # prephitmp_4631 = PHI <_455(72), _467(76)>
  # ivtmp_3941 = PHI <3(72), ivtmp_3966(76)>
  # DEBUG i => i_3302
  _457 = ctxes[i_3302];
  _458 = (int) _457;
  _459 = _458 + 47;
  _460 = (long int) _459;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _460
  # DEBUG b => 1
  _461 = cb_8(D)->state[_460];
  i_state_462 = (int) _461;
  # DEBUG i_state => i_state_462
  _463 = x264_cabac_transition[i_state_462][1];
  cb_8(D)->state[_460] = _463;
  _465 = x264_cabac_entropy[i_state_462][1];
  _466 = (int) _465;
  _467 = _466 + prephitmp_4631;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_468 = i_3302 + 1;
  # DEBUG i => i_468
  # DEBUG i => i_468
  ivtmp_3966 = ivtmp_3941 - 1;
  if (ivtmp_3966 != 0)
    goto <bb 76>;
  else
    goto <bb 77>;

  <bb 76>:
  goto <bb 75>;

  <bb 77>:
  # _4164 = PHI <_467(75)>
  # cb__f8_bits_encoded_lsm.1157_3757 = PHI <_467(75)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1157_3757;
  _470 = i_abs_431 + -3;
  _472 = cb_8(D)->state[53];
  _473 = (int) _472;
  _474 = cabac_size_unary[_470][_473];
  _475 = (int) _474;
  _476 = _4164 + _475;
  cb_8(D)->f8_bits_encoded = _476;
  _477 = cabac_transition_unary[_470][_473];
  cb_8(D)->state[53] = _477;
  goto <bb 89>;

  <bb 78>:
  # i_3355 = PHI <1(74), i_490(80)>
  # prephitmp_4639 = PHI <_455(74), _489(80)>
  # DEBUG i => i_3355
  _479 = ctxes[i_3355];
  _480 = (int) _479;
  _481 = _480 + 47;
  _482 = (long int) _481;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _482
  # DEBUG b => 1
  _483 = cb_8(D)->state[_482];
  i_state_484 = (int) _483;
  # DEBUG i_state => i_state_484
  _485 = x264_cabac_transition[i_state_484][1];
  cb_8(D)->state[_482] = _485;
  _487 = x264_cabac_entropy[i_state_484][1];
  _488 = (int) _487;
  _489 = _488 + prephitmp_4639;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_490 = i_3355 + 1;
  # DEBUG i => i_490
  # DEBUG i => i_490
  if (i_abs_431 > i_490)
    goto <bb 80>;
  else
    goto <bb 79>;

  <bb 79>:
  # _4163 = PHI <_489(78)>
  # cb__f8_bits_encoded_lsm.1159_3759 = PHI <_489(78)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1159_3759;
  goto <bb 81>;

  <bb 80>:
  goto <bb 78>;

  <bb 81>:
  # prephitmp_4633 = PHI <_4163(79), _455(73)>
  _491 = ctxes[i_abs_431];
  _492 = (int) _491;
  _493 = _492 + 47;
  _494 = (long int) _493;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _494
  # DEBUG b => 0
  _495 = cb_8(D)->state[_494];
  i_state_496 = (int) _495;
  # DEBUG i_state => i_state_496
  _497 = x264_cabac_transition[i_state_496][0];
  cb_8(D)->state[_494] = _497;
  _499 = x264_cabac_entropy[i_state_496][0];
  _500 = (int) _499;
  _501 = _500 + prephitmp_4633;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _502 = _501 + 256;
  cb_8(D)->f8_bits_encoded = _502;
  goto <bb 89>;

  <bb 82>:
  _503 = ctx_436 + 47;
  _504 = (long int) _503;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _504
  # DEBUG b => 1
  _505 = cb_8(D)->state[_504];
  i_state_506 = (int) _505;
  # DEBUG i_state => i_state_506
  _507 = x264_cabac_transition[i_state_506][1];
  cb_8(D)->state[_504] = _507;
  _509 = x264_cabac_entropy[i_state_506][1];
  _510 = (int) _509;
  _511 = _510 + prephitmp_4570;
  cb_8(D)->f8_bits_encoded = _511;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 83>:
  # i_1588 = PHI <i_524(84), 1(82)>
  # prephitmp_4624 = PHI <_523(84), _511(82)>
  # ivtmp_4001 = PHI <ivtmp_4026(84), 3(82)>
  # DEBUG i => i_1588
  _513 = ctxes[i_1588];
  _514 = (int) _513;
  _515 = _514 + 47;
  _516 = (long int) _515;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _516
  # DEBUG b => 1
  _517 = cb_8(D)->state[_516];
  i_state_518 = (int) _517;
  # DEBUG i_state => i_state_518
  _519 = x264_cabac_transition[i_state_518][1];
  cb_8(D)->state[_516] = _519;
  _521 = x264_cabac_entropy[i_state_518][1];
  _522 = (int) _521;
  _523 = _522 + prephitmp_4624;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_524 = i_1588 + 1;
  # DEBUG i => i_524
  # DEBUG i => i_524
  ivtmp_4026 = ivtmp_4001 - 1;
  if (ivtmp_4026 != 0)
    goto <bb 84>;
  else
    goto <bb 85>;

  <bb 84>:
  goto <bb 83>;

  <bb 85>:
  # _4162 = PHI <_523(83)>
  # cb__f8_bits_encoded_lsm.1161_3761 = PHI <_523(83)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1161_3761;
  _527 = cb_8(D)->state[53];
  _528 = (int) _527;
  _529 = cabac_size_5ones[_528];
  _530 = (int) _529;
  _531 = _4162 + _530;
  _532 = cabac_transition_5ones[_528];
  cb_8(D)->state[53] = _532;
  _533 = i_abs_431 + -2;
  _534 = (unsigned int) _533;
  # DEBUG val => _534
  if (_533 <= 254)
    goto <bb 86>;
  else
    goto <bb 87>;

  <bb 86>:
  _535 = _534 + 1;
  _536 = x264_ue_size_tab[_535];
  _537 = (int) _536;
  goto <bb 88>;

  <bb 87>:
  # DEBUG val => _534
  _675 = _534 + 1;
  _676 = _675 >> 8;
  _677 = x264_ue_size_tab[_676];
  _678 = (int) _677;
  _679 = _678 + 16;
  # DEBUG val => NULL

  <bb 88>:
  # _539 = PHI <_537(86), _679(87)>
  # DEBUG val => NULL
  _540 = _539 + -3;
  _541 = _540 << 8;
  _542 = _531 + _541;
  cb_8(D)->f8_bits_encoded = _542;

  <bb 89>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_379
  # DEBUG b => mdy_384
  _385 = mdx_379 & 65535;
  _386 = mdy_384 << 16;
  _387 = _385 + _386;
  _388 = (unsigned int) _387;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _389 = block_idx_y[_10];
  _390 = (int) _389;
  _391 = block_idx_x[_10];
  _392 = (int) _391;
  # DEBUG h => h_2(D)
  # DEBUG x => _392
  # DEBUG y => _390
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _393 = _392 + 12;
  _394 = _390 * 8;
  _395 = _393 + _394;
  _396 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_395];
  # DEBUG dst => _396
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG val => NULL
  _406 = (long unsigned int) _388;
  _407 = _406 << 32;
  val64_408 = _406 + _407;
  # DEBUG val64 => val64_408
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_396] = val64_408;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _12 = _10 + 2;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _12
  # DEBUG width => 2
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _12, 2, &mvp);
  _327 = x264_scan8[_12];
  _328 = h_2(D)->mb.cache.mv[i_list_5(D)][_327][0];
  _329 = (int) _328;
  _330 = mvp[0];
  _331 = (int) _330;
  mdx_332 = _329 - _331;
  # DEBUG mdx => mdx_332
  _333 = h_2(D)->mb.cache.mv[i_list_5(D)][_327][1];
  _334 = (int) _333;
  _335 = mvp[1];
  _336 = (int) _335;
  mdy_337 = _334 - _336;
  # DEBUG mdy => mdy_337
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _12
  # DEBUG l => 0
  # DEBUG mvd => mdx_332
  _806 = _327 + -1;
  _807 = h_2(D)->mb.cache.mvd[i_list_5(D)][_806][0];
  _808 = (int) _807;
  _809 = ABS_EXPR <_808>;
  _810 = _327 + -8;
  _811 = h_2(D)->mb.cache.mvd[i_list_5(D)][_810][0];
  _812 = (int) _811;
  _813 = ABS_EXPR <_812>;
  amvd_814 = _809 + _813;
  # DEBUG amvd => amvd_814
  i_abs_815 = ABS_EXPR <mdx_332>;
  # DEBUG i_abs => i_abs_815
  # DEBUG ctxbase => 40
  _816 = amvd_814 > 2;
  _817 = (int) _816;
  _818 = amvd_814 > 32;
  _819 = (int) _818;
  ctx_820 = _817 + _819;
  # DEBUG ctx => ctx_820
  if (i_abs_815 == 0)
    goto <bb 90>;
  else
    goto <bb 91>;

  <bb 90>:
  _822 = ctx_820 + 40;
  _823 = (long int) _822;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _823
  # DEBUG b => 0
  _824 = cb_8(D)->state[_823];
  i_state_825 = (int) _824;
  # DEBUG i_state => i_state_825
  _826 = x264_cabac_transition[i_state_825][0];
  cb_8(D)->state[_823] = _826;
  _827 = cb_8(D)->f8_bits_encoded;
  _828 = x264_cabac_entropy[i_state_825][0];
  _829 = (int) _828;
  _830 = _827 + _829;
  cb_8(D)->f8_bits_encoded = _830;
  goto <bb 110>;

  <bb 91>:
  if (i_abs_815 <= 8)
    goto <bb 92>;
  else
    goto <bb 103>;

  <bb 92>:
  _831 = ctx_820 + 40;
  _832 = (long int) _831;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _832
  # DEBUG b => 1
  _833 = cb_8(D)->state[_832];
  i_state_834 = (int) _833;
  # DEBUG i_state => i_state_834
  _835 = x264_cabac_transition[i_state_834][1];
  cb_8(D)->state[_832] = _835;
  _836 = cb_8(D)->f8_bits_encoded;
  _837 = x264_cabac_entropy[i_state_834][1];
  _838 = (int) _837;
  _839 = _836 + _838;
  cb_8(D)->f8_bits_encoded = _839;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_815 > 4)
    goto <bb 93>;
  else
    goto <bb 94>;

  <bb 93>:
  goto <bb 96>;

  <bb 94>:
  # DEBUG i => 1
  if (i_abs_815 > 1)
    goto <bb 95>;
  else
    goto <bb 102>;

  <bb 95>:
  goto <bb 99>;

  <bb 96>:
  # i_3299 = PHI <1(93), i_852(97)>
  # prephitmp_4609 = PHI <_839(93), _851(97)>
  # ivtmp_3956 = PHI <3(93), ivtmp_4016(97)>
  # DEBUG i => i_3299
  _841 = ctxes[i_3299];
  _842 = (int) _841;
  _843 = _842 + 40;
  _844 = (long int) _843;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _844
  # DEBUG b => 1
  _845 = cb_8(D)->state[_844];
  i_state_846 = (int) _845;
  # DEBUG i_state => i_state_846
  _847 = x264_cabac_transition[i_state_846][1];
  cb_8(D)->state[_844] = _847;
  _849 = x264_cabac_entropy[i_state_846][1];
  _850 = (int) _849;
  _851 = _850 + prephitmp_4609;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_852 = i_3299 + 1;
  # DEBUG i => i_852
  # DEBUG i => i_852
  ivtmp_4016 = ivtmp_3956 - 1;
  if (ivtmp_4016 != 0)
    goto <bb 97>;
  else
    goto <bb 98>;

  <bb 97>:
  goto <bb 96>;

  <bb 98>:
  # _4155 = PHI <_851(96)>
  # cb__f8_bits_encoded_lsm.1151_3763 = PHI <_851(96)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1151_3763;
  _854 = i_abs_815 + -3;
  _856 = cb_8(D)->state[46];
  _857 = (int) _856;
  _858 = cabac_size_unary[_854][_857];
  _859 = (int) _858;
  _860 = _4155 + _859;
  cb_8(D)->f8_bits_encoded = _860;
  _861 = cabac_transition_unary[_854][_857];
  cb_8(D)->state[46] = _861;
  goto <bb 110>;

  <bb 99>:
  # i_3353 = PHI <1(95), i_874(101)>
  # prephitmp_4617 = PHI <_839(95), _873(101)>
  # DEBUG i => i_3353
  _863 = ctxes[i_3353];
  _864 = (int) _863;
  _865 = _864 + 40;
  _866 = (long int) _865;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _866
  # DEBUG b => 1
  _867 = cb_8(D)->state[_866];
  i_state_868 = (int) _867;
  # DEBUG i_state => i_state_868
  _869 = x264_cabac_transition[i_state_868][1];
  cb_8(D)->state[_866] = _869;
  _871 = x264_cabac_entropy[i_state_868][1];
  _872 = (int) _871;
  _873 = _872 + prephitmp_4617;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_874 = i_3353 + 1;
  # DEBUG i => i_874
  # DEBUG i => i_874
  if (i_abs_815 > i_874)
    goto <bb 101>;
  else
    goto <bb 100>;

  <bb 100>:
  # _4154 = PHI <_873(99)>
  # cb__f8_bits_encoded_lsm.1153_3765 = PHI <_873(99)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1153_3765;
  goto <bb 102>;

  <bb 101>:
  goto <bb 99>;

  <bb 102>:
  # prephitmp_4611 = PHI <_4154(100), _839(94)>
  _875 = ctxes[i_abs_815];
  _876 = (int) _875;
  _877 = _876 + 40;
  _878 = (long int) _877;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _878
  # DEBUG b => 0
  _879 = cb_8(D)->state[_878];
  i_state_880 = (int) _879;
  # DEBUG i_state => i_state_880
  _881 = x264_cabac_transition[i_state_880][0];
  cb_8(D)->state[_878] = _881;
  _883 = x264_cabac_entropy[i_state_880][0];
  _884 = (int) _883;
  _885 = _884 + prephitmp_4611;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _886 = _885 + 256;
  cb_8(D)->f8_bits_encoded = _886;
  goto <bb 110>;

  <bb 103>:
  _887 = ctx_820 + 40;
  _888 = (long int) _887;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _888
  # DEBUG b => 1
  _889 = cb_8(D)->state[_888];
  i_state_890 = (int) _889;
  # DEBUG i_state => i_state_890
  _891 = x264_cabac_transition[i_state_890][1];
  cb_8(D)->state[_888] = _891;
  _892 = cb_8(D)->f8_bits_encoded;
  _893 = x264_cabac_entropy[i_state_890][1];
  _894 = (int) _893;
  _895 = _892 + _894;
  cb_8(D)->f8_bits_encoded = _895;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 104>:
  # i_3300 = PHI <i_908(105), 1(103)>
  # prephitmp_4602 = PHI <_907(105), _895(103)>
  # ivtmp_4076 = PHI <ivtmp_4106(105), 3(103)>
  # DEBUG i => i_3300
  _897 = ctxes[i_3300];
  _898 = (int) _897;
  _899 = _898 + 40;
  _900 = (long int) _899;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _900
  # DEBUG b => 1
  _901 = cb_8(D)->state[_900];
  i_state_902 = (int) _901;
  # DEBUG i_state => i_state_902
  _903 = x264_cabac_transition[i_state_902][1];
  cb_8(D)->state[_900] = _903;
  _905 = x264_cabac_entropy[i_state_902][1];
  _906 = (int) _905;
  _907 = _906 + prephitmp_4602;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_908 = i_3300 + 1;
  # DEBUG i => i_908
  # DEBUG i => i_908
  ivtmp_4106 = ivtmp_4076 - 1;
  if (ivtmp_4106 != 0)
    goto <bb 105>;
  else
    goto <bb 106>;

  <bb 105>:
  goto <bb 104>;

  <bb 106>:
  # _4153 = PHI <_907(104)>
  # cb__f8_bits_encoded_lsm.1155_3767 = PHI <_907(104)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1155_3767;
  _911 = cb_8(D)->state[46];
  _912 = (int) _911;
  _913 = cabac_size_5ones[_912];
  _914 = (int) _913;
  _915 = _4153 + _914;
  _916 = cabac_transition_5ones[_912];
  cb_8(D)->state[46] = _916;
  _917 = i_abs_815 + -2;
  _918 = (unsigned int) _917;
  # DEBUG val => _918
  if (_917 <= 254)
    goto <bb 107>;
  else
    goto <bb 108>;

  <bb 107>:
  _919 = _918 + 1;
  _920 = x264_ue_size_tab[_919];
  _921 = (int) _920;
  goto <bb 109>;

  <bb 108>:
  # DEBUG val => _918
  _929 = _918 + 1;
  _930 = _929 >> 8;
  _931 = x264_ue_size_tab[_930];
  _932 = (int) _931;
  _933 = _932 + 16;
  # DEBUG val => NULL

  <bb 109>:
  # _923 = PHI <_921(107), _933(108)>
  # DEBUG val => NULL
  _924 = _923 + -3;
  _925 = _924 << 8;
  _926 = _915 + _925;
  cb_8(D)->f8_bits_encoded = _926;

  <bb 110>:
  # prephitmp_4574 = PHI <_860(98), _830(90), _926(109), _886(102)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _12
  # DEBUG l => 1
  # DEBUG mvd => mdy_337
  _683 = h_2(D)->mb.cache.mvd[i_list_5(D)][_806][1];
  _684 = (int) _683;
  _685 = ABS_EXPR <_684>;
  _687 = h_2(D)->mb.cache.mvd[i_list_5(D)][_810][1];
  _688 = (int) _687;
  _689 = ABS_EXPR <_688>;
  amvd_690 = _685 + _689;
  # DEBUG amvd => amvd_690
  i_abs_691 = ABS_EXPR <mdy_337>;
  # DEBUG i_abs => i_abs_691
  # DEBUG ctxbase => 47
  _692 = amvd_690 > 2;
  _693 = (int) _692;
  _694 = amvd_690 > 32;
  _695 = (int) _694;
  ctx_696 = _693 + _695;
  # DEBUG ctx => ctx_696
  if (i_abs_691 == 0)
    goto <bb 111>;
  else
    goto <bb 112>;

  <bb 111>:
  _698 = ctx_696 + 47;
  _699 = (long int) _698;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _699
  # DEBUG b => 0
  _700 = cb_8(D)->state[_699];
  i_state_701 = (int) _700;
  # DEBUG i_state => i_state_701
  _702 = x264_cabac_transition[i_state_701][0];
  cb_8(D)->state[_699] = _702;
  _704 = x264_cabac_entropy[i_state_701][0];
  _705 = (int) _704;
  _706 = _705 + prephitmp_4574;
  cb_8(D)->f8_bits_encoded = _706;
  goto <bb 131>;

  <bb 112>:
  if (i_abs_691 <= 8)
    goto <bb 113>;
  else
    goto <bb 124>;

  <bb 113>:
  _707 = ctx_696 + 47;
  _708 = (long int) _707;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _708
  # DEBUG b => 1
  _709 = cb_8(D)->state[_708];
  i_state_710 = (int) _709;
  # DEBUG i_state => i_state_710
  _711 = x264_cabac_transition[i_state_710][1];
  cb_8(D)->state[_708] = _711;
  _713 = x264_cabac_entropy[i_state_710][1];
  _714 = (int) _713;
  _715 = _714 + prephitmp_4574;
  cb_8(D)->f8_bits_encoded = _715;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_691 > 4)
    goto <bb 114>;
  else
    goto <bb 115>;

  <bb 114>:
  goto <bb 117>;

  <bb 115>:
  # DEBUG i => 1
  if (i_abs_691 > 1)
    goto <bb 116>;
  else
    goto <bb 123>;

  <bb 116>:
  goto <bb 120>;

  <bb 117>:
  # i_964 = PHI <1(114), i_728(118)>
  # prephitmp_4587 = PHI <_715(114), _727(118)>
  # ivtmp_4178 = PHI <3(114), ivtmp_4181(118)>
  # DEBUG i => i_964
  _717 = ctxes[i_964];
  _718 = (int) _717;
  _719 = _718 + 47;
  _720 = (long int) _719;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _720
  # DEBUG b => 1
  _721 = cb_8(D)->state[_720];
  i_state_722 = (int) _721;
  # DEBUG i_state => i_state_722
  _723 = x264_cabac_transition[i_state_722][1];
  cb_8(D)->state[_720] = _723;
  _725 = x264_cabac_entropy[i_state_722][1];
  _726 = (int) _725;
  _727 = _726 + prephitmp_4587;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_728 = i_964 + 1;
  # DEBUG i => i_728
  # DEBUG i => i_728
  ivtmp_4181 = ivtmp_4178 - 1;
  if (ivtmp_4181 != 0)
    goto <bb 118>;
  else
    goto <bb 119>;

  <bb 118>:
  goto <bb 117>;

  <bb 119>:
  # _4158 = PHI <_727(117)>
  # cb__f8_bits_encoded_lsm.1145_3769 = PHI <_727(117)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1145_3769;
  _730 = i_abs_691 + -3;
  _732 = cb_8(D)->state[53];
  _733 = (int) _732;
  _734 = cabac_size_unary[_730][_733];
  _735 = (int) _734;
  _736 = _4158 + _735;
  cb_8(D)->f8_bits_encoded = _736;
  _737 = cabac_transition_unary[_730][_733];
  cb_8(D)->state[53] = _737;
  goto <bb 131>;

  <bb 120>:
  # i_3360 = PHI <1(116), i_750(122)>
  # prephitmp_4595 = PHI <_715(116), _749(122)>
  # DEBUG i => i_3360
  _739 = ctxes[i_3360];
  _740 = (int) _739;
  _741 = _740 + 47;
  _742 = (long int) _741;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _742
  # DEBUG b => 1
  _743 = cb_8(D)->state[_742];
  i_state_744 = (int) _743;
  # DEBUG i_state => i_state_744
  _745 = x264_cabac_transition[i_state_744][1];
  cb_8(D)->state[_742] = _745;
  _747 = x264_cabac_entropy[i_state_744][1];
  _748 = (int) _747;
  _749 = _748 + prephitmp_4595;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_750 = i_3360 + 1;
  # DEBUG i => i_750
  # DEBUG i => i_750
  if (i_abs_691 > i_750)
    goto <bb 122>;
  else
    goto <bb 121>;

  <bb 121>:
  # _4157 = PHI <_749(120)>
  # cb__f8_bits_encoded_lsm.1147_3771 = PHI <_749(120)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1147_3771;
  goto <bb 123>;

  <bb 122>:
  goto <bb 120>;

  <bb 123>:
  # prephitmp_4589 = PHI <_4157(121), _715(115)>
  _751 = ctxes[i_abs_691];
  _752 = (int) _751;
  _753 = _752 + 47;
  _754 = (long int) _753;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _754
  # DEBUG b => 0
  _755 = cb_8(D)->state[_754];
  i_state_756 = (int) _755;
  # DEBUG i_state => i_state_756
  _757 = x264_cabac_transition[i_state_756][0];
  cb_8(D)->state[_754] = _757;
  _759 = x264_cabac_entropy[i_state_756][0];
  _760 = (int) _759;
  _761 = _760 + prephitmp_4589;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _762 = _761 + 256;
  cb_8(D)->f8_bits_encoded = _762;
  goto <bb 131>;

  <bb 124>:
  _763 = ctx_696 + 47;
  _764 = (long int) _763;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _764
  # DEBUG b => 1
  _765 = cb_8(D)->state[_764];
  i_state_766 = (int) _765;
  # DEBUG i_state => i_state_766
  _767 = x264_cabac_transition[i_state_766][1];
  cb_8(D)->state[_764] = _767;
  _769 = x264_cabac_entropy[i_state_766][1];
  _770 = (int) _769;
  _771 = _770 + prephitmp_4574;
  cb_8(D)->f8_bits_encoded = _771;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 125>:
  # i_3304 = PHI <i_784(126), 1(124)>
  # prephitmp_4580 = PHI <_783(126), _771(124)>
  # ivtmp_4172 = PHI <ivtmp_4175(126), 3(124)>
  # DEBUG i => i_3304
  _773 = ctxes[i_3304];
  _774 = (int) _773;
  _775 = _774 + 47;
  _776 = (long int) _775;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _776
  # DEBUG b => 1
  _777 = cb_8(D)->state[_776];
  i_state_778 = (int) _777;
  # DEBUG i_state => i_state_778
  _779 = x264_cabac_transition[i_state_778][1];
  cb_8(D)->state[_776] = _779;
  _781 = x264_cabac_entropy[i_state_778][1];
  _782 = (int) _781;
  _783 = _782 + prephitmp_4580;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_784 = i_3304 + 1;
  # DEBUG i => i_784
  # DEBUG i => i_784
  ivtmp_4175 = ivtmp_4172 - 1;
  if (ivtmp_4175 != 0)
    goto <bb 126>;
  else
    goto <bb 127>;

  <bb 126>:
  goto <bb 125>;

  <bb 127>:
  # _4156 = PHI <_783(125)>
  # cb__f8_bits_encoded_lsm.1149_3773 = PHI <_783(125)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1149_3773;
  _787 = cb_8(D)->state[53];
  _788 = (int) _787;
  _789 = cabac_size_5ones[_788];
  _790 = (int) _789;
  _791 = _4156 + _790;
  _792 = cabac_transition_5ones[_788];
  cb_8(D)->state[53] = _792;
  _793 = i_abs_691 + -2;
  _794 = (unsigned int) _793;
  # DEBUG val => _794
  if (_793 <= 254)
    goto <bb 128>;
  else
    goto <bb 129>;

  <bb 128>:
  _795 = _794 + 1;
  _796 = x264_ue_size_tab[_795];
  _797 = (int) _796;
  goto <bb 130>;

  <bb 129>:
  # DEBUG val => _794
  _935 = _794 + 1;
  _936 = _935 >> 8;
  _937 = x264_ue_size_tab[_936];
  _938 = (int) _937;
  _939 = _938 + 16;
  # DEBUG val => NULL

  <bb 130>:
  # _799 = PHI <_797(128), _939(129)>
  # DEBUG val => NULL
  _800 = _799 + -3;
  _801 = _800 << 8;
  _802 = _791 + _801;
  cb_8(D)->f8_bits_encoded = _802;

  <bb 131>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_332
  # DEBUG b => mdy_337
  _338 = mdx_332 & 65535;
  _339 = mdy_337 << 16;
  _340 = _338 + _339;
  _341 = (unsigned int) _340;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _342 = block_idx_y[_12];
  _343 = (int) _342;
  _344 = block_idx_x[_12];
  _345 = (int) _344;
  # DEBUG h => h_2(D)
  # DEBUG x => _345
  # DEBUG y => _343
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _346 = _345 + 12;
  _347 = _343 * 8;
  _348 = _346 + _347;
  _349 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_348];
  # DEBUG dst => _349
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG val => NULL
  _359 = (long unsigned int) _341;
  _360 = _359 << 32;
  val64_361 = _359 + _360;
  # DEBUG val64 => val64_361
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_349] = val64_361;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  goto <bb 386> (<L14>);

<L8>:
  _14 = i_3(D) * 4;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _14
  # DEBUG width => 1
  # DEBUG height => 2
  x264_mb_predict_mv (h_2(D), i_list_5(D), _14, 1, &mvp);
  _17 = x264_scan8[_14];
  _989 = h_2(D)->mb.cache.mv[i_list_5(D)][_17][0];
  _990 = (int) _989;
  _991 = mvp[0];
  _992 = (int) _991;
  mdx_993 = _990 - _992;
  # DEBUG mdx => mdx_993
  _994 = h_2(D)->mb.cache.mv[i_list_5(D)][_17][1];
  _995 = (int) _994;
  _996 = mvp[1];
  _997 = (int) _996;
  mdy_998 = _995 - _997;
  # DEBUG mdy => mdy_998
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _14
  # DEBUG l => 0
  # DEBUG mvd => mdx_993
  _1160 = _17 + -1;
  _1161 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1160][0];
  _1162 = (int) _1161;
  _1163 = ABS_EXPR <_1162>;
  _1164 = _17 + -8;
  _1165 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1164][0];
  _1166 = (int) _1165;
  _1167 = ABS_EXPR <_1166>;
  amvd_1168 = _1163 + _1167;
  # DEBUG amvd => amvd_1168
  i_abs_1169 = ABS_EXPR <mdx_993>;
  # DEBUG i_abs => i_abs_1169
  # DEBUG ctxbase => 40
  _1170 = amvd_1168 > 2;
  _1171 = (int) _1170;
  _1172 = amvd_1168 > 32;
  _1173 = (int) _1172;
  ctx_1174 = _1171 + _1173;
  # DEBUG ctx => ctx_1174
  if (i_abs_1169 == 0)
    goto <bb 133>;
  else
    goto <bb 134>;

  <bb 133>:
  _1176 = ctx_1174 + 40;
  _1177 = (long int) _1176;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1177
  # DEBUG b => 0
  _1178 = cb_8(D)->state[_1177];
  i_state_1179 = (int) _1178;
  # DEBUG i_state => i_state_1179
  _1180 = x264_cabac_transition[i_state_1179][0];
  cb_8(D)->state[_1177] = _1180;
  _1181 = cb_8(D)->f8_bits_encoded;
  _1182 = x264_cabac_entropy[i_state_1179][0];
  _1183 = (int) _1182;
  _1184 = _1181 + _1183;
  cb_8(D)->f8_bits_encoded = _1184;
  goto <bb 153>;

  <bb 134>:
  if (i_abs_1169 <= 8)
    goto <bb 135>;
  else
    goto <bb 146>;

  <bb 135>:
  _1185 = ctx_1174 + 40;
  _1186 = (long int) _1185;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1186
  # DEBUG b => 1
  _1187 = cb_8(D)->state[_1186];
  i_state_1188 = (int) _1187;
  # DEBUG i_state => i_state_1188
  _1189 = x264_cabac_transition[i_state_1188][1];
  cb_8(D)->state[_1186] = _1189;
  _1190 = cb_8(D)->f8_bits_encoded;
  _1191 = x264_cabac_entropy[i_state_1188][1];
  _1192 = (int) _1191;
  _1193 = _1190 + _1192;
  cb_8(D)->f8_bits_encoded = _1193;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_1169 > 4)
    goto <bb 136>;
  else
    goto <bb 137>;

  <bb 136>:
  goto <bb 139>;

  <bb 137>:
  # DEBUG i => 1
  if (i_abs_1169 > 1)
    goto <bb 138>;
  else
    goto <bb 145>;

  <bb 138>:
  goto <bb 142>;

  <bb 139>:
  # i_413 = PHI <1(136), i_1206(140)>
  # prephitmp_4557 = PHI <_1193(136), _1205(140)>
  # ivtmp_4101 = PHI <3(136), ivtmp_4689(140)>
  # DEBUG i => i_413
  _1195 = ctxes[i_413];
  _1196 = (int) _1195;
  _1197 = _1196 + 40;
  _1198 = (long int) _1197;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1198
  # DEBUG b => 1
  _1199 = cb_8(D)->state[_1198];
  i_state_1200 = (int) _1199;
  # DEBUG i_state => i_state_1200
  _1201 = x264_cabac_transition[i_state_1200][1];
  cb_8(D)->state[_1198] = _1201;
  _1203 = x264_cabac_entropy[i_state_1200][1];
  _1204 = (int) _1203;
  _1205 = _1204 + prephitmp_4557;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1206 = i_413 + 1;
  # DEBUG i => i_1206
  # DEBUG i => i_1206
  ivtmp_4689 = ivtmp_4101 - 1;
  if (ivtmp_4689 != 0)
    goto <bb 140>;
  else
    goto <bb 141>;

  <bb 140>:
  goto <bb 139>;

  <bb 141>:
  # _4149 = PHI <_1205(139)>
  # cb__f8_bits_encoded_lsm.1187_3775 = PHI <_1205(139)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1187_3775;
  _1208 = i_abs_1169 + -3;
  _1210 = cb_8(D)->state[46];
  _1211 = (int) _1210;
  _1212 = cabac_size_unary[_1208][_1211];
  _1213 = (int) _1212;
  _1214 = _4149 + _1213;
  cb_8(D)->f8_bits_encoded = _1214;
  _1215 = cabac_transition_unary[_1208][_1211];
  cb_8(D)->state[46] = _1215;
  goto <bb 153>;

  <bb 142>:
  # i_3344 = PHI <1(138), i_1228(144)>
  # prephitmp_4565 = PHI <_1193(138), _1227(144)>
  # DEBUG i => i_3344
  _1217 = ctxes[i_3344];
  _1218 = (int) _1217;
  _1219 = _1218 + 40;
  _1220 = (long int) _1219;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1220
  # DEBUG b => 1
  _1221 = cb_8(D)->state[_1220];
  i_state_1222 = (int) _1221;
  # DEBUG i_state => i_state_1222
  _1223 = x264_cabac_transition[i_state_1222][1];
  cb_8(D)->state[_1220] = _1223;
  _1225 = x264_cabac_entropy[i_state_1222][1];
  _1226 = (int) _1225;
  _1227 = _1226 + prephitmp_4565;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1228 = i_3344 + 1;
  # DEBUG i => i_1228
  # DEBUG i => i_1228
  if (i_abs_1169 > i_1228)
    goto <bb 144>;
  else
    goto <bb 143>;

  <bb 143>:
  # _4148 = PHI <_1227(142)>
  # cb__f8_bits_encoded_lsm.1189_3777 = PHI <_1227(142)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1189_3777;
  goto <bb 145>;

  <bb 144>:
  goto <bb 142>;

  <bb 145>:
  # prephitmp_4559 = PHI <_4148(143), _1193(137)>
  _1229 = ctxes[i_abs_1169];
  _1230 = (int) _1229;
  _1231 = _1230 + 40;
  _1232 = (long int) _1231;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1232
  # DEBUG b => 0
  _1233 = cb_8(D)->state[_1232];
  i_state_1234 = (int) _1233;
  # DEBUG i_state => i_state_1234
  _1235 = x264_cabac_transition[i_state_1234][0];
  cb_8(D)->state[_1232] = _1235;
  _1237 = x264_cabac_entropy[i_state_1234][0];
  _1238 = (int) _1237;
  _1239 = _1238 + prephitmp_4559;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _1240 = _1239 + 256;
  cb_8(D)->f8_bits_encoded = _1240;
  goto <bb 153>;

  <bb 146>:
  _1241 = ctx_1174 + 40;
  _1242 = (long int) _1241;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1242
  # DEBUG b => 1
  _1243 = cb_8(D)->state[_1242];
  i_state_1244 = (int) _1243;
  # DEBUG i_state => i_state_1244
  _1245 = x264_cabac_transition[i_state_1244][1];
  cb_8(D)->state[_1242] = _1245;
  _1246 = cb_8(D)->f8_bits_encoded;
  _1247 = x264_cabac_entropy[i_state_1244][1];
  _1248 = (int) _1247;
  _1249 = _1246 + _1248;
  cb_8(D)->f8_bits_encoded = _1249;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 147>:
  # i_3319 = PHI <i_1262(148), 1(146)>
  # prephitmp_4550 = PHI <_1261(148), _1249(146)>
  # ivtmp_4111 = PHI <ivtmp_3911(148), 3(146)>
  # DEBUG i => i_3319
  _1251 = ctxes[i_3319];
  _1252 = (int) _1251;
  _1253 = _1252 + 40;
  _1254 = (long int) _1253;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1254
  # DEBUG b => 1
  _1255 = cb_8(D)->state[_1254];
  i_state_1256 = (int) _1255;
  # DEBUG i_state => i_state_1256
  _1257 = x264_cabac_transition[i_state_1256][1];
  cb_8(D)->state[_1254] = _1257;
  _1259 = x264_cabac_entropy[i_state_1256][1];
  _1260 = (int) _1259;
  _1261 = _1260 + prephitmp_4550;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1262 = i_3319 + 1;
  # DEBUG i => i_1262
  # DEBUG i => i_1262
  ivtmp_3911 = ivtmp_4111 - 1;
  if (ivtmp_3911 != 0)
    goto <bb 148>;
  else
    goto <bb 149>;

  <bb 148>:
  goto <bb 147>;

  <bb 149>:
  # _4147 = PHI <_1261(147)>
  # cb__f8_bits_encoded_lsm.1191_3779 = PHI <_1261(147)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1191_3779;
  _1265 = cb_8(D)->state[46];
  _1266 = (int) _1265;
  _1267 = cabac_size_5ones[_1266];
  _1268 = (int) _1267;
  _1269 = _4147 + _1268;
  _1270 = cabac_transition_5ones[_1266];
  cb_8(D)->state[46] = _1270;
  _1271 = i_abs_1169 + -2;
  _1272 = (unsigned int) _1271;
  # DEBUG val => _1272
  if (_1271 <= 254)
    goto <bb 150>;
  else
    goto <bb 151>;

  <bb 150>:
  _1273 = _1272 + 1;
  _1274 = x264_ue_size_tab[_1273];
  _1275 = (int) _1274;
  goto <bb 152>;

  <bb 151>:
  # DEBUG val => _1272
  _1283 = _1272 + 1;
  _1284 = _1283 >> 8;
  _1285 = x264_ue_size_tab[_1284];
  _1286 = (int) _1285;
  _1287 = _1286 + 16;
  # DEBUG val => NULL

  <bb 152>:
  # _1277 = PHI <_1275(150), _1287(151)>
  # DEBUG val => NULL
  _1278 = _1277 + -3;
  _1279 = _1278 << 8;
  _1280 = _1269 + _1279;
  cb_8(D)->f8_bits_encoded = _1280;

  <bb 153>:
  # prephitmp_4474 = PHI <_1214(141), _1184(133), _1280(152), _1240(145)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _14
  # DEBUG l => 1
  # DEBUG mvd => mdy_998
  _1037 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1160][1];
  _1038 = (int) _1037;
  _1039 = ABS_EXPR <_1038>;
  _1041 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1164][1];
  _1042 = (int) _1041;
  _1043 = ABS_EXPR <_1042>;
  amvd_1044 = _1039 + _1043;
  # DEBUG amvd => amvd_1044
  i_abs_1045 = ABS_EXPR <mdy_998>;
  # DEBUG i_abs => i_abs_1045
  # DEBUG ctxbase => 47
  _1046 = amvd_1044 > 2;
  _1047 = (int) _1046;
  _1048 = amvd_1044 > 32;
  _1049 = (int) _1048;
  ctx_1050 = _1047 + _1049;
  # DEBUG ctx => ctx_1050
  if (i_abs_1045 == 0)
    goto <bb 154>;
  else
    goto <bb 155>;

  <bb 154>:
  _1052 = ctx_1050 + 47;
  _1053 = (long int) _1052;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1053
  # DEBUG b => 0
  _1054 = cb_8(D)->state[_1053];
  i_state_1055 = (int) _1054;
  # DEBUG i_state => i_state_1055
  _1056 = x264_cabac_transition[i_state_1055][0];
  cb_8(D)->state[_1053] = _1056;
  _1058 = x264_cabac_entropy[i_state_1055][0];
  _1059 = (int) _1058;
  _1060 = _1059 + prephitmp_4474;
  cb_8(D)->f8_bits_encoded = _1060;
  goto <bb 174>;

  <bb 155>:
  if (i_abs_1045 <= 8)
    goto <bb 156>;
  else
    goto <bb 167>;

  <bb 156>:
  _1061 = ctx_1050 + 47;
  _1062 = (long int) _1061;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1062
  # DEBUG b => 1
  _1063 = cb_8(D)->state[_1062];
  i_state_1064 = (int) _1063;
  # DEBUG i_state => i_state_1064
  _1065 = x264_cabac_transition[i_state_1064][1];
  cb_8(D)->state[_1062] = _1065;
  _1067 = x264_cabac_entropy[i_state_1064][1];
  _1068 = (int) _1067;
  _1069 = _1068 + prephitmp_4474;
  cb_8(D)->f8_bits_encoded = _1069;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_1045 > 4)
    goto <bb 157>;
  else
    goto <bb 158>;

  <bb 157>:
  goto <bb 160>;

  <bb 158>:
  # DEBUG i => 1
  if (i_abs_1045 > 1)
    goto <bb 159>;
  else
    goto <bb 166>;

  <bb 159>:
  goto <bb 163>;

  <bb 160>:
  # i_3301 = PHI <1(157), i_1082(161)>
  # prephitmp_4535 = PHI <_1069(157), _1081(161)>
  # ivtmp_4046 = PHI <3(157), ivtmp_4071(161)>
  # DEBUG i => i_3301
  _1071 = ctxes[i_3301];
  _1072 = (int) _1071;
  _1073 = _1072 + 47;
  _1074 = (long int) _1073;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1074
  # DEBUG b => 1
  _1075 = cb_8(D)->state[_1074];
  i_state_1076 = (int) _1075;
  # DEBUG i_state => i_state_1076
  _1077 = x264_cabac_transition[i_state_1076][1];
  cb_8(D)->state[_1074] = _1077;
  _1079 = x264_cabac_entropy[i_state_1076][1];
  _1080 = (int) _1079;
  _1081 = _1080 + prephitmp_4535;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1082 = i_3301 + 1;
  # DEBUG i => i_1082
  # DEBUG i => i_1082
  ivtmp_4071 = ivtmp_4046 - 1;
  if (ivtmp_4071 != 0)
    goto <bb 161>;
  else
    goto <bb 162>;

  <bb 161>:
  goto <bb 160>;

  <bb 162>:
  # _4152 = PHI <_1081(160)>
  # cb__f8_bits_encoded_lsm.1181_3781 = PHI <_1081(160)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1181_3781;
  _1084 = i_abs_1045 + -3;
  _1086 = cb_8(D)->state[53];
  _1087 = (int) _1086;
  _1088 = cabac_size_unary[_1084][_1087];
  _1089 = (int) _1088;
  _1090 = _4152 + _1089;
  cb_8(D)->f8_bits_encoded = _1090;
  _1091 = cabac_transition_unary[_1084][_1087];
  cb_8(D)->state[53] = _1091;
  goto <bb 174>;

  <bb 163>:
  # i_3362 = PHI <1(159), i_1104(165)>
  # prephitmp_4543 = PHI <_1069(159), _1103(165)>
  # DEBUG i => i_3362
  _1093 = ctxes[i_3362];
  _1094 = (int) _1093;
  _1095 = _1094 + 47;
  _1096 = (long int) _1095;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1096
  # DEBUG b => 1
  _1097 = cb_8(D)->state[_1096];
  i_state_1098 = (int) _1097;
  # DEBUG i_state => i_state_1098
  _1099 = x264_cabac_transition[i_state_1098][1];
  cb_8(D)->state[_1096] = _1099;
  _1101 = x264_cabac_entropy[i_state_1098][1];
  _1102 = (int) _1101;
  _1103 = _1102 + prephitmp_4543;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1104 = i_3362 + 1;
  # DEBUG i => i_1104
  # DEBUG i => i_1104
  if (i_abs_1045 > i_1104)
    goto <bb 165>;
  else
    goto <bb 164>;

  <bb 164>:
  # _4151 = PHI <_1103(163)>
  # cb__f8_bits_encoded_lsm.1183_3783 = PHI <_1103(163)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1183_3783;
  goto <bb 166>;

  <bb 165>:
  goto <bb 163>;

  <bb 166>:
  # prephitmp_4537 = PHI <_4151(164), _1069(158)>
  _1105 = ctxes[i_abs_1045];
  _1106 = (int) _1105;
  _1107 = _1106 + 47;
  _1108 = (long int) _1107;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1108
  # DEBUG b => 0
  _1109 = cb_8(D)->state[_1108];
  i_state_1110 = (int) _1109;
  # DEBUG i_state => i_state_1110
  _1111 = x264_cabac_transition[i_state_1110][0];
  cb_8(D)->state[_1108] = _1111;
  _1113 = x264_cabac_entropy[i_state_1110][0];
  _1114 = (int) _1113;
  _1115 = _1114 + prephitmp_4537;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _1116 = _1115 + 256;
  cb_8(D)->f8_bits_encoded = _1116;
  goto <bb 174>;

  <bb 167>:
  _1117 = ctx_1050 + 47;
  _1118 = (long int) _1117;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1118
  # DEBUG b => 1
  _1119 = cb_8(D)->state[_1118];
  i_state_1120 = (int) _1119;
  # DEBUG i_state => i_state_1120
  _1121 = x264_cabac_transition[i_state_1120][1];
  cb_8(D)->state[_1118] = _1121;
  _1123 = x264_cabac_entropy[i_state_1120][1];
  _1124 = (int) _1123;
  _1125 = _1124 + prephitmp_4474;
  cb_8(D)->f8_bits_encoded = _1125;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 168>:
  # i_3303 = PHI <i_1138(169), 1(167)>
  # prephitmp_4528 = PHI <_1137(169), _1125(167)>
  # ivtmp_4641 = PHI <ivtmp_4081(169), 3(167)>
  # DEBUG i => i_3303
  _1127 = ctxes[i_3303];
  _1128 = (int) _1127;
  _1129 = _1128 + 47;
  _1130 = (long int) _1129;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1130
  # DEBUG b => 1
  _1131 = cb_8(D)->state[_1130];
  i_state_1132 = (int) _1131;
  # DEBUG i_state => i_state_1132
  _1133 = x264_cabac_transition[i_state_1132][1];
  cb_8(D)->state[_1130] = _1133;
  _1135 = x264_cabac_entropy[i_state_1132][1];
  _1136 = (int) _1135;
  _1137 = _1136 + prephitmp_4528;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1138 = i_3303 + 1;
  # DEBUG i => i_1138
  # DEBUG i => i_1138
  ivtmp_4081 = ivtmp_4641 - 1;
  if (ivtmp_4081 != 0)
    goto <bb 169>;
  else
    goto <bb 170>;

  <bb 169>:
  goto <bb 168>;

  <bb 170>:
  # _4150 = PHI <_1137(168)>
  # cb__f8_bits_encoded_lsm.1185_3785 = PHI <_1137(168)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1185_3785;
  _1141 = cb_8(D)->state[53];
  _1142 = (int) _1141;
  _1143 = cabac_size_5ones[_1142];
  _1144 = (int) _1143;
  _1145 = _4150 + _1144;
  _1146 = cabac_transition_5ones[_1142];
  cb_8(D)->state[53] = _1146;
  _1147 = i_abs_1045 + -2;
  _1148 = (unsigned int) _1147;
  # DEBUG val => _1148
  if (_1147 <= 254)
    goto <bb 171>;
  else
    goto <bb 172>;

  <bb 171>:
  _1149 = _1148 + 1;
  _1150 = x264_ue_size_tab[_1149];
  _1151 = (int) _1150;
  goto <bb 173>;

  <bb 172>:
  # DEBUG val => _1148
  _1289 = _1148 + 1;
  _1290 = _1289 >> 8;
  _1291 = x264_ue_size_tab[_1290];
  _1292 = (int) _1291;
  _1293 = _1292 + 16;
  # DEBUG val => NULL

  <bb 173>:
  # _1153 = PHI <_1151(171), _1293(172)>
  # DEBUG val => NULL
  _1154 = _1153 + -3;
  _1155 = _1154 << 8;
  _1156 = _1145 + _1155;
  cb_8(D)->f8_bits_encoded = _1156;

  <bb 174>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_993
  # DEBUG b => mdy_998
  _999 = mdx_993 & 65535;
  _1000 = mdy_998 << 16;
  _1001 = _999 + _1000;
  _1002 = (unsigned int) _1001;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _1003 = block_idx_y[_14];
  _1004 = (int) _1003;
  _1005 = block_idx_x[_14];
  _1006 = (int) _1005;
  # DEBUG h => h_2(D)
  # DEBUG x => _1006
  # DEBUG y => _1004
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _1007 = _1006 + 12;
  _1008 = _1004 * 8;
  _1009 = _1007 + _1008;
  _1010 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_1009];
  # DEBUG dst => _1010
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_1010] = _1002;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint32_t *)_1010 + 32B] = _1002;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _16 = _14 + 1;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _16
  # DEBUG width => 1
  # DEBUG height => 2
  x264_mb_predict_mv (h_2(D), i_list_5(D), _16, 1, &mvp);
  _941 = x264_scan8[_16];
  _942 = h_2(D)->mb.cache.mv[i_list_5(D)][_941][0];
  _943 = (int) _942;
  _944 = mvp[0];
  _945 = (int) _944;
  mdx_946 = _943 - _945;
  # DEBUG mdx => mdx_946
  _947 = h_2(D)->mb.cache.mv[i_list_5(D)][_941][1];
  _948 = (int) _947;
  _949 = mvp[1];
  _950 = (int) _949;
  mdy_951 = _948 - _950;
  # DEBUG mdy => mdy_951
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _16
  # DEBUG l => 0
  # DEBUG mvd => mdx_946
  _1420 = _941 + -1;
  _1421 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1420][0];
  _1422 = (int) _1421;
  _1423 = ABS_EXPR <_1422>;
  _1424 = _941 + -8;
  _1425 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1424][0];
  _1426 = (int) _1425;
  _1427 = ABS_EXPR <_1426>;
  amvd_1428 = _1423 + _1427;
  # DEBUG amvd => amvd_1428
  i_abs_1429 = ABS_EXPR <mdx_946>;
  # DEBUG i_abs => i_abs_1429
  # DEBUG ctxbase => 40
  _1430 = amvd_1428 > 2;
  _1431 = (int) _1430;
  _1432 = amvd_1428 > 32;
  _1433 = (int) _1432;
  ctx_1434 = _1431 + _1433;
  # DEBUG ctx => ctx_1434
  if (i_abs_1429 == 0)
    goto <bb 175>;
  else
    goto <bb 176>;

  <bb 175>:
  _1436 = ctx_1434 + 40;
  _1437 = (long int) _1436;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1437
  # DEBUG b => 0
  _1438 = cb_8(D)->state[_1437];
  i_state_1439 = (int) _1438;
  # DEBUG i_state => i_state_1439
  _1440 = x264_cabac_transition[i_state_1439][0];
  cb_8(D)->state[_1437] = _1440;
  _1441 = cb_8(D)->f8_bits_encoded;
  _1442 = x264_cabac_entropy[i_state_1439][0];
  _1443 = (int) _1442;
  _1444 = _1441 + _1443;
  cb_8(D)->f8_bits_encoded = _1444;
  goto <bb 195>;

  <bb 176>:
  if (i_abs_1429 <= 8)
    goto <bb 177>;
  else
    goto <bb 188>;

  <bb 177>:
  _1445 = ctx_1434 + 40;
  _1446 = (long int) _1445;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1446
  # DEBUG b => 1
  _1447 = cb_8(D)->state[_1446];
  i_state_1448 = (int) _1447;
  # DEBUG i_state => i_state_1448
  _1449 = x264_cabac_transition[i_state_1448][1];
  cb_8(D)->state[_1446] = _1449;
  _1450 = cb_8(D)->f8_bits_encoded;
  _1451 = x264_cabac_entropy[i_state_1448][1];
  _1452 = (int) _1451;
  _1453 = _1450 + _1452;
  cb_8(D)->f8_bits_encoded = _1453;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_1429 > 4)
    goto <bb 178>;
  else
    goto <bb 179>;

  <bb 178>:
  goto <bb 181>;

  <bb 179>:
  # DEBUG i => 1
  if (i_abs_1429 > 1)
    goto <bb 180>;
  else
    goto <bb 187>;

  <bb 180>:
  goto <bb 184>;

  <bb 181>:
  # i_3313 = PHI <1(178), i_1466(182)>
  # prephitmp_4513 = PHI <_1453(178), _1465(182)>
  # ivtmp_3986 = PHI <3(178), ivtmp_4011(182)>
  # DEBUG i => i_3313
  _1455 = ctxes[i_3313];
  _1456 = (int) _1455;
  _1457 = _1456 + 40;
  _1458 = (long int) _1457;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1458
  # DEBUG b => 1
  _1459 = cb_8(D)->state[_1458];
  i_state_1460 = (int) _1459;
  # DEBUG i_state => i_state_1460
  _1461 = x264_cabac_transition[i_state_1460][1];
  cb_8(D)->state[_1458] = _1461;
  _1463 = x264_cabac_entropy[i_state_1460][1];
  _1464 = (int) _1463;
  _1465 = _1464 + prephitmp_4513;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1466 = i_3313 + 1;
  # DEBUG i => i_1466
  # DEBUG i => i_1466
  ivtmp_4011 = ivtmp_3986 - 1;
  if (ivtmp_4011 != 0)
    goto <bb 182>;
  else
    goto <bb 183>;

  <bb 182>:
  goto <bb 181>;

  <bb 183>:
  # _4143 = PHI <_1465(181)>
  # cb__f8_bits_encoded_lsm.1175_3787 = PHI <_1465(181)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1175_3787;
  _1468 = i_abs_1429 + -3;
  _1470 = cb_8(D)->state[46];
  _1471 = (int) _1470;
  _1472 = cabac_size_unary[_1468][_1471];
  _1473 = (int) _1472;
  _1474 = _4143 + _1473;
  cb_8(D)->f8_bits_encoded = _1474;
  _1475 = cabac_transition_unary[_1468][_1471];
  cb_8(D)->state[46] = _1475;
  goto <bb 195>;

  <bb 184>:
  # i_3349 = PHI <1(180), i_1488(186)>
  # prephitmp_4521 = PHI <_1453(180), _1487(186)>
  # DEBUG i => i_3349
  _1477 = ctxes[i_3349];
  _1478 = (int) _1477;
  _1479 = _1478 + 40;
  _1480 = (long int) _1479;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1480
  # DEBUG b => 1
  _1481 = cb_8(D)->state[_1480];
  i_state_1482 = (int) _1481;
  # DEBUG i_state => i_state_1482
  _1483 = x264_cabac_transition[i_state_1482][1];
  cb_8(D)->state[_1480] = _1483;
  _1485 = x264_cabac_entropy[i_state_1482][1];
  _1486 = (int) _1485;
  _1487 = _1486 + prephitmp_4521;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1488 = i_3349 + 1;
  # DEBUG i => i_1488
  # DEBUG i => i_1488
  if (i_abs_1429 > i_1488)
    goto <bb 186>;
  else
    goto <bb 185>;

  <bb 185>:
  # _4142 = PHI <_1487(184)>
  # cb__f8_bits_encoded_lsm.1177_3789 = PHI <_1487(184)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1177_3789;
  goto <bb 187>;

  <bb 186>:
  goto <bb 184>;

  <bb 187>:
  # prephitmp_4515 = PHI <_4142(185), _1453(179)>
  _1489 = ctxes[i_abs_1429];
  _1490 = (int) _1489;
  _1491 = _1490 + 40;
  _1492 = (long int) _1491;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1492
  # DEBUG b => 0
  _1493 = cb_8(D)->state[_1492];
  i_state_1494 = (int) _1493;
  # DEBUG i_state => i_state_1494
  _1495 = x264_cabac_transition[i_state_1494][0];
  cb_8(D)->state[_1492] = _1495;
  _1497 = x264_cabac_entropy[i_state_1494][0];
  _1498 = (int) _1497;
  _1499 = _1498 + prephitmp_4515;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _1500 = _1499 + 256;
  cb_8(D)->f8_bits_encoded = _1500;
  goto <bb 195>;

  <bb 188>:
  _1501 = ctx_1434 + 40;
  _1502 = (long int) _1501;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1502
  # DEBUG b => 1
  _1503 = cb_8(D)->state[_1502];
  i_state_1504 = (int) _1503;
  # DEBUG i_state => i_state_1504
  _1505 = x264_cabac_transition[i_state_1504][1];
  cb_8(D)->state[_1502] = _1505;
  _1506 = cb_8(D)->f8_bits_encoded;
  _1507 = x264_cabac_entropy[i_state_1504][1];
  _1508 = (int) _1507;
  _1509 = _1506 + _1508;
  cb_8(D)->f8_bits_encoded = _1509;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 189>:
  # i_3158 = PHI <i_1522(190), 1(188)>
  # prephitmp_4506 = PHI <_1521(190), _1509(188)>
  # ivtmp_4545 = PHI <ivtmp_4021(190), 3(188)>
  # DEBUG i => i_3158
  _1511 = ctxes[i_3158];
  _1512 = (int) _1511;
  _1513 = _1512 + 40;
  _1514 = (long int) _1513;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1514
  # DEBUG b => 1
  _1515 = cb_8(D)->state[_1514];
  i_state_1516 = (int) _1515;
  # DEBUG i_state => i_state_1516
  _1517 = x264_cabac_transition[i_state_1516][1];
  cb_8(D)->state[_1514] = _1517;
  _1519 = x264_cabac_entropy[i_state_1516][1];
  _1520 = (int) _1519;
  _1521 = _1520 + prephitmp_4506;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1522 = i_3158 + 1;
  # DEBUG i => i_1522
  # DEBUG i => i_1522
  ivtmp_4021 = ivtmp_4545 - 1;
  if (ivtmp_4021 != 0)
    goto <bb 190>;
  else
    goto <bb 191>;

  <bb 190>:
  goto <bb 189>;

  <bb 191>:
  # _4141 = PHI <_1521(189)>
  # cb__f8_bits_encoded_lsm.1179_3791 = PHI <_1521(189)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1179_3791;
  _1525 = cb_8(D)->state[46];
  _1526 = (int) _1525;
  _1527 = cabac_size_5ones[_1526];
  _1528 = (int) _1527;
  _1529 = _4141 + _1528;
  _1530 = cabac_transition_5ones[_1526];
  cb_8(D)->state[46] = _1530;
  _1531 = i_abs_1429 + -2;
  _1532 = (unsigned int) _1531;
  # DEBUG val => _1532
  if (_1531 <= 254)
    goto <bb 192>;
  else
    goto <bb 193>;

  <bb 192>:
  _1533 = _1532 + 1;
  _1534 = x264_ue_size_tab[_1533];
  _1535 = (int) _1534;
  goto <bb 194>;

  <bb 193>:
  # DEBUG val => _1532
  _1543 = _1532 + 1;
  _1544 = _1543 >> 8;
  _1545 = x264_ue_size_tab[_1544];
  _1546 = (int) _1545;
  _1547 = _1546 + 16;
  # DEBUG val => NULL

  <bb 194>:
  # _1537 = PHI <_1535(192), _1547(193)>
  # DEBUG val => NULL
  _1538 = _1537 + -3;
  _1539 = _1538 << 8;
  _1540 = _1529 + _1539;
  cb_8(D)->f8_bits_encoded = _1540;

  <bb 195>:
  # prephitmp_4478 = PHI <_1474(183), _1444(175), _1540(194), _1500(187)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _16
  # DEBUG l => 1
  # DEBUG mvd => mdy_951
  _1297 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1420][1];
  _1298 = (int) _1297;
  _1299 = ABS_EXPR <_1298>;
  _1301 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1424][1];
  _1302 = (int) _1301;
  _1303 = ABS_EXPR <_1302>;
  amvd_1304 = _1299 + _1303;
  # DEBUG amvd => amvd_1304
  i_abs_1305 = ABS_EXPR <mdy_951>;
  # DEBUG i_abs => i_abs_1305
  # DEBUG ctxbase => 47
  _1306 = amvd_1304 > 2;
  _1307 = (int) _1306;
  _1308 = amvd_1304 > 32;
  _1309 = (int) _1308;
  ctx_1310 = _1307 + _1309;
  # DEBUG ctx => ctx_1310
  if (i_abs_1305 == 0)
    goto <bb 196>;
  else
    goto <bb 197>;

  <bb 196>:
  _1312 = ctx_1310 + 47;
  _1313 = (long int) _1312;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1313
  # DEBUG b => 0
  _1314 = cb_8(D)->state[_1313];
  i_state_1315 = (int) _1314;
  # DEBUG i_state => i_state_1315
  _1316 = x264_cabac_transition[i_state_1315][0];
  cb_8(D)->state[_1313] = _1316;
  _1318 = x264_cabac_entropy[i_state_1315][0];
  _1319 = (int) _1318;
  _1320 = _1319 + prephitmp_4478;
  cb_8(D)->f8_bits_encoded = _1320;
  goto <bb 216>;

  <bb 197>:
  if (i_abs_1305 <= 8)
    goto <bb 198>;
  else
    goto <bb 209>;

  <bb 198>:
  _1321 = ctx_1310 + 47;
  _1322 = (long int) _1321;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1322
  # DEBUG b => 1
  _1323 = cb_8(D)->state[_1322];
  i_state_1324 = (int) _1323;
  # DEBUG i_state => i_state_1324
  _1325 = x264_cabac_transition[i_state_1324][1];
  cb_8(D)->state[_1322] = _1325;
  _1327 = x264_cabac_entropy[i_state_1324][1];
  _1328 = (int) _1327;
  _1329 = _1328 + prephitmp_4478;
  cb_8(D)->f8_bits_encoded = _1329;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_1305 > 4)
    goto <bb 199>;
  else
    goto <bb 200>;

  <bb 199>:
  goto <bb 202>;

  <bb 200>:
  # DEBUG i => 1
  if (i_abs_1305 > 1)
    goto <bb 201>;
  else
    goto <bb 208>;

  <bb 201>:
  goto <bb 205>;

  <bb 202>:
  # i_1593 = PHI <1(199), i_1342(203)>
  # prephitmp_4491 = PHI <_1329(199), _1341(203)>
  # ivtmp_3926 = PHI <3(199), ivtmp_3951(203)>
  # DEBUG i => i_1593
  _1331 = ctxes[i_1593];
  _1332 = (int) _1331;
  _1333 = _1332 + 47;
  _1334 = (long int) _1333;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1334
  # DEBUG b => 1
  _1335 = cb_8(D)->state[_1334];
  i_state_1336 = (int) _1335;
  # DEBUG i_state => i_state_1336
  _1337 = x264_cabac_transition[i_state_1336][1];
  cb_8(D)->state[_1334] = _1337;
  _1339 = x264_cabac_entropy[i_state_1336][1];
  _1340 = (int) _1339;
  _1341 = _1340 + prephitmp_4491;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1342 = i_1593 + 1;
  # DEBUG i => i_1342
  # DEBUG i => i_1342
  ivtmp_3951 = ivtmp_3926 - 1;
  if (ivtmp_3951 != 0)
    goto <bb 203>;
  else
    goto <bb 204>;

  <bb 203>:
  goto <bb 202>;

  <bb 204>:
  # _4146 = PHI <_1341(202)>
  # cb__f8_bits_encoded_lsm.1169_3793 = PHI <_1341(202)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1169_3793;
  _1344 = i_abs_1305 + -3;
  _1346 = cb_8(D)->state[53];
  _1347 = (int) _1346;
  _1348 = cabac_size_unary[_1344][_1347];
  _1349 = (int) _1348;
  _1350 = _4146 + _1349;
  cb_8(D)->f8_bits_encoded = _1350;
  _1351 = cabac_transition_unary[_1344][_1347];
  cb_8(D)->state[53] = _1351;
  goto <bb 216>;

  <bb 205>:
  # i_3348 = PHI <1(201), i_1364(207)>
  # prephitmp_4499 = PHI <_1329(201), _1363(207)>
  # DEBUG i => i_3348
  _1353 = ctxes[i_3348];
  _1354 = (int) _1353;
  _1355 = _1354 + 47;
  _1356 = (long int) _1355;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1356
  # DEBUG b => 1
  _1357 = cb_8(D)->state[_1356];
  i_state_1358 = (int) _1357;
  # DEBUG i_state => i_state_1358
  _1359 = x264_cabac_transition[i_state_1358][1];
  cb_8(D)->state[_1356] = _1359;
  _1361 = x264_cabac_entropy[i_state_1358][1];
  _1362 = (int) _1361;
  _1363 = _1362 + prephitmp_4499;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1364 = i_3348 + 1;
  # DEBUG i => i_1364
  # DEBUG i => i_1364
  if (i_abs_1305 > i_1364)
    goto <bb 207>;
  else
    goto <bb 206>;

  <bb 206>:
  # _4145 = PHI <_1363(205)>
  # cb__f8_bits_encoded_lsm.1171_3795 = PHI <_1363(205)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1171_3795;
  goto <bb 208>;

  <bb 207>:
  goto <bb 205>;

  <bb 208>:
  # prephitmp_4493 = PHI <_4145(206), _1329(200)>
  _1365 = ctxes[i_abs_1305];
  _1366 = (int) _1365;
  _1367 = _1366 + 47;
  _1368 = (long int) _1367;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1368
  # DEBUG b => 0
  _1369 = cb_8(D)->state[_1368];
  i_state_1370 = (int) _1369;
  # DEBUG i_state => i_state_1370
  _1371 = x264_cabac_transition[i_state_1370][0];
  cb_8(D)->state[_1368] = _1371;
  _1373 = x264_cabac_entropy[i_state_1370][0];
  _1374 = (int) _1373;
  _1375 = _1374 + prephitmp_4493;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _1376 = _1375 + 256;
  cb_8(D)->f8_bits_encoded = _1376;
  goto <bb 216>;

  <bb 209>:
  _1377 = ctx_1310 + 47;
  _1378 = (long int) _1377;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1378
  # DEBUG b => 1
  _1379 = cb_8(D)->state[_1378];
  i_state_1380 = (int) _1379;
  # DEBUG i_state => i_state_1380
  _1381 = x264_cabac_transition[i_state_1380][1];
  cb_8(D)->state[_1378] = _1381;
  _1383 = x264_cabac_entropy[i_state_1380][1];
  _1384 = (int) _1383;
  _1385 = _1384 + prephitmp_4478;
  cb_8(D)->f8_bits_encoded = _1385;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 210>:
  # i_3317 = PHI <i_1398(211), 1(209)>
  # prephitmp_4484 = PHI <_1397(211), _1385(209)>
  # ivtmp_4449 = PHI <ivtmp_3961(211), 3(209)>
  # DEBUG i => i_3317
  _1387 = ctxes[i_3317];
  _1388 = (int) _1387;
  _1389 = _1388 + 47;
  _1390 = (long int) _1389;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1390
  # DEBUG b => 1
  _1391 = cb_8(D)->state[_1390];
  i_state_1392 = (int) _1391;
  # DEBUG i_state => i_state_1392
  _1393 = x264_cabac_transition[i_state_1392][1];
  cb_8(D)->state[_1390] = _1393;
  _1395 = x264_cabac_entropy[i_state_1392][1];
  _1396 = (int) _1395;
  _1397 = _1396 + prephitmp_4484;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1398 = i_3317 + 1;
  # DEBUG i => i_1398
  # DEBUG i => i_1398
  ivtmp_3961 = ivtmp_4449 - 1;
  if (ivtmp_3961 != 0)
    goto <bb 211>;
  else
    goto <bb 212>;

  <bb 211>:
  goto <bb 210>;

  <bb 212>:
  # _4144 = PHI <_1397(210)>
  # cb__f8_bits_encoded_lsm.1173_3797 = PHI <_1397(210)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1173_3797;
  _1401 = cb_8(D)->state[53];
  _1402 = (int) _1401;
  _1403 = cabac_size_5ones[_1402];
  _1404 = (int) _1403;
  _1405 = _4144 + _1404;
  _1406 = cabac_transition_5ones[_1402];
  cb_8(D)->state[53] = _1406;
  _1407 = i_abs_1305 + -2;
  _1408 = (unsigned int) _1407;
  # DEBUG val => _1408
  if (_1407 <= 254)
    goto <bb 213>;
  else
    goto <bb 214>;

  <bb 213>:
  _1409 = _1408 + 1;
  _1410 = x264_ue_size_tab[_1409];
  _1411 = (int) _1410;
  goto <bb 215>;

  <bb 214>:
  # DEBUG val => _1408
  _1549 = _1408 + 1;
  _1550 = _1549 >> 8;
  _1551 = x264_ue_size_tab[_1550];
  _1552 = (int) _1551;
  _1553 = _1552 + 16;
  # DEBUG val => NULL

  <bb 215>:
  # _1413 = PHI <_1411(213), _1553(214)>
  # DEBUG val => NULL
  _1414 = _1413 + -3;
  _1415 = _1414 << 8;
  _1416 = _1405 + _1415;
  cb_8(D)->f8_bits_encoded = _1416;

  <bb 216>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_946
  # DEBUG b => mdy_951
  _952 = mdx_946 & 65535;
  _953 = mdy_951 << 16;
  _954 = _952 + _953;
  _955 = (unsigned int) _954;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _956 = block_idx_y[_16];
  _957 = (int) _956;
  _958 = block_idx_x[_16];
  _959 = (int) _958;
  # DEBUG h => h_2(D)
  # DEBUG x => _959
  # DEBUG y => _957
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _960 = _959 + 12;
  _961 = _957 * 8;
  _962 = _960 + _961;
  _963 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_962];
  # DEBUG dst => _963
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_963] = _955;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint32_t *)_963 + 32B] = _955;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  goto <bb 386> (<L14>);

<L17>:
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG i => i_3(D)
  _1555 = i_3(D) * 4;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1555
  # DEBUG width => 1
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _1555, 1, &mvp);
  _1702 = x264_scan8[_1555];
  _1703 = h_2(D)->mb.cache.mv[i_list_5(D)][_1702][0];
  _1704 = (int) _1703;
  _1705 = mvp[0];
  _1706 = (int) _1705;
  mdx_1707 = _1704 - _1706;
  # DEBUG mdx => mdx_1707
  _1708 = h_2(D)->mb.cache.mv[i_list_5(D)][_1702][1];
  _1709 = (int) _1708;
  _1710 = mvp[1];
  _1711 = (int) _1710;
  mdy_1712 = _1709 - _1711;
  # DEBUG mdy => mdy_1712
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1555
  # DEBUG l => 0
  # DEBUG mvd => mdx_1707
  _1875 = _1702 + -1;
  _1876 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1875][0];
  _1877 = (int) _1876;
  _1878 = ABS_EXPR <_1877>;
  _1879 = _1702 + -8;
  _1880 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1879][0];
  _1881 = (int) _1880;
  _1882 = ABS_EXPR <_1881>;
  amvd_1883 = _1878 + _1882;
  # DEBUG amvd => amvd_1883
  i_abs_1884 = ABS_EXPR <mdx_1707>;
  # DEBUG i_abs => i_abs_1884
  # DEBUG ctxbase => 40
  _1885 = amvd_1883 > 2;
  _1886 = (int) _1885;
  _1887 = amvd_1883 > 32;
  _1888 = (int) _1887;
  ctx_1889 = _1886 + _1888;
  # DEBUG ctx => ctx_1889
  if (i_abs_1884 == 0)
    goto <bb 218>;
  else
    goto <bb 219>;

  <bb 218>:
  _1891 = ctx_1889 + 40;
  _1892 = (long int) _1891;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1892
  # DEBUG b => 0
  _1893 = cb_8(D)->state[_1892];
  i_state_1894 = (int) _1893;
  # DEBUG i_state => i_state_1894
  _1895 = x264_cabac_transition[i_state_1894][0];
  cb_8(D)->state[_1892] = _1895;
  _1896 = cb_8(D)->f8_bits_encoded;
  _1897 = x264_cabac_entropy[i_state_1894][0];
  _1898 = (int) _1897;
  _1899 = _1896 + _1898;
  cb_8(D)->f8_bits_encoded = _1899;
  goto <bb 238>;

  <bb 219>:
  if (i_abs_1884 <= 8)
    goto <bb 220>;
  else
    goto <bb 231>;

  <bb 220>:
  _1900 = ctx_1889 + 40;
  _1901 = (long int) _1900;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1901
  # DEBUG b => 1
  _1902 = cb_8(D)->state[_1901];
  i_state_1903 = (int) _1902;
  # DEBUG i_state => i_state_1903
  _1904 = x264_cabac_transition[i_state_1903][1];
  cb_8(D)->state[_1901] = _1904;
  _1905 = cb_8(D)->f8_bits_encoded;
  _1906 = x264_cabac_entropy[i_state_1903][1];
  _1907 = (int) _1906;
  _1908 = _1905 + _1907;
  cb_8(D)->f8_bits_encoded = _1908;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_1884 > 4)
    goto <bb 221>;
  else
    goto <bb 222>;

  <bb 221>:
  goto <bb 224>;

  <bb 222>:
  # DEBUG i => 1
  if (i_abs_1884 > 1)
    goto <bb 223>;
  else
    goto <bb 230>;

  <bb 223>:
  goto <bb 227>;

  <bb 224>:
  # i_2854 = PHI <1(221), i_1921(225)>
  # prephitmp_4461 = PHI <_1908(221), _1920(225)>
  # ivtmp_4214 = PHI <3(221), ivtmp_4217(225)>
  # DEBUG i => i_2854
  _1910 = ctxes[i_2854];
  _1911 = (int) _1910;
  _1912 = _1911 + 40;
  _1913 = (long int) _1912;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1913
  # DEBUG b => 1
  _1914 = cb_8(D)->state[_1913];
  i_state_1915 = (int) _1914;
  # DEBUG i_state => i_state_1915
  _1916 = x264_cabac_transition[i_state_1915][1];
  cb_8(D)->state[_1913] = _1916;
  _1918 = x264_cabac_entropy[i_state_1915][1];
  _1919 = (int) _1918;
  _1920 = _1919 + prephitmp_4461;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1921 = i_2854 + 1;
  # DEBUG i => i_1921
  # DEBUG i => i_1921
  ivtmp_4217 = ivtmp_4214 - 1;
  if (ivtmp_4217 != 0)
    goto <bb 225>;
  else
    goto <bb 226>;

  <bb 225>:
  goto <bb 224>;

  <bb 226>:
  # _4137 = PHI <_1920(224)>
  # cb__f8_bits_encoded_lsm.1139_3799 = PHI <_1920(224)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1139_3799;
  _1923 = i_abs_1884 + -3;
  _1925 = cb_8(D)->state[46];
  _1926 = (int) _1925;
  _1927 = cabac_size_unary[_1923][_1926];
  _1928 = (int) _1927;
  _1929 = _4137 + _1928;
  cb_8(D)->f8_bits_encoded = _1929;
  _1930 = cabac_transition_unary[_1923][_1926];
  cb_8(D)->state[46] = _1930;
  goto <bb 238>;

  <bb 227>:
  # i_1697 = PHI <1(223), i_1943(229)>
  # prephitmp_4469 = PHI <_1908(223), _1942(229)>
  # DEBUG i => i_1697
  _1932 = ctxes[i_1697];
  _1933 = (int) _1932;
  _1934 = _1933 + 40;
  _1935 = (long int) _1934;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1935
  # DEBUG b => 1
  _1936 = cb_8(D)->state[_1935];
  i_state_1937 = (int) _1936;
  # DEBUG i_state => i_state_1937
  _1938 = x264_cabac_transition[i_state_1937][1];
  cb_8(D)->state[_1935] = _1938;
  _1940 = x264_cabac_entropy[i_state_1937][1];
  _1941 = (int) _1940;
  _1942 = _1941 + prephitmp_4469;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1943 = i_1697 + 1;
  # DEBUG i => i_1943
  # DEBUG i => i_1943
  if (i_abs_1884 > i_1943)
    goto <bb 229>;
  else
    goto <bb 228>;

  <bb 228>:
  # _4136 = PHI <_1942(227)>
  # cb__f8_bits_encoded_lsm.1141_3801 = PHI <_1942(227)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1141_3801;
  goto <bb 230>;

  <bb 229>:
  goto <bb 227>;

  <bb 230>:
  # prephitmp_4463 = PHI <_4136(228), _1908(222)>
  _1944 = ctxes[i_abs_1884];
  _1945 = (int) _1944;
  _1946 = _1945 + 40;
  _1947 = (long int) _1946;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1947
  # DEBUG b => 0
  _1948 = cb_8(D)->state[_1947];
  i_state_1949 = (int) _1948;
  # DEBUG i_state => i_state_1949
  _1950 = x264_cabac_transition[i_state_1949][0];
  cb_8(D)->state[_1947] = _1950;
  _1952 = x264_cabac_entropy[i_state_1949][0];
  _1953 = (int) _1952;
  _1954 = _1953 + prephitmp_4463;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _1955 = _1954 + 256;
  cb_8(D)->f8_bits_encoded = _1955;
  goto <bb 238>;

  <bb 231>:
  _1956 = ctx_1889 + 40;
  _1957 = (long int) _1956;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1957
  # DEBUG b => 1
  _1958 = cb_8(D)->state[_1957];
  i_state_1959 = (int) _1958;
  # DEBUG i_state => i_state_1959
  _1960 = x264_cabac_transition[i_state_1959][1];
  cb_8(D)->state[_1957] = _1960;
  _1961 = cb_8(D)->f8_bits_encoded;
  _1962 = x264_cabac_entropy[i_state_1959][1];
  _1963 = (int) _1962;
  _1964 = _1961 + _1963;
  cb_8(D)->f8_bits_encoded = _1964;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 232>:
  # i_3279 = PHI <i_1977(233), 1(231)>
  # prephitmp_4454 = PHI <_1976(233), _1964(231)>
  # ivtmp_4208 = PHI <ivtmp_4211(233), 3(231)>
  # DEBUG i => i_3279
  _1966 = ctxes[i_3279];
  _1967 = (int) _1966;
  _1968 = _1967 + 40;
  _1969 = (long int) _1968;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1969
  # DEBUG b => 1
  _1970 = cb_8(D)->state[_1969];
  i_state_1971 = (int) _1970;
  # DEBUG i_state => i_state_1971
  _1972 = x264_cabac_transition[i_state_1971][1];
  cb_8(D)->state[_1969] = _1972;
  _1974 = x264_cabac_entropy[i_state_1971][1];
  _1975 = (int) _1974;
  _1976 = _1975 + prephitmp_4454;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1977 = i_3279 + 1;
  # DEBUG i => i_1977
  # DEBUG i => i_1977
  ivtmp_4211 = ivtmp_4208 - 1;
  if (ivtmp_4211 != 0)
    goto <bb 233>;
  else
    goto <bb 234>;

  <bb 233>:
  goto <bb 232>;

  <bb 234>:
  # _4135 = PHI <_1976(232)>
  # cb__f8_bits_encoded_lsm.1143_3803 = PHI <_1976(232)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1143_3803;
  _1980 = cb_8(D)->state[46];
  _1981 = (int) _1980;
  _1982 = cabac_size_5ones[_1981];
  _1983 = (int) _1982;
  _1984 = _4135 + _1983;
  _1985 = cabac_transition_5ones[_1981];
  cb_8(D)->state[46] = _1985;
  _1986 = i_abs_1884 + -2;
  _1987 = (unsigned int) _1986;
  # DEBUG val => _1987
  if (_1986 <= 254)
    goto <bb 235>;
  else
    goto <bb 236>;

  <bb 235>:
  _1988 = _1987 + 1;
  _1989 = x264_ue_size_tab[_1988];
  _1990 = (int) _1989;
  goto <bb 237>;

  <bb 236>:
  # DEBUG val => _1987
  _1998 = _1987 + 1;
  _1999 = _1998 >> 8;
  _2000 = x264_ue_size_tab[_1999];
  _2001 = (int) _2000;
  _2002 = _2001 + 16;
  # DEBUG val => NULL

  <bb 237>:
  # _1992 = PHI <_1990(235), _2002(236)>
  # DEBUG val => NULL
  _1993 = _1992 + -3;
  _1994 = _1993 << 8;
  _1995 = _1984 + _1994;
  cb_8(D)->f8_bits_encoded = _1995;

  <bb 238>:
  # prephitmp_4282 = PHI <_1929(226), _1899(218), _1995(237), _1955(230)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1555
  # DEBUG l => 1
  # DEBUG mvd => mdy_1712
  _1752 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1875][1];
  _1753 = (int) _1752;
  _1754 = ABS_EXPR <_1753>;
  _1756 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1879][1];
  _1757 = (int) _1756;
  _1758 = ABS_EXPR <_1757>;
  amvd_1759 = _1754 + _1758;
  # DEBUG amvd => amvd_1759
  i_abs_1760 = ABS_EXPR <mdy_1712>;
  # DEBUG i_abs => i_abs_1760
  # DEBUG ctxbase => 47
  _1761 = amvd_1759 > 2;
  _1762 = (int) _1761;
  _1763 = amvd_1759 > 32;
  _1764 = (int) _1763;
  ctx_1765 = _1762 + _1764;
  # DEBUG ctx => ctx_1765
  if (i_abs_1760 == 0)
    goto <bb 239>;
  else
    goto <bb 240>;

  <bb 239>:
  _1767 = ctx_1765 + 47;
  _1768 = (long int) _1767;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1768
  # DEBUG b => 0
  _1769 = cb_8(D)->state[_1768];
  i_state_1770 = (int) _1769;
  # DEBUG i_state => i_state_1770
  _1771 = x264_cabac_transition[i_state_1770][0];
  cb_8(D)->state[_1768] = _1771;
  _1773 = x264_cabac_entropy[i_state_1770][0];
  _1774 = (int) _1773;
  _1775 = _1774 + prephitmp_4282;
  cb_8(D)->f8_bits_encoded = _1775;
  goto <bb 259>;

  <bb 240>:
  if (i_abs_1760 <= 8)
    goto <bb 241>;
  else
    goto <bb 252>;

  <bb 241>:
  _1776 = ctx_1765 + 47;
  _1777 = (long int) _1776;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1777
  # DEBUG b => 1
  _1778 = cb_8(D)->state[_1777];
  i_state_1779 = (int) _1778;
  # DEBUG i_state => i_state_1779
  _1780 = x264_cabac_transition[i_state_1779][1];
  cb_8(D)->state[_1777] = _1780;
  _1782 = x264_cabac_entropy[i_state_1779][1];
  _1783 = (int) _1782;
  _1784 = _1783 + prephitmp_4282;
  cb_8(D)->f8_bits_encoded = _1784;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_1760 > 4)
    goto <bb 242>;
  else
    goto <bb 243>;

  <bb 242>:
  goto <bb 245>;

  <bb 243>:
  # DEBUG i => 1
  if (i_abs_1760 > 1)
    goto <bb 244>;
  else
    goto <bb 251>;

  <bb 244>:
  goto <bb 248>;

  <bb 245>:
  # i_3277 = PHI <1(242), i_1797(246)>
  # prephitmp_4439 = PHI <_1784(242), _1796(246)>
  # ivtmp_4226 = PHI <3(242), ivtmp_4229(246)>
  # DEBUG i => i_3277
  _1786 = ctxes[i_3277];
  _1787 = (int) _1786;
  _1788 = _1787 + 47;
  _1789 = (long int) _1788;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1789
  # DEBUG b => 1
  _1790 = cb_8(D)->state[_1789];
  i_state_1791 = (int) _1790;
  # DEBUG i_state => i_state_1791
  _1792 = x264_cabac_transition[i_state_1791][1];
  cb_8(D)->state[_1789] = _1792;
  _1794 = x264_cabac_entropy[i_state_1791][1];
  _1795 = (int) _1794;
  _1796 = _1795 + prephitmp_4439;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1797 = i_3277 + 1;
  # DEBUG i => i_1797
  # DEBUG i => i_1797
  ivtmp_4229 = ivtmp_4226 - 1;
  if (ivtmp_4229 != 0)
    goto <bb 246>;
  else
    goto <bb 247>;

  <bb 246>:
  goto <bb 245>;

  <bb 247>:
  # _4140 = PHI <_1796(245)>
  # cb__f8_bits_encoded_lsm.1133_3805 = PHI <_1796(245)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1133_3805;
  _1799 = i_abs_1760 + -3;
  _1801 = cb_8(D)->state[53];
  _1802 = (int) _1801;
  _1803 = cabac_size_unary[_1799][_1802];
  _1804 = (int) _1803;
  _1805 = _4140 + _1804;
  cb_8(D)->f8_bits_encoded = _1805;
  _1806 = cabac_transition_unary[_1799][_1802];
  cb_8(D)->state[53] = _1806;
  goto <bb 259>;

  <bb 248>:
  # i_1140 = PHI <1(244), i_1819(250)>
  # prephitmp_4447 = PHI <_1784(244), _1818(250)>
  # DEBUG i => i_1140
  _1808 = ctxes[i_1140];
  _1809 = (int) _1808;
  _1810 = _1809 + 47;
  _1811 = (long int) _1810;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1811
  # DEBUG b => 1
  _1812 = cb_8(D)->state[_1811];
  i_state_1813 = (int) _1812;
  # DEBUG i_state => i_state_1813
  _1814 = x264_cabac_transition[i_state_1813][1];
  cb_8(D)->state[_1811] = _1814;
  _1816 = x264_cabac_entropy[i_state_1813][1];
  _1817 = (int) _1816;
  _1818 = _1817 + prephitmp_4447;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1819 = i_1140 + 1;
  # DEBUG i => i_1819
  # DEBUG i => i_1819
  if (i_abs_1760 > i_1819)
    goto <bb 250>;
  else
    goto <bb 249>;

  <bb 249>:
  # _4139 = PHI <_1818(248)>
  # cb__f8_bits_encoded_lsm.1135_3807 = PHI <_1818(248)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1135_3807;
  goto <bb 251>;

  <bb 250>:
  goto <bb 248>;

  <bb 251>:
  # prephitmp_4441 = PHI <_4139(249), _1784(243)>
  _1820 = ctxes[i_abs_1760];
  _1821 = (int) _1820;
  _1822 = _1821 + 47;
  _1823 = (long int) _1822;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1823
  # DEBUG b => 0
  _1824 = cb_8(D)->state[_1823];
  i_state_1825 = (int) _1824;
  # DEBUG i_state => i_state_1825
  _1826 = x264_cabac_transition[i_state_1825][0];
  cb_8(D)->state[_1823] = _1826;
  _1828 = x264_cabac_entropy[i_state_1825][0];
  _1829 = (int) _1828;
  _1830 = _1829 + prephitmp_4441;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _1831 = _1830 + 256;
  cb_8(D)->f8_bits_encoded = _1831;
  goto <bb 259>;

  <bb 252>:
  _1832 = ctx_1765 + 47;
  _1833 = (long int) _1832;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1833
  # DEBUG b => 1
  _1834 = cb_8(D)->state[_1833];
  i_state_1835 = (int) _1834;
  # DEBUG i_state => i_state_1835
  _1836 = x264_cabac_transition[i_state_1835][1];
  cb_8(D)->state[_1833] = _1836;
  _1838 = x264_cabac_entropy[i_state_1835][1];
  _1839 = (int) _1838;
  _1840 = _1839 + prephitmp_4282;
  cb_8(D)->f8_bits_encoded = _1840;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 253>:
  # i_3278 = PHI <i_1853(254), 1(252)>
  # prephitmp_4432 = PHI <_1852(254), _1840(252)>
  # ivtmp_4220 = PHI <ivtmp_4224(254), 3(252)>
  # DEBUG i => i_3278
  _1842 = ctxes[i_3278];
  _1843 = (int) _1842;
  _1844 = _1843 + 47;
  _1845 = (long int) _1844;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _1845
  # DEBUG b => 1
  _1846 = cb_8(D)->state[_1845];
  i_state_1847 = (int) _1846;
  # DEBUG i_state => i_state_1847
  _1848 = x264_cabac_transition[i_state_1847][1];
  cb_8(D)->state[_1845] = _1848;
  _1850 = x264_cabac_entropy[i_state_1847][1];
  _1851 = (int) _1850;
  _1852 = _1851 + prephitmp_4432;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_1853 = i_3278 + 1;
  # DEBUG i => i_1853
  # DEBUG i => i_1853
  ivtmp_4224 = ivtmp_4220 - 1;
  if (ivtmp_4224 != 0)
    goto <bb 254>;
  else
    goto <bb 255>;

  <bb 254>:
  goto <bb 253>;

  <bb 255>:
  # _4138 = PHI <_1852(253)>
  # cb__f8_bits_encoded_lsm.1137_3809 = PHI <_1852(253)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1137_3809;
  _1856 = cb_8(D)->state[53];
  _1857 = (int) _1856;
  _1858 = cabac_size_5ones[_1857];
  _1859 = (int) _1858;
  _1860 = _4138 + _1859;
  _1861 = cabac_transition_5ones[_1857];
  cb_8(D)->state[53] = _1861;
  _1862 = i_abs_1760 + -2;
  _1863 = (unsigned int) _1862;
  # DEBUG val => _1863
  if (_1862 <= 254)
    goto <bb 256>;
  else
    goto <bb 257>;

  <bb 256>:
  _1864 = _1863 + 1;
  _1865 = x264_ue_size_tab[_1864];
  _1866 = (int) _1865;
  goto <bb 258>;

  <bb 257>:
  # DEBUG val => _1863
  _2004 = _1863 + 1;
  _2005 = _2004 >> 8;
  _2006 = x264_ue_size_tab[_2005];
  _2007 = (int) _2006;
  _2008 = _2007 + 16;
  # DEBUG val => NULL

  <bb 258>:
  # _1868 = PHI <_1866(256), _2008(257)>
  # DEBUG val => NULL
  _1869 = _1868 + -3;
  _1870 = _1869 << 8;
  _1871 = _1860 + _1870;
  cb_8(D)->f8_bits_encoded = _1871;

  <bb 259>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_1707
  # DEBUG b => mdy_1712
  _1713 = mdx_1707 & 65535;
  _1714 = mdy_1712 << 16;
  _1715 = _1713 + _1714;
  _1716 = (unsigned int) _1715;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _1717 = block_idx_y[_1555];
  _1718 = (int) _1717;
  _1719 = block_idx_x[_1555];
  _1720 = (int) _1719;
  # DEBUG h => h_2(D)
  # DEBUG x => _1720
  # DEBUG y => _1718
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _1721 = _1720 + 12;
  _1722 = _1718 * 8;
  _1723 = _1721 + _1722;
  _1724 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_1723];
  # DEBUG dst => _1724
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_1724] = _1716;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _1556 = _1555 + 1;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1556
  # DEBUG width => 1
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _1556, 1, &mvp);
  _1654 = x264_scan8[_1556];
  _1655 = h_2(D)->mb.cache.mv[i_list_5(D)][_1654][0];
  _1656 = (int) _1655;
  _1657 = mvp[0];
  _1658 = (int) _1657;
  mdx_1659 = _1656 - _1658;
  # DEBUG mdx => mdx_1659
  _1660 = h_2(D)->mb.cache.mv[i_list_5(D)][_1654][1];
  _1661 = (int) _1660;
  _1662 = mvp[1];
  _1663 = (int) _1662;
  mdy_1664 = _1661 - _1663;
  # DEBUG mdy => mdy_1664
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1556
  # DEBUG l => 0
  # DEBUG mvd => mdx_1659
  _2135 = _1654 + -1;
  _2136 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2135][0];
  _2137 = (int) _2136;
  _2138 = ABS_EXPR <_2137>;
  _2139 = _1654 + -8;
  _2140 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2139][0];
  _2141 = (int) _2140;
  _2142 = ABS_EXPR <_2141>;
  amvd_2143 = _2138 + _2142;
  # DEBUG amvd => amvd_2143
  i_abs_2144 = ABS_EXPR <mdx_1659>;
  # DEBUG i_abs => i_abs_2144
  # DEBUG ctxbase => 40
  _2145 = amvd_2143 > 2;
  _2146 = (int) _2145;
  _2147 = amvd_2143 > 32;
  _2148 = (int) _2147;
  ctx_2149 = _2146 + _2148;
  # DEBUG ctx => ctx_2149
  if (i_abs_2144 == 0)
    goto <bb 260>;
  else
    goto <bb 261>;

  <bb 260>:
  _2151 = ctx_2149 + 40;
  _2152 = (long int) _2151;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2152
  # DEBUG b => 0
  _2153 = cb_8(D)->state[_2152];
  i_state_2154 = (int) _2153;
  # DEBUG i_state => i_state_2154
  _2155 = x264_cabac_transition[i_state_2154][0];
  cb_8(D)->state[_2152] = _2155;
  _2156 = cb_8(D)->f8_bits_encoded;
  _2157 = x264_cabac_entropy[i_state_2154][0];
  _2158 = (int) _2157;
  _2159 = _2156 + _2158;
  cb_8(D)->f8_bits_encoded = _2159;
  goto <bb 280>;

  <bb 261>:
  if (i_abs_2144 <= 8)
    goto <bb 262>;
  else
    goto <bb 273>;

  <bb 262>:
  _2160 = ctx_2149 + 40;
  _2161 = (long int) _2160;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2161
  # DEBUG b => 1
  _2162 = cb_8(D)->state[_2161];
  i_state_2163 = (int) _2162;
  # DEBUG i_state => i_state_2163
  _2164 = x264_cabac_transition[i_state_2163][1];
  cb_8(D)->state[_2161] = _2164;
  _2165 = cb_8(D)->f8_bits_encoded;
  _2166 = x264_cabac_entropy[i_state_2163][1];
  _2167 = (int) _2166;
  _2168 = _2165 + _2167;
  cb_8(D)->f8_bits_encoded = _2168;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_2144 > 4)
    goto <bb 263>;
  else
    goto <bb 264>;

  <bb 263>:
  goto <bb 266>;

  <bb 264>:
  # DEBUG i => 1
  if (i_abs_2144 > 1)
    goto <bb 265>;
  else
    goto <bb 272>;

  <bb 265>:
  goto <bb 269>;

  <bb 266>:
  # i_2257 = PHI <1(263), i_2181(267)>
  # prephitmp_4417 = PHI <_2168(263), _2180(267)>
  # ivtmp_4190 = PHI <3(263), ivtmp_4193(267)>
  # DEBUG i => i_2257
  _2170 = ctxes[i_2257];
  _2171 = (int) _2170;
  _2172 = _2171 + 40;
  _2173 = (long int) _2172;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2173
  # DEBUG b => 1
  _2174 = cb_8(D)->state[_2173];
  i_state_2175 = (int) _2174;
  # DEBUG i_state => i_state_2175
  _2176 = x264_cabac_transition[i_state_2175][1];
  cb_8(D)->state[_2173] = _2176;
  _2178 = x264_cabac_entropy[i_state_2175][1];
  _2179 = (int) _2178;
  _2180 = _2179 + prephitmp_4417;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2181 = i_2257 + 1;
  # DEBUG i => i_2181
  # DEBUG i => i_2181
  ivtmp_4193 = ivtmp_4190 - 1;
  if (ivtmp_4193 != 0)
    goto <bb 267>;
  else
    goto <bb 268>;

  <bb 267>:
  goto <bb 266>;

  <bb 268>:
  # _4131 = PHI <_2180(266)>
  # cb__f8_bits_encoded_lsm.1127_3811 = PHI <_2180(266)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1127_3811;
  _2183 = i_abs_2144 + -3;
  _2185 = cb_8(D)->state[46];
  _2186 = (int) _2185;
  _2187 = cabac_size_unary[_2183][_2186];
  _2188 = (int) _2187;
  _2189 = _4131 + _2188;
  cb_8(D)->f8_bits_encoded = _2189;
  _2190 = cabac_transition_unary[_2183][_2186];
  cb_8(D)->state[46] = _2190;
  goto <bb 280>;

  <bb 269>:
  # i_1264 = PHI <1(265), i_2203(271)>
  # prephitmp_4425 = PHI <_2168(265), _2202(271)>
  # DEBUG i => i_1264
  _2192 = ctxes[i_1264];
  _2193 = (int) _2192;
  _2194 = _2193 + 40;
  _2195 = (long int) _2194;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2195
  # DEBUG b => 1
  _2196 = cb_8(D)->state[_2195];
  i_state_2197 = (int) _2196;
  # DEBUG i_state => i_state_2197
  _2198 = x264_cabac_transition[i_state_2197][1];
  cb_8(D)->state[_2195] = _2198;
  _2200 = x264_cabac_entropy[i_state_2197][1];
  _2201 = (int) _2200;
  _2202 = _2201 + prephitmp_4425;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2203 = i_1264 + 1;
  # DEBUG i => i_2203
  # DEBUG i => i_2203
  if (i_abs_2144 > i_2203)
    goto <bb 271>;
  else
    goto <bb 270>;

  <bb 270>:
  # _4130 = PHI <_2202(269)>
  # cb__f8_bits_encoded_lsm.1129_3813 = PHI <_2202(269)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1129_3813;
  goto <bb 272>;

  <bb 271>:
  goto <bb 269>;

  <bb 272>:
  # prephitmp_4419 = PHI <_4130(270), _2168(264)>
  _2204 = ctxes[i_abs_2144];
  _2205 = (int) _2204;
  _2206 = _2205 + 40;
  _2207 = (long int) _2206;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2207
  # DEBUG b => 0
  _2208 = cb_8(D)->state[_2207];
  i_state_2209 = (int) _2208;
  # DEBUG i_state => i_state_2209
  _2210 = x264_cabac_transition[i_state_2209][0];
  cb_8(D)->state[_2207] = _2210;
  _2212 = x264_cabac_entropy[i_state_2209][0];
  _2213 = (int) _2212;
  _2214 = _2213 + prephitmp_4419;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _2215 = _2214 + 256;
  cb_8(D)->f8_bits_encoded = _2215;
  goto <bb 280>;

  <bb 273>:
  _2216 = ctx_2149 + 40;
  _2217 = (long int) _2216;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2217
  # DEBUG b => 1
  _2218 = cb_8(D)->state[_2217];
  i_state_2219 = (int) _2218;
  # DEBUG i_state => i_state_2219
  _2220 = x264_cabac_transition[i_state_2219][1];
  cb_8(D)->state[_2217] = _2220;
  _2221 = cb_8(D)->f8_bits_encoded;
  _2222 = x264_cabac_entropy[i_state_2219][1];
  _2223 = (int) _2222;
  _2224 = _2221 + _2223;
  cb_8(D)->f8_bits_encoded = _2224;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 274>:
  # i_3295 = PHI <i_2237(275), 1(273)>
  # prephitmp_4410 = PHI <_2236(275), _2224(273)>
  # ivtmp_4184 = PHI <ivtmp_4187(275), 3(273)>
  # DEBUG i => i_3295
  _2226 = ctxes[i_3295];
  _2227 = (int) _2226;
  _2228 = _2227 + 40;
  _2229 = (long int) _2228;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2229
  # DEBUG b => 1
  _2230 = cb_8(D)->state[_2229];
  i_state_2231 = (int) _2230;
  # DEBUG i_state => i_state_2231
  _2232 = x264_cabac_transition[i_state_2231][1];
  cb_8(D)->state[_2229] = _2232;
  _2234 = x264_cabac_entropy[i_state_2231][1];
  _2235 = (int) _2234;
  _2236 = _2235 + prephitmp_4410;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2237 = i_3295 + 1;
  # DEBUG i => i_2237
  # DEBUG i => i_2237
  ivtmp_4187 = ivtmp_4184 - 1;
  if (ivtmp_4187 != 0)
    goto <bb 275>;
  else
    goto <bb 276>;

  <bb 275>:
  goto <bb 274>;

  <bb 276>:
  # _4129 = PHI <_2236(274)>
  # cb__f8_bits_encoded_lsm.1131_3815 = PHI <_2236(274)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1131_3815;
  _2240 = cb_8(D)->state[46];
  _2241 = (int) _2240;
  _2242 = cabac_size_5ones[_2241];
  _2243 = (int) _2242;
  _2244 = _4129 + _2243;
  _2245 = cabac_transition_5ones[_2241];
  cb_8(D)->state[46] = _2245;
  _2246 = i_abs_2144 + -2;
  _2247 = (unsigned int) _2246;
  # DEBUG val => _2247
  if (_2246 <= 254)
    goto <bb 277>;
  else
    goto <bb 278>;

  <bb 277>:
  _2248 = _2247 + 1;
  _2249 = x264_ue_size_tab[_2248];
  _2250 = (int) _2249;
  goto <bb 279>;

  <bb 278>:
  # DEBUG val => _2247
  _2258 = _2247 + 1;
  _2259 = _2258 >> 8;
  _2260 = x264_ue_size_tab[_2259];
  _2261 = (int) _2260;
  _2262 = _2261 + 16;
  # DEBUG val => NULL

  <bb 279>:
  # _2252 = PHI <_2250(277), _2262(278)>
  # DEBUG val => NULL
  _2253 = _2252 + -3;
  _2254 = _2253 << 8;
  _2255 = _2244 + _2254;
  cb_8(D)->f8_bits_encoded = _2255;

  <bb 280>:
  # prephitmp_4286 = PHI <_2189(268), _2159(260), _2255(279), _2215(272)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1556
  # DEBUG l => 1
  # DEBUG mvd => mdy_1664
  _2012 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2135][1];
  _2013 = (int) _2012;
  _2014 = ABS_EXPR <_2013>;
  _2016 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2139][1];
  _2017 = (int) _2016;
  _2018 = ABS_EXPR <_2017>;
  amvd_2019 = _2014 + _2018;
  # DEBUG amvd => amvd_2019
  i_abs_2020 = ABS_EXPR <mdy_1664>;
  # DEBUG i_abs => i_abs_2020
  # DEBUG ctxbase => 47
  _2021 = amvd_2019 > 2;
  _2022 = (int) _2021;
  _2023 = amvd_2019 > 32;
  _2024 = (int) _2023;
  ctx_2025 = _2022 + _2024;
  # DEBUG ctx => ctx_2025
  if (i_abs_2020 == 0)
    goto <bb 281>;
  else
    goto <bb 282>;

  <bb 281>:
  _2027 = ctx_2025 + 47;
  _2028 = (long int) _2027;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2028
  # DEBUG b => 0
  _2029 = cb_8(D)->state[_2028];
  i_state_2030 = (int) _2029;
  # DEBUG i_state => i_state_2030
  _2031 = x264_cabac_transition[i_state_2030][0];
  cb_8(D)->state[_2028] = _2031;
  _2033 = x264_cabac_entropy[i_state_2030][0];
  _2034 = (int) _2033;
  _2035 = _2034 + prephitmp_4286;
  cb_8(D)->f8_bits_encoded = _2035;
  goto <bb 301>;

  <bb 282>:
  if (i_abs_2020 <= 8)
    goto <bb 283>;
  else
    goto <bb 294>;

  <bb 283>:
  _2036 = ctx_2025 + 47;
  _2037 = (long int) _2036;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2037
  # DEBUG b => 1
  _2038 = cb_8(D)->state[_2037];
  i_state_2039 = (int) _2038;
  # DEBUG i_state => i_state_2039
  _2040 = x264_cabac_transition[i_state_2039][1];
  cb_8(D)->state[_2037] = _2040;
  _2042 = x264_cabac_entropy[i_state_2039][1];
  _2043 = (int) _2042;
  _2044 = _2043 + prephitmp_4286;
  cb_8(D)->f8_bits_encoded = _2044;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_2020 > 4)
    goto <bb 284>;
  else
    goto <bb 285>;

  <bb 284>:
  goto <bb 287>;

  <bb 285>:
  # DEBUG i => 1
  if (i_abs_2020 > 1)
    goto <bb 286>;
  else
    goto <bb 293>;

  <bb 286>:
  goto <bb 290>;

  <bb 287>:
  # i_3297 = PHI <1(284), i_2057(288)>
  # prephitmp_4395 = PHI <_2044(284), _2056(288)>
  # ivtmp_4202 = PHI <3(284), ivtmp_4205(288)>
  # DEBUG i => i_3297
  _2046 = ctxes[i_3297];
  _2047 = (int) _2046;
  _2048 = _2047 + 47;
  _2049 = (long int) _2048;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2049
  # DEBUG b => 1
  _2050 = cb_8(D)->state[_2049];
  i_state_2051 = (int) _2050;
  # DEBUG i_state => i_state_2051
  _2052 = x264_cabac_transition[i_state_2051][1];
  cb_8(D)->state[_2049] = _2052;
  _2054 = x264_cabac_entropy[i_state_2051][1];
  _2055 = (int) _2054;
  _2056 = _2055 + prephitmp_4395;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2057 = i_3297 + 1;
  # DEBUG i => i_2057
  # DEBUG i => i_2057
  ivtmp_4205 = ivtmp_4202 - 1;
  if (ivtmp_4205 != 0)
    goto <bb 288>;
  else
    goto <bb 289>;

  <bb 288>:
  goto <bb 287>;

  <bb 289>:
  # _4134 = PHI <_2056(287)>
  # cb__f8_bits_encoded_lsm.1121_3817 = PHI <_2056(287)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1121_3817;
  _2059 = i_abs_2020 + -3;
  _2061 = cb_8(D)->state[53];
  _2062 = (int) _2061;
  _2063 = cabac_size_unary[_2059][_2062];
  _2064 = (int) _2063;
  _2065 = _4134 + _2064;
  cb_8(D)->f8_bits_encoded = _2065;
  _2066 = cabac_transition_unary[_2059][_2062];
  cb_8(D)->state[53] = _2066;
  goto <bb 301>;

  <bb 290>:
  # i_1209 = PHI <1(286), i_2079(292)>
  # prephitmp_4403 = PHI <_2044(286), _2078(292)>
  # DEBUG i => i_1209
  _2068 = ctxes[i_1209];
  _2069 = (int) _2068;
  _2070 = _2069 + 47;
  _2071 = (long int) _2070;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2071
  # DEBUG b => 1
  _2072 = cb_8(D)->state[_2071];
  i_state_2073 = (int) _2072;
  # DEBUG i_state => i_state_2073
  _2074 = x264_cabac_transition[i_state_2073][1];
  cb_8(D)->state[_2071] = _2074;
  _2076 = x264_cabac_entropy[i_state_2073][1];
  _2077 = (int) _2076;
  _2078 = _2077 + prephitmp_4403;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2079 = i_1209 + 1;
  # DEBUG i => i_2079
  # DEBUG i => i_2079
  if (i_abs_2020 > i_2079)
    goto <bb 292>;
  else
    goto <bb 291>;

  <bb 291>:
  # _4133 = PHI <_2078(290)>
  # cb__f8_bits_encoded_lsm.1123_3819 = PHI <_2078(290)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1123_3819;
  goto <bb 293>;

  <bb 292>:
  goto <bb 290>;

  <bb 293>:
  # prephitmp_4397 = PHI <_4133(291), _2044(285)>
  _2080 = ctxes[i_abs_2020];
  _2081 = (int) _2080;
  _2082 = _2081 + 47;
  _2083 = (long int) _2082;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2083
  # DEBUG b => 0
  _2084 = cb_8(D)->state[_2083];
  i_state_2085 = (int) _2084;
  # DEBUG i_state => i_state_2085
  _2086 = x264_cabac_transition[i_state_2085][0];
  cb_8(D)->state[_2083] = _2086;
  _2088 = x264_cabac_entropy[i_state_2085][0];
  _2089 = (int) _2088;
  _2090 = _2089 + prephitmp_4397;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _2091 = _2090 + 256;
  cb_8(D)->f8_bits_encoded = _2091;
  goto <bb 301>;

  <bb 294>:
  _2092 = ctx_2025 + 47;
  _2093 = (long int) _2092;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2093
  # DEBUG b => 1
  _2094 = cb_8(D)->state[_2093];
  i_state_2095 = (int) _2094;
  # DEBUG i_state => i_state_2095
  _2096 = x264_cabac_transition[i_state_2095][1];
  cb_8(D)->state[_2093] = _2096;
  _2098 = x264_cabac_entropy[i_state_2095][1];
  _2099 = (int) _2098;
  _2100 = _2099 + prephitmp_4286;
  cb_8(D)->f8_bits_encoded = _2100;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 295>:
  # i_3296 = PHI <i_2113(296), 1(294)>
  # prephitmp_4388 = PHI <_2112(296), _2100(294)>
  # ivtmp_4196 = PHI <ivtmp_4199(296), 3(294)>
  # DEBUG i => i_3296
  _2102 = ctxes[i_3296];
  _2103 = (int) _2102;
  _2104 = _2103 + 47;
  _2105 = (long int) _2104;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2105
  # DEBUG b => 1
  _2106 = cb_8(D)->state[_2105];
  i_state_2107 = (int) _2106;
  # DEBUG i_state => i_state_2107
  _2108 = x264_cabac_transition[i_state_2107][1];
  cb_8(D)->state[_2105] = _2108;
  _2110 = x264_cabac_entropy[i_state_2107][1];
  _2111 = (int) _2110;
  _2112 = _2111 + prephitmp_4388;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2113 = i_3296 + 1;
  # DEBUG i => i_2113
  # DEBUG i => i_2113
  ivtmp_4199 = ivtmp_4196 - 1;
  if (ivtmp_4199 != 0)
    goto <bb 296>;
  else
    goto <bb 297>;

  <bb 296>:
  goto <bb 295>;

  <bb 297>:
  # _4132 = PHI <_2112(295)>
  # cb__f8_bits_encoded_lsm.1125_3821 = PHI <_2112(295)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1125_3821;
  _2116 = cb_8(D)->state[53];
  _2117 = (int) _2116;
  _2118 = cabac_size_5ones[_2117];
  _2119 = (int) _2118;
  _2120 = _4132 + _2119;
  _2121 = cabac_transition_5ones[_2117];
  cb_8(D)->state[53] = _2121;
  _2122 = i_abs_2020 + -2;
  _2123 = (unsigned int) _2122;
  # DEBUG val => _2123
  if (_2122 <= 254)
    goto <bb 298>;
  else
    goto <bb 299>;

  <bb 298>:
  _2124 = _2123 + 1;
  _2125 = x264_ue_size_tab[_2124];
  _2126 = (int) _2125;
  goto <bb 300>;

  <bb 299>:
  # DEBUG val => _2123
  _2264 = _2123 + 1;
  _2265 = _2264 >> 8;
  _2266 = x264_ue_size_tab[_2265];
  _2267 = (int) _2266;
  _2268 = _2267 + 16;
  # DEBUG val => NULL

  <bb 300>:
  # _2128 = PHI <_2126(298), _2268(299)>
  # DEBUG val => NULL
  _2129 = _2128 + -3;
  _2130 = _2129 << 8;
  _2131 = _2120 + _2130;
  cb_8(D)->f8_bits_encoded = _2131;

  <bb 301>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_1659
  # DEBUG b => mdy_1664
  _1665 = mdx_1659 & 65535;
  _1666 = mdy_1664 << 16;
  _1667 = _1665 + _1666;
  _1668 = (unsigned int) _1667;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _1669 = block_idx_y[_1556];
  _1670 = (int) _1669;
  _1671 = block_idx_x[_1556];
  _1672 = (int) _1671;
  # DEBUG h => h_2(D)
  # DEBUG x => _1672
  # DEBUG y => _1670
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _1673 = _1672 + 12;
  _1674 = _1670 * 8;
  _1675 = _1673 + _1674;
  _1676 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_1675];
  # DEBUG dst => _1676
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_1676] = _1668;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _1557 = _1555 + 2;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1557
  # DEBUG width => 1
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _1557, 1, &mvp);
  _1606 = x264_scan8[_1557];
  _1607 = h_2(D)->mb.cache.mv[i_list_5(D)][_1606][0];
  _1608 = (int) _1607;
  _1609 = mvp[0];
  _1610 = (int) _1609;
  mdx_1611 = _1608 - _1610;
  # DEBUG mdx => mdx_1611
  _1612 = h_2(D)->mb.cache.mv[i_list_5(D)][_1606][1];
  _1613 = (int) _1612;
  _1614 = mvp[1];
  _1615 = (int) _1614;
  mdy_1616 = _1613 - _1615;
  # DEBUG mdy => mdy_1616
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1557
  # DEBUG l => 0
  # DEBUG mvd => mdx_1611
  _2395 = _1606 + -1;
  _2396 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2395][0];
  _2397 = (int) _2396;
  _2398 = ABS_EXPR <_2397>;
  _2399 = _1606 + -8;
  _2400 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2399][0];
  _2401 = (int) _2400;
  _2402 = ABS_EXPR <_2401>;
  amvd_2403 = _2398 + _2402;
  # DEBUG amvd => amvd_2403
  i_abs_2404 = ABS_EXPR <mdx_1611>;
  # DEBUG i_abs => i_abs_2404
  # DEBUG ctxbase => 40
  _2405 = amvd_2403 > 2;
  _2406 = (int) _2405;
  _2407 = amvd_2403 > 32;
  _2408 = (int) _2407;
  ctx_2409 = _2406 + _2408;
  # DEBUG ctx => ctx_2409
  if (i_abs_2404 == 0)
    goto <bb 302>;
  else
    goto <bb 303>;

  <bb 302>:
  _2411 = ctx_2409 + 40;
  _2412 = (long int) _2411;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2412
  # DEBUG b => 0
  _2413 = cb_8(D)->state[_2412];
  i_state_2414 = (int) _2413;
  # DEBUG i_state => i_state_2414
  _2415 = x264_cabac_transition[i_state_2414][0];
  cb_8(D)->state[_2412] = _2415;
  _2416 = cb_8(D)->f8_bits_encoded;
  _2417 = x264_cabac_entropy[i_state_2414][0];
  _2418 = (int) _2417;
  _2419 = _2416 + _2418;
  cb_8(D)->f8_bits_encoded = _2419;
  goto <bb 322>;

  <bb 303>:
  if (i_abs_2404 <= 8)
    goto <bb 304>;
  else
    goto <bb 315>;

  <bb 304>:
  _2420 = ctx_2409 + 40;
  _2421 = (long int) _2420;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2421
  # DEBUG b => 1
  _2422 = cb_8(D)->state[_2421];
  i_state_2423 = (int) _2422;
  # DEBUG i_state => i_state_2423
  _2424 = x264_cabac_transition[i_state_2423][1];
  cb_8(D)->state[_2421] = _2424;
  _2425 = cb_8(D)->f8_bits_encoded;
  _2426 = x264_cabac_entropy[i_state_2423][1];
  _2427 = (int) _2426;
  _2428 = _2425 + _2427;
  cb_8(D)->f8_bits_encoded = _2428;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_2404 > 4)
    goto <bb 305>;
  else
    goto <bb 306>;

  <bb 305>:
  goto <bb 308>;

  <bb 306>:
  # DEBUG i => 1
  if (i_abs_2404 > 1)
    goto <bb 307>;
  else
    goto <bb 314>;

  <bb 307>:
  goto <bb 311>;

  <bb 308>:
  # i_3131 = PHI <1(305), i_2441(309)>
  # prephitmp_4373 = PHI <_2428(305), _2440(309)>
  # ivtmp_4239 = PHI <3(305), ivtmp_4242(309)>
  # DEBUG i => i_3131
  _2430 = ctxes[i_3131];
  _2431 = (int) _2430;
  _2432 = _2431 + 40;
  _2433 = (long int) _2432;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2433
  # DEBUG b => 1
  _2434 = cb_8(D)->state[_2433];
  i_state_2435 = (int) _2434;
  # DEBUG i_state => i_state_2435
  _2436 = x264_cabac_transition[i_state_2435][1];
  cb_8(D)->state[_2433] = _2436;
  _2438 = x264_cabac_entropy[i_state_2435][1];
  _2439 = (int) _2438;
  _2440 = _2439 + prephitmp_4373;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2441 = i_3131 + 1;
  # DEBUG i => i_2441
  # DEBUG i => i_2441
  ivtmp_4242 = ivtmp_4239 - 1;
  if (ivtmp_4242 != 0)
    goto <bb 309>;
  else
    goto <bb 310>;

  <bb 309>:
  goto <bb 308>;

  <bb 310>:
  # _4125 = PHI <_2440(308)>
  # cb__f8_bits_encoded_lsm.1115_3823 = PHI <_2440(308)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1115_3823;
  _2443 = i_abs_2404 + -3;
  _2445 = cb_8(D)->state[46];
  _2446 = (int) _2445;
  _2447 = cabac_size_unary[_2443][_2446];
  _2448 = (int) _2447;
  _2449 = _4125 + _2448;
  cb_8(D)->f8_bits_encoded = _2449;
  _2450 = cabac_transition_unary[_2443][_2446];
  cb_8(D)->state[46] = _2450;
  goto <bb 322>;

  <bb 311>:
  # i_370 = PHI <1(307), i_2463(313)>
  # prephitmp_4381 = PHI <_2428(307), _2462(313)>
  # DEBUG i => i_370
  _2452 = ctxes[i_370];
  _2453 = (int) _2452;
  _2454 = _2453 + 40;
  _2455 = (long int) _2454;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2455
  # DEBUG b => 1
  _2456 = cb_8(D)->state[_2455];
  i_state_2457 = (int) _2456;
  # DEBUG i_state => i_state_2457
  _2458 = x264_cabac_transition[i_state_2457][1];
  cb_8(D)->state[_2455] = _2458;
  _2460 = x264_cabac_entropy[i_state_2457][1];
  _2461 = (int) _2460;
  _2462 = _2461 + prephitmp_4381;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2463 = i_370 + 1;
  # DEBUG i => i_2463
  # DEBUG i => i_2463
  if (i_abs_2404 > i_2463)
    goto <bb 313>;
  else
    goto <bb 312>;

  <bb 312>:
  # _4124 = PHI <_2462(311)>
  # cb__f8_bits_encoded_lsm.1117_3825 = PHI <_2462(311)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1117_3825;
  goto <bb 314>;

  <bb 313>:
  goto <bb 311>;

  <bb 314>:
  # prephitmp_4375 = PHI <_4124(312), _2428(306)>
  _2464 = ctxes[i_abs_2404];
  _2465 = (int) _2464;
  _2466 = _2465 + 40;
  _2467 = (long int) _2466;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2467
  # DEBUG b => 0
  _2468 = cb_8(D)->state[_2467];
  i_state_2469 = (int) _2468;
  # DEBUG i_state => i_state_2469
  _2470 = x264_cabac_transition[i_state_2469][0];
  cb_8(D)->state[_2467] = _2470;
  _2472 = x264_cabac_entropy[i_state_2469][0];
  _2473 = (int) _2472;
  _2474 = _2473 + prephitmp_4375;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _2475 = _2474 + 256;
  cb_8(D)->f8_bits_encoded = _2475;
  goto <bb 322>;

  <bb 315>:
  _2476 = ctx_2409 + 40;
  _2477 = (long int) _2476;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2477
  # DEBUG b => 1
  _2478 = cb_8(D)->state[_2477];
  i_state_2479 = (int) _2478;
  # DEBUG i_state => i_state_2479
  _2480 = x264_cabac_transition[i_state_2479][1];
  cb_8(D)->state[_2477] = _2480;
  _2481 = cb_8(D)->f8_bits_encoded;
  _2482 = x264_cabac_entropy[i_state_2479][1];
  _2483 = (int) _2482;
  _2484 = _2481 + _2483;
  cb_8(D)->f8_bits_encoded = _2484;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 316>:
  # i_3294 = PHI <i_2497(317), 1(315)>
  # prephitmp_4366 = PHI <_2496(317), _2484(315)>
  # ivtmp_4233 = PHI <ivtmp_4236(317), 3(315)>
  # DEBUG i => i_3294
  _2486 = ctxes[i_3294];
  _2487 = (int) _2486;
  _2488 = _2487 + 40;
  _2489 = (long int) _2488;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2489
  # DEBUG b => 1
  _2490 = cb_8(D)->state[_2489];
  i_state_2491 = (int) _2490;
  # DEBUG i_state => i_state_2491
  _2492 = x264_cabac_transition[i_state_2491][1];
  cb_8(D)->state[_2489] = _2492;
  _2494 = x264_cabac_entropy[i_state_2491][1];
  _2495 = (int) _2494;
  _2496 = _2495 + prephitmp_4366;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2497 = i_3294 + 1;
  # DEBUG i => i_2497
  # DEBUG i => i_2497
  ivtmp_4236 = ivtmp_4233 - 1;
  if (ivtmp_4236 != 0)
    goto <bb 317>;
  else
    goto <bb 318>;

  <bb 317>:
  goto <bb 316>;

  <bb 318>:
  # _4123 = PHI <_2496(316)>
  # cb__f8_bits_encoded_lsm.1119_3827 = PHI <_2496(316)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1119_3827;
  _2500 = cb_8(D)->state[46];
  _2501 = (int) _2500;
  _2502 = cabac_size_5ones[_2501];
  _2503 = (int) _2502;
  _2504 = _4123 + _2503;
  _2505 = cabac_transition_5ones[_2501];
  cb_8(D)->state[46] = _2505;
  _2506 = i_abs_2404 + -2;
  _2507 = (unsigned int) _2506;
  # DEBUG val => _2507
  if (_2506 <= 254)
    goto <bb 319>;
  else
    goto <bb 320>;

  <bb 319>:
  _2508 = _2507 + 1;
  _2509 = x264_ue_size_tab[_2508];
  _2510 = (int) _2509;
  goto <bb 321>;

  <bb 320>:
  # DEBUG val => _2507
  _2518 = _2507 + 1;
  _2519 = _2518 >> 8;
  _2520 = x264_ue_size_tab[_2519];
  _2521 = (int) _2520;
  _2522 = _2521 + 16;
  # DEBUG val => NULL

  <bb 321>:
  # _2512 = PHI <_2510(319), _2522(320)>
  # DEBUG val => NULL
  _2513 = _2512 + -3;
  _2514 = _2513 << 8;
  _2515 = _2504 + _2514;
  cb_8(D)->f8_bits_encoded = _2515;

  <bb 322>:
  # prephitmp_4290 = PHI <_2449(310), _2419(302), _2515(321), _2475(314)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1557
  # DEBUG l => 1
  # DEBUG mvd => mdy_1616
  _2272 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2395][1];
  _2273 = (int) _2272;
  _2274 = ABS_EXPR <_2273>;
  _2276 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2399][1];
  _2277 = (int) _2276;
  _2278 = ABS_EXPR <_2277>;
  amvd_2279 = _2274 + _2278;
  # DEBUG amvd => amvd_2279
  i_abs_2280 = ABS_EXPR <mdy_1616>;
  # DEBUG i_abs => i_abs_2280
  # DEBUG ctxbase => 47
  _2281 = amvd_2279 > 2;
  _2282 = (int) _2281;
  _2283 = amvd_2279 > 32;
  _2284 = (int) _2283;
  ctx_2285 = _2282 + _2284;
  # DEBUG ctx => ctx_2285
  if (i_abs_2280 == 0)
    goto <bb 323>;
  else
    goto <bb 324>;

  <bb 323>:
  _2287 = ctx_2285 + 47;
  _2288 = (long int) _2287;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2288
  # DEBUG b => 0
  _2289 = cb_8(D)->state[_2288];
  i_state_2290 = (int) _2289;
  # DEBUG i_state => i_state_2290
  _2291 = x264_cabac_transition[i_state_2290][0];
  cb_8(D)->state[_2288] = _2291;
  _2293 = x264_cabac_entropy[i_state_2290][0];
  _2294 = (int) _2293;
  _2295 = _2294 + prephitmp_4290;
  cb_8(D)->f8_bits_encoded = _2295;
  goto <bb 343>;

  <bb 324>:
  if (i_abs_2280 <= 8)
    goto <bb 325>;
  else
    goto <bb 336>;

  <bb 325>:
  _2296 = ctx_2285 + 47;
  _2297 = (long int) _2296;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2297
  # DEBUG b => 1
  _2298 = cb_8(D)->state[_2297];
  i_state_2299 = (int) _2298;
  # DEBUG i_state => i_state_2299
  _2300 = x264_cabac_transition[i_state_2299][1];
  cb_8(D)->state[_2297] = _2300;
  _2302 = x264_cabac_entropy[i_state_2299][1];
  _2303 = (int) _2302;
  _2304 = _2303 + prephitmp_4290;
  cb_8(D)->f8_bits_encoded = _2304;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_2280 > 4)
    goto <bb 326>;
  else
    goto <bb 327>;

  <bb 326>:
  goto <bb 329>;

  <bb 327>:
  # DEBUG i => 1
  if (i_abs_2280 > 1)
    goto <bb 328>;
  else
    goto <bb 335>;

  <bb 328>:
  goto <bb 332>;

  <bb 329>:
  # i_308 = PHI <1(326), i_2317(330)>
  # prephitmp_4351 = PHI <_2304(326), _2316(330)>
  # ivtmp_4251 = PHI <3(326), ivtmp_4254(330)>
  # DEBUG i => i_308
  _2306 = ctxes[i_308];
  _2307 = (int) _2306;
  _2308 = _2307 + 47;
  _2309 = (long int) _2308;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2309
  # DEBUG b => 1
  _2310 = cb_8(D)->state[_2309];
  i_state_2311 = (int) _2310;
  # DEBUG i_state => i_state_2311
  _2312 = x264_cabac_transition[i_state_2311][1];
  cb_8(D)->state[_2309] = _2312;
  _2314 = x264_cabac_entropy[i_state_2311][1];
  _2315 = (int) _2314;
  _2316 = _2315 + prephitmp_4351;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2317 = i_308 + 1;
  # DEBUG i => i_2317
  # DEBUG i => i_2317
  ivtmp_4254 = ivtmp_4251 - 1;
  if (ivtmp_4254 != 0)
    goto <bb 330>;
  else
    goto <bb 331>;

  <bb 330>:
  goto <bb 329>;

  <bb 331>:
  # _4128 = PHI <_2316(329)>
  # cb__f8_bits_encoded_lsm.1109_3829 = PHI <_2316(329)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1109_3829;
  _2319 = i_abs_2280 + -3;
  _2321 = cb_8(D)->state[53];
  _2322 = (int) _2321;
  _2323 = cabac_size_unary[_2319][_2322];
  _2324 = (int) _2323;
  _2325 = _4128 + _2324;
  cb_8(D)->f8_bits_encoded = _2325;
  _2326 = cabac_transition_unary[_2319][_2322];
  cb_8(D)->state[53] = _2326;
  goto <bb 343>;

  <bb 332>:
  # i_786 = PHI <1(328), i_2339(334)>
  # prephitmp_4359 = PHI <_2304(328), _2338(334)>
  # DEBUG i => i_786
  _2328 = ctxes[i_786];
  _2329 = (int) _2328;
  _2330 = _2329 + 47;
  _2331 = (long int) _2330;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2331
  # DEBUG b => 1
  _2332 = cb_8(D)->state[_2331];
  i_state_2333 = (int) _2332;
  # DEBUG i_state => i_state_2333
  _2334 = x264_cabac_transition[i_state_2333][1];
  cb_8(D)->state[_2331] = _2334;
  _2336 = x264_cabac_entropy[i_state_2333][1];
  _2337 = (int) _2336;
  _2338 = _2337 + prephitmp_4359;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2339 = i_786 + 1;
  # DEBUG i => i_2339
  # DEBUG i => i_2339
  if (i_abs_2280 > i_2339)
    goto <bb 334>;
  else
    goto <bb 333>;

  <bb 333>:
  # _4127 = PHI <_2338(332)>
  # cb__f8_bits_encoded_lsm.1111_3831 = PHI <_2338(332)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1111_3831;
  goto <bb 335>;

  <bb 334>:
  goto <bb 332>;

  <bb 335>:
  # prephitmp_4353 = PHI <_4127(333), _2304(327)>
  _2340 = ctxes[i_abs_2280];
  _2341 = (int) _2340;
  _2342 = _2341 + 47;
  _2343 = (long int) _2342;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2343
  # DEBUG b => 0
  _2344 = cb_8(D)->state[_2343];
  i_state_2345 = (int) _2344;
  # DEBUG i_state => i_state_2345
  _2346 = x264_cabac_transition[i_state_2345][0];
  cb_8(D)->state[_2343] = _2346;
  _2348 = x264_cabac_entropy[i_state_2345][0];
  _2349 = (int) _2348;
  _2350 = _2349 + prephitmp_4353;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _2351 = _2350 + 256;
  cb_8(D)->f8_bits_encoded = _2351;
  goto <bb 343>;

  <bb 336>:
  _2352 = ctx_2285 + 47;
  _2353 = (long int) _2352;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2353
  # DEBUG b => 1
  _2354 = cb_8(D)->state[_2353];
  i_state_2355 = (int) _2354;
  # DEBUG i_state => i_state_2355
  _2356 = x264_cabac_transition[i_state_2355][1];
  cb_8(D)->state[_2353] = _2356;
  _2358 = x264_cabac_entropy[i_state_2355][1];
  _2359 = (int) _2358;
  _2360 = _2359 + prephitmp_4290;
  cb_8(D)->f8_bits_encoded = _2360;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 337>:
  # i_3287 = PHI <i_2373(338), 1(336)>
  # prephitmp_4344 = PHI <_2372(338), _2360(336)>
  # ivtmp_4245 = PHI <ivtmp_4248(338), 3(336)>
  # DEBUG i => i_3287
  _2362 = ctxes[i_3287];
  _2363 = (int) _2362;
  _2364 = _2363 + 47;
  _2365 = (long int) _2364;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2365
  # DEBUG b => 1
  _2366 = cb_8(D)->state[_2365];
  i_state_2367 = (int) _2366;
  # DEBUG i_state => i_state_2367
  _2368 = x264_cabac_transition[i_state_2367][1];
  cb_8(D)->state[_2365] = _2368;
  _2370 = x264_cabac_entropy[i_state_2367][1];
  _2371 = (int) _2370;
  _2372 = _2371 + prephitmp_4344;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2373 = i_3287 + 1;
  # DEBUG i => i_2373
  # DEBUG i => i_2373
  ivtmp_4248 = ivtmp_4245 - 1;
  if (ivtmp_4248 != 0)
    goto <bb 338>;
  else
    goto <bb 339>;

  <bb 338>:
  goto <bb 337>;

  <bb 339>:
  # _4126 = PHI <_2372(337)>
  # cb__f8_bits_encoded_lsm.1113_3833 = PHI <_2372(337)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1113_3833;
  _2376 = cb_8(D)->state[53];
  _2377 = (int) _2376;
  _2378 = cabac_size_5ones[_2377];
  _2379 = (int) _2378;
  _2380 = _4126 + _2379;
  _2381 = cabac_transition_5ones[_2377];
  cb_8(D)->state[53] = _2381;
  _2382 = i_abs_2280 + -2;
  _2383 = (unsigned int) _2382;
  # DEBUG val => _2383
  if (_2382 <= 254)
    goto <bb 340>;
  else
    goto <bb 341>;

  <bb 340>:
  _2384 = _2383 + 1;
  _2385 = x264_ue_size_tab[_2384];
  _2386 = (int) _2385;
  goto <bb 342>;

  <bb 341>:
  # DEBUG val => _2383
  _2524 = _2383 + 1;
  _2525 = _2524 >> 8;
  _2526 = x264_ue_size_tab[_2525];
  _2527 = (int) _2526;
  _2528 = _2527 + 16;
  # DEBUG val => NULL

  <bb 342>:
  # _2388 = PHI <_2386(340), _2528(341)>
  # DEBUG val => NULL
  _2389 = _2388 + -3;
  _2390 = _2389 << 8;
  _2391 = _2380 + _2390;
  cb_8(D)->f8_bits_encoded = _2391;

  <bb 343>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_1611
  # DEBUG b => mdy_1616
  _1617 = mdx_1611 & 65535;
  _1618 = mdy_1616 << 16;
  _1619 = _1617 + _1618;
  _1620 = (unsigned int) _1619;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _1621 = block_idx_y[_1557];
  _1622 = (int) _1621;
  _1623 = block_idx_x[_1557];
  _1624 = (int) _1623;
  # DEBUG h => h_2(D)
  # DEBUG x => _1624
  # DEBUG y => _1622
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _1625 = _1624 + 12;
  _1626 = _1622 * 8;
  _1627 = _1625 + _1626;
  _1628 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_1627];
  # DEBUG dst => _1628
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_1628] = _1620;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _1558 = _1555 + 3;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1558
  # DEBUG width => 1
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _1558, 1, &mvp);
  _19 = x264_scan8[_1558];
  _1559 = h_2(D)->mb.cache.mv[i_list_5(D)][_19][0];
  _1560 = (int) _1559;
  _1561 = mvp[0];
  _1562 = (int) _1561;
  mdx_1563 = _1560 - _1562;
  # DEBUG mdx => mdx_1563
  _1564 = h_2(D)->mb.cache.mv[i_list_5(D)][_19][1];
  _1565 = (int) _1564;
  _1566 = mvp[1];
  _1567 = (int) _1566;
  mdy_1568 = _1565 - _1567;
  # DEBUG mdy => mdy_1568
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1558
  # DEBUG l => 0
  # DEBUG mvd => mdx_1563
  _2655 = _19 + -1;
  _2656 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2655][0];
  _2657 = (int) _2656;
  _2658 = ABS_EXPR <_2657>;
  _2659 = _19 + -8;
  _2660 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2659][0];
  _2661 = (int) _2660;
  _2662 = ABS_EXPR <_2661>;
  amvd_2663 = _2658 + _2662;
  # DEBUG amvd => amvd_2663
  i_abs_2664 = ABS_EXPR <mdx_1563>;
  # DEBUG i_abs => i_abs_2664
  # DEBUG ctxbase => 40
  _2665 = amvd_2663 > 2;
  _2666 = (int) _2665;
  _2667 = amvd_2663 > 32;
  _2668 = (int) _2667;
  ctx_2669 = _2666 + _2668;
  # DEBUG ctx => ctx_2669
  if (i_abs_2664 == 0)
    goto <bb 344>;
  else
    goto <bb 345>;

  <bb 344>:
  _2671 = ctx_2669 + 40;
  _2672 = (long int) _2671;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2672
  # DEBUG b => 0
  _2673 = cb_8(D)->state[_2672];
  i_state_2674 = (int) _2673;
  # DEBUG i_state => i_state_2674
  _2675 = x264_cabac_transition[i_state_2674][0];
  cb_8(D)->state[_2672] = _2675;
  _2676 = cb_8(D)->f8_bits_encoded;
  _2677 = x264_cabac_entropy[i_state_2674][0];
  _2678 = (int) _2677;
  _2679 = _2676 + _2678;
  cb_8(D)->f8_bits_encoded = _2679;
  goto <bb 364>;

  <bb 345>:
  if (i_abs_2664 <= 8)
    goto <bb 346>;
  else
    goto <bb 357>;

  <bb 346>:
  _2680 = ctx_2669 + 40;
  _2681 = (long int) _2680;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2681
  # DEBUG b => 1
  _2682 = cb_8(D)->state[_2681];
  i_state_2683 = (int) _2682;
  # DEBUG i_state => i_state_2683
  _2684 = x264_cabac_transition[i_state_2683][1];
  cb_8(D)->state[_2681] = _2684;
  _2685 = cb_8(D)->f8_bits_encoded;
  _2686 = x264_cabac_entropy[i_state_2683][1];
  _2687 = (int) _2686;
  _2688 = _2685 + _2687;
  cb_8(D)->f8_bits_encoded = _2688;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_2664 > 4)
    goto <bb 347>;
  else
    goto <bb 348>;

  <bb 347>:
  goto <bb 350>;

  <bb 348>:
  # DEBUG i => 1
  if (i_abs_2664 > 1)
    goto <bb 349>;
  else
    goto <bb 356>;

  <bb 349>:
  goto <bb 353>;

  <bb 350>:
  # i_3290 = PHI <1(347), i_2701(351)>
  # prephitmp_4329 = PHI <_2688(347), _2700(351)>
  # ivtmp_4263 = PHI <3(347), ivtmp_4266(351)>
  # DEBUG i => i_3290
  _2690 = ctxes[i_3290];
  _2691 = (int) _2690;
  _2692 = _2691 + 40;
  _2693 = (long int) _2692;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2693
  # DEBUG b => 1
  _2694 = cb_8(D)->state[_2693];
  i_state_2695 = (int) _2694;
  # DEBUG i_state => i_state_2695
  _2696 = x264_cabac_transition[i_state_2695][1];
  cb_8(D)->state[_2693] = _2696;
  _2698 = x264_cabac_entropy[i_state_2695][1];
  _2699 = (int) _2698;
  _2700 = _2699 + prephitmp_4329;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2701 = i_3290 + 1;
  # DEBUG i => i_2701
  # DEBUG i => i_2701
  ivtmp_4266 = ivtmp_4263 - 1;
  if (ivtmp_4266 != 0)
    goto <bb 351>;
  else
    goto <bb 352>;

  <bb 351>:
  goto <bb 350>;

  <bb 352>:
  # _4119 = PHI <_2700(350)>
  # cb__f8_bits_encoded_lsm.1103_3835 = PHI <_2700(350)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1103_3835;
  _2703 = i_abs_2664 + -3;
  _2705 = cb_8(D)->state[46];
  _2706 = (int) _2705;
  _2707 = cabac_size_unary[_2703][_2706];
  _2708 = (int) _2707;
  _2709 = _4119 + _2708;
  cb_8(D)->f8_bits_encoded = _2709;
  _2710 = cabac_transition_unary[_2703][_2706];
  cb_8(D)->state[46] = _2710;
  goto <bb 364>;

  <bb 353>:
  # i_296 = PHI <1(349), i_2723(355)>
  # prephitmp_4337 = PHI <_2688(349), _2722(355)>
  # DEBUG i => i_296
  _2712 = ctxes[i_296];
  _2713 = (int) _2712;
  _2714 = _2713 + 40;
  _2715 = (long int) _2714;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2715
  # DEBUG b => 1
  _2716 = cb_8(D)->state[_2715];
  i_state_2717 = (int) _2716;
  # DEBUG i_state => i_state_2717
  _2718 = x264_cabac_transition[i_state_2717][1];
  cb_8(D)->state[_2715] = _2718;
  _2720 = x264_cabac_entropy[i_state_2717][1];
  _2721 = (int) _2720;
  _2722 = _2721 + prephitmp_4337;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2723 = i_296 + 1;
  # DEBUG i => i_2723
  # DEBUG i => i_2723
  if (i_abs_2664 > i_2723)
    goto <bb 355>;
  else
    goto <bb 354>;

  <bb 354>:
  # _4118 = PHI <_2722(353)>
  # cb__f8_bits_encoded_lsm.1105_3837 = PHI <_2722(353)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1105_3837;
  goto <bb 356>;

  <bb 355>:
  goto <bb 353>;

  <bb 356>:
  # prephitmp_4331 = PHI <_4118(354), _2688(348)>
  _2724 = ctxes[i_abs_2664];
  _2725 = (int) _2724;
  _2726 = _2725 + 40;
  _2727 = (long int) _2726;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2727
  # DEBUG b => 0
  _2728 = cb_8(D)->state[_2727];
  i_state_2729 = (int) _2728;
  # DEBUG i_state => i_state_2729
  _2730 = x264_cabac_transition[i_state_2729][0];
  cb_8(D)->state[_2727] = _2730;
  _2732 = x264_cabac_entropy[i_state_2729][0];
  _2733 = (int) _2732;
  _2734 = _2733 + prephitmp_4331;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _2735 = _2734 + 256;
  cb_8(D)->f8_bits_encoded = _2735;
  goto <bb 364>;

  <bb 357>:
  _2736 = ctx_2669 + 40;
  _2737 = (long int) _2736;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2737
  # DEBUG b => 1
  _2738 = cb_8(D)->state[_2737];
  i_state_2739 = (int) _2738;
  # DEBUG i_state => i_state_2739
  _2740 = x264_cabac_transition[i_state_2739][1];
  cb_8(D)->state[_2737] = _2740;
  _2741 = cb_8(D)->f8_bits_encoded;
  _2742 = x264_cabac_entropy[i_state_2739][1];
  _2743 = (int) _2742;
  _2744 = _2741 + _2743;
  cb_8(D)->f8_bits_encoded = _2744;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 358>:
  # i_3292 = PHI <i_2757(359), 1(357)>
  # prephitmp_4322 = PHI <_2756(359), _2744(357)>
  # ivtmp_4257 = PHI <ivtmp_4260(359), 3(357)>
  # DEBUG i => i_3292
  _2746 = ctxes[i_3292];
  _2747 = (int) _2746;
  _2748 = _2747 + 40;
  _2749 = (long int) _2748;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2749
  # DEBUG b => 1
  _2750 = cb_8(D)->state[_2749];
  i_state_2751 = (int) _2750;
  # DEBUG i_state => i_state_2751
  _2752 = x264_cabac_transition[i_state_2751][1];
  cb_8(D)->state[_2749] = _2752;
  _2754 = x264_cabac_entropy[i_state_2751][1];
  _2755 = (int) _2754;
  _2756 = _2755 + prephitmp_4322;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2757 = i_3292 + 1;
  # DEBUG i => i_2757
  # DEBUG i => i_2757
  ivtmp_4260 = ivtmp_4257 - 1;
  if (ivtmp_4260 != 0)
    goto <bb 359>;
  else
    goto <bb 360>;

  <bb 359>:
  goto <bb 358>;

  <bb 360>:
  # _4117 = PHI <_2756(358)>
  # cb__f8_bits_encoded_lsm.1107_3839 = PHI <_2756(358)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1107_3839;
  _2760 = cb_8(D)->state[46];
  _2761 = (int) _2760;
  _2762 = cabac_size_5ones[_2761];
  _2763 = (int) _2762;
  _2764 = _4117 + _2763;
  _2765 = cabac_transition_5ones[_2761];
  cb_8(D)->state[46] = _2765;
  _2766 = i_abs_2664 + -2;
  _2767 = (unsigned int) _2766;
  # DEBUG val => _2767
  if (_2766 <= 254)
    goto <bb 361>;
  else
    goto <bb 362>;

  <bb 361>:
  _2768 = _2767 + 1;
  _2769 = x264_ue_size_tab[_2768];
  _2770 = (int) _2769;
  goto <bb 363>;

  <bb 362>:
  # DEBUG val => _2767
  _2778 = _2767 + 1;
  _2779 = _2778 >> 8;
  _2780 = x264_ue_size_tab[_2779];
  _2781 = (int) _2780;
  _2782 = _2781 + 16;
  # DEBUG val => NULL

  <bb 363>:
  # _2772 = PHI <_2770(361), _2782(362)>
  # DEBUG val => NULL
  _2773 = _2772 + -3;
  _2774 = _2773 << 8;
  _2775 = _2764 + _2774;
  cb_8(D)->f8_bits_encoded = _2775;

  <bb 364>:
  # prephitmp_4294 = PHI <_2709(352), _2679(344), _2775(363), _2735(356)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _1558
  # DEBUG l => 1
  # DEBUG mvd => mdy_1568
  _2532 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2655][1];
  _2533 = (int) _2532;
  _2534 = ABS_EXPR <_2533>;
  _2536 = h_2(D)->mb.cache.mvd[i_list_5(D)][_2659][1];
  _2537 = (int) _2536;
  _2538 = ABS_EXPR <_2537>;
  amvd_2539 = _2534 + _2538;
  # DEBUG amvd => amvd_2539
  i_abs_2540 = ABS_EXPR <mdy_1568>;
  # DEBUG i_abs => i_abs_2540
  # DEBUG ctxbase => 47
  _2541 = amvd_2539 > 2;
  _2542 = (int) _2541;
  _2543 = amvd_2539 > 32;
  _2544 = (int) _2543;
  ctx_2545 = _2542 + _2544;
  # DEBUG ctx => ctx_2545
  if (i_abs_2540 == 0)
    goto <bb 365>;
  else
    goto <bb 366>;

  <bb 365>:
  _2547 = ctx_2545 + 47;
  _2548 = (long int) _2547;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2548
  # DEBUG b => 0
  _2549 = cb_8(D)->state[_2548];
  i_state_2550 = (int) _2549;
  # DEBUG i_state => i_state_2550
  _2551 = x264_cabac_transition[i_state_2550][0];
  cb_8(D)->state[_2548] = _2551;
  _2553 = x264_cabac_entropy[i_state_2550][0];
  _2554 = (int) _2553;
  _2555 = _2554 + prephitmp_4294;
  cb_8(D)->f8_bits_encoded = _2555;
  goto <bb 385>;

  <bb 366>:
  if (i_abs_2540 <= 8)
    goto <bb 367>;
  else
    goto <bb 378>;

  <bb 367>:
  _2556 = ctx_2545 + 47;
  _2557 = (long int) _2556;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2557
  # DEBUG b => 1
  _2558 = cb_8(D)->state[_2557];
  i_state_2559 = (int) _2558;
  # DEBUG i_state => i_state_2559
  _2560 = x264_cabac_transition[i_state_2559][1];
  cb_8(D)->state[_2557] = _2560;
  _2562 = x264_cabac_entropy[i_state_2559][1];
  _2563 = (int) _2562;
  _2564 = _2563 + prephitmp_4294;
  cb_8(D)->f8_bits_encoded = _2564;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (i_abs_2540 > 4)
    goto <bb 368>;
  else
    goto <bb 369>;

  <bb 368>:
  goto <bb 371>;

  <bb 369>:
  # DEBUG i => 1
  if (i_abs_2540 > 1)
    goto <bb 370>;
  else
    goto <bb 377>;

  <bb 370>:
  goto <bb 374>;

  <bb 371>:
  # i_3288 = PHI <1(368), i_2577(372)>
  # prephitmp_4307 = PHI <_2564(368), _2576(372)>
  # ivtmp_4275 = PHI <3(368), ivtmp_4278(372)>
  # DEBUG i => i_3288
  _2566 = ctxes[i_3288];
  _2567 = (int) _2566;
  _2568 = _2567 + 47;
  _2569 = (long int) _2568;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2569
  # DEBUG b => 1
  _2570 = cb_8(D)->state[_2569];
  i_state_2571 = (int) _2570;
  # DEBUG i_state => i_state_2571
  _2572 = x264_cabac_transition[i_state_2571][1];
  cb_8(D)->state[_2569] = _2572;
  _2574 = x264_cabac_entropy[i_state_2571][1];
  _2575 = (int) _2574;
  _2576 = _2575 + prephitmp_4307;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2577 = i_3288 + 1;
  # DEBUG i => i_2577
  # DEBUG i => i_2577
  ivtmp_4278 = ivtmp_4275 - 1;
  if (ivtmp_4278 != 0)
    goto <bb 372>;
  else
    goto <bb 373>;

  <bb 372>:
  goto <bb 371>;

  <bb 373>:
  # _4122 = PHI <_2576(371)>
  # cb__f8_bits_encoded_lsm.1097_3841 = PHI <_2576(371)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1097_3841;
  _2579 = i_abs_2540 + -3;
  _2581 = cb_8(D)->state[53];
  _2582 = (int) _2581;
  _2583 = cabac_size_unary[_2579][_2582];
  _2584 = (int) _2583;
  _2585 = _4122 + _2584;
  cb_8(D)->f8_bits_encoded = _2585;
  _2586 = cabac_transition_unary[_2579][_2582];
  cb_8(D)->state[53] = _2586;
  goto <bb 385>;

  <bb 374>:
  # i_241 = PHI <1(370), i_2599(376)>
  # prephitmp_4315 = PHI <_2564(370), _2598(376)>
  # DEBUG i => i_241
  _2588 = ctxes[i_241];
  _2589 = (int) _2588;
  _2590 = _2589 + 47;
  _2591 = (long int) _2590;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2591
  # DEBUG b => 1
  _2592 = cb_8(D)->state[_2591];
  i_state_2593 = (int) _2592;
  # DEBUG i_state => i_state_2593
  _2594 = x264_cabac_transition[i_state_2593][1];
  cb_8(D)->state[_2591] = _2594;
  _2596 = x264_cabac_entropy[i_state_2593][1];
  _2597 = (int) _2596;
  _2598 = _2597 + prephitmp_4315;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2599 = i_241 + 1;
  # DEBUG i => i_2599
  # DEBUG i => i_2599
  if (i_abs_2540 > i_2599)
    goto <bb 376>;
  else
    goto <bb 375>;

  <bb 375>:
  # _4121 = PHI <_2598(374)>
  # cb__f8_bits_encoded_lsm.1099_3843 = PHI <_2598(374)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1099_3843;
  goto <bb 377>;

  <bb 376>:
  goto <bb 374>;

  <bb 377>:
  # prephitmp_4309 = PHI <_4121(375), _2564(369)>
  _2600 = ctxes[i_abs_2540];
  _2601 = (int) _2600;
  _2602 = _2601 + 47;
  _2603 = (long int) _2602;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2603
  # DEBUG b => 0
  _2604 = cb_8(D)->state[_2603];
  i_state_2605 = (int) _2604;
  # DEBUG i_state => i_state_2605
  _2606 = x264_cabac_transition[i_state_2605][0];
  cb_8(D)->state[_2603] = _2606;
  _2608 = x264_cabac_entropy[i_state_2605][0];
  _2609 = (int) _2608;
  _2610 = _2609 + prephitmp_4309;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _2611 = _2610 + 256;
  cb_8(D)->f8_bits_encoded = _2611;
  goto <bb 385>;

  <bb 378>:
  _2612 = ctx_2545 + 47;
  _2613 = (long int) _2612;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2613
  # DEBUG b => 1
  _2614 = cb_8(D)->state[_2613];
  i_state_2615 = (int) _2614;
  # DEBUG i_state => i_state_2615
  _2616 = x264_cabac_transition[i_state_2615][1];
  cb_8(D)->state[_2613] = _2616;
  _2618 = x264_cabac_entropy[i_state_2615][1];
  _2619 = (int) _2618;
  _2620 = _2619 + prephitmp_4294;
  cb_8(D)->f8_bits_encoded = _2620;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 379>:
  # i_3289 = PHI <i_2633(380), 1(378)>
  # prephitmp_4300 = PHI <_2632(380), _2620(378)>
  # ivtmp_4269 = PHI <ivtmp_4272(380), 3(378)>
  # DEBUG i => i_3289
  _2622 = ctxes[i_3289];
  _2623 = (int) _2622;
  _2624 = _2623 + 47;
  _2625 = (long int) _2624;
  # DEBUG cb => cb_8(D)
  # DEBUG i_ctx => _2625
  # DEBUG b => 1
  _2626 = cb_8(D)->state[_2625];
  i_state_2627 = (int) _2626;
  # DEBUG i_state => i_state_2627
  _2628 = x264_cabac_transition[i_state_2627][1];
  cb_8(D)->state[_2625] = _2628;
  _2630 = x264_cabac_entropy[i_state_2627][1];
  _2631 = (int) _2630;
  _2632 = _2631 + prephitmp_4300;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_2633 = i_3289 + 1;
  # DEBUG i => i_2633
  # DEBUG i => i_2633
  ivtmp_4272 = ivtmp_4269 - 1;
  if (ivtmp_4272 != 0)
    goto <bb 380>;
  else
    goto <bb 381>;

  <bb 380>:
  goto <bb 379>;

  <bb 381>:
  # _4120 = PHI <_2632(379)>
  # cb__f8_bits_encoded_lsm.1101_3845 = PHI <_2632(379)>
  cb_8(D)->f8_bits_encoded = cb__f8_bits_encoded_lsm.1101_3845;
  _2636 = cb_8(D)->state[53];
  _2637 = (int) _2636;
  _2638 = cabac_size_5ones[_2637];
  _2639 = (int) _2638;
  _2640 = _4120 + _2639;
  _2641 = cabac_transition_5ones[_2637];
  cb_8(D)->state[53] = _2641;
  _2642 = i_abs_2540 + -2;
  _2643 = (unsigned int) _2642;
  # DEBUG val => _2643
  if (_2642 <= 254)
    goto <bb 382>;
  else
    goto <bb 383>;

  <bb 382>:
  _2644 = _2643 + 1;
  _2645 = x264_ue_size_tab[_2644];
  _2646 = (int) _2645;
  goto <bb 384>;

  <bb 383>:
  # DEBUG val => _2643
  _2784 = _2643 + 1;
  _2785 = _2784 >> 8;
  _2786 = x264_ue_size_tab[_2785];
  _2787 = (int) _2786;
  _2788 = _2787 + 16;
  # DEBUG val => NULL

  <bb 384>:
  # _2648 = PHI <_2646(382), _2788(383)>
  # DEBUG val => NULL
  _2649 = _2648 + -3;
  _2650 = _2649 << 8;
  _2651 = _2640 + _2650;
  cb_8(D)->f8_bits_encoded = _2651;

  <bb 385>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_1563
  # DEBUG b => mdy_1568
  _1569 = mdx_1563 & 65535;
  _1570 = mdy_1568 << 16;
  _1571 = _1569 + _1570;
  _1572 = (unsigned int) _1571;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _1573 = block_idx_y[_1558];
  _1574 = (int) _1573;
  _1575 = block_idx_x[_1558];
  _1576 = (int) _1575;
  # DEBUG h => h_2(D)
  # DEBUG x => _1576
  # DEBUG y => _1574
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _1577 = _1576 + 12;
  _1578 = _1574 * 8;
  _1579 = _1577 + _1578;
  _1580 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_1579];
  # DEBUG dst => _1580
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_1580] = _1572;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};

<L14>:
  return;

}



;; Function x264_rd_cost_mb (x264_rd_cost_mb, funcdef_no=180, decl_uid=8554, cgraph_uid=180, symbol_order=240)


Analyzing loop at encoder/cabac.c:1027
encoder/cabac.c:1027:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:1027:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:1027:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 7
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:1027:13: note: === vect_analyze_data_refs ===
encoder/cabac.c:1027:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:1027:13: note: bad data references.

Analyzing loop at encoder/cabac.c:1004
encoder/cabac.c:1004:17: note: ===== analyze_loop_nest =====
encoder/cabac.c:1004:17: note: === vect_analyze_loop_form ===
encoder/cabac.c:1004:17: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
encoder/cabac.c:1004:17: note: === vect_analyze_data_refs ===
encoder/cabac.c:1004:17: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:1004:17: note: bad data references.

Analyzing loop at encoder/cabac.c:1009
encoder/cabac.c:1009:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:1009:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:1009:13: note: not vectorized: control flow in loop.
encoder/cabac.c:1009:13: note: bad loop form.

Analyzing loop at encoder/cabac.c:1015
encoder/cabac.c:1015:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:1015:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:1015:13: note: not vectorized: control flow in loop.
encoder/cabac.c:1015:13: note: bad loop form.

Analyzing loop at encoder/cabac.c:331
encoder/cabac.c:331:14: note: ===== analyze_loop_nest =====
encoder/cabac.c:331:14: note: === vect_analyze_loop_form ===
encoder/cabac.c:331:14: note: not vectorized: control flow in loop.
encoder/cabac.c:331:14: note: bad loop form.

Analyzing loop at ./common/macroblock.h:490
./common/macroblock.h:490:38: note: ===== analyze_loop_nest =====
./common/macroblock.h:490:38: note: === vect_analyze_loop_form ===
./common/macroblock.h:490:38: note: not vectorized: control flow in loop.
./common/macroblock.h:490:38: note: bad loop form.

Analyzing loop at ./common/macroblock.h:500
./common/macroblock.h:500:38: note: ===== analyze_loop_nest =====
./common/macroblock.h:500:38: note: === vect_analyze_loop_form ===
./common/macroblock.h:500:38: note: not vectorized: control flow in loop.
./common/macroblock.h:500:38: note: bad loop form.

Analyzing loop at encoder/cabac.c:839
encoder/cabac.c:839:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:839:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:839:13: note: not vectorized: control flow in loop.
encoder/cabac.c:839:13: note: bad loop form.

Analyzing loop at encoder/cabac.c:897
encoder/cabac.c:897:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:897:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:897:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 12
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cabac.c:897:9: note: === vect_analyze_data_refs ===
encoder/cabac.c:897:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:897:9: note: bad data references.

Analyzing loop at encoder/cabac.c:920
encoder/cabac.c:920:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:920:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:920:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 13
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cabac.c:920:9: note: === vect_analyze_data_refs ===
encoder/cabac.c:920:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:920:9: note: bad data references.

Analyzing loop at encoder/cabac.c:918
encoder/cabac.c:918:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:918:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:918:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 14
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cabac.c:918:9: note: === vect_analyze_data_refs ===
encoder/cabac.c:918:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:918:9: note: bad data references.

Analyzing loop at encoder/cabac.c:909
encoder/cabac.c:909:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:909:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:909:9: note: ===== analyze_loop_nest_1 =====
encoder/cabac.c:909:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:909:9: note: not vectorized: control flow in loop.
encoder/cabac.c:909:9: note: bad inner-loop form.
encoder/cabac.c:909:9: note: not vectorized: Bad inner loop.
encoder/cabac.c:909:9: note: bad loop form.

Analyzing loop at encoder/cabac.c:913
encoder/cabac.c:913:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:913:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:913:13: note: not vectorized: control flow in loop.
encoder/cabac.c:913:13: note: bad loop form.

Analyzing loop at encoder/cabac.c:957
encoder/cabac.c:957:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:957:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:957:9: note: not vectorized: control flow in loop.
encoder/cabac.c:957:9: note: bad loop form.

Analyzing loop at encoder/cabac.c:935
encoder/cabac.c:935:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:935:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:935:9: note: not vectorized: control flow in loop.
encoder/cabac.c:935:9: note: bad loop form.

Analyzing loop at encoder/cabac.c:200
encoder/cabac.c:200:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:200:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:200:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 20
  exit condition [4, + , 1](no_overflow) < _1165
  bounds on difference of bases: 0 ... 2147483643
  result:
    # of iterations (unsigned int) _1165 + 4294967292, bounded by 2147483643
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:200:13: note: Symbolic number of iterations is (unsigned int) _1165 + 4294967293
encoder/cabac.c:200:13: note: === vect_analyze_data_refs ===
Creating dr for i_mb_bits[idx_500][i_1260]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &i_mb_bits
	offset from base address: (ssizetype) ((sizetype) ((int) i_mb_type_158 * 3 + _498) * 28)
	constant offset from base address: -1052
	step: 4
	aligned to: 4
	base_object: MEM[(int[27][7] *)&i_mb_bits]
	Access function 0: {3, +, 1}_20
	Access function 1: idx_500
Creating dr for x264_cabac_transition[i_state_532][_530]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: scev_not_known;
	Access function 1: scev_not_known;
Creating dr for x264_cabac_entropy[i_state_532][_530]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:714, generic-match.c:1389
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: scev_not_known;
	Access function 1: scev_not_known;
encoder/cabac.c:200:13: note: got vectype for stmt: _529 = i_mb_bits[idx_500][i_1260];
const vector(4) int
Creating dr for x264_cabac_transition[i_state_532][_530]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:714, generic-match.c:1389
success.
	base_address: &x264_cabac_transition
	offset from base address: (ssizetype) ((sizetype) i_state_532 * 2 + (sizetype) _529)
	constant offset from base address: 0
	step: 0
	aligned to: 1
	base_object: x264_cabac_transition[i_state_532][_530]
encoder/cabac.c:200:13: note: got vectype for stmt: _533 = x264_cabac_transition[i_state_532][_530];
const vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
encoder/cabac.c:200:13: note: not vectorized: not suitable for gather load _533 = x264_cabac_transition[i_state_532][_530];

encoder/cabac.c:200:13: note: bad data references.

Analyzing loop at encoder/cavlc.c:614
encoder/cavlc.c:614:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:614:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:614:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 24
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cavlc.c:614:13: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[i_1909]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: 0
	constant offset from base address: 64
	step: 4
	aligned to: 128
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {16, +, 1}_24
encoder/cavlc.c:614:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:614:13: note: bad data references.

Analyzing loop at encoder/cavlc.c:597
encoder/cavlc.c:597:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:597:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:597:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 25
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
encoder/cavlc.c:597:13: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[i_1913]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {0, +, 1}_25
encoder/cavlc.c:597:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:597:13: note: bad data references.

Analyzing loop at encoder/cavlc.c:275
encoder/cavlc.c:275:5: note: ===== analyze_loop_nest =====
encoder/cavlc.c:275:5: note: === vect_analyze_loop_form ===
encoder/cavlc.c:275:5: note: ===== analyze_loop_nest_1 =====
encoder/cavlc.c:275:5: note: === vect_analyze_loop_form ===
encoder/cavlc.c:275:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 40
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:275:5: note: not vectorized: control flow in loop.
encoder/cavlc.c:275:5: note: bad loop form.

Analyzing loop at encoder/cavlc.c:277
encoder/cavlc.c:277:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:277:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:277:13: note: === get_loop_niters ===
encoder/cavlc.c:277:13: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[_1566]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: (ssizetype) ((sizetype) (i8start_1907 * 4) * 4)
	constant offset from base address: 0
	step: 4
	aligned to: 16
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {pretmp_2308, +, 1}_40
encoder/cavlc.c:277:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:277:13: note: bad data references.

Analyzing loop at encoder/cavlc.c:270
encoder/cavlc.c:270:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:270:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:270:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:270:9: note: bad loop form.

Analyzing loop at ./common/macroblock.h:490
./common/macroblock.h:490:38: note: ===== analyze_loop_nest =====
./common/macroblock.h:490:38: note: === vect_analyze_loop_form ===
./common/macroblock.h:490:38: note: not vectorized: control flow in loop.
./common/macroblock.h:490:38: note: bad loop form.

Analyzing loop at ./common/macroblock.h:500
./common/macroblock.h:500:38: note: ===== analyze_loop_nest =====
./common/macroblock.h:500:38: note: === vect_analyze_loop_form ===
./common/macroblock.h:500:38: note: not vectorized: control flow in loop.
./common/macroblock.h:500:38: note: bad loop form.

Analyzing loop at encoder/cavlc.c:360
encoder/cavlc.c:360:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:360:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:360:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:360:9: note: bad loop form.

Analyzing loop at encoder/cavlc.c:458
encoder/cavlc.c:458:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:458:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:458:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 27
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:458:9: note: === vect_analyze_data_refs ===
encoder/cavlc.c:458:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:458:9: note: bad data references.

Analyzing loop at encoder/cavlc.c:444
encoder/cavlc.c:444:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:444:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:444:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 28
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:444:13: note: === vect_analyze_data_refs ===
Creating dr for h_4(D)->mb.i_sub_partition[i_69]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: h_4(D)
	offset from base address: 0
	constant offset from base address: 11792
	step: 4
	aligned to: 128
	base_object: *h_4(D)
	Access function 0: {0, +, 1}_28
	Access function 1: 7296
	Access function 2: 87040
Creating dr for sub_mb_type_p_to_golomb[_1166]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[4] *)&sub_mb_type_p_to_golomb]
	Access function 0: scev_not_known;
Creating dr for x264_ue_size_tab[_1169]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[256] *)&x264_ue_size_tab]
	Access function 0: scev_not_known;
encoder/cavlc.c:444:13: note: got vectype for stmt: _1166 = h_4(D)->mb.i_sub_partition[i_69];
vector(4) int
Creating dr for sub_mb_type_p_to_golomb[_1166]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: &sub_mb_type_p_to_golomb
	offset from base address: (ssizetype) _1166
	constant offset from base address: 0
	step: 0
	aligned to: 1
	base_object: sub_mb_type_p_to_golomb[_1166]
encoder/cavlc.c:444:13: note: got vectype for stmt: _1167 = sub_mb_type_p_to_golomb[_1166];
const vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
encoder/cavlc.c:444:13: note: not vectorized: not suitable for gather load _1167 = sub_mb_type_p_to_golomb[_1166];

encoder/cavlc.c:444:13: note: bad data references.

Analyzing loop at encoder/cavlc.c:480
encoder/cavlc.c:480:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:480:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:480:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 29
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:480:9: note: === vect_analyze_data_refs ===
encoder/cavlc.c:480:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:480:9: note: bad data references.

Analyzing loop at encoder/cavlc.c:478
encoder/cavlc.c:478:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:478:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:478:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 30
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:478:9: note: === vect_analyze_data_refs ===
encoder/cavlc.c:478:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:478:9: note: bad data references.

Analyzing loop at encoder/cavlc.c:473
encoder/cavlc.c:473:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:473:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:473:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:473:9: note: bad loop form.

Analyzing loop at encoder/cavlc.c:470
encoder/cavlc.c:470:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:470:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:470:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:470:9: note: bad loop form.

Analyzing loop at encoder/cavlc.c:466
encoder/cavlc.c:466:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:466:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:466:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 33
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:466:9: note: === vect_analyze_data_refs ===
Creating dr for h_4(D)->mb.i_sub_partition[i_1933]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: h_4(D)
	offset from base address: 0
	constant offset from base address: 11792
	step: 4
	aligned to: 128
	base_object: *h_4(D)
	Access function 0: {0, +, 1}_33
	Access function 1: 7296
	Access function 2: 87040
Creating dr for sub_mb_type_b_to_golomb[_1214]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[13] *)&sub_mb_type_b_to_golomb]
	Access function 0: scev_not_known;
Creating dr for x264_ue_size_tab[_1217]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[256] *)&x264_ue_size_tab]
	Access function 0: scev_not_known;
encoder/cavlc.c:466:9: note: got vectype for stmt: _1214 = h_4(D)->mb.i_sub_partition[i_1933];
vector(4) int
Creating dr for sub_mb_type_b_to_golomb[_1214]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: &sub_mb_type_b_to_golomb
	offset from base address: (ssizetype) _1214
	constant offset from base address: 0
	step: 0
	aligned to: 1
	base_object: sub_mb_type_b_to_golomb[_1214]
encoder/cavlc.c:466:9: note: got vectype for stmt: _1215 = sub_mb_type_b_to_golomb[_1214];
const vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
encoder/cavlc.c:466:9: note: not vectorized: not suitable for gather load _1215 = sub_mb_type_b_to_golomb[_1214];

encoder/cavlc.c:466:9: note: bad data references.

Analyzing loop at encoder/cavlc.c:521
encoder/cavlc.c:521:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:521:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:521:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:521:9: note: bad loop form.

Analyzing loop at encoder/cavlc.c:501
encoder/cavlc.c:501:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:501:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:501:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:501:9: note: bad loop form.
encoder/rdo.c:139:12: note: vectorized 0 loops in function.
x264_rd_cost_mb (struct x264_t * h, int i_lambda2)
{
  _Bool bs_tmp_i_bits_encoded_lsm.1224;
  int bs_tmp_i_bits_encoded_lsm.1223;
  _Bool bs_tmp_i_bits_encoded_lsm.1222;
  int bs_tmp_i_bits_encoded_lsm.1221;
  _Bool bs_tmp_i_bits_encoded_lsm.1220;
  int bs_tmp_i_bits_encoded_lsm.1219;
  _Bool bs_tmp_i_bits_encoded_lsm.1218;
  int bs_tmp_i_bits_encoded_lsm.1217;
  _Bool bs_tmp_i_bits_encoded_lsm.1216;
  int bs_tmp_i_bits_encoded_lsm.1215;
  _Bool bs_tmp_i_bits_encoded_lsm.1214;
  int bs_tmp_i_bits_encoded_lsm.1213;
  _Bool cabac_tmp_state_I_lsm.1212;
  uint8_t cabac_tmp_state_I_lsm.1211;
  _Bool cabac_tmp_f8_bits_encoded_lsm.1210;
  int cabac_tmp_f8_bits_encoded_lsm.1209;
  _Bool cabac_tmp_f8_bits_encoded_lsm.1208;
  int cabac_tmp_f8_bits_encoded_lsm.1207;
  int i4;
  int count;
  int i8start;
  int i;
  int D.24717;
  int i;
  int p;
  int D.24713;
  int D.24709;
  int D.24707;
  int D.24704;
  int D.24702;
  int D.24700;
  int D.24697;
  int count;
  int count;
  const int ma;
  const int mb;
  const int m;
  int b_list[2][2];
  int16_t mvp[2];
  int i_list;
  int b_sub_ref0;
  int16_t mvp[2];
  int i_mode;
  int di;
  int i;
  int i_mb_i_offset;
  const int i_mb_type;
  int i_mbn_xy;
  int i_dqp;
  int ctx;
  int val;
  int i_state;
  int i_state;
  int i;
  int D.24602;
  int i;
  int p;
  int D.24598;
  int cbp;
  int cbp_l;
  int cbp_t;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_pred;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_pred;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_pred;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  const int i_mb_type;
  int ctx;
  int ctx;
  const int idx;
  int i;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  int i_state;
  static const int i_mb_bits[27][7] = {{1, 1, 0, 0, 0, 1}, {1, 1, 0, 0, 1, 0}, {1, 0, 0}, {1, 1, 0, 1, 0, 1}, {1, 1, 0, 1, 1, 0}, {0}, {1, 1, 1, 0, 0, 0, 0}, {1, 1, 1, 0, 0, 0, 1}, {0}, {1, 1, 0, 1, 1, 1}, {1, 1, 1, 1, 1, 0}, {0}, {1, 1, 0, 0, 1, 1}, {1, 1, 0, 1, 0, 0}, {1, 0, 1}, {1, 1, 1, 0, 0, 1, 0}, {1, 1, 1, 0, 0, 1, 1}, {0}, {1, 1, 1, 0, 1, 0, 0}, {1, 1, 1, 0, 1, 0, 1}, {0}, {1, 1, 1, 0, 1, 1, 0}, {1, 1, 1, 0, 1, 1, 1}, {0}, {1, 1, 1, 1, 0, 0, 0}, {1, 1, 1, 1, 0, 0, 1}, {1, 1, 0, 0, 0, 0}};
  static const int i_mb_len[27] = {6, 6, 3, 6, 6, 0, 7, 7, 0, 6, 6, 0, 6, 6, 3, 7, 7, 0, 7, 7, 0, 7, 7, 0, 7, 7, 6};
  const int i_mb_type;
  int i_list;
  int i;
  int di;
  const int i_mode;
  int b_list[2][2];
  int ctx;
  int i_state;
  const int m;
  const int mb;
  const int ma;
  int ctx;
  int i_state;
  int max_x;
  int max_y;
  int x;
  int y;
  int max_x;
  int max_y;
  int x;
  int y;
  uint64_t acs;
  uint8_t * fenc;
  uint8_t * fdec;
  int satd;
  int D.24121;
  int D.24083;
  struct bs_t bs_tmp;
  struct x264_cabac_t cabac_tmp;
  int i_bits;
  int i_ssd;
  int b_transform_bak;
  uint8_t * _7;
  int _9;
  _Bool _10;
  _Bool _11;
  _Bool _12;
  int _14;
  int _16;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _17;
  int * _18;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  int _31;
  int _32;
  int _33;
  int _34;
  int _38;
  uint8_t * _40;
  uint8_t * _41;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _42;
  int _43;
  int _44;
  uint8_t * _45;
  uint8_t * _46;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _47;
  int _48;
  int _49;
  uint8_t * _55;
  _Bool _59;
  int _60;
  uint64_t (*<T13f5>) (uint8_t *, int) _61;
  int _63;
  int _72;
  int _81;
  int _82;
  long unsigned int _83;
  int _84;
  unsigned char _90;
  int _91;
  int _100;
  int _101;
  unsigned int ivtmp_112;
  int _129;
  int _131;
  int _132;
  int _133;
  int _134;
  int _135;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _137;
  int _138;
  int _140;
  struct x264_pps_t * _157;
  struct x264_pps_t * _160;
  int _161;
  int _162;
  int _163;
  long int _165;
  long int _166;
  unsigned char _167;
  int _169;
  short unsigned int _170;
  int _171;
  int _172;
  int _174;
  int _175;
  signed char _176;
  int _178;
  signed char _179;
  int _181;
  signed char _182;
  int _183;
  signed char _184;
  signed char _185;
  signed char _187;
  int _188;
  int _189;
  signed char _190;
  int _192;
  int _196;
  int _197;
  int _198;
  int _199;
  int _200;
  int _201;
  int _202;
  int _203;
  int _206;
  int _207;
  int _208;
  int _209;
  int _211;
  int _213;
  int _217;
  unsigned char _218;
  int _219;
  signed char _227;
  int iftmp.3_233;
  int iftmp.3_234;
  int _237;
  int _238;
  int _239;
  int _240;
  int _241;
  int _245;
  int _246;
  int _247;
  int _248;
  int _249;
  int _252;
  int _253;
  int _254;
  long int _256;
  long int _257;
  unsigned char _258;
  int _260;
  short unsigned int _261;
  int _262;
  int _263;
  int _265;
  int16_t[16] * _266;
  int _267;
  int16_t[16] * _269;
  int16_t * _270;
  int _272;
  int _273;
  int _275;
  int _276;
  int16_t[64] * _277;
  int _279;
  int _281;
  int _282;
  int _283;
  int16_t[16] * _284;
  int _286;
  int _287;
  int16_t[4] * _288;
  int16_t[4] * _289;
  int _291;
  int16_t[16] * _293;
  int16_t * _294;
  unsigned char _298;
  int _299;
  unsigned char _301;
  int _302;
  _Bool _303;
  int _304;
  int _307;
  int _308;
  int _309;
  int8_t * _310;
  int _311;
  int _312;
  int _313;
  sizetype _314;
  int8_t * _315;
  signed char _316;
  _Bool _317;
  _Bool _318;
  _Bool _319;
  int _320;
  long int _321;
  int _322;
  int _323;
  long int _324;
  unsigned char _325;
  int _327;
  short unsigned int _328;
  int _329;
  int _330;
  int _331;
  int _332;
  int _333;
  int _337;
  int _338;
  unsigned char _339;
  int _341;
  short unsigned int _342;
  int _343;
  int _344;
  unsigned char _345;
  short unsigned int _347;
  int _348;
  int _349;
  unsigned char _350;
  short unsigned int _352;
  int _353;
  int _354;
  unsigned char _355;
  int _357;
  short unsigned int _358;
  int _359;
  int _360;
  unsigned char _361;
  short unsigned int _363;
  int _364;
  int _365;
  unsigned char _366;
  short unsigned int _368;
  int _369;
  int _370;
  unsigned char _371;
  int _373;
  short unsigned int _374;
  int _375;
  int _376;
  unsigned char _377;
  short unsigned int _379;
  int _380;
  int _381;
  unsigned char _382;
  short unsigned int _384;
  int _385;
  int _386;
  unsigned char _387;
  int _389;
  short unsigned int _390;
  int _391;
  int _392;
  unsigned char _393;
  short unsigned int _395;
  int _396;
  int _397;
  unsigned char _398;
  short unsigned int _400;
  int _401;
  int _402;
  unsigned char _403;
  int _405;
  short unsigned int _406;
  int _407;
  int _408;
  int _409;
  _Bool _410;
  _Bool _411;
  _Bool _412;
  int _413;
  _Bool _414;
  _Bool _415;
  _Bool _416;
  int _420;
  long int _421;
  unsigned char _422;
  int _424;
  short unsigned int _425;
  int _426;
  int _427;
  int _428;
  long int _429;
  unsigned char _430;
  int _432;
  short unsigned int _433;
  int _434;
  int _435;
  unsigned char _436;
  short unsigned int _438;
  int _439;
  int _440;
  unsigned char _441;
  short unsigned int _443;
  int _444;
  int _445;
  unsigned char _446;
  unsigned char _448;
  short unsigned int _449;
  int _450;
  int _451;
  unsigned char _453;
  short unsigned int _454;
  int _455;
  int _456;
  short unsigned int _458;
  int _459;
  int _460;
  unsigned int i_mb_type.4_461;
  int _462;
  long int _463;
  unsigned char _464;
  int _466;
  short unsigned int _467;
  int _468;
  int _469;
  unsigned char _470;
  short unsigned int _472;
  int _473;
  int _474;
  unsigned char _475;
  short unsigned int _477;
  int _478;
  int _479;
  unsigned char _480;
  unsigned char _482;
  short unsigned int _483;
  int _484;
  int _485;
  unsigned char _487;
  short unsigned int _488;
  int _489;
  int _490;
  unsigned char _492;
  short unsigned int _493;
  int _494;
  int _495;
  int _496;
  int _497;
  int _498;
  int _499;
  int _501;
  long int _502;
  int _503;
  long int _504;
  unsigned char _505;
  int _507;
  short unsigned int _508;
  int _509;
  int _510;
  int _511;
  long int _512;
  unsigned char _513;
  short unsigned int _515;
  int _516;
  int _517;
  int _518;
  long int _519;
  int _520;
  long int _521;
  unsigned char _522;
  unsigned char _524;
  short unsigned int _525;
  int _526;
  int _527;
  int _529;
  long int _530;
  unsigned char _533;
  short unsigned int _535;
  int _536;
  int _537;
  unsigned int i_mb_type.5_540;
  long int _541;
  unsigned char _542;
  int _544;
  short unsigned int _545;
  int _546;
  int _547;
  int _548;
  unsigned char _549;
  long int _551;
  unsigned char _552;
  int _554;
  short unsigned int _555;
  int _556;
  int _557;
  unsigned char _558;
  short unsigned int _560;
  int _561;
  int _562;
  int _563;
  _Bool _564;
  long int _565;
  int _566;
  unsigned char _567;
  short unsigned int _569;
  int _570;
  int _571;
  int _572;
  unsigned char _574;
  short unsigned int _576;
  int _577;
  int _578;
  unsigned char _579;
  unsigned char _580;
  unsigned char _582;
  short unsigned int _583;
  int _584;
  int _585;
  _Bool _587;
  long int _588;
  int _589;
  unsigned char _590;
  short unsigned int _592;
  int _593;
  int _594;
  int _595;
  long int _596;
  unsigned char _598;
  unsigned char _600;
  short unsigned int _602;
  int _603;
  int _604;
  unsigned char _605;
  long int _606;
  unsigned char _608;
  short unsigned int _610;
  int _611;
  int _612;
  long int _613;
  unsigned char _614;
  int _616;
  short unsigned int _617;
  int _618;
  int _619;
  unsigned int i_mb_type.5_620;
  unsigned char _621;
  unsigned char _622;
  short unsigned int _625;
  int _626;
  int _627;
  int _628;
  unsigned char _629;
  unsigned char _632;
  short unsigned int _635;
  int _636;
  int _637;
  unsigned char _638;
  short unsigned int _640;
  int _641;
  int _642;
  int _643;
  _Bool _644;
  long int _645;
  unsigned char _646;
  unsigned char _647;
  short unsigned int _649;
  int _650;
  int _651;
  int _652;
  int _653;
  unsigned char _654;
  short unsigned int _656;
  int _657;
  int _658;
  unsigned char _660;
  unsigned char _662;
  short unsigned int _663;
  int _664;
  int _665;
  _Bool _667;
  long int _668;
  sizetype _670;
  short unsigned int _672;
  int _673;
  int _674;
  int _675;
  long int _676;
  unsigned char _678;
  unsigned char _680;
  short unsigned int _682;
  int _683;
  int _684;
  unsigned char _685;
  long int _686;
  short unsigned int _690;
  int _691;
  int _692;
  int _693;
  unsigned char _694;
  short unsigned int _697;
  int _698;
  int _699;
  unsigned char _701;
  short unsigned int _705;
  int _706;
  int _707;
  int _708;
  unsigned char _709;
  unsigned int ivtmp_714;
  short unsigned int _715;
  int _716;
  int _717;
  unsigned char _718;
  short unsigned int _720;
  int _721;
  int _722;
  int _723;
  _Bool _724;
  long int _725;
  unsigned char _726;
  unsigned char _727;
  short unsigned int _729;
  int _730;
  int _731;
  int _732;
  int _733;
  unsigned char _734;
  short unsigned int _736;
  int _737;
  int _738;
  unsigned char _740;
  unsigned char _742;
  short unsigned int _743;
  int _744;
  int _745;
  _Bool _747;
  long int _748;
  short unsigned int _752;
  int _753;
  int _754;
  int _755;
  long int _756;
  unsigned char _758;
  unsigned char _760;
  short unsigned int _762;
  int _763;
  int _764;
  unsigned char _765;
  long int _766;
  short unsigned int _770;
  int _771;
  int _772;
  int _773;
  short unsigned int _777;
  int _778;
  int _779;
  unsigned int _781;
  unsigned int _782;
  int16_t * _783;
  int _784;
  long unsigned int _785;
  long unsigned int _786;
  sizetype _787;
  int16_t * _788;
  short int _789;
  unsigned int _791;
  int16_t * _792;
  int _793;
  long unsigned int _794;
  long unsigned int _795;
  int16_t * _796;
  short int _797;
  int _799;
  long int _800;
  unsigned int ivtmp_801;
  unsigned int ivtmp_805;
  int _808;
  long int _809;
  unsigned char _810;
  unsigned char _812;
  short unsigned int _814;
  int _815;
  int _816;
  int _818;
  int _819;
  long int _820;
  int _821;
  int _824;
  long int _825;
  unsigned char _826;
  unsigned char _828;
  short unsigned int _829;
  int _830;
  int _831;
  int _833;
  int _834;
  long int _835;
  int _839;
  int _840;
  int _841;
  long int _842;
  unsigned char _843;
  unsigned char _845;
  short unsigned int _846;
  int _847;
  int _848;
  int _850;
  int _851;
  long int _852;
  int _855;
  int _856;
  int _857;
  long int _858;
  unsigned char _859;
  short unsigned int _861;
  int _862;
  int _863;
  struct x264_pps_t * _864;
  int _865;
  int _866;
  unsigned char _867;
  struct x264_sps_t * _869;
  int _870;
  unsigned int _871;
  unsigned int _872;
  struct x264_sps_t * _874;
  int _875;
  int _877;
  int _879;
  int _883;
  int _888;
  int _889;
  int _891;
  int16_t * _892;
  int _893;
  long unsigned int _894;
  long unsigned int _895;
  int16_t * _896;
  short int _897;
  int _898;
  int8_t * _899;
  sizetype _900;
  int8_t * _901;
  signed char _902;
  long unsigned int _904;
  int16_t * _905;
  short int _906;
  short int _907;
  int _910;
  _Bool _913;
  _Bool _914;
  _Bool _915;
  int _918;
  long int _919;
  unsigned char _920;
  unsigned char _922;
  short unsigned int _924;
  int _925;
  int _926;
  unsigned int ivtmp_929;
  unsigned char _932;
  short unsigned int _935;
  int _936;
  int _937;
  int _944;
  int _945;
  int _946;
  int _947;
  int8_t * _948;
  int _949;
  int _950;
  int _951;
  sizetype _952;
  int8_t * _953;
  signed char _954;
  _Bool _955;
  _Bool _956;
  _Bool _957;
  int _959;
  unsigned int i_mb_type.12_960;
  unsigned int i_mb_i_offset.14_962;
  unsigned int _963;
  unsigned char _964;
  int _965;
  int _967;
  struct x264_pps_t * _968;
  int _969;
  int _970;
  int _972;
  int _973;
  signed char _974;
  int _976;
  signed char _977;
  int _979;
  signed char _980;
  int _981;
  signed char _982;
  signed char _983;
  signed char _985;
  int _986;
  int _987;
  signed char _988;
  int _990;
  int _992;
  int _994;
  int _997;
  unsigned char _998;
  unsigned int _999;
  unsigned int _1000;
  unsigned char _1001;
  int _1002;
  int _1004;
  int _1005;
  int _1006;
  unsigned char _1007;
  int _1008;
  int _1009;
  int _1010;
  int _1011;
  int _1012;
  int _1013;
  int iftmp.15_1014;
  int _1015;
  unsigned int _1016;
  unsigned int _1017;
  unsigned char _1018;
  int _1019;
  int _1021;
  int _1022;
  unsigned char _1023;
  unsigned int _1024;
  unsigned int _1025;
  unsigned char _1026;
  int _1027;
  int _1028;
  int _1029;
  int _1031;
  int _1032;
  signed char _1033;
  int _1034;
  int _1036;
  unsigned char _1037;
  int _1038;
  int _1039;
  int _1040;
  short int _1041;
  int _1042;
  short int _1043;
  int _1044;
  int _1045;
  _Bool _1046;
  int _1047;
  int _1048;
  short int _1049;
  int _1050;
  short int _1051;
  int _1052;
  int _1053;
  int _1055;
  int _1057;
  int _1058;
  signed char _1059;
  int _1060;
  int _1062;
  unsigned char _1063;
  int _1064;
  int _1069;
  unsigned char _1070;
  int _1071;
  int _1072;
  int _1073;
  short int _1074;
  int _1075;
  short int _1076;
  int _1077;
  int _1078;
  int _1080;
  int _1081;
  short int _1082;
  int _1083;
  short int _1084;
  int _1085;
  int _1086;
  int _1087;
  int _1088;
  short int _1089;
  int _1090;
  short int _1091;
  int _1092;
  int _1093;
  int _1094;
  int _1095;
  int _1096;
  short int _1097;
  int _1098;
  short int _1099;
  int _1100;
  int _1101;
  int _1102;
  int _1103;
  int _1105;
  int _1106;
  signed char _1107;
  int _1108;
  int _1110;
  unsigned char _1111;
  int _1112;
  int _1117;
  unsigned char _1118;
  int _1119;
  int _1120;
  int _1121;
  short int _1122;
  int _1123;
  short int _1124;
  int _1125;
  int _1126;
  int _1127;
  int _1128;
  int _1129;
  short int _1130;
  int _1131;
  short int _1132;
  int _1133;
  int _1134;
  int _1135;
  int _1136;
  short int _1137;
  int _1138;
  short int _1139;
  int _1140;
  int _1141;
  int _1142;
  int _1143;
  int _1144;
  short int _1145;
  int _1146;
  short int _1147;
  int _1148;
  int _1149;
  int _1150;
  int _1151;
  signed char _1152;
  signed char _1153;
  signed char _1154;
  signed char _1155;
  signed char _1156;
  signed char _1157;
  signed char _1158;
  int _1160;
  int _1162;
  unsigned int _1163;
  unsigned int _1164;
  int _1165;
  int _1166;
  unsigned char _1167;
  unsigned int _1168;
  unsigned int _1169;
  unsigned char _1170;
  int _1171;
  int _1173;
  int _1176;
  int _1177;
  unsigned int ivtmp_1178;
  signed char _1179;
  int _1180;
  int _1182;
  unsigned char _1183;
  int _1184;
  int _1190;
  unsigned char _1191;
  int _1192;
  int _1197;
  unsigned char _1198;
  int _1199;
  int _1204;
  unsigned char _1205;
  int _1206;
  int _1207;
  int _1208;
  int _1212;
  int _1214;
  unsigned char _1215;
  unsigned int _1216;
  unsigned int _1217;
  unsigned char _1218;
  int _1219;
  int _1221;
  int _1224;
  unsigned char _1225;
  int _1226;
  int _1227;
  signed char _1228;
  int _1229;
  int _1230;
  int _1231;
  int _1232;
  unsigned char _1233;
  int _1234;
  int _1236;
  int _1237;
  int _1240;
  unsigned char _1241;
  int _1242;
  int _1243;
  signed char _1244;
  int _1245;
  int _1246;
  int _1247;
  int _1248;
  unsigned char _1249;
  int _1250;
  int _1252;
  int _1253;
  int _1263;
  int _1265;
  int _1266;
  int _1267;
  unsigned char _1268;
  unsigned int _1269;
  unsigned int _1270;
  unsigned char _1271;
  int _1272;
  int _1274;
  int _1276;
  int iftmp.16_1277;
  int _1278;
  int iftmp.16_1279;
  int _1281;
  signed char _1282;
  int _1283;
  int _1284;
  unsigned char _1285;
  int _1286;
  int _1288;
  int _1289;
  int _1290;
  signed char _1291;
  int _1292;
  int _1293;
  unsigned char _1294;
  int _1295;
  int _1297;
  int _1298;
  int _1299;
  signed char _1300;
  int _1301;
  int _1302;
  unsigned char _1303;
  int _1304;
  int _1306;
  int _1307;
  int _1308;
  signed char _1309;
  int _1310;
  int _1311;
  unsigned char _1312;
  int _1313;
  int _1315;
  int _1316;
  int _1317;
  signed char _1318;
  int _1319;
  int _1320;
  unsigned char _1321;
  int _1322;
  int _1324;
  int _1325;
  int _1329;
  short int _1330;
  int _1331;
  short int _1332;
  int _1333;
  int _1334;
  int _1335;
  int _1336;
  int _1337;
  short int _1338;
  int _1339;
  short int _1340;
  int _1341;
  int _1342;
  int _1343;
  int _1344;
  int _1345;
  short int _1346;
  int _1347;
  short int _1348;
  int _1349;
  int _1350;
  int _1351;
  int _1352;
  int _1353;
  short int _1354;
  int _1355;
  short int _1356;
  int _1357;
  int _1358;
  int _1359;
  int _1360;
  int _1361;
  short int _1362;
  int _1363;
  short int _1364;
  int _1365;
  int _1366;
  int _1367;
  int _1368;
  int _1369;
  short int _1370;
  int _1371;
  short int _1372;
  int _1373;
  int _1374;
  int _1375;
  int _1376;
  int _1377;
  short int _1378;
  int _1379;
  short int _1380;
  int _1381;
  int _1382;
  int _1383;
  int _1384;
  int _1385;
  short int _1386;
  int _1387;
  short int _1388;
  int _1389;
  int _1390;
  int _1391;
  int _1392;
  int _1393;
  short int _1394;
  int _1395;
  short int _1396;
  int _1397;
  int _1398;
  int _1399;
  int _1400;
  int _1401;
  short int _1402;
  int _1403;
  short int _1404;
  int _1405;
  int _1406;
  int _1407;
  int _1408;
  int _1411;
  int _1412;
  int _1413;
  int _1414;
  int _1415;
  unsigned char _1416;
  unsigned int _1417;
  unsigned int _1418;
  unsigned char _1419;
  int _1420;
  int _1422;
  int _1423;
  int _1424;
  int _1425;
  int _1426;
  unsigned char _1427;
  unsigned int _1428;
  unsigned int _1429;
  unsigned char _1430;
  int _1431;
  int _1433;
  int _1435;
  int _1436;
  int _1437;
  signed char _1438;
  int16_t[16] * _1439;
  int _1440;
  int _1442;
  int16_t[16] * _1443;
  int _1445;
  unsigned char _1446;
  int16_t * _1447;
  int _1451;
  int _1452;
  int16_t[4] * _1454;
  int16_t[4] * _1455;
  int _1456;
  int _1457;
  int _1459;
  int16_t[16] * _1460;
  int _1462;
  unsigned char _1463;
  int16_t * _1464;
  int _1468;
  int _1470;
  int _1475;
  int _1476;
  unsigned int iftmp.17_1477;
  int _1478;
  int _1479;
  unsigned int iftmp.17_1480;
  unsigned int iftmp.17_1481;
  unsigned int _1482;
  unsigned char _1483;
  int _1484;
  int _1486;
  int _1487;
  unsigned int iftmp.17_1488;
  int _1489;
  int _1490;
  unsigned int iftmp.17_1491;
  unsigned int iftmp.17_1492;
  unsigned int _1493;
  unsigned char _1494;
  int _1495;
  int _1497;
  unsigned int _1498;
  unsigned int _1499;
  unsigned char _1500;
  int _1501;
  int _1502;
  unsigned int _1504;
  unsigned int _1505;
  unsigned char _1506;
  int _1507;
  int _1508;
  int _1510;
  unsigned int iftmp.17_1511;
  int _1512;
  int _1513;
  unsigned int iftmp.17_1514;
  unsigned int iftmp.17_1515;
  unsigned int _1516;
  unsigned char _1517;
  int _1518;
  int _1520;
  unsigned int _1521;
  unsigned int _1522;
  unsigned char _1523;
  int _1524;
  int _1525;
  unsigned char _1530;
  struct x264_sps_t * _1532;
  int _1533;
  unsigned int _1534;
  unsigned int _1535;
  struct x264_sps_t * _1537;
  int _1538;
  int _1540;
  int _1542;
  int _1546;
  int _1550;
  int _1553;
  int _1554;
  void (*<T15c0>) (int16_t *, int16_t *) _1555;
  int16_t[64] * _1556;
  int _1557;
  int16_t[16] * _1558;
  int _1562;
  int _1563;
  int _1566;
  int _1567;
  int16_t[16] * _1568;
  int _1570;
  unsigned char _1571;
  unsigned int ivtmp_1591;
  int iftmp.16_1593;
  unsigned int ivtmp_1596;
  int _1711;
  int _1733;
  int _1748;
  unsigned int ivtmp_1751;
  unsigned int ivtmp_1752;
  unsigned int ivtmp_1753;
  unsigned int ivtmp_1754;
  unsigned int ivtmp_1776;
  int cstore_1780;
  int cstore_1823;
  _Bool _1846;
  int _1932;
  int _1957;
  int _1960;
  int8_t * _1966;
  signed char _1967;
  unsigned int ivtmp_1968;
  int8_t * _1969;
  sizetype _1970;
  _Bool _1971;
  _Bool _1973;
  int _1976;
  struct x264_pps_t * _1977;
  _Bool _1978;
  _Bool _1981;
  _Bool _1982;
  int _1989;
  int _1993;
  signed char _1994;
  unsigned int ivtmp_1996;
  int _2002;
  signed char _2003;
  int _2004;
  unsigned int ivtmp_2006;
  int _2007;
  signed char _2008;
  int _2009;
  int _2016;
  int _2019;
  int _2023;
  _Bool _2024;
  unsigned int ivtmp_2166;
  unsigned int ivtmp_2168;
  unsigned int ivtmp_2182;
  unsigned int ivtmp_2210;
  unsigned int ivtmp_2215;
  unsigned int ivtmp_2217;
  unsigned int ivtmp_2218;
  unsigned int ivtmp_2219;
  unsigned int ivtmp_2223;
  unsigned int ivtmp_2224;
  unsigned int ivtmp_2225;
  unsigned int ivtmp_2226;
  unsigned int ivtmp_2227;
  unsigned int ivtmp_2228;
  unsigned int ivtmp_2229;
  unsigned int ivtmp_2230;
  int prephitmp_2249;
  int prephitmp_2250;
  int prephitmp_2251;
  int cstore_2252;
  unsigned int ivtmp_2255;
  unsigned int ivtmp_2258;
  unsigned int ivtmp_2260;
  unsigned int ivtmp_2261;
  unsigned int ivtmp_2267;
  unsigned int ivtmp_2270;
  unsigned int ivtmp_2274;
  unsigned int ivtmp_2275;
  unsigned int ivtmp_2276;
  unsigned int ivtmp_2277;
  unsigned int ivtmp_2278;
  unsigned int ivtmp_2279;
  unsigned int ivtmp_2280;
  unsigned int ivtmp_2281;
  unsigned int ivtmp_2282;
  int prephitmp_2295;
  int pretmp_2296;
  int pretmp_2297;
  int pretmp_2298;
  int prephitmp_2299;
  unsigned int ivtmp_2300;
  int pretmp_2303;
  int prephitmp_2304;
  int pretmp_2305;
  int prephitmp_2306;
  int pretmp_2308;
  int pretmp_2311;
  int prephitmp_2312;
  unsigned int ivtmp_2313;
  int pretmp_2316;
  int prephitmp_2317;
  int pretmp_2319;
  int pretmp_2320;
  int pretmp_2321;
  int prephitmp_2322;
  int pretmp_2324;
  int prephitmp_2325;
  int prephitmp_2327;
  _Bool prephitmp_2333;
  int prephitmp_2335;
  int prephitmp_2338;
  int prephitmp_2340;
  unsigned int ivtmp_2341;
  int prephitmp_2345;
  int pretmp_2347;
  int pretmp_2348;
  int pretmp_2349;
  int pretmp_2350;
  int pretmp_2351;
  int pretmp_2352;
  int pretmp_2353;
  int pretmp_2354;
  int prephitmp_2355;
  int pretmp_2357;
  long int pretmp_2360;
  long int prephitmp_2361;
  int pretmp_2362;
  int prephitmp_2363;
  unsigned int ivtmp_2369;
  long int prephitmp_2370;
  int prephitmp_2374;
  int16_t * pretmp_2377;
  int16_t * prephitmp_2378;
  int pretmp_2380;
  int prephitmp_2382;
  int pretmp_2384;
  int prephitmp_2386;
  int pretmp_2387;
  int prephitmp_2388;
  int pretmp_2389;
  int pretmp_2391;
  int pretmp_2393;
  int prephitmp_2394;
  int pretmp_2395;
  int pretmp_2397;
  int pretmp_2399;
  int prephitmp_2400;
  int pretmp_2401;
  int pretmp_2403;
  int prephitmp_2404;
  int pretmp_2405;
  int pretmp_2407;
  int prephitmp_2408;
  int pretmp_2415;
  int pretmp_2416;
  int pretmp_2417;
  int pretmp_2418;
  int pretmp_2419;
  int prephitmp_2420;
  int pretmp_2421;
  int prephitmp_2422;
  int pretmp_2425;
  int prephitmp_2426;
  unsigned int ivtmp_2428;
  unsigned int pretmp_2433;
  unsigned int prephitmp_2434;
  unsigned char pretmp_2435;
  unsigned char prephitmp_2436;
  int prephitmp_2437;
  int prephitmp_2439;
  int prephitmp_2440;
  int prephitmp_2441;
  int pretmp_2442;
  int prephitmp_2443;
  int pretmp_2444;
  int prephitmp_2445;
  int pretmp_2446;
  int prephitmp_2447;
  int prephitmp_2451;
  int prephitmp_2453;
  int pretmp_2454;
  int prephitmp_2456;
  int prephitmp_2458;
  int pretmp_2459;
  int pretmp_2460;
  int prephitmp_2461;
  int prephitmp_2463;
  int pretmp_2464;
  int prephitmp_2465;
  int pretmp_2466;
  int prephitmp_2467;
  int prephitmp_2469;
  int prephitmp_2470;

  <bb 2>:
  b_transform_bak_5 = h_4(D)->mb.b_transform_8x8;
  # DEBUG b_transform_bak => b_transform_bak_5
  x264_macroblock_encode (h_4(D));
  # DEBUG h => h_4(D)
  # DEBUG h => h_4(D)
  # DEBUG size => 0
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG p => 0
  # DEBUG satd => 0
  _7 = h_4(D)->mb.pic.p_fdec[0];
  # DEBUG fdec => _7
  _55 = h_4(D)->mb.pic.p_fenc[0];
  # DEBUG fenc => _55
  _60 = h_4(D)->mb.i_psy_rd;
  if (_60 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _61 = h_4(D)->pixf.hadamard_ac[0];
  acs_62 = _61 (_7, 32);
  # DEBUG acs => acs_62
  _63 = (int) acs_62;
  # DEBUG h => h_4(D)
  # DEBUG pixel => 0
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG satd => 0
  # DEBUG min_x => 0
  # DEBUG min_y => 0
  # DEBUG max_x => 4
  # DEBUG max_y => 4
  _72 = h_4(D)->mb.pic.fenc_satd_sum;
  # DEBUG h => NULL
  # DEBUG pixel => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  _81 = _63 - _72;
  _82 = ABS_EXPR <_81>;
  _83 = acs_62 >> 32;
  _84 = (int) _83;
  # DEBUG h => h_4(D)
  # DEBUG pixel => 0
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG sa8d => 0
  # DEBUG min_x => 0
  # DEBUG min_y => 0
  # DEBUG max_x => 2
  # DEBUG max_y => 2
  _91 = h_4(D)->mb.pic.fenc_sa8d_sum;
  # DEBUG h => NULL
  # DEBUG pixel => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG sa8d => NULL
  _100 = _84 - _91;
  _101 = ABS_EXPR <_100>;
  satd_102 = _82 + _101;
  # DEBUG satd => satd_102
  satd_103 = satd_102 >> 1;
  # DEBUG satd => satd_103
  # DEBUG satd => satd_103
  _129 = h_4(D)->mb.i_psy_rd;
  _131 = satd_103 * _129;
  _132 = h_4(D)->mb.i_qp;
  _133 = x264_lambda_tab[_132];
  _134 = _131 * _133;
  _135 = _134 + 128;
  satd_136 = _135 >> 8;
  # DEBUG satd => satd_136

  <bb 4>:
  # satd_139 = PHI <satd_136(3), 0(2)>
  # DEBUG satd => satd_139
  _137 = h_4(D)->pixf.ssd[0];
  _138 = _137 (_55, 16, _7, 32);
  _140 = _138 + satd_139;
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG fdec => NULL
  # DEBUG fenc => NULL
  # DEBUG acs => NULL
  # DEBUG dc => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG sa8d => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG p => NULL
  # DEBUG h => h_4(D)
  # DEBUG size => 3
  # DEBUG p => 1
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG satd => 0
  _40 = h_4(D)->mb.pic.p_fdec[1];
  # DEBUG fdec => _40
  _41 = h_4(D)->mb.pic.p_fenc[1];
  # DEBUG fenc => _41
  # DEBUG satd => 0
  _42 = h_4(D)->pixf.ssd[3];
  _43 = _42 (_41, 16, _40, 32);
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG p => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG sa8d => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG dc => NULL
  # DEBUG acs => NULL
  # DEBUG fenc => NULL
  # DEBUG fdec => NULL
  # DEBUG satd => NULL
  _44 = _43 + _140;
  # DEBUG h => h_4(D)
  # DEBUG size => 3
  # DEBUG p => 2
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG satd => 0
  _45 = h_4(D)->mb.pic.p_fdec[2];
  # DEBUG fdec => _45
  _46 = h_4(D)->mb.pic.p_fenc[2];
  # DEBUG fenc => _46
  # DEBUG satd => 0
  _47 = h_4(D)->pixf.ssd[3];
  _48 = _47 (_46, 16, _45, 32);
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG p => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG sa8d => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG dc => NULL
  # DEBUG acs => NULL
  # DEBUG fenc => NULL
  # DEBUG fdec => NULL
  # DEBUG satd => NULL
  _49 = _44 + _48;
  # DEBUG h => NULL
  # DEBUG i_ssd => NULL
  _9 = h_4(D)->mb.i_type;
  _10 = _9 == 6;
  _11 = _9 == 18;
  _12 = _10 | _11;
  if (_12 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  _14 = i_lambda2_13(D) + 128;
  i_bits_15 = _14 >> 8;
  # DEBUG i_bits => i_bits_15
  goto <bb 447>;

  <bb 6>:
  _16 = h_4(D)->param.b_cabac;
  if (_16 != 0)
    goto <bb 7>;
  else
    goto <bb 230>;

  <bb 7>:
  _17 = h_4(D)->mc.memcpy_aligned;
  _18 = &h_4(D)->cabac.f8_bits_encoded;
  _17 (&cabac_tmp.f8_bits_encoded, _18, 464);
  # DEBUG h => h_4(D)
  # DEBUG cb => &cabac_tmp
  i_mb_type_158 = h_4(D)->mb.i_type;
  # DEBUG i_mb_type => i_mb_type_158
  # DEBUG h => h_4(D)
  # DEBUG cb => &cabac_tmp
  # DEBUG i_mb_type => i_mb_type_158
  _307 = h_4(D)->sh.b_mbaff;
  if (_307 != 0)
    goto <bb 8>;
  else
    goto <bb 11>;

  <bb 8>:
  _308 = h_4(D)->mb.i_mb_y;
  _309 = _308 & 1;
  if (_309 == 0)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  _310 = h_4(D)->mb.type;
  _311 = h_4(D)->mb.i_mb_xy;
  _312 = h_4(D)->mb.i_mb_stride;
  _313 = _311 - _312;
  _314 = (sizetype) _313;
  _315 = _310 + _314;
  _316 = *_315;
  _317 = _316 == 6;
  _318 = _316 == 18;
  _319 = _317 | _318;
  if (_319 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  _320 = h_4(D)->mb.b_interlaced;
  _321 = (long int) _320;
  _322 = h_4(D)->mb.cache.i_neighbour_interlaced;
  _323 = _322 + 70;
  _324 = (long int) _323;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _324
  # DEBUG b => _321
  _325 = cabac_tmp.state[_324];
  i_state_326 = (int) _325;
  # DEBUG i_state => i_state_326
  _327 = cabac_tmp.f8_bits_encoded;
  _328 = x264_cabac_entropy[i_state_326][_321];
  _329 = (int) _328;
  _330 = _327 + _329;
  cabac_tmp.f8_bits_encoded = _330;

  <bb 11>:
  _331 = h_4(D)->sh.i_type;
  if (_331 == 2)
    goto <bb 12>;
  else
    goto <bb 22>;

  <bb 12>:
  # DEBUG ctx => 0
  _332 = h_4(D)->mb.i_mb_type_left;
  _1978 = _332 > 0;
  ctx_1979 = (int) _1978;
  # DEBUG ctx => ctx_1979
  _333 = h_4(D)->mb.i_mb_type_top;
  if (_333 > 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  ctx_335 = ctx_1979 + 1;
  # DEBUG ctx => ctx_335

  <bb 14>:
  # ctx_336 = PHI <ctx_1979(12), ctx_335(13)>
  # DEBUG ctx => ctx_336
  _337 = ctx_336 + 3;
  # DEBUG h => h_4(D)
  # DEBUG cb => &cabac_tmp
  # DEBUG i_mb_type => i_mb_type_158
  # DEBUG ctx0 => _337
  # DEBUG ctx1 => 6
  # DEBUG ctx2 => 7
  # DEBUG ctx3 => 8
  # DEBUG ctx4 => 9
  # DEBUG ctx5 => 10
  i_mb_type.5_540 = (unsigned int) i_mb_type_158;
  if (i_mb_type.5_540 <= 1)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _541 = (long int) _337;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _541
  # DEBUG b => 0
  _542 = cabac_tmp.state[_541];
  i_state_543 = (int) _542;
  # DEBUG i_state => i_state_543
  _544 = cabac_tmp.f8_bits_encoded;
  _545 = x264_cabac_entropy[i_state_543][0];
  _546 = (int) _545;
  _547 = _544 + _546;
  cabac_tmp.f8_bits_encoded = _547;
  goto <bb 62>;

  <bb 16>:
  if (i_mb_type_158 == 3)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  # DEBUG D#8 => h_4(D)
  # DEBUG D#9 => 3
  # DEBUG D#10 => 6
  # DEBUG D#11 => 7
  # DEBUG D#12 => 8
  # DEBUG D#13 => 9
  # DEBUG D#14 => 10
  # DEBUG cb => &cabac_tmp
  # DEBUG ctx0 => _337
  # DEBUG D#15 => D#14
  # DEBUG ctx5 => D#15
  # DEBUG D#16 => D#13
  # DEBUG ctx4 => D#16
  # DEBUG D#17 => D#12
  # DEBUG ctx3 => D#17
  # DEBUG D#18 => D#11
  # DEBUG ctx2 => D#18
  # DEBUG D#19 => D#10
  # DEBUG ctx1 => D#19
  # DEBUG D#20 => D#9
  # DEBUG i_mb_type => D#20
  # DEBUG D#21 => D#8
  # DEBUG h => D#21
  _613 = (long int) _337;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _613
  # DEBUG b => 1
  _614 = cabac_tmp.state[_613];
  i_state_615 = (int) _614;
  # DEBUG i_state => i_state_615
  _616 = cabac_tmp.f8_bits_encoded;
  _617 = x264_cabac_entropy[i_state_615][1];
  _618 = (int) _617;
  _619 = _616 + _618;
  cabac_tmp.f8_bits_encoded = _619;
  goto <bb 457>;

  <bb 18>:
  _548 = h_4(D)->mb.i_intra16x16_pred_mode;
  _549 = x264_mb_pred_mode16x16_fix[_548];
  i_pred_550 = (int) _549;
  # DEBUG i_pred => i_pred_550
  _551 = (long int) _337;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _551
  # DEBUG b => 1
  _552 = cabac_tmp.state[_551];
  i_state_553 = (int) _552;
  # DEBUG i_state => i_state_553
  _554 = cabac_tmp.f8_bits_encoded;
  _555 = x264_cabac_entropy[i_state_553][1];
  _556 = (int) _555;
  _557 = _554 + _556;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 276
  # DEBUG b => 0
  _558 = cabac_tmp.state[276];
  i_state_559 = (int) _558;
  # DEBUG i_state => i_state_559
  _560 = x264_cabac_entropy[i_state_559][0];
  _561 = (int) _560;
  _562 = _557 + _561;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _563 = h_4(D)->mb.i_cbp_luma;
  _564 = _563 != 0;
  _565 = (long int) _564;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 6
  # DEBUG b => _565
  _567 = cabac_tmp.state[6];
  i_state_568 = (int) _567;
  # DEBUG i_state => i_state_568
  _569 = x264_cabac_entropy[i_state_568][_565];
  _570 = (int) _569;
  _571 = _562 + _570;
  cabac_tmp.f8_bits_encoded = _571;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _572 = h_4(D)->mb.i_cbp_chroma;
  if (_572 == 0)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 7
  # DEBUG b => 0
  _574 = cabac_tmp.state[7];
  i_state_575 = (int) _574;
  # DEBUG i_state => i_state_575
  _576 = x264_cabac_entropy[i_state_575][0];
  _577 = (int) _576;
  _578 = _571 + _577;
  cabac_tmp.f8_bits_encoded = _578;
  goto <bb 21>;

  <bb 20>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 7
  # DEBUG b => 1
  _580 = cabac_tmp.state[7];
  i_state_581 = (int) _580;
  # DEBUG i_state => i_state_581
  _582 = x264_cabac_transition[i_state_581][1];
  cabac_tmp.state[7] = _582;
  _583 = x264_cabac_entropy[i_state_581][1];
  _584 = (int) _583;
  _585 = _571 + _584;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _587 = _572 != 1;
  _588 = (long int) _587;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 8
  # DEBUG b => _588
  _590 = cabac_tmp.state[8];
  i_state_591 = (int) _590;
  # DEBUG i_state => i_state_591
  _592 = x264_cabac_entropy[i_state_591][_588];
  _593 = (int) _592;
  _594 = _585 + _593;
  cabac_tmp.f8_bits_encoded = _594;

  <bb 21>:
  # prephitmp_2441 = PHI <_578(19), _594(20)>
  _595 = i_pred_550 >> 1;
  _596 = (long int) _595;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 9
  # DEBUG b => _596
  _598 = cabac_tmp.state[9];
  i_state_599 = (int) _598;
  # DEBUG i_state => i_state_599
  _600 = x264_cabac_transition[i_state_599][_596];
  cabac_tmp.state[9] = _600;
  _602 = x264_cabac_entropy[i_state_599][_596];
  _603 = (int) _602;
  _604 = _603 + prephitmp_2441;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _605 = _549 & 1;
  _606 = (long int) _605;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 10
  # DEBUG b => _606
  _608 = cabac_tmp.state[10];
  i_state_609 = (int) _608;
  # DEBUG i_state => i_state_609
  _610 = x264_cabac_entropy[i_state_609][_606];
  _611 = (int) _610;
  _612 = _604 + _611;
  cabac_tmp.f8_bits_encoded = _612;
  goto <bb 62>;

  <bb 22>:
  if (_331 == 0)
    goto <bb 23>;
  else
    goto <bb 40>;

  <bb 23>:
  if (i_mb_type_158 == 4)
    goto <bb 24>;
  else
    goto <bb 30>;

  <bb 24>:
  _338 = h_4(D)->mb.i_partition;
  if (_338 == 16)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 14
  # DEBUG b => 0
  _339 = cabac_tmp.state[14];
  i_state_340 = (int) _339;
  # DEBUG i_state => i_state_340
  _341 = cabac_tmp.f8_bits_encoded;
  _342 = x264_cabac_entropy[i_state_340][0];
  _343 = (int) _342;
  _344 = _341 + _343;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 15
  # DEBUG b => 0
  _345 = cabac_tmp.state[15];
  i_state_346 = (int) _345;
  # DEBUG i_state => i_state_346
  _347 = x264_cabac_entropy[i_state_346][0];
  _348 = (int) _347;
  _349 = _344 + _348;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 16
  # DEBUG b => 0
  _350 = cabac_tmp.state[16];
  i_state_351 = (int) _350;
  # DEBUG i_state => i_state_351
  _352 = x264_cabac_entropy[i_state_351][0];
  _353 = (int) _352;
  _354 = _349 + _353;
  cabac_tmp.f8_bits_encoded = _354;
  goto <bb 456>;

  <bb 26>:
  if (_338 == 14)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 14
  # DEBUG b => 0
  _355 = cabac_tmp.state[14];
  i_state_356 = (int) _355;
  # DEBUG i_state => i_state_356
  _357 = cabac_tmp.f8_bits_encoded;
  _358 = x264_cabac_entropy[i_state_356][0];
  _359 = (int) _358;
  _360 = _357 + _359;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 15
  # DEBUG b => 1
  _361 = cabac_tmp.state[15];
  i_state_362 = (int) _361;
  # DEBUG i_state => i_state_362
  _363 = x264_cabac_entropy[i_state_362][1];
  _364 = (int) _363;
  _365 = _360 + _364;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 17
  # DEBUG b => 1
  _366 = cabac_tmp.state[17];
  i_state_367 = (int) _366;
  # DEBUG i_state => i_state_367
  _368 = x264_cabac_entropy[i_state_367][1];
  _369 = (int) _368;
  _370 = _365 + _369;
  cabac_tmp.f8_bits_encoded = _370;
  goto <bb 456>;

  <bb 28>:
  if (_338 == 15)
    goto <bb 29>;
  else
    goto <bb 456>;

  <bb 29>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 14
  # DEBUG b => 0
  _371 = cabac_tmp.state[14];
  i_state_372 = (int) _371;
  # DEBUG i_state => i_state_372
  _373 = cabac_tmp.f8_bits_encoded;
  _374 = x264_cabac_entropy[i_state_372][0];
  _375 = (int) _374;
  _376 = _373 + _375;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 15
  # DEBUG b => 1
  _377 = cabac_tmp.state[15];
  i_state_378 = (int) _377;
  # DEBUG i_state => i_state_378
  _379 = x264_cabac_entropy[i_state_378][1];
  _380 = (int) _379;
  _381 = _376 + _380;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 17
  # DEBUG b => 0
  _382 = cabac_tmp.state[17];
  i_state_383 = (int) _382;
  # DEBUG i_state => i_state_383
  _384 = x264_cabac_entropy[i_state_383][0];
  _385 = (int) _384;
  _386 = _381 + _385;
  cabac_tmp.f8_bits_encoded = _386;
  goto <bb 456>;

  <bb 30>:
  if (i_mb_type_158 == 5)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 14
  # DEBUG b => 0
  _387 = cabac_tmp.state[14];
  i_state_388 = (int) _387;
  # DEBUG i_state => i_state_388
  _389 = cabac_tmp.f8_bits_encoded;
  _390 = x264_cabac_entropy[i_state_388][0];
  _391 = (int) _390;
  _392 = _389 + _391;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 15
  # DEBUG b => 0
  _393 = cabac_tmp.state[15];
  i_state_394 = (int) _393;
  # DEBUG i_state => i_state_394
  _395 = x264_cabac_entropy[i_state_394][0];
  _396 = (int) _395;
  _397 = _392 + _396;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 16
  # DEBUG b => 1
  _398 = cabac_tmp.state[16];
  i_state_399 = (int) _398;
  # DEBUG i_state => i_state_399
  _400 = x264_cabac_entropy[i_state_399][1];
  _401 = (int) _400;
  _402 = _397 + _401;
  cabac_tmp.f8_bits_encoded = _402;
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  goto <bb 87>;

  <bb 32>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 14
  # DEBUG b => 1
  _403 = cabac_tmp.state[14];
  i_state_404 = (int) _403;
  # DEBUG i_state => i_state_404
  _405 = cabac_tmp.f8_bits_encoded;
  _406 = x264_cabac_entropy[i_state_404][1];
  _407 = (int) _406;
  _408 = _405 + _407;
  cabac_tmp.f8_bits_encoded = _408;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG h => h_4(D)
  # DEBUG cb => &cabac_tmp
  # DEBUG i_mb_type => i_mb_type_158
  # DEBUG ctx0 => 17
  # DEBUG ctx1 => 18
  # DEBUG ctx2 => 19
  # DEBUG ctx3 => 19
  # DEBUG ctx4 => 20
  # DEBUG ctx5 => 20
  i_mb_type.5_620 = (unsigned int) i_mb_type_158;
  if (i_mb_type.5_620 <= 1)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 33>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 17
  # DEBUG b => 0
  _622 = cabac_tmp.state[17];
  i_state_623 = (int) _622;
  # DEBUG i_state => i_state_623
  _625 = x264_cabac_entropy[i_state_623][0];
  _626 = (int) _625;
  _627 = _408 + _626;
  cabac_tmp.f8_bits_encoded = _627;
  goto <bb 458>;

  <bb 34>:
  if (i_mb_type_158 == 3)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 35>:
  # DEBUG D#8 => h_4(D)
  # DEBUG D#9 => 3
  # DEBUG D#10 => 18
  # DEBUG D#11 => 19
  # DEBUG D#12 => 19
  # DEBUG D#13 => 20
  # DEBUG D#14 => 20
  # DEBUG cb => &cabac_tmp
  # DEBUG ctx0 => 17
  # DEBUG D#15 => D#14
  # DEBUG ctx5 => D#15
  # DEBUG D#16 => D#13
  # DEBUG ctx4 => D#16
  # DEBUG D#17 => D#12
  # DEBUG ctx3 => D#17
  # DEBUG D#18 => D#11
  # DEBUG ctx2 => D#18
  # DEBUG D#19 => D#10
  # DEBUG ctx1 => D#19
  # DEBUG D#20 => D#9
  # DEBUG i_mb_type => D#20
  # DEBUG D#21 => D#8
  # DEBUG h => D#21
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 17
  # DEBUG b => 1
  _694 = cabac_tmp.state[17];
  i_state_695 = (int) _694;
  # DEBUG i_state => i_state_695
  _697 = x264_cabac_entropy[i_state_695][1];
  _698 = (int) _697;
  _699 = _408 + _698;
  cabac_tmp.f8_bits_encoded = _699;
  goto <bb 457>;

  <bb 36>:
  _628 = h_4(D)->mb.i_intra16x16_pred_mode;
  _629 = x264_mb_pred_mode16x16_fix[_628];
  i_pred_630 = (int) _629;
  # DEBUG i_pred => i_pred_630
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 17
  # DEBUG b => 1
  _632 = cabac_tmp.state[17];
  i_state_633 = (int) _632;
  # DEBUG i_state => i_state_633
  _635 = x264_cabac_entropy[i_state_633][1];
  _636 = (int) _635;
  _637 = _408 + _636;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 276
  # DEBUG b => 0
  _638 = cabac_tmp.state[276];
  i_state_639 = (int) _638;
  # DEBUG i_state => i_state_639
  _640 = x264_cabac_entropy[i_state_639][0];
  _641 = (int) _640;
  _642 = _637 + _641;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _643 = h_4(D)->mb.i_cbp_luma;
  _644 = _643 != 0;
  _645 = (long int) _644;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 18
  # DEBUG b => _645
  _647 = cabac_tmp.state[18];
  i_state_648 = (int) _647;
  # DEBUG i_state => i_state_648
  _649 = x264_cabac_entropy[i_state_648][_645];
  _650 = (int) _649;
  _651 = _642 + _650;
  cabac_tmp.f8_bits_encoded = _651;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _652 = h_4(D)->mb.i_cbp_chroma;
  if (_652 == 0)
    goto <bb 37>;
  else
    goto <bb 38>;

  <bb 37>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 19
  # DEBUG b => 0
  _654 = cabac_tmp.state[19];
  i_state_655 = (int) _654;
  # DEBUG i_state => i_state_655
  _656 = x264_cabac_entropy[i_state_655][0];
  _657 = (int) _656;
  _658 = _651 + _657;
  cabac_tmp.f8_bits_encoded = _658;
  goto <bb 39>;

  <bb 38>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 19
  # DEBUG b => 1
  _660 = cabac_tmp.state[19];
  i_state_661 = (int) _660;
  # DEBUG i_state => i_state_661
  _662 = x264_cabac_transition[i_state_661][1];
  cabac_tmp.state[19] = _662;
  _663 = x264_cabac_entropy[i_state_661][1];
  _664 = (int) _663;
  _665 = _651 + _664;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _667 = _652 != 1;
  _668 = (long int) _667;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 19
  # DEBUG b => _668
  i_state_671 = (int) _662;
  # DEBUG i_state => i_state_671
  _672 = x264_cabac_entropy[i_state_671][_668];
  _673 = (int) _672;
  _674 = _665 + _673;
  cabac_tmp.f8_bits_encoded = _674;

  <bb 39>:
  # prephitmp_2440 = PHI <_658(37), _674(38)>
  _675 = i_pred_630 >> 1;
  _676 = (long int) _675;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 20
  # DEBUG b => _676
  _678 = cabac_tmp.state[20];
  i_state_679 = (int) _678;
  # DEBUG i_state => i_state_679
  _680 = x264_cabac_transition[i_state_679][_676];
  cabac_tmp.state[20] = _680;
  _682 = x264_cabac_entropy[i_state_679][_676];
  _683 = (int) _682;
  _684 = _683 + prephitmp_2440;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _685 = _629 & 1;
  _686 = (long int) _685;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 20
  # DEBUG b => _686
  i_state_689 = (int) _680;
  # DEBUG i_state => i_state_689
  _690 = x264_cabac_entropy[i_state_689][_686];
  _691 = (int) _690;
  _692 = _684 + _691;
  cabac_tmp.f8_bits_encoded = _692;
  goto <bb 458>;

  <bb 40>:
  if (_331 == 1)
    goto <bb 41>;
  else
    goto <bb 61>;

  <bb 41>:
  # DEBUG ctx => 0
  _409 = h_4(D)->mb.i_mb_type_left;
  _410 = _409 >= 0;
  _411 = _409 != 18;
  _412 = _410 & _411;
  _1971 = _409 != 7;
  _1846 = _412 & _1971;
  ctx_1975 = (int) _1846;
  # DEBUG ctx => ctx_1975
  _413 = h_4(D)->mb.i_mb_type_top;
  _414 = _413 >= 0;
  _415 = _413 != 18;
  _416 = _414 & _415;
  _303 = _413 != 7;
  _1973 = _303 & _416;
  if (_1973 != 0)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  ctx_418 = ctx_1975 + 1;
  # DEBUG ctx => ctx_418

  <bb 43>:
  # ctx_419 = PHI <ctx_418(42), ctx_1975(41)>
  # DEBUG ctx => ctx_419
  if (i_mb_type_158 == 7)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  _420 = ctx_419 + 27;
  _421 = (long int) _420;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _421
  # DEBUG b => 0
  _422 = cabac_tmp.state[_421];
  i_state_423 = (int) _422;
  # DEBUG i_state => i_state_423
  _424 = cabac_tmp.f8_bits_encoded;
  _425 = x264_cabac_entropy[i_state_423][0];
  _426 = (int) _425;
  _427 = _424 + _426;
  cabac_tmp.f8_bits_encoded = _427;
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  goto <bb 449>;

  <bb 45>:
  if (i_mb_type_158 == 17)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:
  _428 = ctx_419 + 27;
  _429 = (long int) _428;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _429
  # DEBUG b => 1
  _430 = cabac_tmp.state[_429];
  i_state_431 = (int) _430;
  # DEBUG i_state => i_state_431
  _432 = cabac_tmp.f8_bits_encoded;
  _433 = x264_cabac_entropy[i_state_431][1];
  _434 = (int) _433;
  _435 = _432 + _434;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 30
  # DEBUG b => 1
  _436 = cabac_tmp.state[30];
  i_state_437 = (int) _436;
  # DEBUG i_state => i_state_437
  _438 = x264_cabac_entropy[i_state_437][1];
  _439 = (int) _438;
  _440 = _435 + _439;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 31
  # DEBUG b => 1
  _441 = cabac_tmp.state[31];
  i_state_442 = (int) _441;
  # DEBUG i_state => i_state_442
  _443 = x264_cabac_entropy[i_state_442][1];
  _444 = (int) _443;
  _445 = _440 + _444;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 32
  # DEBUG b => 1
  _446 = cabac_tmp.state[32];
  i_state_447 = (int) _446;
  # DEBUG i_state => i_state_447
  _448 = x264_cabac_transition[i_state_447][1];
  _449 = x264_cabac_entropy[i_state_447][1];
  _450 = (int) _449;
  _451 = _445 + _450;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 32
  # DEBUG b => 1
  i_state_452 = (int) _448;
  # DEBUG i_state => i_state_452
  _453 = x264_cabac_transition[i_state_452][1];
  cabac_tmp.state[32] = _453;
  _454 = x264_cabac_entropy[i_state_452][1];
  _455 = (int) _454;
  _456 = _451 + _455;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 32
  # DEBUG b => 1
  i_state_457 = (int) _453;
  # DEBUG i_state => i_state_457
  _458 = x264_cabac_entropy[i_state_457][1];
  _459 = (int) _458;
  _460 = _456 + _459;
  cabac_tmp.f8_bits_encoded = _460;
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  goto <bb 94>;

  <bb 47>:
  i_mb_type.4_461 = (unsigned int) i_mb_type_158;
  if (i_mb_type.4_461 <= 3)
    goto <bb 48>;
  else
    goto <bb 56>;

  <bb 48>:
  _462 = ctx_419 + 27;
  _463 = (long int) _462;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _463
  # DEBUG b => 1
  _464 = cabac_tmp.state[_463];
  i_state_465 = (int) _464;
  # DEBUG i_state => i_state_465
  _466 = cabac_tmp.f8_bits_encoded;
  _467 = x264_cabac_entropy[i_state_465][1];
  _468 = (int) _467;
  _469 = _466 + _468;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 30
  # DEBUG b => 1
  _470 = cabac_tmp.state[30];
  i_state_471 = (int) _470;
  # DEBUG i_state => i_state_471
  _472 = x264_cabac_entropy[i_state_471][1];
  _473 = (int) _472;
  _474 = _469 + _473;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 31
  # DEBUG b => 1
  _475 = cabac_tmp.state[31];
  i_state_476 = (int) _475;
  # DEBUG i_state => i_state_476
  _477 = x264_cabac_entropy[i_state_476][1];
  _478 = (int) _477;
  _479 = _474 + _478;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 32
  # DEBUG b => 1
  _480 = cabac_tmp.state[32];
  i_state_481 = (int) _480;
  # DEBUG i_state => i_state_481
  _482 = x264_cabac_transition[i_state_481][1];
  _483 = x264_cabac_entropy[i_state_481][1];
  _484 = (int) _483;
  _485 = _479 + _484;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 32
  # DEBUG b => 0
  i_state_486 = (int) _482;
  # DEBUG i_state => i_state_486
  _487 = x264_cabac_transition[i_state_486][0];
  _488 = x264_cabac_entropy[i_state_486][0];
  _489 = (int) _488;
  _490 = _485 + _489;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 32
  # DEBUG b => 1
  i_state_491 = (int) _487;
  # DEBUG i_state => i_state_491
  _492 = x264_cabac_transition[i_state_491][1];
  cabac_tmp.state[32] = _492;
  _493 = x264_cabac_entropy[i_state_491][1];
  _494 = (int) _493;
  _495 = _490 + _494;
  cabac_tmp.f8_bits_encoded = _495;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG h => h_4(D)
  # DEBUG cb => &cabac_tmp
  # DEBUG i_mb_type => i_mb_type_158
  # DEBUG ctx0 => 32
  # DEBUG ctx1 => 33
  # DEBUG ctx2 => 34
  # DEBUG ctx3 => 34
  # DEBUG ctx4 => 35
  # DEBUG ctx5 => 35
  if (i_mb_type.4_461 <= 1)
    goto <bb 49>;
  else
    goto <bb 50>;

  <bb 49>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 32
  # DEBUG b => 0
  i_state_703 = (int) _492;
  # DEBUG i_state => i_state_703
  _705 = x264_cabac_entropy[i_state_703][0];
  _706 = (int) _705;
  _707 = _495 + _706;
  cabac_tmp.f8_bits_encoded = _707;
  goto <bb 457>;

  <bb 50>:
  if (i_mb_type_158 == 3)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 51>:
  # DEBUG D#8 => h_4(D)
  # DEBUG D#9 => 3
  # DEBUG D#10 => 33
  # DEBUG D#11 => 34
  # DEBUG D#12 => 34
  # DEBUG D#13 => 35
  # DEBUG D#14 => 35
  # DEBUG cb => &cabac_tmp
  # DEBUG ctx0 => 32
  # DEBUG D#15 => D#14
  # DEBUG ctx5 => D#15
  # DEBUG D#16 => D#13
  # DEBUG ctx4 => D#16
  # DEBUG D#17 => D#12
  # DEBUG ctx3 => D#17
  # DEBUG D#18 => D#11
  # DEBUG ctx2 => D#18
  # DEBUG D#19 => D#10
  # DEBUG ctx1 => D#19
  # DEBUG D#20 => D#9
  # DEBUG i_mb_type => D#20
  # DEBUG D#21 => D#8
  # DEBUG h => D#21
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 32
  # DEBUG b => 1
  i_state_775 = (int) _492;
  # DEBUG i_state => i_state_775
  _777 = x264_cabac_entropy[i_state_775][1];
  _778 = (int) _777;
  _779 = _495 + _778;
  cabac_tmp.f8_bits_encoded = _779;
  goto <bb 457>;

  <bb 52>:
  _708 = h_4(D)->mb.i_intra16x16_pred_mode;
  _709 = x264_mb_pred_mode16x16_fix[_708];
  i_pred_710 = (int) _709;
  # DEBUG i_pred => i_pred_710
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 32
  # DEBUG b => 1
  i_state_713 = (int) _492;
  # DEBUG i_state => i_state_713
  _715 = x264_cabac_entropy[i_state_713][1];
  _716 = (int) _715;
  _717 = _495 + _716;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 276
  # DEBUG b => 0
  _718 = cabac_tmp.state[276];
  i_state_719 = (int) _718;
  # DEBUG i_state => i_state_719
  _720 = x264_cabac_entropy[i_state_719][0];
  _721 = (int) _720;
  _722 = _717 + _721;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _723 = h_4(D)->mb.i_cbp_luma;
  _724 = _723 != 0;
  _725 = (long int) _724;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 33
  # DEBUG b => _725
  _727 = cabac_tmp.state[33];
  i_state_728 = (int) _727;
  # DEBUG i_state => i_state_728
  _729 = x264_cabac_entropy[i_state_728][_725];
  _730 = (int) _729;
  _731 = _722 + _730;
  cabac_tmp.f8_bits_encoded = _731;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _732 = h_4(D)->mb.i_cbp_chroma;
  if (_732 == 0)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 34
  # DEBUG b => 0
  _734 = cabac_tmp.state[34];
  i_state_735 = (int) _734;
  # DEBUG i_state => i_state_735
  _736 = x264_cabac_entropy[i_state_735][0];
  _737 = (int) _736;
  _738 = _731 + _737;
  cabac_tmp.f8_bits_encoded = _738;
  goto <bb 55>;

  <bb 54>:
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 34
  # DEBUG b => 1
  _740 = cabac_tmp.state[34];
  i_state_741 = (int) _740;
  # DEBUG i_state => i_state_741
  _742 = x264_cabac_transition[i_state_741][1];
  cabac_tmp.state[34] = _742;
  _743 = x264_cabac_entropy[i_state_741][1];
  _744 = (int) _743;
  _745 = _731 + _744;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _747 = _732 != 1;
  _748 = (long int) _747;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 34
  # DEBUG b => _748
  i_state_751 = (int) _742;
  # DEBUG i_state => i_state_751
  _752 = x264_cabac_entropy[i_state_751][_748];
  _753 = (int) _752;
  _754 = _745 + _753;
  cabac_tmp.f8_bits_encoded = _754;

  <bb 55>:
  # prephitmp_2439 = PHI <_738(53), _754(54)>
  _755 = i_pred_710 >> 1;
  _756 = (long int) _755;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 35
  # DEBUG b => _756
  _758 = cabac_tmp.state[35];
  i_state_759 = (int) _758;
  # DEBUG i_state => i_state_759
  _760 = x264_cabac_transition[i_state_759][_756];
  cabac_tmp.state[35] = _760;
  _762 = x264_cabac_entropy[i_state_759][_756];
  _763 = (int) _762;
  _764 = _763 + prephitmp_2439;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _765 = _709 & 1;
  _766 = (long int) _765;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 35
  # DEBUG b => _766
  i_state_769 = (int) _760;
  # DEBUG i_state => i_state_769
  _770 = x264_cabac_entropy[i_state_769][_766];
  _771 = (int) _770;
  _772 = _764 + _771;
  cabac_tmp.f8_bits_encoded = _772;
  goto <bb 457>;

  <bb 56>:
  _496 = i_mb_type_158 + -8;
  _497 = _496 * 3;
  _498 = h_4(D)->mb.i_partition;
  _499 = _498 + -14;
  idx_500 = _497 + _499;
  # DEBUG idx => idx_500
  _501 = i_mb_bits[idx_500][0];
  _502 = (long int) _501;
  _503 = ctx_419 + 27;
  _504 = (long int) _503;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _504
  # DEBUG b => _502
  _505 = cabac_tmp.state[_504];
  i_state_506 = (int) _505;
  # DEBUG i_state => i_state_506
  _507 = cabac_tmp.f8_bits_encoded;
  _508 = x264_cabac_entropy[i_state_506][_502];
  _509 = (int) _508;
  _510 = _507 + _509;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _511 = i_mb_bits[idx_500][1];
  _512 = (long int) _511;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 30
  # DEBUG b => _512
  _513 = cabac_tmp.state[30];
  i_state_514 = (int) _513;
  # DEBUG i_state => i_state_514
  _515 = x264_cabac_entropy[i_state_514][_512];
  _516 = (int) _515;
  _517 = _510 + _516;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _518 = i_mb_bits[idx_500][2];
  _519 = (long int) _518;
  _520 = 32 - _511;
  _521 = (long int) _520;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _521
  # DEBUG b => _519
  _522 = cabac_tmp.state[_521];
  i_state_523 = (int) _522;
  # DEBUG i_state => i_state_523
  _524 = x264_cabac_transition[i_state_523][_519];
  cabac_tmp.state[_521] = _524;
  _525 = x264_cabac_entropy[i_state_523][_519];
  _526 = (int) _525;
  _527 = _517 + _526;
  cabac_tmp.f8_bits_encoded = _527;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG i => 3
  # DEBUG i => 3
  _1165 = i_mb_len[idx_500];
  if (_1165 > 3)
    goto <bb 57>;
  else
    goto <bb 454>;

  <bb 57>:
  pretmp_2435 = cabac_tmp.state[32];

  <bb 58>:
  # i_1260 = PHI <3(57), i_538(60)>
  # prephitmp_2436 = PHI <pretmp_2435(57), _533(60)>
  # prephitmp_2437 = PHI <_527(57), _537(60)>
  # DEBUG i => i_1260
  _529 = i_mb_bits[idx_500][i_1260];
  _530 = (long int) _529;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => 32
  # DEBUG b => _530
  i_state_532 = (int) prephitmp_2436;
  # DEBUG i_state => i_state_532
  _533 = x264_cabac_transition[i_state_532][_530];
  _535 = x264_cabac_entropy[i_state_532][_530];
  _536 = (int) _535;
  _537 = _536 + prephitmp_2437;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  i_538 = i_1260 + 1;
  # DEBUG i => i_538
  # DEBUG i => i_538
  if (i_538 < _1165)
    goto <bb 60>;
  else
    goto <bb 59>;

  <bb 59>:
  # cabac_tmp_f8_bits_encoded_lsm.1209_2167 = PHI <_537(58)>
  # cabac_tmp_state_I_lsm.1211_2165 = PHI <_533(58)>
  cabac_tmp.f8_bits_encoded = cabac_tmp_f8_bits_encoded_lsm.1209_2167;
  cabac_tmp.state[32] = cabac_tmp_state_I_lsm.1211_2165;
  goto <bb 454>;

  <bb 60>:
  goto <bb 58>;

  <bb 61>:
  x264_log (h_4(D), 0, "unknown SLICE_TYPE unsupported in x264_macroblock_write_cabac\n");
  pretmp_2433 = (unsigned int) i_mb_type_158;

  <bb 62>:
  # prephitmp_2434 = PHI <i_mb_type.5_540(21), i_mb_type.5_540(15), pretmp_2433(61)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  if (prephitmp_2434 <= 3)
    goto <bb 457>;
  else
    goto <bb 455>;

  <bb 63>:
  if (i_mb_type_158 != 2)
    goto <bb 64>;
  else
    goto <bb 460>;

  <bb 64>:
  _162 = MEM[(int *)h_4(D) + 11808B];
  # DEBUG D#28 => h_4(D)
  _163 = MEM[(int *)h_4(D) + 20500B];
  # DEBUG D#28 => h_4(D)
  # DEBUG cb => &cabac_tmp
  # DEBUG h => D#28
  # DEBUG h => D#28
  ctx_164 = _163 + 399;
  # DEBUG ctx => ctx_164
  _165 = (long int) _162;
  _166 = (long int) ctx_164;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _166
  # DEBUG b => _165
  _167 = cabac_tmp.state[_166];
  i_state_168 = (int) _167;
  # DEBUG i_state => i_state_168
  _169 = cabac_tmp.f8_bits_encoded;
  _170 = x264_cabac_entropy[i_state_168][_165];
  _171 = (int) _170;
  _172 = _169 + _171;
  cabac_tmp.f8_bits_encoded = _172;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  goto <bb 66>;

  <bb 65>:
  if (i_mb_type_158 != 2)
    goto <bb 66>;
  else
    goto <bb 460>;

  <bb 66>:
  if (i_mb_type_158 == 1)
    goto <bb 67>;
  else
    goto <bb 68>;

  <bb 67>:

  <bb 68>:
  # di_193 = PHI <4(67), 1(66)>
  # DEBUG di => di_193
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 69>:
  # i_1944 = PHI <i_194(72), 0(68)>
  # DEBUG i => i_1944
  # DEBUG h => h_4(D)
  # DEBUG idx => i_1944
  _174 = x264_scan8[i_1944];
  _175 = _174 + -1;
  _176 = h_4(D)->mb.cache.intra4x4_pred_mode[_175];
  ma_177 = (const int) _176;
  # DEBUG ma => ma_177
  _178 = _174 + -8;
  _179 = h_4(D)->mb.cache.intra4x4_pred_mode[_178];
  mb_180 = (const int) _179;
  # DEBUG mb => mb_180
  _181 = mb_180 + 1;
  _182 = x264_mb_pred_mode4x4_fix[_181];
  _183 = ma_177 + 1;
  _184 = x264_mb_pred_mode4x4_fix[_183];
  _185 = MIN_EXPR <_182, _184>;
  m_186 = (const int) _185;
  # DEBUG m => m_186
  if (m_186 < 0)
    goto <bb 70>;
  else
    goto <bb 71>;

  <bb 70>:

  <bb 71>:
  # _192 = PHI <2(70), m_186(69)>
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG i_pred => NULL
  _187 = h_4(D)->mb.cache.intra4x4_pred_mode[_174];
  _188 = (int) _187;
  _189 = _188 + 1;
  _190 = x264_mb_pred_mode4x4_fix[_189];
  i_mode_191 = (const int) _190;
  # DEBUG i_mode => i_mode_191
  x264_cabac_mb_intra4x4_pred_mode (&cabac_tmp, _192, i_mode_191);
  i_194 = di_193 + i_1944;
  # DEBUG i => i_194
  # DEBUG i => i_194
  if (i_194 <= 15)
    goto <bb 72>;
  else
    goto <bb 459>;

  <bb 72>:
  goto <bb 69>;

  <bb 73>:
  pretmp_2425 = h_4(D)->mb.i_partition;

  <bb 74>:
  # prephitmp_2426 = PHI <pretmp_2425(73), _338(456)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  if (prephitmp_2426 == 16)
    goto <bb 75>;
  else
    goto <bb 78>;

  <bb 75>:
  _196 = h_4(D)->mb.pic.i_fref[0];
  if (_196 > 1)
    goto <bb 76>;
  else
    goto <bb 77>;

  <bb 76>:
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, 0, 0);

  <bb 77>:
  x264_cabac_mb_mvd (h_4(D), &cabac_tmp, 0, 0, 4, 4);
  pretmp_2354 = cabac_tmp.f8_bits_encoded;
  goto <bb 449>;

  <bb 78>:
  if (prephitmp_2426 == 14)
    goto <bb 79>;
  else
    goto <bb 82>;

  <bb 79>:
  _197 = h_4(D)->mb.pic.i_fref[0];
  if (_197 > 1)
    goto <bb 80>;
  else
    goto <bb 81>;

  <bb 80>:
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, 0, 0);
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, 0, 8);

  <bb 81>:
  x264_cabac_mb_mvd (h_4(D), &cabac_tmp, 0, 0, 4, 2);
  x264_cabac_mb_mvd (h_4(D), &cabac_tmp, 0, 8, 4, 2);
  pretmp_2353 = cabac_tmp.f8_bits_encoded;
  goto <bb 449>;

  <bb 82>:
  if (prephitmp_2426 == 15)
    goto <bb 83>;
  else
    goto <bb 448>;

  <bb 83>:
  _198 = h_4(D)->mb.pic.i_fref[0];
  if (_198 > 1)
    goto <bb 84>;
  else
    goto <bb 85>;

  <bb 84>:
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, 0, 0);
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, 0, 4);

  <bb 85>:
  x264_cabac_mb_mvd (h_4(D), &cabac_tmp, 0, 0, 2, 4);
  x264_cabac_mb_mvd (h_4(D), &cabac_tmp, 0, 4, 2, 4);
  pretmp_2351 = cabac_tmp.f8_bits_encoded;
  goto <bb 449>;

  <bb 86>:
  if (i_mb_type_158 == 5)
    goto <bb 87>;
  else
    goto <bb 93>;

  <bb 87>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  _199 = h_4(D)->mb.i_sub_partition[0];
  x264_cabac_mb_sub_p_partition (&cabac_tmp, _199);
  _200 = h_4(D)->mb.i_sub_partition[1];
  x264_cabac_mb_sub_p_partition (&cabac_tmp, _200);
  _201 = h_4(D)->mb.i_sub_partition[2];
  x264_cabac_mb_sub_p_partition (&cabac_tmp, _201);
  _202 = h_4(D)->mb.i_sub_partition[3];
  x264_cabac_mb_sub_p_partition (&cabac_tmp, _202);
  _203 = h_4(D)->mb.pic.i_fref[0];
  if (_203 > 1)
    goto <bb 88>;
  else
    goto <bb 89>;

  <bb 88>:
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, 0, 0);
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, 0, 4);
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, 0, 8);
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, 0, 12);

  <bb 89>:
  # DEBUG i => 0

  <bb 90>:
  # i_1943 = PHI <i_205(91), 0(89)>
  # ivtmp_2278 = PHI <ivtmp_1968(91), 4(89)>
  # DEBUG i => i_1943
  x264_cabac_mb8x8_mvd (h_4(D), &cabac_tmp, 0, i_1943);
  i_205 = i_1943 + 1;
  # DEBUG i => i_205
  # DEBUG i => i_205
  ivtmp_1968 = ivtmp_2278 - 1;
  if (ivtmp_1968 != 0)
    goto <bb 91>;
  else
    goto <bb 92>;

  <bb 91>:
  goto <bb 90>;

  <bb 92>:
  pretmp_2350 = cabac_tmp.f8_bits_encoded;
  goto <bb 449>;

  <bb 93>:
  if (i_mb_type_158 == 17)
    goto <bb 94>;
  else
    goto <bb 113>;

  <bb 94>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  _206 = h_4(D)->mb.i_sub_partition[0];
  x264_cabac_mb_sub_b_partition (&cabac_tmp, _206);
  _207 = h_4(D)->mb.i_sub_partition[1];
  x264_cabac_mb_sub_b_partition (&cabac_tmp, _207);
  _208 = h_4(D)->mb.i_sub_partition[2];
  x264_cabac_mb_sub_b_partition (&cabac_tmp, _208);
  _209 = h_4(D)->mb.i_sub_partition[3];
  x264_cabac_mb_sub_b_partition (&cabac_tmp, _209);
  # DEBUG i_list => 0
  # DEBUG i_list => 0
  goto <bb 96>;

  <bb 95>:
  # i_list_1109 = PHI <i_list_221(100), i_list_173(461)>

  <bb 96>:
  # i_list_1942 = PHI <i_list_1109(95), 0(94)>
  # DEBUG i_list => i_list_1942
  if (i_list_1942 != 0)
    goto <bb 97>;
  else
    goto <bb 101>;

  <bb 97>:
  _211 = h_4(D)->mb.pic.i_fref[1];
  if (_211 == 1)
    goto <bb 100>;
  else
    goto <bb 98>;

  <bb 98>:
  goto <bb 103>;

  <bb 99>:

  <bb 100>:
  i_list_221 = i_list_1942 + 1;
  # DEBUG i_list => i_list_221
  # DEBUG i_list => i_list_221
  if (i_list_221 != 2)
    goto <bb 95>;
  else
    goto <bb 106>;

  <bb 101>:
  # DEBUG i_list => i_list_1942
  _213 = h_4(D)->mb.pic.i_fref[0];
  if (_213 == 1)
    goto <bb 461>;
  else
    goto <bb 98>;

  <bb 102>:

  <bb 103>:
  # i_1940 = PHI <0(98), i_220(102)>
  # ivtmp_2428 = PHI <4(98), ivtmp_2215(102)>
  # DEBUG i => i_1940
  _217 = h_4(D)->mb.i_sub_partition[i_1940];
  _218 = x264_mb_partition_listX_table[i_list_1942][_217];
  if (_218 != 0)
    goto <bb 104>;
  else
    goto <bb 105>;

  <bb 104>:
  _219 = i_1940 * 4;
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, i_list_1942, _219);

  <bb 105>:
  i_220 = i_1940 + 1;
  # DEBUG i => i_220
  # DEBUG i => i_220
  ivtmp_2215 = ivtmp_2428 - 1;
  if (ivtmp_2215 != 0)
    goto <bb 102>;
  else
    goto <bb 99>;

  <bb 106>:

  <bb 107>:
  # i_1939 = PHI <0(106), i_223(108)>
  # ivtmp_2300 = PHI <4(106), ivtmp_2210(108)>
  # DEBUG i => i_1939
  x264_cabac_mb8x8_mvd (h_4(D), &cabac_tmp, 0, i_1939);
  i_223 = i_1939 + 1;
  # DEBUG i => i_223
  # DEBUG i => i_223
  ivtmp_2210 = ivtmp_2300 - 1;
  if (ivtmp_2210 != 0)
    goto <bb 108>;
  else
    goto <bb 109>;

  <bb 108>:
  goto <bb 107>;

  <bb 109>:

  <bb 110>:
  # i_1941 = PHI <0(109), i_225(111)>
  # ivtmp_2182 = PHI <4(109), ivtmp_2313(111)>
  # DEBUG i => i_1941
  x264_cabac_mb8x8_mvd (h_4(D), &cabac_tmp, 1, i_1941);
  i_225 = i_1941 + 1;
  # DEBUG i => i_225
  # DEBUG i => i_225
  ivtmp_2313 = ivtmp_2182 - 1;
  if (ivtmp_2313 != 0)
    goto <bb 111>;
  else
    goto <bb 112>;

  <bb 111>:
  goto <bb 110>;

  <bb 112>:
  pretmp_2349 = cabac_tmp.f8_bits_encoded;
  goto <bb 449>;

  <bb 113>:
  if (i_mb_type_158 != 7)
    goto <bb 115>;
  else
    goto <bb 114>;

  <bb 114>:
  pretmp_2348 = cabac_tmp.f8_bits_encoded;
  goto <bb 449>;

  <bb 115>:
  # DEBUG i => 0
  _90 = x264_mb_type_list0_table[i_mb_type_158][0];
  _693 = (int) _90;
  b_list[0][0] = _693;
  _646 = x264_mb_type_list1_table[i_mb_type_158][0];
  _653 = (int) _646;
  b_list[1][0] = _653;
  # DEBUG i => 1
  # DEBUG i => 1
  _621 = x264_mb_type_list0_table[i_mb_type_158][1];
  _773 = (int) _621;
  b_list[0][1] = _773;
  _726 = x264_mb_type_list1_table[i_mb_type_158][1];
  _733 = (int) _726;
  b_list[1][1] = _733;
  # DEBUG i => 2
  # DEBUG i => 2
  # DEBUG i_list => 0
  pretmp_2466 = h_4(D)->mb.i_partition;
  goto <bb 117>;

  <bb 116>:
  # i_list_1035 = PHI <i_list_242(135), i_list_230(462)>
  # prephitmp_2458 = PHI <prephitmp_2420(135), prephitmp_2467(462)>

  <bb 117>:
  # i_list_1732 = PHI <i_list_1035(116), 0(115)>
  # prephitmp_2467 = PHI <prephitmp_2458(116), pretmp_2466(115)>
  # DEBUG i_list => i_list_1732
  if (i_list_1732 == 0)
    goto <bb 118>;
  else
    goto <bb 119>;

  <bb 118>:
  # DEBUG i_list => i_list_1732
  iftmp.3_233 = h_4(D)->mb.pic.i_fref[0];
  # DEBUG i_ref_max => iftmp.3_233
  if (iftmp.3_233 > 1)
    goto <bb 120>;
  else
    goto <bb 462>;

  <bb 119>:
  iftmp.3_234 = h_4(D)->mb.pic.i_fref[1];
  # DEBUG i_ref_max => iftmp.3_234
  if (iftmp.3_234 > 1)
    goto <bb 120>;
  else
    goto <bb 135>;

  <bb 120>:
  if (prephitmp_2467 == 16)
    goto <bb 121>;
  else
    goto <bb 123>;

  <bb 121>:
  _237 = b_list[i_list_1732][0];
  if (_237 != 0)
    goto <bb 122>;
  else
    goto <bb 135>;

  <bb 122>:
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, i_list_1732, 0);
  pretmp_2415 = h_4(D)->mb.i_partition;
  goto <bb 135>;

  <bb 123>:
  if (prephitmp_2467 == 14)
    goto <bb 124>;
  else
    goto <bb 129>;

  <bb 124>:
  _238 = b_list[i_list_1732][0];
  if (_238 != 0)
    goto <bb 125>;
  else
    goto <bb 126>;

  <bb 125>:
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, i_list_1732, 0);

  <bb 126>:
  _239 = b_list[i_list_1732][1];
  if (_239 != 0)
    goto <bb 128>;
  else
    goto <bb 127>;

  <bb 127>:
  pretmp_2416 = h_4(D)->mb.i_partition;
  goto <bb 135>;

  <bb 128>:
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, i_list_1732, 8);
  pretmp_2417 = h_4(D)->mb.i_partition;
  goto <bb 135>;

  <bb 129>:
  if (prephitmp_2467 == 15)
    goto <bb 130>;
  else
    goto <bb 135>;

  <bb 130>:
  _240 = b_list[i_list_1732][0];
  if (_240 != 0)
    goto <bb 131>;
  else
    goto <bb 132>;

  <bb 131>:
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, i_list_1732, 0);

  <bb 132>:
  _241 = b_list[i_list_1732][1];
  if (_241 != 0)
    goto <bb 134>;
  else
    goto <bb 133>;

  <bb 133>:
  pretmp_2418 = h_4(D)->mb.i_partition;
  goto <bb 135>;

  <bb 134>:
  x264_cabac_mb_ref (h_4(D), &cabac_tmp, i_list_1732, 4);
  pretmp_2419 = h_4(D)->mb.i_partition;

  <bb 135>:
  # prephitmp_2420 = PHI <prephitmp_2467(119), prephitmp_2467(121), pretmp_2415(122), pretmp_2416(127), pretmp_2417(128), prephitmp_2467(129), pretmp_2418(133), pretmp_2419(134)>
  i_list_242 = i_list_1732 + 1;
  # DEBUG i_list => i_list_242
  # DEBUG i_list => i_list_242
  if (i_list_242 != 2)
    goto <bb 116>;
  else
    goto <bb 136>;

  <bb 136>:
  # prephitmp_2249 = PHI <prephitmp_2420(135)>

  <bb 137>:
  # i_list_54 = PHI <0(136), i_list_250(152)>
  # prephitmp_2422 = PHI <prephitmp_2249(136), pretmp_2421(152)>
  # ivtmp_2341 = PHI <2(136), ivtmp_2230(152)>
  # DEBUG i_list => i_list_54
  if (prephitmp_2422 == 16)
    goto <bb 138>;
  else
    goto <bb 141>;

  <bb 138>:
  _245 = b_list[i_list_54][0];
  if (_245 != 0)
    goto <bb 140>;
  else
    goto <bb 139>;

  <bb 139>:
  goto <bb 151>;

  <bb 140>:
  x264_cabac_mb_mvd (h_4(D), &cabac_tmp, i_list_54, 0, 4, 4);
  goto <bb 151>;

  <bb 141>:
  if (prephitmp_2422 == 14)
    goto <bb 142>;
  else
    goto <bb 146>;

  <bb 142>:
  _246 = b_list[i_list_54][0];
  if (_246 != 0)
    goto <bb 143>;
  else
    goto <bb 144>;

  <bb 143>:
  x264_cabac_mb_mvd (h_4(D), &cabac_tmp, i_list_54, 0, 4, 2);

  <bb 144>:
  _247 = b_list[i_list_54][1];
  if (_247 != 0)
    goto <bb 145>;
  else
    goto <bb 139>;

  <bb 145>:
  x264_cabac_mb_mvd (h_4(D), &cabac_tmp, i_list_54, 8, 4, 2);
  goto <bb 151>;

  <bb 146>:
  if (prephitmp_2422 == 15)
    goto <bb 147>;
  else
    goto <bb 139>;

  <bb 147>:
  _248 = b_list[i_list_54][0];
  if (_248 != 0)
    goto <bb 148>;
  else
    goto <bb 149>;

  <bb 148>:
  x264_cabac_mb_mvd (h_4(D), &cabac_tmp, i_list_54, 0, 2, 4);

  <bb 149>:
  _249 = b_list[i_list_54][1];
  if (_249 != 0)
    goto <bb 150>;
  else
    goto <bb 139>;

  <bb 150>:
  x264_cabac_mb_mvd (h_4(D), &cabac_tmp, i_list_54, 4, 2, 4);

  <bb 151>:
  i_list_250 = i_list_54 + 1;
  # DEBUG i_list => i_list_250
  # DEBUG i_list => i_list_250
  ivtmp_2230 = ivtmp_2341 - 1;
  if (ivtmp_2230 != 0)
    goto <bb 152>;
  else
    goto <bb 153>;

  <bb 152>:
  pretmp_2421 = h_4(D)->mb.i_partition;
  goto <bb 137>;

  <bb 153>:
  b_list ={v} {CLOBBER};
  pretmp_2347 = cabac_tmp.f8_bits_encoded;
  goto <bb 449>;

  <bb 154>:
  # prephitmp_2388 = PHI <pretmp_2387(459), prephitmp_2355(449)>
  # DEBUG h => h_4(D)
  # DEBUG cb => &cabac_tmp
  cbp_780 = h_4(D)->mb.i_cbp_luma;
  # DEBUG cbp => cbp_780
  _781 = h_4(D)->mb.i_neighbour;
  _782 = _781 & 1;
  if (_782 != 0)
    goto <bb 155>;
  else
    goto <bb 156>;

  <bb 155>:
  _783 = h_4(D)->mb.cbp;
  _784 = h_4(D)->mb.i_mb_xy;
  _785 = (long unsigned int) _784;
  _786 = _785 * 2;
  _787 = _786 + 18446744073709551614;
  _788 = _783 + _787;
  _789 = *_788;
  cbp_l_790 = (int) _789;
  pretmp_2389 = cbp_l_790 >> 1;
  pretmp_2391 = pretmp_2389 & 1;
  pretmp_2393 = 76 - pretmp_2391;
  pretmp_2395 = cbp_l_790 >> 3;
  pretmp_2397 = pretmp_2395 & 1;
  pretmp_2399 = 76 - pretmp_2397;

  <bb 156>:
  # prephitmp_2394 = PHI <75(154), pretmp_2393(155)>
  # prephitmp_2400 = PHI <75(154), pretmp_2399(155)>
  # DEBUG cbp_l => NULL
  _791 = _781 & 2;
  if (_791 != 0)
    goto <bb 157>;
  else
    goto <bb 158>;

  <bb 157>:
  _792 = h_4(D)->mb.cbp;
  _793 = h_4(D)->mb.i_mb_top_xy;
  _794 = (long unsigned int) _793;
  _795 = _794 * 2;
  _796 = _792 + _795;
  _797 = *_796;
  cbp_t_798 = (int) _797;
  pretmp_2401 = cbp_t_798 >> 1;
  pretmp_2403 = pretmp_2401 & 2;
  pretmp_2405 = cbp_t_798 >> 2;
  pretmp_2407 = pretmp_2405 & 2;

  <bb 158>:
  # prephitmp_2404 = PHI <2(156), pretmp_2403(157)>
  # prephitmp_2408 = PHI <2(156), pretmp_2407(157)>
  # DEBUG cbp_t => NULL
  _799 = cbp_780 & 1;
  _800 = (long int) _799;
  _808 = prephitmp_2394 - prephitmp_2404;
  _809 = (long int) _808;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _809
  # DEBUG b => _800
  _810 = cabac_tmp.state[_809];
  i_state_811 = (int) _810;
  # DEBUG i_state => i_state_811
  _812 = x264_cabac_transition[i_state_811][_800];
  cabac_tmp.state[_809] = _812;
  _814 = x264_cabac_entropy[i_state_811][_800];
  _815 = (int) _814;
  _816 = _815 + prephitmp_2388;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _818 = cbp_780 >> 1;
  _819 = _818 & 1;
  _820 = (long int) _819;
  _821 = 76 - _799;
  _824 = _821 - prephitmp_2408;
  _825 = (long int) _824;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _825
  # DEBUG b => _820
  _826 = cabac_tmp.state[_825];
  i_state_827 = (int) _826;
  # DEBUG i_state => i_state_827
  _828 = x264_cabac_transition[i_state_827][_820];
  cabac_tmp.state[_825] = _828;
  _829 = x264_cabac_entropy[i_state_827][_820];
  _830 = (int) _829;
  _831 = _816 + _830;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _833 = cbp_780 >> 2;
  _834 = _833 & 1;
  _835 = (long int) _834;
  _839 = cbp_780 << 1;
  _840 = _839 & 2;
  _841 = prephitmp_2400 - _840;
  _842 = (long int) _841;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _842
  # DEBUG b => _835
  _843 = cabac_tmp.state[_842];
  i_state_844 = (int) _843;
  # DEBUG i_state => i_state_844
  _845 = x264_cabac_transition[i_state_844][_835];
  cabac_tmp.state[_842] = _845;
  _846 = x264_cabac_entropy[i_state_844][_835];
  _847 = (int) _846;
  _848 = _831 + _847;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _850 = cbp_780 >> 3;
  _851 = _850 & 1;
  _852 = (long int) _851;
  _855 = 76 - _834;
  _856 = cbp_780 & 2;
  _857 = _855 - _856;
  _858 = (long int) _857;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _858
  # DEBUG b => _852
  _859 = cabac_tmp.state[_858];
  i_state_860 = (int) _859;
  # DEBUG i_state => i_state_860
  _861 = x264_cabac_entropy[i_state_860][_852];
  _862 = (int) _861;
  _863 = _848 + _862;
  cabac_tmp.f8_bits_encoded = _863;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG cbp_t => NULL
  # DEBUG cbp_l => NULL
  # DEBUG cbp => NULL
  x264_cabac_mb_cbp_chroma (h_4(D), &cabac_tmp);

  <bb 159>:
  # DEBUG h => h_4(D)
  _864 = h_4(D)->pps;
  _865 = _864->b_transform_8x8_mode;
  if (_865 == 0)
    goto <bb 160>;
  else
    goto <bb 161>;

  <bb 160>:
  pretmp_2380 = h_4(D)->mb.i_cbp_luma;
  pretmp_2384 = cabac_tmp.f8_bits_encoded;
  goto <bb 179>;

  <bb 161>:
  _866 = h_4(D)->mb.i_type;
  _867 = partition_tab[_866];
  p_868 = (int) _867;
  # DEBUG p => p_868
  if (p_868 <= 1)
    goto <bb 175>;
  else
    goto <bb 162>;

  <bb 162>:
  if (_866 == 7)
    goto <bb 163>;
  else
    goto <bb 164>;

  <bb 163>:
  _869 = h_4(D)->sps;
  _870 = _869->b_direct8x8_inference;
  goto <bb 175>;

  <bb 164>:
  if (_866 == 5)
    goto <bb 165>;
  else
    goto <bb 170>;

  <bb 165>:
  _871 = h_4(D)->param.analyse.inter;
  _872 = _871 & 32;
  if (_872 == 0)
    goto <bb 176>;
  else
    goto <bb 166>;

  <bb 166>:

  <bb 167>:
  # i_1938 = PHI <0(166), i_884(169)>
  # ivtmp_2369 = PHI <4(166), ivtmp_805(169)>
  # DEBUG i => i_1938
  _883 = h_4(D)->mb.i_sub_partition[i_1938];
  if (_883 != 3)
    goto <bb 464>;
  else
    goto <bb 168>;

  <bb 168>:
  i_884 = i_1938 + 1;
  # DEBUG i => i_884
  # DEBUG i => i_884
  ivtmp_805 = ivtmp_2369 - 1;
  if (ivtmp_805 != 0)
    goto <bb 169>;
  else
    goto <bb 176>;

  <bb 169>:
  goto <bb 167>;

  <bb 170>:
  _874 = h_4(D)->sps;
  _875 = _874->b_direct8x8_inference;
  if (_875 != 0)
    goto <bb 176>;
  else
    goto <bb 171>;

  <bb 171>:

  <bb 172>:
  # i_607 = PHI <0(171), i_878(174)>
  # ivtmp_801 = PHI <4(171), ivtmp_2280(174)>
  # DEBUG i => i_607
  _877 = h_4(D)->mb.i_sub_partition[i_607];
  if (_877 == 12)
    goto <bb 160>;
  else
    goto <bb 173>;

  <bb 173>:
  i_878 = i_607 + 1;
  # DEBUG i => i_878
  # DEBUG i => i_878
  ivtmp_2280 = ivtmp_801 - 1;
  if (ivtmp_2280 != 0)
    goto <bb 174>;
  else
    goto <bb 176>;

  <bb 174>:
  goto <bb 172>;

  <bb 175>:
  # _879 = PHI <_870(163), p_868(161)>
  # DEBUG h => NULL
  # DEBUG p => NULL
  # DEBUG i => NULL
  if (_879 != 0)
    goto <bb 176>;
  else
    goto <bb 160>;

  <bb 176>:
  # DEBUG h => NULL
  # DEBUG p => NULL
  # DEBUG i => NULL
  _252 = h_4(D)->mb.i_cbp_luma;
  if (_252 != 0)
    goto <bb 178>;
  else
    goto <bb 177>;

  <bb 177>:
  pretmp_2454 = cabac_tmp.f8_bits_encoded;
  goto <bb 180>;

  <bb 178>:
  _253 = MEM[(int *)h_4(D) + 11808B];
  # DEBUG D#28 => h_4(D)
  _254 = MEM[(int *)h_4(D) + 20500B];
  # DEBUG D#28 => h_4(D)
  # DEBUG cb => &cabac_tmp
  # DEBUG h => D#28
  # DEBUG h => D#28
  ctx_255 = _254 + 399;
  # DEBUG ctx => ctx_255
  _256 = (long int) _253;
  _257 = (long int) ctx_255;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _257
  # DEBUG b => _256
  _258 = cabac_tmp.state[_257];
  i_state_259 = (int) _258;
  # DEBUG i_state => i_state_259
  _260 = cabac_tmp.f8_bits_encoded;
  _261 = x264_cabac_entropy[i_state_259][_256];
  _262 = (int) _261;
  _263 = _260 + _262;
  cabac_tmp.f8_bits_encoded = _263;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL

  <bb 179>:
  # prephitmp_2382 = PHI <_252(178), pretmp_2380(160)>
  # prephitmp_2386 = PHI <_263(178), pretmp_2384(160)>
  if (prephitmp_2382 > 0)
    goto <bb 181>;
  else
    goto <bb 180>;

  <bb 180>:
  # prephitmp_2456 = PHI <prephitmp_2386(179), pretmp_2454(177)>
  _265 = h_4(D)->mb.i_cbp_chroma;
  _1981 = i_mb_type_158 == 2;
  _1982 = _265 > 0;
  _2024 = _1981 | _1982;
  if (_2024 != 0)
    goto <bb 181>;
  else
    goto <bb 229>;

  <bb 181>:
  # prephitmp_2453 = PHI <prephitmp_2456(180), prephitmp_2386(179)>
  # DEBUG h => h_4(D)
  # DEBUG cb => &cabac_tmp
  i_mbn_xy_887 = h_4(D)->mb.i_mb_prev_xy;
  # DEBUG i_mbn_xy => i_mbn_xy_887
  _888 = h_4(D)->mb.i_qp;
  _889 = h_4(D)->mb.i_last_qp;
  i_dqp_890 = _888 - _889;
  # DEBUG i_dqp => i_dqp_890
  _891 = h_4(D)->mb.i_type;
  if (_891 == 2)
    goto <bb 182>;
  else
    goto <bb 183>;

  <bb 182>:
  _892 = h_4(D)->mb.cbp;
  _893 = h_4(D)->mb.i_mb_xy;
  _894 = (long unsigned int) _893;
  _895 = _894 * 2;
  _896 = _892 + _895;
  _897 = *_896;
  if (_897 == 0)
    goto <bb 450>;
  else
    goto <bb 183>;

  <bb 183>:
  # i_mbn_xy_700 = PHI <i_mbn_xy_887(181), i_mbn_xy_887(182), i_mbn_xy_1955(463)>
  # i_dqp_624 = PHI <i_dqp_890(181), i_dqp_890(182), i_dqp_2014(463)>
  # prephitmp_2465 = PHI <prephitmp_2453(181), prephitmp_2453(182), pretmp_2464(463)>
  # DEBUG i_dqp => i_dqp_624
  _898 = h_4(D)->mb.i_last_dqp;
  if (_898 != 0)
    goto <bb 184>;
  else
    goto <bb 187>;

  <bb 184>:
  _899 = h_4(D)->mb.type;
  _900 = (sizetype) i_mbn_xy_700;
  _901 = _899 + _900;
  _902 = *_901;
  if (_902 == 2)
    goto <bb 188>;
  else
    goto <bb 185>;

  <bb 185>:
  pretmp_2377 = h_4(D)->mb.cbp;

  <bb 186>:
  # i_dqp_2026 = PHI <i_dqp_624(185), 0(465)>
  # _670 = PHI <_900(185), _1970(465)>
  # prephitmp_2378 = PHI <pretmp_2377(185), _892(465)>
  # prephitmp_2463 = PHI <prephitmp_2465(185), prephitmp_2453(465)>
  _904 = _670 * 2;
  _905 = prephitmp_2378 + _904;
  _906 = *_905;
  _907 = _906 & 63;
  if (_907 != 0)
    goto <bb 188>;
  else
    goto <bb 187>;

  <bb 187>:
  # i_dqp_1934 = PHI <i_dqp_624(183), i_dqp_2026(186)>
  # prephitmp_2470 = PHI <prephitmp_2465(183), prephitmp_2463(186)>
  # DEBUG ctx => 0

  <bb 188>:
  # ctx_938 = PHI <1(184), 1(186), 0(187)>
  # i_dqp_1936 = PHI <i_dqp_624(184), i_dqp_2026(186), i_dqp_1934(187)>
  # prephitmp_2370 = PHI <61(184), 61(186), 60(187)>
  # prephitmp_2469 = PHI <prephitmp_2465(184), prephitmp_2463(186), prephitmp_2470(187)>
  # DEBUG ctx => ctx_938
  if (i_dqp_1936 != 0)
    goto <bb 189>;
  else
    goto <bb 202>;

  <bb 189>:
  if (i_dqp_1936 <= 0)
    goto <bb 190>;
  else
    goto <bb 191>;

  <bb 190>:
  val_909 = i_dqp_1936 * -2;
  goto <bb 192>;

  <bb 191>:
  _910 = i_dqp_1936 * 2;
  val_911 = _910 + -1;

  <bb 192>:
  # val_912 = PHI <val_909(190), val_911(191)>
  # DEBUG val => val_912
  _913 = val_912 > 50;
  _914 = val_912 != 52;
  _915 = _913 & _914;
  if (_915 != 0)
    goto <bb 193>;
  else
    goto <bb 194>;

  <bb 193>:
  val_916 = 103 - val_912;
  # DEBUG val => val_916

  <bb 194>:
  # val_117 = PHI <val_912(192), val_916(193)>
  cabac_tmp_f8_bits_encoded_lsm.1207_2220 = cabac_tmp.f8_bits_encoded;
  goto <bb 198>;

  <bb 195>:
  # DEBUG ctx => ctx_917
  # DEBUG val => val_928
  _918 = ctx_917 + 60;
  _919 = (long int) _918;
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => _919
  # DEBUG b => 1
  _920 = cabac_tmp.state[_919];
  i_state_921 = (int) _920;
  # DEBUG i_state => i_state_921
  _922 = x264_cabac_transition[i_state_921][1];
  cabac_tmp.state[_919] = _922;
  _924 = x264_cabac_entropy[i_state_921][1];
  _925 = (int) _924;
  _926 = _925 + prephitmp_2374;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  if (ctx_917 <= 1)
    goto <bb 197>;
  else
    goto <bb 196>;

  <bb 196>:

  <bb 197>:
  # ctx_148 = PHI <2(195), 3(196)>

  <bb 198>:
  # ctx_917 = PHI <ctx_938(194), ctx_148(197)>
  # val_927 = PHI <val_117(194), val_928(197)>
  # prephitmp_2374 = PHI <prephitmp_2469(194), _926(197)>
  # cabac_tmp_f8_bits_encoded_lsm.1207_1822 = PHI <cabac_tmp_f8_bits_encoded_lsm.1207_2220(194), _926(197)>
  # cabac_tmp_f8_bits_encoded_lsm.1208_1638 = PHI <0(194), 1(197)>
  # DEBUG val => val_927
  # DEBUG ctx => ctx_917
  val_928 = val_927 + -1;
  # DEBUG val => val_928
  if (val_927 != 0)
    goto <bb 195>;
  else
    goto <bb 199>;

  <bb 199>:
  # ctx_2253 = PHI <ctx_917(198)>
  # prephitmp_2250 = PHI <prephitmp_2374(198)>
  # cabac_tmp_f8_bits_encoded_lsm.1208_2177 = PHI <cabac_tmp_f8_bits_encoded_lsm.1208_1638(198)>
  # cabac_tmp_f8_bits_encoded_lsm.1207_2175 = PHI <cabac_tmp_f8_bits_encoded_lsm.1207_1822(198)>
  if (cabac_tmp_f8_bits_encoded_lsm.1208_2177 != 0)
    goto <bb 200>;
  else
    goto <bb 201>;

  <bb 200>:
  cabac_tmp.f8_bits_encoded = cabac_tmp_f8_bits_encoded_lsm.1207_2175;

  <bb 201>:
  pretmp_2357 = ctx_2253 + 60;
  pretmp_2360 = (long int) pretmp_2357;

  <bb 202>:
  # prephitmp_2361 = PHI <prephitmp_2370(188), pretmp_2360(201), 60(450), 61(465)>
  # prephitmp_2451 = PHI <prephitmp_2469(188), prephitmp_2250(201), prephitmp_2453(450), prephitmp_2453(465)>
  # DEBUG ctx => NULL
  # DEBUG D#558 => NULL
  # DEBUG cb => &cabac_tmp
  # DEBUG i_ctx => (long int) D#558
  # DEBUG b => 0
  _932 = cabac_tmp.state[prephitmp_2361];
  i_state_933 = (int) _932;
  # DEBUG i_state => i_state_933
  _935 = x264_cabac_entropy[i_state_933][0];
  _936 = (int) _935;
  _937 = _936 + prephitmp_2451;
  cabac_tmp.f8_bits_encoded = _937;
  # DEBUG cb => NULL
  # DEBUG i_ctx => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG val => NULL
  # DEBUG ctx => NULL
  # DEBUG i_dqp => NULL
  # DEBUG i_mbn_xy => NULL
  if (i_mb_type_158 == 2)
    goto <bb 203>;
  else
    goto <bb 209>;

  <bb 203>:
  _266 = &h_4(D)->dct.luma16x16_dc;
  block_residual_write_cabac (h_4(D), &cabac_tmp, 0, 24, _266, 16);
  _267 = h_4(D)->mb.i_cbp_luma;
  if (_267 != 0)
    goto <bb 205>;
  else
    goto <bb 204>;

  <bb 204>:
  _286 = h_4(D)->mb.i_cbp_chroma;
  _287 = _286 & 3;
  if (_287 != 0)
    goto <bb 222>;
  else
    goto <bb 223>;

  <bb 205>:

  <bb 206>:
  # i_1853 = PHI <0(205), i_271(208)>
  # ivtmp_2270 = PHI <16(205), ivtmp_1596(208)>
  # DEBUG i => i_1853
  _269 = &h_4(D)->dct.luma4x4[i_1853];
  _270 = _269 + 2;
  block_residual_write_cabac (h_4(D), &cabac_tmp, 1, i_1853, _270, 15);
  i_271 = i_1853 + 1;
  # DEBUG i => i_271
  # DEBUG i => i_271
  ivtmp_1596 = ivtmp_2270 - 1;
  if (ivtmp_1596 != 0)
    goto <bb 208>;
  else
    goto <bb 207>;

  <bb 207>:
  goto <bb 204>;

  <bb 208>:
  goto <bb 206>;

  <bb 209>:
  _272 = h_4(D)->mb.b_transform_8x8;
  if (_272 != 0)
    goto <bb 210>;
  else
    goto <bb 216>;

  <bb 210>:

  <bb 211>:
  # i_943 = PHI <0(210), i_278(215)>
  # ivtmp_1591 = PHI <4(210), ivtmp_714(215)>
  # DEBUG i => i_943
  _273 = h_4(D)->mb.i_cbp_luma;
  _275 = _273 >> i_943;
  _276 = _275 & 1;
  if (_276 != 0)
    goto <bb 212>;
  else
    goto <bb 213>;

  <bb 212>:
  _277 = &h_4(D)->dct.luma8x8[i_943];
  block_residual_write_cabac (h_4(D), &cabac_tmp, 5, i_943, _277, 64);

  <bb 213>:
  i_278 = i_943 + 1;
  # DEBUG i => i_278
  # DEBUG i => i_278
  ivtmp_714 = ivtmp_1591 - 1;
  if (ivtmp_714 != 0)
    goto <bb 215>;
  else
    goto <bb 214>;

  <bb 214>:
  goto <bb 204>;

  <bb 215>:
  goto <bb 211>;

  <bb 216>:

  <bb 217>:
  # i_958 = PHI <0(216), i_285(221)>
  # ivtmp_112 = PHI <16(216), ivtmp_929(221)>
  # DEBUG i => i_958
  _279 = h_4(D)->mb.i_cbp_luma;
  _281 = i_958 >> 2;
  _282 = _279 >> _281;
  _283 = _282 & 1;
  if (_283 != 0)
    goto <bb 218>;
  else
    goto <bb 219>;

  <bb 218>:
  _284 = &h_4(D)->dct.luma4x4[i_958];
  block_residual_write_cabac (h_4(D), &cabac_tmp, 2, i_958, _284, 16);

  <bb 219>:
  i_285 = i_958 + 1;
  # DEBUG i => i_285
  # DEBUG i => i_285
  ivtmp_929 = ivtmp_112 - 1;
  if (ivtmp_929 != 0)
    goto <bb 221>;
  else
    goto <bb 220>;

  <bb 220>:
  goto <bb 204>;

  <bb 221>:
  goto <bb 217>;

  <bb 222>:
  _288 = &h_4(D)->dct.chroma_dc[0];
  block_residual_write_cabac (h_4(D), &cabac_tmp, 3, 25, _288, 4);
  _289 = &h_4(D)->dct.chroma_dc[1];
  block_residual_write_cabac (h_4(D), &cabac_tmp, 3, 26, _289, 4);
  pretmp_2362 = h_4(D)->mb.i_cbp_chroma;

  <bb 223>:
  # prephitmp_2363 = PHI <_286(204), pretmp_2362(222)>
  _291 = prephitmp_2363 & 2;
  if (_291 != 0)
    goto <bb 225>;
  else
    goto <bb 224>;

  <bb 224>:
  pretmp_2459 = cabac_tmp.f8_bits_encoded;
  goto <bb 229>;

  <bb 225>:

  <bb 226>:
  # i_1937 = PHI <16(225), i_295(227)>
  # ivtmp_2267 = PHI <8(225), ivtmp_1178(227)>
  # DEBUG i => i_1937
  _293 = &h_4(D)->dct.luma4x4[i_1937];
  _294 = _293 + 2;
  block_residual_write_cabac (h_4(D), &cabac_tmp, 4, i_1937, _294, 15);
  i_295 = i_1937 + 1;
  # DEBUG i => i_295
  # DEBUG i => i_295
  ivtmp_1178 = ivtmp_2267 - 1;
  if (ivtmp_1178 != 0)
    goto <bb 227>;
  else
    goto <bb 228>;

  <bb 227>:
  goto <bb 226>;

  <bb 228>:
  pretmp_2460 = cabac_tmp.f8_bits_encoded;

  <bb 229>:
  # prephitmp_2461 = PHI <pretmp_2459(224), prephitmp_2456(180), pretmp_2460(228)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG ctx => NULL
  # DEBUG ma => NULL
  # DEBUG mb => NULL
  # DEBUG m => NULL
  # DEBUG i_state => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mode => NULL
  # DEBUG di => NULL
  # DEBUG i => NULL
  # DEBUG i_list => NULL
  # DEBUG i_mb_type => NULL
  _22 = (long unsigned int) prephitmp_2461;
  _23 = (long unsigned int) i_lambda2_13(D);
  _24 = _22 * _23;
  _25 = _24 + 32768;
  _26 = _25 >> 16;
  i_bits_27 = (int) _26;
  # DEBUG i_bits => i_bits_27
  cabac_tmp ={v} {CLOBBER};
  goto <bb 447>;

  <bb 230>:
  bs_tmp = h_4(D)->out.bs;
  bs_tmp.i_bits_encoded = 0;
  # DEBUG h => h_4(D)
  # DEBUG s => &bs_tmp
  # DEBUG i_mb_type => _9
  _944 = h_4(D)->sh.i_type;
  switch (_944) <default: <L9>, case 0: <L22>, case 1: <L10>, case 2: <L19>>

<L22>:
  goto <bb 234> (<L10>);

<L9>:
  x264_log (h_4(D), 0, "internal error or slice unsupported\n");
  goto <bb 446>;

<L19>:

  # i_mb_i_offset_961 = PHI <0(233), 5(231), 23(230)>
<L10>:
  # DEBUG i_mb_i_offset => i_mb_i_offset_961
  _945 = h_4(D)->sh.b_mbaff;
  if (_945 != 0)
    goto <bb 235>;
  else
    goto <bb 238>;

  <bb 235>:
  _946 = h_4(D)->mb.i_mb_y;
  _947 = _946 & 1;
  if (_947 == 0)
    goto <bb 237>;
  else
    goto <bb 236>;

  <bb 236>:
  _948 = h_4(D)->mb.type;
  _949 = h_4(D)->mb.i_mb_xy;
  _950 = h_4(D)->mb.i_mb_stride;
  _951 = _949 - _950;
  _952 = (sizetype) _951;
  _953 = _948 + _952;
  _954 = *_953;
  _955 = _954 == 6;
  _956 = _954 == 18;
  _957 = _955 | _956;
  if (_957 != 0)
    goto <bb 237>;
  else
    goto <bb 238>;

  <bb 237>:
  bs_tmp.i_bits_encoded = 1;

  <bb 238>:
  # prephitmp_2295 = PHI <0(236), 1(237), 0(234)>
  i_mb_type.12_960 = (unsigned int) _9;
  if (i_mb_type.12_960 <= 1)
    goto <bb 239>;
  else
    goto <bb 253>;

  <bb 239>:
  if (_9 == 1)
    goto <bb 240>;
  else
    goto <bb 241>;

  <bb 240>:

  <bb 241>:
  # di_995 = PHI <4(240), 1(239)>
  # DEBUG di => di_995
  i_mb_i_offset.14_962 = (unsigned int) i_mb_i_offset_961;
  # DEBUG val => i_mb_i_offset.14_962
  _963 = i_mb_i_offset.14_962 + 1;
  _964 = x264_ue_size_tab[_963];
  _965 = (int) _964;
  # DEBUG val => NULL
  _967 = _965 + prephitmp_2295;
  bs_tmp.i_bits_encoded = _967;
  _968 = h_4(D)->pps;
  _969 = _968->b_transform_8x8_mode;
  if (_969 != 0)
    goto <bb 242>;
  else
    goto <bb 243>;

  <bb 242>:
  _970 = _967 + 1;
  bs_tmp.i_bits_encoded = _970;

  <bb 243>:
  # prephitmp_2340 = PHI <_970(242), _967(241)>
  # DEBUG i => 0

  <bb 244>:
  # i_1935 = PHI <i_996(250), 0(243)>
  # prephitmp_2345 = PHI <cstore_1823(250), prephitmp_2340(243)>
  # DEBUG i => i_1935
  # DEBUG h => h_4(D)
  # DEBUG idx => i_1935
  _972 = x264_scan8[i_1935];
  _973 = _972 + -1;
  _974 = h_4(D)->mb.cache.intra4x4_pred_mode[_973];
  ma_975 = (const int) _974;
  # DEBUG ma => ma_975
  _976 = _972 + -8;
  _977 = h_4(D)->mb.cache.intra4x4_pred_mode[_976];
  mb_978 = (const int) _977;
  # DEBUG mb => mb_978
  _979 = mb_978 + 1;
  _980 = x264_mb_pred_mode4x4_fix[_979];
  _981 = ma_975 + 1;
  _982 = x264_mb_pred_mode4x4_fix[_981];
  _983 = MIN_EXPR <_980, _982>;
  m_984 = (const int) _983;
  # DEBUG m => m_984
  if (m_984 < 0)
    goto <bb 245>;
  else
    goto <bb 246>;

  <bb 245>:

  <bb 246>:
  # _990 = PHI <2(245), m_984(244)>
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG i_pred => NULL
  _985 = h_4(D)->mb.cache.intra4x4_pred_mode[_972];
  _986 = (int) _985;
  _987 = _986 + 1;
  _988 = x264_mb_pred_mode4x4_fix[_987];
  i_mode_989 = (int) _988;
  # DEBUG i_mode => i_mode_989
  if (i_mode_989 == _990)
    goto <bb 247>;
  else
    goto <bb 248>;

  <bb 247>:
  _992 = prephitmp_2345 + 1;
  goto <bb 249>;

  <bb 248>:
  _994 = prephitmp_2345 + 4;

  <bb 249>:
  # cstore_1823 = PHI <_992(247), _994(248)>
  i_996 = di_995 + i_1935;
  # DEBUG i => i_996
  # DEBUG i => i_996
  if (i_996 <= 15)
    goto <bb 250>;
  else
    goto <bb 251>;

  <bb 250>:
  goto <bb 244>;

  <bb 251>:
  # cstore_2252 = PHI <cstore_1823(249)>
  # bs_tmp_i_bits_encoded_lsm.1213_2173 = PHI <cstore_1823(249)>
  bs_tmp.i_bits_encoded = bs_tmp_i_bits_encoded_lsm.1213_2173;
  _997 = h_4(D)->mb.i_chroma_pred_mode;
  _998 = x264_mb_pred_mode8x8c_fix[_997];
  _999 = (unsigned int) _998;
  # DEBUG val => _999
  _1000 = _999 + 1;
  _1001 = x264_ue_size_tab[_1000];
  _1002 = (int) _1001;
  # DEBUG val => NULL
  _1004 = _1002 + cstore_2252;
  _1412 = h_4(D)->mb.i_cbp_chroma;
  _1413 = _1412 << 4;
  _1414 = h_4(D)->mb.i_cbp_luma;
  _1415 = _1413 | _1414;
  _1416 = intra4x4_cbp_to_golomb[_1415];
  _1417 = (unsigned int) _1416;
  # DEBUG val => _1417
  _1418 = _1417 + 1;
  _1419 = x264_ue_size_tab[_1418];
  _1420 = (int) _1419;
  # DEBUG val => NULL
  _1422 = _1004 + _1420;
  bs_tmp.i_bits_encoded = _1422;
  # DEBUG h => h_4(D)
  if (_969 == 0)
    goto <bb 252>;
  else
    goto <bb 398>;

  <bb 252>:
  goto <bb 415>;

  <bb 253>:
  if (_9 == 2)
    goto <bb 254>;
  else
    goto <bb 259>;

  <bb 254>:
  _1005 = i_mb_i_offset_961 + 1;
  _1006 = h_4(D)->mb.i_intra16x16_pred_mode;
  _1007 = x264_mb_pred_mode16x16_fix[_1006];
  _1008 = (int) _1007;
  _1009 = _1005 + _1008;
  _1010 = h_4(D)->mb.i_cbp_chroma;
  _1011 = _1010 * 4;
  _1012 = _1009 + _1011;
  _1013 = h_4(D)->mb.i_cbp_luma;
  if (_1013 == 0)
    goto <bb 256>;
  else
    goto <bb 255>;

  <bb 255>:

  <bb 256>:
  # iftmp.15_1014 = PHI <0(254), 12(255)>
  _1015 = _1012 + iftmp.15_1014;
  _1016 = (unsigned int) _1015;
  # DEBUG val => _1016
  _1017 = _1016 + 1;
  _1018 = x264_ue_size_tab[_1017];
  _1019 = (int) _1018;
  # DEBUG val => NULL
  _1021 = _1019 + prephitmp_2295;
  _1022 = h_4(D)->mb.i_chroma_pred_mode;
  _1023 = x264_mb_pred_mode8x8c_fix[_1022];
  _1024 = (unsigned int) _1023;
  # DEBUG val => _1024
  _1025 = _1024 + 1;
  _1026 = x264_ue_size_tab[_1025];
  _1027 = (int) _1026;
  # DEBUG val => NULL
  _1028 = _1021 + _1027;
  bs_tmp.i_bits_encoded = _1028;
  # DEBUG h => h_4(D)
  _157 = h_4(D)->pps;
  _1989 = _157->b_transform_8x8_mode;
  if (_1989 == 0)
    goto <bb 257>;
  else
    goto <bb 398>;

  <bb 257>:
  # DEBUG D#7 => &bs_tmp
  cavlc_qp_delta.isra.4 (h_4(D), &MEM[(int *)&bs_tmp + 36B]);
  _1439 = &h_4(D)->dct.luma16x16_dc;
  block_residual_write_cavlc (h_4(D), &bs_tmp, 0, 24, _1439, 16);
  _1440 = h_4(D)->mb.i_cbp_luma;
  if (_1440 != 0)
    goto <bb 258>;
  else
    goto <bb 416>;

  <bb 258>:
  goto <bb 417>;

  <bb 259>:
  if (_9 == 4)
    goto <bb 260>;
  else
    goto <bb 297>;

  <bb 260>:
  _1029 = h_4(D)->mb.i_partition;
  if (_1029 == 16)
    goto <bb 261>;
  else
    goto <bb 278>;

  <bb 261>:
  # DEBUG val => 0
  # DEBUG val => NULL
  _1031 = prephitmp_2295 + 1;
  bs_tmp.i_bits_encoded = _1031;
  _1032 = h_4(D)->mb.pic.i_fref[0];
  if (_1032 > 1)
    goto <bb 262>;
  else
    goto <bb 265>;

  <bb 262>:
  # DEBUG D#573 => h_4(D)->mb.cache.ref[0][12]
  # DEBUG x => _1032 + -1
  # DEBUG val => (int) D#573
  if (_1032 == 2)
    goto <bb 264>;
  else
    goto <bb 263>;

  <bb 263>:
  _1033 = h_4(D)->mb.cache.ref[0][12];
  _1034 = (int) _1033;
  _1036 = _1034 + 1;
  _1037 = x264_ue_size_tab[_1036];
  _1038 = (int) _1037;

  <bb 264>:
  # _1039 = PHI <1(262), _1038(263)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1040 = _1031 + _1039;
  bs_tmp.i_bits_encoded = _1040;

  <bb 265>:
  x264_mb_predict_mv (h_4(D), 0, 0, 4, &mvp);
  _1041 = h_4(D)->mb.cache.mv[0][12][0];
  _1042 = (int) _1041;
  _1043 = mvp[0];
  _1044 = (int) _1043;
  _1045 = _1042 - _1044;
  # DEBUG val => _1045
  if (_1045 <= 0)
    goto <bb 266>;
  else
    goto <bb 267>;

  <bb 266>:
  _1487 = _1045 * -2;
  iftmp.17_1488 = (unsigned int) _1487;
  goto <bb 268>;

  <bb 267>:
  _1489 = _1045 * 2;
  _1490 = _1489 + -1;
  iftmp.17_1491 = (unsigned int) _1490;

  <bb 268>:
  # iftmp.17_1492 = PHI <iftmp.17_1488(266), iftmp.17_1491(267)>
  # DEBUG val => iftmp.17_1492
  if (iftmp.17_1492 <= 254)
    goto <bb 269>;
  else
    goto <bb 270>;

  <bb 269>:
  _1493 = iftmp.17_1492 + 1;
  _1494 = x264_ue_size_tab[_1493];
  _1495 = (int) _1494;
  goto <bb 271>;

  <bb 270>:
  # DEBUG val => iftmp.17_1492
  _1498 = iftmp.17_1492 + 1;
  _1499 = _1498 >> 8;
  _1500 = x264_ue_size_tab[_1499];
  _1501 = (int) _1500;
  _1502 = _1501 + 16;
  # DEBUG val => NULL

  <bb 271>:
  # _1497 = PHI <_1495(269), _1502(270)>
  # DEBUG val => NULL
  # DEBUG val => NULL
  _1047 = bs_tmp.i_bits_encoded;
  _1048 = _1047 + _1497;
  _1049 = h_4(D)->mb.cache.mv[0][12][1];
  _1050 = (int) _1049;
  _1051 = mvp[1];
  _1052 = (int) _1051;
  _1053 = _1050 - _1052;
  # DEBUG val => _1053
  if (_1053 <= 0)
    goto <bb 272>;
  else
    goto <bb 273>;

  <bb 272>:
  _31 = _1053 * -2;
  iftmp.17_1477 = (unsigned int) _31;
  goto <bb 274>;

  <bb 273>:
  _1478 = _1053 * 2;
  _1479 = _1478 + -1;
  iftmp.17_1480 = (unsigned int) _1479;

  <bb 274>:
  # iftmp.17_1481 = PHI <iftmp.17_1477(272), iftmp.17_1480(273)>
  # DEBUG val => iftmp.17_1481
  if (iftmp.17_1481 <= 254)
    goto <bb 275>;
  else
    goto <bb 276>;

  <bb 275>:
  _1482 = iftmp.17_1481 + 1;
  _1483 = x264_ue_size_tab[_1482];
  _1484 = (int) _1483;
  goto <bb 277>;

  <bb 276>:
  # DEBUG val => iftmp.17_1481
  _1504 = iftmp.17_1481 + 1;
  _1505 = _1504 >> 8;
  _1506 = x264_ue_size_tab[_1505];
  _1507 = (int) _1506;
  _1508 = _1507 + 16;
  # DEBUG val => NULL

  <bb 277>:
  # _1486 = PHI <_1484(275), _1508(276)>
  # DEBUG val => NULL
  # DEBUG val => NULL
  _1055 = _1048 + _1486;
  bs_tmp.i_bits_encoded = _1055;
  goto <bb 296>;

  <bb 278>:
  if (_1029 == 14)
    goto <bb 279>;
  else
    goto <bb 290>;

  <bb 279>:
  # DEBUG val => 1
  # DEBUG val => NULL
  _1057 = prephitmp_2295 + 3;
  bs_tmp.i_bits_encoded = _1057;
  _1058 = h_4(D)->mb.pic.i_fref[0];
  if (_1058 > 1)
    goto <bb 280>;
  else
    goto <bb 283>;

  <bb 280>:
  # DEBUG D#572 => h_4(D)->mb.cache.ref[0][12]
  # DEBUG D#555 => _1058 + -1
  # DEBUG x => D#555
  # DEBUG val => (int) D#572
  if (_1058 == 2)
    goto <bb 451>;
  else
    goto <bb 281>;

  <bb 281>:
  _1059 = h_4(D)->mb.cache.ref[0][12];
  _1060 = (int) _1059;
  _1062 = _1060 + 1;
  _1063 = x264_ue_size_tab[_1062];
  _1064 = (int) _1063;
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1263 = _1057 + _1064;
  _227 = h_4(D)->mb.cache.ref[0][28];
  _2023 = (int) _227;
  # DEBUG x => D#555
  # DEBUG val => _2023
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => D#555
  # DEBUG val => _2023
  _1069 = _2023 + 1;
  _1070 = x264_ue_size_tab[_1069];
  _1071 = (int) _1070;

  <bb 282>:
  # _1072 = PHI <1(451), _1071(281)>
  # _959 = PHI <_2019(451), _1263(281)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1073 = _959 + _1072;
  bs_tmp.i_bits_encoded = _1073;

  <bb 283>:
  x264_mb_predict_mv (h_4(D), 0, 0, 4, &mvp);
  _1074 = h_4(D)->mb.cache.mv[0][12][0];
  _1075 = (int) _1074;
  _1076 = mvp[0];
  _1077 = (int) _1076;
  _1078 = _1075 - _1077;
  # DEBUG val => _1078
  if (_1078 <= 0)
    goto <bb 284>;
  else
    goto <bb 285>;

  <bb 284>:
  _1510 = _1078 * -2;
  iftmp.17_1511 = (unsigned int) _1510;
  goto <bb 286>;

  <bb 285>:
  _1512 = _1078 * 2;
  _1513 = _1512 + -1;
  iftmp.17_1514 = (unsigned int) _1513;

  <bb 286>:
  # iftmp.17_1515 = PHI <iftmp.17_1511(284), iftmp.17_1514(285)>
  # DEBUG val => iftmp.17_1515
  if (iftmp.17_1515 <= 254)
    goto <bb 287>;
  else
    goto <bb 288>;

  <bb 287>:
  _1516 = iftmp.17_1515 + 1;
  _1517 = x264_ue_size_tab[_1516];
  _1518 = (int) _1517;
  goto <bb 289>;

  <bb 288>:
  # DEBUG val => iftmp.17_1515
  _1521 = iftmp.17_1515 + 1;
  _1522 = _1521 >> 8;
  _1523 = x264_ue_size_tab[_1522];
  _1524 = (int) _1523;
  _1525 = _1524 + 16;
  # DEBUG val => NULL

  <bb 289>:
  # _1520 = PHI <_1518(287), _1525(288)>
  # DEBUG val => NULL
  # DEBUG val => NULL
  _1080 = bs_tmp.i_bits_encoded;
  _1081 = _1080 + _1520;
  _1082 = h_4(D)->mb.cache.mv[0][12][1];
  _1083 = (int) _1082;
  _1084 = mvp[1];
  _1085 = (int) _1084;
  _1086 = _1083 - _1085;
  _1087 = bs_size_se (_1086);
  _1088 = _1081 + _1087;
  bs_tmp.i_bits_encoded = _1088;
  x264_mb_predict_mv (h_4(D), 0, 8, 4, &mvp);
  _1089 = h_4(D)->mb.cache.mv[0][28][0];
  _1090 = (int) _1089;
  _1091 = mvp[0];
  _1092 = (int) _1091;
  _1093 = _1090 - _1092;
  _1094 = bs_size_se (_1093);
  _1095 = bs_tmp.i_bits_encoded;
  _1096 = _1094 + _1095;
  _1097 = h_4(D)->mb.cache.mv[0][28][1];
  _1098 = (int) _1097;
  _1099 = mvp[1];
  _1100 = (int) _1099;
  _1101 = _1098 - _1100;
  _1102 = bs_size_se (_1101);
  _1103 = _1096 + _1102;
  bs_tmp.i_bits_encoded = _1103;
  goto <bb 296>;

  <bb 290>:
  if (_1029 == 15)
    goto <bb 291>;
  else
    goto <bb 296>;

  <bb 291>:
  # DEBUG val => 2
  # DEBUG val => NULL
  _1105 = prephitmp_2295 + 3;
  bs_tmp.i_bits_encoded = _1105;
  _1106 = h_4(D)->mb.pic.i_fref[0];
  if (_1106 > 1)
    goto <bb 292>;
  else
    goto <bb 295>;

  <bb 292>:
  # DEBUG D#571 => h_4(D)->mb.cache.ref[0][12]
  # DEBUG D#556 => _1106 + -1
  # DEBUG x => D#556
  # DEBUG val => (int) D#571
  if (_1106 == 2)
    goto <bb 452>;
  else
    goto <bb 293>;

  <bb 293>:
  _1107 = h_4(D)->mb.cache.ref[0][12];
  _1108 = (int) _1107;
  _1110 = _1108 + 1;
  _1111 = x264_ue_size_tab[_1110];
  _1112 = (int) _1111;
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1711 = _1105 + _1112;
  _1438 = h_4(D)->mb.cache.ref[0][14];
  _1452 = (int) _1438;
  # DEBUG x => D#556
  # DEBUG val => _1452
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => D#556
  # DEBUG val => _1452
  _1117 = _1452 + 1;
  _1118 = x264_ue_size_tab[_1117];
  _1119 = (int) _1118;

  <bb 294>:
  # _1120 = PHI <1(452), _1119(293)>
  # _1733 = PHI <_1475(452), _1711(293)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1121 = _1120 + _1733;
  bs_tmp.i_bits_encoded = _1121;

  <bb 295>:
  x264_mb_predict_mv (h_4(D), 0, 0, 2, &mvp);
  _1122 = h_4(D)->mb.cache.mv[0][12][0];
  _1123 = (int) _1122;
  _1124 = mvp[0];
  _1125 = (int) _1124;
  _1126 = _1123 - _1125;
  _1127 = bs_size_se (_1126);
  _1128 = bs_tmp.i_bits_encoded;
  _1129 = _1127 + _1128;
  _1130 = h_4(D)->mb.cache.mv[0][12][1];
  _1131 = (int) _1130;
  _1132 = mvp[1];
  _1133 = (int) _1132;
  _1134 = _1131 - _1133;
  _1135 = bs_size_se (_1134);
  _1136 = _1129 + _1135;
  bs_tmp.i_bits_encoded = _1136;
  x264_mb_predict_mv (h_4(D), 0, 4, 2, &mvp);
  _1137 = h_4(D)->mb.cache.mv[0][14][0];
  _1138 = (int) _1137;
  _1139 = mvp[0];
  _1140 = (int) _1139;
  _1141 = _1138 - _1140;
  _1142 = bs_size_se (_1141);
  _1143 = bs_tmp.i_bits_encoded;
  _1144 = _1142 + _1143;
  _1145 = h_4(D)->mb.cache.mv[0][14][1];
  _1146 = (int) _1145;
  _1147 = mvp[1];
  _1148 = (int) _1147;
  _1149 = _1146 - _1148;
  _1150 = bs_size_se (_1149);
  _1151 = _1144 + _1150;
  bs_tmp.i_bits_encoded = _1151;

  <bb 296>:
  # prephitmp_2338 = PHI <_1055(277), _1103(289), prephitmp_2295(290), _1151(295)>
  mvp ={v} {CLOBBER};
  goto <bb 468>;

  <bb 297>:
  if (_9 == 5)
    goto <bb 298>;
  else
    goto <bb 314>;

  <bb 298>:
  _1152 = h_4(D)->mb.cache.ref[0][12];
  _1153 = h_4(D)->mb.cache.ref[0][14];
  _1154 = _1152 | _1153;
  _1155 = h_4(D)->mb.cache.ref[0][28];
  _1156 = _1154 | _1155;
  _1157 = h_4(D)->mb.cache.ref[0][30];
  _1158 = _1156 | _1157;
  if (_1158 == 0)
    goto <bb 299>;
  else
    goto <bb 300>;

  <bb 299>:
  # DEBUG val => 4
  # DEBUG val => NULL
  _1160 = prephitmp_2295 + 5;
  # DEBUG b_sub_ref0 => 0
  goto <bb 301>;

  <bb 300>:
  # DEBUG val => 3
  # DEBUG val => NULL
  _1162 = prephitmp_2295 + 5;
  # DEBUG b_sub_ref0 => 1

  <bb 301>:
  # cstore_1780 = PHI <_1160(299), _1162(300)>
  # prephitmp_2333 = PHI <0(299), 1(300)>
  bs_tmp.i_bits_encoded = cstore_1780;
  # DEBUG b_sub_ref0 => NULL
  _1163 = h_4(D)->param.analyse.inter;
  _1164 = _1163 & 32;
  if (_1164 != 0)
    goto <bb 302>;
  else
    goto <bb 306>;

  <bb 302>:

  <bb 303>:
  # i_69 = PHI <0(302), i_1174(305)>
  # prephitmp_2335 = PHI <cstore_1780(302), _1173(305)>
  # ivtmp_2225 = PHI <4(302), ivtmp_2224(305)>
  # DEBUG i => i_69
  _1166 = h_4(D)->mb.i_sub_partition[i_69];
  _1167 = sub_mb_type_p_to_golomb[_1166];
  _1168 = (unsigned int) _1167;
  # DEBUG val => _1168
  _1169 = _1168 + 1;
  _1170 = x264_ue_size_tab[_1169];
  _1171 = (int) _1170;
  # DEBUG val => NULL
  _1173 = _1171 + prephitmp_2335;
  i_1174 = i_69 + 1;
  # DEBUG i => i_1174
  # DEBUG i => i_1174
  ivtmp_2224 = ivtmp_2225 - 1;
  if (ivtmp_2224 != 0)
    goto <bb 305>;
  else
    goto <bb 304>;

  <bb 304>:
  # bs_tmp_i_bits_encoded_lsm.1215_2169 = PHI <_1173(303)>
  bs_tmp.i_bits_encoded = bs_tmp_i_bits_encoded_lsm.1215_2169;
  goto <bb 307>;

  <bb 305>:
  goto <bb 303>;

  <bb 306>:
  _1176 = cstore_1780 + 4;
  bs_tmp.i_bits_encoded = _1176;

  <bb 307>:
  _1177 = h_4(D)->mb.pic.i_fref[0];
  _59 = _1177 > 1;
  _1046 = _59 & prephitmp_2333;
  if (_1046 != 0)
    goto <bb 308>;
  else
    goto <bb 311>;

  <bb 308>:
  # DEBUG D#559 => h_4(D)->mb.cache.ref[0][12]
  # DEBUG D#557 => _1177 + -1
  # DEBUG x => D#557
  # DEBUG val => (int) D#559
  if (_1177 == 2)
    goto <bb 453>;
  else
    goto <bb 309>;

  <bb 309>:
  _1179 = h_4(D)->mb.cache.ref[0][12];
  _1180 = (int) _1179;
  _1182 = _1180 + 1;
  _1183 = x264_ue_size_tab[_1182];
  _1184 = (int) _1183;
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1468 = bs_tmp.i_bits_encoded;
  _1470 = _1184 + _1468;
  _2003 = h_4(D)->mb.cache.ref[0][14];
  _2004 = (int) _2003;
  # DEBUG x => D#557
  # DEBUG val => _2004
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => D#557
  # DEBUG val => _2004
  _1190 = _2004 + 1;
  _1191 = x264_ue_size_tab[_1190];
  _1192 = (int) _1191;
  # DEBUG x => NULL
  # DEBUG val => NULL
  _2002 = _1192 + _1470;
  _2008 = h_4(D)->mb.cache.ref[0][28];
  _2009 = (int) _2008;
  # DEBUG x => D#557
  # DEBUG val => _2009
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => D#557
  # DEBUG val => _2009
  _1197 = _2009 + 1;
  _1198 = x264_ue_size_tab[_1197];
  _1199 = (int) _1198;
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1476 = _1199 + _2002;
  _1994 = h_4(D)->mb.cache.ref[0][30];
  _1993 = (int) _1994;
  # DEBUG x => D#557
  # DEBUG val => _1993
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => D#557
  # DEBUG val => _1993
  _1204 = _1993 + 1;
  _1205 = x264_ue_size_tab[_1204];
  _1206 = (int) _1205;

  <bb 310>:
  # _1207 = PHI <1(453), _1206(309)>
  # _1932 = PHI <_304(453), _1476(309)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1208 = _1207 + _1932;
  bs_tmp.i_bits_encoded = _1208;

  <bb 311>:
  # DEBUG i => 0

  <bb 312>:
  # i_1931 = PHI <i_1210(313), 0(311)>
  # ivtmp_2227 = PHI <ivtmp_2226(313), 4(311)>
  # DEBUG i => i_1931
  cavlc_mb8x8_mvd (h_4(D), &bs_tmp, 0, i_1931);
  i_1210 = i_1931 + 1;
  # DEBUG i => i_1210
  # DEBUG i => i_1210
  ivtmp_2226 = ivtmp_2227 - 1;
  if (ivtmp_2226 != 0)
    goto <bb 313>;
  else
    goto <bb 467>;

  <bb 313>:
  goto <bb 312>;

  <bb 314>:
  if (_9 == 17)
    goto <bb 315>;
  else
    goto <bb 345>;

  <bb 315>:
  # DEBUG val => 22
  # DEBUG val => NULL
  _1212 = prephitmp_2295 + 9;
  bs_tmp.i_bits_encoded = _1212;
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 316>:
  # i_1933 = PHI <i_1222(317), 0(315)>
  # prephitmp_2327 = PHI <_1221(317), _1212(315)>
  # ivtmp_2281 = PHI <ivtmp_2219(317), 4(315)>
  # DEBUG i => i_1933
  _1214 = h_4(D)->mb.i_sub_partition[i_1933];
  _1215 = sub_mb_type_b_to_golomb[_1214];
  _1216 = (unsigned int) _1215;
  # DEBUG val => _1216
  _1217 = _1216 + 1;
  _1218 = x264_ue_size_tab[_1217];
  _1219 = (int) _1218;
  # DEBUG val => NULL
  _1221 = _1219 + prephitmp_2327;
  i_1222 = i_1933 + 1;
  # DEBUG i => i_1222
  # DEBUG i => i_1222
  ivtmp_2219 = ivtmp_2281 - 1;
  if (ivtmp_2219 != 0)
    goto <bb 317>;
  else
    goto <bb 318>;

  <bb 317>:
  goto <bb 316>;

  <bb 318>:
  # bs_tmp_i_bits_encoded_lsm.1221_2171 = PHI <_1221(316)>
  bs_tmp.i_bits_encoded = bs_tmp_i_bits_encoded_lsm.1221_2171;
  bs_tmp_i_bits_encoded_lsm.1219_2205 = bs_tmp.i_bits_encoded;

  <bb 319>:
  # i_71 = PHI <0(318), i_1238(325)>
  # bs_tmp_i_bits_encoded_lsm.1219_2245 = PHI <bs_tmp_i_bits_encoded_lsm.1219_2205(318), bs_tmp_i_bits_encoded_lsm.1219_2246(325)>
  # bs_tmp_i_bits_encoded_lsm.1220_2243 = PHI <0(318), bs_tmp_i_bits_encoded_lsm.1220_2244(325)>
  # ivtmp_2279 = PHI <4(318), ivtmp_2282(325)>
  # DEBUG i => i_71
  _1224 = h_4(D)->mb.i_sub_partition[i_71];
  _1225 = x264_mb_partition_listX_table[0][_1224];
  if (_1225 != 0)
    goto <bb 320>;
  else
    goto <bb 324>;

  <bb 320>:
  # DEBUG D#570 => i_71 * 4
  # DEBUG D#569 => x264_scan8[D#570]
  # DEBUG D#568 => h_4(D)->mb.cache.ref[0][D#569]
  _1230 = h_4(D)->mb.pic.i_fref[0];
  _1231 = _1230 + -1;
  # DEBUG x => _1231
  # DEBUG val => (int) D#568
  if (_1231 == 1)
    goto <bb 323>;
  else
    goto <bb 321>;

  <bb 321>:
  if (_1231 > 1)
    goto <bb 322>;
  else
    goto <bb 323>;

  <bb 322>:
  _1226 = i_71 * 4;
  _1227 = x264_scan8[_1226];
  _1228 = h_4(D)->mb.cache.ref[0][_1227];
  _1229 = (int) _1228;
  _1232 = _1229 + 1;
  _1233 = x264_ue_size_tab[_1232];
  _1234 = (int) _1233;

  <bb 323>:
  # _1236 = PHI <1(320), 0(321), _1234(322)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1237 = _1236 + bs_tmp_i_bits_encoded_lsm.1219_2245;

  <bb 324>:
  # bs_tmp_i_bits_encoded_lsm.1219_2246 = PHI <bs_tmp_i_bits_encoded_lsm.1219_2245(319), _1237(323)>
  # bs_tmp_i_bits_encoded_lsm.1220_2244 = PHI <bs_tmp_i_bits_encoded_lsm.1220_2243(319), 1(323)>
  i_1238 = i_71 + 1;
  # DEBUG i => i_1238
  # DEBUG i => i_1238
  ivtmp_2282 = ivtmp_2279 - 1;
  if (ivtmp_2282 != 0)
    goto <bb 325>;
  else
    goto <bb 326>;

  <bb 325>:
  goto <bb 319>;

  <bb 326>:
  # bs_tmp_i_bits_encoded_lsm.1220_2162 = PHI <bs_tmp_i_bits_encoded_lsm.1220_2244(324)>
  # bs_tmp_i_bits_encoded_lsm.1219_2161 = PHI <bs_tmp_i_bits_encoded_lsm.1219_2246(324)>
  if (bs_tmp_i_bits_encoded_lsm.1220_2162 != 0)
    goto <bb 327>;
  else
    goto <bb 328>;

  <bb 327>:
  bs_tmp.i_bits_encoded = bs_tmp_i_bits_encoded_lsm.1219_2161;

  <bb 328>:
  bs_tmp_i_bits_encoded_lsm.1217_2200 = bs_tmp.i_bits_encoded;

  <bb 329>:
  # i_1854 = PHI <0(328), i_1254(335)>
  # bs_tmp_i_bits_encoded_lsm.1217_1736 = PHI <bs_tmp_i_bits_encoded_lsm.1217_2200(328), bs_tmp_i_bits_encoded_lsm.1217_1639(335)>
  # bs_tmp_i_bits_encoded_lsm.1218_2247 = PHI <0(328), bs_tmp_i_bits_encoded_lsm.1218_2248(335)>
  # ivtmp_2274 = PHI <4(328), ivtmp_2277(335)>
  # DEBUG i => i_1854
  _1240 = h_4(D)->mb.i_sub_partition[i_1854];
  _1241 = x264_mb_partition_listX_table[1][_1240];
  if (_1241 != 0)
    goto <bb 330>;
  else
    goto <bb 334>;

  <bb 330>:
  # DEBUG D#567 => i_1854 * 4
  # DEBUG D#566 => x264_scan8[D#567]
  # DEBUG D#565 => h_4(D)->mb.cache.ref[1][D#566]
  _1246 = h_4(D)->mb.pic.i_fref[1];
  _1247 = _1246 + -1;
  # DEBUG x => _1247
  # DEBUG val => (int) D#565
  if (_1247 == 1)
    goto <bb 333>;
  else
    goto <bb 331>;

  <bb 331>:
  if (_1247 > 1)
    goto <bb 332>;
  else
    goto <bb 333>;

  <bb 332>:
  _1242 = i_1854 * 4;
  _1243 = x264_scan8[_1242];
  _1244 = h_4(D)->mb.cache.ref[1][_1243];
  _1245 = (int) _1244;
  _1248 = _1245 + 1;
  _1249 = x264_ue_size_tab[_1248];
  _1250 = (int) _1249;

  <bb 333>:
  # _1252 = PHI <1(330), 0(331), _1250(332)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1253 = _1252 + bs_tmp_i_bits_encoded_lsm.1217_1736;

  <bb 334>:
  # bs_tmp_i_bits_encoded_lsm.1217_1639 = PHI <bs_tmp_i_bits_encoded_lsm.1217_1736(329), _1253(333)>
  # bs_tmp_i_bits_encoded_lsm.1218_2248 = PHI <bs_tmp_i_bits_encoded_lsm.1218_2247(329), 1(333)>
  i_1254 = i_1854 + 1;
  # DEBUG i => i_1254
  # DEBUG i => i_1254
  ivtmp_2277 = ivtmp_2274 - 1;
  if (ivtmp_2277 != 0)
    goto <bb 335>;
  else
    goto <bb 336>;

  <bb 335>:
  goto <bb 329>;

  <bb 336>:
  # bs_tmp_i_bits_encoded_lsm.1217_2176 = PHI <bs_tmp_i_bits_encoded_lsm.1217_1639(334)>
  # bs_tmp_i_bits_encoded_lsm.1218_2160 = PHI <bs_tmp_i_bits_encoded_lsm.1218_2248(334)>
  if (bs_tmp_i_bits_encoded_lsm.1218_2160 != 0)
    goto <bb 337>;
  else
    goto <bb 338>;

  <bb 337>:
  bs_tmp.i_bits_encoded = bs_tmp_i_bits_encoded_lsm.1217_2176;

  <bb 338>:

  <bb 339>:
  # i_1855 = PHI <0(338), i_1256(340)>
  # ivtmp_2166 = PHI <4(338), ivtmp_2275(340)>
  # DEBUG i => i_1855
  cavlc_mb8x8_mvd (h_4(D), &bs_tmp, 0, i_1855);
  i_1256 = i_1855 + 1;
  # DEBUG i => i_1256
  # DEBUG i => i_1256
  ivtmp_2275 = ivtmp_2166 - 1;
  if (ivtmp_2275 != 0)
    goto <bb 340>;
  else
    goto <bb 341>;

  <bb 340>:
  goto <bb 339>;

  <bb 341>:

  <bb 342>:
  # i_1911 = PHI <0(341), i_1258(343)>
  # ivtmp_2223 = PHI <4(341), ivtmp_2168(343)>
  # DEBUG i => i_1911
  cavlc_mb8x8_mvd (h_4(D), &bs_tmp, 1, i_1911);
  i_1258 = i_1911 + 1;
  # DEBUG i => i_1258
  # DEBUG i => i_1258
  ivtmp_2168 = ivtmp_2223 - 1;
  if (ivtmp_2168 != 0)
    goto <bb 343>;
  else
    goto <bb 344>;

  <bb 343>:
  goto <bb 342>;

  <bb 344>:
  pretmp_2320 = bs_tmp.i_bits_encoded;
  goto <bb 468>;

  <bb 345>:
  if (_9 != 7)
    goto <bb 346>;
  else
    goto <bb 397>;

  <bb 346>:
  # DEBUG i => 0
  _701 = x264_mb_type_list0_table[_9][0];
  _566 = (int) _701;
  b_list[0][0] = _566;
  _579 = x264_mb_type_list1_table[_9][0];
  _589 = (int) _579;
  b_list[1][0] = _589;
  # DEBUG i => 1
  # DEBUG i => 1
  _298 = x264_mb_type_list0_table[_9][1];
  _299 = (int) _298;
  b_list[0][1] = _299;
  _301 = x264_mb_type_list1_table[_9][1];
  _302 = (int) _301;
  b_list[1][1] = _302;
  # DEBUG i => 2
  # DEBUG i => 2
  _1265 = h_4(D)->mb.i_partition;
  _1266 = _1265 + -14;
  _1267 = _9 + -8;
  _1268 = mb_type_b_to_golomb[_1266][_1267];
  _1269 = (unsigned int) _1268;
  # DEBUG val => _1269
  _1270 = _1269 + 1;
  _1271 = x264_ue_size_tab[_1270];
  _1272 = (int) _1271;
  # DEBUG val => NULL
  _1274 = _1272 + prephitmp_2295;
  bs_tmp.i_bits_encoded = _1274;
  # DEBUG i_list => 0
  # DEBUG i_list => 0
  bs_tmp_i_bits_encoded_lsm.1223_2195 = bs_tmp.i_bits_encoded;
  goto <bb 348>;

  <bb 347>:
  # i_list_212 = PHI <i_list_1326(378), i_list_1972(466)>
  # bs_tmp_i_bits_encoded_lsm.1223_2242 = PHI <bs_tmp_i_bits_encoded_lsm.1223_2237(378), bs_tmp_i_bits_encoded_lsm.1223_2241(466)>
  # bs_tmp_i_bits_encoded_lsm.1224_2236 = PHI <bs_tmp_i_bits_encoded_lsm.1224_2231(378), bs_tmp_i_bits_encoded_lsm.1224_2235(466)>

  <bb 348>:
  # i_list_1912 = PHI <i_list_212(347), 0(346)>
  # bs_tmp_i_bits_encoded_lsm.1223_2241 = PHI <bs_tmp_i_bits_encoded_lsm.1223_2242(347), bs_tmp_i_bits_encoded_lsm.1223_2195(346)>
  # bs_tmp_i_bits_encoded_lsm.1224_2235 = PHI <bs_tmp_i_bits_encoded_lsm.1224_2236(347), 0(346)>
  # DEBUG i_list => i_list_1912
  if (i_list_1912 == 0)
    goto <bb 349>;
  else
    goto <bb 350>;

  <bb 349>:
  # DEBUG i_list => i_list_1912
  _1276 = h_4(D)->mb.pic.i_fref[0];
  iftmp.16_1277 = _1276 + -1;
  # DEBUG i_ref_max => iftmp.16_1277
  if (iftmp.16_1277 != 0)
    goto <bb 352>;
  else
    goto <bb 466>;

  <bb 350>:
  _1278 = h_4(D)->mb.pic.i_fref[1];
  iftmp.16_1279 = _1278 + -1;
  # DEBUG i_ref_max => iftmp.16_1279
  if (iftmp.16_1279 != 0)
    goto <bb 352>;
  else
    goto <bb 351>;

  <bb 351>:
  # bs_tmp_i_bits_encoded_lsm.1223_2240 = PHI <bs_tmp_i_bits_encoded_lsm.1223_2241(350), bs_tmp_i_bits_encoded_lsm.1223_2241(353), bs_tmp_i_bits_encoded_lsm.1223_2239(363), bs_tmp_i_bits_encoded_lsm.1223_2238(373)>
  # bs_tmp_i_bits_encoded_lsm.1224_2234 = PHI <bs_tmp_i_bits_encoded_lsm.1224_2235(350), bs_tmp_i_bits_encoded_lsm.1224_2235(353), bs_tmp_i_bits_encoded_lsm.1224_2233(363), bs_tmp_i_bits_encoded_lsm.1224_2232(373)>
  goto <bb 378> (<L14>);

  <bb 352>:
  # iftmp.16_1593 = PHI <iftmp.16_1279(350), iftmp.16_1277(349)>
  switch (_1265) <default: <L14>, case 14: <L12>, case 15: <L13>, case 16: <L11>>

<L11>:
  _1281 = b_list[i_list_1912][0];
  if (_1281 != 0)
    goto <bb 354>;
  else
    goto <bb 351>;

  <bb 354>:
  # DEBUG D#564 => h_4(D)->mb.cache.ref[i_list_1912][12]
  # DEBUG x => iftmp.16_1593
  # DEBUG val => (int) D#564
  if (iftmp.16_1593 == 1)
    goto <bb 357>;
  else
    goto <bb 355>;

  <bb 355>:
  if (iftmp.16_1593 > 1)
    goto <bb 356>;
  else
    goto <bb 357>;

  <bb 356>:
  _1282 = h_4(D)->mb.cache.ref[i_list_1912][12];
  _1283 = (int) _1282;
  _1284 = _1283 + 1;
  _1285 = x264_ue_size_tab[_1284];
  _1286 = (int) _1285;

  <bb 357>:
  # _1288 = PHI <1(354), 0(355), _1286(356)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1289 = _1288 + bs_tmp_i_bits_encoded_lsm.1223_2241;
  goto <bb 378> (<L14>);

<L12>:
  _1290 = b_list[i_list_1912][0];
  if (_1290 != 0)
    goto <bb 359>;
  else
    goto <bb 363>;

  <bb 359>:
  # DEBUG D#563 => h_4(D)->mb.cache.ref[i_list_1912][12]
  # DEBUG x => iftmp.16_1593
  # DEBUG val => (int) D#563
  if (iftmp.16_1593 == 1)
    goto <bb 362>;
  else
    goto <bb 360>;

  <bb 360>:
  if (iftmp.16_1593 > 1)
    goto <bb 361>;
  else
    goto <bb 362>;

  <bb 361>:
  _1291 = h_4(D)->mb.cache.ref[i_list_1912][12];
  _1292 = (int) _1291;
  _1293 = _1292 + 1;
  _1294 = x264_ue_size_tab[_1293];
  _1295 = (int) _1294;

  <bb 362>:
  # _1297 = PHI <1(359), 0(360), _1295(361)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1298 = _1297 + bs_tmp_i_bits_encoded_lsm.1223_2241;

  <bb 363>:
  # bs_tmp_i_bits_encoded_lsm.1223_2239 = PHI <bs_tmp_i_bits_encoded_lsm.1223_2241(358), _1298(362)>
  # bs_tmp_i_bits_encoded_lsm.1224_2233 = PHI <bs_tmp_i_bits_encoded_lsm.1224_2235(358), 1(362)>
  _1299 = b_list[i_list_1912][1];
  if (_1299 != 0)
    goto <bb 364>;
  else
    goto <bb 351>;

  <bb 364>:
  # DEBUG D#562 => h_4(D)->mb.cache.ref[i_list_1912][28]
  # DEBUG x => iftmp.16_1593
  # DEBUG val => (int) D#562
  if (iftmp.16_1593 == 1)
    goto <bb 367>;
  else
    goto <bb 365>;

  <bb 365>:
  if (iftmp.16_1593 > 1)
    goto <bb 366>;
  else
    goto <bb 367>;

  <bb 366>:
  _1300 = h_4(D)->mb.cache.ref[i_list_1912][28];
  _1301 = (int) _1300;
  _1302 = _1301 + 1;
  _1303 = x264_ue_size_tab[_1302];
  _1304 = (int) _1303;

  <bb 367>:
  # _1306 = PHI <1(364), 0(365), _1304(366)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1307 = _1306 + bs_tmp_i_bits_encoded_lsm.1223_2239;
  goto <bb 378> (<L14>);

<L13>:
  _1308 = b_list[i_list_1912][0];
  if (_1308 != 0)
    goto <bb 369>;
  else
    goto <bb 373>;

  <bb 369>:
  # DEBUG D#561 => h_4(D)->mb.cache.ref[i_list_1912][12]
  # DEBUG x => iftmp.16_1593
  # DEBUG val => (int) D#561
  if (iftmp.16_1593 == 1)
    goto <bb 372>;
  else
    goto <bb 370>;

  <bb 370>:
  if (iftmp.16_1593 > 1)
    goto <bb 371>;
  else
    goto <bb 372>;

  <bb 371>:
  _1309 = h_4(D)->mb.cache.ref[i_list_1912][12];
  _1310 = (int) _1309;
  _1311 = _1310 + 1;
  _1312 = x264_ue_size_tab[_1311];
  _1313 = (int) _1312;

  <bb 372>:
  # _1315 = PHI <1(369), 0(370), _1313(371)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1316 = _1315 + bs_tmp_i_bits_encoded_lsm.1223_2241;

  <bb 373>:
  # bs_tmp_i_bits_encoded_lsm.1223_2238 = PHI <bs_tmp_i_bits_encoded_lsm.1223_2241(368), _1316(372)>
  # bs_tmp_i_bits_encoded_lsm.1224_2232 = PHI <bs_tmp_i_bits_encoded_lsm.1224_2235(368), 1(372)>
  _1317 = b_list[i_list_1912][1];
  if (_1317 != 0)
    goto <bb 374>;
  else
    goto <bb 351>;

  <bb 374>:
  # DEBUG D#560 => h_4(D)->mb.cache.ref[i_list_1912][14]
  # DEBUG x => iftmp.16_1593
  # DEBUG val => (int) D#560
  if (iftmp.16_1593 == 1)
    goto <bb 377>;
  else
    goto <bb 375>;

  <bb 375>:
  if (iftmp.16_1593 > 1)
    goto <bb 376>;
  else
    goto <bb 377>;

  <bb 376>:
  _1318 = h_4(D)->mb.cache.ref[i_list_1912][14];
  _1319 = (int) _1318;
  _1320 = _1319 + 1;
  _1321 = x264_ue_size_tab[_1320];
  _1322 = (int) _1321;

  <bb 377>:
  # _1324 = PHI <1(374), 0(375), _1322(376)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1325 = _1324 + bs_tmp_i_bits_encoded_lsm.1223_2238;

  # bs_tmp_i_bits_encoded_lsm.1223_2237 = PHI <bs_tmp_i_bits_encoded_lsm.1223_2240(351), bs_tmp_i_bits_encoded_lsm.1223_2241(352), _1325(377), _1289(357), _1307(367)>
  # bs_tmp_i_bits_encoded_lsm.1224_2231 = PHI <bs_tmp_i_bits_encoded_lsm.1224_2234(351), bs_tmp_i_bits_encoded_lsm.1224_2235(352), 1(377), 1(357), 1(367)>
<L14>:
  i_list_1326 = i_list_1912 + 1;
  # DEBUG i_list => i_list_1326
  # DEBUG i_list => i_list_1326
  if (i_list_1326 != 2)
    goto <bb 347>;
  else
    goto <bb 379>;

  <bb 379>:
  # bs_tmp_i_bits_encoded_lsm.1224_2164 = PHI <bs_tmp_i_bits_encoded_lsm.1224_2231(378)>
  # bs_tmp_i_bits_encoded_lsm.1223_2163 = PHI <bs_tmp_i_bits_encoded_lsm.1223_2237(378)>
  if (bs_tmp_i_bits_encoded_lsm.1224_2164 != 0)
    goto <bb 380>;
  else
    goto <bb 381>;

  <bb 380>:
  bs_tmp.i_bits_encoded = bs_tmp_i_bits_encoded_lsm.1223_2163;

  <bb 381>:

  <bb 382>:
  # i_list_1259 = PHI <0(381), i_list_1409(395)>
  # prephitmp_2325 = PHI <_1265(381), pretmp_2324(395)>
  # ivtmp_2218 = PHI <2(381), ivtmp_2217(395)>
  # DEBUG i_list => i_list_1259
  switch (prephitmp_2325) <default: <L18>, case 14: <L16>, case 15: <L17>, case 16: <L15>>

<L15>:
  _1329 = b_list[i_list_1259][0];
  if (_1329 != 0)
    goto <bb 385>;
  else
    goto <bb 384>;

  <bb 384>:
  goto <bb 394> (<L18>);

  <bb 385>:
  x264_mb_predict_mv (h_4(D), i_list_1259, 0, 4, &mvp);
  _1330 = h_4(D)->mb.cache.mv[i_list_1259][12][0];
  _1331 = (int) _1330;
  _1332 = mvp[0];
  _1333 = (int) _1332;
  _1334 = _1331 - _1333;
  _1335 = bs_size_se (_1334);
  _1336 = bs_tmp.i_bits_encoded;
  _1337 = _1335 + _1336;
  _1338 = h_4(D)->mb.cache.mv[i_list_1259][12][1];
  _1339 = (int) _1338;
  _1340 = mvp[1];
  _1341 = (int) _1340;
  _1342 = _1339 - _1341;
  _1343 = bs_size_se (_1342);
  _1344 = _1337 + _1343;
  bs_tmp.i_bits_encoded = _1344;
  goto <bb 394> (<L18>);

<L16>:
  _1345 = b_list[i_list_1259][0];
  if (_1345 != 0)
    goto <bb 387>;
  else
    goto <bb 388>;

  <bb 387>:
  x264_mb_predict_mv (h_4(D), i_list_1259, 0, 4, &mvp);
  _1346 = h_4(D)->mb.cache.mv[i_list_1259][12][0];
  _1347 = (int) _1346;
  _1348 = mvp[0];
  _1349 = (int) _1348;
  _1350 = _1347 - _1349;
  _1351 = bs_size_se (_1350);
  _1352 = bs_tmp.i_bits_encoded;
  _1353 = _1351 + _1352;
  _1354 = h_4(D)->mb.cache.mv[i_list_1259][12][1];
  _1355 = (int) _1354;
  _1356 = mvp[1];
  _1357 = (int) _1356;
  _1358 = _1355 - _1357;
  _1359 = bs_size_se (_1358);
  _1360 = _1353 + _1359;
  bs_tmp.i_bits_encoded = _1360;

  <bb 388>:
  _1361 = b_list[i_list_1259][1];
  if (_1361 != 0)
    goto <bb 389>;
  else
    goto <bb 384>;

  <bb 389>:
  x264_mb_predict_mv (h_4(D), i_list_1259, 8, 4, &mvp);
  _1362 = h_4(D)->mb.cache.mv[i_list_1259][28][0];
  _1363 = (int) _1362;
  _1364 = mvp[0];
  _1365 = (int) _1364;
  _1366 = _1363 - _1365;
  _1367 = bs_size_se (_1366);
  _1368 = bs_tmp.i_bits_encoded;
  _1369 = _1367 + _1368;
  _1370 = h_4(D)->mb.cache.mv[i_list_1259][28][1];
  _1371 = (int) _1370;
  _1372 = mvp[1];
  _1373 = (int) _1372;
  _1374 = _1371 - _1373;
  _1375 = bs_size_se (_1374);
  _1376 = _1369 + _1375;
  bs_tmp.i_bits_encoded = _1376;
  goto <bb 394> (<L18>);

<L17>:
  _1377 = b_list[i_list_1259][0];
  if (_1377 != 0)
    goto <bb 391>;
  else
    goto <bb 392>;

  <bb 391>:
  x264_mb_predict_mv (h_4(D), i_list_1259, 0, 2, &mvp);
  _1378 = h_4(D)->mb.cache.mv[i_list_1259][12][0];
  _1379 = (int) _1378;
  _1380 = mvp[0];
  _1381 = (int) _1380;
  _1382 = _1379 - _1381;
  _1383 = bs_size_se (_1382);
  _1384 = bs_tmp.i_bits_encoded;
  _1385 = _1383 + _1384;
  _1386 = h_4(D)->mb.cache.mv[i_list_1259][12][1];
  _1387 = (int) _1386;
  _1388 = mvp[1];
  _1389 = (int) _1388;
  _1390 = _1387 - _1389;
  _1391 = bs_size_se (_1390);
  _1392 = _1385 + _1391;
  bs_tmp.i_bits_encoded = _1392;

  <bb 392>:
  _1393 = b_list[i_list_1259][1];
  if (_1393 != 0)
    goto <bb 393>;
  else
    goto <bb 384>;

  <bb 393>:
  x264_mb_predict_mv (h_4(D), i_list_1259, 4, 2, &mvp);
  _1394 = h_4(D)->mb.cache.mv[i_list_1259][14][0];
  _1395 = (int) _1394;
  _1396 = mvp[0];
  _1397 = (int) _1396;
  _1398 = _1395 - _1397;
  _1399 = bs_size_se (_1398);
  _1400 = bs_tmp.i_bits_encoded;
  _1401 = _1399 + _1400;
  _1402 = h_4(D)->mb.cache.mv[i_list_1259][14][1];
  _1403 = (int) _1402;
  _1404 = mvp[1];
  _1405 = (int) _1404;
  _1406 = _1403 - _1405;
  _1407 = bs_size_se (_1406);
  _1408 = _1401 + _1407;
  bs_tmp.i_bits_encoded = _1408;

<L18>:
  i_list_1409 = i_list_1259 + 1;
  # DEBUG i_list => i_list_1409
  # DEBUG i_list => i_list_1409
  ivtmp_2217 = ivtmp_2218 - 1;
  if (ivtmp_2217 != 0)
    goto <bb 395>;
  else
    goto <bb 396>;

  <bb 395>:
  pretmp_2324 = h_4(D)->mb.i_partition;
  goto <bb 382>;

  <bb 396>:
  mvp ={v} {CLOBBER};
  b_list ={v} {CLOBBER};
  pretmp_2321 = bs_tmp.i_bits_encoded;
  goto <bb 468>;

  <bb 397>:
  # DEBUG val => 0
  # DEBUG val => NULL
  _1411 = prephitmp_2295 + 1;
  bs_tmp.i_bits_encoded = _1411;
  goto <bb 468>;

  <bb 398>:
  # prephitmp_2317 = PHI <_9(251), pretmp_2316(469), _9(256)>
  _1530 = partition_tab[prephitmp_2317];
  p_1531 = (int) _1530;
  # DEBUG p => p_1531
  if (p_1531 <= 1)
    goto <bb 412>;
  else
    goto <bb 399>;

  <bb 399>:
  if (prephitmp_2317 == 7)
    goto <bb 400>;
  else
    goto <bb 401>;

  <bb 400>:
  _1532 = h_4(D)->sps;
  _1533 = _1532->b_direct8x8_inference;
  goto <bb 412>;

  <bb 401>:
  if (prephitmp_2317 == 5)
    goto <bb 402>;
  else
    goto <bb 407>;

  <bb 402>:
  _1534 = h_4(D)->param.analyse.inter;
  _1535 = _1534 & 32;
  if (_1535 == 0)
    goto <bb 413>;
  else
    goto <bb 403>;

  <bb 403>:

  <bb 404>:
  # i_1828 = PHI <0(403), i_1547(406)>
  # ivtmp_2260 = PHI <4(403), ivtmp_2261(406)>
  # DEBUG i => i_1828
  _1546 = h_4(D)->mb.i_sub_partition[i_1828];
  if (_1546 != 3)
    goto <bb 252>;
  else
    goto <bb 405>;

  <bb 405>:
  i_1547 = i_1828 + 1;
  # DEBUG i => i_1547
  # DEBUG i => i_1547
  ivtmp_2261 = ivtmp_2260 - 1;
  if (ivtmp_2261 != 0)
    goto <bb 406>;
  else
    goto <bb 413>;

  <bb 406>:
  goto <bb 404>;

  <bb 407>:
  _1537 = h_4(D)->sps;
  _1538 = _1537->b_direct8x8_inference;
  if (_1538 != 0)
    goto <bb 413>;
  else
    goto <bb 408>;

  <bb 408>:

  <bb 409>:
  # i_1910 = PHI <0(408), i_1541(411)>
  # ivtmp_2276 = PHI <4(408), ivtmp_2229(411)>
  # DEBUG i => i_1910
  _1540 = h_4(D)->mb.i_sub_partition[i_1910];
  if (_1540 == 12)
    goto <bb 252>;
  else
    goto <bb 410>;

  <bb 410>:
  i_1541 = i_1910 + 1;
  # DEBUG i => i_1541
  # DEBUG i => i_1541
  ivtmp_2229 = ivtmp_2276 - 1;
  if (ivtmp_2229 != 0)
    goto <bb 411>;
  else
    goto <bb 413>;

  <bb 411>:
  goto <bb 409>;

  <bb 412>:
  # _1542 = PHI <_1533(400), p_1531(398)>
  # DEBUG h => NULL
  # DEBUG p => NULL
  # DEBUG i => NULL
  if (_1542 != 0)
    goto <bb 413>;
  else
    goto <bb 252>;

  <bb 413>:
  # DEBUG h => NULL
  # DEBUG p => NULL
  # DEBUG i => NULL
  _1435 = h_4(D)->mb.i_cbp_luma;
  if (_1435 != 0)
    goto <bb 414>;
  else
    goto <bb 252>;

  <bb 414>:
  _1436 = bs_tmp.i_bits_encoded;
  _1437 = _1436 + 1;
  bs_tmp.i_bits_encoded = _1437;

  <bb 415>:
  if (_9 == 2)
    goto <bb 257>;
  else
    goto <bb 420>;

  <bb 416>:
  pretmp_2296 = h_4(D)->mb.i_cbp_chroma;
  goto <bb 439>;

  <bb 417>:
  # i_1913 = PHI <0(258), i_1448(419)>
  # ivtmp_1996 = PHI <16(258), ivtmp_1776(419)>
  # DEBUG i => i_1913
  _1442 = x264_scan8[i_1913];
  _1443 = &h_4(D)->dct.luma4x4[i_1913];
  # DEBUG v => _1443
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_1444 : "r" _1443, "m" MEM[(struct  *)_1443]);
  # DEBUG count => count_1444
  _1445 = count_1444 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _1446 = (unsigned char) _1445;
  h_4(D)->mb.cache.non_zero_count[_1442] = _1446;
  _1447 = _1443 + 2;
  block_residual_write_cavlc (h_4(D), &bs_tmp, 1, i_1913, _1447, 15);
  i_1448 = i_1913 + 1;
  # DEBUG i => i_1448
  # DEBUG i => i_1448
  ivtmp_1776 = ivtmp_1996 - 1;
  if (ivtmp_1776 != 0)
    goto <bb 419>;
  else
    goto <bb 418>;

  <bb 418>:
  pretmp_2297 = h_4(D)->mb.i_cbp_chroma;
  goto <bb 439>;

  <bb 419>:
  goto <bb 417>;

  <bb 420>:
  pretmp_2303 = h_4(D)->mb.i_cbp_luma;
  pretmp_2305 = h_4(D)->mb.i_cbp_chroma;

  <bb 421>:
  # prephitmp_2304 = PHI <pretmp_2303(420), _1425(468)>
  # prephitmp_2306 = PHI <pretmp_2305(420), _1423(468)>
  _1451 = prephitmp_2304 | prephitmp_2306;
  if (_1451 != 0)
    goto <bb 422>;
  else
    goto <bb 439>;

  <bb 422>:
  # DEBUG D#7 => &bs_tmp
  cavlc_qp_delta.isra.4 (h_4(D), &MEM[(int *)&bs_tmp + 36B]);
  # DEBUG h => h_4(D)
  # DEBUG s => &bs_tmp
  # DEBUG i8start => 0
  # DEBUG i8end => 3
  _1550 = h_4(D)->mb.b_transform_8x8;
  if (_1550 != 0)
    goto <bb 424>;
  else
    goto <bb 423>;

  <bb 423>:
  pretmp_2442 = h_4(D)->mb.i_cbp_luma;
  goto <bb 430>;

  <bb 424>:
  pretmp_2446 = h_4(D)->mb.i_cbp_luma;

  <bb 425>:
  # i8start_1579 = PHI <0(424), i8start_1559(428)>
  # prephitmp_2447 = PHI <pretmp_2446(424), prephitmp_2312(428)>
  # ivtmp_2255 = PHI <4(424), ivtmp_2258(428)>
  # DEBUG i8 => i8start_1579
  _1553 = prephitmp_2447 >> i8start_1579;
  _1554 = _1553 & 1;
  if (_1554 != 0)
    goto <bb 426>;
  else
    goto <bb 427>;

  <bb 426>:
  _1555 = h_4(D)->zigzagf.interleave_8x8_cavlc;
  _1556 = &h_4(D)->dct.luma8x8[i8start_1579];
  _1557 = i8start_1579 * 4;
  _1558 = &h_4(D)->dct.luma4x4[_1557];
  _1555 (_1558, _1556);
  pretmp_2311 = h_4(D)->mb.i_cbp_luma;

  <bb 427>:
  # prephitmp_2312 = PHI <prephitmp_2447(425), pretmp_2311(426)>
  i8start_1559 = i8start_1579 + 1;
  # DEBUG i8 => i8start_1559
  # DEBUG i8 => i8start_1559
  ivtmp_2258 = ivtmp_2255 - 1;
  if (ivtmp_2258 != 0)
    goto <bb 428>;
  else
    goto <bb 429>;

  <bb 428>:
  goto <bb 425>;

  <bb 429>:
  # prephitmp_2251 = PHI <prephitmp_2312(427)>

  <bb 430>:
  # prephitmp_2443 = PHI <prephitmp_2251(429), pretmp_2442(423)>
  # DEBUG i8 => 0

  <bb 431>:
  # i8start_1907 = PHI <i8start_1573(437), 0(430)>
  # prephitmp_2445 = PHI <pretmp_2444(437), prephitmp_2443(430)>
  # ivtmp_1753 = PHI <ivtmp_1752(437), 4(430)>
  # DEBUG i8 => i8start_1907
  _1562 = prephitmp_2445 >> i8start_1907;
  _1563 = _1562 & 1;
  if (_1563 != 0)
    goto <bb 433>;
  else
    goto <bb 432>;

  <bb 432>:
  i8start_1573 = i8start_1907 + 1;
  # DEBUG i8 => i8start_1573
  # DEBUG i8 => i8start_1573
  ivtmp_1752 = ivtmp_1753 - 1;
  if (ivtmp_1752 != 0)
    goto <bb 437>;
  else
    goto <bb 438>;

  <bb 433>:
  pretmp_2308 = i8start_1907 * 4;

  <bb 434>:
  # i4_1802 = PHI <0(433), i4_1572(436)>
  # ivtmp_1751 = PHI <4(433), ivtmp_1754(436)>
  # DEBUG i4 => i4_1802
  _1566 = i4_1802 + pretmp_2308;
  _1567 = x264_scan8[_1566];
  _1568 = &h_4(D)->dct.luma4x4[_1566];
  # DEBUG v => _1568
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_1569 : "r" _1568, "m" MEM[(struct  *)_1568]);
  # DEBUG count => count_1569
  _1570 = count_1569 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _1571 = (unsigned char) _1570;
  h_4(D)->mb.cache.non_zero_count[_1567] = _1571;
  block_residual_write_cavlc (h_4(D), &bs_tmp, 2, _1566, _1568, 16);
  i4_1572 = i4_1802 + 1;
  # DEBUG i4 => i4_1572
  # DEBUG i4 => i4_1572
  ivtmp_1754 = ivtmp_1751 - 1;
  if (ivtmp_1754 != 0)
    goto <bb 436>;
  else
    goto <bb 435>;

  <bb 435>:
  goto <bb 432>;

  <bb 436>:
  goto <bb 434>;

  <bb 437>:
  pretmp_2444 = h_4(D)->mb.i_cbp_luma;
  goto <bb 431>;

  <bb 438>:
  pretmp_2298 = h_4(D)->mb.i_cbp_chroma;

  <bb 439>:
  # prephitmp_2299 = PHI <pretmp_2296(416), pretmp_2297(418), prephitmp_2306(421), pretmp_2298(438)>
  if (prephitmp_2299 != 0)
    goto <bb 441>;
  else
    goto <bb 440>;

  <bb 440>:
  goto <bb 446>;

  <bb 441>:
  _1454 = &h_4(D)->dct.chroma_dc[0];
  block_residual_write_cavlc (h_4(D), &bs_tmp, 3, 25, _1454, 4);
  _1455 = &h_4(D)->dct.chroma_dc[1];
  block_residual_write_cavlc (h_4(D), &bs_tmp, 3, 26, _1455, 4);
  _1456 = h_4(D)->mb.i_cbp_chroma;
  _1457 = _1456 & 2;
  if (_1457 != 0)
    goto <bb 442>;
  else
    goto <bb 440>;

  <bb 442>:

  <bb 443>:
  # i_1909 = PHI <16(442), i_1465(445)>
  # ivtmp_2228 = PHI <8(442), ivtmp_2006(445)>
  # DEBUG i => i_1909
  _1459 = x264_scan8[i_1909];
  _1460 = &h_4(D)->dct.luma4x4[i_1909];
  # DEBUG v => _1460
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_1461 : "r" _1460, "m" MEM[(struct  *)_1460]);
  # DEBUG count => count_1461
  _1462 = count_1461 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _1463 = (unsigned char) _1462;
  h_4(D)->mb.cache.non_zero_count[_1459] = _1463;
  _1464 = _1460 + 2;
  block_residual_write_cavlc (h_4(D), &bs_tmp, 4, i_1909, _1464, 15);
  i_1465 = i_1909 + 1;
  # DEBUG i => i_1465
  # DEBUG i => i_1465
  ivtmp_2006 = ivtmp_2228 - 1;
  if (ivtmp_2006 != 0)
    goto <bb 445>;
  else
    goto <bb 444>;

  <bb 444>:
  goto <bb 440>;

  <bb 445>:
  goto <bb 443>;

  <bb 446>:
  # DEBUG h => NULL
  # DEBUG s => NULL
  # DEBUG i_mb_type => NULL
  # DEBUG i_mb_i_offset => NULL
  # DEBUG i => NULL
  # DEBUG di => NULL
  # DEBUG i_mode => NULL
  # DEBUG b_sub_ref0 => NULL
  # DEBUG i_list => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG count => NULL
  # DEBUG count => NULL
  _32 = bs_tmp.i_bits_encoded;
  _33 = i_lambda2_13(D) * _32;
  _34 = _33 + 128;
  i_bits_35 = _34 >> 8;
  # DEBUG i_bits => i_bits_35
  bs_tmp ={v} {CLOBBER};

  <bb 447>:
  # i_bits_1 = PHI <i_bits_15(5), i_bits_27(229), i_bits_35(446)>
  # DEBUG i_bits => i_bits_1
  h_4(D)->mb.b_transform_8x8 = b_transform_bak_5;
  _38 = i_bits_1 + _49;
  return _38;

  <bb 448>:
  pretmp_2352 = cabac_tmp.f8_bits_encoded;

  <bb 449>:
  # prephitmp_2355 = PHI <pretmp_2347(153), pretmp_2348(114), pretmp_2349(112), pretmp_2350(92), pretmp_2351(85), pretmp_2352(448), pretmp_2353(81), pretmp_2354(77), _427(44)>
  goto <bb 154>;

  <bb 450>:
  # DEBUG i_dqp => 0
  # DEBUG i_dqp => 0
  _1748 = h_4(D)->mb.i_last_dqp;
  if (_1748 != 0)
    goto <bb 465>;
  else
    goto <bb 202>;

  <bb 451>:
  # DEBUG x => NULL
  # DEBUG val => NULL
  _2019 = prephitmp_2295 + 4;
  # DEBUG D#554 => h_4(D)->mb.cache.ref[0][28]
  # DEBUG x => 1
  # DEBUG val => (int) D#554
  goto <bb 282>;

  <bb 452>:
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1475 = prephitmp_2295 + 4;
  # DEBUG D#553 => h_4(D)->mb.cache.ref[0][14]
  # DEBUG x => 1
  # DEBUG val => (int) D#553
  goto <bb 294>;

  <bb 453>:
  # DEBUG x => NULL
  # DEBUG val => NULL
  _2007 = bs_tmp.i_bits_encoded;
  # DEBUG D#552 => h_4(D)->mb.cache.ref[0][14]
  # DEBUG D#551 => (int) D#552
  # DEBUG x => 1
  # DEBUG val => D#551
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => 1
  # DEBUG val => D#551
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG D#550 => h_4(D)->mb.cache.ref[0][28]
  # DEBUG D#549 => (int) D#550
  # DEBUG x => 1
  # DEBUG val => D#549
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => 1
  # DEBUG val => D#549
  # DEBUG x => NULL
  # DEBUG val => NULL
  _304 = _2007 + 3;
  # DEBUG D#548 => h_4(D)->mb.cache.ref[0][30]
  # DEBUG x => 1
  # DEBUG val => (int) D#548
  goto <bb 310>;

  <bb 454>:

  <bb 455>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  if (i_mb_type_158 == 4)
    goto <bb 73>;
  else
    goto <bb 86>;

  <bb 456>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  goto <bb 74>;

  <bb 457>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  _160 = h_4(D)->pps;
  _161 = _160->b_transform_8x8_mode;
  if (_161 != 0)
    goto <bb 63>;
  else
    goto <bb 65>;

  <bb 458>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i_state => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  if (i_mb_type.5_620 <= 3)
    goto <bb 457>;
  else
    goto <bb 93>;

  <bb 459>:
  x264_cabac_mb_intra_chroma_pred_mode (h_4(D), &cabac_tmp);
  pretmp_2387 = cabac_tmp.f8_bits_encoded;
  goto <bb 154>;

  <bb 460>:
  x264_cabac_mb_intra_chroma_pred_mode (h_4(D), &cabac_tmp);
  goto <bb 159>;

  <bb 461>:
  i_list_173 = i_list_1942 + 1;
  # DEBUG i_list => i_list_173
  # DEBUG i_list => i_list_173
  goto <bb 95>;

  <bb 462>:
  i_list_230 = i_list_1732 + 1;
  # DEBUG i_list => i_list_230
  # DEBUG i_list => i_list_230
  goto <bb 116>;

  <bb 463>:
  # DEBUG h => h_4(D)
  # DEBUG cb => &cabac_tmp
  i_mbn_xy_1955 = h_4(D)->mb.i_mb_prev_xy;
  # DEBUG i_mbn_xy => i_mbn_xy_1955
  _2016 = h_4(D)->mb.i_qp;
  _1957 = h_4(D)->mb.i_last_qp;
  i_dqp_2014 = _2016 - _1957;
  # DEBUG i_dqp => i_dqp_2014
  pretmp_2464 = cabac_tmp.f8_bits_encoded;
  goto <bb 183>;

  <bb 464>:
  _1960 = h_4(D)->mb.i_cbp_luma;
  if (_1960 > 0)
    goto <bb 463>;
  else
    goto <bb 177>;

  <bb 465>:
  _1966 = h_4(D)->mb.type;
  _1970 = (sizetype) i_mbn_xy_887;
  _1969 = _1966 + _1970;
  _1967 = *_1969;
  if (_1967 == 2)
    goto <bb 202>;
  else
    goto <bb 186>;

  <bb 466>:
  i_list_1972 = i_list_1912 + 1;
  # DEBUG i_list => i_list_1972
  # DEBUG i_list => i_list_1972
  goto <bb 347>;

  <bb 467>:
  pretmp_2319 = bs_tmp.i_bits_encoded;

  <bb 468>:
  # prephitmp_2322 = PHI <prephitmp_2338(296), pretmp_2319(467), pretmp_2320(344), pretmp_2321(396), _1411(397)>
  _1423 = h_4(D)->mb.i_cbp_chroma;
  _1424 = _1423 << 4;
  _1425 = h_4(D)->mb.i_cbp_luma;
  _1426 = _1424 | _1425;
  _1427 = inter_cbp_to_golomb[_1426];
  _1428 = (unsigned int) _1427;
  # DEBUG val => _1428
  _1429 = _1428 + 1;
  _1430 = x264_ue_size_tab[_1429];
  _1431 = (int) _1430;
  # DEBUG val => NULL
  _1433 = _1431 + prephitmp_2322;
  bs_tmp.i_bits_encoded = _1433;
  # DEBUG h => h_4(D)
  _1977 = h_4(D)->pps;
  _1976 = _1977->b_transform_8x8_mode;
  if (_1976 == 0)
    goto <bb 421>;
  else
    goto <bb 469>;

  <bb 469>:
  pretmp_2316 = h_4(D)->mb.i_type;
  goto <bb 398>;

}



;; Function x264_mb_analyse_b_rd (x264_mb_analyse_b_rd, funcdef_no=221, decl_uid=9387, cgraph_uid=221, symbol_order=290)

encoder/analyse.c:1965:13: note: vectorized 0 loops in function.
x264_mb_analyse_b_rd (struct x264_t * h, struct x264_mb_analysis_t * a, int i_satd_inter)
{
  int dy;
  int thresh;
  int iftmp.108_1;
  int _11;
  int _13;
  int _16;
  int _17;
  int _21;
  int _23;
  int _27;
  int _28;
  int _31;
  int _33;
  int _35;
  int _36;
  int _39;
  int _41;
  int _43;
  int _44;
  int _47;
  int _49;
  int _51;
  int _52;
  int _56;
  int _58;
  int _60;
  int _61;
  int _62;
  int _66;
  int _68;
  int _70;
  int _71;
  int _72;
  int _76;
  int _78;

  <bb 2>:
  _11 = h_10(D)->mb.i_psy_rd;
  if (_11 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:

  <bb 4>:
  # iftmp.108_1 = PHI <18(3), 17(2)>
  _13 = iftmp.108_1 * i_satd_inter_12(D);
  thresh_14 = _13 / 16;
  # DEBUG thresh => thresh_14
  _16 = a_15(D)->b_direct_available;
  if (_16 != 0)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  _17 = a_15(D)->i_rd16x16direct;
  if (_17 == 268435456)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  h_10(D)->mb.i_type = 7;
  h_10(D)->mb.b_skip_mc = 1;
  x264_analyse_update_cache (h_10(D), a_15(D));
  _21 = a_15(D)->i_lambda2;
  _23 = x264_rd_cost_mb (h_10(D), _21);
  a_15(D)->i_rd16x16direct = _23;
  h_10(D)->mb.b_skip_mc = 0;

  <bb 7>:
  h_10(D)->mb.i_partition = 16;
  _27 = a_15(D)->l0.me16x16.cost;
  if (thresh_14 >= _27)
    goto <bb 8>;
  else
    goto <bb 10>;

  <bb 8>:
  _28 = a_15(D)->l0.i_rd16x16;
  if (_28 == 268435456)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  h_10(D)->mb.i_type = 8;
  x264_analyse_update_cache (h_10(D), a_15(D));
  _31 = a_15(D)->i_lambda2;
  _33 = x264_rd_cost_mb (h_10(D), _31);
  a_15(D)->l0.i_rd16x16 = _33;

  <bb 10>:
  _35 = a_15(D)->l1.me16x16.cost;
  if (thresh_14 >= _35)
    goto <bb 11>;
  else
    goto <bb 13>;

  <bb 11>:
  _36 = a_15(D)->l1.i_rd16x16;
  if (_36 == 268435456)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  h_10(D)->mb.i_type = 12;
  x264_analyse_update_cache (h_10(D), a_15(D));
  _39 = a_15(D)->i_lambda2;
  _41 = x264_rd_cost_mb (h_10(D), _39);
  a_15(D)->l1.i_rd16x16 = _41;

  <bb 13>:
  _43 = a_15(D)->i_cost16x16bi;
  if (thresh_14 >= _43)
    goto <bb 14>;
  else
    goto <bb 16>;

  <bb 14>:
  _44 = a_15(D)->i_rd16x16bi;
  if (_44 == 268435456)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  h_10(D)->mb.i_type = 16;
  x264_analyse_update_cache (h_10(D), a_15(D));
  _47 = a_15(D)->i_lambda2;
  _49 = x264_rd_cost_mb (h_10(D), _47);
  a_15(D)->i_rd16x16bi = _49;

  <bb 16>:
  _51 = a_15(D)->i_cost8x8bi;
  if (thresh_14 >= _51)
    goto <bb 17>;
  else
    goto <bb 19>;

  <bb 17>:
  _52 = a_15(D)->i_rd8x8bi;
  if (_52 == 268435456)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  h_10(D)->mb.i_type = 17;
  h_10(D)->mb.i_partition = 13;
  x264_analyse_update_cache (h_10(D), a_15(D));
  _56 = a_15(D)->i_lambda2;
  _58 = x264_rd_cost_mb (h_10(D), _56);
  a_15(D)->i_rd8x8bi = _58;
  # DEBUG h => h_10(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG b_skip => 0
  # DEBUG D#624 => &h_10(D)->mb.cache.skip[12]
  # DEBUG dst => D#624
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => (uint8_t) 0
  # DEBUG val2 => 0
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_10(D) + 19980B] = 0;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_10(D) + 19988B] = 0;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_10(D) + 19996B] = 0;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_10(D) + 20004B] = 0;
  # DEBUG dy => 4
  # DEBUG dy => 4

  <bb 19>:
  _60 = a_15(D)->i_cost16x8bi;
  if (thresh_14 >= _60)
    goto <bb 20>;
  else
    goto <bb 22>;

  <bb 20>:
  _61 = a_15(D)->i_rd16x8bi;
  if (_61 == 268435456)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  _62 = a_15(D)->i_mb_type16x8;
  h_10(D)->mb.i_type = _62;
  h_10(D)->mb.i_partition = 14;
  x264_analyse_update_cache (h_10(D), a_15(D));
  _66 = a_15(D)->i_lambda2;
  _68 = x264_rd_cost_mb (h_10(D), _66);
  a_15(D)->i_rd16x8bi = _68;

  <bb 22>:
  _70 = a_15(D)->i_cost8x16bi;
  if (thresh_14 >= _70)
    goto <bb 23>;
  else
    goto <bb 25>;

  <bb 23>:
  _71 = a_15(D)->i_rd8x16bi;
  if (_71 == 268435456)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  _72 = a_15(D)->i_mb_type8x16;
  h_10(D)->mb.i_type = _72;
  h_10(D)->mb.i_partition = 15;
  x264_analyse_update_cache (h_10(D), a_15(D));
  _76 = a_15(D)->i_lambda2;
  _78 = x264_rd_cost_mb (h_10(D), _76);
  a_15(D)->i_rd8x16bi = _78;

  <bb 25>:
  return;

}



;; Function x264_intra_rd_refine (x264_intra_rd_refine, funcdef_no=201, decl_uid=9010, cgraph_uid=201, symbol_order=270)


Analyzing loop at encoder/analyse.c:1002
encoder/analyse.c:1002:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:1002:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:1002:13: note: not vectorized: control flow in loop.
encoder/analyse.c:1002:13: note: bad loop form.

Analyzing loop at encoder/analyse.c:987
encoder/analyse.c:987:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:987:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:987:9: note: not vectorized: control flow in loop.
encoder/analyse.c:987:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:865
encoder/analyse.c:865:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:865:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:865:9: note: not vectorized: control flow in loop.
encoder/analyse.c:865:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:879
encoder/analyse.c:879:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:879:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:879:9: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:879:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:879:9: note: not vectorized: control flow in loop.
encoder/analyse.c:879:9: note: bad inner-loop form.
encoder/analyse.c:879:9: note: not vectorized: Bad inner loop.
encoder/analyse.c:879:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:892
encoder/analyse.c:892:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:892:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:892:13: note: not vectorized: control flow in loop.
encoder/analyse.c:892:13: note: bad loop form.

Analyzing loop at encoder/analyse.c:925
encoder/analyse.c:925:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:925:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:925:9: note: not vectorized: multiple nested loops.
encoder/analyse.c:925:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:974
encoder/analyse.c:974:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:974:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:974:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/analyse.c:974:13: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[_203]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: (ssizetype) ((sizetype) (idx_512 * 4) * 4)
	constant offset from base address: 4
	step: 4
	aligned to: 16
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {_145 + 1, +, 1}_4
Creating dr for i_nnz[j_340]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &i_nnz
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: i_nnz
	Access function 0: {0, +, 1}_4
Creating dr for h_51(D)->mb.cache.non_zero_count[_204]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *h_51(D)
	Access function 0: scev_not_known;
	Access function 1: 384
	Access function 2: 65024
	Access function 3: 87040
encoder/analyse.c:974:13: note: got vectype for stmt: _204 = x264_scan8[_203];
const vector(4) int
encoder/analyse.c:974:13: note: got vectype for stmt: _205 = i_nnz[j_340];
vector(4) int
encoder/analyse.c:974:13: note: not vectorized: data ref analysis failed h_51(D)->mb.cache.non_zero_count[_204] = _206;

encoder/analyse.c:974:13: note: bad data references.

Analyzing loop at encoder/analyse.c:972
encoder/analyse.c:972:17: note: ===== analyze_loop_nest =====
encoder/analyse.c:972:17: note: === vect_analyze_loop_form ===
encoder/analyse.c:972:17: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [6, + , 4294967295] != 0
  bounds on difference of bases: -6 ... -6
  result:
    # of iterations 6, bounded by 6
encoder/analyse.c:972:17: note: === vect_analyze_data_refs ===
Creating dr for pels_v[j_328]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &pels_v
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: pels_v
	Access function 0: {0, +, 1}_3
Creating dr for *_198
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: p_dst_52 + ((sizetype) (x_147 * 8) + (sizetype) (y_148 * 256))
	offset from base address: 0
	constant offset from base address: 7
	step: 32
	aligned to: 128
	base_object: *p_dst_52 + ((sizetype) (x_147 * 8) + (sizetype) (y_148 * 256))
	Access function 0: {7B, +, 32}_3
encoder/analyse.c:972:17: note: got vectype for stmt: _199 = pels_v[j_328];
vector(16) unsigned char
encoder/analyse.c:972:17: note: got vectype for stmt: *_198 = _199;
vector(16) unsigned char
encoder/analyse.c:972:17: note: === vect_analyze_scalar_cycles ===
encoder/analyse.c:972:17: note: Analyze phi: j_328 = PHI <0(83), j_201(86)>

encoder/analyse.c:972:17: note: Access function of PHI: {0, +, 1}_3
encoder/analyse.c:972:17: note: step: 1,  init: 0
encoder/analyse.c:972:17: note: Detected induction.
encoder/analyse.c:972:17: note: Analyze phi: .MEM_337 = PHI <.MEM_193(83), .MEM_200(86)>

encoder/analyse.c:972:17: note: Analyze phi: ivtmp_661 = PHI <7(83), ivtmp_567(86)>

encoder/analyse.c:972:17: note: Access function of PHI: {7, +, 4294967295}_3
encoder/analyse.c:972:17: note: step: 4294967295,  init: 7
encoder/analyse.c:972:17: note: Detected induction.
encoder/analyse.c:972:17: note: === vect_pattern_recog ===
encoder/analyse.c:972:17: note: vect_is_simple_use: operand j_328
encoder/analyse.c:972:17: note: def_stmt: j_328 = PHI <0(83), j_201(86)>
encoder/analyse.c:972:17: note: type of def: 4.
encoder/analyse.c:972:17: note: === vect_analyze_data_ref_accesses ===
encoder/analyse.c:972:17: note: not consecutive access *_198 = _199;

encoder/analyse.c:972:17: note: not vectorized: complicated access pattern.
encoder/analyse.c:972:17: note: bad data access.

Analyzing loop at encoder/analyse.c:945
encoder/analyse.c:945:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:945:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:945:13: note: not vectorized: multiple nested loops.
encoder/analyse.c:945:13: note: bad loop form.

Analyzing loop at encoder/analyse.c:965
encoder/analyse.c:965:21: note: ===== analyze_loop_nest =====
encoder/analyse.c:965:21: note: === vect_analyze_loop_form ===
encoder/analyse.c:965:21: note: === get_loop_niters ===
Analyzing # of iterations of loop 6
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
encoder/analyse.c:965:21: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[_185]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: (ssizetype) ((sizetype) (idx_512 * 4) * 4)
	constant offset from base address: 4
	step: 4
	aligned to: 16
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {_145 + 1, +, 1}_6
Creating dr for h_51(D)->mb.cache.non_zero_count[_186]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *h_51(D)
	Access function 0: scev_not_known;
	Access function 1: 384
	Access function 2: 65024
	Access function 3: 87040
Creating dr for i_nnz[j_152]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &i_nnz
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: i_nnz
	Access function 0: {0, +, 1}_6
encoder/analyse.c:965:21: note: got vectype for stmt: _186 = x264_scan8[_185];
const vector(4) int
Creating dr for h_51(D)->mb.cache.non_zero_count[_186]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: h_51(D)
	offset from base address: (ssizetype) _186
	constant offset from base address: 19056
	step: 0
	aligned to: 1
	base_object: h_51(D)->mb.cache.non_zero_count[_186]
encoder/analyse.c:965:21: note: got vectype for stmt: _187 = h_51(D)->mb.cache.non_zero_count[_186];
vector(16) unsigned char
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
encoder/analyse.c:965:21: note: not vectorized: not suitable for gather load _187 = h_51(D)->mb.cache.non_zero_count[_186];

encoder/analyse.c:965:21: note: bad data references.

Analyzing loop at encoder/analyse.c:963
encoder/analyse.c:963:25: note: ===== analyze_loop_nest =====
encoder/analyse.c:963:25: note: === vect_analyze_loop_form ===
encoder/analyse.c:963:25: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [6, + , 4294967295] != 0
  bounds on difference of bases: -6 ... -6
  result:
    # of iterations 6, bounded by 6
encoder/analyse.c:963:25: note: === vect_analyze_data_refs ===
Creating dr for *_179
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: p_dst_52 + ((sizetype) (x_147 * 8) + (sizetype) (y_148 * 256))
	offset from base address: 0
	constant offset from base address: 7
	step: 32
	aligned to: 128
	base_object: *p_dst_52 + ((sizetype) (x_147 * 8) + (sizetype) (y_148 * 256))
	Access function 0: {7B, +, 32}_5
Creating dr for pels_v[j_511]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &pels_v
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: pels_v
	Access function 0: {0, +, 1}_5
encoder/analyse.c:963:25: note: got vectype for stmt: _180 = *_179;
vector(16) unsigned char
encoder/analyse.c:963:25: note: got vectype for stmt: pels_v[j_511] = _180;
vector(16) unsigned char
encoder/analyse.c:963:25: note: === vect_analyze_scalar_cycles ===
encoder/analyse.c:963:25: note: Analyze phi: j_511 = PHI <0(71), j_182(74)>

encoder/analyse.c:963:25: note: Access function of PHI: {0, +, 1}_5
encoder/analyse.c:963:25: note: step: 1,  init: 0
encoder/analyse.c:963:25: note: Detected induction.
encoder/analyse.c:963:25: note: Analyze phi: .MEM_506 = PHI <.MEM_173(71), .MEM_181(74)>

encoder/analyse.c:963:25: note: Analyze phi: ivtmp_534 = PHI <7(71), ivtmp_524(74)>

encoder/analyse.c:963:25: note: Access function of PHI: {7, +, 4294967295}_5
encoder/analyse.c:963:25: note: step: 4294967295,  init: 7
encoder/analyse.c:963:25: note: Detected induction.
encoder/analyse.c:963:25: note: === vect_pattern_recog ===
encoder/analyse.c:963:25: note: vect_is_simple_use: operand j_511
encoder/analyse.c:963:25: note: def_stmt: j_511 = PHI <0(71), j_182(74)>
encoder/analyse.c:963:25: note: type of def: 4.
encoder/analyse.c:963:25: note: === vect_analyze_data_ref_accesses ===
encoder/analyse.c:963:25: note: Detected single element interleaving *_179 step 32
encoder/analyse.c:963:25: note: Data access with gaps requires scalar epilogue loop
encoder/analyse.c:963:25: note: === vect_mark_stmts_to_be_vectorized ===
encoder/analyse.c:963:25: note: init: phi relevant? j_511 = PHI <0(71), j_182(74)>
encoder/analyse.c:963:25: note: init: phi relevant? .MEM_506 = PHI <.MEM_173(71), .MEM_181(74)>
encoder/analyse.c:963:25: note: init: phi relevant? ivtmp_534 = PHI <7(71), ivtmp_524(74)>
encoder/analyse.c:963:25: note: init: stmt relevant? # DEBUG j => j_511
encoder/analyse.c:963:25: note: init: stmt relevant? _176 = j_511 * 32;
encoder/analyse.c:963:25: note: init: stmt relevant? _177 = _176 + 7;
encoder/analyse.c:963:25: note: init: stmt relevant? _178 = (sizetype) _177;
encoder/analyse.c:963:25: note: init: stmt relevant? _179 = p_dst_by_156 + _178;
encoder/analyse.c:963:25: note: init: stmt relevant? _180 = *_179;
encoder/analyse.c:963:25: note: init: stmt relevant? pels_v[j_511] = _180;
encoder/analyse.c:963:25: note: vec_stmt_relevant_p: stmt has vdefs.
encoder/analyse.c:963:25: note: mark relevant 4, live 0.
encoder/analyse.c:963:25: note: init: stmt relevant? j_182 = j_511 + 1;
encoder/analyse.c:963:25: note: init: stmt relevant? # DEBUG j => j_182
encoder/analyse.c:963:25: note: init: stmt relevant? # DEBUG j => j_182
encoder/analyse.c:963:25: note: init: stmt relevant? ivtmp_524 = ivtmp_534 - 1;
encoder/analyse.c:963:25: note: init: stmt relevant? if (ivtmp_524 != 0)
encoder/analyse.c:963:25: note: worklist: examine stmt: pels_v[j_511] = _180;
encoder/analyse.c:963:25: note: vect_is_simple_use: operand _180
encoder/analyse.c:963:25: note: def_stmt: _180 = *_179;
encoder/analyse.c:963:25: note: type of def: 3.
encoder/analyse.c:963:25: note: mark relevant 4, live 0.
encoder/analyse.c:963:25: note: worklist: examine stmt: _180 = *_179;
encoder/analyse.c:963:25: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _180 = *_179;
  stmt_b: pels_v[j_511] = _180;
) -> no dependence
(compute_affine_dependence
  stmt_a: _180 = *_179;
  stmt_b: _180 = *_179;
(analyze_overlapping_iterations 
  (chrec_a = {7B, +, 32}_5)
  (chrec_b = {7B, +, 32}_5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pels_v[j_511] = _180;
  stmt_b: pels_v[j_511] = _180;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_5)
  (chrec_b = {0, +, 1}_5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/analyse.c:963:25: note: === vect_determine_vectorization_factor ===
encoder/analyse.c:963:25: note: ==> examining phi: j_511 = PHI <0(71), j_182(74)>

encoder/analyse.c:963:25: note: ==> examining phi: .MEM_506 = PHI <.MEM_173(71), .MEM_181(74)>

encoder/analyse.c:963:25: note: ==> examining phi: ivtmp_534 = PHI <7(71), ivtmp_524(74)>

encoder/analyse.c:963:25: note: ==> examining statement: # DEBUG j => j_511

encoder/analyse.c:963:25: note: skip.
encoder/analyse.c:963:25: note: ==> examining statement: _176 = j_511 * 32;

encoder/analyse.c:963:25: note: skip.
encoder/analyse.c:963:25: note: ==> examining statement: _177 = _176 + 7;

encoder/analyse.c:963:25: note: skip.
encoder/analyse.c:963:25: note: ==> examining statement: _178 = (sizetype) _177;

encoder/analyse.c:963:25: note: skip.
encoder/analyse.c:963:25: note: ==> examining statement: _179 = p_dst_by_156 + _178;

encoder/analyse.c:963:25: note: skip.
encoder/analyse.c:963:25: note: ==> examining statement: _180 = *_179;

encoder/analyse.c:963:25: note: get vectype for scalar type:  unsigned char
encoder/analyse.c:963:25: note: vectype: vector(16) unsigned char
encoder/analyse.c:963:25: note: nunits = 16
encoder/analyse.c:963:25: note: ==> examining statement: pels_v[j_511] = _180;

encoder/analyse.c:963:25: note: get vectype for scalar type:  uint8_t
encoder/analyse.c:963:25: note: vectype: vector(16) unsigned char
encoder/analyse.c:963:25: note: nunits = 16
encoder/analyse.c:963:25: note: ==> examining statement: j_182 = j_511 + 1;

encoder/analyse.c:963:25: note: skip.
encoder/analyse.c:963:25: note: ==> examining statement: # DEBUG j => j_182

encoder/analyse.c:963:25: note: skip.
encoder/analyse.c:963:25: note: ==> examining statement: # DEBUG j => j_182

encoder/analyse.c:963:25: note: skip.
encoder/analyse.c:963:25: note: ==> examining statement: ivtmp_524 = ivtmp_534 - 1;

encoder/analyse.c:963:25: note: skip.
encoder/analyse.c:963:25: note: ==> examining statement: if (ivtmp_524 != 0)

encoder/analyse.c:963:25: note: skip.
encoder/analyse.c:963:25: note: vectorization factor = 16
encoder/analyse.c:963:25: note: === vect_analyze_data_refs_alignment ===
encoder/analyse.c:963:25: note: vect_compute_data_ref_alignment:
encoder/analyse.c:963:25: note: can't force alignment of ref: *_179
encoder/analyse.c:963:25: note: vect_compute_data_ref_alignment:
encoder/analyse.c:963:25: note: misalign = 0 bytes of ref pels_v[j_511]
encoder/analyse.c:963:25: note: === vect_prune_runtime_alias_test_list ===
encoder/analyse.c:963:25: note: === vect_enhance_data_refs_alignment ===
encoder/analyse.c:963:25: note: vector alignment may not be reachable
encoder/analyse.c:963:25: note: vect_can_advance_ivs_p:
encoder/analyse.c:963:25: note: Analyze phi: j_511 = PHI <0(71), j_182(74)>

encoder/analyse.c:963:25: note: Analyze phi: .MEM_506 = PHI <.MEM_173(71), .MEM_181(74)>

encoder/analyse.c:963:25: note: virtual phi. skip.
encoder/analyse.c:963:25: note: Analyze phi: ivtmp_534 = PHI <7(71), ivtmp_524(74)>

encoder/analyse.c:963:25: note: Vectorizing an unaligned access.
encoder/analyse.c:963:25: note: === vect_analyze_slp ===
encoder/analyse.c:963:25: note: === vect_make_slp_decision ===
encoder/analyse.c:963:25: note: === vect_detect_hybrid_slp ===
encoder/analyse.c:963:25: note: === vect_analyze_loop_operations ===
encoder/analyse.c:963:25: note: examining phi: j_511 = PHI <0(71), j_182(74)>

encoder/analyse.c:963:25: note: examining phi: .MEM_506 = PHI <.MEM_173(71), .MEM_181(74)>

encoder/analyse.c:963:25: note: examining phi: ivtmp_534 = PHI <7(71), ivtmp_524(74)>

encoder/analyse.c:963:25: note: ==> examining statement: # DEBUG j => j_511
encoder/analyse.c:963:25: note: irrelevant.
encoder/analyse.c:963:25: note: ==> examining statement: _176 = j_511 * 32;
encoder/analyse.c:963:25: note: irrelevant.
encoder/analyse.c:963:25: note: ==> examining statement: _177 = _176 + 7;
encoder/analyse.c:963:25: note: irrelevant.
encoder/analyse.c:963:25: note: ==> examining statement: _178 = (sizetype) _177;
encoder/analyse.c:963:25: note: irrelevant.
encoder/analyse.c:963:25: note: ==> examining statement: _179 = p_dst_by_156 + _178;
encoder/analyse.c:963:25: note: irrelevant.
encoder/analyse.c:963:25: note: ==> examining statement: _180 = *_179;
encoder/analyse.c:963:25: note: vect_is_simple_use: operand *_179
encoder/analyse.c:963:25: note: not ssa-name.
encoder/analyse.c:963:25: note: use not simple.
encoder/analyse.c:963:25: note: vect_is_simple_use: operand *_179
encoder/analyse.c:963:25: note: not ssa-name.
encoder/analyse.c:963:25: note: use not simple.
encoder/analyse.c:963:25: note: single-element interleaving not supported for not adjacent vector loads
encoder/analyse.c:963:25: note: not vectorized: relevant stmt not supported: _180 = *_179;
encoder/analyse.c:963:25: note: bad operation or unsupported loop bound.

Analyzing loop at encoder/cavlc.c:707
encoder/cavlc.c:707:5: note: ===== analyze_loop_nest =====
encoder/cavlc.c:707:5: note: === vect_analyze_loop_form ===
encoder/cavlc.c:707:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 24
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:707:5: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[_626]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: (ssizetype) ((sizetype) (idx_512 * 4) * 4)
	constant offset from base address: 0
	step: 4
	aligned to: 16
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {_145, +, 1}_24
encoder/cavlc.c:707:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:707:5: note: bad data references.

Analyzing loop at encoder/rdo.c:76
encoder/rdo.c:76:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:76:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:76:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 20
  exit condition [y_482 + 1, + , 1](no_overflow) < (int) ((unsigned int) y_482 + 2)
  bounds on difference of bases: -2147483653 ... 2147483646
Applying pattern match.pd:700, generic-match.c:1350
Applying pattern match.pd:628, generic-match.c:1309
Applying pattern match.pd:442, generic-match.c:3412
Applying pattern match.pd:628, generic-match.c:1309
Applying pattern match.pd:77, generic-match.c:4287
Applying pattern match.pd:49, generic-match.c:3223
  result:
    zero if (int) ((unsigned int) y_482 + 2) <= y_482
    # of iterations 1, bounded by 2147483646
encoder/rdo.c:76:5: note: Symbolic number of iterations is (unsigned int) ((int) ((unsigned int) y_482 + 2) > y_482) + 1
encoder/rdo.c:76:5: note: === vect_analyze_data_refs ===
Creating dr for h_51(D)->mb.pic.fenc_satd[y_33][x_481]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_51(D)
	offset from base address: (ssizetype) (((sizetype) x_481 + (sizetype) y_482 * 4) * 4)
	constant offset from base address: 15488
	step: 16
	aligned to: 4
	base_object: *h_51(D)
	Access function 0: x_481
	Access function 1: {y_482, +, 1}_20
	Access function 2: 29184
	Access function 3: 7680
	Access function 4: 87040
Creating dr for h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_51(D)
	offset from base address: (ssizetype) (((sizetype) pretmp_660 + (sizetype) y_482 * 4) * 4)
	constant offset from base address: 15488
	step: 16
	aligned to: 4
	base_object: *h_51(D)
	Access function 0: pretmp_660
	Access function 1: {y_482, +, 1}_20
	Access function 2: 29184
	Access function 3: 7680
	Access function 4: 87040
encoder/rdo.c:76:5: note: got vectype for stmt: _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];
vector(4) int
encoder/rdo.c:76:5: note: got vectype for stmt: _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
vector(4) int
encoder/rdo.c:76:5: note: === vect_analyze_scalar_cycles ===
encoder/rdo.c:76:5: note: Analyze phi: y_33 = PHI <y_482(49), y_496(51)>

encoder/rdo.c:76:5: note: Access function of PHI: {y_482, +, 1}_20
encoder/rdo.c:76:5: note: step: 1,  init: y_482
encoder/rdo.c:76:5: note: Detected induction.
encoder/rdo.c:76:5: note: Analyze phi: satd_138 = PHI <0(49), satd_353(51)>

encoder/rdo.c:76:5: note: Access function of PHI: {0, +, _78 + _352}_20
encoder/rdo.c:76:5: note: step: _78 + _352,  init: 0
encoder/rdo.c:76:5: note: step unknown.
encoder/rdo.c:76:5: note: Analyze phi: satd_138 = PHI <0(49), satd_353(51)>

encoder/rdo.c:76:5: note: swapping oprnds: satd_353 = satd_79 + _352;

encoder/rdo.c:76:5: note: reduction: detected reduction chain: satd_353 = _352 + satd_79;

encoder/rdo.c:76:5: note: Detected reduction.
encoder/rdo.c:76:5: note: === vect_pattern_recog ===
encoder/rdo.c:76:5: note: vect_is_simple_use: operand _352
encoder/rdo.c:76:5: note: def_stmt: _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
encoder/rdo.c:76:5: note: type of def: 3.
encoder/rdo.c:76:5: note: vect_is_simple_use: operand _352
encoder/rdo.c:76:5: note: def_stmt: _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
encoder/rdo.c:76:5: note: type of def: 3.
encoder/rdo.c:76:5: note: vect_is_simple_use: operand _352
encoder/rdo.c:76:5: note: def_stmt: _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
encoder/rdo.c:76:5: note: type of def: 3.
encoder/rdo.c:76:5: note: === vect_analyze_data_ref_accesses ===
encoder/rdo.c:76:5: note: Detected single element interleaving h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660] step 16
encoder/rdo.c:76:5: note: Data access with gaps requires scalar epilogue loop
encoder/rdo.c:76:5: note: Detected single element interleaving h_51(D)->mb.pic.fenc_satd[y_33][x_481] step 16
encoder/rdo.c:76:5: note: Data access with gaps requires scalar epilogue loop
encoder/rdo.c:76:5: note: === vect_mark_stmts_to_be_vectorized ===
encoder/rdo.c:76:5: note: init: phi relevant? y_33 = PHI <y_482(49), y_496(51)>
encoder/rdo.c:76:5: note: init: phi relevant? satd_138 = PHI <0(49), satd_353(51)>
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG y => y_33
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG satd => satd_138
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG x => D#633
encoder/rdo.c:76:5: note: init: stmt relevant? _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];
encoder/rdo.c:76:5: note: init: stmt relevant? satd_79 = _78 + satd_138;
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG satd => satd_79
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG D#630 => D#633 + 1
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG x => D#630
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG satd => satd_79
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG x => D#630
encoder/rdo.c:76:5: note: init: stmt relevant? _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
encoder/rdo.c:76:5: note: init: stmt relevant? satd_353 = _352 + satd_79;
encoder/rdo.c:76:5: note: vec_stmt_relevant_p: used out of loop.
encoder/rdo.c:76:5: note: mark relevant 0, live 1.
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG satd => satd_353
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG D#625 => D#633 + 2
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG x => D#625
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG satd => satd_353
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG x => D#625
encoder/rdo.c:76:5: note: init: stmt relevant? y_496 = y_33 + 1;
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG y => y_496
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG satd => satd_353
encoder/rdo.c:76:5: note: init: stmt relevant? # DEBUG y => y_496
encoder/rdo.c:76:5: note: init: stmt relevant? if (max_y_488 > y_496)
encoder/rdo.c:76:5: note: worklist: examine stmt: satd_353 = _352 + satd_79;
encoder/rdo.c:76:5: note: vect_is_simple_use: operand _352
encoder/rdo.c:76:5: note: def_stmt: _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
encoder/rdo.c:76:5: note: type of def: 3.
encoder/rdo.c:76:5: note: mark relevant 3, live 0.
encoder/rdo.c:76:5: note: vect_is_simple_use: operand satd_79
encoder/rdo.c:76:5: note: def_stmt: satd_79 = _78 + satd_138;
encoder/rdo.c:76:5: note: type of def: 3.
encoder/rdo.c:76:5: note: mark relevant 3, live 0.
encoder/rdo.c:76:5: note: worklist: examine stmt: satd_79 = _78 + satd_138;
encoder/rdo.c:76:5: note: vect_is_simple_use: operand _78
encoder/rdo.c:76:5: note: def_stmt: _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];
encoder/rdo.c:76:5: note: type of def: 3.
encoder/rdo.c:76:5: note: mark relevant 3, live 0.
encoder/rdo.c:76:5: note: vect_is_simple_use: operand satd_138
encoder/rdo.c:76:5: note: def_stmt: satd_138 = PHI <0(49), satd_353(51)>
encoder/rdo.c:76:5: note: type of def: 5.
encoder/rdo.c:76:5: note: mark relevant 3, live 0.
encoder/rdo.c:76:5: note: worklist: examine stmt: satd_138 = PHI <0(49), satd_353(51)>
encoder/rdo.c:76:5: note: vect_is_simple_use: operand 0
encoder/rdo.c:76:5: note: vect_is_simple_use: operand satd_353
encoder/rdo.c:76:5: note: def_stmt: satd_353 = _352 + satd_79;
encoder/rdo.c:76:5: note: type of def: 5.
encoder/rdo.c:76:5: note: reduc-stmt defining reduc-phi in the same nest.
encoder/rdo.c:76:5: note: worklist: examine stmt: _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];
encoder/rdo.c:76:5: note: worklist: examine stmt: _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
encoder/rdo.c:76:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];
  stmt_b: _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
(analyze_overlapping_iterations 
  (chrec_a = x_481)
  (chrec_b = pretmp_660)
  (overlap_iterations_a = not known)
  (overlap_iterations_b = not known))
(analyze_overlapping_iterations 
  (chrec_a = {y_482, +, 1}_20)
  (chrec_b = {y_482, +, 1}_20)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 29184)
  (chrec_b = 29184)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 7680)
  (chrec_b = 7680)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 87040)
  (chrec_b = 87040)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];
  stmt_b: _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];
(analyze_overlapping_iterations 
  (chrec_a = x_481)
  (chrec_b = x_481)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {y_482, +, 1}_20)
  (chrec_b = {y_482, +, 1}_20)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 29184)
  (chrec_b = 29184)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 7680)
  (chrec_b = 7680)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 87040)
  (chrec_b = 87040)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
  stmt_b: _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
(analyze_overlapping_iterations 
  (chrec_a = pretmp_660)
  (chrec_b = pretmp_660)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {y_482, +, 1}_20)
  (chrec_b = {y_482, +, 1}_20)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 29184)
  (chrec_b = 29184)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 7680)
  (chrec_b = 7680)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 87040)
  (chrec_b = 87040)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/rdo.c:76:5: note: === vect_determine_vectorization_factor ===
encoder/rdo.c:76:5: note: ==> examining phi: y_33 = PHI <y_482(49), y_496(51)>

encoder/rdo.c:76:5: note: ==> examining phi: satd_138 = PHI <0(49), satd_353(51)>

encoder/rdo.c:76:5: note: get vectype for scalar type:  int
encoder/rdo.c:76:5: note: vectype: vector(4) int
encoder/rdo.c:76:5: note: nunits = 4
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG y => y_33

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG satd => satd_138

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG x => D#633

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];

encoder/rdo.c:76:5: note: get vectype for scalar type:  int
encoder/rdo.c:76:5: note: vectype: vector(4) int
encoder/rdo.c:76:5: note: nunits = 4
encoder/rdo.c:76:5: note: ==> examining statement: satd_79 = _78 + satd_138;

encoder/rdo.c:76:5: note: get vectype for scalar type:  int
encoder/rdo.c:76:5: note: vectype: vector(4) int
encoder/rdo.c:76:5: note: get vectype for scalar type:  int
encoder/rdo.c:76:5: note: vectype: vector(4) int
encoder/rdo.c:76:5: note: nunits = 4
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG satd => satd_79

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG D#630 => D#633 + 1

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG x => D#630

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG satd => satd_79

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG x => D#630

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];

encoder/rdo.c:76:5: note: get vectype for scalar type:  int
encoder/rdo.c:76:5: note: vectype: vector(4) int
encoder/rdo.c:76:5: note: nunits = 4
encoder/rdo.c:76:5: note: ==> examining statement: satd_353 = _352 + satd_79;

encoder/rdo.c:76:5: note: get vectype for scalar type:  int
encoder/rdo.c:76:5: note: vectype: vector(4) int
encoder/rdo.c:76:5: note: get vectype for scalar type:  int
encoder/rdo.c:76:5: note: vectype: vector(4) int
encoder/rdo.c:76:5: note: nunits = 4
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG satd => satd_353

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG D#625 => D#633 + 2

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG x => D#625

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG satd => satd_353

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG x => D#625

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: y_496 = y_33 + 1;

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG y => y_496

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG satd => satd_353

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: # DEBUG y => y_496

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: ==> examining statement: if (max_y_488 > y_496)

encoder/rdo.c:76:5: note: skip.
encoder/rdo.c:76:5: note: vectorization factor = 4
encoder/rdo.c:76:5: note: === vect_analyze_data_refs_alignment ===
encoder/rdo.c:76:5: note: vect_compute_data_ref_alignment:
encoder/rdo.c:76:5: note: Unknown alignment for access: h_51(D)->mb.pic.fenc_satd[y_33][x_481]
encoder/rdo.c:76:5: note: vect_compute_data_ref_alignment:
encoder/rdo.c:76:5: note: Unknown alignment for access: h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660]
encoder/rdo.c:76:5: note: === vect_prune_runtime_alias_test_list ===
encoder/rdo.c:76:5: note: === vect_enhance_data_refs_alignment ===
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:76:5: note: vector alignment may not be reachable
encoder/rdo.c:76:5: note: vect_can_advance_ivs_p:
encoder/rdo.c:76:5: note: Analyze phi: y_33 = PHI <y_482(49), y_496(51)>

encoder/rdo.c:76:5: note: Analyze phi: satd_138 = PHI <0(49), satd_353(51)>

encoder/rdo.c:76:5: note: reduc phi. skip.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:76:5: note: Vectorizing an unaligned access.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:76:5: note: Vectorizing an unaligned access.
encoder/rdo.c:76:5: note: === vect_analyze_slp ===
encoder/rdo.c:76:5: note: Build SLP for satd_79 = _78 + satd_138;

encoder/rdo.c:76:5: note: Build SLP for satd_353 = _352 + satd_79;

encoder/rdo.c:76:5: note: vect_is_simple_use: operand _78
encoder/rdo.c:76:5: note: def_stmt: _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];
encoder/rdo.c:76:5: note: type of def: 3.
encoder/rdo.c:76:5: note: vect_is_simple_use: operand satd_138
encoder/rdo.c:76:5: note: def_stmt: satd_138 = PHI <0(49), satd_353(51)>
encoder/rdo.c:76:5: note: type of def: 5.
encoder/rdo.c:76:5: note: vect_is_simple_use: operand _352
encoder/rdo.c:76:5: note: def_stmt: _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
encoder/rdo.c:76:5: note: type of def: 3.
encoder/rdo.c:76:5: note: vect_is_simple_use: operand satd_79
encoder/rdo.c:76:5: note: def_stmt: satd_79 = _78 + satd_138;
encoder/rdo.c:76:5: note: type of def: 3.
encoder/rdo.c:76:5: note: Build SLP for _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];

encoder/rdo.c:76:5: note: Build SLP failed: grouped loads have gaps _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];

encoder/analyse.c:847:13: note: vectorized 0 loops in function.
x264_intra_rd_refine (struct x264_t * h, struct x264_mb_analysis_t * a)
{
  int i4;
  const int ma;
  const int mb;
  const int m;
  int count;
  int D.25131;
  int nonzero;
  const int m;
  const int mb;
  const int ma;
  int i_mode;
  int satd;
  int max_x;
  int max_y;
  int x;
  int y;
  int sa8d;
  int max_x;
  int max_y;
  int x;
  int y;
  uint64_t acs;
  uint8_t * fenc;
  uint8_t * fdec;
  int satd;
  int D.25098;
  uint64_t i_ssd;
  uint64_t i_bits;
  struct x264_cabac_t cabac_tmp;
  uint64_t D.25060;
  int count;
  const int ma;
  const int mb;
  const int m;
  int D.25052;
  const int m;
  const int mb;
  const int ma;
  int i_mode;
  int satd;
  int max_x;
  int max_y;
  int x;
  int y;
  int dc;
  uint8_t * fenc;
  uint8_t * fdec;
  int satd;
  int D.25019;
  uint64_t i_ssd;
  uint64_t i_bits;
  struct x264_cabac_t cabac_tmp;
  uint64_t D.24981;
  unsigned int pels$3;
  unsigned int pels$2;
  unsigned int pels$1;
  unsigned int pels$0;
  int8_t * cache;
  int i_chroma_lambda;
  int j;
  uint8_t * p_dst_by;
  int i_nnz[3];
  uint8_t pels_v[7];
  uint64_t pels_h;
  uint8_t edge[33];
  uint8_t * p_dst_by;
  int i_nnz;
  int i_mode;
  int old_pred_mode;
  int predict_mode[9];
  uint64_t i_best;
  int i_thresh;
  int i_mode;
  int i_max;
  int y;
  int x;
  int idx;
  int j;
  int i;
  uint8_t * p_dst;
  int _54;
  int _57;
  int _58;
  int _60;
  unsigned int _62;
  int i_max.146_65;
  int _67;
  int _69;
  int _71;
  int _78;
  short unsigned int _80;
  sizetype _81;
  int _84;
  unsigned int _85;
  unsigned int _87;
  unsigned int _88;
  unsigned char _91;
  unsigned int _92;
  unsigned int _93;
  int i_max.146_96;
  int _98;
  void (*<T1367>) (uint8_t *) _100;
  int _102;
  uint8_t * _103;
  unsigned char _116;
  unsigned char _130;
  int _132;
  signed char _133;
  int _140;
  int _141;
  int _142;
  int _145;
  int _146;
  int _149;
  sizetype _150;
  int _153;
  sizetype _154;
  sizetype _155;
  unsigned int _157;
  unsigned int _159;
  int _160;
  int i_max.146_163;
  int _165;
  int _166;
  void (*<T136f>) (uint8_t *, uint8_t *) _168;
  int _170;
  uint8_t * _171;
  int _176;
  int _177;
  sizetype _178;
  uint8_t * _179;
  unsigned char _180;
  int _184;
  int _185;
  int _186;
  unsigned char _187;
  int _188;
  int _195;
  int _196;
  sizetype _197;
  uint8_t * _198;
  unsigned char _199;
  int _202;
  int _203;
  int _204;
  int _205;
  unsigned char _206;
  int _209;
  int _210;
  int _211;
  unsigned int _217;
  int i_max.146_219;
  int _220;
  int _221;
  int _223;
  int _224;
  int _225;
  int _230;
  int _232;
  int i_max.146_235;
  int _237;
  void (*<T1367>) (uint8_t *) _239;
  uint8_t * _240;
  void (*<T1367>) (uint8_t *) _242;
  uint8_t * _243;
  int _245;
  _Bool _246;
  int _247;
  int _252;
  int _256;
  signed char _258;
  int _263;
  unsigned char _264;
  int _265;
  int _266;
  unsigned char _267;
  int _268;
  int _269;
  int _272;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _273;
  int * _274;
  int _275;
  long unsigned int _276;
  long unsigned int _277;
  long unsigned int _278;
  long unsigned int _279;
  int _282;
  long unsigned int _284;
  sizetype _287;
  int _288;
  sizetype _289;
  sizetype _290;
  uint8_t * _292;
  int _293;
  sizetype _294;
  sizetype _295;
  int _297;
  int i_max.146_305;
  int i_max.146_308;
  int i_max.146_317;
  int i_max.146_321;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _341;
  int _342;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _344;
  int _345;
  int _346;
  int _350;
  int _352;
  unsigned int _354;
  unsigned int _355;
  unsigned int _356;
  unsigned int _357;
  unsigned int _358;
  unsigned int _359;
  unsigned int _360;
  unsigned int _361;
  int _364;
  int _366;
  int _368;
  int _369;
  int _370;
  int _371;
  int _372;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _374;
  int _375;
  int _377;
  unsigned int ivtmp_386;
  unsigned int ivtmp_388;
  int _395;
  signed char _396;
  int _398;
  signed char _399;
  int _401;
  signed char _402;
  int _403;
  signed char _404;
  signed char _405;
  int _407;
  signed char _408;
  int _410;
  int16_t[16] * _411;
  long unsigned int _412;
  long unsigned int _413;
  long unsigned int _414;
  long unsigned int _415;
  long unsigned int _416;
  long unsigned int _417;
  long unsigned int _418;
  _Bool _419;
  unsigned char _420;
  int _422;
  signed char _423;
  int _425;
  signed char _426;
  int _428;
  signed char _429;
  int _430;
  signed char _431;
  signed char _432;
  int _434;
  signed char _435;
  int _436;
  int _437;
  int _438;
  int16_t[16] * _439;
  int _441;
  unsigned char _442;
  struct bs_t * _443;
  int _444;
  int _445;
  int _447;
  int _452;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _453;
  int * _454;
  int _455;
  long unsigned int _456;
  long unsigned int _457;
  long unsigned int _458;
  long unsigned int _459;
  int _462;
  long unsigned int _464;
  uint8_t * _472;
  int _473;
  sizetype _474;
  sizetype _475;
  int _477;
  uint64_t (*<T13f5>) (uint8_t *, int) _478;
  int _480;
  int _498;
  int _499;
  long unsigned int _500;
  int _501;
  unsigned int ivtmp_505;
  unsigned int ivtmp_507;
  unsigned int ivtmp_509;
  int _513;
  unsigned int ivtmp_516;
  int _517;
  int _518;
  unsigned int ivtmp_524;
  unsigned int ivtmp_533;
  unsigned int ivtmp_534;
  unsigned int ivtmp_535;
  int _546;
  int _548;
  int _549;
  int _550;
  int _551;
  int _552;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _554;
  int _555;
  int _557;
  unsigned int ivtmp_560;
  unsigned int ivtmp_562;
  unsigned int ivtmp_567;
  int _576;
  int _577;
  signed char _578;
  int _580;
  signed char _581;
  int _583;
  signed char _584;
  int _585;
  signed char _586;
  signed char _587;
  int16_t[64] * _589;
  int _591;
  signed char _592;
  int _594;
  uint8_t * _595;
  int _596;
  int _597;
  uint8_t * _598;
  uint8_t * _599;
  int _600;
  int _601;
  uint8_t * _602;
  int _604;
  int _605;
  signed char _606;
  int _608;
  signed char _609;
  int _611;
  signed char _612;
  int _613;
  signed char _614;
  signed char _615;
  int _617;
  signed char _618;
  int _619;
  int _620;
  int _621;
  void (*<T15c0>) (int16_t *, int16_t *) _622;
  int16_t[64] * _623;
  int16_t[16] * _624;
  int _626;
  int _627;
  int16_t[16] * _628;
  int _630;
  unsigned char _631;
  int _634;
  struct bs_t * pretmp_657;
  int pretmp_660;
  unsigned int ivtmp_661;
  int pretmp_665;
  int prephitmp_666;
  int pretmp_668;
  int prephitmp_669;

  <bb 2>:
  # DEBUG D#131 => h_51(D)->mb.pic.p_fenc[0]
  # DEBUG p_src => D#131
  p_dst_52 = h_51(D)->mb.pic.p_fdec[0];
  # DEBUG p_dst => p_dst_52
  h_51(D)->mb.i_skip_intra = 0;
  _54 = h_51(D)->mb.i_type;
  if (_54 == 2)
    goto <bb 3>;
  else
    goto <bb 12>;

  <bb 3>:
  old_pred_mode_56 = a_55(D)->i_predict16x16;
  # DEBUG old_pred_mode => old_pred_mode_56
  _57 = a_55(D)->i_satd_i16x16_dir[old_pred_mode_56];
  _58 = _57 * 9;
  i_thresh_59 = _58 / 8;
  # DEBUG i_thresh => i_thresh_59
  _60 = a_55(D)->i_satd_i16x16;
  i_best_61 = (uint64_t) _60;
  # DEBUG i_best => i_best_61
  _62 = h_51(D)->mb.i_neighbour;
  predict_16x16_mode_available (_62, &predict_mode, &i_max);
  # DEBUG i => 0
  # DEBUG i_best => i_best_61
  # DEBUG i => 0
  i_max.146_321 = i_max;
  if (i_max.146_321 > 0)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:
  goto <bb 92>;

  <bb 5>:

  <bb 6>:
  # i_77 = PHI <0(5), i_75(11)>
  # i_best_510 = PHI <i_best_61(5), i_best_10(11)>
  # DEBUG i_best => i_best_510
  # DEBUG i => i_77
  i_mode_66 = predict_mode[i_77];
  # DEBUG i_mode => i_mode_66
  if (old_pred_mode_56 == i_mode_66)
    goto <bb 10>;
  else
    goto <bb 7>;

  <bb 7>:
  _67 = a_55(D)->i_satd_i16x16_dir[i_mode_66];
  if (i_thresh_59 < _67)
    goto <bb 10>;
  else
    goto <bb 8>;

  <bb 8>:
  h_51(D)->mb.i_intra16x16_pred_mode = i_mode_66;
  _69 = a_55(D)->i_lambda2;
  _71 = x264_rd_cost_mb (h_51(D), _69);
  i_best_72 = (uint64_t) _71;
  # DEBUG i_satd => i_best_72
  if (i_best_72 < i_best_510)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # DEBUG i_best => i_best_72
  a_55(D)->i_predict16x16 = i_mode_66;

  <bb 10>:
  # i_best_10 = PHI <i_best_510(7), i_best_510(8), i_best_72(9), i_best_510(6)>
  # DEBUG i_best => i_best_10
  i_75 = i_77 + 1;
  # DEBUG i => i_75
  # DEBUG i_best => i_best_10
  # DEBUG i => i_75
  i_max.146_65 = i_max;
  if (i_max.146_65 > i_75)
    goto <bb 11>;
  else
    goto <bb 4>;

  <bb 11>:
  goto <bb 6>;

  <bb 12>:
  if (_54 == 0)
    goto <bb 13>;
  else
    goto <bb 40>;

  <bb 13>:

  <bb 14>:
  # idx_379 = PHI <0(13), idx_135(39)>
  # i_nnz_378 = PHI <0(13), i_nnz_64(39)>
  # pels$1_129 = PHI <0(13), pels$1_514(39)>
  # pels$3_561 = PHI <0(13), pels$3_35(39)>
  # pels$0_487 = PHI <0(13), pels$0_559(39)>
  # pels$2_298 = PHI <0(13), pels$2_446(39)>
  # prephitmp_666 = PHI <12(13), pretmp_665(39)>
  # ivtmp_386 = PHI <16(13), ivtmp_388(39)>
  # DEBUG pels$3 => pels$3_561
  # DEBUG pels$2 => pels$2_298
  # DEBUG pels$1 => pels$1_129
  # DEBUG pels$0 => pels$0_487
  # DEBUG i_nnz => i_nnz_378
  # DEBUG idx => idx_379
  _80 = block_idx_xy_fdec[idx_379];
  _81 = (sizetype) _80;
  p_dst_by_82 = p_dst_52 + _81;
  # DEBUG p_dst_by => p_dst_by_82
  # DEBUG i_best => 1152921504606846976
  # DEBUG h => h_51(D)
  # DEBUG idx => idx_379
  # DEBUG D#631 => x264_scan8[idx_379]
  # DEBUG D#130 => D#631 + -1
  # DEBUG D#129 => h_51(D)->mb.cache.intra4x4_pred_mode[D#130]
  # DEBUG D#128 => (const int) D#129
  # DEBUG ma => D#128
  # DEBUG D#127 => D#631 + -8
  # DEBUG D#126 => h_51(D)->mb.cache.intra4x4_pred_mode[D#127]
  # DEBUG D#125 => (const int) D#126
  # DEBUG mb => D#125
  # DEBUG D#124 => D#125 + 1
  # DEBUG D#123 => x264_mb_pred_mode4x4_fix[D#124]
  # DEBUG D#122 => D#128 + 1
  # DEBUG D#121 => x264_mb_pred_mode4x4_fix[D#122]
  # DEBUG D#120 => MIN_EXPR <D#123, D#121>
  # DEBUG m => (const int) D#120
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG i_pred_mode => NULL
  _85 = h_51(D)->mb.i_neighbour4[idx_379];
  predict_4x4_mode_available (_85, &predict_mode, &i_max);
  _87 = h_51(D)->mb.i_neighbour4[idx_379];
  _88 = _87 & 6;
  if (_88 == 2)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _91 = MEM[(uint8_t *)p_dst_by_82 + -29B];
  _92 = (unsigned int) _91;
  _93 = _92 * 16843009;
  MEM[(uint32_t *)p_dst_by_82 + -28B] = _93;

  <bb 16>:
  # DEBUG pels$3 => pels$3_561
  # DEBUG pels$2 => pels$2_298
  # DEBUG pels$1 => pels$1_129
  # DEBUG pels$0 => pels$0_487
  # DEBUG i_nnz => i_nnz_378
  # DEBUG i_best => 1152921504606846976
  # DEBUG i => 0
  i_max.146_317 = i_max;
  if (i_max.146_317 > 0)
    goto <bb 17>;
  else
    goto <bb 37>;

  <bb 17>:

  <bb 18>:
  # i_112 = PHI <0(17), i_118(36)>
  # i_best_515 = PHI <1152921504606846976(17), i_best_12(36)>
  # i_nnz_172 = PHI <i_nnz_378(17), i_nnz_18(36)>
  # pels$3_37 = PHI <pels$3_561(17), pels$3_121(36)>
  # pels$1_470 = PHI <pels$1_129(17), pels$1_110(36)>
  # pels$0_566 = PHI <pels$0_487(17), pels$0_136(36)>
  # pels$2_448 = PHI <pels$2_298(17), pels$2_192(36)>
  # prephitmp_669 = PHI <prephitmp_666(17), pretmp_668(36)>
  # DEBUG pels$3 => pels$3_37
  # DEBUG pels$2 => pels$2_448
  # DEBUG pels$1 => pels$1_470
  # DEBUG pels$0 => pels$0_566
  # DEBUG i_nnz => i_nnz_172
  # DEBUG i_best => i_best_515
  # DEBUG i => i_112
  i_mode_97 = predict_mode[i_112];
  # DEBUG i_mode => i_mode_97
  _98 = h_51(D)->mb.b_lossless;
  if (_98 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:
  x264_predict_lossless_4x4 (h_51(D), p_dst_by_82, idx_379, i_mode_97);
  goto <bb 21>;

  <bb 20>:
  _100 = h_51(D)->predict_4x4[i_mode_97];
  _100 (p_dst_by_82);

  <bb 21>:
  _102 = a_55(D)->i_lambda2;
  # DEBUG h => h_51(D)
  # DEBUG i_lambda2 => _102
  # DEBUG i4 => idx_379
  # DEBUG i_mode => i_mode_97
  _263 = h_51(D)->mb.i_qp;
  x264_mb_encode_i4x4 (h_51(D), idx_379, _263);
  _264 = block_idx_y[idx_379];
  _265 = (int) _264;
  _266 = _265 * 4;
  _267 = block_idx_x[idx_379];
  _268 = (int) _267;
  _269 = _268 * 4;
  # DEBUG h => h_51(D)
  # DEBUG size => 6
  # DEBUG x => _269
  # DEBUG y => _266
  # DEBUG p => 0
  # DEBUG satd => 0
  _103 = h_51(D)->mb.pic.p_fdec[0];
  _287 = (sizetype) _269;
  _288 = _266 * 32;
  _289 = (sizetype) _288;
  _290 = _287 + _289;
  fdec_291 = _103 + _290;
  # DEBUG fdec => fdec_291
  _292 = h_51(D)->mb.pic.p_fenc[0];
  _293 = _266 * 16;
  _294 = (sizetype) _293;
  _295 = _287 + _294;
  fenc_296 = _292 + _295;
  # DEBUG fenc => fenc_296
  _297 = h_51(D)->mb.i_psy_rd;
  if (_297 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  _341 = h_51(D)->pixf.sad[6];
  _342 = _341 (fdec_291, 32, &zero, 0);
  dc_343 = _342 >> 1;
  # DEBUG dc => dc_343
  _344 = h_51(D)->pixf.satd[6];
  _345 = _344 (fdec_291, 32, &zero, 0);
  _346 = _345 - dc_343;
  # DEBUG h => h_51(D)
  # DEBUG pixel => 6
  # DEBUG x => _269
  # DEBUG y => _266
  # DEBUG satd => 0
  x_347 = _269 >> 2;
  # DEBUG min_x => x_347
  y_348 = _266 >> 2;
  # DEBUG min_y => y_348
  # DEBUG max_x => x_347 + 1
  # DEBUG max_y => y_348 + 1
  # DEBUG satd => 0
  # DEBUG y => y_348
  # DEBUG satd => 0
  # DEBUG x => x_347
  _350 = h_51(D)->mb.pic.fenc_satd[y_348][x_347];
  # DEBUG satd => _350
  # DEBUG D#629 => x_347 + 1
  # DEBUG x => D#629
  # DEBUG satd => _350
  # DEBUG x => D#629
  # DEBUG D#628 => y_348 + 1
  # DEBUG y => D#628
  # DEBUG satd => _350
  # DEBUG y => D#628
  # DEBUG h => NULL
  # DEBUG pixel => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  _364 = _346 - _350;
  satd_365 = ABS_EXPR <_364>;
  # DEBUG satd => satd_365
  # DEBUG satd => satd_365
  _366 = h_51(D)->mb.i_psy_rd;
  _368 = satd_365 * _366;
  _369 = h_51(D)->mb.i_qp;
  _370 = x264_lambda_tab[_369];
  _371 = _368 * _370;
  _372 = _371 + 128;
  satd_373 = _372 >> 8;
  # DEBUG satd => satd_373

  <bb 23>:
  # satd_376 = PHI <satd_373(22), 0(21)>
  # DEBUG satd => satd_376
  _374 = h_51(D)->pixf.ssd[6];
  _375 = _374 (fenc_296, 16, fdec_291, 32);
  _377 = _375 + satd_376;
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG fdec => NULL
  # DEBUG fenc => NULL
  # DEBUG acs => NULL
  # DEBUG dc => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG sa8d => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG p => NULL
  i_ssd_271 = (uint64_t) _377;
  # DEBUG i_ssd => i_ssd_271
  _272 = h_51(D)->param.b_cabac;
  if (_272 != 0)
    goto <bb 24>;
  else
    goto <bb 27>;

  <bb 24>:
  _273 = h_51(D)->mc.memcpy_aligned;
  _274 = &h_51(D)->cabac.f8_bits_encoded;
  _273 (&cabac_tmp.f8_bits_encoded, _274, 464);
  # DEBUG h => h_51(D)
  # DEBUG cb => &cabac_tmp
  # DEBUG i4 => idx_379
  # DEBUG i_mode => i_mode_97
  # DEBUG h => h_51(D)
  # DEBUG idx => idx_379
  _395 = prephitmp_669 + -1;
  _396 = h_51(D)->mb.cache.intra4x4_pred_mode[_395];
  ma_397 = (const int) _396;
  # DEBUG ma => ma_397
  _398 = prephitmp_669 + -8;
  _399 = h_51(D)->mb.cache.intra4x4_pred_mode[_398];
  mb_400 = (const int) _399;
  # DEBUG mb => mb_400
  _401 = mb_400 + 1;
  _402 = x264_mb_pred_mode4x4_fix[_401];
  _403 = ma_397 + 1;
  _404 = x264_mb_pred_mode4x4_fix[_403];
  _405 = MIN_EXPR <_402, _404>;
  m_406 = (const int) _405;
  # DEBUG m => m_406
  if (m_406 < 0)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:

  <bb 26>:
  # _410 = PHI <2(25), m_406(24)>
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG i_pred => NULL
  _407 = i_mode_97 + 1;
  _408 = x264_mb_pred_mode4x4_fix[_407];
  i_mode_409 = (int) _408;
  # DEBUG i_mode => i_mode_409
  x264_cabac_mb_intra4x4_pred_mode (&cabac_tmp, _410, i_mode_409);
  _411 = &h_51(D)->dct.luma4x4[idx_379];
  # DEBUG v => _411
  # DEBUG i_count => 32
  # DEBUG v => _411
  # DEBUG i_count => 32
  # DEBUG x => _411
  _412 = MEM[(uint64_t *)_411];
  _413 = MEM[(uint64_t *)_411 + 8B];
  _414 = _412 | _413;
  _415 = MEM[(uint64_t *)_411 + 16B];
  _416 = _414 | _415;
  _417 = MEM[(uint64_t *)_411 + 24B];
  _418 = _416 | _417;
  _419 = _418 != 0;
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG i_count => NULL
  # DEBUG nonzero => NULL
  _420 = (unsigned char) _419;
  h_51(D)->mb.cache.non_zero_count[prephitmp_669] = _420;
  block_residual_write_cabac (h_51(D), &cabac_tmp, 2, idx_379, _411, 16);
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i4 => NULL
  # DEBUG i_mode => NULL
  # DEBUG ma => NULL
  # DEBUG mb => NULL
  # DEBUG m => NULL
  _275 = cabac_tmp.f8_bits_encoded;
  _276 = (long unsigned int) _275;
  _277 = (long unsigned int) _102;
  _278 = _276 * _277;
  _279 = _278 + 128;
  i_bits_280 = _279 >> 8;
  # DEBUG i_bits => i_bits_280
  cabac_tmp ={v} {CLOBBER};
  goto <bb 32>;

  <bb 27>:
  # DEBUG h => h_51(D)
  # DEBUG i4 => idx_379
  # DEBUG i_mode => i_mode_97
  # DEBUG h => h_51(D)
  # DEBUG i4 => idx_379
  # DEBUG i_mode => i_mode_97
  # DEBUG h => h_51(D)
  # DEBUG idx => idx_379
  _422 = prephitmp_669 + -1;
  _423 = h_51(D)->mb.cache.intra4x4_pred_mode[_422];
  ma_424 = (const int) _423;
  # DEBUG ma => ma_424
  _425 = prephitmp_669 + -8;
  _426 = h_51(D)->mb.cache.intra4x4_pred_mode[_425];
  mb_427 = (const int) _426;
  # DEBUG mb => mb_427
  _428 = mb_427 + 1;
  _429 = x264_mb_pred_mode4x4_fix[_428];
  _430 = ma_424 + 1;
  _431 = x264_mb_pred_mode4x4_fix[_430];
  _432 = MIN_EXPR <_429, _431>;
  m_433 = (const int) _432;
  # DEBUG m => m_433
  if (m_433 < 0)
    goto <bb 28>;
  else
    goto <bb 29>;

  <bb 28>:

  <bb 29>:
  # _437 = PHI <2(28), m_433(27)>
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  _434 = i_mode_97 + 1;
  _435 = x264_mb_pred_mode4x4_fix[_434];
  _436 = (int) _435;
  if (_436 == _437)
    goto <bb 31>;
  else
    goto <bb 30>;

  <bb 30>:

  <bb 31>:
  # _438 = PHI <1(29), 4(30)>
  # DEBUG h => NULL
  # DEBUG i4 => NULL
  # DEBUG i_mode => NULL
  # DEBUG ma => NULL
  # DEBUG mb => NULL
  # DEBUG m => NULL
  h_51(D)->out.bs.i_bits_encoded = _438;
  _439 = &h_51(D)->dct.luma4x4[idx_379];
  # DEBUG v => _439
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_440 : "r" _439, "m" MEM[(struct  *)_439]);
  # DEBUG count => count_440
  _441 = count_440 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _442 = (unsigned char) _441;
  h_51(D)->mb.cache.non_zero_count[prephitmp_669] = _442;
  _443 = &h_51(D)->out.bs;
  block_residual_write_cavlc (h_51(D), _443, 2, idx_379, _439, 16);
  _444 = h_51(D)->out.bs.i_bits_encoded;
  # DEBUG h => NULL
  # DEBUG i4 => NULL
  # DEBUG i_mode => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG count => NULL
  _282 = _102 * _444;
  i_bits_283 = (uint64_t) _282;
  # DEBUG i_bits => i_bits_283

  <bb 32>:
  # i_bits_285 = PHI <i_bits_280(26), i_bits_283(31)>
  # DEBUG i_bits => i_bits_285
  _284 = i_ssd_271 << 8;
  i_best_286 = _284 + i_bits_285;
  # DEBUG h => NULL
  # DEBUG i_lambda2 => NULL
  # DEBUG i4 => NULL
  # DEBUG i_mode => NULL
  # DEBUG i_bits => NULL
  # DEBUG i_ssd => NULL
  # DEBUG i_satd => NULL
  if (i_best_286 < i_best_515)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 33>:
  a_55(D)->i_predict4x4[idx_379] = i_mode_97;
  # DEBUG i_best => NULL
  pels$0_107 = MEM[(uint32_t *)p_dst_by_82];
  # DEBUG pels$0 => pels$0_107
  pels$1_109 = MEM[(uint32_t *)p_dst_by_82 + 32B];
  # DEBUG pels$1 => pels$1_109
  pels$2_111 = MEM[(uint32_t *)p_dst_by_82 + 64B];
  # DEBUG pels$2 => pels$2_111
  pels$3_113 = MEM[(uint32_t *)p_dst_by_82 + 96B];
  # DEBUG pels$3 => pels$3_113
  _116 = h_51(D)->mb.cache.non_zero_count[prephitmp_666];
  i_nnz_117 = (int) _116;
  # DEBUG i_nnz => i_nnz_117

  <bb 34>:
  # i_best_12 = PHI <i_best_515(32), i_best_286(33)>
  # i_nnz_18 = PHI <i_nnz_172(32), i_nnz_117(33)>
  # pels$0_136 = PHI <pels$0_566(32), pels$0_107(33)>
  # pels$1_110 = PHI <pels$1_470(32), pels$1_109(33)>
  # pels$2_192 = PHI <pels$2_448(32), pels$2_111(33)>
  # pels$3_121 = PHI <pels$3_37(32), pels$3_113(33)>
  # DEBUG pels$3 => pels$3_121
  # DEBUG pels$2 => pels$2_192
  # DEBUG pels$1 => pels$1_110
  # DEBUG pels$0 => pels$0_136
  # DEBUG i_nnz => i_nnz_18
  # DEBUG i_best => i_best_12
  i_118 = i_112 + 1;
  # DEBUG i => i_118
  # DEBUG pels$3 => pels$3_121
  # DEBUG pels$2 => pels$2_192
  # DEBUG pels$1 => pels$1_110
  # DEBUG pels$0 => pels$0_136
  # DEBUG i_nnz => i_nnz_18
  # DEBUG i_best => i_best_12
  # DEBUG i => i_118
  i_max.146_96 = i_max;
  if (i_max.146_96 > i_118)
    goto <bb 36>;
  else
    goto <bb 35>;

  <bb 35>:
  # i_nnz_384 = PHI <i_nnz_18(34)>
  # pels$1_382 = PHI <pels$1_110(34)>
  # pels$3_381 = PHI <pels$3_121(34)>
  # pels$0_380 = PHI <pels$0_136(34)>
  # pels$2_367 = PHI <pels$2_192(34)>
  goto <bb 37>;

  <bb 36>:
  pretmp_668 = x264_scan8[idx_379];
  goto <bb 18>;

  <bb 37>:
  # i_nnz_64 = PHI <i_nnz_384(35), i_nnz_378(16)>
  # pels$3_35 = PHI <pels$3_381(35), pels$3_561(16)>
  # pels$1_514 = PHI <pels$1_382(35), pels$1_129(16)>
  # pels$0_559 = PHI <pels$0_380(35), pels$0_487(16)>
  # pels$2_446 = PHI <pels$2_367(35), pels$2_298(16)>
  MEM[(uint32_t *)p_dst_by_82] = pels$0_559;
  MEM[(uint32_t *)p_dst_by_82 + 32B] = pels$1_514;
  MEM[(uint32_t *)p_dst_by_82 + 64B] = pels$2_446;
  MEM[(uint32_t *)p_dst_by_82 + 96B] = pels$3_35;
  _130 = (unsigned char) i_nnz_64;
  h_51(D)->mb.cache.non_zero_count[prephitmp_666] = _130;
  _132 = a_55(D)->i_predict4x4[idx_379];
  _133 = (signed char) _132;
  h_51(D)->mb.cache.intra4x4_pred_mode[prephitmp_666] = _133;
  idx_135 = idx_379 + 1;
  # DEBUG idx => idx_135
  # DEBUG pels$3 => pels$3_35
  # DEBUG pels$2 => pels$2_446
  # DEBUG pels$1 => pels$1_514
  # DEBUG pels$0 => pels$0_559
  # DEBUG i_nnz => i_nnz_64
  # DEBUG idx => idx_135
  ivtmp_388 = ivtmp_386 - 1;
  if (ivtmp_388 != 0)
    goto <bb 39>;
  else
    goto <bb 38>;

  <bb 38>:
  goto <bb 4>;

  <bb 39>:
  pretmp_665 = x264_scan8[idx_135];
  goto <bb 14>;

  <bb 40>:
  if (_54 == 1)
    goto <bb 41>;
  else
    goto <bb 4>;

  <bb 41>:

  <bb 42>:
  # idx_512 = PHI <0(41), idx_215(90)>
  # ivtmp_507 = PHI <4(41), ivtmp_505(90)>
  # DEBUG idx => idx_512
  # DEBUG pels_h => 0
  _140 = a_55(D)->i_predict8x8[idx_512];
  _141 = a_55(D)->i_satd_i8x8_dir[_140][idx_512];
  _142 = _141 * 11;
  i_thresh_143 = _142 / 8;
  # DEBUG i_thresh => i_thresh_143
  # DEBUG i_best => 1152921504606846976
  _145 = idx_512 * 4;
  # DEBUG h => h_51(D)
  # DEBUG idx => _145
  # DEBUG D#119 => x264_scan8[_145]
  # DEBUG D#118 => D#119 + -1
  # DEBUG D#117 => h_51(D)->mb.cache.intra4x4_pred_mode[D#118]
  # DEBUG D#116 => (const int) D#117
  # DEBUG ma => D#116
  # DEBUG D#115 => D#119 + -8
  # DEBUG D#114 => h_51(D)->mb.cache.intra4x4_pred_mode[D#115]
  # DEBUG D#113 => (const int) D#114
  # DEBUG mb => D#113
  # DEBUG D#112 => D#113 + 1
  # DEBUG D#111 => x264_mb_pred_mode4x4_fix[D#112]
  # DEBUG D#110 => D#116 + 1
  # DEBUG D#109 => x264_mb_pred_mode4x4_fix[D#110]
  # DEBUG D#108 => MIN_EXPR <D#111, D#109>
  # DEBUG m => (const int) D#108
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG i_pred_mode => NULL
  x_147 = idx_512 & 1;
  # DEBUG x => x_147
  y_148 = idx_512 >> 1;
  # DEBUG y => y_148
  _149 = x_147 * 8;
  _150 = (sizetype) _149;
  # DEBUG D#107 => y_148 * 128
  # DEBUG D#106 => (sizetype) D#107
  # DEBUG D#105 => _150 + D#106
  # DEBUG p_src_by => D#131 + D#105
  _153 = y_148 * 256;
  _154 = (sizetype) _153;
  _155 = _150 + _154;
  p_dst_by_156 = p_dst_52 + _155;
  # DEBUG p_dst_by => p_dst_by_156
  _157 = h_51(D)->mb.i_neighbour8[idx_512];
  predict_4x4_mode_available (_157, &predict_mode, &i_max);
  _159 = h_51(D)->mb.i_neighbour8[idx_512];
  _160 = (int) _159;
  x264_predict_8x8_filter (p_dst_by_156, &edge, _160, 15);
  # DEBUG i => 0
  # DEBUG pels_h => 0
  # DEBUG i_best => 1152921504606846976
  # DEBUG i => 0
  i_max.146_305 = i_max;
  if (i_max.146_305 > 0)
    goto <bb 43>;
  else
    goto <bb 81>;

  <bb 43>:
  _361 = (unsigned int) y_148;
  _360 = _361 * 8;
  _447 = (int) _360;
  _359 = (unsigned int) _447;
  _358 = _359 * 16;
  _473 = (int) _358;
  _474 = (sizetype) _473;
  _475 = _150 + _474;
  x_481 = _149 >> 2;
  y_482 = _447 >> 2;
  _357 = (unsigned int) y_482;
  _356 = _357 + 2;
  max_y_488 = (int) _356;
  _355 = (unsigned int) x_481;
  _354 = _355 + 1;
  pretmp_660 = (int) _354;
  x_502 = _149 >> 3;
  y_503 = _447 >> 3;

  <bb 44>:
  # i_20 = PHI <0(43), i_191(80)>
  # i_best_492 = PHI <1152921504606846976(43), i_best_14(80)>
  # pels_h_36 = PHI <0(43), pels_h_21(80)>
  # DEBUG pels_h => pels_h_36
  # DEBUG i_best => i_best_492
  # DEBUG i => i_20
  i_mode_164 = predict_mode[i_20];
  # DEBUG i_mode => i_mode_164
  _165 = a_55(D)->i_satd_i8x8_dir[i_mode_164][idx_512];
  if (i_thresh_143 < _165)
    goto <bb 78>;
  else
    goto <bb 45>;

  <bb 45>:
  _166 = h_51(D)->mb.b_lossless;
  if (_166 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:
  x264_predict_lossless_8x8 (h_51(D), p_dst_by_156, idx_512, i_mode_164, &edge);
  goto <bb 48>;

  <bb 47>:
  _168 = h_51(D)->predict_8x8[i_mode_164];
  _168 (p_dst_by_156, &edge);

  <bb 48>:
  _170 = a_55(D)->i_lambda2;
  # DEBUG h => h_51(D)
  # DEBUG i_lambda2 => _170
  # DEBUG i8 => idx_512
  # DEBUG i_mode => i_mode_164
  _445 = h_51(D)->mb.i_qp;
  x264_mb_encode_i8x8 (h_51(D), idx_512, _445);
  # DEBUG D#632 => y_148 * 8
  # DEBUG h => h_51(D)
  # DEBUG size => 3
  # DEBUG x => _149
  # DEBUG y => D#632
  # DEBUG p => 0
  # DEBUG satd => 0
  _171 = h_51(D)->mb.pic.p_fdec[0];
  fdec_471 = _171 + _155;
  # DEBUG fdec => fdec_471
  _472 = h_51(D)->mb.pic.p_fenc[0];
  fenc_476 = _472 + _475;
  # DEBUG fenc => fenc_476
  _477 = h_51(D)->mb.i_psy_rd;
  if (_477 != 0)
    goto <bb 49>;
  else
    goto <bb 53>;

  <bb 49>:
  _478 = h_51(D)->pixf.hadamard_ac[3];
  acs_479 = _478 (fdec_471, 32);
  # DEBUG acs => acs_479
  _480 = (int) acs_479;
  # DEBUG h => h_51(D)
  # DEBUG pixel => 3
  # DEBUG x => _149
  # DEBUG y => D#632
  # DEBUG satd => 0
  # DEBUG D#633 => _149 >> 2
  # DEBUG min_x => D#633
  # DEBUG D#634 => _447 >> 2
  # DEBUG min_y => D#634
  # DEBUG max_x => D#633 + 2
  # DEBUG max_y => y_482 + 2
  # DEBUG satd => 0
  # DEBUG y => D#634

  <bb 50>:
  # y_33 = PHI <y_482(49), y_496(51)>
  # satd_138 = PHI <0(49), satd_353(51)>
  # DEBUG y => y_33
  # DEBUG satd => satd_138
  # DEBUG x => D#633
  _78 = h_51(D)->mb.pic.fenc_satd[y_33][x_481];
  satd_79 = _78 + satd_138;
  # DEBUG satd => satd_79
  # DEBUG D#630 => D#633 + 1
  # DEBUG x => D#630
  # DEBUG satd => satd_79
  # DEBUG x => D#630
  _352 = h_51(D)->mb.pic.fenc_satd[y_33][pretmp_660];
  satd_353 = _352 + satd_79;
  # DEBUG satd => satd_353
  # DEBUG D#625 => D#633 + 2
  # DEBUG x => D#625
  # DEBUG satd => satd_353
  # DEBUG x => D#625
  y_496 = y_33 + 1;
  # DEBUG y => y_496
  # DEBUG satd => satd_353
  # DEBUG y => y_496
  if (max_y_488 > y_496)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 51>:
  goto <bb 50>;

  <bb 52>:
  # satd_362 = PHI <satd_353(50)>
  # DEBUG h => NULL
  # DEBUG pixel => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  _498 = _480 - satd_362;
  _499 = ABS_EXPR <_498>;
  _500 = acs_479 >> 32;
  _501 = (int) _500;
  # DEBUG h => h_51(D)
  # DEBUG pixel => 3
  # DEBUG x => _149
  # DEBUG y => D#632
  # DEBUG sa8d => 0
  # DEBUG D#635 => _149 >> 3
  # DEBUG min_x => D#635
  # DEBUG D#636 => _447 >> 3
  # DEBUG min_y => D#636
  # DEBUG max_x => D#635 + 1
  # DEBUG max_y => D#636 + 1
  # DEBUG sa8d => 0
  # DEBUG y => D#636
  # DEBUG sa8d => 0
  # DEBUG x => D#635
  _513 = h_51(D)->mb.pic.fenc_sa8d[y_503][x_502];
  # DEBUG sa8d => _513
  # DEBUG D#627 => D#635 + 1
  # DEBUG x => D#627
  # DEBUG sa8d => _513
  # DEBUG x => D#627
  # DEBUG D#626 => D#636 + 1
  # DEBUG y => D#626
  # DEBUG sa8d => _513
  # DEBUG y => D#626
  # DEBUG h => NULL
  # DEBUG pixel => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG sa8d => NULL
  _517 = _501 - _513;
  _518 = ABS_EXPR <_517>;
  satd_519 = _499 + _518;
  # DEBUG satd => satd_519
  satd_520 = satd_519 >> 1;
  # DEBUG satd => satd_520
  # DEBUG satd => satd_520
  _546 = h_51(D)->mb.i_psy_rd;
  _548 = satd_520 * _546;
  _549 = h_51(D)->mb.i_qp;
  _550 = x264_lambda_tab[_549];
  _551 = _548 * _550;
  _552 = _551 + 128;
  satd_553 = _552 >> 8;
  # DEBUG satd => satd_553

  <bb 53>:
  # satd_556 = PHI <satd_553(52), 0(48)>
  # DEBUG satd => satd_556
  _554 = h_51(D)->pixf.ssd[3];
  _555 = _554 (fenc_476, 16, fdec_471, 32);
  _557 = _555 + satd_556;
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG fdec => NULL
  # DEBUG fenc => NULL
  # DEBUG acs => NULL
  # DEBUG dc => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG sa8d => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG p => NULL
  i_ssd_451 = (uint64_t) _557;
  # DEBUG i_ssd => i_ssd_451
  _452 = h_51(D)->param.b_cabac;
  if (_452 != 0)
    goto <bb 54>;
  else
    goto <bb 60>;

  <bb 54>:
  _453 = h_51(D)->mc.memcpy_aligned;
  _454 = &h_51(D)->cabac.f8_bits_encoded;
  _453 (&cabac_tmp.f8_bits_encoded, _454, 464);
  # DEBUG h => h_51(D)
  # DEBUG cb => &cabac_tmp
  # DEBUG i8 => idx_512
  # DEBUG i_mode => i_mode_164
  # DEBUG h => h_51(D)
  # DEBUG idx => _145
  _576 = x264_scan8[_145];
  _577 = _576 + -1;
  _578 = h_51(D)->mb.cache.intra4x4_pred_mode[_577];
  ma_579 = (const int) _578;
  # DEBUG ma => ma_579
  _580 = _576 + -8;
  _581 = h_51(D)->mb.cache.intra4x4_pred_mode[_580];
  mb_582 = (const int) _581;
  # DEBUG mb => mb_582
  _583 = mb_582 + 1;
  _584 = x264_mb_pred_mode4x4_fix[_583];
  _585 = ma_579 + 1;
  _586 = x264_mb_pred_mode4x4_fix[_585];
  _587 = MIN_EXPR <_584, _586>;
  m_588 = (const int) _587;
  # DEBUG m => m_588
  if (m_588 < 0)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 55>:

  <bb 56>:
  # _594 = PHI <2(55), m_588(54)>
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG i_pred => NULL
  _589 = &h_51(D)->dct.luma8x8[idx_512];
  # DEBUG v => _589
  # DEBUG i_count => 128
  # DEBUG nonzero => 0
  __asm__("movq     (%1),    %%mm0 
por      8(%1),   %%mm0 
por      16(%1),  %%mm0 
por      24(%1),  %%mm0 
por      32(%1),  %%mm0 
por      40(%1),  %%mm0 
por      48(%1),  %%mm0 
por      56(%1),  %%mm0 
por      64(%1),  %%mm0 
por      72(%1),  %%mm0 
por      80(%1),  %%mm0 
por      88(%1),  %%mm0 
por      96(%1),  %%mm0 
por      104(%1), %%mm0 
por      112(%1), %%mm0 
por      120(%1), %%mm0 
packsswb %%mm0,   %%mm0 
movd     %%mm0,   %0    
" : "=r" nonzero_590 : "r" _589, "m" MEM[(struct  *)_589]);
  # DEBUG nonzero => nonzero_590
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG i_count => NULL
  # DEBUG nonzero => NULL
  # DEBUG nnz => NULL
  _591 = i_mode_164 + 1;
  _592 = x264_mb_pred_mode4x4_fix[_591];
  i_mode_593 = (int) _592;
  # DEBUG i_mode => i_mode_593
  x264_cabac_mb_intra4x4_pred_mode (&cabac_tmp, _594, i_mode_593);
  if (nonzero_590 != 0)
    goto <bb 57>;
  else
    goto <bb 58>;

  <bb 57>:
  _595 = &h_51(D)->mb.cache.non_zero_count[_576];
  MEM[(uint16_t *)_595] = 257;
  _596 = _145 + 2;
  _597 = x264_scan8[_596];
  _598 = &h_51(D)->mb.cache.non_zero_count[_597];
  MEM[(uint16_t *)_598] = 257;
  block_residual_write_cabac (h_51(D), &cabac_tmp, 5, _145, _589, 64);
  goto <bb 59>;

  <bb 58>:
  _599 = &h_51(D)->mb.cache.non_zero_count[_576];
  MEM[(uint16_t *)_599] = 0;
  _600 = _145 + 2;
  _601 = x264_scan8[_600];
  _602 = &h_51(D)->mb.cache.non_zero_count[_601];
  MEM[(uint16_t *)_602] = 0;

  <bb 59>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i8 => NULL
  # DEBUG i_mode => NULL
  # DEBUG ma => NULL
  # DEBUG mb => NULL
  # DEBUG m => NULL
  # DEBUG nonzero => NULL
  _455 = cabac_tmp.f8_bits_encoded;
  _456 = (long unsigned int) _455;
  _457 = (long unsigned int) _170;
  _458 = _456 * _457;
  _459 = _458 + 128;
  i_bits_460 = _459 >> 8;
  # DEBUG i_bits => i_bits_460
  cabac_tmp ={v} {CLOBBER};
  goto <bb 68>;

  <bb 60>:
  # DEBUG h => h_51(D)
  # DEBUG i8 => idx_512
  # DEBUG i_mode => i_mode_164
  # DEBUG h => h_51(D)
  # DEBUG i4 => _145
  # DEBUG i_mode => i_mode_164
  # DEBUG h => h_51(D)
  # DEBUG idx => _145
  _604 = x264_scan8[_145];
  _605 = _604 + -1;
  _606 = h_51(D)->mb.cache.intra4x4_pred_mode[_605];
  ma_607 = (const int) _606;
  # DEBUG ma => ma_607
  _608 = _604 + -8;
  _609 = h_51(D)->mb.cache.intra4x4_pred_mode[_608];
  mb_610 = (const int) _609;
  # DEBUG mb => mb_610
  _611 = mb_610 + 1;
  _612 = x264_mb_pred_mode4x4_fix[_611];
  _613 = ma_607 + 1;
  _614 = x264_mb_pred_mode4x4_fix[_613];
  _615 = MIN_EXPR <_612, _614>;
  m_616 = (const int) _615;
  # DEBUG m => m_616
  if (m_616 < 0)
    goto <bb 61>;
  else
    goto <bb 62>;

  <bb 61>:

  <bb 62>:
  # _620 = PHI <2(61), m_616(60)>
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  _617 = i_mode_164 + 1;
  _618 = x264_mb_pred_mode4x4_fix[_617];
  _619 = (int) _618;
  if (_619 == _620)
    goto <bb 64>;
  else
    goto <bb 63>;

  <bb 63>:

  <bb 64>:
  # _621 = PHI <1(62), 4(63)>
  # DEBUG h => NULL
  # DEBUG i4 => NULL
  # DEBUG i_mode => NULL
  # DEBUG ma => NULL
  # DEBUG mb => NULL
  # DEBUG m => NULL
  h_51(D)->out.bs.i_bits_encoded = _621;
  _622 = h_51(D)->zigzagf.interleave_8x8_cavlc;
  _623 = &h_51(D)->dct.luma8x8[idx_512];
  _624 = &h_51(D)->dct.luma4x4[_145];
  _622 (_624, _623);
  # DEBUG i4 => 0
  # DEBUG i4 => 0
  pretmp_657 = &h_51(D)->out.bs;

  <bb 65>:
  # i4_124 = PHI <i4_633(66), 0(64)>
  # ivtmp_516 = PHI <ivtmp_509(66), 4(64)>
  # DEBUG i4 => i4_124
  _626 = i4_124 + _145;
  _627 = x264_scan8[_626];
  _628 = &h_51(D)->dct.luma4x4[_626];
  # DEBUG v => _628
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_629 : "r" _628, "m" MEM[(struct  *)_628]);
  # DEBUG count => count_629
  _630 = count_629 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _631 = (unsigned char) _630;
  h_51(D)->mb.cache.non_zero_count[_627] = _631;
  block_residual_write_cavlc (h_51(D), pretmp_657, 2, _626, _628, 16);
  i4_633 = i4_124 + 1;
  # DEBUG i4 => i4_633
  # DEBUG i4 => i4_633
  ivtmp_509 = ivtmp_516 - 1;
  if (ivtmp_509 != 0)
    goto <bb 66>;
  else
    goto <bb 67>;

  <bb 66>:
  goto <bb 65>;

  <bb 67>:
  _634 = h_51(D)->out.bs.i_bits_encoded;
  # DEBUG h => NULL
  # DEBUG i8 => NULL
  # DEBUG i_mode => NULL
  # DEBUG count => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG i4 => NULL
  _462 = _170 * _634;
  i_bits_463 = (uint64_t) _462;
  # DEBUG i_bits => i_bits_463

  <bb 68>:
  # i_bits_465 = PHI <i_bits_460(59), i_bits_463(67)>
  # DEBUG i_bits => i_bits_465
  _464 = i_ssd_451 << 8;
  i_best_466 = _464 + i_bits_465;
  # DEBUG h => NULL
  # DEBUG i_lambda2 => NULL
  # DEBUG i8 => NULL
  # DEBUG i_mode => NULL
  # DEBUG i_bits => NULL
  # DEBUG i_ssd => NULL
  # DEBUG i_satd => NULL
  if (i_best_466 < i_best_492)
    goto <bb 69>;
  else
    goto <bb 78>;

  <bb 69>:
  a_55(D)->i_predict8x8[idx_512] = i_mode_164;
  # DEBUG i_best => NULL
  pels_h_174 = MEM[(uint64_t *)p_dst_by_156 + 224B];
  # DEBUG pels_h => pels_h_174
  if (x_147 == 0)
    goto <bb 71>;
  else
    goto <bb 70>;

  <bb 70>:
  # DEBUG j => 0
  goto <bb 76>;

  <bb 71>:

  <bb 72>:
  # j_511 = PHI <0(71), j_182(74)>
  # ivtmp_534 = PHI <7(71), ivtmp_524(74)>
  # DEBUG j => j_511
  _176 = j_511 * 32;
  _177 = _176 + 7;
  _178 = (sizetype) _177;
  _179 = p_dst_by_156 + _178;
  _180 = *_179;
  pels_v[j_511] = _180;
  j_182 = j_511 + 1;
  # DEBUG j => j_182
  # DEBUG j => j_182
  ivtmp_524 = ivtmp_534 - 1;
  if (ivtmp_524 != 0)
    goto <bb 74>;
  else
    goto <bb 73>;

  <bb 73>:
  goto <bb 70>;

  <bb 74>:
  goto <bb 72>;

  <bb 75>:

  <bb 76>:
  # j_152 = PHI <j_190(75), 0(70)>
  # ivtmp_562 = PHI <ivtmp_535(75), 3(70)>
  # DEBUG j => j_152
  _184 = _145 + j_152;
  _185 = _184 + 1;
  _186 = x264_scan8[_185];
  _187 = h_51(D)->mb.cache.non_zero_count[_186];
  _188 = (int) _187;
  i_nnz[j_152] = _188;
  j_190 = j_152 + 1;
  # DEBUG j => j_190
  # DEBUG j => j_190
  ivtmp_535 = ivtmp_562 - 1;
  if (ivtmp_535 != 0)
    goto <bb 75>;
  else
    goto <bb 77>;

  <bb 77>:

  <bb 78>:
  # i_best_14 = PHI <i_best_492(44), i_best_492(68), i_best_466(77)>
  # pels_h_21 = PHI <pels_h_36(44), pels_h_36(68), pels_h_174(77)>
  # DEBUG pels_h => pels_h_21
  # DEBUG i_best => i_best_14
  i_191 = i_20 + 1;
  # DEBUG i => i_191
  # DEBUG pels_h => pels_h_21
  # DEBUG i_best => i_best_14
  # DEBUG i => i_191
  i_max.146_163 = i_max;
  if (i_max.146_163 > i_191)
    goto <bb 80>;
  else
    goto <bb 79>;

  <bb 79>:
  # pels_h_383 = PHI <pels_h_21(78)>
  goto <bb 81>;

  <bb 80>:
  goto <bb 44>;

  <bb 81>:
  # pels_h_320 = PHI <pels_h_383(79), 0(42)>
  MEM[(uint64_t *)p_dst_by_156 + 224B] = pels_h_320;
  if (x_147 == 0)
    goto <bb 83>;
  else
    goto <bb 82>;

  <bb 82>:
  # DEBUG j => 0
  goto <bb 88>;

  <bb 83>:

  <bb 84>:
  # j_328 = PHI <0(83), j_201(86)>
  # ivtmp_661 = PHI <7(83), ivtmp_567(86)>
  # DEBUG j => j_328
  _195 = j_328 * 32;
  _196 = _195 + 7;
  _197 = (sizetype) _196;
  _198 = p_dst_by_156 + _197;
  _199 = pels_v[j_328];
  *_198 = _199;
  j_201 = j_328 + 1;
  # DEBUG j => j_201
  # DEBUG j => j_201
  ivtmp_567 = ivtmp_661 - 1;
  if (ivtmp_567 != 0)
    goto <bb 86>;
  else
    goto <bb 85>;

  <bb 85>:
  goto <bb 82>;

  <bb 86>:
  goto <bb 84>;

  <bb 87>:

  <bb 88>:
  # j_340 = PHI <j_208(87), 0(82)>
  # ivtmp_533 = PHI <ivtmp_560(87), 3(82)>
  # DEBUG j => j_340
  _202 = _145 + j_340;
  _203 = _202 + 1;
  _204 = x264_scan8[_203];
  _205 = i_nnz[j_340];
  _206 = (unsigned char) _205;
  h_51(D)->mb.cache.non_zero_count[_204] = _206;
  j_208 = j_340 + 1;
  # DEBUG j => j_208
  # DEBUG j => j_208
  ivtmp_560 = ivtmp_533 - 1;
  if (ivtmp_560 != 0)
    goto <bb 87>;
  else
    goto <bb 89>;

  <bb 89>:
  _209 = a_55(D)->i_predict8x8[idx_512];
  _210 = y_148 * 2;
  _211 = x_147 * 2;
  # DEBUG h => h_51(D)
  # DEBUG x => _211
  # DEBUG y => _210
  # DEBUG i_mode => _209
  _146 = _211 + 12;
  _84 = _210 * 8;
  _256 = _84 + _146;
  cache_257 = &h_51(D)->mb.cache.intra4x4_pred_mode[_256];
  # DEBUG cache => cache_257
  _258 = (signed char) _209;
  MEM[(int8_t *)cache_257 + 9B] = _258;
  MEM[(int8_t *)cache_257 + 8B] = _258;
  MEM[(int8_t *)cache_257 + 1B] = _258;
  MEM[(int8_t *)h_51(D)].mb.cache.intra4x4_pred_mode[_256] = _258;
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG i_mode => NULL
  # DEBUG cache => NULL
  pels_v ={v} {CLOBBER};
  i_nnz ={v} {CLOBBER};
  idx_215 = idx_512 + 1;
  # DEBUG idx => idx_215
  # DEBUG idx => idx_215
  ivtmp_505 = ivtmp_507 - 1;
  if (ivtmp_505 != 0)
    goto <bb 90>;
  else
    goto <bb 91>;

  <bb 90>:
  goto <bb 42>;

  <bb 91>:
  edge ={v} {CLOBBER};

  <bb 92>:
  _217 = h_51(D)->mb.i_neighbour;
  predict_8x8chroma_mode_available (_217, &predict_mode, &i_max);
  i_max.146_219 = i_max;
  if (i_max.146_219 > 1)
    goto <bb 94>;
  else
    goto <bb 93>;

  <bb 93>:
  goto <bb 111>;

  <bb 94>:
  _220 = a_55(D)->i_satd_i8x8chroma;
  _221 = _220 * 5;
  i_thresh_222 = _221 / 4;
  # DEBUG i_thresh => i_thresh_222
  # DEBUG j => 0
  # DEBUG i => 0
  # DEBUG j => 0
  # DEBUG i => 0

  <bb 95>:
  # j_491 = PHI <j_228(99), 0(94)>
  # j_307 = PHI <j_6(99), 0(94)>
  # DEBUG j => j_307
  # DEBUG i => j_491
  _223 = a_55(D)->i_satd_i8x8chroma_dir[j_491];
  if (i_thresh_222 > _223)
    goto <bb 96>;
  else
    goto <bb 98>;

  <bb 96>:
  _224 = predict_mode[j_491];
  _225 = a_55(D)->i_predict8x8chroma;
  if (_224 != _225)
    goto <bb 97>;
  else
    goto <bb 98>;

  <bb 97>:
  j_226 = j_307 + 1;
  # DEBUG j => j_226
  predict_mode[j_307] = _224;

  <bb 98>:
  # j_6 = PHI <j_307(95), j_307(96), j_226(97)>
  # DEBUG j => j_6
  j_228 = j_491 + 1;
  # DEBUG i => j_228
  # DEBUG j => j_6
  # DEBUG i => j_228
  if (i_max.146_219 > j_228)
    goto <bb 99>;
  else
    goto <bb 100>;

  <bb 99>:
  goto <bb 95>;

  <bb 100>:
  # j_385 = PHI <j_6(98)>
  i_max = j_385;
  if (j_385 != 0)
    goto <bb 101>;
  else
    goto <bb 93>;

  <bb 101>:
  _230 = h_51(D)->mb.i_chroma_qp;
  i_chroma_lambda_231 = x264_lambda2_tab[_230];
  # DEBUG i_chroma_lambda => i_chroma_lambda_231
  _232 = a_55(D)->i_predict8x8chroma;
  i_best_234 = x264_rd_cost_i8x8_chroma (h_51(D), i_chroma_lambda_231, _232, 0);
  # DEBUG i_best => i_best_234
  # DEBUG i => 0
  # DEBUG i_best => i_best_234
  # DEBUG i => 0
  i_max.146_308 = i_max;
  if (i_max.146_308 > 0)
    goto <bb 103>;
  else
    goto <bb 102>;

  <bb 102>:
  _252 = a_55(D)->i_predict8x8chroma;
  h_51(D)->mb.i_chroma_pred_mode = _252;
  goto <bb 111>;

  <bb 103>:

  <bb 104>:
  # i_8 = PHI <0(103), i_251(110)>
  # i_best_306 = PHI <i_best_234(103), i_best_16(110)>
  # DEBUG i_best => i_best_306
  # DEBUG i => i_8
  i_mode_236 = predict_mode[i_8];
  # DEBUG i_mode => i_mode_236
  _237 = h_51(D)->mb.b_lossless;
  if (_237 != 0)
    goto <bb 105>;
  else
    goto <bb 106>;

  <bb 105>:
  x264_predict_lossless_8x8_chroma (h_51(D), i_mode_236);
  goto <bb 107>;

  <bb 106>:
  _239 = h_51(D)->predict_8x8c[i_mode_236];
  _240 = h_51(D)->mb.pic.p_fdec[1];
  _239 (_240);
  _242 = h_51(D)->predict_8x8c[i_mode_236];
  _243 = h_51(D)->mb.pic.p_fdec[2];
  _242 (_243);

  <bb 107>:
  _245 = h_51(D)->mb.i_cbp_chroma;
  _246 = _245 != 0;
  _247 = (int) _246;
  i_best_249 = x264_rd_cost_i8x8_chroma (h_51(D), i_chroma_lambda_231, i_mode_236, _247);
  # DEBUG i_satd => i_best_249
  if (i_best_249 < i_best_306)
    goto <bb 108>;
  else
    goto <bb 109>;

  <bb 108>:
  # DEBUG i_best => i_best_249
  a_55(D)->i_predict8x8chroma = i_mode_236;

  <bb 109>:
  # i_best_16 = PHI <i_best_306(107), i_best_249(108)>
  # DEBUG i_best => i_best_16
  i_251 = i_8 + 1;
  # DEBUG i => i_251
  # DEBUG i_best => i_best_16
  # DEBUG i => i_251
  i_max.146_235 = i_max;
  if (i_max.146_235 > i_251)
    goto <bb 110>;
  else
    goto <bb 102>;

  <bb 110>:
  goto <bb 104>;

  <bb 111>:
  i_max ={v} {CLOBBER};
  predict_mode ={v} {CLOBBER};
  return;

}



;; Function x264_rd_cost_part (x264_rd_cost_part, funcdef_no=182, decl_uid=7946, cgraph_uid=182, symbol_order=242)


Analyzing loop at encoder/rdo.c:76
encoder/rdo.c:76:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:76:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:76:5: note: ===== analyze_loop_nest_1 =====
encoder/rdo.c:76:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:76:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 18
  exit condition [x_160 + 1, + , 1](no_overflow) < max_x_164
  bounds on difference of bases: 0 ... 536871165
Applying pattern match.pd:442, generic-match.c:3412
Applying pattern match.pd:628, generic-match.c:1309
  result:
    # of iterations ((unsigned int) max_x_164 - (unsigned int) x_160) - 1, bounded by 536871165
Applying pattern match.pd:475, generic-match.c:3649
encoder/rdo.c:76:5: note: Symbolic number of iterations is (unsigned int) max_x_164 - (unsigned int) x_160
encoder/rdo.c:76:5: note: not vectorized: control flow in loop.
encoder/rdo.c:76:5: note: bad loop form.

Analyzing loop at encoder/rdo.c:77
encoder/rdo.c:77:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:77:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:77:9: note: === get_loop_niters ===
Applying pattern match.pd:475, generic-match.c:3649
encoder/rdo.c:77:9: note: Symbolic number of iterations is (unsigned int) max_x_164 - (unsigned int) x_160
encoder/rdo.c:77:9: note: === vect_analyze_data_refs ===
Creating dr for h_11(D)->mb.pic.fenc_satd[y_665][x_668]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_11(D)
	offset from base address: (ssizetype) (((sizetype) x_160 + (sizetype) y_665 * 4) * 4)
	constant offset from base address: 15488
	step: 4
	aligned to: 4
	base_object: *h_11(D)
	Access function 0: {x_160, +, 1}_18
	Access function 1: y_665
	Access function 2: 29184
	Access function 3: 7680
	Access function 4: 87040
encoder/rdo.c:77:9: note: got vectype for stmt: _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
vector(4) int
encoder/rdo.c:77:9: note: === vect_analyze_scalar_cycles ===
encoder/rdo.c:77:9: note: Analyze phi: x_668 = PHI <x_160(11), x_174(13)>

encoder/rdo.c:77:9: note: Access function of PHI: {x_160, +, 1}_18
encoder/rdo.c:77:9: note: step: 1,  init: x_160
encoder/rdo.c:77:9: note: Detected induction.
encoder/rdo.c:77:9: note: Analyze phi: satd_662 = PHI <satd_196(11), satd_173(13)>

encoder/rdo.c:77:9: note: Access function of PHI: {satd_196, +, _171}_18
encoder/rdo.c:77:9: note: step: _171,  init: satd_196
encoder/rdo.c:77:9: note: step unknown.
encoder/rdo.c:77:9: note: Analyze phi: satd_662 = PHI <satd_196(11), satd_173(13)>

encoder/rdo.c:77:9: note: detected reduction: satd_173 = _171 + satd_662;

encoder/rdo.c:77:9: note: Detected reduction.
encoder/rdo.c:77:9: note: === vect_pattern_recog ===
encoder/rdo.c:77:9: note: vect_is_simple_use: operand _171
encoder/rdo.c:77:9: note: def_stmt: _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
encoder/rdo.c:77:9: note: type of def: 3.
encoder/rdo.c:77:9: note: vect_is_simple_use: operand _171
encoder/rdo.c:77:9: note: def_stmt: _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
encoder/rdo.c:77:9: note: type of def: 3.
encoder/rdo.c:77:9: note: vect_is_simple_use: operand _171
encoder/rdo.c:77:9: note: def_stmt: _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
encoder/rdo.c:77:9: note: type of def: 3.
encoder/rdo.c:77:9: note: === vect_analyze_data_ref_accesses ===
encoder/rdo.c:77:9: note: === vect_mark_stmts_to_be_vectorized ===
encoder/rdo.c:77:9: note: init: phi relevant? x_668 = PHI <x_160(11), x_174(13)>
encoder/rdo.c:77:9: note: init: phi relevant? satd_662 = PHI <satd_196(11), satd_173(13)>
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG satd => satd_662
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG x => x_668
encoder/rdo.c:77:9: note: init: stmt relevant? _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
encoder/rdo.c:77:9: note: init: stmt relevant? satd_173 = _171 + satd_662;
encoder/rdo.c:77:9: note: vec_stmt_relevant_p: used out of loop.
encoder/rdo.c:77:9: note: mark relevant 0, live 1.
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG satd => satd_173
encoder/rdo.c:77:9: note: init: stmt relevant? x_174 = x_668 + 1;
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG x => x_174
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG satd => satd_173
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG x => x_174
encoder/rdo.c:77:9: note: init: stmt relevant? if (max_x_164 > x_174)
encoder/rdo.c:77:9: note: worklist: examine stmt: satd_173 = _171 + satd_662;
encoder/rdo.c:77:9: note: vect_is_simple_use: operand _171
encoder/rdo.c:77:9: note: def_stmt: _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
encoder/rdo.c:77:9: note: type of def: 3.
encoder/rdo.c:77:9: note: mark relevant 3, live 0.
encoder/rdo.c:77:9: note: vect_is_simple_use: operand satd_662
encoder/rdo.c:77:9: note: def_stmt: satd_662 = PHI <satd_196(11), satd_173(13)>
encoder/rdo.c:77:9: note: type of def: 5.
encoder/rdo.c:77:9: note: mark relevant 3, live 0.
encoder/rdo.c:77:9: note: worklist: examine stmt: satd_662 = PHI <satd_196(11), satd_173(13)>
encoder/rdo.c:77:9: note: vect_is_simple_use: operand satd_196
encoder/rdo.c:77:9: note: def_stmt: satd_196 = PHI <0(18), satd_643(17)>
encoder/rdo.c:77:9: note: type of def: 2.
encoder/rdo.c:77:9: note: def_stmt is out of loop.
encoder/rdo.c:77:9: note: vect_is_simple_use: operand satd_173
encoder/rdo.c:77:9: note: def_stmt: satd_173 = _171 + satd_662;
encoder/rdo.c:77:9: note: type of def: 5.
encoder/rdo.c:77:9: note: reduc-stmt defining reduc-phi in the same nest.
encoder/rdo.c:77:9: note: worklist: examine stmt: _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
encoder/rdo.c:77:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
  stmt_b: _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
(analyze_overlapping_iterations 
  (chrec_a = {x_160, +, 1}_18)
  (chrec_b = {x_160, +, 1}_18)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = y_665)
  (chrec_b = y_665)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 29184)
  (chrec_b = 29184)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 7680)
  (chrec_b = 7680)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 87040)
  (chrec_b = 87040)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/rdo.c:77:9: note: === vect_determine_vectorization_factor ===
encoder/rdo.c:77:9: note: ==> examining phi: x_668 = PHI <x_160(11), x_174(13)>

encoder/rdo.c:77:9: note: ==> examining phi: satd_662 = PHI <satd_196(11), satd_173(13)>

encoder/rdo.c:77:9: note: get vectype for scalar type:  int
encoder/rdo.c:77:9: note: vectype: vector(4) int
encoder/rdo.c:77:9: note: nunits = 4
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_662

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_668

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];

encoder/rdo.c:77:9: note: get vectype for scalar type:  int
encoder/rdo.c:77:9: note: vectype: vector(4) int
encoder/rdo.c:77:9: note: nunits = 4
encoder/rdo.c:77:9: note: ==> examining statement: satd_173 = _171 + satd_662;

encoder/rdo.c:77:9: note: get vectype for scalar type:  int
encoder/rdo.c:77:9: note: vectype: vector(4) int
encoder/rdo.c:77:9: note: get vectype for scalar type:  int
encoder/rdo.c:77:9: note: vectype: vector(4) int
encoder/rdo.c:77:9: note: nunits = 4
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_173

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: x_174 = x_668 + 1;

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_174

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_173

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_174

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: if (max_x_164 > x_174)

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: vectorization factor = 4
encoder/rdo.c:77:9: note: === vect_analyze_data_refs_alignment ===
encoder/rdo.c:77:9: note: vect_compute_data_ref_alignment:
encoder/rdo.c:77:9: note: Unknown alignment for access: h_11(D)->mb.pic.fenc_satd[y_665][x_668]
encoder/rdo.c:77:9: note: === vect_prune_runtime_alias_test_list ===
encoder/rdo.c:77:9: note: === vect_enhance_data_refs_alignment ===
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:77:9: note: Unknown misalignment, is_packed = 0
encoder/rdo.c:77:9: note: vect_can_advance_ivs_p:
encoder/rdo.c:77:9: note: Analyze phi: x_668 = PHI <x_160(11), x_174(13)>

encoder/rdo.c:77:9: note: Analyze phi: satd_662 = PHI <satd_196(11), satd_173(13)>

encoder/rdo.c:77:9: note: reduc phi. skip.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:77:9: note: Disable peeling, max peels reached: 3
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:77:9: note: Vectorizing an unaligned access.
encoder/rdo.c:77:9: note: === vect_analyze_slp ===
encoder/rdo.c:77:9: note: === vect_make_slp_decision ===
encoder/rdo.c:77:9: note: === vect_detect_hybrid_slp ===
encoder/rdo.c:77:9: note: === vect_analyze_loop_operations ===
encoder/rdo.c:77:9: note: examining phi: x_668 = PHI <x_160(11), x_174(13)>

encoder/rdo.c:77:9: note: examining phi: satd_662 = PHI <satd_196(11), satd_173(13)>

encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_662
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_668
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
encoder/rdo.c:77:9: note: num. args = 4 (not unary/binary/ternary op).
encoder/rdo.c:77:9: note: vect_is_simple_use: operand h_11(D)->mb.pic.fenc_satd[y_665][x_668]
encoder/rdo.c:77:9: note: not ssa-name.
encoder/rdo.c:77:9: note: use not simple.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:77:9: note: vect_model_load_cost: unaligned supported by hardware.
encoder/rdo.c:77:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
encoder/rdo.c:77:9: note: ==> examining statement: satd_173 = _171 + satd_662;
encoder/rdo.c:77:9: note: vect_is_simple_use: operand _171
encoder/rdo.c:77:9: note: def_stmt: _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
encoder/rdo.c:77:9: note: type of def: 3.
encoder/rdo.c:77:9: note: vect_is_simple_use: operand satd_662
encoder/rdo.c:77:9: note: def_stmt: satd_662 = PHI <satd_196(11), satd_173(13)>
encoder/rdo.c:77:9: note: type of def: 5.
encoder/rdo.c:77:9: note: detected reduction: satd_173 = _171 + satd_662;

encoder/rdo.c:77:9: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 1, prologue_cost = 1, epilogue_cost = 5 .
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_173
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: x_174 = x_668 + 1;
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_174
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_173
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_174
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: if (max_x_164 > x_174)
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: === vect_update_slp_costs_according_to_vf ===
encoder/rdo.c:77:9: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
encoder/rdo.c:77:9: note: Cost model analysis: 
  Vector inside of loop cost: 3
  Vector prologue cost: 7
  Vector epilogue cost: 9
  Scalar iteration cost: 2
  Scalar outside cost: 6
  Vector outside cost: 16
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 7
encoder/rdo.c:77:9: note:   Runtime profitability threshold = 6
encoder/rdo.c:77:9: note:   Static estimate profitability threshold = 6
encoder/rdo.c:77:9: note: not vectorized: estimated iteration count too small.
encoder/rdo.c:77:9: note: not vectorized: estimated iteration count smaller than specified loop bound parameter or minimum profitable iterations (whichever is more conservative).
encoder/rdo.c:77:9: note: bad operation or unsupported loop bound.

Analyzing loop at encoder/cabac.c:1071
encoder/cabac.c:1071:5: note: ===== analyze_loop_nest =====
encoder/cabac.c:1071:5: note: === vect_analyze_loop_form ===
encoder/cabac.c:1071:5: note: ===== analyze_loop_nest_1 =====
encoder/cabac.c:1071:5: note: === vect_analyze_loop_form ===
encoder/cabac.c:1071:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 26
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cabac.c:1071:5: note: not vectorized: control flow in loop.
encoder/cabac.c:1071:5: note: bad loop form.

Analyzing loop at encoder/cabac.c:1084
encoder/cabac.c:1084:17: note: ===== analyze_loop_nest =====
encoder/cabac.c:1084:17: note: === vect_analyze_loop_form ===
encoder/cabac.c:1084:17: note: === get_loop_niters ===
encoder/cabac.c:1084:17: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[_391]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: (ssizetype) ((sizetype) (i8_349 * 4) * 4)
	constant offset from base address: 0
	step: 4
	aligned to: 16
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {pretmp_726, +, 1}_26
Creating dr for MEM[(uint64_t *)_393]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (int16_t[16] *) h_11(D) + (sizetype) (i8_349 * 4) * 32
	offset from base address: 0
	constant offset from base address: 10112
	step: 32
	aligned to: 128
	base_object: MEM[(uint64_t *)(int16_t[16] *) h_11(D) + (sizetype) (i8_349 * 4) * 32]
	Access function 0: {10112B, +, 32}_26
Creating dr for MEM[(uint64_t *)_393 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (int16_t[16] *) h_11(D) + (sizetype) (i8_349 * 4) * 32
	offset from base address: 0
	constant offset from base address: 10120
	step: 32
	aligned to: 128
	base_object: MEM[(uint64_t *)(int16_t[16] *) h_11(D) + (sizetype) (i8_349 * 4) * 32]
	Access function 0: {10120B, +, 32}_26
Creating dr for MEM[(uint64_t *)_393 + 16B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (int16_t[16] *) h_11(D) + (sizetype) (i8_349 * 4) * 32
	offset from base address: 0
	constant offset from base address: 10128
	step: 32
	aligned to: 128
	base_object: MEM[(uint64_t *)(int16_t[16] *) h_11(D) + (sizetype) (i8_349 * 4) * 32]
	Access function 0: {10128B, +, 32}_26
Creating dr for MEM[(uint64_t *)_393 + 24B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: (int16_t[16] *) h_11(D) + (sizetype) (i8_349 * 4) * 32
	offset from base address: 0
	constant offset from base address: 10136
	step: 32
	aligned to: 128
	base_object: MEM[(uint64_t *)(int16_t[16] *) h_11(D) + (sizetype) (i8_349 * 4) * 32]
	Access function 0: {10136B, +, 32}_26
Creating dr for h_11(D)->mb.cache.non_zero_count[_392]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *h_11(D)
	Access function 0: scev_not_known;
	Access function 1: 384
	Access function 2: 65024
	Access function 3: 87040
encoder/cabac.c:1084:17: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:1084:17: note: bad data references.

Analyzing loop at encoder/cavlc.c:663
encoder/cavlc.c:663:5: note: ===== analyze_loop_nest =====
encoder/cavlc.c:663:5: note: === vect_analyze_loop_form ===
encoder/cavlc.c:663:5: note: ===== analyze_loop_nest_1 =====
encoder/cavlc.c:663:5: note: === vect_analyze_loop_form ===
encoder/cavlc.c:663:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 29
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:663:5: note: not vectorized: control flow in loop.
encoder/cavlc.c:663:5: note: bad loop form.

Analyzing loop at encoder/cavlc.c:277
encoder/cavlc.c:277:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:277:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:277:13: note: === get_loop_niters ===
encoder/cavlc.c:277:13: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[_496]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: (ssizetype) ((sizetype) (i8_504 * 4) * 4)
	constant offset from base address: 0
	step: 4
	aligned to: 16
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {pretmp_716, +, 1}_29
encoder/cavlc.c:277:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:277:13: note: bad data references.

Analyzing loop at encoder/rdo.c:91
encoder/rdo.c:91:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:91:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:91:5: note: ===== analyze_loop_nest_1 =====
encoder/rdo.c:91:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:91:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 20
  exit condition [x_286 + 1, + , 1](no_overflow) < max_x_289
  bounds on difference of bases: 0 ... 268435455
Applying pattern match.pd:442, generic-match.c:3412
Applying pattern match.pd:628, generic-match.c:1309
  result:
    # of iterations ((unsigned int) max_x_289 - (unsigned int) x_286) - 1, bounded by 268435455
Applying pattern match.pd:475, generic-match.c:3649
encoder/rdo.c:91:5: note: Symbolic number of iterations is (unsigned int) max_x_289 - (unsigned int) x_286
encoder/rdo.c:91:5: note: not vectorized: control flow in loop.
encoder/rdo.c:91:5: note: bad loop form.

Analyzing loop at encoder/rdo.c:92
encoder/rdo.c:92:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:92:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:92:9: note: === get_loop_niters ===
Applying pattern match.pd:475, generic-match.c:3649
encoder/rdo.c:92:9: note: Symbolic number of iterations is (unsigned int) max_x_289 - (unsigned int) x_286
encoder/rdo.c:92:9: note: === vect_analyze_data_refs ===
Creating dr for h_11(D)->mb.pic.fenc_sa8d[y_530][x_527]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_11(D)
	offset from base address: (ssizetype) (((sizetype) x_286 + (sizetype) y_530 * 2) * 4)
	constant offset from base address: 15556
	step: 4
	aligned to: 4
	base_object: *h_11(D)
	Access function 0: {x_286, +, 1}_20
	Access function 1: y_530
	Access function 2: 29728
	Access function 3: 7680
	Access function 4: 87040
encoder/rdo.c:92:9: note: got vectype for stmt: _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
vector(4) int
encoder/rdo.c:92:9: note: === vect_analyze_scalar_cycles ===
encoder/rdo.c:92:9: note: Analyze phi: x_527 = PHI <x_286(46), x_298(48)>

encoder/rdo.c:92:9: note: Access function of PHI: {x_286, +, 1}_20
encoder/rdo.c:92:9: note: step: 1,  init: x_286
encoder/rdo.c:92:9: note: Detected induction.
encoder/rdo.c:92:9: note: Analyze phi: sa8d_355 = PHI <sa8d_352(46), sa8d_297(48)>

encoder/rdo.c:92:9: note: Access function of PHI: {sa8d_352, +, _295}_20
encoder/rdo.c:92:9: note: step: _295,  init: sa8d_352
encoder/rdo.c:92:9: note: step unknown.
encoder/rdo.c:92:9: note: Analyze phi: sa8d_355 = PHI <sa8d_352(46), sa8d_297(48)>

encoder/rdo.c:92:9: note: detected reduction: sa8d_297 = _295 + sa8d_355;

encoder/rdo.c:92:9: note: Detected reduction.
encoder/rdo.c:92:9: note: === vect_pattern_recog ===
encoder/rdo.c:92:9: note: vect_is_simple_use: operand _295
encoder/rdo.c:92:9: note: def_stmt: _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
encoder/rdo.c:92:9: note: type of def: 3.
encoder/rdo.c:92:9: note: vect_is_simple_use: operand _295
encoder/rdo.c:92:9: note: def_stmt: _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
encoder/rdo.c:92:9: note: type of def: 3.
encoder/rdo.c:92:9: note: vect_is_simple_use: operand _295
encoder/rdo.c:92:9: note: def_stmt: _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
encoder/rdo.c:92:9: note: type of def: 3.
encoder/rdo.c:92:9: note: === vect_analyze_data_ref_accesses ===
encoder/rdo.c:92:9: note: === vect_mark_stmts_to_be_vectorized ===
encoder/rdo.c:92:9: note: init: phi relevant? x_527 = PHI <x_286(46), x_298(48)>
encoder/rdo.c:92:9: note: init: phi relevant? sa8d_355 = PHI <sa8d_352(46), sa8d_297(48)>
encoder/rdo.c:92:9: note: init: stmt relevant? # DEBUG sa8d => sa8d_355
encoder/rdo.c:92:9: note: init: stmt relevant? # DEBUG x => x_527
encoder/rdo.c:92:9: note: init: stmt relevant? _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
encoder/rdo.c:92:9: note: init: stmt relevant? sa8d_297 = _295 + sa8d_355;
encoder/rdo.c:92:9: note: vec_stmt_relevant_p: used out of loop.
encoder/rdo.c:92:9: note: mark relevant 0, live 1.
encoder/rdo.c:92:9: note: init: stmt relevant? # DEBUG sa8d => sa8d_297
encoder/rdo.c:92:9: note: init: stmt relevant? x_298 = x_527 + 1;
encoder/rdo.c:92:9: note: init: stmt relevant? # DEBUG x => x_298
encoder/rdo.c:92:9: note: init: stmt relevant? # DEBUG sa8d => sa8d_297
encoder/rdo.c:92:9: note: init: stmt relevant? # DEBUG x => x_298
encoder/rdo.c:92:9: note: init: stmt relevant? if (max_x_289 > x_298)
encoder/rdo.c:92:9: note: worklist: examine stmt: sa8d_297 = _295 + sa8d_355;
encoder/rdo.c:92:9: note: vect_is_simple_use: operand _295
encoder/rdo.c:92:9: note: def_stmt: _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
encoder/rdo.c:92:9: note: type of def: 3.
encoder/rdo.c:92:9: note: mark relevant 3, live 0.
encoder/rdo.c:92:9: note: vect_is_simple_use: operand sa8d_355
encoder/rdo.c:92:9: note: def_stmt: sa8d_355 = PHI <sa8d_352(46), sa8d_297(48)>
encoder/rdo.c:92:9: note: type of def: 5.
encoder/rdo.c:92:9: note: mark relevant 3, live 0.
encoder/rdo.c:92:9: note: worklist: examine stmt: sa8d_355 = PHI <sa8d_352(46), sa8d_297(48)>
encoder/rdo.c:92:9: note: vect_is_simple_use: operand sa8d_352
encoder/rdo.c:92:9: note: def_stmt: sa8d_352 = PHI <0(53), sa8d_354(52)>
encoder/rdo.c:92:9: note: type of def: 2.
encoder/rdo.c:92:9: note: def_stmt is out of loop.
encoder/rdo.c:92:9: note: vect_is_simple_use: operand sa8d_297
encoder/rdo.c:92:9: note: def_stmt: sa8d_297 = _295 + sa8d_355;
encoder/rdo.c:92:9: note: type of def: 5.
encoder/rdo.c:92:9: note: reduc-stmt defining reduc-phi in the same nest.
encoder/rdo.c:92:9: note: worklist: examine stmt: _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
encoder/rdo.c:92:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
  stmt_b: _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
(analyze_overlapping_iterations 
  (chrec_a = {x_286, +, 1}_20)
  (chrec_b = {x_286, +, 1}_20)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = y_530)
  (chrec_b = y_530)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 29728)
  (chrec_b = 29728)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 7680)
  (chrec_b = 7680)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 87040)
  (chrec_b = 87040)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/rdo.c:92:9: note: === vect_determine_vectorization_factor ===
encoder/rdo.c:92:9: note: ==> examining phi: x_527 = PHI <x_286(46), x_298(48)>

encoder/rdo.c:92:9: note: ==> examining phi: sa8d_355 = PHI <sa8d_352(46), sa8d_297(48)>

encoder/rdo.c:92:9: note: get vectype for scalar type:  int
encoder/rdo.c:92:9: note: vectype: vector(4) int
encoder/rdo.c:92:9: note: nunits = 4
encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG sa8d => sa8d_355

encoder/rdo.c:92:9: note: skip.
encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG x => x_527

encoder/rdo.c:92:9: note: skip.
encoder/rdo.c:92:9: note: ==> examining statement: _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];

encoder/rdo.c:92:9: note: get vectype for scalar type:  int
encoder/rdo.c:92:9: note: vectype: vector(4) int
encoder/rdo.c:92:9: note: nunits = 4
encoder/rdo.c:92:9: note: ==> examining statement: sa8d_297 = _295 + sa8d_355;

encoder/rdo.c:92:9: note: get vectype for scalar type:  int
encoder/rdo.c:92:9: note: vectype: vector(4) int
encoder/rdo.c:92:9: note: get vectype for scalar type:  int
encoder/rdo.c:92:9: note: vectype: vector(4) int
encoder/rdo.c:92:9: note: nunits = 4
encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG sa8d => sa8d_297

encoder/rdo.c:92:9: note: skip.
encoder/rdo.c:92:9: note: ==> examining statement: x_298 = x_527 + 1;

encoder/rdo.c:92:9: note: skip.
encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG x => x_298

encoder/rdo.c:92:9: note: skip.
encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG sa8d => sa8d_297

encoder/rdo.c:92:9: note: skip.
encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG x => x_298

encoder/rdo.c:92:9: note: skip.
encoder/rdo.c:92:9: note: ==> examining statement: if (max_x_289 > x_298)

encoder/rdo.c:92:9: note: skip.
encoder/rdo.c:92:9: note: vectorization factor = 4
encoder/rdo.c:92:9: note: === vect_analyze_data_refs_alignment ===
encoder/rdo.c:92:9: note: vect_compute_data_ref_alignment:
encoder/rdo.c:92:9: note: Unknown alignment for access: h_11(D)->mb.pic.fenc_sa8d[y_530][x_527]
encoder/rdo.c:92:9: note: === vect_prune_runtime_alias_test_list ===
encoder/rdo.c:92:9: note: === vect_enhance_data_refs_alignment ===
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:92:9: note: Unknown misalignment, is_packed = 0
encoder/rdo.c:92:9: note: vect_can_advance_ivs_p:
encoder/rdo.c:92:9: note: Analyze phi: x_527 = PHI <x_286(46), x_298(48)>

encoder/rdo.c:92:9: note: Analyze phi: sa8d_355 = PHI <sa8d_352(46), sa8d_297(48)>

encoder/rdo.c:92:9: note: reduc phi. skip.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:92:9: note: Disable peeling, max peels reached: 3
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:92:9: note: Vectorizing an unaligned access.
encoder/rdo.c:92:9: note: === vect_analyze_slp ===
encoder/rdo.c:92:9: note: === vect_make_slp_decision ===
encoder/rdo.c:92:9: note: === vect_detect_hybrid_slp ===
encoder/rdo.c:92:9: note: === vect_analyze_loop_operations ===
encoder/rdo.c:92:9: note: examining phi: x_527 = PHI <x_286(46), x_298(48)>

encoder/rdo.c:92:9: note: examining phi: sa8d_355 = PHI <sa8d_352(46), sa8d_297(48)>

encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG sa8d => sa8d_355
encoder/rdo.c:92:9: note: irrelevant.
encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG x => x_527
encoder/rdo.c:92:9: note: irrelevant.
encoder/rdo.c:92:9: note: ==> examining statement: _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
encoder/rdo.c:92:9: note: num. args = 4 (not unary/binary/ternary op).
encoder/rdo.c:92:9: note: vect_is_simple_use: operand h_11(D)->mb.pic.fenc_sa8d[y_530][x_527]
encoder/rdo.c:92:9: note: not ssa-name.
encoder/rdo.c:92:9: note: use not simple.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:92:9: note: vect_model_load_cost: unaligned supported by hardware.
encoder/rdo.c:92:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
encoder/rdo.c:92:9: note: ==> examining statement: sa8d_297 = _295 + sa8d_355;
encoder/rdo.c:92:9: note: vect_is_simple_use: operand _295
encoder/rdo.c:92:9: note: def_stmt: _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
encoder/rdo.c:92:9: note: type of def: 3.
encoder/rdo.c:92:9: note: vect_is_simple_use: operand sa8d_355
encoder/rdo.c:92:9: note: def_stmt: sa8d_355 = PHI <sa8d_352(46), sa8d_297(48)>
encoder/rdo.c:92:9: note: type of def: 5.
encoder/rdo.c:92:9: note: detected reduction: sa8d_297 = _295 + sa8d_355;

encoder/rdo.c:92:9: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 1, prologue_cost = 1, epilogue_cost = 5 .
encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG sa8d => sa8d_297
encoder/rdo.c:92:9: note: irrelevant.
encoder/rdo.c:92:9: note: ==> examining statement: x_298 = x_527 + 1;
encoder/rdo.c:92:9: note: irrelevant.
encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG x => x_298
encoder/rdo.c:92:9: note: irrelevant.
encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG sa8d => sa8d_297
encoder/rdo.c:92:9: note: irrelevant.
encoder/rdo.c:92:9: note: ==> examining statement: # DEBUG x => x_298
encoder/rdo.c:92:9: note: irrelevant.
encoder/rdo.c:92:9: note: ==> examining statement: if (max_x_289 > x_298)
encoder/rdo.c:92:9: note: irrelevant.
encoder/rdo.c:92:9: note: not vectorized: iteration count too small.
encoder/rdo.c:92:9: note: not vectorized: iteration count smaller than vectorization factor.
encoder/rdo.c:92:9: note: bad operation or unsupported loop bound.

Analyzing loop at encoder/rdo.c:76
encoder/rdo.c:76:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:76:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:76:5: note: ===== analyze_loop_nest_1 =====
encoder/rdo.c:76:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:76:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 22
  exit condition [x_265 + 1, + , 1](no_overflow) < max_x_269
  bounds on difference of bases: 0 ... 536870912
Applying pattern match.pd:442, generic-match.c:3412
Applying pattern match.pd:628, generic-match.c:1309
  result:
    # of iterations ((unsigned int) max_x_269 - (unsigned int) x_265) - 1, bounded by 536870912
Applying pattern match.pd:475, generic-match.c:3649
encoder/rdo.c:76:5: note: Symbolic number of iterations is (unsigned int) max_x_269 - (unsigned int) x_265
encoder/rdo.c:76:5: note: not vectorized: control flow in loop.
encoder/rdo.c:76:5: note: bad loop form.

Analyzing loop at encoder/rdo.c:77
encoder/rdo.c:77:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:77:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:77:9: note: === get_loop_niters ===
Applying pattern match.pd:475, generic-match.c:3649
encoder/rdo.c:77:9: note: Symbolic number of iterations is (unsigned int) max_x_269 - (unsigned int) x_265
encoder/rdo.c:77:9: note: === vect_analyze_data_refs ===
Creating dr for h_11(D)->mb.pic.fenc_satd[y_667][x_630]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_11(D)
	offset from base address: (ssizetype) (((sizetype) x_265 + (sizetype) y_667 * 4) * 4)
	constant offset from base address: 15488
	step: 4
	aligned to: 8
	base_object: *h_11(D)
	Access function 0: {x_265, +, 1}_22
	Access function 1: y_667
	Access function 2: 29184
	Access function 3: 7680
	Access function 4: 87040
encoder/rdo.c:77:9: note: got vectype for stmt: _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
vector(4) int
encoder/rdo.c:77:9: note: === vect_analyze_scalar_cycles ===
encoder/rdo.c:77:9: note: Analyze phi: x_630 = PHI <x_265(36), x_279(38)>

encoder/rdo.c:77:9: note: Access function of PHI: {x_265, +, 1}_22
encoder/rdo.c:77:9: note: step: 1,  init: x_265
encoder/rdo.c:77:9: note: Detected induction.
encoder/rdo.c:77:9: note: Analyze phi: satd_664 = PHI <satd_300(36), satd_278(38)>

encoder/rdo.c:77:9: note: Access function of PHI: {satd_300, +, _276}_22
encoder/rdo.c:77:9: note: step: _276,  init: satd_300
encoder/rdo.c:77:9: note: step unknown.
encoder/rdo.c:77:9: note: Analyze phi: satd_664 = PHI <satd_300(36), satd_278(38)>

encoder/rdo.c:77:9: note: detected reduction: satd_278 = _276 + satd_664;

encoder/rdo.c:77:9: note: Detected reduction.
encoder/rdo.c:77:9: note: === vect_pattern_recog ===
encoder/rdo.c:77:9: note: vect_is_simple_use: operand _276
encoder/rdo.c:77:9: note: def_stmt: _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
encoder/rdo.c:77:9: note: type of def: 3.
encoder/rdo.c:77:9: note: vect_is_simple_use: operand _276
encoder/rdo.c:77:9: note: def_stmt: _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
encoder/rdo.c:77:9: note: type of def: 3.
encoder/rdo.c:77:9: note: vect_is_simple_use: operand _276
encoder/rdo.c:77:9: note: def_stmt: _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
encoder/rdo.c:77:9: note: type of def: 3.
encoder/rdo.c:77:9: note: === vect_analyze_data_ref_accesses ===
encoder/rdo.c:77:9: note: === vect_mark_stmts_to_be_vectorized ===
encoder/rdo.c:77:9: note: init: phi relevant? x_630 = PHI <x_265(36), x_279(38)>
encoder/rdo.c:77:9: note: init: phi relevant? satd_664 = PHI <satd_300(36), satd_278(38)>
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG satd => satd_664
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG x => x_630
encoder/rdo.c:77:9: note: init: stmt relevant? _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
encoder/rdo.c:77:9: note: init: stmt relevant? satd_278 = _276 + satd_664;
encoder/rdo.c:77:9: note: vec_stmt_relevant_p: used out of loop.
encoder/rdo.c:77:9: note: mark relevant 0, live 1.
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG satd => satd_278
encoder/rdo.c:77:9: note: init: stmt relevant? x_279 = x_630 + 1;
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG x => x_279
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG satd => satd_278
encoder/rdo.c:77:9: note: init: stmt relevant? # DEBUG x => x_279
encoder/rdo.c:77:9: note: init: stmt relevant? if (max_x_269 > x_279)
encoder/rdo.c:77:9: note: worklist: examine stmt: satd_278 = _276 + satd_664;
encoder/rdo.c:77:9: note: vect_is_simple_use: operand _276
encoder/rdo.c:77:9: note: def_stmt: _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
encoder/rdo.c:77:9: note: type of def: 3.
encoder/rdo.c:77:9: note: mark relevant 3, live 0.
encoder/rdo.c:77:9: note: vect_is_simple_use: operand satd_664
encoder/rdo.c:77:9: note: def_stmt: satd_664 = PHI <satd_300(36), satd_278(38)>
encoder/rdo.c:77:9: note: type of def: 5.
encoder/rdo.c:77:9: note: mark relevant 3, live 0.
encoder/rdo.c:77:9: note: worklist: examine stmt: satd_664 = PHI <satd_300(36), satd_278(38)>
encoder/rdo.c:77:9: note: vect_is_simple_use: operand satd_300
encoder/rdo.c:77:9: note: def_stmt: satd_300 = PHI <0(43), satd_631(42)>
encoder/rdo.c:77:9: note: type of def: 2.
encoder/rdo.c:77:9: note: def_stmt is out of loop.
encoder/rdo.c:77:9: note: vect_is_simple_use: operand satd_278
encoder/rdo.c:77:9: note: def_stmt: satd_278 = _276 + satd_664;
encoder/rdo.c:77:9: note: type of def: 5.
encoder/rdo.c:77:9: note: reduc-stmt defining reduc-phi in the same nest.
encoder/rdo.c:77:9: note: worklist: examine stmt: _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
encoder/rdo.c:77:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
  stmt_b: _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
(analyze_overlapping_iterations 
  (chrec_a = {x_265, +, 1}_22)
  (chrec_b = {x_265, +, 1}_22)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = y_667)
  (chrec_b = y_667)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 29184)
  (chrec_b = 29184)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 7680)
  (chrec_b = 7680)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 87040)
  (chrec_b = 87040)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/rdo.c:77:9: note: === vect_determine_vectorization_factor ===
encoder/rdo.c:77:9: note: ==> examining phi: x_630 = PHI <x_265(36), x_279(38)>

encoder/rdo.c:77:9: note: ==> examining phi: satd_664 = PHI <satd_300(36), satd_278(38)>

encoder/rdo.c:77:9: note: get vectype for scalar type:  int
encoder/rdo.c:77:9: note: vectype: vector(4) int
encoder/rdo.c:77:9: note: nunits = 4
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_664

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_630

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];

encoder/rdo.c:77:9: note: get vectype for scalar type:  int
encoder/rdo.c:77:9: note: vectype: vector(4) int
encoder/rdo.c:77:9: note: nunits = 4
encoder/rdo.c:77:9: note: ==> examining statement: satd_278 = _276 + satd_664;

encoder/rdo.c:77:9: note: get vectype for scalar type:  int
encoder/rdo.c:77:9: note: vectype: vector(4) int
encoder/rdo.c:77:9: note: get vectype for scalar type:  int
encoder/rdo.c:77:9: note: vectype: vector(4) int
encoder/rdo.c:77:9: note: nunits = 4
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_278

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: x_279 = x_630 + 1;

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_279

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_278

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_279

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: ==> examining statement: if (max_x_269 > x_279)

encoder/rdo.c:77:9: note: skip.
encoder/rdo.c:77:9: note: vectorization factor = 4
encoder/rdo.c:77:9: note: === vect_analyze_data_refs_alignment ===
encoder/rdo.c:77:9: note: vect_compute_data_ref_alignment:
encoder/rdo.c:77:9: note: Unknown alignment for access: h_11(D)->mb.pic.fenc_satd[y_667][x_630]
encoder/rdo.c:77:9: note: === vect_prune_runtime_alias_test_list ===
encoder/rdo.c:77:9: note: === vect_enhance_data_refs_alignment ===
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:77:9: note: Unknown misalignment, is_packed = 0
encoder/rdo.c:77:9: note: vect_can_advance_ivs_p:
encoder/rdo.c:77:9: note: Analyze phi: x_630 = PHI <x_265(36), x_279(38)>

encoder/rdo.c:77:9: note: Analyze phi: satd_664 = PHI <satd_300(36), satd_278(38)>

encoder/rdo.c:77:9: note: reduc phi. skip.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:77:9: note: Disable peeling, max peels reached: 3
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:77:9: note: Vectorizing an unaligned access.
encoder/rdo.c:77:9: note: === vect_analyze_slp ===
encoder/rdo.c:77:9: note: === vect_make_slp_decision ===
encoder/rdo.c:77:9: note: === vect_detect_hybrid_slp ===
encoder/rdo.c:77:9: note: === vect_analyze_loop_operations ===
encoder/rdo.c:77:9: note: examining phi: x_630 = PHI <x_265(36), x_279(38)>

encoder/rdo.c:77:9: note: examining phi: satd_664 = PHI <satd_300(36), satd_278(38)>

encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_664
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_630
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
encoder/rdo.c:77:9: note: num. args = 4 (not unary/binary/ternary op).
encoder/rdo.c:77:9: note: vect_is_simple_use: operand h_11(D)->mb.pic.fenc_satd[y_667][x_630]
encoder/rdo.c:77:9: note: not ssa-name.
encoder/rdo.c:77:9: note: use not simple.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:77:9: note: vect_model_load_cost: unaligned supported by hardware.
encoder/rdo.c:77:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
encoder/rdo.c:77:9: note: ==> examining statement: satd_278 = _276 + satd_664;
encoder/rdo.c:77:9: note: vect_is_simple_use: operand _276
encoder/rdo.c:77:9: note: def_stmt: _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
encoder/rdo.c:77:9: note: type of def: 3.
encoder/rdo.c:77:9: note: vect_is_simple_use: operand satd_664
encoder/rdo.c:77:9: note: def_stmt: satd_664 = PHI <satd_300(36), satd_278(38)>
encoder/rdo.c:77:9: note: type of def: 5.
encoder/rdo.c:77:9: note: detected reduction: satd_278 = _276 + satd_664;

encoder/rdo.c:77:9: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 1, prologue_cost = 1, epilogue_cost = 5 .
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_278
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: x_279 = x_630 + 1;
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_279
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG satd => satd_278
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: # DEBUG x => x_279
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: ==> examining statement: if (max_x_269 > x_279)
encoder/rdo.c:77:9: note: irrelevant.
encoder/rdo.c:77:9: note: === vect_update_slp_costs_according_to_vf ===
encoder/rdo.c:77:9: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
encoder/rdo.c:77:9: note: Cost model analysis: 
  Vector inside of loop cost: 3
  Vector prologue cost: 7
  Vector epilogue cost: 9
  Scalar iteration cost: 2
  Scalar outside cost: 6
  Vector outside cost: 16
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 7
encoder/rdo.c:77:9: note:   Runtime profitability threshold = 6
encoder/rdo.c:77:9: note:   Static estimate profitability threshold = 6
encoder/rdo.c:77:9: note: not vectorized: estimated iteration count too small.
encoder/rdo.c:77:9: note: not vectorized: estimated iteration count smaller than specified loop bound parameter or minimum profitable iterations (whichever is more conservative).
encoder/rdo.c:77:9: note: bad operation or unsupported loop bound.
encoder/rdo.c:202:10: note: vectorized 0 loops in function.
x264_rd_cost_part (struct x264_t * h, int i_lambda2, int i4, int i_pixel)
{
  int i4;
  int count;
  int i8start;
  struct bs_t s;
  const int i_mb_type;
  int b_8x16;
  int j;
  int count;
  int count;
  int D.25419;
  int i8;
  const int i_mb_type;
  int b_8x16;
  int j;
  int i4;
  int i8;
  int satd;
  int max_x;
  int max_y;
  int x;
  int y;
  int satd;
  int max_x;
  int max_y;
  int x;
  int y;
  int sa8d;
  int max_x;
  int max_y;
  int x;
  int y;
  int dc;
  uint64_t acs;
  uint8_t * fenc;
  uint8_t * fdec;
  int satd;
  int D.25376;
  struct bs_t s;
  int b_8x4;
  int count;
  int count;
  int D.25338;
  int i4;
  int b_8x4;
  int satd;
  int max_x;
  int max_y;
  int x;
  int y;
  int satd;
  int max_x;
  int max_y;
  int x;
  int y;
  int sa8d;
  int max_x;
  int max_y;
  int x;
  int y;
  int dc;
  uint64_t acs;
  uint8_t * fenc;
  uint8_t * fdec;
  int satd;
  int D.25307;
  uint64_t i_ssd;
  uint64_t i_bits;
  struct x264_cabac_t cabac_tmp;
  uint64_t D.25269;
  uint8_t * fdec;
  uint8_t * fenc;
  uint8_t * fdec;
  uint8_t * fenc;
  struct x264_cabac_t cabac_tmp;
  int i_cost;
  int type_bak;
  int i8;
  uint64_t i_bits;
  uint64_t i_ssd;
  uint64_t _2;
  uint64_t _17;
  uint8_t * _18;
  int _21;
  int _23;
  int _25;
  int _26;
  int _27;
  int _28;
  int _31;
  int _32;
  int _33;
  int _34;
  uint8_t * _35;
  int _36;
  int _38;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _39;
  int * _40;
  int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  int _50;
  long unsigned int _54;
  uint64_t _55;
  uint8_t * _56;
  uint8_t * _58;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _60;
  int _61;
  sizetype _63;
  int _64;
  sizetype _65;
  sizetype _66;
  uint8_t * _68;
  int _69;
  sizetype _70;
  sizetype _71;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _74;
  int _75;
  int _76;
  int _77;
  unsigned char _78;
  int _79;
  int _80;
  unsigned char _81;
  int _82;
  int _83;
  int _86;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _87;
  int * _88;
  int _89;
  long unsigned int _90;
  long unsigned int _91;
  long unsigned int _92;
  long unsigned int _93;
  long unsigned int _97;
  long unsigned int _99;
  sizetype _100;
  int _101;
  sizetype _102;
  sizetype _103;
  uint8_t * _105;
  int _106;
  sizetype _107;
  sizetype _108;
  int _110;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _154;
  int _155;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _157;
  int _158;
  int _159;
  int _162;
  int _163;
  int _165;
  int _166;
  int _171;
  int _177;
  int _179;
  int _181;
  int _182;
  int _183;
  int _184;
  int _185;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _187;
  int _188;
  int _190;
  _Bool _206;
  int _208;
  int16_t[16] * _209;
  long unsigned int _210;
  long unsigned int _211;
  long unsigned int _212;
  long unsigned int _213;
  long unsigned int _214;
  long unsigned int _215;
  long unsigned int _216;
  _Bool _217;
  unsigned char _218;
  int _219;
  int _220;
  int _221;
  int _222;
  int _223;
  int16_t[16] * _224;
  long unsigned int _225;
  long unsigned int _226;
  long unsigned int _227;
  long unsigned int _228;
  long unsigned int _229;
  long unsigned int _230;
  long unsigned int _231;
  _Bool _232;
  unsigned char _233;
  _Bool _234;
  int _236;
  int _237;
  int16_t[16] * _238;
  int _240;
  unsigned char _241;
  int _242;
  int _244;
  int16_t[16] * _245;
  int _247;
  unsigned char _248;
  int _249;
  uint8_t * _250;
  sizetype _251;
  int _252;
  sizetype _253;
  sizetype _254;
  uint8_t * _256;
  int _257;
  sizetype _258;
  sizetype _259;
  int _261;
  uint64_t (*<T13f5>) (uint8_t *, int) _262;
  int _264;
  int _267;
  int _268;
  int _270;
  int _271;
  int _276;
  int _282;
  int _283;
  long unsigned int _284;
  int _285;
  int _288;
  int _290;
  int _295;
  int _301;
  int _302;
  int _330;
  int _332;
  int _333;
  int _334;
  int _335;
  int _336;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _338;
  int _339;
  int _341;
  int _357;
  _Bool _358;
  int _360;
  int _361;
  int _362;
  unsigned int i_mb_type.22_363;
  unsigned int _364;
  _Bool _365;
  int _366;
  unsigned char _367;
  int _368;
  int _369;
  int _370;
  unsigned char _371;
  int _372;
  int _373;
  _Bool _375;
  int _377;
  int _379;
  int _380;
  int _381;
  int _382;
  int _383;
  uint8_t * _384;
  int _385;
  int _386;
  uint8_t * _387;
  int16_t[64] * _388;
  int _391;
  int _392;
  int16_t[16] * _393;
  long unsigned int _394;
  long unsigned int _395;
  long unsigned int _396;
  long unsigned int _397;
  long unsigned int _398;
  long unsigned int _399;
  long unsigned int _400;
  _Bool _401;
  unsigned char _402;
  int _404;
  int _405;
  uint8_t * _406;
  int _407;
  int _408;
  uint8_t * _409;
  int _410;
  int _411;
  int16_t[16] * _412;
  long unsigned int _413;
  long unsigned int _414;
  long unsigned int _415;
  long unsigned int _416;
  long unsigned int _417;
  long unsigned int _418;
  long unsigned int _419;
  _Bool _420;
  unsigned char _421;
  int _422;
  int _423;
  int16_t[16] * _424;
  long unsigned int _425;
  long unsigned int _426;
  long unsigned int _427;
  long unsigned int _428;
  long unsigned int _429;
  long unsigned int _430;
  long unsigned int _431;
  _Bool _432;
  unsigned char _433;
  int16_t * _434;
  int16_t * _435;
  int _436;
  int _437;
  int _442;
  _Bool _443;
  int _445;
  int _446;
  unsigned int i_mb_type.23_447;
  unsigned int _448;
  _Bool _449;
  int _450;
  unsigned char _451;
  int _452;
  int _453;
  unsigned char _454;
  int _455;
  int _456;
  _Bool _457;
  int _460;
  int _461;
  int16_t[16] * _462;
  int _464;
  unsigned char _465;
  int16_t * _466;
  int _467;
  int _468;
  int16_t[16] * _469;
  int _471;
  unsigned char _472;
  int16_t * _473;
  int _479;
  int _483;
  int _484;
  void (*<T15c0>) (int16_t *, int16_t *) _485;
  int16_t[64] * _486;
  int _487;
  int16_t[16] * _488;
  int _492;
  int _493;
  int _496;
  int _497;
  int16_t[16] * _498;
  int _500;
  unsigned char _501;
  unsigned int ivtmp_528;
  unsigned int ivtmp_705;
  unsigned int ivtmp_706;
  unsigned int ivtmp_707;
  int pretmp_709;
  long unsigned int pretmp_711;
  long unsigned int prephitmp_712;
  int pretmp_713;
  int pretmp_715;
  int pretmp_716;
  int pretmp_718;
  int prephitmp_719;
  int pretmp_726;
  int pretmp_727;
  int prephitmp_728;
  int pretmp_729;
  int prephitmp_730;
  int pretmp_733;

  <bb 2>:
  # DEBUG D#676 => i4_7(D) >> 2
  # DEBUG i8 => D#676
  if (i_pixel_9(D) == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  type_bak_12 = h_11(D)->mb.i_type;
  # DEBUG type_bak => type_bak_12
  i_cost_15 = x264_rd_cost_mb (h_11(D), i_lambda2_13(D));
  # DEBUG i_cost => i_cost_15
  h_11(D)->mb.i_type = type_bak_12;
  _17 = (uint64_t) i_cost_15;
  goto <bb 111>;

  <bb 4>:
  if (i_pixel_9(D) > 3)
    goto <bb 5>;
  else
    goto <bb 30>;

  <bb 5>:
  # DEBUG h => h_11(D)
  # DEBUG i_lambda2 => i_lambda2_13(D)
  # DEBUG i4 => i4_7(D)
  # DEBUG i_pixel => i_pixel_9(D)
  x264_macroblock_encode_p4x4 (h_11(D), i4_7(D));
  if (i_pixel_9(D) == 4)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  _76 = i4_7(D) + 1;
  x264_macroblock_encode_p4x4 (h_11(D), _76);
  goto <bb 9>;

  <bb 7>:
  if (i_pixel_9(D) == 5)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _77 = i4_7(D) + 2;
  x264_macroblock_encode_p4x4 (h_11(D), _77);

  <bb 9>:
  _78 = block_idx_y[i4_7(D)];
  _79 = (int) _78;
  _80 = _79 * 4;
  _81 = block_idx_x[i4_7(D)];
  _82 = (int) _81;
  _83 = _82 * 4;
  # DEBUG h => h_11(D)
  # DEBUG size => i_pixel_9(D)
  # DEBUG x => _83
  # DEBUG y => _80
  # DEBUG p => 0
  # DEBUG satd => 0
  _18 = h_11(D)->mb.pic.p_fdec[0];
  _100 = (sizetype) _83;
  _101 = _80 * 32;
  _102 = (sizetype) _101;
  _103 = _100 + _102;
  fdec_104 = _18 + _103;
  # DEBUG fdec => fdec_104
  _105 = h_11(D)->mb.pic.p_fenc[0];
  _106 = _80 * 16;
  _107 = (sizetype) _106;
  _108 = _100 + _107;
  fenc_109 = _105 + _108;
  # DEBUG fenc => fenc_109
  _110 = h_11(D)->mb.i_psy_rd;
  if (_110 != 0)
    goto <bb 10>;
  else
    goto <bb 21>;

  <bb 10>:
  _154 = h_11(D)->pixf.sad[i_pixel_9(D)];
  _155 = _154 (fdec_104, 32, &zero, 0);
  dc_156 = _155 >> 1;
  # DEBUG dc => dc_156
  _157 = h_11(D)->pixf.satd[i_pixel_9(D)];
  _158 = _157 (fdec_104, 32, &zero, 0);
  _159 = _158 - dc_156;
  # DEBUG h => h_11(D)
  # DEBUG pixel => i_pixel_9(D)
  # DEBUG x => _83
  # DEBUG y => _80
  # DEBUG satd => 0
  x_160 = _83 >> 2;
  # DEBUG min_x => x_160
  y_161 = _80 >> 2;
  # DEBUG min_y => y_161
  _162 = x264_pixel_size[i_pixel_9(D)].w;
  _163 = _162 >> 2;
  max_x_164 = x_160 + _163;
  # DEBUG max_x => max_x_164
  _165 = x264_pixel_size[i_pixel_9(D)].h;
  _166 = _165 >> 2;
  max_y_167 = y_161 + _166;
  # DEBUG max_y => max_y_167
  # DEBUG satd => 0
  # DEBUG y => y_161
  if (y_161 < max_y_167)
    goto <bb 18>;
  else
    goto <bb 20>;

  <bb 11>:

  <bb 12>:
  # x_668 = PHI <x_160(11), x_174(13)>
  # satd_662 = PHI <satd_196(11), satd_173(13)>
  # DEBUG satd => satd_662
  # DEBUG x => x_668
  _171 = h_11(D)->mb.pic.fenc_satd[y_665][x_668];
  satd_173 = _171 + satd_662;
  # DEBUG satd => satd_173
  x_174 = x_668 + 1;
  # DEBUG x => x_174
  # DEBUG satd => satd_173
  # DEBUG x => x_174
  if (max_x_164 > x_174)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  goto <bb 12>;

  <bb 14>:
  # satd_696 = PHI <satd_173(12)>

  <bb 15>:
  # satd_643 = PHI <satd_696(14), satd_196(19)>
  y_175 = y_665 + 1;
  # DEBUG y => y_175
  # DEBUG satd => satd_643
  # DEBUG y => y_175
  if (max_y_167 > y_175)
    goto <bb 17>;
  else
    goto <bb 16>;

  <bb 16>:
  # satd_691 = PHI <satd_643(15)>
  goto <bb 20>;

  <bb 17>:
  goto <bb 19>;

  <bb 18>:

  <bb 19>:
  # satd_196 = PHI <0(18), satd_643(17)>
  # y_665 = PHI <y_161(18), y_175(17)>
  # DEBUG satd => 0
  # DEBUG y => y_665
  # DEBUG satd => satd_196
  # DEBUG x => x_160
  if (x_160 < max_x_164)
    goto <bb 11>;
  else
    goto <bb 15>;

  <bb 20>:
  # satd_642 = PHI <satd_691(16), 0(10)>
  # DEBUG h => NULL
  # DEBUG pixel => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  _177 = _159 - satd_642;
  satd_178 = ABS_EXPR <_177>;
  # DEBUG satd => satd_178
  # DEBUG satd => satd_178
  _179 = h_11(D)->mb.i_psy_rd;
  _181 = satd_178 * _179;
  _182 = h_11(D)->mb.i_qp;
  _183 = x264_lambda_tab[_182];
  _184 = _181 * _183;
  _185 = _184 + 128;
  satd_186 = _185 >> 8;
  # DEBUG satd => satd_186

  <bb 21>:
  # satd_189 = PHI <satd_186(20), 0(9)>
  # DEBUG satd => satd_189
  _187 = h_11(D)->pixf.ssd[i_pixel_9(D)];
  _188 = _187 (fenc_109, 16, fdec_104, 32);
  _190 = _188 + satd_189;
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG fdec => NULL
  # DEBUG fenc => NULL
  # DEBUG acs => NULL
  # DEBUG dc => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG sa8d => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG p => NULL
  i_ssd_85 = (uint64_t) _190;
  # DEBUG i_ssd => i_ssd_85
  _86 = h_11(D)->param.b_cabac;
  if (_86 != 0)
    goto <bb 22>;
  else
    goto <bb 26>;

  <bb 22>:
  _87 = h_11(D)->mc.memcpy_aligned;
  _88 = &h_11(D)->cabac.f8_bits_encoded;
  _87 (&cabac_tmp.f8_bits_encoded, _88, 464);
  # DEBUG h => h_11(D)
  # DEBUG cb => &cabac_tmp
  # DEBUG i4 => i4_7(D)
  # DEBUG i_pixel => i_pixel_9(D)
  _206 = i_pixel_9(D) == 4;
  b_8x4_207 = (int) _206;
  # DEBUG b_8x4 => b_8x4_207
  _208 = x264_scan8[i4_7(D)];
  _209 = &h_11(D)->dct.luma4x4[i4_7(D)];
  # DEBUG v => _209
  # DEBUG i_count => 32
  # DEBUG v => _209
  # DEBUG i_count => 32
  # DEBUG x => _209
  _210 = MEM[(uint64_t *)_209];
  _211 = MEM[(uint64_t *)_209 + 8B];
  _212 = _210 | _211;
  _213 = MEM[(uint64_t *)_209 + 16B];
  _214 = _212 | _213;
  _215 = MEM[(uint64_t *)_209 + 24B];
  _216 = _214 | _215;
  _217 = _216 != 0;
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG i_count => NULL
  # DEBUG nonzero => NULL
  _218 = (unsigned char) _217;
  h_11(D)->mb.cache.non_zero_count[_208] = _218;
  block_residual_write_cabac (h_11(D), &cabac_tmp, 2, i4_7(D), _209, 16);
  if (i_pixel_9(D) == 6)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  x264_cabac_mb_mvd (h_11(D), &cabac_tmp, 0, i4_7(D), 1, 1);
  goto <bb 25>;

  <bb 24>:
  _219 = 2 - b_8x4_207;
  _220 = b_8x4_207 + 1;
  x264_cabac_mb_mvd (h_11(D), &cabac_tmp, 0, i4_7(D), _220, _219);
  _221 = i4_7(D) + 2;
  _222 = _221 - b_8x4_207;
  _223 = x264_scan8[_222];
  _224 = &h_11(D)->dct.luma4x4[_222];
  # DEBUG v => _224
  # DEBUG i_count => 32
  # DEBUG v => _224
  # DEBUG i_count => 32
  # DEBUG x => _224
  _225 = MEM[(uint64_t *)_224];
  _226 = MEM[(uint64_t *)_224 + 8B];
  _227 = _225 | _226;
  _228 = MEM[(uint64_t *)_224 + 16B];
  _229 = _227 | _228;
  _230 = MEM[(uint64_t *)_224 + 24B];
  _231 = _229 | _230;
  _232 = _231 != 0;
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG i_count => NULL
  # DEBUG nonzero => NULL
  _233 = (unsigned char) _232;
  h_11(D)->mb.cache.non_zero_count[_223] = _233;
  block_residual_write_cabac (h_11(D), &cabac_tmp, 2, _222, _224, 16);

  <bb 25>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i4 => NULL
  # DEBUG i_pixel => NULL
  # DEBUG b_8x4 => NULL
  _89 = cabac_tmp.f8_bits_encoded;
  _90 = (long unsigned int) _89;
  _91 = (long unsigned int) i_lambda2_13(D);
  _92 = _90 * _91;
  _93 = _92 + 128;
  i_bits_94 = _93 >> 8;
  # DEBUG i_bits => i_bits_94
  cabac_tmp ={v} {CLOBBER};
  goto <bb 29>;

  <bb 26>:
  # DEBUG h => h_11(D)
  # DEBUG i4 => i4_7(D)
  # DEBUG i_pixel => i_pixel_9(D)
  _234 = i_pixel_9(D) == 4;
  b_8x4_235 = (int) _234;
  # DEBUG b_8x4 => b_8x4_235
  s.i_bits_encoded = 0;
  _236 = b_8x4_235 + 1;
  # DEBUG D#67 => &s
  cavlc_mb_mvd.isra.16 (h_11(D), &MEM[(int *)&s + 36B], 0, i4_7(D), _236);
  _237 = x264_scan8[i4_7(D)];
  _238 = &h_11(D)->dct.luma4x4[i4_7(D)];
  # DEBUG v => _238
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_239 : "r" _238, "m" MEM[(struct  *)_238]);
  # DEBUG count => count_239
  _240 = count_239 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _241 = (unsigned char) _240;
  h_11(D)->mb.cache.non_zero_count[_237] = _241;
  block_residual_write_cavlc (h_11(D), &s, 2, i4_7(D), _238, 16);
  if (i_pixel_9(D) != 6)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  _242 = 2 - b_8x4_235;
  i4_243 = i4_7(D) + _242;
  # DEBUG i4 => i4_243
  _244 = x264_scan8[i4_243];
  _245 = &h_11(D)->dct.luma4x4[i4_243];
  # DEBUG v => _245
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_246 : "r" _245, "m" MEM[(struct  *)_245]);
  # DEBUG count => count_246
  _247 = count_246 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _248 = (unsigned char) _247;
  h_11(D)->mb.cache.non_zero_count[_244] = _248;
  block_residual_write_cavlc (h_11(D), &s, 2, i4_243, _245, 16);

  <bb 28>:
  _249 = s.i_bits_encoded;
  s ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG i4 => NULL
  # DEBUG i_pixel => NULL
  # DEBUG count => NULL
  # DEBUG count => NULL
  # DEBUG b_8x4 => NULL
  i_bits_96 = (uint64_t) _249;
  # DEBUG i_bits => i_bits_96

  <bb 29>:
  # i_bits_98 = PHI <i_bits_94(25), i_bits_96(28)>
  # DEBUG i_bits => i_bits_98
  _97 = i_ssd_85 << 8;
  _99 = _97 + i_bits_98;
  # DEBUG h => NULL
  # DEBUG i_lambda2 => NULL
  # DEBUG i4 => NULL
  # DEBUG i_pixel => NULL
  # DEBUG i_bits => NULL
  # DEBUG i_ssd => NULL
  goto <bb 111>;

  <bb 30>:
  i8_8 = i4_7(D) >> 2;
  x264_macroblock_encode_p8x8 (h_11(D), i8_8);
  if (i_pixel_9(D) == 1)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  _21 = i8_8 + 1;
  x264_macroblock_encode_p8x8 (h_11(D), _21);
  goto <bb 34>;

  <bb 32>:
  if (i_pixel_9(D) == 2)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 33>:
  _23 = i8_8 + 2;
  x264_macroblock_encode_p8x8 (h_11(D), _23);

  <bb 34>:
  _25 = i8_8 >> 1;
  _26 = _25 * 8;
  _27 = i8_8 & 1;
  _28 = _27 * 8;
  # DEBUG h => h_11(D)
  # DEBUG size => i_pixel_9(D)
  # DEBUG x => _28
  # DEBUG y => _26
  # DEBUG p => 0
  # DEBUG satd => 0
  _250 = h_11(D)->mb.pic.p_fdec[0];
  _251 = (sizetype) _28;
  _252 = _26 * 32;
  _253 = (sizetype) _252;
  _254 = _251 + _253;
  fdec_255 = _250 + _254;
  # DEBUG fdec => fdec_255
  _256 = h_11(D)->mb.pic.p_fenc[0];
  _257 = _26 * 16;
  _258 = (sizetype) _257;
  _259 = _251 + _258;
  fenc_260 = _256 + _259;
  # DEBUG fenc => fenc_260
  _261 = h_11(D)->mb.i_psy_rd;
  if (_261 != 0)
    goto <bb 35>;
  else
    goto <bb 56>;

  <bb 35>:
  _262 = h_11(D)->pixf.hadamard_ac[i_pixel_9(D)];
  acs_263 = _262 (fdec_255, 32);
  # DEBUG acs => acs_263
  _264 = (int) acs_263;
  # DEBUG h => h_11(D)
  # DEBUG pixel => i_pixel_9(D)
  # DEBUG x => _28
  # DEBUG y => _26
  # DEBUG satd => 0
  x_265 = _28 >> 2;
  # DEBUG min_x => x_265
  y_266 = _26 >> 2;
  # DEBUG min_y => y_266
  _267 = x264_pixel_size[i_pixel_9(D)].w;
  _268 = _267 >> 2;
  max_x_269 = x_265 + _268;
  # DEBUG max_x => max_x_269
  _270 = x264_pixel_size[i_pixel_9(D)].h;
  _271 = _270 >> 2;
  max_y_272 = y_266 + _271;
  # DEBUG max_y => max_y_272
  # DEBUG satd => 0
  # DEBUG y => y_266
  if (y_266 < max_y_272)
    goto <bb 43>;
  else
    goto <bb 45>;

  <bb 36>:

  <bb 37>:
  # x_630 = PHI <x_265(36), x_279(38)>
  # satd_664 = PHI <satd_300(36), satd_278(38)>
  # DEBUG satd => satd_664
  # DEBUG x => x_630
  _276 = h_11(D)->mb.pic.fenc_satd[y_667][x_630];
  satd_278 = _276 + satd_664;
  # DEBUG satd => satd_278
  x_279 = x_630 + 1;
  # DEBUG x => x_279
  # DEBUG satd => satd_278
  # DEBUG x => x_279
  if (max_x_269 > x_279)
    goto <bb 38>;
  else
    goto <bb 39>;

  <bb 38>:
  goto <bb 37>;

  <bb 39>:
  # satd_695 = PHI <satd_278(37)>

  <bb 40>:
  # satd_631 = PHI <satd_695(39), satd_300(44)>
  y_280 = y_667 + 1;
  # DEBUG y => y_280
  # DEBUG satd => satd_631
  # DEBUG y => y_280
  if (max_y_272 > y_280)
    goto <bb 42>;
  else
    goto <bb 41>;

  <bb 41>:
  # satd_692 = PHI <satd_631(40)>
  goto <bb 45>;

  <bb 42>:
  goto <bb 44>;

  <bb 43>:

  <bb 44>:
  # satd_300 = PHI <0(43), satd_631(42)>
  # y_667 = PHI <y_266(43), y_280(42)>
  # DEBUG satd => 0
  # DEBUG y => y_667
  # DEBUG satd => satd_300
  # DEBUG x => x_265
  if (x_265 < max_x_269)
    goto <bb 36>;
  else
    goto <bb 40>;

  <bb 45>:
  # satd_525 = PHI <satd_692(41), 0(35)>
  # DEBUG h => NULL
  # DEBUG pixel => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  _282 = _264 - satd_525;
  _283 = ABS_EXPR <_282>;
  _284 = acs_263 >> 32;
  _285 = (int) _284;
  # DEBUG h => h_11(D)
  # DEBUG pixel => i_pixel_9(D)
  # DEBUG x => _28
  # DEBUG y => _26
  # DEBUG sa8d => 0
  x_286 = _28 >> 3;
  # DEBUG min_x => x_286
  y_287 = _26 >> 3;
  # DEBUG min_y => y_287
  _288 = _267 >> 3;
  max_x_289 = x_286 + _288;
  # DEBUG max_x => max_x_289
  _290 = _270 >> 3;
  max_y_291 = y_287 + _290;
  # DEBUG max_y => max_y_291
  # DEBUG sa8d => 0
  # DEBUG y => y_287
  if (y_287 < max_y_291)
    goto <bb 53>;
  else
    goto <bb 55>;

  <bb 46>:

  <bb 47>:
  # x_527 = PHI <x_286(46), x_298(48)>
  # sa8d_355 = PHI <sa8d_352(46), sa8d_297(48)>
  # DEBUG sa8d => sa8d_355
  # DEBUG x => x_527
  _295 = h_11(D)->mb.pic.fenc_sa8d[y_530][x_527];
  sa8d_297 = _295 + sa8d_355;
  # DEBUG sa8d => sa8d_297
  x_298 = x_527 + 1;
  # DEBUG x => x_298
  # DEBUG sa8d => sa8d_297
  # DEBUG x => x_298
  if (max_x_289 > x_298)
    goto <bb 48>;
  else
    goto <bb 49>;

  <bb 48>:
  goto <bb 47>;

  <bb 49>:
  # sa8d_694 = PHI <sa8d_297(47)>

  <bb 50>:
  # sa8d_354 = PHI <sa8d_694(49), sa8d_352(54)>
  y_299 = y_530 + 1;
  # DEBUG y => y_299
  # DEBUG sa8d => sa8d_354
  # DEBUG y => y_299
  if (max_y_291 > y_299)
    goto <bb 52>;
  else
    goto <bb 51>;

  <bb 51>:
  # sa8d_693 = PHI <sa8d_354(50)>
  goto <bb 55>;

  <bb 52>:
  goto <bb 54>;

  <bb 53>:

  <bb 54>:
  # sa8d_352 = PHI <0(53), sa8d_354(52)>
  # y_530 = PHI <y_287(53), y_299(52)>
  # DEBUG sa8d => 0
  # DEBUG y => y_530
  # DEBUG sa8d => sa8d_352
  # DEBUG x => x_286
  if (x_286 < max_x_289)
    goto <bb 46>;
  else
    goto <bb 50>;

  <bb 55>:
  # sa8d_30 = PHI <sa8d_693(51), 0(45)>
  # DEBUG h => NULL
  # DEBUG pixel => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG sa8d => NULL
  _301 = _285 - sa8d_30;
  _302 = ABS_EXPR <_301>;
  satd_303 = _283 + _302;
  # DEBUG satd => satd_303
  satd_304 = satd_303 >> 1;
  # DEBUG satd => satd_304
  # DEBUG satd => satd_304
  _330 = h_11(D)->mb.i_psy_rd;
  _332 = satd_304 * _330;
  _333 = h_11(D)->mb.i_qp;
  _334 = x264_lambda_tab[_333];
  _335 = _332 * _334;
  _336 = _335 + 128;
  satd_337 = _336 >> 8;
  # DEBUG satd => satd_337

  <bb 56>:
  # satd_340 = PHI <satd_337(55), 0(34)>
  # DEBUG satd => satd_340
  _338 = h_11(D)->pixf.ssd[i_pixel_9(D)];
  _339 = _338 (fenc_260, 16, fdec_255, 32);
  _341 = _339 + satd_340;
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG fdec => NULL
  # DEBUG fenc => NULL
  # DEBUG acs => NULL
  # DEBUG dc => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG sa8d => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG y => NULL
  # DEBUG x => NULL
  # DEBUG max_y => NULL
  # DEBUG max_x => NULL
  # DEBUG satd => NULL
  # DEBUG p => NULL
  _31 = _25 * 4;
  _32 = _27 * 4;
  _33 = i_pixel_9(D) + 3;
  # DEBUG h => h_11(D)
  # DEBUG size => _33
  # DEBUG p => 1
  # DEBUG x => _32
  # DEBUG y => _31
  # DEBUG satd => 0
  _35 = h_11(D)->mb.pic.p_fdec[1];
  _63 = (sizetype) _32;
  _64 = _31 * 32;
  _65 = (sizetype) _64;
  _66 = _63 + _65;
  fdec_67 = _35 + _66;
  # DEBUG fdec => fdec_67
  _68 = h_11(D)->mb.pic.p_fenc[1];
  _69 = _31 * 16;
  _70 = (sizetype) _69;
  _71 = _63 + _70;
  fenc_72 = _68 + _71;
  # DEBUG fenc => fenc_72
  # DEBUG satd => 0
  _74 = h_11(D)->pixf.ssd[_33];
  _75 = _74 (fenc_72, 16, fdec_67, 32);
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG p => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG sa8d => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG dc => NULL
  # DEBUG acs => NULL
  # DEBUG fenc => NULL
  # DEBUG fdec => NULL
  # DEBUG satd => NULL
  _34 = _75 + _341;
  # DEBUG h => h_11(D)
  # DEBUG size => _33
  # DEBUG p => 2
  # DEBUG x => _32
  # DEBUG y => _31
  # DEBUG satd => 0
  _56 = h_11(D)->mb.pic.p_fdec[2];
  fdec_57 = _56 + _66;
  # DEBUG fdec => fdec_57
  _58 = h_11(D)->mb.pic.p_fenc[2];
  fenc_59 = _58 + _71;
  # DEBUG fenc => fenc_59
  # DEBUG satd => 0
  _60 = h_11(D)->pixf.ssd[_33];
  _61 = _60 (fenc_59, 16, fdec_57, 32);
  # DEBUG h => NULL
  # DEBUG size => NULL
  # DEBUG p => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG satd => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG sa8d => NULL
  # DEBUG max_x => NULL
  # DEBUG max_y => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG dc => NULL
  # DEBUG acs => NULL
  # DEBUG fenc => NULL
  # DEBUG fdec => NULL
  # DEBUG satd => NULL
  _36 = _34 + _61;
  i_ssd_37 = (uint64_t) _36;
  # DEBUG i_ssd => i_ssd_37
  _38 = h_11(D)->param.b_cabac;
  if (_38 != 0)
    goto <bb 57>;
  else
    goto <bb 83>;

  <bb 57>:
  _39 = h_11(D)->mc.memcpy_aligned;
  _40 = &h_11(D)->cabac.f8_bits_encoded;
  _39 (&cabac_tmp.f8_bits_encoded, _40, 464);
  # DEBUG h => h_11(D)
  # DEBUG cb => &cabac_tmp
  # DEBUG i8 => D#676
  # DEBUG i_pixel => i_pixel_9(D)
  i_mb_type_29 = h_11(D)->mb.i_type;
  # DEBUG i_mb_type => i_mb_type_29
  _357 = h_11(D)->mb.i_partition;
  _358 = _357 == 15;
  b_8x16_359 = (int) _358;
  # DEBUG b_8x16 => b_8x16_359
  if (i_mb_type_29 == 5)
    goto <bb 58>;
  else
    goto <bb 59>;

  <bb 58>:
  x264_cabac_mb8x8_mvd (h_11(D), &cabac_tmp, 0, i8_8);
  goto <bb 70>;

  <bb 59>:
  if (i_mb_type_29 == 4)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 60>:
  _360 = 2 << b_8x16_359;
  _361 = 4 >> b_8x16_359;
  _362 = i8_8 * 4;
  x264_cabac_mb_mvd (h_11(D), &cabac_tmp, 0, _362, _361, _360);
  goto <bb 70>;

  <bb 61>:
  i_mb_type.22_363 = (unsigned int) i_mb_type_29;
  _364 = i_mb_type.22_363 + 4294967288;
  if (_364 <= 8)
    goto <bb 62>;
  else
    goto <bb 67>;

  <bb 62>:
  _365 = i8_8 != 0;
  _366 = (int) _365;
  _367 = x264_mb_type_list0_table[i_mb_type_29][_366];
  if (_367 != 0)
    goto <bb 64>;
  else
    goto <bb 63>;

  <bb 63>:
  pretmp_727 = i8_8 * 4;
  goto <bb 65>;

  <bb 64>:
  _368 = 2 << b_8x16_359;
  _369 = 4 >> b_8x16_359;
  _370 = i8_8 * 4;
  x264_cabac_mb_mvd (h_11(D), &cabac_tmp, 0, _370, _369, _368);

  <bb 65>:
  # prephitmp_728 = PHI <pretmp_727(63), _370(64)>
  _371 = x264_mb_type_list1_table[i_mb_type_29][_366];
  if (_371 != 0)
    goto <bb 66>;
  else
    goto <bb 70>;

  <bb 66>:
  _372 = 2 << b_8x16_359;
  _373 = 4 >> b_8x16_359;
  x264_cabac_mb_mvd (h_11(D), &cabac_tmp, 1, prephitmp_728, _373, _372);
  goto <bb 70>;

  <bb 67>:
  if (i_mb_type_29 == 17)
    goto <bb 68>;
  else
    goto <bb 69>;

  <bb 68>:
  x264_cabac_mb8x8_mvd (h_11(D), &cabac_tmp, 0, i8_8);
  x264_cabac_mb8x8_mvd (h_11(D), &cabac_tmp, 1, i8_8);
  goto <bb 70>;

  <bb 69>:
  x264_log (h_11(D), 0, "invalid/unhandled mb_type %d\n", i_mb_type_29);
  goto <bb 82>;

  <bb 70>:
  _375 = i_pixel_9(D) <= 2;
  j_376 = (int) _375;
  # DEBUG j => j_376
  # DEBUG j => j_376
  # DEBUG i8 => D#676

  <bb 71>:
  # i8_349 = PHI <i8_438(80), i8_8(70)>
  # j_505 = PHI <j_440(80), j_376(70)>
  # DEBUG j => j_505
  # DEBUG i8 => i8_349
  _377 = h_11(D)->mb.i_cbp_luma;
  _379 = _377 >> i8_349;
  _380 = _379 & 1;
  if (_380 != 0)
    goto <bb 72>;
  else
    goto <bb 78>;

  <bb 72>:
  _381 = h_11(D)->mb.b_transform_8x8;
  if (_381 != 0)
    goto <bb 73>;
  else
    goto <bb 74>;

  <bb 73>:
  _382 = i8_349 * 4;
  _383 = x264_scan8[_382];
  _384 = &h_11(D)->mb.cache.non_zero_count[_383];
  MEM[(uint16_t *)_384] = 257;
  _385 = _382 + 2;
  _386 = x264_scan8[_385];
  _387 = &h_11(D)->mb.cache.non_zero_count[_386];
  MEM[(uint16_t *)_387] = 257;
  _388 = &h_11(D)->dct.luma8x8[i8_349];
  block_residual_write_cabac (h_11(D), &cabac_tmp, 5, i8_349, _388, 64);
  goto <bb 79>;

  <bb 74>:
  pretmp_726 = i8_349 * 4;

  <bb 75>:
  # i4_347 = PHI <0(74), i4_403(77)>
  # ivtmp_528 = PHI <4(74), ivtmp_707(77)>
  # DEBUG i4 => i4_347
  _391 = i4_347 + pretmp_726;
  _392 = x264_scan8[_391];
  _393 = &h_11(D)->dct.luma4x4[_391];
  # DEBUG v => _393
  # DEBUG i_count => 32
  # DEBUG v => _393
  # DEBUG i_count => 32
  # DEBUG x => _393
  _394 = MEM[(uint64_t *)_393];
  _395 = MEM[(uint64_t *)_393 + 8B];
  _396 = _394 | _395;
  _397 = MEM[(uint64_t *)_393 + 16B];
  _398 = _396 | _397;
  _399 = MEM[(uint64_t *)_393 + 24B];
  _400 = _398 | _399;
  _401 = _400 != 0;
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG i_count => NULL
  # DEBUG nonzero => NULL
  _402 = (unsigned char) _401;
  h_11(D)->mb.cache.non_zero_count[_392] = _402;
  block_residual_write_cabac (h_11(D), &cabac_tmp, 2, _391, _393, 16);
  i4_403 = i4_347 + 1;
  # DEBUG i4 => i4_403
  # DEBUG i4 => i4_403
  ivtmp_707 = ivtmp_528 - 1;
  if (ivtmp_707 != 0)
    goto <bb 77>;
  else
    goto <bb 76>;

  <bb 76>:
  goto <bb 79>;

  <bb 77>:
  goto <bb 75>;

  <bb 78>:
  _404 = i8_349 * 4;
  _405 = x264_scan8[_404];
  _406 = &h_11(D)->mb.cache.non_zero_count[_405];
  MEM[(uint16_t *)_406] = 0;
  _407 = _404 + 2;
  _408 = x264_scan8[_407];
  _409 = &h_11(D)->mb.cache.non_zero_count[_408];
  MEM[(uint16_t *)_409] = 0;

  <bb 79>:
  _410 = i8_349 + 16;
  _411 = x264_scan8[_410];
  _412 = &h_11(D)->dct.luma4x4[_410];
  # DEBUG v => _412
  # DEBUG i_count => 32
  # DEBUG v => _412
  # DEBUG i_count => 32
  # DEBUG x => _412
  _413 = MEM[(uint64_t *)_412];
  _414 = MEM[(uint64_t *)_412 + 8B];
  _415 = _413 | _414;
  _416 = MEM[(uint64_t *)_412 + 16B];
  _417 = _415 | _416;
  _418 = MEM[(uint64_t *)_412 + 24B];
  _419 = _417 | _418;
  _420 = _419 != 0;
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG i_count => NULL
  # DEBUG nonzero => NULL
  _421 = (unsigned char) _420;
  h_11(D)->mb.cache.non_zero_count[_411] = _421;
  _422 = i8_349 + 20;
  _423 = x264_scan8[_422];
  _424 = &h_11(D)->dct.luma4x4[_422];
  # DEBUG v => _424
  # DEBUG i_count => 32
  # DEBUG v => _424
  # DEBUG i_count => 32
  # DEBUG x => _424
  _425 = MEM[(uint64_t *)_424];
  _426 = MEM[(uint64_t *)_424 + 8B];
  _427 = _425 | _426;
  _428 = MEM[(uint64_t *)_424 + 16B];
  _429 = _427 | _428;
  _430 = MEM[(uint64_t *)_424 + 24B];
  _431 = _429 | _430;
  _432 = _431 != 0;
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG v => NULL
  # DEBUG i_count => NULL
  # DEBUG i => NULL
  # DEBUG i_count => NULL
  # DEBUG nonzero => NULL
  _433 = (unsigned char) _432;
  h_11(D)->mb.cache.non_zero_count[_423] = _433;
  _434 = _412 + 2;
  block_residual_write_cabac (h_11(D), &cabac_tmp, 4, _410, _434, 15);
  _435 = _424 + 2;
  block_residual_write_cabac (h_11(D), &cabac_tmp, 4, _422, _435, 15);
  _436 = x264_pixel_size[i_pixel_9(D)].h;
  _437 = _436 >> 3;
  i8_438 = i8_349 + _437;
  # DEBUG i8 => i8_438
  j_440 = j_505 + -1;
  # DEBUG j => j_440
  # DEBUG j => j_440
  # DEBUG i8 => i8_438
  if (j_440 != -1)
    goto <bb 80>;
  else
    goto <bb 81>;

  <bb 80>:
  goto <bb 71>;

  <bb 81>:

  <bb 82>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i8 => NULL
  # DEBUG i_pixel => NULL
  # DEBUG i4 => NULL
  # DEBUG j => NULL
  # DEBUG b_8x16 => NULL
  # DEBUG i_mb_type => NULL
  _43 = cabac_tmp.f8_bits_encoded;
  _44 = (long unsigned int) _43;
  _45 = (long unsigned int) i_lambda2_13(D);
  _46 = _44 * _45;
  _47 = _46 + 128;
  i_bits_48 = _47 >> 8;
  # DEBUG i_bits => i_bits_48
  cabac_tmp ={v} {CLOBBER};
  goto <bb 110>;

  <bb 83>:
  # DEBUG h => h_11(D)
  # DEBUG i8 => D#676
  # DEBUG i_pixel => i_pixel_9(D)
  i_mb_type_42 = h_11(D)->mb.i_type;
  # DEBUG i_mb_type => i_mb_type_42
  _442 = h_11(D)->mb.i_partition;
  _443 = _442 == 15;
  b_8x16_444 = (int) _443;
  # DEBUG b_8x16 => b_8x16_444
  s.i_bits_encoded = 0;
  if (i_mb_type_42 == 5)
    goto <bb 84>;
  else
    goto <bb 85>;

  <bb 84>:
  cavlc_mb8x8_mvd (h_11(D), &s, 0, i8_8);
  goto <bb 95>;

  <bb 85>:
  if (i_mb_type_42 == 4)
    goto <bb 86>;
  else
    goto <bb 87>;

  <bb 86>:
  _445 = 4 >> b_8x16_444;
  _446 = i8_8 * 4;
  # DEBUG D#67 => &s
  cavlc_mb_mvd.isra.16 (h_11(D), &MEM[(int *)&s + 36B], 0, _446, _445);
  goto <bb 95>;

  <bb 87>:
  i_mb_type.23_447 = (unsigned int) i_mb_type_42;
  _448 = i_mb_type.23_447 + 4294967288;
  if (_448 <= 8)
    goto <bb 88>;
  else
    goto <bb 92>;

  <bb 88>:
  _449 = i8_8 != 0;
  _450 = (int) _449;
  _451 = x264_mb_type_list0_table[i_mb_type_42][_450];
  if (_451 != 0)
    goto <bb 89>;
  else
    goto <bb 90>;

  <bb 89>:
  _452 = 4 >> b_8x16_444;
  _453 = i8_8 * 4;
  # DEBUG D#67 => &s
  cavlc_mb_mvd.isra.16 (h_11(D), &MEM[(int *)&s + 36B], 0, _453, _452);

  <bb 90>:
  _454 = x264_mb_type_list1_table[i_mb_type_42][_450];
  if (_454 != 0)
    goto <bb 91>;
  else
    goto <bb 95>;

  <bb 91>:
  _455 = 4 >> b_8x16_444;
  _456 = i8_8 * 4;
  # DEBUG D#67 => &s
  cavlc_mb_mvd.isra.16 (h_11(D), &MEM[(int *)&s + 36B], 1, _456, _455);
  goto <bb 95>;

  <bb 92>:
  if (i_mb_type_42 == 17)
    goto <bb 93>;
  else
    goto <bb 94>;

  <bb 93>:
  cavlc_mb8x8_mvd (h_11(D), &s, 0, i8_8);
  cavlc_mb8x8_mvd (h_11(D), &s, 1, i8_8);
  goto <bb 95>;

  <bb 94>:
  x264_log (h_11(D), 0, "invalid/unhandled mb_type\n");
  goto <bb 109>;

  <bb 95>:
  _457 = i_pixel_9(D) <= 2;
  j_458 = (int) _457;
  # DEBUG j => j_458
  # DEBUG j => j_458
  # DEBUG i8 => D#676
  pretmp_713 = x264_pixel_size[i_pixel_9(D)].h;
  pretmp_715 = pretmp_713 >> 3;

  <bb 96>:
  # i8_504 = PHI <i8_476(107), i8_8(95)>
  # j_193 = PHI <j_478(107), j_458(95)>
  # DEBUG j => j_193
  # DEBUG i8 => i8_504
  # DEBUG h => h_11(D)
  # DEBUG s => &s
  # DEBUG i8start => i8_504
  # DEBUG i8end => i8_504
  _50 = h_11(D)->mb.b_transform_8x8;
  if (_50 != 0)
    goto <bb 98>;
  else
    goto <bb 97>;

  <bb 97>:
  pretmp_729 = h_11(D)->mb.i_cbp_luma;
  goto <bb 101>;

  <bb 98>:
  pretmp_733 = h_11(D)->mb.i_cbp_luma;
  # DEBUG i8 => i8_504
  _483 = pretmp_733 >> i8_504;
  _484 = _483 & 1;
  if (_484 != 0)
    goto <bb 99>;
  else
    goto <bb 100>;

  <bb 99>:
  _485 = h_11(D)->zigzagf.interleave_8x8_cavlc;
  _486 = &h_11(D)->dct.luma8x8[i8_504];
  _487 = i8_504 * 4;
  _488 = &h_11(D)->dct.luma4x4[_487];
  _485 (_488, _486);
  pretmp_718 = h_11(D)->mb.i_cbp_luma;

  <bb 100>:
  # prephitmp_719 = PHI <pretmp_733(98), pretmp_718(99)>
  i8_489 = i8_504 + 1;
  # DEBUG i8 => i8_489
  # DEBUG i8 => i8_489

  <bb 101>:
  # prephitmp_730 = PHI <prephitmp_719(100), pretmp_729(97)>
  # DEBUG i8 => i8_504
  # DEBUG i8 => i8_504
  _492 = prephitmp_730 >> i8_504;
  _493 = _492 & 1;
  if (_493 != 0)
    goto <bb 103>;
  else
    goto <bb 102>;

  <bb 102>:
  i8_503 = i8_504 + 1;
  # DEBUG i8 => i8_503
  # DEBUG i8 => i8_503
  # DEBUG h => NULL
  # DEBUG s => NULL
  # DEBUG i8start => NULL
  # DEBUG i8end => NULL
  # DEBUG count => NULL
  # DEBUG i4 => NULL
  _460 = i8_504 + 16;
  _461 = x264_scan8[_460];
  _462 = &h_11(D)->dct.luma4x4[_460];
  # DEBUG v => _462
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_463 : "r" _462, "m" MEM[(struct  *)_462]);
  # DEBUG count => count_463
  _464 = count_463 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _465 = (unsigned char) _464;
  h_11(D)->mb.cache.non_zero_count[_461] = _465;
  _466 = _462 + 2;
  block_residual_write_cavlc (h_11(D), &s, 4, _460, _466, 15);
  _467 = i8_504 + 20;
  _468 = x264_scan8[_467];
  _469 = &h_11(D)->dct.luma4x4[_467];
  # DEBUG v => _469
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_470 : "r" _469, "m" MEM[(struct  *)_469]);
  # DEBUG count => count_470
  _471 = count_470 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _472 = (unsigned char) _471;
  h_11(D)->mb.cache.non_zero_count[_468] = _472;
  _473 = _469 + 2;
  block_residual_write_cavlc (h_11(D), &s, 4, _467, _473, 15);
  i8_476 = i8_504 + pretmp_715;
  # DEBUG i8 => i8_476
  j_478 = j_193 + -1;
  # DEBUG j => j_478
  # DEBUG j => j_478
  # DEBUG i8 => i8_476
  if (j_478 != -1)
    goto <bb 107>;
  else
    goto <bb 108>;

  <bb 103>:
  pretmp_716 = i8_504 * 4;

  <bb 104>:
  # i4_514 = PHI <0(103), i4_502(106)>
  # ivtmp_706 = PHI <4(103), ivtmp_705(106)>
  # DEBUG i4 => i4_514
  _496 = i4_514 + pretmp_716;
  _497 = x264_scan8[_496];
  _498 = &h_11(D)->dct.luma4x4[_496];
  # DEBUG v => _498
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_499 : "r" _498, "m" MEM[(struct  *)_498]);
  # DEBUG count => count_499
  _500 = count_499 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _501 = (unsigned char) _500;
  h_11(D)->mb.cache.non_zero_count[_497] = _501;
  block_residual_write_cavlc (h_11(D), &s, 2, _496, _498, 16);
  i4_502 = i4_514 + 1;
  # DEBUG i4 => i4_502
  # DEBUG i4 => i4_502
  ivtmp_705 = ivtmp_706 - 1;
  if (ivtmp_705 != 0)
    goto <bb 106>;
  else
    goto <bb 105>;

  <bb 105>:
  goto <bb 102>;

  <bb 106>:
  goto <bb 104>;

  <bb 107>:
  goto <bb 96>;

  <bb 108>:
  _479 = s.i_bits_encoded;
  pretmp_709 = i_lambda2_13(D) * _479;
  pretmp_711 = (long unsigned int) pretmp_709;

  <bb 109>:
  # prephitmp_712 = PHI <0(94), pretmp_711(108)>
  s ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG i8 => NULL
  # DEBUG i_pixel => NULL
  # DEBUG count => NULL
  # DEBUG count => NULL
  # DEBUG j => NULL
  # DEBUG b_8x16 => NULL
  # DEBUG i_mb_type => NULL
  # DEBUG D#675 => NULL
  # DEBUG i_bits => (uint64_t) D#675

  <bb 110>:
  # i_bits_1 = PHI <i_bits_48(82), prephitmp_712(109)>
  # DEBUG i_bits => i_bits_1
  _54 = i_ssd_37 << 8;
  _55 = i_bits_1 + _54;

  <bb 111>:
  # _2 = PHI <_17(3), _99(29), _55(110)>
  return _2;

}



;; Function x264_mb_analyse_p_rd (x264_mb_analyse_p_rd, funcdef_no=220, decl_uid=9367, cgraph_uid=220, symbol_order=289)


Analyzing loop at encoder/analyse.c:1937
encoder/analyse.c:1937:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:1937:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:1937:13: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:1937:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:1937:13: note: not vectorized: control flow in loop.
encoder/analyse.c:1937:13: note: bad inner-loop form.
encoder/analyse.c:1937:13: note: not vectorized: Bad inner loop.
encoder/analyse.c:1937:13: note: bad loop form.

Analyzing loop at encoder/analyse.c:1943
encoder/analyse.c:1943:17: note: ===== analyze_loop_nest =====
encoder/analyse.c:1943:17: note: === vect_analyze_loop_form ===
encoder/analyse.c:1943:17: note: not vectorized: control flow in loop.
encoder/analyse.c:1943:17: note: bad loop form.
encoder/analyse.c:1895:13: note: vectorized 0 loops in function.
x264_mb_analyse_p_rd (struct x264_t * h, struct x264_mb_analysis_t * a, int i_satd)
{
  int dy;
  int dy;
  int dy;
  int dy;
  uint64_t bcost;
  int btype;
  int thresh;
  int costs[4];
  int i;
  int thresh;
  int _1;
  int _16;
  int _22;
  int _23;
  int _24;
  int _25;
  int _28;
  int _30;
  int _34;
  int _37;
  int _39;
  int _42;
  int _45;
  int _47;
  int _50;
  unsigned int _53;
  unsigned int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  int _61;
  int _63;
  int _65;
  int _69;
  int _70;
  int _72;
  _Bool _73;
  _Bool _74;
  _Bool _75;
  int _78;
  int _79;
  int _88;
  int _90;
  int _94;
  unsigned int ivtmp_102;
  int _103;
  int _111;
  unsigned int ivtmp_112;
  int _113;
  int _121;
  int _122;
  int _123;
  int _134;
  short unsigned int _149;
  short unsigned int _167;
  short unsigned int _185;
  unsigned int ivtmp_193;
  int _202;
  short unsigned int _203;
  int pretmp_205;
  int prephitmp_209;
  unsigned int ivtmp_211;

  <bb 2>:
  _16 = i_satd_15(D) * 5;
  thresh_17 = _16 / 4;
  # DEBUG thresh => thresh_17
  h_19(D)->mb.i_type = 4;
  _22 = a_21(D)->l0.i_rd16x16;
  if (_22 == 268435456)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  pretmp_205 = a_21(D)->l0.i_rd16x16;
  goto <bb 6>;

  <bb 4>:
  _23 = a_21(D)->l0.me16x16.cost;
  _24 = i_satd_15(D) * 3;
  _25 = _24 / 2;
  if (_23 <= _25)
    goto <bb 5>;
  else
    goto <bb 3>;

  <bb 5>:
  h_19(D)->mb.i_partition = 16;
  x264_analyse_update_cache (h_19(D), a_21(D));
  _28 = a_21(D)->i_lambda2;
  _30 = x264_rd_cost_mb (h_19(D), _28);
  a_21(D)->l0.i_rd16x16 = _30;

  <bb 6>:
  # prephitmp_209 = PHI <pretmp_205(3), _30(5)>
  a_21(D)->l0.me16x16.cost = prephitmp_209;
  _34 = a_21(D)->l0.i_cost16x8;
  if (thresh_17 >= _34)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  h_19(D)->mb.i_partition = 14;
  x264_analyse_update_cache (h_19(D), a_21(D));
  _37 = a_21(D)->i_lambda2;
  _39 = x264_rd_cost_mb (h_19(D), _37);
  a_21(D)->l0.i_cost16x8 = _39;
  goto <bb 9>;

  <bb 8>:
  a_21(D)->l0.i_cost16x8 = 268435456;

  <bb 9>:
  _42 = a_21(D)->l0.i_cost8x16;
  if (thresh_17 >= _42)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  h_19(D)->mb.i_partition = 15;
  x264_analyse_update_cache (h_19(D), a_21(D));
  _45 = a_21(D)->i_lambda2;
  _47 = x264_rd_cost_mb (h_19(D), _45);
  a_21(D)->l0.i_cost8x16 = _47;
  goto <bb 12>;

  <bb 11>:
  a_21(D)->l0.i_cost8x16 = 268435456;

  <bb 12>:
  _50 = a_21(D)->l0.i_cost8x8;
  if (thresh_17 >= _50)
    goto <bb 13>;
  else
    goto <bb 27>;

  <bb 13>:
  h_19(D)->mb.i_type = 5;
  h_19(D)->mb.i_partition = 13;
  _53 = h_19(D)->param.analyse.inter;
  _54 = _53 & 32;
  if (_54 != 0)
    goto <bb 14>;
  else
    goto <bb 25>;

  <bb 14>:
  _55 = a_21(D)->l0.me8x8[0].i_ref;
  # DEBUG h => h_19(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#138 => (uint8_t) _55
  # DEBUG ref => D#138
  # DEBUG D#720 => &h_19(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#720
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#138
  _121 = _55 & 255;
  _134 = _121 * 257;
  # DEBUG val2 => (uint32_t) _134
  # DEBUG dy => 0
  # DEBUG dy => 0
  _203 = (short unsigned int) _134;
  MEM[(uint16_t *)h_19(D) + 19116B] = _203;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_19(D) + 19124B] = _203;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _56 = a_21(D)->l0.me8x8[1].i_ref;
  # DEBUG h => h_19(D)
  # DEBUG x => 2
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#137 => (uint8_t) _56
  # DEBUG ref => D#137
  # DEBUG D#719 => &h_19(D)->mb.cache.ref[0][14]
  # DEBUG dst => D#719
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#137
  _122 = _56 & 255;
  _113 = _122 * 257;
  # DEBUG val2 => (uint32_t) _113
  # DEBUG dy => 0
  # DEBUG dy => 0
  _185 = (short unsigned int) _113;
  MEM[(uint16_t *)h_19(D) + 19118B] = _185;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_19(D) + 19126B] = _185;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _57 = a_21(D)->l0.me8x8[2].i_ref;
  # DEBUG h => h_19(D)
  # DEBUG x => 0
  # DEBUG y => 2
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#136 => (uint8_t) _57
  # DEBUG ref => D#136
  # DEBUG D#718 => &h_19(D)->mb.cache.ref[0][28]
  # DEBUG dst => D#718
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#136
  _123 = _57 & 255;
  _103 = _123 * 257;
  # DEBUG val2 => (uint32_t) _103
  # DEBUG dy => 0
  # DEBUG dy => 0
  _167 = (short unsigned int) _103;
  MEM[(uint16_t *)h_19(D) + 19132B] = _167;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_19(D) + 19140B] = _167;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _58 = a_21(D)->l0.me8x8[3].i_ref;
  # DEBUG h => h_19(D)
  # DEBUG x => 2
  # DEBUG y => 2
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#135 => (uint8_t) _58
  # DEBUG ref => D#135
  # DEBUG D#717 => &h_19(D)->mb.cache.ref[0][30]
  # DEBUG dst => D#717
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#135
  _111 = _58 & 255;
  _94 = _111 * 257;
  # DEBUG val2 => (uint32_t) _94
  # DEBUG dy => 0
  # DEBUG dy => 0
  _149 = (short unsigned int) _94;
  MEM[(uint16_t *)h_19(D) + 19134B] = _149;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_19(D) + 19142B] = _149;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG i => 0

  <bb 15>:
  # i_166 = PHI <i_86(24), 0(14)>
  # ivtmp_193 = PHI <ivtmp_102(24), 4(14)>
  # DEBUG i => i_166
  _59 = a_21(D)->l0.i_cost4x4[i_166];
  costs[0] = _59;
  _61 = a_21(D)->l0.i_cost8x4[i_166];
  costs[1] = _61;
  _63 = a_21(D)->l0.i_cost4x8[i_166];
  costs[2] = _63;
  _65 = a_21(D)->l0.me8x8[i_166].cost;
  costs[3] = _65;
  _202 = MIN_EXPR <_59, _61>;
  _1 = MIN_EXPR <_65, _202>;
  _69 = MIN_EXPR <_1, _63>;
  _70 = _69 * 5;
  thresh_71 = _70 / 4;
  # DEBUG thresh => thresh_71
  # DEBUG btype => 3
  # DEBUG bcost => 1152921504606846976
  # DEBUG subtype => 0
  # DEBUG bcost => 1152921504606846976
  # DEBUG btype => 3
  # DEBUG subtype => 0
  _78 = i_166 << 2;

  <bb 16>:
  # btype_212 = PHI <btype_82(21), 0(15)>
  # btype_184 = PHI <btype_3(21), 3(15)>
  # bcost_210 = PHI <bcost_5(21), 1152921504606846976(15)>
  # ivtmp_211 = PHI <ivtmp_112(21), 4(15)>
  # DEBUG bcost => bcost_210
  # DEBUG btype => btype_184
  # DEBUG subtype => btype_212
  _72 = costs[btype_212];
  if (thresh_71 < _72)
    goto <bb 20>;
  else
    goto <bb 17>;

  <bb 17>:
  _73 = btype_212 == 3;
  _74 = bcost_210 == 1152921504606846976;
  _75 = _73 & _74;
  if (_75 != 0)
    goto <bb 20>;
  else
    goto <bb 18>;

  <bb 18>:
  h_19(D)->mb.i_sub_partition[i_166] = btype_212;
  x264_mb_cache_mv_p8x8 (h_19(D), a_21(D), i_166);
  _79 = a_21(D)->i_lambda2;
  bcost_81 = x264_rd_cost_part (h_19(D), _79, _78, 3);
  # DEBUG cost => bcost_81
  if (bcost_81 < bcost_210)
    goto <bb 20>;
  else
    goto <bb 19>;

  <bb 19>:

  <bb 20>:
  # btype_3 = PHI <btype_184(17), btype_184(19), btype_212(18), btype_184(16)>
  # bcost_5 = PHI <1152921504606846976(17), bcost_210(19), bcost_81(18), bcost_210(16)>
  # DEBUG bcost => bcost_5
  # DEBUG btype => btype_3
  btype_82 = btype_212 + 1;
  # DEBUG subtype => btype_82
  # DEBUG bcost => bcost_5
  # DEBUG btype => btype_3
  # DEBUG subtype => btype_82
  ivtmp_112 = ivtmp_211 - 1;
  if (ivtmp_112 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  goto <bb 16>;

  <bb 22>:
  # btype_201 = PHI <btype_3(20)>
  h_19(D)->mb.i_sub_partition[i_166] = btype_201;
  x264_mb_cache_mv_p8x8 (h_19(D), a_21(D), i_166);
  costs ={v} {CLOBBER};
  i_86 = i_166 + 1;
  # DEBUG i => i_86
  # DEBUG i => i_86
  ivtmp_102 = ivtmp_193 - 1;
  if (ivtmp_102 != 0)
    goto <bb 24>;
  else
    goto <bb 23>;

  <bb 23>:
  goto <bb 26>;

  <bb 24>:
  goto <bb 15>;

  <bb 25>:
  x264_analyse_update_cache (h_19(D), a_21(D));

  <bb 26>:
  _88 = a_21(D)->i_lambda2;
  _90 = x264_rd_cost_mb (h_19(D), _88);
  a_21(D)->l0.i_cost8x8 = _90;
  goto <bb 28>;

  <bb 27>:
  a_21(D)->l0.i_cost8x8 = 268435456;

  <bb 28>:
  return;

}



;; Function x264_rdo_init (x264_rdo_init, funcdef_no=186, decl_uid=7815, cgraph_uid=186, symbol_order=246)


Analyzing loop at encoder/rdo.c:342
encoder/rdo.c:342:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:342:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:342:5: note: ===== analyze_loop_nest_1 =====
encoder/rdo.c:342:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:342:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [4, + , 4294967295] != 0
  bounds on difference of bases: -4 ... -4
  result:
    # of iterations 4, bounded by 4
encoder/rdo.c:342:5: note: Considering outer-loop vectorization.
encoder/rdo.c:342:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [127, + , 4294967295] != 0
  bounds on difference of bases: -127 ... -127
  result:
    # of iterations 127, bounded by 127
encoder/rdo.c:342:5: note: === vect_analyze_data_refs ===
Creating dr for x264_cabac_transition[i_state_47][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for x264_cabac_entropy[i_state_47][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for cabac_size_5ones[i_ctx_70]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &cabac_size_5ones
	offset from base address: 0
	constant offset from base address: 0
	step: 2
	aligned to: 128
	base_object: cabac_size_5ones
	Access function 0: {0, +, 1}_2
Creating dr for cabac_transition_5ones[i_ctx_70]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &cabac_transition_5ones
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: cabac_transition_5ones
	Access function 0: {0, +, 1}_2
encoder/rdo.c:342:5: note: not vectorized: data ref analysis failed ctx_48 = x264_cabac_transition[i_state_47][1];

encoder/rdo.c:342:5: note: bad data references.

Analyzing loop at encoder/rdo.c:347
encoder/rdo.c:347:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:347:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:347:9: note: === get_loop_niters ===
encoder/rdo.c:347:9: note: === vect_analyze_data_refs ===
Creating dr for x264_cabac_transition[i_state_47][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for x264_cabac_entropy[i_state_47][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for x264_cabac_transition[i_state_47][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_cabac_transition
	offset from base address: (ssizetype) ((sizetype) i_state_47 * 2)
	constant offset from base address: 1
	step: 0
	aligned to: 2
	base_object: x264_cabac_transition[i_state_47][1]
encoder/rdo.c:347:9: note: got vectype for stmt: ctx_48 = x264_cabac_transition[i_state_47][1];
const vector(16) unsigned char
Applying pattern match.pd:49, generic-match.c:3223
encoder/rdo.c:347:9: note: not vectorized: not suitable for gather load ctx_48 = x264_cabac_transition[i_state_47][1];

encoder/rdo.c:347:9: note: bad data references.

Analyzing loop at encoder/rdo.c:325
encoder/rdo.c:325:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:325:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:325:5: note: not vectorized: multiple nested loops.
encoder/rdo.c:325:5: note: bad loop form.

Analyzing loop at encoder/rdo.c:327
encoder/rdo.c:327:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:327:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:327:9: note: ===== analyze_loop_nest_1 =====
encoder/rdo.c:327:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:327:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [2, + , 1](no_overflow) < i_prefix_51
  bounds on difference of bases: 0 ... 13
  result:
    # of iterations (unsigned int) i_prefix_51 + 4294967294, bounded by 13
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:327:9: note: Symbolic number of iterations is (unsigned int) i_prefix_51 + 4294967295
encoder/rdo.c:327:9: note: not vectorized: control flow in loop.
encoder/rdo.c:327:9: note: bad loop form.

Analyzing loop at encoder/rdo.c:332
encoder/rdo.c:332:13: note: ===== analyze_loop_nest =====
encoder/rdo.c:332:13: note: === vect_analyze_loop_form ===
encoder/rdo.c:332:13: note: === get_loop_niters ===
Applying pattern match.pd:494, generic-match.c:3721
encoder/rdo.c:332:13: note: Symbolic number of iterations is (unsigned int) i_prefix_51 + 4294967295
encoder/rdo.c:332:13: note: === vect_analyze_data_refs ===
Creating dr for x264_cabac_transition[i_state_39][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint8_t[128][2] *)&x264_cabac_transition]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for x264_cabac_entropy[i_state_39][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(uint16_t[128][2] *)&x264_cabac_entropy]
	Access function 0: 1
	Access function 1: scev_not_known;
Creating dr for x264_cabac_transition[i_state_39][1]
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_cabac_transition
	offset from base address: (ssizetype) ((sizetype) i_state_39 * 2)
	constant offset from base address: 1
	step: 0
	aligned to: 2
	base_object: x264_cabac_transition[i_state_39][1]
encoder/rdo.c:332:13: note: got vectype for stmt: ctx_40 = x264_cabac_transition[i_state_39][1];
const vector(16) unsigned char
Applying pattern match.pd:49, generic-match.c:3223
encoder/rdo.c:332:13: note: not vectorized: not suitable for gather load ctx_40 = x264_cabac_transition[i_state_39][1];

encoder/rdo.c:332:13: note: bad data references.
encoder/rdo.c:322:6: note: vectorized 0 loops in function.
x264_rdo_init ()
{
  int i_state;
  int i_state;
  int i_state;
  uint8_t ctx;
  int f8_bits;
  uint8_t ctx;
  int f8_bits;
  int i;
  int i_ctx;
  int i_prefix;
  short unsigned int _23;
  short unsigned int _34;
  short unsigned int _41;
  int _42;
  short unsigned int _45;
  int _46;
  short unsigned int _49;
  int _50;
  unsigned int ivtmp_60;
  unsigned int ivtmp_61;
  unsigned int ivtmp_62;
  unsigned int ivtmp_69;
  unsigned int ivtmp_75;
  unsigned int ivtmp_78;
  unsigned int ivtmp_79;
  unsigned int ivtmp_80;
  unsigned int pretmp_85;
  unsigned int pretmp_86;

  <bb 2>:
  # DEBUG i_prefix => 0
  # DEBUG i_prefix => 0
  goto <bb 14>;

  <bb 3>:

  <bb 4>:
  # i_ctx_54 = PHI <i_ctx_27(3), 0(14)>
  # ivtmp_80 = PHI <ivtmp_62(3), 128(14)>
  # DEBUG i_ctx => i_ctx_54
  # DEBUG f8_bits => 0
  ctx_15 = (uint8_t) i_ctx_54;
  # DEBUG ctx => ctx_15
  # DEBUG i => 1
  # DEBUG ctx => ctx_15
  # DEBUG f8_bits => 0
  # DEBUG i => 1
  if (i_prefix_51 > 1)
    goto <bb 5>;
  else
    goto <bb 9>;

  <bb 5>:

  <bb 6>:
  # i_30 = PHI <1(5), i_18(8)>
  # f8_bits_8 = PHI <0(5), f8_bits_17(8)>
  # ctx_67 = PHI <ctx_15(5), ctx_40(8)>
  # DEBUG ctx => ctx_67
  # DEBUG f8_bits => f8_bits_8
  # DEBUG i => i_30
  # DEBUG state => &ctx
  # DEBUG b => 1
  i_state_39 = (int) ctx_67;
  # DEBUG i_state => i_state_39
  ctx_40 = x264_cabac_transition[i_state_39][1];
  # DEBUG ctx => ctx_40
  _41 = x264_cabac_entropy[i_state_39][1];
  _42 = (int) _41;
  # DEBUG state => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  f8_bits_17 = f8_bits_8 + _42;
  # DEBUG f8_bits => f8_bits_17
  i_18 = i_30 + 1;
  # DEBUG i => i_18
  # DEBUG ctx => ctx_40
  # DEBUG f8_bits => f8_bits_17
  # DEBUG i => i_18
  if (i_18 < i_prefix_51)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  # f8_bits_68 = PHI <f8_bits_17(6)>
  # ctx_64 = PHI <ctx_40(6)>
  goto <bb 9>;

  <bb 8>:
  goto <bb 6>;

  <bb 9>:
  # f8_bits_5 = PHI <f8_bits_68(7), 0(4)>
  # ctx_66 = PHI <ctx_64(7), ctx_15(4)>
  if (pretmp_86 <= 12)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  # DEBUG state => &ctx
  # DEBUG b => 0
  i_state_43 = (int) ctx_66;
  # DEBUG i_state => i_state_43
  ctx_44 = x264_cabac_transition[i_state_43][0];
  # DEBUG ctx => ctx_44
  _45 = x264_cabac_entropy[i_state_43][0];
  _46 = (int) _45;
  # DEBUG state => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  f8_bits_21 = f8_bits_5 + _46;
  # DEBUG f8_bits => f8_bits_21

  <bb 11>:
  # f8_bits_7 = PHI <f8_bits_5(9), f8_bits_21(10)>
  # ctx_52 = PHI <ctx_66(9), ctx_44(10)>
  # DEBUG ctx => ctx_52
  # DEBUG f8_bits => f8_bits_7
  f8_bits_22 = f8_bits_7 + 256;
  # DEBUG f8_bits => f8_bits_22
  _23 = (short unsigned int) f8_bits_22;
  cabac_size_unary[i_prefix_51][i_ctx_54] = _23;
  cabac_transition_unary[i_prefix_51][i_ctx_54] = ctx_52;
  # DEBUG D#139 => {CLOBBER}
  # DEBUG ctx => D#139
  i_ctx_27 = i_ctx_54 + 1;
  # DEBUG i_ctx => i_ctx_27
  # DEBUG i_ctx => i_ctx_27
  ivtmp_62 = ivtmp_80 - 1;
  if (ivtmp_62 != 0)
    goto <bb 3>;
  else
    goto <bb 12>;

  <bb 12>:
  i_prefix_28 = i_prefix_51 + 1;
  # DEBUG i_prefix => i_prefix_28
  # DEBUG i_prefix => i_prefix_28
  ivtmp_60 = ivtmp_61 - 1;
  if (ivtmp_60 != 0)
    goto <bb 13>;
  else
    goto <bb 15>;

  <bb 13>:

  <bb 14>:
  # i_prefix_51 = PHI <i_prefix_28(13), 0(2)>
  # ivtmp_61 = PHI <ivtmp_60(13), 15(2)>
  # DEBUG i_prefix => i_prefix_51
  # DEBUG i_ctx => 0
  pretmp_85 = (unsigned int) i_prefix_51;
  pretmp_86 = pretmp_85 + 4294967295;
  goto <bb 4>;

  <bb 15>:

  <bb 16>:
  # i_ctx_70 = PHI <0(15), i_ctx_38(20)>
  # ivtmp_75 = PHI <128(15), ivtmp_69(20)>
  # DEBUG i_ctx => i_ctx_70
  # DEBUG f8_bits => 0
  ctx_29 = (uint8_t) i_ctx_70;
  # DEBUG ctx => ctx_29
  # DEBUG i => 0
  # DEBUG ctx => ctx_29
  # DEBUG f8_bits => 0
  # DEBUG i => 0

  <bb 17>:
  # i_71 = PHI <i_32(18), 0(16)>
  # f8_bits_72 = PHI <f8_bits_31(18), 0(16)>
  # ctx_77 = PHI <ctx_48(18), ctx_29(16)>
  # ivtmp_79 = PHI <ivtmp_78(18), 5(16)>
  # DEBUG ctx => ctx_77
  # DEBUG f8_bits => f8_bits_72
  # DEBUG i => i_71
  # DEBUG state => &ctx
  # DEBUG b => 1
  i_state_47 = (int) ctx_77;
  # DEBUG i_state => i_state_47
  ctx_48 = x264_cabac_transition[i_state_47][1];
  # DEBUG ctx => ctx_48
  _49 = x264_cabac_entropy[i_state_47][1];
  _50 = (int) _49;
  # DEBUG state => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  f8_bits_31 = _50 + f8_bits_72;
  # DEBUG f8_bits => f8_bits_31
  i_32 = i_71 + 1;
  # DEBUG i => i_32
  # DEBUG ctx => ctx_48
  # DEBUG f8_bits => f8_bits_31
  # DEBUG i => i_32
  ivtmp_78 = ivtmp_79 - 1;
  if (ivtmp_78 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  goto <bb 17>;

  <bb 19>:
  # f8_bits_65 = PHI <f8_bits_31(17)>
  # ctx_63 = PHI <ctx_48(17)>
  f8_bits_33 = f8_bits_65 + 256;
  # DEBUG f8_bits => f8_bits_33
  _34 = (short unsigned int) f8_bits_33;
  cabac_size_5ones[i_ctx_70] = _34;
  cabac_transition_5ones[i_ctx_70] = ctx_63;
  # DEBUG D#140 => {CLOBBER}
  # DEBUG ctx => D#140
  i_ctx_38 = i_ctx_70 + 1;
  # DEBUG i_ctx => i_ctx_38
  # DEBUG i_ctx => i_ctx_38
  ivtmp_69 = ivtmp_75 - 1;
  if (ivtmp_69 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  goto <bb 16>;

  <bb 21>:
  return;

}



;; Function x264_quant_dc_trellis (x264_quant_dc_trellis, funcdef_no=188, decl_uid=7877, cgraph_uid=188, symbol_order=250)


Analyzing loop at encoder/rdo.c:616
encoder/rdo.c:616:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:616:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:616:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < iftmp.28_326
  bounds on difference of bases: 3 ... 15
  result:
    # of iterations (unsigned int) iftmp.28_326 + 4294967295, bounded by 15
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
encoder/rdo.c:616:5: note: Symbolic number of iterations is (unsigned int) iftmp.28_326
encoder/rdo.c:616:5: note: === vect_analyze_data_refs ===
Creating dr for *_219
analyze_innermost: success.
	base_address: iftmp.29_2
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *iftmp.29_2
	Access function 0: {0B, +, 1}_1
Creating dr for level_tree[j_374].abs_level
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: level_tree
	Access function 0: 0
	Access function 1: scev_not_known;
Creating dr for signs[b_ac_373]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &signs
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: signs
	Access function 0: {0, +, 1}_1
Creating dr for *_223
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_223
Creating dr for level_tree[j_374].next
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: level_tree
	Access function 0: 16
	Access function 1: scev_not_known;
encoder/rdo.c:616:5: note: got vectype for stmt: _220 = *_219;
const vector(16) unsigned char
Creating dr for level_tree[j_374].abs_level
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &level_tree
	offset from base address: (ssizetype) ((sizetype) j_374 * 4)
	constant offset from base address: 0
	step: 0
	aligned to: 4
	base_object: level_tree[j_374].abs_level
encoder/rdo.c:616:5: note: got vectype for stmt: _225 = level_tree[j_374].abs_level;
vector(8) short unsigned int
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
encoder/rdo.c:616:5: note: not vectorized: not suitable for gather load _225 = level_tree[j_374].abs_level;

encoder/rdo.c:616:5: note: bad data references.

Analyzing loop at encoder/rdo.c:611
encoder/rdo.c:611:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:611:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:611:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [6, + , 4294967295] != 0
  bounds on difference of bases: -6 ... -6
  result:
    # of iterations 6, bounded by 6
encoder/rdo.c:611:5: note: === vect_analyze_data_refs ===
Creating dr for bnode_211->score
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: bnode_516
	offset from base address: 0
	constant offset from base address: 24
	step: 24
	aligned to: 128
	base_object: *bnode_516
	Access function 0: 0
	Access function 1: {24B, +, 24}_2
Creating dr for bnode_372->score
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *bnode_372
	Access function 0: 0
encoder/rdo.c:611:5: note: got vectype for stmt: _212 = bnode_211->score;
vector(2) long int
Creating dr for bnode_372->score
analyze_innermost: success.
	base_address: bnode_372
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 128
	base_object: bnode_372->score
encoder/rdo.c:611:5: note: got vectype for stmt: _214 = bnode_372->score;
vector(2) long int
encoder/rdo.c:611:5: note: not vectorized: not suitable for gather load _214 = bnode_372->score;

encoder/rdo.c:611:5: note: bad data references.

Analyzing loop at encoder/rdo.c:491
encoder/rdo.c:491:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:491:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:491:5: note: not vectorized: multiple nested loops.
encoder/rdo.c:491:5: note: bad loop form.

Analyzing loop at encoder/rdo.c:506
encoder/rdo.c:506:13: note: ===== analyze_loop_nest =====
encoder/rdo.c:506:13: note: === vect_analyze_loop_form ===
encoder/rdo.c:506:13: note: not vectorized: control flow in loop.
encoder/rdo.c:506:13: note: bad loop form.

Analyzing loop at encoder/rdo.c:545
encoder/rdo.c:545:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:545:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:545:9: note: ===== analyze_loop_nest_1 =====
encoder/rdo.c:545:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:545:9: note: not vectorized: control flow in loop.
encoder/rdo.c:545:9: note: bad inner-loop form.
encoder/rdo.c:545:9: note: not vectorized: Bad inner loop.
encoder/rdo.c:545:9: note: bad loop form.

Analyzing loop at encoder/rdo.c:563
encoder/rdo.c:563:13: note: ===== analyze_loop_nest =====
encoder/rdo.c:563:13: note: === vect_analyze_loop_form ===
encoder/rdo.c:563:13: note: not vectorized: control flow in loop.
encoder/rdo.c:563:13: note: bad loop form.

Analyzing loop at encoder/rdo.c:525
encoder/rdo.c:525:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:525:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:525:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 7
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/rdo.c:525:9: note: === vect_analyze_data_refs ===
Creating dr for _117->score
analyze_innermost: success.
	base_address: bnode_351
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 128
	base_object: *bnode_351
	Access function 0: 0
	Access function 1: {0B, +, 24}_7
encoder/rdo.c:525:9: note: got vectype for stmt: _117->score = 1125899906842624;
vector(2) long int
encoder/rdo.c:525:9: note: === vect_analyze_scalar_cycles ===
encoder/rdo.c:525:9: note: Analyze phi: j_350 = PHI <0(23), j_118(25)>

encoder/rdo.c:525:9: note: Access function of PHI: {0, +, 1}_7
encoder/rdo.c:525:9: note: step: 1,  init: 0
encoder/rdo.c:525:9: note: Detected induction.
encoder/rdo.c:525:9: note: Analyze phi: .MEM_17 = PHI <.MEM_344(23), .MEM_280(25)>

encoder/rdo.c:525:9: note: Analyze phi: ivtmp_50 = PHI <8(23), ivtmp_51(25)>

encoder/rdo.c:525:9: note: Access function of PHI: {8, +, 4294967295}_7
encoder/rdo.c:525:9: note: step: 4294967295,  init: 8
encoder/rdo.c:525:9: note: Detected induction.
encoder/rdo.c:525:9: note: === vect_pattern_recog ===
encoder/rdo.c:525:9: note: vect_is_simple_use: operand _114
encoder/rdo.c:525:9: note: def_stmt: _114 = (long unsigned int) j_350;
encoder/rdo.c:525:9: note: type of def: 3.
encoder/rdo.c:525:9: note: vect_is_simple_use: operand j_350
encoder/rdo.c:525:9: note: def_stmt: j_350 = PHI <0(23), j_118(25)>
encoder/rdo.c:525:9: note: type of def: 4.
encoder/rdo.c:525:9: note: vect_is_simple_use: operand 24
encoder/rdo.c:525:9: note: === vect_analyze_data_ref_accesses ===
encoder/rdo.c:525:9: note: not consecutive access _117->score = 1125899906842624;

encoder/rdo.c:525:9: note: not vectorized: complicated access pattern.
encoder/rdo.c:525:9: note: bad data access.

Analyzing loop at encoder/rdo.c:446
encoder/rdo.c:446:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:446:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:446:5: note: not vectorized: control flow in loop.
encoder/rdo.c:446:5: note: bad loop form.

Analyzing loop at encoder/rdo.c:435
encoder/rdo.c:435:34: note: ===== analyze_loop_nest =====
encoder/rdo.c:435:34: note: === vect_analyze_loop_form ===
encoder/rdo.c:435:34: note: not vectorized: control flow in loop.
encoder/rdo.c:435:34: note: bad loop form.
encoder/rdo.c:625:6: note: vectorized 0 loops in function.
x264_quant_dc_trellis (struct x264_t * h, int16_t * dct, int i_quant_cat, int i_qp, int i_ctxBlockCat, int b_intra)
{
  int n$level_idx;
  long int n$score;
  int D.25590;
  int i_state;
  int abs_coefs[64];
  int signs[64];
  struct trellis_node_t nodes[2][8];
  struct trellis_node_t * bnode;
  uint8_t cabac_state_sig[64];
  uint8_t cabac_state_last[64];
  const int b_interlaced;
  int i;
  int j;
  struct 
  {
    uint16_t abs_level;
    uint16_t next;
  } level_tree[1024];
  int i_levels_used;
  int coef;
  int i_coef;
  int abs_level;
  int cost_sig[2];
  int cost_last[2];
  struct trellis_node_t n;
  int unquant_abs_level;
  int d;
  int64_t ssd;
  int node_ctx;
  unsigned int f8_bits;
  int b_ac;
  const uint8_t * iftmp.29_2;
  int _9;
  const uint8_t * iftmp.29_10;
  int[16] * _12;
  long unsigned int _13;
  long unsigned int _14;
  const int * _15;
  uint16_t[16] * _16;
  long unsigned int _18;
  const uint16_t * _19;
  sizetype _25;
  const uint8_t * _26;
  unsigned char _27;
  long unsigned int _28;
  long unsigned int _29;
  int16_t * _30;
  short int _31;
  int _32;
  int _38;
  int _39;
  unsigned int _40;
  long unsigned int _42;
  long unsigned int _43;
  unsigned int ivtmp_46;
  unsigned int ivtmp_47;
  unsigned int ivtmp_48;
  unsigned int ivtmp_49;
  unsigned int ivtmp_50;
  unsigned int ivtmp_51;
  int _54;
  int iftmp.31_55;
  int _59;
  short unsigned int _62;
  int _63;
  uint8_t * _64;
  short unsigned int _65;
  int _66;
  uint8_t * _67;
  short unsigned int _68;
  int _69;
  uint8_t * _70;
  short unsigned int _71;
  int _72;
  uint8_t * _73;
  short unsigned int _74;
  int _75;
  uint8_t * _76;
  short unsigned int _80;
  int iftmp.32_81;
  int _85;
  int _91;
  int _92;
  unsigned char _94;
  long unsigned int _95;
  long unsigned int _96;
  long unsigned int _97;
  long unsigned int _98;
  long unsigned int _100;
  long unsigned int _101;
  struct trellis_node_t * _103;
  long int _104;
  int _106;
  short unsigned int _107;
  long unsigned int _109;
  long int _110;
  long int _111;
  long unsigned int _114;
  long unsigned int _115;
  struct trellis_node_t * _117;
  unsigned char _119;
  unsigned char _120;
  int _132;
  int _133;
  long int _136;
  long int _137;
  long unsigned int _145;
  long unsigned int _146;
  struct trellis_node_t * _147;
  long int _148;
  int _149;
  _Bool _150;
  int _151;
  int _152;
  _Bool _155;
  int _156;
  int _157;
  unsigned int _158;
  int iftmp.37_160;
  int _163;
  unsigned int _164;
  int _166;
  unsigned char _167;
  int _168;
  short unsigned int _169;
  unsigned int _170;
  unsigned char _172;
  int _173;
  unsigned int _174;
  int _175;
  unsigned int _176;
  unsigned char _178;
  unsigned char _181;
  long unsigned int _184;
  long unsigned int _186;
  long unsigned int _187;
  long unsigned int _188;
  long unsigned int _189;
  long unsigned int _190;
  unsigned int ivtmp_194;
  struct trellis_node_t * _197;
  long int _198;
  short unsigned int _199;
  short unsigned int _202;
  long unsigned int _209;
  long unsigned int _210;
  long int _212;
  long int _214;
  sizetype _218;
  const uint8_t * _219;
  unsigned char _220;
  long unsigned int _221;
  long unsigned int _222;
  int16_t * _223;
  short unsigned int _225;
  int _226;
  unsigned short _227;
  unsigned short _228;
  short int _229;
  short unsigned int _230;
  unsigned int ivtmp_237;
  int _244;
  short unsigned int _245;
  short unsigned int _247;
  int _248;
  int _250;
  short unsigned int _251;
  int _252;
  int _253;
  short unsigned int _254;
  int _255;
  int _257;
  short unsigned int _258;
  int _259;
  unsigned char _260;
  unsigned char _262;
  short unsigned int _263;
  unsigned int _264;
  unsigned char _265;
  int _266;
  int _268;
  unsigned int _315;
  unsigned int _316;
  unsigned char _317;
  int _318;
  int _319;
  int _324;
  int iftmp.28_326;
  unsigned int _512;
  unsigned int _513;
  short int _520;
  unsigned int ivtmp_524;
  int pretmp_528;
  int prephitmp_529;
  int prephitmp_530;
  short unsigned int pretmp_534;
  short unsigned int pretmp_536;
  int pretmp_537;
  sizetype pretmp_539;
  const uint8_t * pretmp_540;
  unsigned char pretmp_541;
  long unsigned int pretmp_543;
  long unsigned int pretmp_544;
  int16_t * pretmp_545;
  short int pretmp_546;
  short int prephitmp_547;
  short unsigned int pretmp_552;
  short unsigned int prephitmp_553;
  int pretmp_564;
  int pretmp_566;
  long unsigned int prephitmp_574;
  long unsigned int pretmp_575;
  long unsigned int pretmp_576;
  unsigned int ivtmp_577;
  long unsigned int pretmp_578;
  long unsigned int pretmp_579;
  long unsigned int prephitmp_580;
  _Bool pretmp_583;
  long int pretmp_585;
  long int prephitmp_586;
  int pretmp_608;

  <bb 2>:
  if (i_ctxBlockCat_3(D) == 3)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 3>:
  # iftmp.29_2 = PHI <iftmp.29_10(61), &x264_zigzag_scan2(60)>
  # iftmp.28_326 = PHI <16(61), 4(60)>
  # _324 = PHI <_59(61), _85(60)>
  # prephitmp_529 = PHI <_9(61), pretmp_528(60)>
  # prephitmp_530 = PHI <15(61), 3(60)>
  _12 = h_8(D)->unquant4_mf[i_quant_cat_11(D)];
  _13 = (long unsigned int) i_qp_6(D);
  _14 = _13 * 64;
  _15 = _12 + _14;
  _16 = h_8(D)->quant4_mf[i_quant_cat_11(D)];
  _18 = _13 * 32;
  _19 = _16 + _18;
  # DEBUG h => h_8(D)
  # DEBUG dct => dct_20(D)
  # DEBUG quant_mf => _19
  # DEBUG unquant_mf => _15
  # DEBUG coef_weight => 0B
  # DEBUG zigzag => iftmp.29_2
  # DEBUG i_ctxBlockCat => i_ctxBlockCat_3(D)
  # DEBUG i_lambda2 => _324
  # DEBUG b_ac => 0
  # DEBUG dc => 1
  # DEBUG i_coefs => iftmp.28_326
  # DEBUG idx => 0
  # DEBUG nodes_cur => &nodes[0]
  # DEBUG nodes_prev => &nodes[1]
  # DEBUG D#755 => h_8(D)->mb.b_interlaced
  # DEBUG b_interlaced => D#755
  # DEBUG f => 32768
  # DEBUG i_levels_used => 1
  # DEBUG D#754 => iftmp.28_326 + -1
  # DEBUG i => D#754
  # DEBUG i => D#754
  pretmp_534 = *_19;
  pretmp_536 = pretmp_534 >> 1;
  pretmp_537 = (int) pretmp_536;

  <bb 4>:
  # i_340 = PHI <i_41(7), prephitmp_530(3)>
  # DEBUG i => i_340
  _25 = (sizetype) i_340;
  _26 = iftmp.29_2 + _25;
  _27 = *_26;
  _28 = (long unsigned int) _27;
  _29 = _28 * 2;
  _30 = dct_20(D) + _29;
  _31 = *_30;
  _32 = (int) _31;
  _38 = _32 * pretmp_537;
  _39 = _38 + 32767;
  _40 = (unsigned int) _39;
  if (_40 > 65535)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  # _520 = PHI <_31(4)>
  # i_514 = PHI <i_340(4)>
  goto <bb 8>;

  <bb 6>:
  i_41 = i_340 + -1;
  # DEBUG i => i_41
  # DEBUG i => i_41
  if (i_41 >= 0)
    goto <bb 7>;
  else
    goto <bb 62>;

  <bb 7>:
  goto <bb 4>;

  <bb 8>:
  # i_338 = PHI <i_514(5), i_56(11)>
  # prephitmp_547 = PHI <_520(5), pretmp_546(11)>
  # DEBUG i => i_338
  coef_53 = (int) prephitmp_547;
  # DEBUG coef => coef_53
  _54 = ABS_EXPR <coef_53>;
  abs_coefs[i_338] = _54;
  if (coef_53 < 0)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:

  <bb 10>:
  # iftmp.31_55 = PHI <-1(8), 1(9)>
  signs[i_338] = iftmp.31_55;
  i_56 = i_338 + -1;
  # DEBUG i => i_56
  # DEBUG i => i_56
  if (i_56 != -1)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  pretmp_539 = (sizetype) i_56;
  pretmp_540 = iftmp.29_2 + pretmp_539;
  pretmp_541 = *pretmp_540;
  pretmp_543 = (long unsigned int) pretmp_541;
  pretmp_544 = pretmp_543 * 2;
  pretmp_545 = dct_20(D) + pretmp_544;
  pretmp_546 = *pretmp_545;
  goto <bb 8>;

  <bb 12>:
  # DEBUG i => 1
  MEM[(struct trellis_node_t *)&nodes + 24B].score = 1125899906842624;
  # DEBUG i => 2
  # DEBUG i => 2
  MEM[(struct trellis_node_t *)&nodes + 48B].score = 1125899906842624;
  # DEBUG i => 3
  # DEBUG i => 3
  MEM[(struct trellis_node_t *)&nodes + 72B].score = 1125899906842624;
  # DEBUG i => 4
  # DEBUG i => 4
  MEM[(struct trellis_node_t *)&nodes + 96B].score = 1125899906842624;
  # DEBUG i => 5
  # DEBUG i => 5
  MEM[(struct trellis_node_t *)&nodes + 120B].score = 1125899906842624;
  # DEBUG i => 6
  # DEBUG i => 6
  MEM[(struct trellis_node_t *)&nodes + 144B].score = 1125899906842624;
  # DEBUG i => 7
  # DEBUG i => 7
  MEM[(struct trellis_node_t *)&nodes + 168B].score = 1125899906842624;
  # DEBUG i => 8
  # DEBUG i => 8
  MEM[(struct trellis_node_t *)&nodes].score = 0;
  MEM[(struct trellis_node_t *)&nodes].level_idx = 0;
  level_tree[0].abs_level = 0;
  level_tree[0].next = 0;
  if (i_ctxBlockCat_3(D) != 3)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _62 = significant_coeff_flag_offset[prephitmp_529][i_ctxBlockCat_3(D)];
  _63 = (int) _62;
  _64 = &h_8(D)->cabac.state[_63];
  # DEBUG __dest => &cabac_state_sig
  # DEBUG __src => _64
  # DEBUG __len => 15
  __builtin_memcpy (&cabac_state_sig, _64, 15);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  _65 = last_coeff_flag_offset[prephitmp_529][i_ctxBlockCat_3(D)];
  _66 = (int) _65;
  _67 = &h_8(D)->cabac.state[_66];
  # DEBUG __dest => &cabac_state_last
  # DEBUG __src => _67
  # DEBUG __len => 15
  __builtin_memcpy (&cabac_state_last, _67, 15);
  goto <bb 15>;

  <bb 14>:
  _68 = significant_coeff_flag_offset[prephitmp_529][3];
  _69 = (int) _68;
  _70 = &h_8(D)->cabac.state[_69];
  # DEBUG __dest => &cabac_state_sig
  # DEBUG __src => _70
  # DEBUG __len => 3
  __builtin_memcpy (&cabac_state_sig, _70, 3);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  _71 = last_coeff_flag_offset[prephitmp_529][3];
  _72 = (int) _71;
  _73 = &h_8(D)->cabac.state[_72];
  # DEBUG __dest => &cabac_state_last
  # DEBUG __src => _73
  # DEBUG __len => 3
  __builtin_memcpy (&cabac_state_last, _73, 3);

  <bb 15>:
  _74 = coeff_abs_level_m1_offset[i_ctxBlockCat_3(D)];
  _75 = (int) _74;
  _76 = &h_8(D)->cabac.state[_75];
  # DEBUG __dest => &MEM[(struct trellis_node_t *)&nodes].cabac_state
  # DEBUG __src => _76
  # DEBUG __len => 10
  __builtin_memcpy (&MEM[(struct trellis_node_t *)&nodes].cabac_state, _76, 10);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  # DEBUG i => i_514
  # DEBUG i_levels_used => 1
  # DEBUG i => i_514
  # DEBUG nodes_prev => &nodes[1]
  # DEBUG nodes_cur => &nodes[0]

  <bb 16>:
  # i_358 = PHI <i_207(51), i_514(15)>
  # bnode_352 = PHI <bnode_240(51), &nodes[0](15)>
  # bnode_351 = PHI <bnode_241(51), &nodes[1](15)>
  # n$level_idx_375 = PHI <n$level_idx_242(51), 1(15)>
  # prephitmp_553 = PHI <pretmp_552(51), pretmp_534(15)>
  # DEBUG i_levels_used => n$level_idx_375
  # DEBUG i => i_358
  # DEBUG nodes_prev => bnode_351
  # DEBUG nodes_cur => bnode_352
  i_coef_78 = abs_coefs[i_358];
  # DEBUG i_coef => i_coef_78
  _80 = prephitmp_553 >> 1;
  iftmp.32_81 = (int) _80;
  _91 = i_coef_78 * iftmp.32_81;
  _92 = _91 + 32768;
  abs_level_93 = _92 >> 16;
  # DEBUG q => abs_level_93
  if (abs_level_93 == 0)
    goto <bb 17>;
  else
    goto <bb 23>;

  <bb 17>:
  # DEBUG D#33 => &cabac_state_sig[i_358]
  _94 = MEM[(uint8_t *)&cabac_state_sig][i_358];
  # DEBUG D#1 => D#33
  # DEBUG b => 0
  # DEBUG state => D#1
  _244 = (int) _94;
  _245 = x264_cabac_entropy[_244][0];
  # DEBUG b => NULL
  _95 = (long unsigned int) _245;
  _96 = (long unsigned int) _324;
  _97 = _95 * _96;
  _98 = _97 >> 4;
  # DEBUG cost_sig0 => (const uint32_t) _98
  # DEBUG j => 1
  # DEBUG i_levels_used => n$level_idx_375
  # DEBUG j => 1

  <bb 18>:
  # j_357 = PHI <j_112(21), 1(17)>
  # n$level_idx_354 = PHI <n$level_idx_234(21), n$level_idx_375(17)>
  # ivtmp_237 = PHI <ivtmp_524(21), 7(17)>
  # DEBUG i_levels_used => n$level_idx_354
  # DEBUG j => j_357
  _100 = (long unsigned int) j_357;
  _101 = _100 * 24;
  _103 = bnode_352 + _101;
  _104 = _103->score;
  if (_104 != 1125899906842624)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:
  level_tree[n$level_idx_354].abs_level = 0;
  _106 = _103->level_idx;
  _107 = (short unsigned int) _106;
  level_tree[n$level_idx_354].next = _107;
  _103->level_idx = n$level_idx_354;
  n$level_idx_108 = n$level_idx_354 + 1;
  # DEBUG i_levels_used => n$level_idx_108
  _109 = _98 & 4294967295;
  _110 = (long int) _109;
  _111 = _104 + _110;
  _103->score = _111;

  <bb 20>:
  # n$level_idx_234 = PHI <n$level_idx_354(18), n$level_idx_108(19)>
  # DEBUG i_levels_used => n$level_idx_234
  j_112 = j_357 + 1;
  # DEBUG j => j_112
  # DEBUG i_levels_used => n$level_idx_234
  # DEBUG j => j_112
  ivtmp_524 = ivtmp_237 - 1;
  if (ivtmp_524 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  goto <bb 18>;

  <bb 22>:
  # n$level_idx_519 = PHI <n$level_idx_234(20)>
  cost_sig ={v} {CLOBBER};
  cost_last ={v} {CLOBBER};
  n ={v} {CLOBBER};
  # DEBUG D#748 => {CLOBBER}
  # DEBUG n$score => D#748
  # DEBUG D#749 => {CLOBBER}
  # DEBUG n$level_idx => D#749
  goto <bb 50>;

  <bb 23>:

  <bb 24>:
  # j_350 = PHI <0(23), j_118(25)>
  # ivtmp_50 = PHI <8(23), ivtmp_51(25)>
  # DEBUG j => j_350
  _114 = (long unsigned int) j_350;
  _115 = _114 * 24;
  _117 = bnode_351 + _115;
  _117->score = 1125899906842624;
  j_118 = j_350 + 1;
  # DEBUG j => j_118
  # DEBUG j => j_118
  ivtmp_51 = ivtmp_50 - 1;
  if (ivtmp_51 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  goto <bb 24>;

  <bb 26>:
  if (i_358 < prephitmp_530)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  # DEBUG D#29 => &cabac_state_sig[i_358]
  _119 = MEM[(uint8_t *)&cabac_state_sig][i_358];
  # DEBUG D#1 => D#29
  # DEBUG b => 0
  # DEBUG state => D#1
  _257 = (int) _119;
  _258 = x264_cabac_entropy[_257][0];
  _259 = (int) _258;
  # DEBUG b => NULL
  cost_sig[0] = _259;
  # DEBUG D#30 => &cabac_state_sig[i_358]
  # DEBUG D#1 => D#30
  # DEBUG b => 1
  # DEBUG state => D#1
  _254 = x264_cabac_entropy[_257][1];
  _255 = (int) _254;
  # DEBUG b => NULL
  cost_sig[1] = _255;
  # DEBUG D#31 => &cabac_state_last[i_358]
  _120 = MEM[(uint8_t *)&cabac_state_last][i_358];
  # DEBUG D#1 => D#31
  # DEBUG b => 0
  # DEBUG state => D#1
  _250 = (int) _120;
  _251 = x264_cabac_entropy[_250][0];
  _252 = (int) _251;
  # DEBUG b => NULL
  cost_last[0] = _252;
  # DEBUG D#32 => &cabac_state_last[i_358]
  # DEBUG D#1 => D#32
  # DEBUG b => 1
  # DEBUG state => D#1
  _247 = x264_cabac_entropy[_250][1];
  _248 = (int) _247;
  # DEBUG b => NULL
  cost_last[1] = _248;
  goto <bb 29>;

  <bb 28>:
  cost_sig[1] = 0;
  cost_sig[0] = 0;
  cost_last[1] = 0;
  cost_last[0] = 0;

  <bb 29>:
  # DEBUG abs_level => abs_level_93
  # DEBUG i_levels_used => n$level_idx_375
  _253 = abs_level_93 + -1;
  pretmp_564 = *_15;
  pretmp_566 = pretmp_564 << 1;

  <bb 30>:
  # abs_level_366 = PHI <abs_level_93(29), pretmp_608(48)>
  # n$level_idx_224 = PHI <n$level_idx_375(29), n$level_idx_518(48)>
  # ivtmp_48 = PHI <2(29), ivtmp_49(48)>
  # DEBUG abs_level => abs_level_366
  # DEBUG i_levels_used => n$level_idx_224
  _132 = abs_level_366 * pretmp_566;
  _133 = _132 + 128;
  unquant_abs_level_134 = _133 >> 8;
  # DEBUG unquant_abs_level => unquant_abs_level_134
  d_135 = i_coef_78 - unquant_abs_level_134;
  # DEBUG d => d_135
  _136 = (long int) d_135;
  _137 = _136 * _136;
  ssd_143 = _137 * 256;
  # DEBUG ssd => ssd_143
  # DEBUG ssd => ssd_143
  # DEBUG j => 0
  # DEBUG i_levels_used => n$level_idx_224
  # DEBUG j => 0
  pretmp_608 = abs_level_366 + -1;
  pretmp_583 = pretmp_608 > 0;
  pretmp_585 = (long int) pretmp_583;
  iftmp.37_160 = abs_level_366 <= 14 ? pretmp_608 : 14;
  prephitmp_586 = abs_level_366 <= 14 ? pretmp_585 : 1;
  _513 = (unsigned int) abs_level_366;
  _512 = _513 + 4294967281;
  _173 = (int) _512;
  _174 = (unsigned int) _173;
  _315 = _174 + 1;
  _316 = _315 >> 8;

  <bb 31>:
  # node_ctx_369 = PHI <node_ctx_204(46), 0(30)>
  # n$level_idx_370 = PHI <n$level_idx_238(46), n$level_idx_224(30)>
  # ivtmp_46 = PHI <ivtmp_47(46), 8(30)>
  # DEBUG i_levels_used => n$level_idx_370
  # DEBUG j => node_ctx_369
  # DEBUG node_ctx => node_ctx_369
  _145 = (long unsigned int) node_ctx_369;
  _146 = _145 * 24;
  _147 = bnode_352 + _146;
  _148 = _147->score;
  if (_148 == 1125899906842624)
    goto <bb 45>;
  else
    goto <bb 32>;

  <bb 32>:
  n = *_147;
  # DEBUG n$score => _148
  n$level_idx_130 = MEM[(struct trellis_node_t *)_147 + 8B];
  # DEBUG n$level_idx => n$level_idx_130
  _149 = abs_level_366 | node_ctx_369;
  if (_149 != 0)
    goto <bb 33>;
  else
    goto <bb 43>;

  <bb 33>:
  _150 = abs_level_366 != 0;
  _151 = (int) _150;
  _152 = cost_sig[_151];
  f8_bits_153 = (unsigned int) _152;
  # DEBUG f8_bits => f8_bits_153
  if (abs_level_366 != 0)
    goto <bb 34>;
  else
    goto <bb 42>;

  <bb 34>:
  # DEBUG i_prefix => iftmp.37_160
  _155 = node_ctx_369 == 0;
  _156 = (int) _155;
  _157 = cost_last[_156];
  _158 = (unsigned int) _157;
  f8_bits_159 = f8_bits_153 + _158;
  # DEBUG f8_bits => f8_bits_159
  # DEBUG D#753 => iftmp.37_160 > 0
  _163 = coeff_abs_level1_ctx[node_ctx_369];
  # DEBUG D#141 => &n.cabac_state[_163]
  # DEBUG state => D#141
  # DEBUG b => (long int) D#753
  _260 = MEM[(uint8_t *)&n].cabac_state[_163];
  i_state_261 = (int) _260;
  # DEBUG i_state => i_state_261
  _262 = x264_cabac_transition[i_state_261][prephitmp_586];
  MEM[(uint8_t *)&n].cabac_state[_163] = _262;
  _263 = x264_cabac_entropy[i_state_261][prephitmp_586];
  # DEBUG state => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _164 = (unsigned int) _263;
  f8_bits_165 = f8_bits_159 + _164;
  # DEBUG f8_bits => f8_bits_165
  if (iftmp.37_160 > 0)
    goto <bb 35>;
  else
    goto <bb 41>;

  <bb 35>:
  _166 = coeff_abs_levelgt1_ctx[node_ctx_369];
  # DEBUG D#34 => &n.cabac_state[_166]
  # DEBUG ctx => D#34
  _167 = MEM[(uint8_t *)&n].cabac_state[_166];
  _168 = (int) _167;
  _169 = cabac_size_unary[iftmp.37_160][_168];
  _170 = (unsigned int) _169;
  f8_bits_171 = f8_bits_165 + _170;
  # DEBUG f8_bits => f8_bits_171
  _172 = cabac_transition_unary[iftmp.37_160][_168];
  MEM[(uint8_t *)&n].cabac_state[_166] = _172;
  if (abs_level_366 > 14)
    goto <bb 36>;
  else
    goto <bb 40>;

  <bb 36>:
  # DEBUG D#756 => (unsigned int) _173
  # DEBUG val => D#756
  if (_173 <= 254)
    goto <bb 37>;
  else
    goto <bb 38>;

  <bb 37>:
  _264 = _174 + 1;
  _265 = x264_ue_size_tab[_264];
  _266 = (int) _265;
  goto <bb 39>;

  <bb 38>:
  # DEBUG val => D#756
  _317 = x264_ue_size_tab[_316];
  _318 = (int) _317;
  _319 = _318 + 16;
  # DEBUG val => NULL

  <bb 39>:
  # _268 = PHI <_266(37), _319(38)>
  # DEBUG val => NULL
  _175 = _268 << 8;
  _176 = (unsigned int) _175;
  f8_bits_177 = f8_bits_171 + _176;
  # DEBUG f8_bits => f8_bits_177

  <bb 40>:
  # f8_bits_236 = PHI <f8_bits_171(35), f8_bits_177(39)>
  # DEBUG f8_bits => f8_bits_236
  _178 = coeff_abs_level_transition[1][node_ctx_369];
  node_ctx_179 = (int) _178;
  # DEBUG node_ctx => node_ctx_179
  pretmp_575 = (long unsigned int) node_ctx_179;
  pretmp_578 = pretmp_575 * 24;
  goto <bb 42>;

  <bb 41>:
  f8_bits_180 = f8_bits_165 + 256;
  # DEBUG f8_bits => f8_bits_180
  _181 = coeff_abs_level_transition[0][node_ctx_369];
  node_ctx_182 = (int) _181;
  # DEBUG node_ctx => node_ctx_182
  pretmp_576 = (long unsigned int) node_ctx_182;
  pretmp_579 = pretmp_576 * 24;

  <bb 42>:
  # f8_bits_185 = PHI <f8_bits_153(33), f8_bits_236(40), f8_bits_180(41)>
  # prephitmp_580 = PHI <_146(33), pretmp_578(40), pretmp_579(41)>
  # DEBUG f8_bits => f8_bits_185
  # DEBUG node_ctx => NULL
  _184 = (long unsigned int) _148;
  _186 = (long unsigned int) f8_bits_185;
  _187 = (long unsigned int) _324;
  _188 = _186 * _187;
  _189 = _188 >> 4;
  _190 = _184 + _189;
  n$score_191 = (long int) _190;
  # DEBUG n$score => n$score_191

  <bb 43>:
  # n$score_296 = PHI <_148(32), n$score_191(42)>
  # prephitmp_574 = PHI <0(32), prephitmp_580(42)>
  # DEBUG n$score => n$score_296
  # DEBUG node_ctx => NULL
  n$score_193 = ssd_143 + n$score_296;
  # DEBUG n$score => n$score_193
  _197 = bnode_351 + prephitmp_574;
  _198 = _197->score;
  if (n$score_193 < _198)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  _199 = (short unsigned int) abs_level_366;
  level_tree[n$level_idx_370].abs_level = _199;
  _202 = (short unsigned int) n$level_idx_130;
  level_tree[n$level_idx_370].next = _202;
  # DEBUG n$level_idx => n$level_idx_370
  n$level_idx_203 = n$level_idx_370 + 1;
  # DEBUG i_levels_used => n$level_idx_203
  MEM[(struct  *)&n] = n$score_193;
  MEM[(struct  *)&n + 8B] = n$level_idx_370;
  *_197 = n;

  <bb 45>:
  # n$level_idx_238 = PHI <n$level_idx_370(31), n$level_idx_370(43), n$level_idx_203(44)>
  # DEBUG i_levels_used => n$level_idx_238
  node_ctx_204 = node_ctx_369 + 1;
  # DEBUG j => node_ctx_204
  # DEBUG i_levels_used => n$level_idx_238
  # DEBUG j => node_ctx_204
  ivtmp_47 = ivtmp_46 - 1;
  if (ivtmp_47 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:
  goto <bb 31>;

  <bb 47>:
  # n$level_idx_518 = PHI <n$level_idx_238(45)>
  # DEBUG D#752 => abs_level_366 + -1
  # DEBUG abs_level => D#752
  # DEBUG abs_level => D#752
  # DEBUG i_levels_used => n$level_idx_518
  ivtmp_49 = ivtmp_48 - 1;
  if (ivtmp_49 != 0)
    goto <bb 48>;
  else
    goto <bb 49>;

  <bb 48>:
  goto <bb 30>;

  <bb 49>:
  # n$level_idx_517 = PHI <n$level_idx_518(47)>
  cost_sig ={v} {CLOBBER};
  cost_last ={v} {CLOBBER};
  n ={v} {CLOBBER};
  # DEBUG D#750 => {CLOBBER}
  # DEBUG n$score => D#750
  # DEBUG D#751 => {CLOBBER}
  # DEBUG n$level_idx => D#751

  <bb 50>:
  # bnode_240 = PHI <bnode_352(22), bnode_351(49)>
  # bnode_241 = PHI <bnode_351(22), bnode_352(49)>
  # n$level_idx_242 = PHI <n$level_idx_519(22), n$level_idx_517(49)>
  # DEBUG i_levels_used => n$level_idx_242
  # DEBUG nodes_prev => bnode_241
  # DEBUG nodes_cur => bnode_240
  i_207 = i_358 + -1;
  # DEBUG i => i_207
  # DEBUG i_levels_used => n$level_idx_242
  # DEBUG i => i_207
  # DEBUG nodes_prev => bnode_241
  # DEBUG nodes_cur => bnode_240
  if (i_207 != -1)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 51>:
  pretmp_552 = *_19;
  goto <bb 16>;

  <bb 52>:
  # bnode_516 = PHI <bnode_240(50)>

  <bb 53>:
  # j_371 = PHI <1(52), j_215(54)>
  # bnode_372 = PHI <bnode_516(52), bnode_243(54)>
  # ivtmp_194 = PHI <7(52), ivtmp_577(54)>
  # DEBUG j => NULL
  # DEBUG bnode => NULL
  _209 = (long unsigned int) j_371;
  _210 = _209 * 24;
  bnode_211 = bnode_516 + _210;
  _212 = bnode_211->score;
  _214 = bnode_372->score;
  bnode_243 = _212 < _214 ? bnode_211 : bnode_372;
  # DEBUG bnode => bnode_243
  j_215 = j_371 + 1;
  # DEBUG j => j_215
  # DEBUG j => j_215
  # DEBUG bnode => bnode_243
  ivtmp_577 = ivtmp_194 - 1;
  if (ivtmp_577 != 0)
    goto <bb 54>;
  else
    goto <bb 55>;

  <bb 54>:
  goto <bb 53>;

  <bb 55>:
  # bnode_515 = PHI <bnode_243(53)>
  j_216 = bnode_515->level_idx;
  # DEBUG j => j_216
  # DEBUG i => 0
  # DEBUG j => j_216
  # DEBUG i => 0

  <bb 56>:
  # b_ac_373 = PHI <b_ac_232(57), 0(55)>
  # j_374 = PHI <j_231(57), j_216(55)>
  # DEBUG j => j_374
  # DEBUG i => b_ac_373
  _218 = (sizetype) b_ac_373;
  _219 = iftmp.29_2 + _218;
  _220 = *_219;
  _221 = (long unsigned int) _220;
  _222 = _221 * 2;
  _223 = dct_20(D) + _222;
  _225 = level_tree[j_374].abs_level;
  _226 = signs[b_ac_373];
  _227 = (unsigned short) _226;
  _228 = _225 * _227;
  _229 = (short int) _228;
  *_223 = _229;
  _230 = level_tree[j_374].next;
  j_231 = (int) _230;
  # DEBUG j => j_231
  b_ac_232 = b_ac_373 + 1;
  # DEBUG i => b_ac_232
  # DEBUG j => j_231
  # DEBUG i => b_ac_232
  if (b_ac_232 < iftmp.28_326)
    goto <bb 57>;
  else
    goto <bb 58>;

  <bb 57>:
  goto <bb 56>;

  <bb 58>:
  abs_coefs ={v} {CLOBBER};
  signs ={v} {CLOBBER};
  nodes ={v} {CLOBBER};
  cabac_state_sig ={v} {CLOBBER};
  cabac_state_last ={v} {CLOBBER};
  level_tree ={v} {CLOBBER};

  <bb 59>:
  # DEBUG h => NULL
  # DEBUG dct => NULL
  # DEBUG quant_mf => NULL
  # DEBUG unquant_mf => NULL
  # DEBUG coef_weight => NULL
  # DEBUG zigzag => NULL
  # DEBUG i_ctxBlockCat => NULL
  # DEBUG i_lambda2 => NULL
  # DEBUG b_ac => NULL
  # DEBUG dc => NULL
  # DEBUG i_coefs => NULL
  # DEBUG idx => NULL
  # DEBUG f8_bits => NULL
  # DEBUG node_ctx => NULL
  # DEBUG psy_weight => NULL
  # DEBUG psy_value => NULL
  # DEBUG predicted_coef => NULL
  # DEBUG orig_coef => NULL
  # DEBUG ssd => NULL
  # DEBUG d => NULL
  # DEBUG unquant_abs_level => NULL
  # DEBUG abs_level => NULL
  # DEBUG i_coef => NULL
  # DEBUG ctx_last => NULL
  # DEBUG ctx_sig => NULL
  # DEBUG coef => NULL
  # DEBUG i_levels_used => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  # DEBUG b_interlaced => NULL
  # DEBUG bnode => NULL
  return;

  <bb 60>:
  _85 = lambda2_tab[b_intra_5(D)][i_qp_6(D)];
  pretmp_528 = h_8(D)->mb.b_interlaced;
  goto <bb 3>;

  <bb 61>:
  _59 = lambda2_tab[b_intra_5(D)][i_qp_6(D)];
  _9 = h_8(D)->mb.b_interlaced;
  iftmp.29_10 = &x264_zigzag_scan4[_9];
  goto <bb 3>;

  <bb 62>:
  _42 = (long unsigned int) iftmp.28_326;
  _43 = _42 * 2;
  # DEBUG __dest => dct_20(D)
  # DEBUG __ch => 0
  # DEBUG __len => _43
  __builtin_memset (dct_20(D), 0, _43);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  abs_coefs ={v} {CLOBBER};
  signs ={v} {CLOBBER};
  nodes ={v} {CLOBBER};
  cabac_state_sig ={v} {CLOBBER};
  cabac_state_last ={v} {CLOBBER};
  level_tree ={v} {CLOBBER};
  goto <bb 59>;

}



;; Function x264_quant_4x4_trellis (x264_quant_4x4_trellis, funcdef_no=189, decl_uid=7885, cgraph_uid=189, symbol_order=251)


Analyzing loop at encoder/rdo.c:616
encoder/rdo.c:616:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:616:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:616:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [(int) _4 + 1, + , 1](no_overflow) <= 15
  bounds on difference of bases: -2147483632 ... 2147483662
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:442, generic-match.c:3611
Applying pattern match.pd:628, generic-match.c:1309
  result:
    zero if (int) _4 > 15
    # of iterations 15 - (unsigned int) _4, bounded by 2147483663
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:502, generic-match.c:3797
encoder/rdo.c:616:5: note: Symbolic number of iterations is (int) _4 <= 15 ? 16 - (unsigned int) _4 : 1
encoder/rdo.c:616:5: note: === vect_analyze_data_refs ===
Creating dr for *_260
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:749, generic-match.c:1467
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:749, generic-match.c:1467
	base_address: (const uint8_t *) (&x264_zigzag_scan4 + (sizetype) _11 * 16) + (sizetype) b_ac_5
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *(const uint8_t *) (&x264_zigzag_scan4 + (sizetype) _11 * 16) + (sizetype) b_ac_5
	Access function 0: {0B, +, 1}_1
Creating dr for level_tree[j_392].abs_level
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: level_tree
	Access function 0: 0
	Access function 1: scev_not_known;
Creating dr for signs[b_ac_393]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &signs
	offset from base address: (ssizetype) ((sizetype) b_ac_5 * 4)
	constant offset from base address: 0
	step: 4
	aligned to: 4
	base_object: signs
	Access function 0: {b_ac_5, +, 1}_1
Creating dr for *_264
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_264
Creating dr for level_tree[j_392].next
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: level_tree
	Access function 0: 16
	Access function 1: scev_not_known;
encoder/rdo.c:616:5: note: got vectype for stmt: _261 = *_260;
const vector(16) unsigned char
Creating dr for level_tree[j_392].abs_level
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &level_tree
	offset from base address: (ssizetype) ((sizetype) j_392 * 4)
	constant offset from base address: 0
	step: 0
	aligned to: 4
	base_object: level_tree[j_392].abs_level
encoder/rdo.c:616:5: note: got vectype for stmt: _266 = level_tree[j_392].abs_level;
vector(8) short unsigned int
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
encoder/rdo.c:616:5: note: not vectorized: not suitable for gather load _266 = level_tree[j_392].abs_level;

encoder/rdo.c:616:5: note: bad data references.

Analyzing loop at encoder/rdo.c:611
encoder/rdo.c:611:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:611:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:611:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [6, + , 4294967295] != 0
  bounds on difference of bases: -6 ... -6
  result:
    # of iterations 6, bounded by 6
encoder/rdo.c:611:5: note: === vect_analyze_data_refs ===
Creating dr for bnode_252->score
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: bnode_535
	offset from base address: 0
	constant offset from base address: 24
	step: 24
	aligned to: 128
	base_object: *bnode_535
	Access function 0: 0
	Access function 1: {24B, +, 24}_2
Creating dr for bnode_26->score
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *bnode_26
	Access function 0: 0
encoder/rdo.c:611:5: note: got vectype for stmt: _253 = bnode_252->score;
vector(2) long int
Creating dr for bnode_26->score
analyze_innermost: success.
	base_address: bnode_26
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 128
	base_object: bnode_26->score
encoder/rdo.c:611:5: note: got vectype for stmt: _255 = bnode_26->score;
vector(2) long int
encoder/rdo.c:611:5: note: not vectorized: not suitable for gather load _255 = bnode_26->score;

encoder/rdo.c:611:5: note: bad data references.

Analyzing loop at encoder/rdo.c:491
encoder/rdo.c:491:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:491:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:491:5: note: not vectorized: multiple nested loops.
encoder/rdo.c:491:5: note: bad loop form.

Analyzing loop at encoder/rdo.c:506
encoder/rdo.c:506:13: note: ===== analyze_loop_nest =====
encoder/rdo.c:506:13: note: === vect_analyze_loop_form ===
encoder/rdo.c:506:13: note: not vectorized: control flow in loop.
encoder/rdo.c:506:13: note: bad loop form.

Analyzing loop at encoder/rdo.c:545
encoder/rdo.c:545:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:545:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:545:9: note: ===== analyze_loop_nest_1 =====
encoder/rdo.c:545:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:545:9: note: not vectorized: control flow in loop.
encoder/rdo.c:545:9: note: bad inner-loop form.
encoder/rdo.c:545:9: note: not vectorized: Bad inner loop.
encoder/rdo.c:545:9: note: bad loop form.

Analyzing loop at encoder/rdo.c:563
encoder/rdo.c:563:13: note: ===== analyze_loop_nest =====
encoder/rdo.c:563:13: note: === vect_analyze_loop_form ===
encoder/rdo.c:563:13: note: not vectorized: control flow in loop.
encoder/rdo.c:563:13: note: bad loop form.

Analyzing loop at encoder/rdo.c:525
encoder/rdo.c:525:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:525:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:525:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 7
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/rdo.c:525:9: note: === vect_analyze_data_refs ===
Creating dr for _126->score
analyze_innermost: success.
	base_address: bnode_60
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 128
	base_object: *bnode_60
	Access function 0: 0
	Access function 1: {0B, +, 24}_7
encoder/rdo.c:525:9: note: got vectype for stmt: _126->score = 1125899906842624;
vector(2) long int
encoder/rdo.c:525:9: note: === vect_analyze_scalar_cycles ===
encoder/rdo.c:525:9: note: Analyze phi: j_362 = PHI <0(19), j_127(21)>

encoder/rdo.c:525:9: note: Access function of PHI: {0, +, 1}_7
encoder/rdo.c:525:9: note: step: 1,  init: 0
encoder/rdo.c:525:9: note: Detected induction.
encoder/rdo.c:525:9: note: Analyze phi: .MEM_376 = PHI <.MEM_389(19), .MEM_37(21)>

encoder/rdo.c:525:9: note: Analyze phi: ivtmp_52 = PHI <8(19), ivtmp_53(21)>

encoder/rdo.c:525:9: note: Access function of PHI: {8, +, 4294967295}_7
encoder/rdo.c:525:9: note: step: 4294967295,  init: 8
encoder/rdo.c:525:9: note: Detected induction.
encoder/rdo.c:525:9: note: === vect_pattern_recog ===
encoder/rdo.c:525:9: note: vect_is_simple_use: operand _123
encoder/rdo.c:525:9: note: def_stmt: _123 = (long unsigned int) j_362;
encoder/rdo.c:525:9: note: type of def: 3.
encoder/rdo.c:525:9: note: vect_is_simple_use: operand j_362
encoder/rdo.c:525:9: note: def_stmt: j_362 = PHI <0(19), j_127(21)>
encoder/rdo.c:525:9: note: type of def: 4.
encoder/rdo.c:525:9: note: vect_is_simple_use: operand 24
encoder/rdo.c:525:9: note: === vect_analyze_data_ref_accesses ===
encoder/rdo.c:525:9: note: not consecutive access _126->score = 1125899906842624;

encoder/rdo.c:525:9: note: not vectorized: complicated access pattern.
encoder/rdo.c:525:9: note: bad data access.

Analyzing loop at encoder/rdo.c:446
encoder/rdo.c:446:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:446:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:446:5: note: not vectorized: control flow in loop.
encoder/rdo.c:446:5: note: bad loop form.

Analyzing loop at encoder/rdo.c:435
encoder/rdo.c:435:34: note: ===== analyze_loop_nest =====
encoder/rdo.c:435:34: note: === vect_analyze_loop_form ===
encoder/rdo.c:435:34: note: not vectorized: control flow in loop.
encoder/rdo.c:435:34: note: bad loop form.
encoder/rdo.c:634:6: note: vectorized 0 loops in function.
x264_quant_4x4_trellis (struct x264_t * h, int16_t[4] * dct, int i_quant_cat, int i_qp, int i_ctxBlockCat, int b_intra, int idx)
{
  int n$level_idx;
  long int n$score;
  int D.25655;
  int i_state;
  int abs_coefs[64];
  int signs[64];
  struct trellis_node_t nodes[2][8];
  struct trellis_node_t * bnode;
  uint8_t cabac_state_sig[64];
  uint8_t cabac_state_last[64];
  int i;
  int j;
  struct 
  {
    uint16_t abs_level;
    uint16_t next;
  } level_tree[1024];
  int i_levels_used;
  int coef;
  int i_coef;
  int abs_level;
  int cost_sig[2];
  int cost_last[2];
  struct trellis_node_t n;
  int unquant_abs_level;
  int d;
  int64_t ssd;
  int predicted_coef;
  int psy_value;
  int node_ctx;
  unsigned int f8_bits;
  int b_ac;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  int _9;
  int _11;
  const uint8_t[16] * _12;
  int[16] * _14;
  int[16] * _16;
  long unsigned int _17;
  long unsigned int _18;
  uint16_t[16] * _19;
  long unsigned int _21;
  const uint16_t * _22;
  sizetype _28;
  const uint8_t * _29;
  unsigned char _30;
  long unsigned int _31;
  long unsigned int _32;
  int16_t * _33;
  short int _34;
  int _35;
  const uint16_t * _38;
  short unsigned int _39;
  int iftmp.30_40;
  int _42;
  int _43;
  unsigned int _44;
  unsigned int ivtmp_48;
  unsigned int ivtmp_49;
  unsigned int ivtmp_50;
  unsigned int ivtmp_51;
  unsigned int ivtmp_52;
  unsigned int ivtmp_53;
  int _56;
  int iftmp.31_57;
  short unsigned int _77;
  int _78;
  uint8_t * _79;
  short unsigned int _80;
  int _81;
  uint8_t * _82;
  short unsigned int _83;
  int _84;
  uint8_t * _85;
  sizetype _91;
  long unsigned int _94;
  int iftmp.32_98;
  int _100;
  int _101;
  unsigned char _103;
  long unsigned int _104;
  long unsigned int _105;
  long unsigned int _106;
  long unsigned int _107;
  long unsigned int _109;
  long unsigned int _110;
  struct trellis_node_t * _112;
  long int _113;
  int _115;
  short unsigned int _116;
  long unsigned int _118;
  long int _119;
  long int _120;
  long unsigned int _123;
  long unsigned int _124;
  struct trellis_node_t * _126;
  unsigned char _128;
  unsigned char _129;
  int _139;
  int _140;
  short int _146;
  int iftmp.34_147;
  int _148;
  int _149;
  int _152;
  int _153;
  int _154;
  int _162;
  short unsigned int _163;
  int iftmp.35_164;
  long int _165;
  long int _166;
  long unsigned int _167;
  const int * _168;
  int _169;
  long int _170;
  long int _171;
  int _173;
  long int _174;
  long int _176;
  long int _177;
  long unsigned int _178;
  const int * _179;
  int _180;
  long int iftmp.36_181;
  int _184;
  long unsigned int _185;
  long unsigned int _186;
  struct trellis_node_t * _187;
  long int _188;
  int _189;
  _Bool _190;
  int _191;
  int _192;
  _Bool _195;
  int _196;
  int _197;
  unsigned int _198;
  int iftmp.37_200;
  int _203;
  unsigned int _204;
  int _206;
  unsigned char _207;
  int _208;
  short unsigned int _209;
  unsigned int _210;
  unsigned char _212;
  int _213;
  unsigned int _214;
  int _215;
  unsigned int _216;
  unsigned char _218;
  unsigned char _221;
  long unsigned int _224;
  long unsigned int _226;
  long unsigned int _227;
  long unsigned int _228;
  long unsigned int _229;
  long unsigned int _230;
  unsigned int ivtmp_235;
  struct trellis_node_t * _238;
  long int _239;
  short unsigned int _240;
  short unsigned int _243;
  long unsigned int _250;
  long unsigned int _251;
  long int _253;
  long int _255;
  sizetype _259;
  const uint8_t * _260;
  unsigned char _261;
  long unsigned int _262;
  long unsigned int _263;
  int16_t * _264;
  short unsigned int _266;
  int _267;
  unsigned short _268;
  unsigned short _269;
  short int _270;
  short unsigned int _271;
  unsigned int ivtmp_278;
  int _285;
  short unsigned int _286;
  short unsigned int _287;
  int _288;
  int _290;
  short unsigned int _291;
  int _292;
  short unsigned int _294;
  int _295;
  int _296;
  short unsigned int _297;
  int _298;
  unsigned char _299;
  unsigned char _301;
  short unsigned int _302;
  unsigned int _303;
  unsigned char _304;
  int _305;
  int _307;
  unsigned int _342;
  unsigned int _343;
  unsigned char _344;
  int _345;
  int _346;
  unsigned int _531;
  unsigned int _532;
  short unsigned int _539;
  short int _540;
  unsigned char _541;
  unsigned int ivtmp_545;
  sizetype pretmp_550;
  const uint8_t[16] * pretmp_551;
  unsigned char pretmp_552;
  long unsigned int pretmp_554;
  long unsigned int pretmp_555;
  int16_t[4] * pretmp_556;
  short int pretmp_557;
  short int prephitmp_558;
  sizetype pretmp_560;
  const uint8_t[16] * pretmp_561;
  unsigned char pretmp_562;
  unsigned char prephitmp_563;
  long unsigned int pretmp_564;
  long unsigned int pretmp_565;
  const uint16_t * pretmp_566;
  short unsigned int pretmp_567;
  short unsigned int prephitmp_568;
  long unsigned int pretmp_578;
  long unsigned int pretmp_579;
  int[16] * pretmp_580;
  int pretmp_581;
  int pretmp_583;
  _Bool pretmp_585;
  _Bool pretmp_586;
  _Bool pretmp_587;
  _Bool pretmp_589;
  _Bool pretmp_590;
  long unsigned int prephitmp_597;
  long unsigned int pretmp_598;
  long unsigned int pretmp_599;
  unsigned int ivtmp_600;
  long unsigned int pretmp_601;
  long unsigned int pretmp_602;
  long unsigned int prephitmp_603;
  _Bool pretmp_606;
  long int pretmp_608;
  long int prephitmp_609;
  int pretmp_627;

  <bb 2>:
  _2 = i_ctxBlockCat_1(D) == 1;
  _3 = i_ctxBlockCat_1(D) == 4;
  _4 = _2 | _3;
  b_ac_5 = (int) _4;
  # DEBUG b_ac => b_ac_5
  # DEBUG D#787 => lambda2_tab[b_intra_7(D)][i_qp_8(D)]
  _11 = h_10(D)->mb.b_interlaced;
  _12 = &x264_zigzag_scan4[_11];
  _14 = &x264_dct4_weight2_zigzag[_11];
  # DEBUG D#786 => h_10(D)->unquant4_mf[i_quant_cat_15(D)]
  _17 = (long unsigned int) i_qp_8(D);
  _18 = _17 * 64;
  _19 = h_10(D)->quant4_mf[i_quant_cat_15(D)];
  _21 = _17 * 32;
  _22 = _19 + _21;
  # DEBUG h => h_10(D)
  # DEBUG dct => dct_23(D)
  # DEBUG quant_mf => _22
  # DEBUG unquant_mf => D#786 + _18
  # DEBUG coef_weight => _14
  # DEBUG zigzag => _12
  # DEBUG i_ctxBlockCat => i_ctxBlockCat_1(D)
  # DEBUG i_lambda2 => D#787
  # DEBUG b_ac => b_ac_5
  # DEBUG dc => 0
  # DEBUG i_coefs => 16
  # DEBUG idx => idx_24(D)
  # DEBUG nodes_cur => &nodes[0]
  # DEBUG nodes_prev => &nodes[1]
  # DEBUG b_interlaced => _11
  # DEBUG f => 32768
  # DEBUG i_levels_used => 1
  # DEBUG i => 15
  # DEBUG i => 15

  <bb 3>:
  # i_383 = PHI <i_45(5), 15(2)>
  # DEBUG i => i_383
  _28 = (sizetype) i_383;
  _29 = _12 + _28;
  _30 = *_29;
  _31 = (long unsigned int) _30;
  _32 = _31 * 2;
  _33 = dct_23(D) + _32;
  _34 = *_33;
  _35 = (int) _34;
  _38 = _22 + _32;
  _39 = *_38;
  iftmp.30_40 = (int) _39;
  _42 = _35 * iftmp.30_40;
  _43 = _42 + 32767;
  _44 = (unsigned int) _43;
  if (_44 > 65535)
    goto <bb 59>;
  else
    goto <bb 4>;

  <bb 4>:
  i_45 = i_383 + -1;
  # DEBUG i => i_45
  # DEBUG i => i_45
  if (b_ac_5 <= i_45)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  goto <bb 3>;

  <bb 6>:
  # DEBUG __dest => dct_23(D)
  # DEBUG __ch => 0
  # DEBUG __len => 32
  __builtin_memset (dct_23(D), 0, 32);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  abs_coefs ={v} {CLOBBER};
  signs ={v} {CLOBBER};
  nodes ={v} {CLOBBER};
  cabac_state_sig ={v} {CLOBBER};
  cabac_state_last ={v} {CLOBBER};
  level_tree ={v} {CLOBBER};
  goto <bb 58>;

  <bb 7>:
  pretmp_550 = (sizetype) i_58;
  pretmp_551 = _12 + pretmp_550;
  pretmp_552 = MEM[(const uint8_t *)pretmp_551];
  pretmp_554 = (long unsigned int) pretmp_552;
  pretmp_555 = pretmp_554 * 2;
  pretmp_556 = dct_23(D) + pretmp_555;
  pretmp_557 = MEM[(int16_t *)pretmp_556];

  <bb 8>:
  # i_122 = PHI <i_533(60), i_58(7)>
  # prephitmp_558 = PHI <_540(60), pretmp_557(7)>
  # DEBUG i => i_122
  coef_55 = (int) prephitmp_558;
  # DEBUG coef => coef_55
  _56 = ABS_EXPR <coef_55>;
  abs_coefs[i_122] = _56;
  if (coef_55 < 0)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:

  <bb 10>:
  # iftmp.31_57 = PHI <-1(8), 1(9)>
  signs[i_122] = iftmp.31_57;
  i_58 = i_122 + -1;
  # DEBUG i => i_58
  # DEBUG i => i_58
  if (b_ac_5 <= i_58)
    goto <bb 7>;
  else
    goto <bb 11>;

  <bb 11>:
  # DEBUG i => 1
  MEM[(struct trellis_node_t *)&nodes + 24B].score = 1125899906842624;
  # DEBUG i => 2
  # DEBUG i => 2
  MEM[(struct trellis_node_t *)&nodes + 48B].score = 1125899906842624;
  # DEBUG i => 3
  # DEBUG i => 3
  MEM[(struct trellis_node_t *)&nodes + 72B].score = 1125899906842624;
  # DEBUG i => 4
  # DEBUG i => 4
  MEM[(struct trellis_node_t *)&nodes + 96B].score = 1125899906842624;
  # DEBUG i => 5
  # DEBUG i => 5
  MEM[(struct trellis_node_t *)&nodes + 120B].score = 1125899906842624;
  # DEBUG i => 6
  # DEBUG i => 6
  MEM[(struct trellis_node_t *)&nodes + 144B].score = 1125899906842624;
  # DEBUG i => 7
  # DEBUG i => 7
  MEM[(struct trellis_node_t *)&nodes + 168B].score = 1125899906842624;
  # DEBUG i => 8
  # DEBUG i => 8
  MEM[(struct trellis_node_t *)&nodes].score = 0;
  MEM[(struct trellis_node_t *)&nodes].level_idx = 0;
  level_tree[0].abs_level = 0;
  level_tree[0].next = 0;
  _77 = significant_coeff_flag_offset[_11][i_ctxBlockCat_1(D)];
  _78 = (int) _77;
  _79 = &h_10(D)->cabac.state[_78];
  # DEBUG __dest => &cabac_state_sig
  # DEBUG __src => _79
  # DEBUG __len => 15
  __builtin_memcpy (&cabac_state_sig, _79, 15);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  _80 = last_coeff_flag_offset[_11][i_ctxBlockCat_1(D)];
  _81 = (int) _80;
  _82 = &h_10(D)->cabac.state[_81];
  # DEBUG __dest => &cabac_state_last
  # DEBUG __src => _82
  # DEBUG __len => 15
  __builtin_memcpy (&cabac_state_last, _82, 15);
  _83 = coeff_abs_level_m1_offset[i_ctxBlockCat_1(D)];
  _84 = (int) _83;
  _85 = &h_10(D)->cabac.state[_84];
  # DEBUG __dest => &MEM[(struct trellis_node_t *)&nodes].cabac_state
  # DEBUG __src => _85
  # DEBUG __len => 10
  __builtin_memcpy (&MEM[(struct trellis_node_t *)&nodes].cabac_state, _85, 10);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  # DEBUG i => i_533
  # DEBUG i_levels_used => 1
  # DEBUG i => i_533
  # DEBUG nodes_prev => &nodes[1]
  # DEBUG nodes_cur => &nodes[0]

  <bb 12>:
  # i_114 = PHI <i_533(11), i_248(50)>
  # bnode_108 = PHI <&nodes[0](11), bnode_281(50)>
  # bnode_60 = PHI <&nodes[1](11), bnode_282(50)>
  # n$level_idx_347 = PHI <1(11), n$level_idx_283(50)>
  # prephitmp_563 = PHI <_541(11), pretmp_562(50)>
  # prephitmp_568 = PHI <_539(11), pretmp_567(50)>
  # DEBUG i_levels_used => n$level_idx_347
  # DEBUG i => i_114
  # DEBUG nodes_prev => bnode_60
  # DEBUG nodes_cur => bnode_108
  i_coef_87 = abs_coefs[i_114];
  # DEBUG i_coef => i_coef_87
  _91 = (sizetype) i_114;
  _94 = (long unsigned int) prephitmp_563;
  iftmp.32_98 = (int) prephitmp_568;
  _100 = i_coef_87 * iftmp.32_98;
  _101 = _100 + 32768;
  abs_level_102 = _101 >> 16;
  # DEBUG q => abs_level_102
  if (abs_level_102 == 0)
    goto <bb 13>;
  else
    goto <bb 19>;

  <bb 13>:
  # DEBUG D#33 => &cabac_state_sig[i_114]
  _103 = MEM[(uint8_t *)&cabac_state_sig][i_114];
  # DEBUG D#1 => D#33
  # DEBUG b => 0
  # DEBUG state => D#1
  _285 = (int) _103;
  _286 = x264_cabac_entropy[_285][0];
  # DEBUG b => NULL
  _104 = (long unsigned int) _286;
  _105 = (long unsigned int) _9;
  _106 = _104 * _105;
  _107 = _106 >> 4;
  # DEBUG cost_sig0 => (const uint32_t) _107
  # DEBUG j => 1
  # DEBUG i_levels_used => n$level_idx_347
  # DEBUG j => 1

  <bb 14>:
  # j_369 = PHI <j_121(17), 1(13)>
  # n$level_idx_382 = PHI <n$level_idx_275(17), n$level_idx_347(13)>
  # ivtmp_278 = PHI <ivtmp_545(17), 7(13)>
  # DEBUG i_levels_used => n$level_idx_382
  # DEBUG j => j_369
  _109 = (long unsigned int) j_369;
  _110 = _109 * 24;
  _112 = bnode_108 + _110;
  _113 = _112->score;
  if (_113 != 1125899906842624)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  level_tree[n$level_idx_382].abs_level = 0;
  _115 = _112->level_idx;
  _116 = (short unsigned int) _115;
  level_tree[n$level_idx_382].next = _116;
  _112->level_idx = n$level_idx_382;
  n$level_idx_117 = n$level_idx_382 + 1;
  # DEBUG i_levels_used => n$level_idx_117
  _118 = _107 & 4294967295;
  _119 = (long int) _118;
  _120 = _113 + _119;
  _112->score = _120;

  <bb 16>:
  # n$level_idx_275 = PHI <n$level_idx_382(14), n$level_idx_117(15)>
  # DEBUG i_levels_used => n$level_idx_275
  j_121 = j_369 + 1;
  # DEBUG j => j_121
  # DEBUG i_levels_used => n$level_idx_275
  # DEBUG j => j_121
  ivtmp_545 = ivtmp_278 - 1;
  if (ivtmp_545 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  goto <bb 14>;

  <bb 18>:
  # n$level_idx_538 = PHI <n$level_idx_275(16)>
  cost_sig ={v} {CLOBBER};
  cost_last ={v} {CLOBBER};
  n ={v} {CLOBBER};
  # DEBUG D#780 => {CLOBBER}
  # DEBUG n$score => D#780
  # DEBUG D#781 => {CLOBBER}
  # DEBUG n$level_idx => D#781
  goto <bb 49>;

  <bb 19>:

  <bb 20>:
  # j_362 = PHI <0(19), j_127(21)>
  # ivtmp_52 = PHI <8(19), ivtmp_53(21)>
  # DEBUG j => j_362
  _123 = (long unsigned int) j_362;
  _124 = _123 * 24;
  _126 = bnode_60 + _124;
  _126->score = 1125899906842624;
  j_127 = j_362 + 1;
  # DEBUG j => j_127
  # DEBUG j => j_127
  ivtmp_53 = ivtmp_52 - 1;
  if (ivtmp_53 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  goto <bb 20>;

  <bb 22>:
  if (i_114 != 15)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  # DEBUG D#29 => &cabac_state_sig[i_114]
  _128 = MEM[(uint8_t *)&cabac_state_sig][i_114];
  # DEBUG D#1 => D#29
  # DEBUG b => 0
  # DEBUG state => D#1
  _296 = (int) _128;
  _297 = x264_cabac_entropy[_296][0];
  _298 = (int) _297;
  # DEBUG b => NULL
  cost_sig[0] = _298;
  # DEBUG D#30 => &cabac_state_sig[i_114]
  # DEBUG D#1 => D#30
  # DEBUG b => 1
  # DEBUG state => D#1
  _294 = x264_cabac_entropy[_296][1];
  _295 = (int) _294;
  # DEBUG b => NULL
  cost_sig[1] = _295;
  # DEBUG D#31 => &cabac_state_last[i_114]
  _129 = MEM[(uint8_t *)&cabac_state_last][i_114];
  # DEBUG D#1 => D#31
  # DEBUG b => 0
  # DEBUG state => D#1
  _290 = (int) _129;
  _291 = x264_cabac_entropy[_290][0];
  _292 = (int) _291;
  # DEBUG b => NULL
  cost_last[0] = _292;
  # DEBUG D#32 => &cabac_state_last[i_114]
  # DEBUG D#1 => D#32
  # DEBUG b => 1
  # DEBUG state => D#1
  _287 = x264_cabac_entropy[_290][1];
  _288 = (int) _287;
  # DEBUG b => NULL
  cost_last[1] = _288;
  goto <bb 25>;

  <bb 24>:
  cost_sig[1] = 0;
  cost_sig[0] = 0;
  cost_last[1] = 0;
  cost_last[0] = 0;

  <bb 25>:
  # DEBUG abs_level => abs_level_102
  # DEBUG i_levels_used => n$level_idx_347
  _184 = abs_level_102 + -1;
  pretmp_578 = _94 * 4;
  pretmp_579 = _18 + pretmp_578;
  pretmp_580 = _16 + pretmp_579;
  pretmp_581 = MEM[(const int *)pretmp_580];
  pretmp_583 = h_10(D)->mb.i_psy_trellis;
  pretmp_585 = i_ctxBlockCat_1(D) != 4;
  pretmp_586 = pretmp_583 != 0;
  pretmp_587 = pretmp_585 & pretmp_586;
  pretmp_589 = i_114 != 0;
  pretmp_590 = pretmp_587 & pretmp_589;
  _167 = _91 * 4;
  _168 = _14 + _167;
  _178 = _91 * 4;
  _179 = _14 + _178;

  <bb 26>:
  # abs_level_27 = PHI <abs_level_102(25), pretmp_627(47)>
  # n$level_idx_150 = PHI <n$level_idx_347(25), n$level_idx_537(47)>
  # ivtmp_50 = PHI <2(25), ivtmp_51(47)>
  # DEBUG abs_level => abs_level_27
  # DEBUG i_levels_used => n$level_idx_150
  _139 = abs_level_27 * pretmp_581;
  _140 = _139 + 128;
  unquant_abs_level_141 = _140 >> 8;
  # DEBUG unquant_abs_level => unquant_abs_level_141
  d_142 = i_coef_87 - unquant_abs_level_141;
  # DEBUG d => d_142
  if (pretmp_590 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  _146 = h_10(D)->mb.pic.fenc_dct4[idx_24(D)][i_114];
  iftmp.34_147 = (int) _146;
  # DEBUG orig_coef => iftmp.34_147
  _148 = signs[i_114];
  _149 = i_coef_87 * _148;
  predicted_coef_151 = iftmp.34_147 - _149;
  # DEBUG predicted_coef => predicted_coef_151
  _152 = unquant_abs_level_141 * _148;
  _153 = predicted_coef_151 + _152;
  _154 = ABS_EXPR <_153>;
  psy_value_155 = _154 * pretmp_583;
  # DEBUG psy_value => psy_value_155
  _162 = (int) prephitmp_563;
  _163 = x264_dct4_weight_tab[_162];
  iftmp.35_164 = (int) _163;
  # DEBUG psy_weight => iftmp.35_164
  _165 = (long int) d_142;
  _166 = _165 * _165;
  _169 = *_168;
  _170 = (long int) _169;
  _171 = _166 * _170;
  _173 = psy_value_155 * iftmp.35_164;
  _174 = (long int) _173;
  ssd_175 = _171 - _174;
  # DEBUG ssd => ssd_175
  goto <bb 29>;

  <bb 28>:
  _176 = (long int) d_142;
  _177 = _176 * _176;
  _180 = *_179;
  iftmp.36_181 = (long int) _180;
  ssd_183 = _177 * iftmp.36_181;
  # DEBUG ssd => ssd_183

  <bb 29>:
  # ssd_233 = PHI <ssd_175(27), ssd_183(28)>
  # DEBUG ssd => ssd_233
  # DEBUG j => 0
  # DEBUG i_levels_used => n$level_idx_150
  # DEBUG j => 0
  pretmp_627 = abs_level_27 + -1;
  pretmp_606 = pretmp_627 > 0;
  pretmp_608 = (long int) pretmp_606;
  iftmp.37_200 = abs_level_27 <= 14 ? pretmp_627 : 14;
  prephitmp_609 = abs_level_27 <= 14 ? pretmp_608 : 1;
  _532 = (unsigned int) abs_level_27;
  _531 = _532 + 4294967281;
  _213 = (int) _531;
  _214 = (unsigned int) _213;
  _342 = _214 + 1;
  _343 = _342 >> 8;

  <bb 30>:
  # node_ctx_385 = PHI <node_ctx_245(45), 0(29)>
  # n$level_idx_384 = PHI <n$level_idx_279(45), n$level_idx_150(29)>
  # ivtmp_48 = PHI <ivtmp_49(45), 8(29)>
  # DEBUG i_levels_used => n$level_idx_384
  # DEBUG j => node_ctx_385
  # DEBUG node_ctx => node_ctx_385
  _185 = (long unsigned int) node_ctx_385;
  _186 = _185 * 24;
  _187 = bnode_108 + _186;
  _188 = _187->score;
  if (_188 == 1125899906842624)
    goto <bb 44>;
  else
    goto <bb 31>;

  <bb 31>:
  n = *_187;
  # DEBUG n$score => _188
  n$level_idx_276 = MEM[(struct trellis_node_t *)_187 + 8B];
  # DEBUG n$level_idx => n$level_idx_276
  _189 = abs_level_27 | node_ctx_385;
  if (_189 != 0)
    goto <bb 32>;
  else
    goto <bb 42>;

  <bb 32>:
  _190 = abs_level_27 != 0;
  _191 = (int) _190;
  _192 = cost_sig[_191];
  f8_bits_193 = (unsigned int) _192;
  # DEBUG f8_bits => f8_bits_193
  if (abs_level_27 != 0)
    goto <bb 33>;
  else
    goto <bb 41>;

  <bb 33>:
  # DEBUG i_prefix => iftmp.37_200
  _195 = node_ctx_385 == 0;
  _196 = (int) _195;
  _197 = cost_last[_196];
  _198 = (unsigned int) _197;
  f8_bits_199 = f8_bits_193 + _198;
  # DEBUG f8_bits => f8_bits_199
  # DEBUG D#785 => iftmp.37_200 > 0
  _203 = coeff_abs_level1_ctx[node_ctx_385];
  # DEBUG D#142 => &n.cabac_state[_203]
  # DEBUG state => D#142
  # DEBUG b => (long int) D#785
  _299 = MEM[(uint8_t *)&n].cabac_state[_203];
  i_state_300 = (int) _299;
  # DEBUG i_state => i_state_300
  _301 = x264_cabac_transition[i_state_300][prephitmp_609];
  MEM[(uint8_t *)&n].cabac_state[_203] = _301;
  _302 = x264_cabac_entropy[i_state_300][prephitmp_609];
  # DEBUG state => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _204 = (unsigned int) _302;
  f8_bits_205 = f8_bits_199 + _204;
  # DEBUG f8_bits => f8_bits_205
  if (iftmp.37_200 > 0)
    goto <bb 34>;
  else
    goto <bb 40>;

  <bb 34>:
  _206 = coeff_abs_levelgt1_ctx[node_ctx_385];
  # DEBUG D#34 => &n.cabac_state[_206]
  # DEBUG ctx => D#34
  _207 = MEM[(uint8_t *)&n].cabac_state[_206];
  _208 = (int) _207;
  _209 = cabac_size_unary[iftmp.37_200][_208];
  _210 = (unsigned int) _209;
  f8_bits_211 = f8_bits_205 + _210;
  # DEBUG f8_bits => f8_bits_211
  _212 = cabac_transition_unary[iftmp.37_200][_208];
  MEM[(uint8_t *)&n].cabac_state[_206] = _212;
  if (abs_level_27 > 14)
    goto <bb 35>;
  else
    goto <bb 39>;

  <bb 35>:
  # DEBUG D#788 => (unsigned int) _213
  # DEBUG val => D#788
  if (_213 <= 254)
    goto <bb 36>;
  else
    goto <bb 37>;

  <bb 36>:
  _303 = _214 + 1;
  _304 = x264_ue_size_tab[_303];
  _305 = (int) _304;
  goto <bb 38>;

  <bb 37>:
  # DEBUG val => D#788
  _344 = x264_ue_size_tab[_343];
  _345 = (int) _344;
  _346 = _345 + 16;
  # DEBUG val => NULL

  <bb 38>:
  # _307 = PHI <_305(36), _346(37)>
  # DEBUG val => NULL
  _215 = _307 << 8;
  _216 = (unsigned int) _215;
  f8_bits_217 = f8_bits_211 + _216;
  # DEBUG f8_bits => f8_bits_217

  <bb 39>:
  # f8_bits_277 = PHI <f8_bits_211(34), f8_bits_217(38)>
  # DEBUG f8_bits => f8_bits_277
  _218 = coeff_abs_level_transition[1][node_ctx_385];
  node_ctx_219 = (int) _218;
  # DEBUG node_ctx => node_ctx_219
  pretmp_598 = (long unsigned int) node_ctx_219;
  pretmp_601 = pretmp_598 * 24;
  goto <bb 41>;

  <bb 40>:
  f8_bits_220 = f8_bits_205 + 256;
  # DEBUG f8_bits => f8_bits_220
  _221 = coeff_abs_level_transition[0][node_ctx_385];
  node_ctx_222 = (int) _221;
  # DEBUG node_ctx => node_ctx_222
  pretmp_599 = (long unsigned int) node_ctx_222;
  pretmp_602 = pretmp_599 * 24;

  <bb 41>:
  # f8_bits_225 = PHI <f8_bits_193(32), f8_bits_277(39), f8_bits_220(40)>
  # prephitmp_603 = PHI <_186(32), pretmp_601(39), pretmp_602(40)>
  # DEBUG f8_bits => f8_bits_225
  # DEBUG node_ctx => NULL
  _224 = (long unsigned int) _188;
  _226 = (long unsigned int) f8_bits_225;
  _227 = (long unsigned int) _9;
  _228 = _226 * _227;
  _229 = _228 >> 4;
  _230 = _224 + _229;
  n$score_231 = (long int) _230;
  # DEBUG n$score => n$score_231

  <bb 42>:
  # n$score_323 = PHI <_188(31), n$score_231(41)>
  # prephitmp_597 = PHI <0(31), prephitmp_603(41)>
  # DEBUG n$score => n$score_323
  # DEBUG node_ctx => NULL
  n$score_234 = ssd_233 + n$score_323;
  # DEBUG n$score => n$score_234
  _238 = bnode_60 + prephitmp_597;
  _239 = _238->score;
  if (n$score_234 < _239)
    goto <bb 43>;
  else
    goto <bb 44>;

  <bb 43>:
  _240 = (short unsigned int) abs_level_27;
  level_tree[n$level_idx_384].abs_level = _240;
  _243 = (short unsigned int) n$level_idx_276;
  level_tree[n$level_idx_384].next = _243;
  # DEBUG n$level_idx => n$level_idx_384
  n$level_idx_244 = n$level_idx_384 + 1;
  # DEBUG i_levels_used => n$level_idx_244
  MEM[(struct  *)&n] = n$score_234;
  MEM[(struct  *)&n + 8B] = n$level_idx_384;
  *_238 = n;

  <bb 44>:
  # n$level_idx_279 = PHI <n$level_idx_384(30), n$level_idx_384(42), n$level_idx_244(43)>
  # DEBUG i_levels_used => n$level_idx_279
  node_ctx_245 = node_ctx_385 + 1;
  # DEBUG j => node_ctx_245
  # DEBUG i_levels_used => n$level_idx_279
  # DEBUG j => node_ctx_245
  ivtmp_49 = ivtmp_48 - 1;
  if (ivtmp_49 != 0)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 45>:
  goto <bb 30>;

  <bb 46>:
  # n$level_idx_537 = PHI <n$level_idx_279(44)>
  # DEBUG D#784 => abs_level_27 + -1
  # DEBUG abs_level => D#784
  # DEBUG abs_level => D#784
  # DEBUG i_levels_used => n$level_idx_537
  ivtmp_51 = ivtmp_50 - 1;
  if (ivtmp_51 != 0)
    goto <bb 47>;
  else
    goto <bb 48>;

  <bb 47>:
  goto <bb 26>;

  <bb 48>:
  # n$level_idx_536 = PHI <n$level_idx_537(46)>
  cost_sig ={v} {CLOBBER};
  cost_last ={v} {CLOBBER};
  n ={v} {CLOBBER};
  # DEBUG D#782 => {CLOBBER}
  # DEBUG n$score => D#782
  # DEBUG D#783 => {CLOBBER}
  # DEBUG n$level_idx => D#783

  <bb 49>:
  # bnode_281 = PHI <bnode_108(18), bnode_60(48)>
  # bnode_282 = PHI <bnode_60(18), bnode_108(48)>
  # n$level_idx_283 = PHI <n$level_idx_538(18), n$level_idx_536(48)>
  # DEBUG i_levels_used => n$level_idx_283
  # DEBUG nodes_prev => bnode_282
  # DEBUG nodes_cur => bnode_281
  i_248 = i_114 + -1;
  # DEBUG i => i_248
  # DEBUG i_levels_used => n$level_idx_283
  # DEBUG i => i_248
  # DEBUG nodes_prev => bnode_282
  # DEBUG nodes_cur => bnode_281
  if (b_ac_5 <= i_248)
    goto <bb 50>;
  else
    goto <bb 51>;

  <bb 50>:
  pretmp_560 = (sizetype) i_248;
  pretmp_561 = _12 + pretmp_560;
  pretmp_562 = MEM[(const uint8_t *)pretmp_561];
  pretmp_564 = (long unsigned int) pretmp_562;
  pretmp_565 = pretmp_564 * 2;
  pretmp_566 = _22 + pretmp_565;
  pretmp_567 = *pretmp_566;
  goto <bb 12>;

  <bb 51>:
  # bnode_535 = PHI <bnode_281(49)>

  <bb 52>:
  # j_289 = PHI <1(51), j_256(53)>
  # bnode_26 = PHI <bnode_535(51), bnode_284(53)>
  # ivtmp_235 = PHI <7(51), ivtmp_600(53)>
  # DEBUG j => NULL
  # DEBUG bnode => NULL
  _250 = (long unsigned int) j_289;
  _251 = _250 * 24;
  bnode_252 = bnode_535 + _251;
  _253 = bnode_252->score;
  _255 = bnode_26->score;
  bnode_284 = _253 < _255 ? bnode_252 : bnode_26;
  # DEBUG bnode => bnode_284
  j_256 = j_289 + 1;
  # DEBUG j => j_256
  # DEBUG j => j_256
  # DEBUG bnode => bnode_284
  ivtmp_600 = ivtmp_235 - 1;
  if (ivtmp_600 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  goto <bb 52>;

  <bb 54>:
  # bnode_534 = PHI <bnode_284(52)>
  j_257 = bnode_534->level_idx;
  # DEBUG j => j_257
  # DEBUG i => b_ac_5
  # DEBUG j => j_257
  # DEBUG i => b_ac_5

  <bb 55>:
  # b_ac_393 = PHI <b_ac_273(56), b_ac_5(54)>
  # j_392 = PHI <j_272(56), j_257(54)>
  # DEBUG j => j_392
  # DEBUG i => b_ac_393
  _259 = (sizetype) b_ac_393;
  _260 = _12 + _259;
  _261 = *_260;
  _262 = (long unsigned int) _261;
  _263 = _262 * 2;
  _264 = dct_23(D) + _263;
  _266 = level_tree[j_392].abs_level;
  _267 = signs[b_ac_393];
  _268 = (unsigned short) _267;
  _269 = _266 * _268;
  _270 = (short int) _269;
  *_264 = _270;
  _271 = level_tree[j_392].next;
  j_272 = (int) _271;
  # DEBUG j => j_272
  b_ac_273 = b_ac_393 + 1;
  # DEBUG i => b_ac_273
  # DEBUG j => j_272
  # DEBUG i => b_ac_273
  if (b_ac_273 <= 15)
    goto <bb 56>;
  else
    goto <bb 57>;

  <bb 56>:
  goto <bb 55>;

  <bb 57>:
  abs_coefs ={v} {CLOBBER};
  signs ={v} {CLOBBER};
  nodes ={v} {CLOBBER};
  cabac_state_sig ={v} {CLOBBER};
  cabac_state_last ={v} {CLOBBER};
  level_tree ={v} {CLOBBER};

  <bb 58>:
  # DEBUG h => NULL
  # DEBUG dct => NULL
  # DEBUG quant_mf => NULL
  # DEBUG unquant_mf => NULL
  # DEBUG coef_weight => NULL
  # DEBUG zigzag => NULL
  # DEBUG i_ctxBlockCat => NULL
  # DEBUG i_lambda2 => NULL
  # DEBUG b_ac => NULL
  # DEBUG dc => NULL
  # DEBUG i_coefs => NULL
  # DEBUG idx => NULL
  # DEBUG f8_bits => NULL
  # DEBUG node_ctx => NULL
  # DEBUG psy_weight => NULL
  # DEBUG psy_value => NULL
  # DEBUG predicted_coef => NULL
  # DEBUG orig_coef => NULL
  # DEBUG ssd => NULL
  # DEBUG d => NULL
  # DEBUG unquant_abs_level => NULL
  # DEBUG abs_level => NULL
  # DEBUG i_coef => NULL
  # DEBUG ctx_last => NULL
  # DEBUG ctx_sig => NULL
  # DEBUG coef => NULL
  # DEBUG i_levels_used => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  # DEBUG b_interlaced => NULL
  # DEBUG bnode => NULL
  return;

  <bb 59>:
  # _541 = PHI <_30(3)>
  # _540 = PHI <_34(3)>
  # _539 = PHI <_39(3)>
  # i_533 = PHI <i_383(3)>
  if (b_ac_5 > i_533)
    goto <bb 6>;
  else
    goto <bb 60>;

  <bb 60>:
  _9 = lambda2_tab[b_intra_7(D)][i_qp_8(D)];
  _16 = h_10(D)->unquant4_mf[i_quant_cat_15(D)];
  goto <bb 8>;

}



;; Function x264_quant_8x8_trellis (x264_quant_8x8_trellis, funcdef_no=190, decl_uid=7892, cgraph_uid=190, symbol_order=252)


Analyzing loop at encoder/rdo.c:616
encoder/rdo.c:616:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:616:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:616:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [63, + , 4294967295] != 0
  bounds on difference of bases: -63 ... -63
  result:
    # of iterations 63, bounded by 63
encoder/rdo.c:616:5: note: === vect_analyze_data_refs ===
Creating dr for *_265
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: &x264_zigzag_scan8 + (sizetype) _6 * 64
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: MEM[(const uint8_t *)&x264_zigzag_scan8 + (sizetype) _6 * 64]
	Access function 0: {0B, +, 1}_1
Creating dr for level_tree[j_403].abs_level
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: level_tree
	Access function 0: 0
	Access function 1: scev_not_known;
Creating dr for signs[b_ac_402]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &signs
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: signs
	Access function 0: {0, +, 1}_1
Creating dr for *_269
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_269
Creating dr for level_tree[j_403].next
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
failed: evolution of offset is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: level_tree
	Access function 0: 16
	Access function 1: scev_not_known;
encoder/rdo.c:616:5: note: got vectype for stmt: _266 = *_265;
const vector(16) unsigned char
Creating dr for level_tree[j_403].abs_level
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &level_tree
	offset from base address: (ssizetype) ((sizetype) j_403 * 4)
	constant offset from base address: 0
	step: 0
	aligned to: 4
	base_object: level_tree[j_403].abs_level
encoder/rdo.c:616:5: note: got vectype for stmt: _271 = level_tree[j_403].abs_level;
vector(8) short unsigned int
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
encoder/rdo.c:616:5: note: not vectorized: not suitable for gather load _271 = level_tree[j_403].abs_level;

encoder/rdo.c:616:5: note: bad data references.

Analyzing loop at encoder/rdo.c:611
encoder/rdo.c:611:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:611:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:611:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [6, + , 4294967295] != 0
  bounds on difference of bases: -6 ... -6
  result:
    # of iterations 6, bounded by 6
encoder/rdo.c:611:5: note: === vect_analyze_data_refs ===
Creating dr for bnode_257->score
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: bnode_544
	offset from base address: 0
	constant offset from base address: 24
	step: 24
	aligned to: 128
	base_object: *bnode_544
	Access function 0: 0
	Access function 1: {24B, +, 24}_2
Creating dr for bnode_401->score
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *bnode_401
	Access function 0: 0
encoder/rdo.c:611:5: note: got vectype for stmt: _258 = bnode_257->score;
vector(2) long int
Creating dr for bnode_401->score
analyze_innermost: success.
	base_address: bnode_401
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 128
	base_object: bnode_401->score
encoder/rdo.c:611:5: note: got vectype for stmt: _260 = bnode_401->score;
vector(2) long int
encoder/rdo.c:611:5: note: not vectorized: not suitable for gather load _260 = bnode_401->score;

encoder/rdo.c:611:5: note: bad data references.

Analyzing loop at encoder/rdo.c:491
encoder/rdo.c:491:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:491:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:491:5: note: not vectorized: multiple nested loops.
encoder/rdo.c:491:5: note: bad loop form.

Analyzing loop at encoder/rdo.c:506
encoder/rdo.c:506:13: note: ===== analyze_loop_nest =====
encoder/rdo.c:506:13: note: === vect_analyze_loop_form ===
encoder/rdo.c:506:13: note: not vectorized: control flow in loop.
encoder/rdo.c:506:13: note: bad loop form.

Analyzing loop at encoder/rdo.c:545
encoder/rdo.c:545:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:545:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:545:9: note: ===== analyze_loop_nest_1 =====
encoder/rdo.c:545:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:545:9: note: not vectorized: control flow in loop.
encoder/rdo.c:545:9: note: bad inner-loop form.
encoder/rdo.c:545:9: note: not vectorized: Bad inner loop.
encoder/rdo.c:545:9: note: bad loop form.

Analyzing loop at encoder/rdo.c:563
encoder/rdo.c:563:13: note: ===== analyze_loop_nest =====
encoder/rdo.c:563:13: note: === vect_analyze_loop_form ===
encoder/rdo.c:563:13: note: not vectorized: control flow in loop.
encoder/rdo.c:563:13: note: bad loop form.

Analyzing loop at encoder/rdo.c:525
encoder/rdo.c:525:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:525:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:525:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 7
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/rdo.c:525:9: note: === vect_analyze_data_refs ===
Creating dr for _131->score
analyze_innermost: success.
	base_address: bnode_375
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 128
	base_object: *bnode_375
	Access function 0: 0
	Access function 1: {0B, +, 24}_7
encoder/rdo.c:525:9: note: got vectype for stmt: _131->score = 1125899906842624;
vector(2) long int
encoder/rdo.c:525:9: note: === vect_analyze_scalar_cycles ===
encoder/rdo.c:525:9: note: Analyze phi: j_376 = PHI <0(22), j_132(24)>

encoder/rdo.c:525:9: note: Access function of PHI: {0, +, 1}_7
encoder/rdo.c:525:9: note: step: 1,  init: 0
encoder/rdo.c:525:9: note: Detected induction.
encoder/rdo.c:525:9: note: Analyze phi: .MEM_95 = PHI <.MEM_374(22), .MEM_32(24)>

encoder/rdo.c:525:9: note: Analyze phi: ivtmp_570 = PHI <8(22), ivtmp_97(24)>

encoder/rdo.c:525:9: note: Access function of PHI: {8, +, 4294967295}_7
encoder/rdo.c:525:9: note: step: 4294967295,  init: 8
encoder/rdo.c:525:9: note: Detected induction.
encoder/rdo.c:525:9: note: === vect_pattern_recog ===
encoder/rdo.c:525:9: note: vect_is_simple_use: operand _128
encoder/rdo.c:525:9: note: def_stmt: _128 = (long unsigned int) j_376;
encoder/rdo.c:525:9: note: type of def: 3.
encoder/rdo.c:525:9: note: vect_is_simple_use: operand j_376
encoder/rdo.c:525:9: note: def_stmt: j_376 = PHI <0(22), j_132(24)>
encoder/rdo.c:525:9: note: type of def: 4.
encoder/rdo.c:525:9: note: vect_is_simple_use: operand 24
encoder/rdo.c:525:9: note: === vect_analyze_data_ref_accesses ===
encoder/rdo.c:525:9: note: not consecutive access _131->score = 1125899906842624;

encoder/rdo.c:525:9: note: not vectorized: complicated access pattern.
encoder/rdo.c:525:9: note: bad data access.

Analyzing loop at encoder/rdo.c:473
encoder/rdo.c:473:9: note: ===== analyze_loop_nest =====
encoder/rdo.c:473:9: note: === vect_analyze_loop_form ===
encoder/rdo.c:473:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [62, + , 4294967295] != 0
  bounds on difference of bases: -62 ... -62
  result:
    # of iterations 62, bounded by 62
encoder/rdo.c:473:9: note: === vect_analyze_data_refs ===
Creating dr for significant_coeff_flag_offset_8x8[_6][i_390]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &significant_coeff_flag_offset_8x8
	offset from base address: (ssizetype) ((sizetype) _6 * 63)
	constant offset from base address: 0
	step: 1
	aligned to: 1
	base_object: MEM[(uint8_t[2][63] *)&significant_coeff_flag_offset_8x8]
	Access function 0: {0, +, 1}_8
	Access function 1: _6
Creating dr for *_69
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_69
Creating dr for cabac_state_sig[i_390]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &cabac_state_sig
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: cabac_state_sig
	Access function 0: {0, +, 1}_8
Creating dr for last_coeff_flag_offset_8x8[i_390]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &last_coeff_flag_offset_8x8
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[63] *)&last_coeff_flag_offset_8x8]
	Access function 0: {0, +, 1}_8
Creating dr for *_73
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_73
Creating dr for cabac_state_last[i_390]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &cabac_state_last
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: cabac_state_last
	Access function 0: {0, +, 1}_8
encoder/rdo.c:473:9: note: got vectype for stmt: _67 = significant_coeff_flag_offset_8x8[_6][i_390];
const vector(16) unsigned char
Creating dr for *_69
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
success.
	base_address: (const uint8_t *) h_5(D) + ((sizetype) _61 + _68)
	offset from base address: 0
	constant offset from base address: 4772
	step: 0
	aligned to: 128
	base_object: *_69
encoder/rdo.c:473:9: note: got vectype for stmt: _70 = *_69;
const vector(16) unsigned char
Applying pattern match.pd:49, generic-match.c:3223
encoder/rdo.c:473:9: note: not vectorized: not suitable for gather load _70 = *_69;

encoder/rdo.c:473:9: note: bad data references.

Analyzing loop at encoder/rdo.c:446
encoder/rdo.c:446:5: note: ===== analyze_loop_nest =====
encoder/rdo.c:446:5: note: === vect_analyze_loop_form ===
encoder/rdo.c:446:5: note: not vectorized: control flow in loop.
encoder/rdo.c:446:5: note: bad loop form.

Analyzing loop at encoder/rdo.c:435
encoder/rdo.c:435:34: note: ===== analyze_loop_nest =====
encoder/rdo.c:435:34: note: === vect_analyze_loop_form ===
encoder/rdo.c:435:34: note: not vectorized: control flow in loop.
encoder/rdo.c:435:34: note: bad loop form.
encoder/rdo.c:645:6: note: vectorized 0 loops in function.
x264_quant_8x8_trellis (struct x264_t * h, int16_t[8] * dct, int i_quant_cat, int i_qp, int b_intra, int idx)
{
  int n$level_idx;
  long int n$score;
  int D.25745;
  int i_state;
  int abs_coefs[64];
  int signs[64];
  struct trellis_node_t nodes[2][8];
  struct trellis_node_t * bnode;
  uint8_t cabac_state_sig[64];
  uint8_t cabac_state_last[64];
  int i;
  int j;
  struct 
  {
    uint16_t abs_level;
    uint16_t next;
  } level_tree[1024];
  int i_levels_used;
  int coef;
  const uint8_t * ctx_sig;
  const uint8_t * ctx_last;
  int i_coef;
  int abs_level;
  int cost_sig[2];
  int cost_last[2];
  struct trellis_node_t n;
  int unquant_abs_level;
  int d;
  int64_t ssd;
  int predicted_coef;
  int psy_value;
  int node_ctx;
  unsigned int f8_bits;
  int b_ac;
  int _4;
  int _6;
  const uint8_t[64] * _7;
  int[64] * _9;
  int[64] * _11;
  long unsigned int _12;
  long unsigned int _13;
  uint16_t[64] * _14;
  long unsigned int _16;
  const uint16_t * _17;
  sizetype _24;
  const uint8_t * _25;
  unsigned char _26;
  long unsigned int _27;
  long unsigned int _28;
  int16_t * _29;
  short int _30;
  int _31;
  const uint16_t * _34;
  short unsigned int _35;
  int iftmp.30_36;
  int _38;
  int _39;
  unsigned int _40;
  unsigned int ivtmp_44;
  unsigned int ivtmp_45;
  unsigned int ivtmp_46;
  unsigned int ivtmp_47;
  unsigned int ivtmp_48;
  unsigned int ivtmp_49;
  int _52;
  int iftmp.31_53;
  short unsigned int _60;
  int _61;
  short unsigned int _63;
  int _64;
  unsigned char _67;
  sizetype _68;
  const uint8_t * _69;
  unsigned char _70;
  unsigned char _71;
  sizetype _72;
  const uint8_t * _73;
  unsigned char _74;
  uint8_t * _90;
  sizetype _96;
  unsigned int ivtmp_97;
  long unsigned int _99;
  unsigned int ivtmp_100;
  unsigned int ivtmp_101;
  int iftmp.32_103;
  int _105;
  int _106;
  unsigned char _108;
  long unsigned int _109;
  long unsigned int _110;
  long unsigned int _111;
  long unsigned int _112;
  long unsigned int _114;
  long unsigned int _115;
  struct trellis_node_t * _117;
  long int _118;
  int _120;
  short unsigned int _121;
  long unsigned int _123;
  long int _124;
  long int _125;
  long unsigned int _128;
  long unsigned int _129;
  struct trellis_node_t * _131;
  unsigned char _133;
  unsigned char _134;
  int _144;
  int _145;
  short int _149;
  int iftmp.34_150;
  int _153;
  int _154;
  int _157;
  int _158;
  int _159;
  int _161;
  short unsigned int _162;
  int iftmp.35_163;
  long int _170;
  long int _171;
  long unsigned int _172;
  const int * _173;
  int _174;
  long int _175;
  long int _176;
  int _178;
  long int _179;
  long int _181;
  long int _182;
  long unsigned int _183;
  const int * _184;
  int _185;
  long int iftmp.36_186;
  long unsigned int _190;
  long unsigned int _191;
  struct trellis_node_t * _192;
  long int _193;
  int _194;
  _Bool _195;
  int _196;
  int _197;
  _Bool _200;
  int _201;
  int _202;
  unsigned int _203;
  int iftmp.37_205;
  int _208;
  unsigned int _209;
  int _211;
  unsigned char _212;
  int _213;
  short unsigned int _214;
  unsigned int _215;
  unsigned char _217;
  int _218;
  unsigned int _219;
  int _220;
  unsigned int _221;
  unsigned char _223;
  unsigned char _226;
  long unsigned int _229;
  long unsigned int _231;
  long unsigned int _232;
  long unsigned int _233;
  long unsigned int _234;
  long unsigned int _235;
  unsigned int ivtmp_240;
  struct trellis_node_t * _243;
  long int _244;
  short unsigned int _245;
  short unsigned int _248;
  long unsigned int _255;
  long unsigned int _256;
  long int _258;
  long int _260;
  int _263;
  sizetype _264;
  const uint8_t * _265;
  unsigned char _266;
  long unsigned int _267;
  long unsigned int _268;
  int16_t * _269;
  short unsigned int _271;
  int _272;
  unsigned short _273;
  unsigned short _274;
  short int _275;
  short unsigned int _276;
  unsigned int ivtmp_283;
  int _290;
  short unsigned int _291;
  short unsigned int _292;
  int _293;
  int _295;
  short unsigned int _296;
  int _297;
  short unsigned int _299;
  int _300;
  int _301;
  short unsigned int _302;
  int _303;
  unsigned char _304;
  unsigned char _306;
  short unsigned int _307;
  unsigned int _308;
  unsigned char _309;
  int _310;
  int _312;
  unsigned int _346;
  unsigned int _347;
  unsigned char _348;
  int _349;
  int _350;
  unsigned int _540;
  unsigned int _541;
  short unsigned int _548;
  short int _549;
  unsigned char _550;
  unsigned int ivtmp_554;
  unsigned int ivtmp_555;
  sizetype pretmp_560;
  const uint8_t[64] * pretmp_561;
  unsigned char pretmp_562;
  long unsigned int pretmp_564;
  long unsigned int pretmp_565;
  int16_t[8] * pretmp_566;
  short int pretmp_567;
  short int prephitmp_568;
  unsigned int ivtmp_570;
  sizetype pretmp_574;
  const uint8_t[64] * pretmp_575;
  unsigned char pretmp_576;
  unsigned char prephitmp_577;
  long unsigned int pretmp_578;
  long unsigned int pretmp_579;
  const uint16_t * pretmp_580;
  short unsigned int pretmp_581;
  short unsigned int prephitmp_582;
  long unsigned int pretmp_594;
  long unsigned int pretmp_595;
  int[64] * pretmp_596;
  int pretmp_597;
  int pretmp_599;
  _Bool pretmp_601;
  _Bool pretmp_602;
  _Bool pretmp_603;
  long unsigned int prephitmp_611;
  long unsigned int pretmp_612;
  long unsigned int pretmp_613;
  unsigned int ivtmp_614;
  long unsigned int pretmp_615;
  long unsigned int pretmp_616;
  long unsigned int prephitmp_617;
  _Bool pretmp_620;
  long int pretmp_622;
  long int prephitmp_623;
  int pretmp_641;
  unsigned int ivtmp_643;

  <bb 2>:
  # DEBUG D#828 => lambda2_tab[b_intra_2(D)][i_qp_3(D)]
  _6 = h_5(D)->mb.b_interlaced;
  _7 = &x264_zigzag_scan8[_6];
  _9 = &x264_dct8_weight2_zigzag[_6];
  # DEBUG D#827 => h_5(D)->unquant8_mf[i_quant_cat_10(D)]
  _12 = (long unsigned int) i_qp_3(D);
  _13 = _12 * 256;
  _14 = h_5(D)->quant8_mf[i_quant_cat_10(D)];
  _16 = _12 * 128;
  _17 = _14 + _16;
  # DEBUG h => h_5(D)
  # DEBUG dct => dct_18(D)
  # DEBUG quant_mf => _17
  # DEBUG unquant_mf => D#827 + _13
  # DEBUG coef_weight => _9
  # DEBUG zigzag => _7
  # DEBUG i_ctxBlockCat => 5
  # DEBUG i_lambda2 => D#828
  # DEBUG b_ac => 0
  # DEBUG dc => 0
  # DEBUG i_coefs => 64
  # DEBUG idx => idx_19(D)
  # DEBUG nodes_cur => &nodes[0]
  # DEBUG nodes_prev => &nodes[1]
  # DEBUG b_interlaced => _6
  # DEBUG f => 32768
  # DEBUG i_levels_used => 1
  # DEBUG i => 63
  # DEBUG i => 63

  <bb 3>:
  # i_357 = PHI <i_41(6), 63(2)>
  # ivtmp_555 = PHI <ivtmp_643(6), 64(2)>
  # DEBUG i => i_357
  _24 = (sizetype) i_357;
  _25 = _7 + _24;
  _26 = *_25;
  _27 = (long unsigned int) _26;
  _28 = _27 * 2;
  _29 = dct_18(D) + _28;
  _30 = *_29;
  _31 = (int) _30;
  _34 = _17 + _28;
  _35 = *_34;
  iftmp.30_36 = (int) _35;
  _38 = _31 * iftmp.30_36;
  _39 = _38 + 32767;
  _40 = (unsigned int) _39;
  if (_40 > 65535)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  # _550 = PHI <_26(3)>
  # _549 = PHI <_30(3)>
  # _548 = PHI <_35(3)>
  # i_542 = PHI <i_357(3)>
  _4 = lambda2_tab[b_intra_2(D)][i_qp_3(D)];
  _11 = h_5(D)->unquant8_mf[i_quant_cat_10(D)];
  goto <bb 7>;

  <bb 5>:
  i_41 = i_357 + -1;
  # DEBUG i => i_41
  # DEBUG i => i_41
  ivtmp_643 = ivtmp_555 - 1;
  if (ivtmp_643 != 0)
    goto <bb 6>;
  else
    goto <bb 62>;

  <bb 6>:
  goto <bb 3>;

  <bb 7>:
  # i_355 = PHI <i_542(4), i_54(10)>
  # prephitmp_568 = PHI <_549(4), pretmp_567(10)>
  # DEBUG i => i_355
  coef_51 = (int) prephitmp_568;
  # DEBUG coef => coef_51
  _52 = ABS_EXPR <coef_51>;
  abs_coefs[i_355] = _52;
  if (coef_51 < 0)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:

  <bb 9>:
  # iftmp.31_53 = PHI <-1(7), 1(8)>
  signs[i_355] = iftmp.31_53;
  i_54 = i_355 + -1;
  # DEBUG i => i_54
  # DEBUG i => i_54
  if (i_54 != -1)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  pretmp_560 = (sizetype) i_54;
  pretmp_561 = _7 + pretmp_560;
  pretmp_562 = MEM[(const uint8_t *)pretmp_561];
  pretmp_564 = (long unsigned int) pretmp_562;
  pretmp_565 = pretmp_564 * 2;
  pretmp_566 = dct_18(D) + pretmp_565;
  pretmp_567 = MEM[(int16_t *)pretmp_566];
  goto <bb 7>;

  <bb 11>:
  # DEBUG i => 1
  MEM[(struct trellis_node_t *)&nodes + 24B].score = 1125899906842624;
  # DEBUG i => 2
  # DEBUG i => 2
  MEM[(struct trellis_node_t *)&nodes + 48B].score = 1125899906842624;
  # DEBUG i => 3
  # DEBUG i => 3
  MEM[(struct trellis_node_t *)&nodes + 72B].score = 1125899906842624;
  # DEBUG i => 4
  # DEBUG i => 4
  MEM[(struct trellis_node_t *)&nodes + 96B].score = 1125899906842624;
  # DEBUG i => 5
  # DEBUG i => 5
  MEM[(struct trellis_node_t *)&nodes + 120B].score = 1125899906842624;
  # DEBUG i => 6
  # DEBUG i => 6
  MEM[(struct trellis_node_t *)&nodes + 144B].score = 1125899906842624;
  # DEBUG i => 7
  # DEBUG i => 7
  MEM[(struct trellis_node_t *)&nodes + 168B].score = 1125899906842624;
  # DEBUG i => 8
  # DEBUG i => 8
  MEM[(struct trellis_node_t *)&nodes].score = 0;
  MEM[(struct trellis_node_t *)&nodes].level_idx = 0;
  level_tree[0].abs_level = 0;
  level_tree[0].next = 0;
  _60 = significant_coeff_flag_offset[_6][5];
  _61 = (int) _60;
  ctx_sig_62 = &h_5(D)->cabac.state[_61];
  # DEBUG ctx_sig => ctx_sig_62
  _63 = last_coeff_flag_offset[_6][5];
  _64 = (int) _63;
  ctx_last_65 = &h_5(D)->cabac.state[_64];
  # DEBUG ctx_last => ctx_last_65
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 12>:
  # i_390 = PHI <i_75(13), 0(11)>
  # ivtmp_100 = PHI <ivtmp_101(13), 63(11)>
  # DEBUG i => i_390
  _67 = significant_coeff_flag_offset_8x8[_6][i_390];
  _68 = (sizetype) _67;
  _69 = ctx_sig_62 + _68;
  _70 = *_69;
  cabac_state_sig[i_390] = _70;
  _71 = last_coeff_flag_offset_8x8[i_390];
  _72 = (sizetype) _71;
  _73 = ctx_last_65 + _72;
  _74 = *_73;
  cabac_state_last[i_390] = _74;
  i_75 = i_390 + 1;
  # DEBUG i => i_75
  # DEBUG i => i_75
  ivtmp_101 = ivtmp_100 - 1;
  if (ivtmp_101 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  goto <bb 12>;

  <bb 14>:
  _90 = &h_5(D)->cabac.state[426];
  # DEBUG __dest => &MEM[(struct trellis_node_t *)&nodes].cabac_state
  # DEBUG __src => _90
  # DEBUG __len => 10
  __builtin_memcpy (&MEM[(struct trellis_node_t *)&nodes].cabac_state, _90, 10);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  # DEBUG i => i_542
  # DEBUG i_levels_used => 1
  # DEBUG i => i_542
  # DEBUG nodes_prev => &nodes[1]
  # DEBUG nodes_cur => &nodes[0]

  <bb 15>:
  # i_389 = PHI <i_253(53), i_542(14)>
  # bnode_385 = PHI <bnode_286(53), &nodes[0](14)>
  # bnode_375 = PHI <bnode_287(53), &nodes[1](14)>
  # n$level_idx_404 = PHI <n$level_idx_288(53), 1(14)>
  # prephitmp_577 = PHI <pretmp_576(53), _550(14)>
  # prephitmp_582 = PHI <pretmp_581(53), _548(14)>
  # DEBUG i_levels_used => n$level_idx_404
  # DEBUG i => i_389
  # DEBUG nodes_prev => bnode_375
  # DEBUG nodes_cur => bnode_385
  i_coef_92 = abs_coefs[i_389];
  # DEBUG i_coef => i_coef_92
  _96 = (sizetype) i_389;
  _99 = (long unsigned int) prephitmp_577;
  iftmp.32_103 = (int) prephitmp_582;
  _105 = i_coef_92 * iftmp.32_103;
  _106 = _105 + 32768;
  abs_level_107 = _106 >> 16;
  # DEBUG q => abs_level_107
  if (abs_level_107 == 0)
    goto <bb 16>;
  else
    goto <bb 22>;

  <bb 16>:
  # DEBUG D#33 => &cabac_state_sig[i_389]
  _108 = MEM[(uint8_t *)&cabac_state_sig][i_389];
  # DEBUG D#1 => D#33
  # DEBUG b => 0
  # DEBUG state => D#1
  _290 = (int) _108;
  _291 = x264_cabac_entropy[_290][0];
  # DEBUG b => NULL
  _109 = (long unsigned int) _291;
  _110 = (long unsigned int) _4;
  _111 = _109 * _110;
  _112 = _111 >> 4;
  # DEBUG cost_sig0 => (const uint32_t) _112
  # DEBUG j => 1
  # DEBUG i_levels_used => n$level_idx_404
  # DEBUG j => 1

  <bb 17>:
  # j_388 = PHI <j_126(20), 1(16)>
  # n$level_idx_383 = PHI <n$level_idx_280(20), n$level_idx_404(16)>
  # ivtmp_44 = PHI <ivtmp_45(20), 7(16)>
  # DEBUG i_levels_used => n$level_idx_383
  # DEBUG j => j_388
  _114 = (long unsigned int) j_388;
  _115 = _114 * 24;
  _117 = bnode_385 + _115;
  _118 = _117->score;
  if (_118 != 1125899906842624)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  level_tree[n$level_idx_383].abs_level = 0;
  _120 = _117->level_idx;
  _121 = (short unsigned int) _120;
  level_tree[n$level_idx_383].next = _121;
  _117->level_idx = n$level_idx_383;
  n$level_idx_122 = n$level_idx_383 + 1;
  # DEBUG i_levels_used => n$level_idx_122
  _123 = _112 & 4294967295;
  _124 = (long int) _123;
  _125 = _118 + _124;
  _117->score = _125;

  <bb 19>:
  # n$level_idx_280 = PHI <n$level_idx_383(17), n$level_idx_122(18)>
  # DEBUG i_levels_used => n$level_idx_280
  j_126 = j_388 + 1;
  # DEBUG j => j_126
  # DEBUG i_levels_used => n$level_idx_280
  # DEBUG j => j_126
  ivtmp_45 = ivtmp_44 - 1;
  if (ivtmp_45 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  goto <bb 17>;

  <bb 21>:
  # n$level_idx_547 = PHI <n$level_idx_280(19)>
  cost_sig ={v} {CLOBBER};
  cost_last ={v} {CLOBBER};
  n ={v} {CLOBBER};
  # DEBUG D#821 => {CLOBBER}
  # DEBUG n$score => D#821
  # DEBUG D#822 => {CLOBBER}
  # DEBUG n$level_idx => D#822
  goto <bb 52>;

  <bb 22>:

  <bb 23>:
  # j_376 = PHI <0(22), j_132(24)>
  # ivtmp_570 = PHI <8(22), ivtmp_97(24)>
  # DEBUG j => j_376
  _128 = (long unsigned int) j_376;
  _129 = _128 * 24;
  _131 = bnode_375 + _129;
  _131->score = 1125899906842624;
  j_132 = j_376 + 1;
  # DEBUG j => j_132
  # DEBUG j => j_132
  ivtmp_97 = ivtmp_570 - 1;
  if (ivtmp_97 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  goto <bb 23>;

  <bb 25>:
  if (i_389 != 63)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  # DEBUG D#29 => &cabac_state_sig[i_389]
  _133 = MEM[(uint8_t *)&cabac_state_sig][i_389];
  # DEBUG D#1 => D#29
  # DEBUG b => 0
  # DEBUG state => D#1
  _301 = (int) _133;
  _302 = x264_cabac_entropy[_301][0];
  _303 = (int) _302;
  # DEBUG b => NULL
  cost_sig[0] = _303;
  # DEBUG D#30 => &cabac_state_sig[i_389]
  # DEBUG D#1 => D#30
  # DEBUG b => 1
  # DEBUG state => D#1
  _299 = x264_cabac_entropy[_301][1];
  _300 = (int) _299;
  # DEBUG b => NULL
  cost_sig[1] = _300;
  # DEBUG D#31 => &cabac_state_last[i_389]
  _134 = MEM[(uint8_t *)&cabac_state_last][i_389];
  # DEBUG D#1 => D#31
  # DEBUG b => 0
  # DEBUG state => D#1
  _295 = (int) _134;
  _296 = x264_cabac_entropy[_295][0];
  _297 = (int) _296;
  # DEBUG b => NULL
  cost_last[0] = _297;
  # DEBUG D#32 => &cabac_state_last[i_389]
  # DEBUG D#1 => D#32
  # DEBUG b => 1
  # DEBUG state => D#1
  _292 = x264_cabac_entropy[_295][1];
  _293 = (int) _292;
  # DEBUG b => NULL
  cost_last[1] = _293;
  goto <bb 28>;

  <bb 27>:
  cost_sig[1] = 0;
  cost_sig[0] = 0;
  cost_last[1] = 0;
  cost_last[0] = 0;

  <bb 28>:
  # DEBUG abs_level => abs_level_107
  # DEBUG i_levels_used => n$level_idx_404
  _263 = abs_level_107 + -1;
  pretmp_594 = _99 * 4;
  pretmp_595 = _13 + pretmp_594;
  pretmp_596 = _11 + pretmp_595;
  pretmp_597 = MEM[(const int *)pretmp_596];
  pretmp_599 = h_5(D)->mb.i_psy_trellis;
  pretmp_601 = i_389 != 0;
  pretmp_602 = pretmp_599 != 0;
  pretmp_603 = pretmp_601 & pretmp_602;
  _172 = _96 * 4;
  _173 = _9 + _172;
  _183 = _96 * 4;
  _184 = _9 + _183;

  <bb 29>:
  # abs_level_365 = PHI <abs_level_107(28), pretmp_641(50)>
  # n$level_idx_259 = PHI <n$level_idx_404(28), n$level_idx_546(50)>
  # ivtmp_48 = PHI <2(28), ivtmp_49(50)>
  # DEBUG abs_level => abs_level_365
  # DEBUG i_levels_used => n$level_idx_259
  _144 = abs_level_365 * pretmp_597;
  _145 = _144 + 128;
  unquant_abs_level_146 = _145 >> 8;
  # DEBUG unquant_abs_level => unquant_abs_level_146
  d_147 = i_coef_92 - unquant_abs_level_146;
  # DEBUG d => d_147
  if (pretmp_603 != 0)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  _149 = h_5(D)->mb.pic.fenc_dct8[idx_19(D)][i_389];
  iftmp.34_150 = (int) _149;
  # DEBUG orig_coef => iftmp.34_150
  _153 = signs[i_389];
  _154 = i_coef_92 * _153;
  predicted_coef_156 = iftmp.34_150 - _154;
  # DEBUG predicted_coef => predicted_coef_156
  _157 = unquant_abs_level_146 * _153;
  _158 = predicted_coef_156 + _157;
  _159 = ABS_EXPR <_158>;
  psy_value_160 = _159 * pretmp_599;
  # DEBUG psy_value => psy_value_160
  _161 = (int) prephitmp_577;
  _162 = x264_dct8_weight_tab[_161];
  iftmp.35_163 = (int) _162;
  # DEBUG psy_weight => iftmp.35_163
  _170 = (long int) d_147;
  _171 = _170 * _170;
  _174 = *_173;
  _175 = (long int) _174;
  _176 = _171 * _175;
  _178 = psy_value_160 * iftmp.35_163;
  _179 = (long int) _178;
  ssd_180 = _176 - _179;
  # DEBUG ssd => ssd_180
  goto <bb 32>;

  <bb 31>:
  _181 = (long int) d_147;
  _182 = _181 * _181;
  _185 = *_184;
  iftmp.36_186 = (long int) _185;
  ssd_188 = _182 * iftmp.36_186;
  # DEBUG ssd => ssd_188

  <bb 32>:
  # ssd_238 = PHI <ssd_180(30), ssd_188(31)>
  # DEBUG ssd => ssd_238
  # DEBUG j => 0
  # DEBUG i_levels_used => n$level_idx_259
  # DEBUG j => 0
  pretmp_641 = abs_level_365 + -1;
  pretmp_620 = pretmp_641 > 0;
  pretmp_622 = (long int) pretmp_620;
  iftmp.37_205 = abs_level_365 <= 14 ? pretmp_641 : 14;
  prephitmp_623 = abs_level_365 <= 14 ? pretmp_622 : 1;
  _541 = (unsigned int) abs_level_365;
  _540 = _541 + 4294967281;
  _218 = (int) _540;
  _219 = (unsigned int) _218;
  _346 = _219 + 1;
  _347 = _346 >> 8;

  <bb 33>:
  # node_ctx_352 = PHI <node_ctx_250(48), 0(32)>
  # n$level_idx_8 = PHI <n$level_idx_284(48), n$level_idx_259(32)>
  # ivtmp_46 = PHI <ivtmp_47(48), 8(32)>
  # DEBUG i_levels_used => n$level_idx_8
  # DEBUG j => node_ctx_352
  # DEBUG node_ctx => node_ctx_352
  _190 = (long unsigned int) node_ctx_352;
  _191 = _190 * 24;
  _192 = bnode_385 + _191;
  _193 = _192->score;
  if (_193 == 1125899906842624)
    goto <bb 47>;
  else
    goto <bb 34>;

  <bb 34>:
  n = *_192;
  # DEBUG n$score => _193
  n$level_idx_142 = MEM[(struct trellis_node_t *)_192 + 8B];
  # DEBUG n$level_idx => n$level_idx_142
  _194 = node_ctx_352 | abs_level_365;
  if (_194 != 0)
    goto <bb 35>;
  else
    goto <bb 45>;

  <bb 35>:
  _195 = abs_level_365 != 0;
  _196 = (int) _195;
  _197 = cost_sig[_196];
  f8_bits_198 = (unsigned int) _197;
  # DEBUG f8_bits => f8_bits_198
  if (abs_level_365 != 0)
    goto <bb 36>;
  else
    goto <bb 44>;

  <bb 36>:
  # DEBUG i_prefix => iftmp.37_205
  _200 = node_ctx_352 == 0;
  _201 = (int) _200;
  _202 = cost_last[_201];
  _203 = (unsigned int) _202;
  f8_bits_204 = f8_bits_198 + _203;
  # DEBUG f8_bits => f8_bits_204
  # DEBUG D#826 => iftmp.37_205 > 0
  _208 = coeff_abs_level1_ctx[node_ctx_352];
  # DEBUG D#143 => &n.cabac_state[_208]
  # DEBUG state => D#143
  # DEBUG b => (long int) D#826
  _304 = MEM[(uint8_t *)&n].cabac_state[_208];
  i_state_305 = (int) _304;
  # DEBUG i_state => i_state_305
  _306 = x264_cabac_transition[i_state_305][prephitmp_623];
  MEM[(uint8_t *)&n].cabac_state[_208] = _306;
  _307 = x264_cabac_entropy[i_state_305][prephitmp_623];
  # DEBUG state => NULL
  # DEBUG b => NULL
  # DEBUG i_state => NULL
  _209 = (unsigned int) _307;
  f8_bits_210 = f8_bits_204 + _209;
  # DEBUG f8_bits => f8_bits_210
  if (iftmp.37_205 > 0)
    goto <bb 37>;
  else
    goto <bb 43>;

  <bb 37>:
  _211 = coeff_abs_levelgt1_ctx[node_ctx_352];
  # DEBUG D#34 => &n.cabac_state[_211]
  # DEBUG ctx => D#34
  _212 = MEM[(uint8_t *)&n].cabac_state[_211];
  _213 = (int) _212;
  _214 = cabac_size_unary[iftmp.37_205][_213];
  _215 = (unsigned int) _214;
  f8_bits_216 = f8_bits_210 + _215;
  # DEBUG f8_bits => f8_bits_216
  _217 = cabac_transition_unary[iftmp.37_205][_213];
  MEM[(uint8_t *)&n].cabac_state[_211] = _217;
  if (abs_level_365 > 14)
    goto <bb 38>;
  else
    goto <bb 42>;

  <bb 38>:
  # DEBUG D#829 => (unsigned int) _218
  # DEBUG val => D#829
  if (_218 <= 254)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 39>:
  _308 = _219 + 1;
  _309 = x264_ue_size_tab[_308];
  _310 = (int) _309;
  goto <bb 41>;

  <bb 40>:
  # DEBUG val => D#829
  _348 = x264_ue_size_tab[_347];
  _349 = (int) _348;
  _350 = _349 + 16;
  # DEBUG val => NULL

  <bb 41>:
  # _312 = PHI <_310(39), _350(40)>
  # DEBUG val => NULL
  _220 = _312 << 8;
  _221 = (unsigned int) _220;
  f8_bits_222 = f8_bits_216 + _221;
  # DEBUG f8_bits => f8_bits_222

  <bb 42>:
  # f8_bits_282 = PHI <f8_bits_216(37), f8_bits_222(41)>
  # DEBUG f8_bits => f8_bits_282
  _223 = coeff_abs_level_transition[1][node_ctx_352];
  node_ctx_224 = (int) _223;
  # DEBUG node_ctx => node_ctx_224
  pretmp_612 = (long unsigned int) node_ctx_224;
  pretmp_615 = pretmp_612 * 24;
  goto <bb 44>;

  <bb 43>:
  f8_bits_225 = f8_bits_210 + 256;
  # DEBUG f8_bits => f8_bits_225
  _226 = coeff_abs_level_transition[0][node_ctx_352];
  node_ctx_227 = (int) _226;
  # DEBUG node_ctx => node_ctx_227
  pretmp_613 = (long unsigned int) node_ctx_227;
  pretmp_616 = pretmp_613 * 24;

  <bb 44>:
  # f8_bits_230 = PHI <f8_bits_198(35), f8_bits_282(42), f8_bits_225(43)>
  # prephitmp_617 = PHI <_191(35), pretmp_615(42), pretmp_616(43)>
  # DEBUG f8_bits => f8_bits_230
  # DEBUG node_ctx => NULL
  _229 = (long unsigned int) _193;
  _231 = (long unsigned int) f8_bits_230;
  _232 = (long unsigned int) _4;
  _233 = _231 * _232;
  _234 = _233 >> 4;
  _235 = _229 + _234;
  n$score_236 = (long int) _235;
  # DEBUG n$score => n$score_236

  <bb 45>:
  # n$score_327 = PHI <_193(34), n$score_236(44)>
  # prephitmp_611 = PHI <0(34), prephitmp_617(44)>
  # DEBUG n$score => n$score_327
  # DEBUG node_ctx => NULL
  n$score_239 = ssd_238 + n$score_327;
  # DEBUG n$score => n$score_239
  _243 = bnode_375 + prephitmp_611;
  _244 = _243->score;
  if (n$score_239 < _244)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:
  _245 = (short unsigned int) abs_level_365;
  level_tree[n$level_idx_8].abs_level = _245;
  _248 = (short unsigned int) n$level_idx_142;
  level_tree[n$level_idx_8].next = _248;
  # DEBUG n$level_idx => n$level_idx_8
  n$level_idx_249 = n$level_idx_8 + 1;
  # DEBUG i_levels_used => n$level_idx_249
  MEM[(struct  *)&n] = n$score_239;
  MEM[(struct  *)&n + 8B] = n$level_idx_8;
  *_243 = n;

  <bb 47>:
  # n$level_idx_284 = PHI <n$level_idx_8(33), n$level_idx_8(45), n$level_idx_249(46)>
  # DEBUG i_levels_used => n$level_idx_284
  node_ctx_250 = node_ctx_352 + 1;
  # DEBUG j => node_ctx_250
  # DEBUG i_levels_used => n$level_idx_284
  # DEBUG j => node_ctx_250
  ivtmp_47 = ivtmp_46 - 1;
  if (ivtmp_47 != 0)
    goto <bb 48>;
  else
    goto <bb 49>;

  <bb 48>:
  goto <bb 33>;

  <bb 49>:
  # n$level_idx_546 = PHI <n$level_idx_284(47)>
  # DEBUG D#825 => abs_level_365 + -1
  # DEBUG abs_level => D#825
  # DEBUG abs_level => D#825
  # DEBUG i_levels_used => n$level_idx_546
  ivtmp_49 = ivtmp_48 - 1;
  if (ivtmp_49 != 0)
    goto <bb 50>;
  else
    goto <bb 51>;

  <bb 50>:
  goto <bb 29>;

  <bb 51>:
  # n$level_idx_545 = PHI <n$level_idx_546(49)>
  cost_sig ={v} {CLOBBER};
  cost_last ={v} {CLOBBER};
  n ={v} {CLOBBER};
  # DEBUG D#823 => {CLOBBER}
  # DEBUG n$score => D#823
  # DEBUG D#824 => {CLOBBER}
  # DEBUG n$level_idx => D#824

  <bb 52>:
  # bnode_286 = PHI <bnode_385(21), bnode_375(51)>
  # bnode_287 = PHI <bnode_375(21), bnode_385(51)>
  # n$level_idx_288 = PHI <n$level_idx_547(21), n$level_idx_545(51)>
  # DEBUG i_levels_used => n$level_idx_288
  # DEBUG nodes_prev => bnode_287
  # DEBUG nodes_cur => bnode_286
  i_253 = i_389 + -1;
  # DEBUG i => i_253
  # DEBUG i_levels_used => n$level_idx_288
  # DEBUG i => i_253
  # DEBUG nodes_prev => bnode_287
  # DEBUG nodes_cur => bnode_286
  if (i_253 != -1)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  pretmp_574 = (sizetype) i_253;
  pretmp_575 = _7 + pretmp_574;
  pretmp_576 = MEM[(const uint8_t *)pretmp_575];
  pretmp_578 = (long unsigned int) pretmp_576;
  pretmp_579 = pretmp_578 * 2;
  pretmp_580 = _17 + pretmp_579;
  pretmp_581 = *pretmp_580;
  goto <bb 15>;

  <bb 54>:
  # bnode_544 = PHI <bnode_286(52)>

  <bb 55>:
  # j_400 = PHI <1(54), j_261(56)>
  # bnode_401 = PHI <bnode_544(54), bnode_289(56)>
  # ivtmp_283 = PHI <7(54), ivtmp_554(56)>
  # DEBUG j => NULL
  # DEBUG bnode => NULL
  _255 = (long unsigned int) j_400;
  _256 = _255 * 24;
  bnode_257 = bnode_544 + _256;
  _258 = bnode_257->score;
  _260 = bnode_401->score;
  bnode_289 = _258 < _260 ? bnode_257 : bnode_401;
  # DEBUG bnode => bnode_289
  j_261 = j_400 + 1;
  # DEBUG j => j_261
  # DEBUG j => j_261
  # DEBUG bnode => bnode_289
  ivtmp_554 = ivtmp_283 - 1;
  if (ivtmp_554 != 0)
    goto <bb 56>;
  else
    goto <bb 57>;

  <bb 56>:
  goto <bb 55>;

  <bb 57>:
  # bnode_543 = PHI <bnode_289(55)>
  j_262 = bnode_543->level_idx;
  # DEBUG j => j_262
  # DEBUG i => 0
  # DEBUG j => j_262
  # DEBUG i => 0

  <bb 58>:
  # b_ac_402 = PHI <b_ac_278(59), 0(57)>
  # j_403 = PHI <j_277(59), j_262(57)>
  # ivtmp_240 = PHI <ivtmp_614(59), 64(57)>
  # DEBUG j => j_403
  # DEBUG i => b_ac_402
  _264 = (sizetype) b_ac_402;
  _265 = _7 + _264;
  _266 = *_265;
  _267 = (long unsigned int) _266;
  _268 = _267 * 2;
  _269 = dct_18(D) + _268;
  _271 = level_tree[j_403].abs_level;
  _272 = signs[b_ac_402];
  _273 = (unsigned short) _272;
  _274 = _271 * _273;
  _275 = (short int) _274;
  *_269 = _275;
  _276 = level_tree[j_403].next;
  j_277 = (int) _276;
  # DEBUG j => j_277
  b_ac_278 = b_ac_402 + 1;
  # DEBUG i => b_ac_278
  # DEBUG j => j_277
  # DEBUG i => b_ac_278
  ivtmp_614 = ivtmp_240 - 1;
  if (ivtmp_614 != 0)
    goto <bb 59>;
  else
    goto <bb 60>;

  <bb 59>:
  goto <bb 58>;

  <bb 60>:
  abs_coefs ={v} {CLOBBER};
  signs ={v} {CLOBBER};
  nodes ={v} {CLOBBER};
  cabac_state_sig ={v} {CLOBBER};
  cabac_state_last ={v} {CLOBBER};
  level_tree ={v} {CLOBBER};

  <bb 61>:
  # DEBUG h => NULL
  # DEBUG dct => NULL
  # DEBUG quant_mf => NULL
  # DEBUG unquant_mf => NULL
  # DEBUG coef_weight => NULL
  # DEBUG zigzag => NULL
  # DEBUG i_ctxBlockCat => NULL
  # DEBUG i_lambda2 => NULL
  # DEBUG b_ac => NULL
  # DEBUG dc => NULL
  # DEBUG i_coefs => NULL
  # DEBUG idx => NULL
  # DEBUG f8_bits => NULL
  # DEBUG node_ctx => NULL
  # DEBUG psy_weight => NULL
  # DEBUG psy_value => NULL
  # DEBUG predicted_coef => NULL
  # DEBUG orig_coef => NULL
  # DEBUG ssd => NULL
  # DEBUG d => NULL
  # DEBUG unquant_abs_level => NULL
  # DEBUG abs_level => NULL
  # DEBUG i_coef => NULL
  # DEBUG ctx_last => NULL
  # DEBUG ctx_sig => NULL
  # DEBUG coef => NULL
  # DEBUG i_levels_used => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  # DEBUG b_interlaced => NULL
  # DEBUG bnode => NULL
  return;

  <bb 62>:
  # DEBUG __dest => dct_18(D)
  # DEBUG __ch => 0
  # DEBUG __len => 128
  __builtin_memset (dct_18(D), 0, 128);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  abs_coefs ={v} {CLOBBER};
  signs ={v} {CLOBBER};
  nodes ={v} {CLOBBER};
  cabac_state_sig ={v} {CLOBBER};
  cabac_state_last ={v} {CLOBBER};
  level_tree ={v} {CLOBBER};
  goto <bb 61>;

}



;; Function x264_macroblock_analyse (x264_macroblock_analyse, funcdef_no=225, decl_uid=7985, cgraph_uid=225, symbol_order=294)


Analyzing loop at encoder/analyse.c:2397
encoder/analyse.c:2397:21: note: ===== analyze_loop_nest =====
encoder/analyse.c:2397:21: note: === vect_analyze_loop_form ===
encoder/analyse.c:2397:21: note: not vectorized: control flow in loop.
encoder/analyse.c:2397:21: note: bad loop form.

Analyzing loop at encoder/analyse.c:2279
encoder/analyse.c:2279:17: note: ===== analyze_loop_nest =====
encoder/analyse.c:2279:17: note: === vect_analyze_loop_form ===
encoder/analyse.c:2279:17: note: not vectorized: control flow in loop.
encoder/analyse.c:2279:17: note: bad loop form.

Analyzing loop at encoder/analyse.c:1294
encoder/analyse.c:1294:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1294:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1294:5: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:1294:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1294:5: note: not vectorized: control flow in loop.
encoder/analyse.c:1294:5: note: bad inner-loop form.
encoder/analyse.c:1294:5: note: not vectorized: Bad inner loop.
encoder/analyse.c:1294:5: note: bad loop form.

Analyzing loop at encoder/analyse.c:1305
encoder/analyse.c:1305:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:1305:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:1305:9: note: not vectorized: control flow in loop.
encoder/analyse.c:1305:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:2214
encoder/analyse.c:2214:21: note: ===== analyze_loop_nest =====
encoder/analyse.c:2214:21: note: === vect_analyze_loop_form ===
encoder/analyse.c:2214:21: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:2214:21: note: === vect_analyze_loop_form ===
encoder/analyse.c:2214:21: note: === get_loop_niters ===
Analyzing # of iterations of loop 39
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/analyse.c:2214:21: note: not vectorized: control flow in loop.
encoder/analyse.c:2214:21: note: bad loop form.

Analyzing loop at encoder/analyse.c:1377
encoder/analyse.c:1377:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1377:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1377:5: note: === get_loop_niters ===
encoder/analyse.c:1377:5: note: === vect_analyze_data_refs ===
Creating dr for block_idx_x[idx_1354]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: &block_idx_x
	offset from base address: (ssizetype) (i_214 * 4)
	constant offset from base address: 0
	step: 1
	aligned to: 4
	base_object: MEM[(uint8_t[16] *)&block_idx_x]
	Access function 0: {pretmp_2870, +, 1}_39
Creating dr for block_idx_y[idx_1354]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
success.
	base_address: &block_idx_y
	offset from base address: (ssizetype) (i_214 * 4)
	constant offset from base address: 0
	step: 1
	aligned to: 4
	base_object: MEM[(uint8_t[16] *)&block_idx_y]
	Access function 0: {pretmp_2870, +, 1}_39
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].i_pixel
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1712
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 0
	Access function 1: {0, +, 1}_39
	Access function 2: i_214
	Access function 3: 10624
	Access function 4: 3072
Creating dr for analysis.p_cost_mv
analyze_innermost: success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 128
	base_object: MEM[(struct  *)&analysis]
	Access function 0: 128
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_cost_mv
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1720
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 64
	Access function 1: {0, +, 1}_39
	Access function 2: i_214
	Access function 3: 10624
	Access function 4: 3072
Creating dr for h_145(D)->mb.pic.i_stride[0]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 18984
	step: 0
	aligned to: 128
	base_object: *h_145(D)
	Access function 0: 0
	Access function 1: 57152
	Access function 2: 7680
	Access function 3: 87040
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1816
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for h_145(D)->mb.pic.i_stride[1]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 18988
	step: 0
	aligned to: 128
	base_object: *h_145(D)
	Access function 0: 1
	Access function 1: 57152
	Access function 2: 7680
	Access function 3: 87040
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].i_stride[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1820
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 1
	Access function 1: 832
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)h_145(D) + 15576B]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 15576
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_145(D) + 15576B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fenc[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1784
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 0
	Access function 1: 576
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)h_145(D) + 15584B]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 15584
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_145(D) + 15584B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fenc[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1792
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 1
	Access function 1: 576
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)h_145(D) + 15592B]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 15592
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_145(D) + 15592B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fenc[2]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1800
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 2
	Access function 1: 576
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for *p_fref_1351
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) _210 * 48
	offset from base address: 0
	constant offset from base address: 15656
	step: 0
	aligned to: 128
	base_object: *p_fref_1351
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1816
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1736
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 0
	Access function 1: 192
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_1351 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) _210 * 48
	offset from base address: 0
	constant offset from base address: 15664
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_1351 + 8B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1744
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 1
	Access function 1: 192
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_1351 + 16B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) _210 * 48
	offset from base address: 0
	constant offset from base address: 15672
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_1351 + 16B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[2]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1752
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 2
	Access function 1: 192
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_1351 + 24B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) _210 * 48
	offset from base address: 0
	constant offset from base address: 15680
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_1351 + 24B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[3]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1760
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 3
	Access function 1: 192
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_1351 + 32B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) _210 * 48
	offset from base address: 0
	constant offset from base address: 15688
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_1351 + 32B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[4]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1768
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 4
	Access function 1: 192
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for MEM[(uint8_t * *)p_fref_1351 + 40B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) _210 * 48
	offset from base address: 0
	constant offset from base address: 15696
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_1351 + 40B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[5]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1776
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 5
	Access function 1: 192
	Access function 2: {0, +, 1}_39
	Access function 3: i_214
	Access function 4: 10624
	Access function 5: 3072
Creating dr for h_145(D)->mb.pic.p_integral[0][_210]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D)
	offset from base address: (ssizetype) ((sizetype) _210 * 8)
	constant offset from base address: 18728
	step: 0
	aligned to: 8
	base_object: *h_145(D)
	Access function 0: _210
	Access function 1: 0
	Access function 2: 55104
	Access function 3: 7680
	Access function 4: 87040
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].integral
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: (ssizetype) ((sizetype) i_214 * 512)
	constant offset from base address: 1808
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 768
	Access function 1: {0, +, 1}_39
	Access function 2: i_214
	Access function 3: 10624
	Access function 4: 3072
encoder/analyse.c:1377:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:1377:5: note: bad data references.

Analyzing loop at encoder/analyse.c:1140
encoder/analyse.c:1140:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1140:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1140:5: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:1140:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1140:5: note: not vectorized: control flow in loop.
encoder/analyse.c:1140:5: note: bad inner-loop form.
encoder/analyse.c:1140:5: note: not vectorized: Bad inner loop.
encoder/analyse.c:1140:5: note: bad loop form.

Analyzing loop at encoder/analyse.c:1151
encoder/analyse.c:1151:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:1151:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:1151:9: note: not vectorized: control flow in loop.
encoder/analyse.c:1151:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:1137
encoder/analyse.c:1137:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1137:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1137:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 35
  exit condition [1, + , 1](no_overflow) <= i_maxref_87
  bounds on difference of bases: -2147483649 ... 2147483646
Applying pattern match.pd:49, generic-match.c:3223
  result:
    zero if i_maxref_87 < 0
    # of iterations (unsigned int) i_maxref_87, bounded by 2147483647
encoder/analyse.c:1137:5: note: Symbolic number of iterations is (unsigned int) MAX_EXPR <i_maxref_87, 0> + 1
encoder/analyse.c:1137:5: note: === vect_analyze_data_refs ===
Creating dr for h_145(D)->mb.mvr[0][i_ref_2553]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 11200
	step: 8
	aligned to: 128
	base_object: *h_145(D)
	Access function 0: {0, +, 1}_35
	Access function 1: 0
	Access function 2: 2560
	Access function 3: 87040
Creating dr for *_1094
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_1094
Creating dr for MEM[(uint32_t *)_1089]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 532
	step: 20
	aligned to: 128
	base_object: MEM[(uint32_t *)&analysis]
	Access function 0: {532B, +, 20}_35
encoder/analyse.c:1137:5: note: got vectype for stmt: _1090 = h_145(D)->mb.mvr[0][i_ref_2553];
vector(2) long unsigned int
Creating dr for *_1094
analyze_innermost: success.
	base_address: _1090 + (long unsigned int) pretmp_2976 * 4
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 128
	base_object: *_1094
encoder/analyse.c:1137:5: note: got vectype for stmt: _1095 = *_1094;
vector(4) unsigned int
Applying pattern match.pd:49, generic-match.c:3223
encoder/analyse.c:1137:5: note: not vectorized: not suitable for gather load _1095 = *_1094;

encoder/analyse.c:1137:5: note: bad data references.

Analyzing loop at encoder/analyse.c:1199
encoder/analyse.c:1199:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1199:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1199:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 36
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/analyse.c:1199:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_pixel
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1184
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 0
	Access function 1: {0, +, 1}_36
	Access function 2: 6400
	Access function 3: 3072
Creating dr for analysis.p_cost_mv
analyze_innermost: success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 128
	base_object: MEM[(struct  *)&analysis]
	Access function 0: 128
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_cost_mv
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1192
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 64
	Access function 1: {0, +, 1}_36
	Access function 2: 6400
	Access function 3: 3072
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_ref_cost
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1200
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 128
	Access function 1: {0, +, 1}_36
	Access function 2: 6400
	Access function 3: 3072
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_ref
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1204
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 160
	Access function 1: {0, +, 1}_36
	Access function 2: 6400
	Access function 3: 3072
Creating dr for h_145(D)->mb.pic.i_stride[0]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 18984
	step: 0
	aligned to: 128
	base_object: *h_145(D)
	Access function 0: 0
	Access function 1: 57152
	Access function 2: 7680
	Access function 3: 87040
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1288
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for h_145(D)->mb.pic.i_stride[1]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 18988
	step: 0
	aligned to: 128
	base_object: *h_145(D)
	Access function 0: 1
	Access function 1: 57152
	Access function 2: 7680
	Access function 3: 87040
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_stride[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1292
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 1
	Access function 1: 832
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for MEM[(uint8_t * *)h_145(D) + 15576B]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 15576
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_145(D) + 15576B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fenc[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1256
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 0
	Access function 1: 576
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for MEM[(uint8_t * *)h_145(D) + 15584B]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 15584
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_145(D) + 15584B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fenc[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1264
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 1
	Access function 1: 576
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for MEM[(uint8_t * *)h_145(D) + 15592B]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 15592
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_145(D) + 15592B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fenc[2]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1272
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 2
	Access function 1: 576
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for *p_fref_1231
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) i_ref_209 * 48
	offset from base address: 0
	constant offset from base address: 15656
	step: 0
	aligned to: 128
	base_object: *p_fref_1231
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_stride[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1288
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 0
	Access function 1: 832
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[0]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1208
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 0
	Access function 1: 192
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for MEM[(uint8_t * *)p_fref_1231 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) i_ref_209 * 48
	offset from base address: 0
	constant offset from base address: 15664
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_1231 + 8B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[1]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1216
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 1
	Access function 1: 192
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for MEM[(uint8_t * *)p_fref_1231 + 16B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) i_ref_209 * 48
	offset from base address: 0
	constant offset from base address: 15672
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_1231 + 16B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[2]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1224
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 2
	Access function 1: 192
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for MEM[(uint8_t * *)p_fref_1231 + 24B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) i_ref_209 * 48
	offset from base address: 0
	constant offset from base address: 15680
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_1231 + 24B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[3]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1232
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 3
	Access function 1: 192
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for MEM[(uint8_t * *)p_fref_1231 + 32B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) i_ref_209 * 48
	offset from base address: 0
	constant offset from base address: 15688
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_1231 + 32B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[4]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1240
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 4
	Access function 1: 192
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for MEM[(uint8_t * *)p_fref_1231 + 40B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D) + (sizetype) i_ref_209 * 48
	offset from base address: 0
	constant offset from base address: 15696
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)p_fref_1231 + 40B]
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[5]
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1248
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 5
	Access function 1: 192
	Access function 2: {0, +, 1}_36
	Access function 3: 6400
	Access function 4: 3072
Creating dr for h_145(D)->mb.pic.p_integral[0][i_ref_209]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: h_145(D)
	offset from base address: (ssizetype) ((sizetype) i_ref_209 * 8)
	constant offset from base address: 18728
	step: 0
	aligned to: 8
	base_object: *h_145(D)
	Access function 0: i_ref_209
	Access function 1: 0
	Access function 2: 55104
	Access function 3: 7680
	Access function 4: 87040
Creating dr for MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].integral
analyze_innermost: Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1280
	step: 128
	aligned to: 128
	base_object: MEM[(struct x264_me_t *)&analysis]
	Access function 0: 768
	Access function 1: {0, +, 1}_36
	Access function 2: 6400
	Access function 3: 3072
encoder/analyse.c:1199:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:1199:5: note: bad data references.

Analyzing loop at encoder/analyse.c:1058
encoder/analyse.c:1058:32: note: ===== analyze_loop_nest =====
encoder/analyse.c:1058:32: note: === vect_analyze_loop_form ===
encoder/analyse.c:1058:32: note: not vectorized: control flow in loop.
encoder/analyse.c:1058:32: note: bad loop form.

Analyzing loop at encoder/analyse.c:2685
encoder/analyse.c:2685:21: note: ===== analyze_loop_nest =====
encoder/analyse.c:2685:21: note: === vect_analyze_loop_form ===
encoder/analyse.c:2685:21: note: not vectorized: control flow in loop.
encoder/analyse.c:2685:21: note: bad loop form.

Analyzing loop at encoder/analyse.c:2698
encoder/analyse.c:2698:21: note: ===== analyze_loop_nest =====
encoder/analyse.c:2698:21: note: === vect_analyze_loop_form ===
encoder/analyse.c:2698:21: note: not vectorized: control flow in loop.
encoder/analyse.c:2698:21: note: bad loop form.

Analyzing loop at encoder/analyse.c:2711
encoder/analyse.c:2711:21: note: ===== analyze_loop_nest =====
encoder/analyse.c:2711:21: note: === vect_analyze_loop_form ===
encoder/analyse.c:2711:21: note: not vectorized: control flow in loop.
encoder/analyse.c:2711:21: note: bad loop form.

Analyzing loop at encoder/analyse.c:2060
encoder/analyse.c:2060:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:2060:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:2060:9: note: not vectorized: control flow in loop.
encoder/analyse.c:2060:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:2050
encoder/analyse.c:2050:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:2050:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:2050:9: note: not vectorized: control flow in loop.
encoder/analyse.c:2050:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:2055
encoder/analyse.c:2055:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:2055:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:2055:9: note: not vectorized: control flow in loop.
encoder/analyse.c:2055:9: note: bad loop form.

Analyzing loop at encoder/analyse.c:2585
encoder/analyse.c:2585:17: note: ===== analyze_loop_nest =====
encoder/analyse.c:2585:17: note: === vect_analyze_loop_form ===
encoder/analyse.c:2585:17: note: not vectorized: control flow in loop.
encoder/analyse.c:2585:17: note: bad loop form.

Analyzing loop at encoder/analyse.c:2575
encoder/analyse.c:2575:17: note: ===== analyze_loop_nest =====
encoder/analyse.c:2575:17: note: === vect_analyze_loop_form ===
encoder/analyse.c:2575:17: note: not vectorized: control flow in loop.
encoder/analyse.c:2575:17: note: bad loop form.

Analyzing loop at encoder/analyse.c:2595
encoder/analyse.c:2595:17: note: ===== analyze_loop_nest =====
encoder/analyse.c:2595:17: note: === vect_analyze_loop_form ===
encoder/analyse.c:2595:17: note: not vectorized: control flow in loop.
encoder/analyse.c:2595:17: note: bad loop form.

Analyzing loop at encoder/analyse.c:1556
encoder/analyse.c:1556:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1556:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1556:5: note: not vectorized: control flow in loop.
encoder/analyse.c:1556:5: note: bad loop form.

Analyzing loop at encoder/analyse.c:1529
encoder/analyse.c:1529:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1529:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1529:5: note: not vectorized: control flow in loop.
encoder/analyse.c:1529:5: note: bad loop form.

Analyzing loop at encoder/analyse.c:1491
encoder/analyse.c:1491:5: note: ===== analyze_loop_nest =====
encoder/analyse.c:1491:5: note: === vect_analyze_loop_form ===
encoder/analyse.c:1491:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 48
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/analyse.c:1491:5: note: === vect_analyze_data_refs ===
Creating dr for h_145(D)->pixf.mbcmp[3]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 24480
	step: 0
	aligned to: 128
	base_object: *h_145(D)
	Access function 0: 3
	Access function 1: 2048
	Access function 2: 193600
Creating dr for MEM[(uint8_t * *)h_145(D) + 15624B]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 15624
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_145(D) + 15624B]
Creating dr for MEM[(uint8_t * *)h_145(D) + 15576B]
analyze_innermost: success.
	base_address: h_145(D)
	offset from base address: 0
	constant offset from base address: 15576
	step: 0
	aligned to: 128
	base_object: MEM[(uint8_t * *)h_145(D) + 15576B]
encoder/analyse.c:1491:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:1491:5: note: bad data references.

Analyzing loop at encoder/analyse.c:2437
encoder/analyse.c:2437:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:2437:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:2437:13: note: not vectorized: control flow in loop.
encoder/analyse.c:2437:13: note: bad loop form.

Analyzing loop at encoder/analyse.c:312
encoder/analyse.c:312:13: note: ===== analyze_loop_nest =====
encoder/analyse.c:312:13: note: === vect_analyze_loop_form ===
encoder/analyse.c:312:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 21
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/analyse.c:312:13: note: === vect_analyze_data_refs ===
Creating dr for analysis.i_cost8x8direct[i_2616]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 12396
	step: 4
	aligned to: 128
	base_object: MEM[(struct  *)&analysis]
	Access function 0: {0, +, 1}_21
	Access function 1: 99168
Creating dr for analysis.l1.i_cost4x8[i_2616]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 10800
	step: 4
	aligned to: 128
	base_object: MEM[(struct  *)&analysis]
	Access function 0: {0, +, 1}_21
	Access function 1: 35328
	Access function 2: 51072
Creating dr for analysis.l1.i_cost8x4[i_2616]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 9760
	step: 4
	aligned to: 128
	base_object: MEM[(struct  *)&analysis]
	Access function 0: {0, +, 1}_21
	Access function 1: 27008
	Access function 2: 51072
Creating dr for analysis.l1.i_cost4x4[i_2616]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 7696
	step: 4
	aligned to: 128
	base_object: MEM[(struct  *)&analysis]
	Access function 0: {0, +, 1}_21
	Access function 1: 10496
	Access function 2: 51072
encoder/analyse.c:312:13: note: got vectype for stmt: analysis.i_cost8x8direct[i_2616] = 268435456;
vector(4) int
encoder/analyse.c:312:13: note: got vectype for stmt: analysis.l1.i_cost4x8[i_2616] = 268435456;
vector(4) int
encoder/analyse.c:312:13: note: got vectype for stmt: analysis.l1.i_cost8x4[i_2616] = 268435456;
vector(4) int
encoder/analyse.c:312:13: note: got vectype for stmt: analysis.l1.i_cost4x4[i_2616] = 268435456;
vector(4) int
encoder/analyse.c:312:13: note: === vect_analyze_scalar_cycles ===
encoder/analyse.c:312:13: note: Analyze phi: i_2616 = PHI <i_939(46), 0(44)>

encoder/analyse.c:312:13: note: Access function of PHI: {0, +, 1}_21
encoder/analyse.c:312:13: note: step: 1,  init: 0
encoder/analyse.c:312:13: note: Detected induction.
encoder/analyse.c:312:13: note: Analyze phi: .MEM_237 = PHI <.MEM_2022(46), .MEM_2018(44)>

encoder/analyse.c:312:13: note: Analyze phi: ivtmp_1858 = PHI <ivtmp_2601(46), 4(44)>

encoder/analyse.c:312:13: note: Access function of PHI: {4, +, 4294967295}_21
encoder/analyse.c:312:13: note: step: 4294967295,  init: 4
encoder/analyse.c:312:13: note: Detected induction.
encoder/analyse.c:312:13: note: === vect_pattern_recog ===
encoder/analyse.c:312:13: note: === vect_analyze_data_ref_accesses ===
encoder/analyse.c:312:13: note: === vect_mark_stmts_to_be_vectorized ===
encoder/analyse.c:312:13: note: init: phi relevant? i_2616 = PHI <i_939(46), 0(44)>
encoder/analyse.c:312:13: note: init: phi relevant? .MEM_237 = PHI <.MEM_2022(46), .MEM_2018(44)>
encoder/analyse.c:312:13: note: init: phi relevant? ivtmp_1858 = PHI <ivtmp_2601(46), 4(44)>
encoder/analyse.c:312:13: note: init: stmt relevant? # DEBUG i => i_2616
encoder/analyse.c:312:13: note: init: stmt relevant? analysis.i_cost8x8direct[i_2616] = 268435456;
encoder/analyse.c:312:13: note: vec_stmt_relevant_p: stmt has vdefs.
encoder/analyse.c:312:13: note: mark relevant 4, live 0.
encoder/analyse.c:312:13: note: init: stmt relevant? analysis.l1.i_cost4x8[i_2616] = 268435456;
encoder/analyse.c:312:13: note: vec_stmt_relevant_p: stmt has vdefs.
encoder/analyse.c:312:13: note: mark relevant 4, live 0.
encoder/analyse.c:312:13: note: init: stmt relevant? analysis.l1.i_cost8x4[i_2616] = 268435456;
encoder/analyse.c:312:13: note: vec_stmt_relevant_p: stmt has vdefs.
encoder/analyse.c:312:13: note: mark relevant 4, live 0.
encoder/analyse.c:312:13: note: init: stmt relevant? analysis.l1.i_cost4x4[i_2616] = 268435456;
encoder/analyse.c:312:13: note: vec_stmt_relevant_p: stmt has vdefs.
encoder/analyse.c:312:13: note: mark relevant 4, live 0.
encoder/analyse.c:312:13: note: init: stmt relevant? i_939 = i_2616 + 1;
encoder/analyse.c:312:13: note: init: stmt relevant? # DEBUG i => i_939
encoder/analyse.c:312:13: note: init: stmt relevant? # DEBUG i => i_939
encoder/analyse.c:312:13: note: init: stmt relevant? ivtmp_2601 = ivtmp_1858 - 1;
encoder/analyse.c:312:13: note: init: stmt relevant? if (ivtmp_2601 != 0)
encoder/analyse.c:312:13: note: worklist: examine stmt: analysis.l1.i_cost4x4[i_2616] = 268435456;
encoder/analyse.c:312:13: note: worklist: examine stmt: analysis.l1.i_cost8x4[i_2616] = 268435456;
encoder/analyse.c:312:13: note: worklist: examine stmt: analysis.l1.i_cost4x8[i_2616] = 268435456;
encoder/analyse.c:312:13: note: worklist: examine stmt: analysis.i_cost8x8direct[i_2616] = 268435456;
encoder/analyse.c:312:13: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: analysis.i_cost8x8direct[i_2616] = 268435456;
  stmt_b: analysis.l1.i_cost4x8[i_2616] = 268435456;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: analysis.i_cost8x8direct[i_2616] = 268435456;
  stmt_b: analysis.l1.i_cost8x4[i_2616] = 268435456;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: analysis.i_cost8x8direct[i_2616] = 268435456;
  stmt_b: analysis.l1.i_cost4x4[i_2616] = 268435456;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: analysis.l1.i_cost4x8[i_2616] = 268435456;
  stmt_b: analysis.l1.i_cost8x4[i_2616] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_21)
  (chrec_b = {0, +, 1}_21)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 35328)
  (chrec_b = 27008)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: analysis.l1.i_cost4x8[i_2616] = 268435456;
  stmt_b: analysis.l1.i_cost4x4[i_2616] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_21)
  (chrec_b = {0, +, 1}_21)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 35328)
  (chrec_b = 10496)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: analysis.l1.i_cost8x4[i_2616] = 268435456;
  stmt_b: analysis.l1.i_cost4x4[i_2616] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_21)
  (chrec_b = {0, +, 1}_21)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 27008)
  (chrec_b = 10496)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: analysis.i_cost8x8direct[i_2616] = 268435456;
  stmt_b: analysis.i_cost8x8direct[i_2616] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_21)
  (chrec_b = {0, +, 1}_21)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 99168)
  (chrec_b = 99168)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: analysis.l1.i_cost4x8[i_2616] = 268435456;
  stmt_b: analysis.l1.i_cost4x8[i_2616] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_21)
  (chrec_b = {0, +, 1}_21)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 35328)
  (chrec_b = 35328)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 51072)
  (chrec_b = 51072)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: analysis.l1.i_cost8x4[i_2616] = 268435456;
  stmt_b: analysis.l1.i_cost8x4[i_2616] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_21)
  (chrec_b = {0, +, 1}_21)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 27008)
  (chrec_b = 27008)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 51072)
  (chrec_b = 51072)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: analysis.l1.i_cost4x4[i_2616] = 268435456;
  stmt_b: analysis.l1.i_cost4x4[i_2616] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_21)
  (chrec_b = {0, +, 1}_21)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 10496)
  (chrec_b = 10496)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 51072)
  (chrec_b = 51072)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/analyse.c:312:13: note: versioning for alias required: can't determine dependence between analysis.i_cost8x8direct[i_2616] and analysis.l1.i_cost4x8[i_2616]
encoder/analyse.c:312:13: note: mark for run-time aliasing test between analysis.i_cost8x8direct[i_2616] and analysis.l1.i_cost4x8[i_2616]
encoder/analyse.c:312:13: note: versioning for alias required: can't determine dependence between analysis.i_cost8x8direct[i_2616] and analysis.l1.i_cost8x4[i_2616]
encoder/analyse.c:312:13: note: mark for run-time aliasing test between analysis.i_cost8x8direct[i_2616] and analysis.l1.i_cost8x4[i_2616]
encoder/analyse.c:312:13: note: versioning for alias required: can't determine dependence between analysis.i_cost8x8direct[i_2616] and analysis.l1.i_cost4x4[i_2616]
encoder/analyse.c:312:13: note: mark for run-time aliasing test between analysis.i_cost8x8direct[i_2616] and analysis.l1.i_cost4x4[i_2616]
encoder/analyse.c:312:13: note: === vect_determine_vectorization_factor ===
encoder/analyse.c:312:13: note: ==> examining phi: i_2616 = PHI <i_939(46), 0(44)>

encoder/analyse.c:312:13: note: ==> examining phi: .MEM_237 = PHI <.MEM_2022(46), .MEM_2018(44)>

encoder/analyse.c:312:13: note: ==> examining phi: ivtmp_1858 = PHI <ivtmp_2601(46), 4(44)>

encoder/analyse.c:312:13: note: ==> examining statement: # DEBUG i => i_2616

encoder/analyse.c:312:13: note: skip.
encoder/analyse.c:312:13: note: ==> examining statement: analysis.i_cost8x8direct[i_2616] = 268435456;

encoder/analyse.c:312:13: note: get vectype for scalar type:  int
encoder/analyse.c:312:13: note: vectype: vector(4) int
encoder/analyse.c:312:13: note: nunits = 4
encoder/analyse.c:312:13: note: ==> examining statement: analysis.l1.i_cost4x8[i_2616] = 268435456;

encoder/analyse.c:312:13: note: get vectype for scalar type:  int
encoder/analyse.c:312:13: note: vectype: vector(4) int
encoder/analyse.c:312:13: note: nunits = 4
encoder/analyse.c:312:13: note: ==> examining statement: analysis.l1.i_cost8x4[i_2616] = 268435456;

encoder/analyse.c:312:13: note: get vectype for scalar type:  int
encoder/analyse.c:312:13: note: vectype: vector(4) int
encoder/analyse.c:312:13: note: nunits = 4
encoder/analyse.c:312:13: note: ==> examining statement: analysis.l1.i_cost4x4[i_2616] = 268435456;

encoder/analyse.c:312:13: note: get vectype for scalar type:  int
encoder/analyse.c:312:13: note: vectype: vector(4) int
encoder/analyse.c:312:13: note: nunits = 4
encoder/analyse.c:312:13: note: ==> examining statement: i_939 = i_2616 + 1;

encoder/analyse.c:312:13: note: skip.
encoder/analyse.c:312:13: note: ==> examining statement: # DEBUG i => i_939

encoder/analyse.c:312:13: note: skip.
encoder/analyse.c:312:13: note: ==> examining statement: # DEBUG i => i_939

encoder/analyse.c:312:13: note: skip.
encoder/analyse.c:312:13: note: ==> examining statement: ivtmp_2601 = ivtmp_1858 - 1;

encoder/analyse.c:312:13: note: skip.
encoder/analyse.c:312:13: note: ==> examining statement: if (ivtmp_2601 != 0)

encoder/analyse.c:312:13: note: skip.
encoder/analyse.c:312:13: note: vectorization factor = 4
encoder/analyse.c:312:13: note: === vect_analyze_data_refs_alignment ===
encoder/analyse.c:312:13: note: vect_compute_data_ref_alignment:
encoder/analyse.c:312:13: note: misalign = 12 bytes of ref analysis.i_cost8x8direct[i_2616]
encoder/analyse.c:312:13: note: vect_compute_data_ref_alignment:
encoder/analyse.c:312:13: note: misalign = 0 bytes of ref analysis.l1.i_cost4x8[i_2616]
encoder/analyse.c:312:13: note: vect_compute_data_ref_alignment:
encoder/analyse.c:312:13: note: misalign = 0 bytes of ref analysis.l1.i_cost8x4[i_2616]
encoder/analyse.c:312:13: note: vect_compute_data_ref_alignment:
encoder/analyse.c:312:13: note: misalign = 0 bytes of ref analysis.l1.i_cost4x4[i_2616]
encoder/analyse.c:312:13: note: === vect_prune_runtime_alias_test_list ===
encoder/analyse.c:312:13: note: merging ranges for analysis.l1.i_cost4x4[i_2616], analysis.i_cost8x8direct[i_2616] and analysis.l1.i_cost4x8[i_2616], analysis.i_cost8x8direct[i_2616]
encoder/analyse.c:312:13: note: merging ranges for analysis.l1.i_cost4x4[i_2616], analysis.i_cost8x8direct[i_2616] and analysis.l1.i_cost8x4[i_2616], analysis.i_cost8x8direct[i_2616]
encoder/analyse.c:312:13: note: improved number of alias checks from 3 to 1
encoder/analyse.c:312:13: note: === vect_enhance_data_refs_alignment ===
encoder/analyse.c:312:13: note: data size =4. misalignment = 12.
encoder/analyse.c:312:13: note: vect_can_advance_ivs_p:
encoder/analyse.c:312:13: note: Analyze phi: i_2616 = PHI <i_939(46), 0(44)>

encoder/analyse.c:312:13: note: Analyze phi: .MEM_237 = PHI <.MEM_2022(46), .MEM_2018(44)>

encoder/analyse.c:312:13: note: virtual phi. skip.
encoder/analyse.c:312:13: note: Analyze phi: ivtmp_1858 = PHI <ivtmp_2601(46), 4(44)>

encoder/analyse.c:312:13: note: vect_model_store_cost: unaligned supported by hardware.
encoder/analyse.c:312:13: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
encoder/analyse.c:312:13: note: vect_model_store_cost: aligned.
encoder/analyse.c:312:13: note: vect_get_data_access_cost: inside_cost = 3, outside_cost = 0.
encoder/analyse.c:312:13: note: vect_model_store_cost: aligned.
encoder/analyse.c:312:13: note: vect_get_data_access_cost: inside_cost = 4, outside_cost = 0.
encoder/analyse.c:312:13: note: vect_model_store_cost: aligned.
encoder/analyse.c:312:13: note: vect_get_data_access_cost: inside_cost = 5, outside_cost = 0.
encoder/analyse.c:312:13: note: vect_model_store_cost: aligned.
encoder/analyse.c:312:13: note: vect_get_data_access_cost: inside_cost = 1, outside_cost = 0.
encoder/analyse.c:312:13: note: vect_model_store_cost: unaligned supported by hardware.
encoder/analyse.c:312:13: note: vect_get_data_access_cost: inside_cost = 3, outside_cost = 0.
encoder/analyse.c:312:13: note: vect_model_store_cost: unaligned supported by hardware.
encoder/analyse.c:312:13: note: vect_get_data_access_cost: inside_cost = 5, outside_cost = 0.
encoder/analyse.c:312:13: note: vect_model_store_cost: unaligned supported by hardware.
encoder/analyse.c:312:13: note: vect_get_data_access_cost: inside_cost = 7, outside_cost = 0.
encoder/analyse.c:312:13: note: Vectorizing an unaligned access.
encoder/analyse.c:312:13: note: === vect_analyze_slp ===
encoder/analyse.c:312:13: note: === vect_make_slp_decision ===
encoder/analyse.c:312:13: note: === vect_detect_hybrid_slp ===
encoder/analyse.c:312:13: note: === vect_analyze_loop_operations ===
encoder/analyse.c:312:13: note: examining phi: i_2616 = PHI <i_939(46), 0(44)>

encoder/analyse.c:312:13: note: examining phi: .MEM_237 = PHI <.MEM_2022(46), .MEM_2018(44)>

encoder/analyse.c:312:13: note: examining phi: ivtmp_1858 = PHI <ivtmp_2601(46), 4(44)>

encoder/analyse.c:312:13: note: ==> examining statement: # DEBUG i => i_2616
encoder/analyse.c:312:13: note: irrelevant.
encoder/analyse.c:312:13: note: ==> examining statement: analysis.i_cost8x8direct[i_2616] = 268435456;
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: vect_model_store_cost: unaligned supported by hardware.
encoder/analyse.c:312:13: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 1 .
encoder/analyse.c:312:13: note: ==> examining statement: analysis.l1.i_cost4x8[i_2616] = 268435456;
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: vect_model_store_cost: aligned.
encoder/analyse.c:312:13: note: vect_model_store_cost: inside_cost = 1, prologue_cost = 1 .
encoder/analyse.c:312:13: note: ==> examining statement: analysis.l1.i_cost8x4[i_2616] = 268435456;
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: vect_model_store_cost: aligned.
encoder/analyse.c:312:13: note: vect_model_store_cost: inside_cost = 1, prologue_cost = 1 .
encoder/analyse.c:312:13: note: ==> examining statement: analysis.l1.i_cost4x4[i_2616] = 268435456;
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: vect_model_store_cost: aligned.
encoder/analyse.c:312:13: note: vect_model_store_cost: inside_cost = 1, prologue_cost = 1 .
encoder/analyse.c:312:13: note: ==> examining statement: i_939 = i_2616 + 1;
encoder/analyse.c:312:13: note: irrelevant.
encoder/analyse.c:312:13: note: ==> examining statement: # DEBUG i => i_939
encoder/analyse.c:312:13: note: irrelevant.
encoder/analyse.c:312:13: note: ==> examining statement: # DEBUG i => i_939
encoder/analyse.c:312:13: note: irrelevant.
encoder/analyse.c:312:13: note: ==> examining statement: ivtmp_2601 = ivtmp_1858 - 1;
encoder/analyse.c:312:13: note: irrelevant.
encoder/analyse.c:312:13: note: ==> examining statement: if (ivtmp_2601 != 0)
encoder/analyse.c:312:13: note: irrelevant.
encoder/analyse.c:312:13: note: vectorization_factor = 4, niters = 4
encoder/analyse.c:312:13: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
encoder/analyse.c:312:13: note: Cost model analysis: 
  Vector inside of loop cost: 5
  Vector prologue cost: 8
  Vector epilogue cost: 0
  Scalar iteration cost: 4
  Scalar outside cost: 1
  Vector outside cost: 8
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 3
encoder/analyse.c:312:13: note:   Runtime profitability threshold = 3
encoder/analyse.c:312:13: note:   Static estimate profitability threshold = 3
encoder/analyse.c:312:13: note: loop vectorized
encoder/analyse.c:312:13: note: === vec_transform_loop ===
encoder/analyse.c:312:13: note: create runtime check for data references analysis.i_cost8x8direct[i_2616] and analysis.l1.i_cost4x4[i_2616]
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:400, generic-match.c:4039
encoder/analyse.c:312:13: note: created 1 versioning for alias checks.
encoder/analyse.c:312:13: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
creating PHI node in block #47 for .MEM_2022
Registering new PHI nodes in block #534
Registering new PHI nodes in block #535
Registering new PHI nodes in block #45
Updating SSA information for statement # DEBUG i => i_2616
Updating SSA information for statement analysis.i_cost8x8direct[i_2616] = 268435456;
Updating SSA information for statement analysis.l1.i_cost4x8[i_2616] = 268435456;
Updating SSA information for statement analysis.l1.i_cost8x4[i_2616] = 268435456;
Updating SSA information for statement analysis.l1.i_cost4x4[i_2616] = 268435456;
Updating SSA information for statement i_939 = i_2616 + 1;
Updating SSA information for statement # DEBUG i => i_939
Updating SSA information for statement # DEBUG i => i_939
Updating SSA information for statement ivtmp_2601 = ivtmp_1858 - 1;
Updating SSA information for statement if (ivtmp_2601 != 0)
Registering new PHI nodes in block #46
Registering new PHI nodes in block #537
Registering new PHI nodes in block #536
Registering new PHI nodes in block #532
Updating SSA information for statement # DEBUG i => i_2616
Updating SSA information for statement analysis.i_cost8x8direct[i_2616] = 268435456;
Updating SSA information for statement analysis.l1.i_cost4x8[i_2616] = 268435456;
Updating SSA information for statement analysis.l1.i_cost8x4[i_2616] = 268435456;
Updating SSA information for statement analysis.l1.i_cost4x4[i_2616] = 268435456;
Updating SSA information for statement i_2833 = i_2616 + 1;
Updating SSA information for statement # DEBUG i => i_939
Updating SSA information for statement # DEBUG i => i_939
Updating SSA information for statement ivtmp_2848 = ivtmp_1858 - 1;
Updating SSA information for statement if (ivtmp_2601 != 0)
Registering new PHI nodes in block #533
Registering new PHI nodes in block #47
Updating SSA information for statement analysis.i_cost8x16bi = 268435456;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_555 -> { .MEM_2021 }
.MEM_633 -> { .MEM_2022 }
.MEM_769 -> { .MEM_2019 }
.MEM_2317 -> { .MEM_2020 }
i_2833 -> { i_939 }
ivtmp_2848 -> { ivtmp_2601 }
.MEM_2850 -> { .MEM_2022 }
i_2871 -> { i_2616 }
.MEM_2872 -> { .MEM_237 }
ivtmp_2874 -> { ivtmp_1858 }
Incremental SSA update started at block: 534
Number of blocks in CFG: 538
Number of blocks to update: 8 (  1%)
Affected blocks: 45 46 47 532 533 535 536 537


encoder/analyse.c:312:13: note: ------>vectorizing phi: i_2616 = PHI <i_939(46), 0(538)>

encoder/analyse.c:312:13: note: ------>vectorizing phi: .MEM_237 = PHI <.MEM_2022(46), .MEM_2018(538)>

encoder/analyse.c:312:13: note: ------>vectorizing phi: ivtmp_1858 = PHI <ivtmp_2601(46), 4(538)>

encoder/analyse.c:312:13: note: ------>vectorizing statement: # DEBUG i => i_2616

encoder/analyse.c:312:13: note: ------>vectorizing statement: analysis.i_cost8x8direct[i_2616] = 268435456;

encoder/analyse.c:312:13: note: transform statement.
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: transform store. ncopies = 1
encoder/analyse.c:312:13: note: vect_get_vec_def_for_operand: 268435456
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: Create vector_cst. nunits = 4
encoder/analyse.c:312:13: note: created new init_stmt: vect_cst_.1818_2853 = { 268435456, 268435456, 268435456, 268435456 };
encoder/analyse.c:312:13: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a record based array ref: MEM[(struct  *)&analysis]
encoder/analyse.c:312:13: note: created vectp_analysis.1820_787
encoder/analyse.c:312:13: note: add new stmt: MEM[(int *)vectp_analysis.1819_1350] = vect_cst_.1818_2853;
encoder/analyse.c:312:13: note: ------>vectorizing statement: analysis.l1.i_cost4x8[i_2616] = 268435456;

encoder/analyse.c:312:13: note: transform statement.
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: transform store. ncopies = 1
encoder/analyse.c:312:13: note: vect_get_vec_def_for_operand: 268435456
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: Create vector_cst. nunits = 4
encoder/analyse.c:312:13: note: created new init_stmt: vect_cst_.1821_2019 = { 268435456, 268435456, 268435456, 268435456 };
encoder/analyse.c:312:13: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a record based array ref: MEM[(struct  *)&analysis]
encoder/analyse.c:312:13: note: created vectp_analysis.1823_812
encoder/analyse.c:312:13: note: add new stmt: MEM[(int *)vectp_analysis.1822_2372] = vect_cst_.1821_2019;
encoder/analyse.c:312:13: note: ------>vectorizing statement: analysis.l1.i_cost8x4[i_2616] = 268435456;

encoder/analyse.c:312:13: note: transform statement.
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: transform store. ncopies = 1
encoder/analyse.c:312:13: note: vect_get_vec_def_for_operand: 268435456
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: Create vector_cst. nunits = 4
encoder/analyse.c:312:13: note: created new init_stmt: vect_cst_.1824_2020 = { 268435456, 268435456, 268435456, 268435456 };
encoder/analyse.c:312:13: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a record based array ref: MEM[(struct  *)&analysis]
encoder/analyse.c:312:13: note: created vectp_analysis.1826_803
encoder/analyse.c:312:13: note: add new stmt: MEM[(int *)vectp_analysis.1825_1968] = vect_cst_.1824_2020;
encoder/analyse.c:312:13: note: ------>vectorizing statement: analysis.l1.i_cost4x4[i_2616] = 268435456;

encoder/analyse.c:312:13: note: transform statement.
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: transform store. ncopies = 1
encoder/analyse.c:312:13: note: vect_get_vec_def_for_operand: 268435456
encoder/analyse.c:312:13: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:312:13: note: Create vector_cst. nunits = 4
encoder/analyse.c:312:13: note: created new init_stmt: vect_cst_.1827_2021 = { 268435456, 268435456, 268435456, 268435456 };
encoder/analyse.c:312:13: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a record based array ref: MEM[(struct  *)&analysis]
encoder/analyse.c:312:13: note: created vectp_analysis.1829_124
encoder/analyse.c:312:13: note: add new stmt: MEM[(int *)vectp_analysis.1828_2321] = vect_cst_.1827_2021;
encoder/analyse.c:312:13: note: ------>vectorizing statement: i_939 = i_2616 + 1;

encoder/analyse.c:312:13: note: ------>vectorizing statement: # DEBUG i => i_939

encoder/analyse.c:312:13: note: ------>vectorizing statement: # DEBUG i => i_939

encoder/analyse.c:312:13: note: ------>vectorizing statement: ivtmp_2601 = ivtmp_1858 - 1;

encoder/analyse.c:312:13: note: ------>vectorizing statement: vectp_analysis.1819_778 = vectp_analysis.1819_1350 + 16;

encoder/analyse.c:312:13: note: ------>vectorizing statement: vectp_analysis.1822_2381 = vectp_analysis.1822_2372 + 16;

encoder/analyse.c:312:13: note: ------>vectorizing statement: vectp_analysis.1825_2345 = vectp_analysis.1825_1968 + 16;

encoder/analyse.c:312:13: note: ------>vectorizing statement: vectp_analysis.1828_2665 = vectp_analysis.1828_2321 + 16;

encoder/analyse.c:312:13: note: ------>vectorizing statement: if (ivtmp_2601 != 0)


loop at encoder/analyse.c:317: if (ivtmp_2885 < 1)

;; Scaling loop 21 with scale 0.250000, bounding iterations to 1 from guessed 4
;; guessed iterations are now 1
encoder/analyse.c:312:13: note: LOOP VECTORIZED


Analyzing loop at encoder/analyse.c:297
encoder/analyse.c:297:9: note: ===== analyze_loop_nest =====
encoder/analyse.c:297:9: note: === vect_analyze_loop_form ===
encoder/analyse.c:297:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 22
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/analyse.c:297:9: note: === vect_analyze_data_refs ===
Creating dr for analysis.l0.i_cost4x8[i_255]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 4800
	step: 4
	aligned to: 128
	base_object: MEM[(struct  *)&analysis]
	Access function 0: {0, +, 1}_22
	Access function 1: 35328
	Access function 2: 3072
Creating dr for analysis.l0.i_cost8x4[i_255]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 3760
	step: 4
	aligned to: 128
	base_object: MEM[(struct  *)&analysis]
	Access function 0: {0, +, 1}_22
	Access function 1: 27008
	Access function 2: 3072
Creating dr for analysis.l0.i_cost4x4[i_255]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
success.
	base_address: &analysis
	offset from base address: 0
	constant offset from base address: 1696
	step: 4
	aligned to: 128
	base_object: MEM[(struct  *)&analysis]
	Access function 0: {0, +, 1}_22
	Access function 1: 10496
	Access function 2: 3072
encoder/analyse.c:297:9: note: got vectype for stmt: analysis.l0.i_cost4x8[i_255] = 268435456;
vector(4) int
encoder/analyse.c:297:9: note: got vectype for stmt: analysis.l0.i_cost8x4[i_255] = 268435456;
vector(4) int
encoder/analyse.c:297:9: note: got vectype for stmt: analysis.l0.i_cost4x4[i_255] = 268435456;
vector(4) int
encoder/analyse.c:297:9: note: === vect_analyze_scalar_cycles ===
encoder/analyse.c:297:9: note: Analyze phi: i_255 = PHI <i_936(42), 0(40)>

encoder/analyse.c:297:9: note: Access function of PHI: {0, +, 1}_22
encoder/analyse.c:297:9: note: step: 1,  init: 0
encoder/analyse.c:297:9: note: Detected induction.
encoder/analyse.c:297:9: note: Analyze phi: .MEM_2329 = PHI <.MEM_2013(42), .MEM_2010(40)>

encoder/analyse.c:297:9: note: Analyze phi: ivtmp_2609 = PHI <ivtmp_2617(42), 4(40)>

encoder/analyse.c:297:9: note: Access function of PHI: {4, +, 4294967295}_22
encoder/analyse.c:297:9: note: step: 4294967295,  init: 4
encoder/analyse.c:297:9: note: Detected induction.
encoder/analyse.c:297:9: note: === vect_pattern_recog ===
encoder/analyse.c:297:9: note: === vect_analyze_data_ref_accesses ===
encoder/analyse.c:297:9: note: === vect_mark_stmts_to_be_vectorized ===
encoder/analyse.c:297:9: note: init: phi relevant? i_255 = PHI <i_936(42), 0(40)>
encoder/analyse.c:297:9: note: init: phi relevant? .MEM_2329 = PHI <.MEM_2013(42), .MEM_2010(40)>
encoder/analyse.c:297:9: note: init: phi relevant? ivtmp_2609 = PHI <ivtmp_2617(42), 4(40)>
encoder/analyse.c:297:9: note: init: stmt relevant? # DEBUG i => i_255
encoder/analyse.c:297:9: note: init: stmt relevant? analysis.l0.i_cost4x8[i_255] = 268435456;
encoder/analyse.c:297:9: note: vec_stmt_relevant_p: stmt has vdefs.
encoder/analyse.c:297:9: note: mark relevant 4, live 0.
encoder/analyse.c:297:9: note: init: stmt relevant? analysis.l0.i_cost8x4[i_255] = 268435456;
encoder/analyse.c:297:9: note: vec_stmt_relevant_p: stmt has vdefs.
encoder/analyse.c:297:9: note: mark relevant 4, live 0.
encoder/analyse.c:297:9: note: init: stmt relevant? analysis.l0.i_cost4x4[i_255] = 268435456;
encoder/analyse.c:297:9: note: vec_stmt_relevant_p: stmt has vdefs.
encoder/analyse.c:297:9: note: mark relevant 4, live 0.
encoder/analyse.c:297:9: note: init: stmt relevant? i_936 = i_255 + 1;
encoder/analyse.c:297:9: note: init: stmt relevant? # DEBUG i => i_936
encoder/analyse.c:297:9: note: init: stmt relevant? # DEBUG i => i_936
encoder/analyse.c:297:9: note: init: stmt relevant? ivtmp_2617 = ivtmp_2609 - 1;
encoder/analyse.c:297:9: note: init: stmt relevant? if (ivtmp_2617 != 0)
encoder/analyse.c:297:9: note: worklist: examine stmt: analysis.l0.i_cost4x4[i_255] = 268435456;
encoder/analyse.c:297:9: note: worklist: examine stmt: analysis.l0.i_cost8x4[i_255] = 268435456;
encoder/analyse.c:297:9: note: worklist: examine stmt: analysis.l0.i_cost4x8[i_255] = 268435456;
encoder/analyse.c:297:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: analysis.l0.i_cost4x8[i_255] = 268435456;
  stmt_b: analysis.l0.i_cost8x4[i_255] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_22)
  (chrec_b = {0, +, 1}_22)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 35328)
  (chrec_b = 27008)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: analysis.l0.i_cost4x8[i_255] = 268435456;
  stmt_b: analysis.l0.i_cost4x4[i_255] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_22)
  (chrec_b = {0, +, 1}_22)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 35328)
  (chrec_b = 10496)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: analysis.l0.i_cost8x4[i_255] = 268435456;
  stmt_b: analysis.l0.i_cost4x4[i_255] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_22)
  (chrec_b = {0, +, 1}_22)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 27008)
  (chrec_b = 10496)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: analysis.l0.i_cost4x8[i_255] = 268435456;
  stmt_b: analysis.l0.i_cost4x8[i_255] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_22)
  (chrec_b = {0, +, 1}_22)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 35328)
  (chrec_b = 35328)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 3072)
  (chrec_b = 3072)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: analysis.l0.i_cost8x4[i_255] = 268435456;
  stmt_b: analysis.l0.i_cost8x4[i_255] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_22)
  (chrec_b = {0, +, 1}_22)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 27008)
  (chrec_b = 27008)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 3072)
  (chrec_b = 3072)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: analysis.l0.i_cost4x4[i_255] = 268435456;
  stmt_b: analysis.l0.i_cost4x4[i_255] = 268435456;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_22)
  (chrec_b = {0, +, 1}_22)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 10496)
  (chrec_b = 10496)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 3072)
  (chrec_b = 3072)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/analyse.c:297:9: note: === vect_determine_vectorization_factor ===
encoder/analyse.c:297:9: note: ==> examining phi: i_255 = PHI <i_936(42), 0(40)>

encoder/analyse.c:297:9: note: ==> examining phi: .MEM_2329 = PHI <.MEM_2013(42), .MEM_2010(40)>

encoder/analyse.c:297:9: note: ==> examining phi: ivtmp_2609 = PHI <ivtmp_2617(42), 4(40)>

encoder/analyse.c:297:9: note: ==> examining statement: # DEBUG i => i_255

encoder/analyse.c:297:9: note: skip.
encoder/analyse.c:297:9: note: ==> examining statement: analysis.l0.i_cost4x8[i_255] = 268435456;

encoder/analyse.c:297:9: note: get vectype for scalar type:  int
encoder/analyse.c:297:9: note: vectype: vector(4) int
encoder/analyse.c:297:9: note: nunits = 4
encoder/analyse.c:297:9: note: ==> examining statement: analysis.l0.i_cost8x4[i_255] = 268435456;

encoder/analyse.c:297:9: note: get vectype for scalar type:  int
encoder/analyse.c:297:9: note: vectype: vector(4) int
encoder/analyse.c:297:9: note: nunits = 4
encoder/analyse.c:297:9: note: ==> examining statement: analysis.l0.i_cost4x4[i_255] = 268435456;

encoder/analyse.c:297:9: note: get vectype for scalar type:  int
encoder/analyse.c:297:9: note: vectype: vector(4) int
encoder/analyse.c:297:9: note: nunits = 4
encoder/analyse.c:297:9: note: ==> examining statement: i_936 = i_255 + 1;

encoder/analyse.c:297:9: note: skip.
encoder/analyse.c:297:9: note: ==> examining statement: # DEBUG i => i_936

encoder/analyse.c:297:9: note: skip.
encoder/analyse.c:297:9: note: ==> examining statement: # DEBUG i => i_936

encoder/analyse.c:297:9: note: skip.
encoder/analyse.c:297:9: note: ==> examining statement: ivtmp_2617 = ivtmp_2609 - 1;

encoder/analyse.c:297:9: note: skip.
encoder/analyse.c:297:9: note: ==> examining statement: if (ivtmp_2617 != 0)

encoder/analyse.c:297:9: note: skip.
encoder/analyse.c:297:9: note: vectorization factor = 4
encoder/analyse.c:297:9: note: === vect_analyze_data_refs_alignment ===
encoder/analyse.c:297:9: note: vect_compute_data_ref_alignment:
encoder/analyse.c:297:9: note: misalign = 0 bytes of ref analysis.l0.i_cost4x8[i_255]
encoder/analyse.c:297:9: note: vect_compute_data_ref_alignment:
encoder/analyse.c:297:9: note: misalign = 0 bytes of ref analysis.l0.i_cost8x4[i_255]
encoder/analyse.c:297:9: note: vect_compute_data_ref_alignment:
encoder/analyse.c:297:9: note: misalign = 0 bytes of ref analysis.l0.i_cost4x4[i_255]
encoder/analyse.c:297:9: note: === vect_prune_runtime_alias_test_list ===
encoder/analyse.c:297:9: note: === vect_enhance_data_refs_alignment ===
encoder/analyse.c:297:9: note: vect_can_advance_ivs_p:
encoder/analyse.c:297:9: note: Analyze phi: i_255 = PHI <i_936(42), 0(40)>

encoder/analyse.c:297:9: note: Analyze phi: .MEM_2329 = PHI <.MEM_2013(42), .MEM_2010(40)>

encoder/analyse.c:297:9: note: virtual phi. skip.
encoder/analyse.c:297:9: note: Analyze phi: ivtmp_2609 = PHI <ivtmp_2617(42), 4(40)>

encoder/analyse.c:297:9: note: vect_model_store_cost: aligned.
encoder/analyse.c:297:9: note: vect_get_data_access_cost: inside_cost = 1, outside_cost = 0.
encoder/analyse.c:297:9: note: vect_model_store_cost: aligned.
encoder/analyse.c:297:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
encoder/analyse.c:297:9: note: vect_model_store_cost: aligned.
encoder/analyse.c:297:9: note: vect_get_data_access_cost: inside_cost = 3, outside_cost = 0.
encoder/analyse.c:297:9: note: === vect_analyze_slp ===
encoder/analyse.c:297:9: note: === vect_make_slp_decision ===
encoder/analyse.c:297:9: note: === vect_detect_hybrid_slp ===
encoder/analyse.c:297:9: note: === vect_analyze_loop_operations ===
encoder/analyse.c:297:9: note: examining phi: i_255 = PHI <i_936(42), 0(40)>

encoder/analyse.c:297:9: note: examining phi: .MEM_2329 = PHI <.MEM_2013(42), .MEM_2010(40)>

encoder/analyse.c:297:9: note: examining phi: ivtmp_2609 = PHI <ivtmp_2617(42), 4(40)>

encoder/analyse.c:297:9: note: ==> examining statement: # DEBUG i => i_255
encoder/analyse.c:297:9: note: irrelevant.
encoder/analyse.c:297:9: note: ==> examining statement: analysis.l0.i_cost4x8[i_255] = 268435456;
encoder/analyse.c:297:9: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:297:9: note: vect_model_store_cost: aligned.
encoder/analyse.c:297:9: note: vect_model_store_cost: inside_cost = 1, prologue_cost = 1 .
encoder/analyse.c:297:9: note: ==> examining statement: analysis.l0.i_cost8x4[i_255] = 268435456;
encoder/analyse.c:297:9: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:297:9: note: vect_model_store_cost: aligned.
encoder/analyse.c:297:9: note: vect_model_store_cost: inside_cost = 1, prologue_cost = 1 .
encoder/analyse.c:297:9: note: ==> examining statement: analysis.l0.i_cost4x4[i_255] = 268435456;
encoder/analyse.c:297:9: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:297:9: note: vect_model_store_cost: aligned.
encoder/analyse.c:297:9: note: vect_model_store_cost: inside_cost = 1, prologue_cost = 1 .
encoder/analyse.c:297:9: note: ==> examining statement: i_936 = i_255 + 1;
encoder/analyse.c:297:9: note: irrelevant.
encoder/analyse.c:297:9: note: ==> examining statement: # DEBUG i => i_936
encoder/analyse.c:297:9: note: irrelevant.
encoder/analyse.c:297:9: note: ==> examining statement: # DEBUG i => i_936
encoder/analyse.c:297:9: note: irrelevant.
encoder/analyse.c:297:9: note: ==> examining statement: ivtmp_2617 = ivtmp_2609 - 1;
encoder/analyse.c:297:9: note: irrelevant.
encoder/analyse.c:297:9: note: ==> examining statement: if (ivtmp_2617 != 0)
encoder/analyse.c:297:9: note: irrelevant.
encoder/analyse.c:297:9: note: vectorization_factor = 4, niters = 4
encoder/analyse.c:297:9: note: === vect_update_slp_costs_according_to_vf ===
encoder/analyse.c:297:9: note: Cost model analysis: 
  Vector inside of loop cost: 3
  Vector prologue cost: 3
  Vector epilogue cost: 0
  Scalar iteration cost: 3
  Scalar outside cost: 0
  Vector outside cost: 3
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 2
encoder/analyse.c:297:9: note:   Runtime profitability threshold = 3
encoder/analyse.c:297:9: note:   Static estimate profitability threshold = 3
encoder/analyse.c:297:9: note: loop vectorized
encoder/analyse.c:297:9: note: === vec_transform_loop ===
encoder/analyse.c:297:9: note: ------>vectorizing phi: i_255 = PHI <i_936(42), 0(539)>

encoder/analyse.c:297:9: note: ------>vectorizing phi: .MEM_2329 = PHI <.MEM_2013(42), .MEM_2010(539)>

encoder/analyse.c:297:9: note: ------>vectorizing phi: ivtmp_2609 = PHI <ivtmp_2617(42), 4(539)>

encoder/analyse.c:297:9: note: ------>vectorizing statement: # DEBUG i => i_255

encoder/analyse.c:297:9: note: ------>vectorizing statement: analysis.l0.i_cost4x8[i_255] = 268435456;

encoder/analyse.c:297:9: note: transform statement.
encoder/analyse.c:297:9: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:297:9: note: transform store. ncopies = 1
encoder/analyse.c:297:9: note: vect_get_vec_def_for_operand: 268435456
encoder/analyse.c:297:9: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:297:9: note: Create vector_cst. nunits = 4
encoder/analyse.c:297:9: note: created new init_stmt: vect_cst_.1830_2911 = { 268435456, 268435456, 268435456, 268435456 };
encoder/analyse.c:297:9: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a record based array ref: MEM[(struct  *)&analysis]
encoder/analyse.c:297:9: note: created vectp_analysis.1832_2970
encoder/analyse.c:297:9: note: add new stmt: MEM[(int *)vectp_analysis.1831_1440] = vect_cst_.1830_2911;
encoder/analyse.c:297:9: note: ------>vectorizing statement: analysis.l0.i_cost8x4[i_255] = 268435456;

encoder/analyse.c:297:9: note: transform statement.
encoder/analyse.c:297:9: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:297:9: note: transform store. ncopies = 1
encoder/analyse.c:297:9: note: vect_get_vec_def_for_operand: 268435456
encoder/analyse.c:297:9: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:297:9: note: Create vector_cst. nunits = 4
encoder/analyse.c:297:9: note: created new init_stmt: vect_cst_.1833_2011 = { 268435456, 268435456, 268435456, 268435456 };
encoder/analyse.c:297:9: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a record based array ref: MEM[(struct  *)&analysis]
encoder/analyse.c:297:9: note: created vectp_analysis.1835_98
encoder/analyse.c:297:9: note: add new stmt: MEM[(int *)vectp_analysis.1834_2881] = vect_cst_.1833_2011;
encoder/analyse.c:297:9: note: ------>vectorizing statement: analysis.l0.i_cost4x4[i_255] = 268435456;

encoder/analyse.c:297:9: note: transform statement.
encoder/analyse.c:297:9: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:297:9: note: transform store. ncopies = 1
encoder/analyse.c:297:9: note: vect_get_vec_def_for_operand: 268435456
encoder/analyse.c:297:9: note: vect_is_simple_use: operand 268435456
encoder/analyse.c:297:9: note: Create vector_cst. nunits = 4
encoder/analyse.c:297:9: note: created new init_stmt: vect_cst_.1836_2012 = { 268435456, 268435456, 268435456, 268435456 };
encoder/analyse.c:297:9: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a record based array ref: MEM[(struct  *)&analysis]
encoder/analyse.c:297:9: note: created vectp_analysis.1838_111
encoder/analyse.c:297:9: note: add new stmt: MEM[(int *)vectp_analysis.1837_2584] = vect_cst_.1836_2012;
encoder/analyse.c:297:9: note: ------>vectorizing statement: i_936 = i_255 + 1;

encoder/analyse.c:297:9: note: ------>vectorizing statement: # DEBUG i => i_936

encoder/analyse.c:297:9: note: ------>vectorizing statement: # DEBUG i => i_936

encoder/analyse.c:297:9: note: ------>vectorizing statement: ivtmp_2617 = ivtmp_2609 - 1;

encoder/analyse.c:297:9: note: ------>vectorizing statement: vectp_analysis.1831_110 = vectp_analysis.1831_1440 + 16;

encoder/analyse.c:297:9: note: ------>vectorizing statement: vectp_analysis.1834_2849 = vectp_analysis.1834_2881 + 16;

encoder/analyse.c:297:9: note: ------>vectorizing statement: vectp_analysis.1837_2639 = vectp_analysis.1837_2584 + 16;

encoder/analyse.c:297:9: note: ------>vectorizing statement: if (ivtmp_2617 != 0)


loop at encoder/analyse.c:301: if (ivtmp_2640 < 1)

;; Scaling loop 22 with scale 0.250000, bounding iterations to 1 from guessed 3
;; guessed iterations are now 1
encoder/analyse.c:297:9: note: LOOP VECTORIZED


Analyzing loop at encoder/analyse.c:269
encoder/analyse.c:269:56: note: ===== analyze_loop_nest =====
encoder/analyse.c:269:56: note: === vect_analyze_loop_form ===
encoder/analyse.c:269:56: note: ===== analyze_loop_nest_1 =====
encoder/analyse.c:269:56: note: === vect_analyze_loop_form ===
encoder/analyse.c:269:56: note: === get_loop_niters ===
Analyzing # of iterations of loop 24
  exit condition [1, + , 1](no_overflow) < i_ref_1866
  bounds on difference of bases: -2147483649 ... 2147483646
  result:
    zero if i_ref_1866 <= 0
    # of iterations (unsigned int) i_ref_1866 + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
encoder/analyse.c:269:56: note: Symbolic number of iterations is (unsigned int) MAX_EXPR <i_ref_1866, 1>
encoder/analyse.c:269:56: note: not vectorized: inner-loop count not invariant.
encoder/analyse.c:269:56: note: bad loop form.

Analyzing loop at encoder/analyse.c:271
encoder/analyse.c:271:21: note: ===== analyze_loop_nest =====
encoder/analyse.c:271:21: note: === vect_analyze_loop_form ===
encoder/analyse.c:271:21: note: === get_loop_niters ===
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
encoder/analyse.c:271:21: note: Symbolic number of iterations is (unsigned int) MAX_EXPR <i_ref_1866, 1>
encoder/analyse.c:271:21: note: === vect_analyze_data_refs ===
Creating dr for *_902
analyze_innermost: success.
	base_address: fref_84
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 128
	base_object: *fref_84
	Access function 0: {0B, +, 8}_24
encoder/analyse.c:271:21: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/analyse.c:271:21: note: bad data references.
encoder/analyse.c:2114:6: note: vectorized 2 loops in function.
Merging blocks 40 and 539
Merging blocks 44 and 534
Removing basic block 535
basic block 535, loop depth 0
 pred:      
 succ:       538


Removing basic block 537
basic block 537, loop depth 0
 pred:      
 succ:       47


Removing basic block 533
basic block 533, loop depth 1
 pred:       532
goto <bb 532>;
 succ:       532


Removing basic block 532
basic block 532, loop depth 1
 pred:       536
# i_2871 = PHI <0(536)>
# ivtmp_2874 = PHI <4(536)>
# DEBUG i => i_2871
analysis.i_cost8x8direct[i_2871] = 268435456;
analysis.l1.i_cost4x8[i_2871] = 268435456;
analysis.l1.i_cost8x4[i_2871] = 268435456;
analysis.l1.i_cost4x4[i_2871] = 268435456;
i_2833 = i_2871 + 1;
# DEBUG i => i_2833
# DEBUG i => i_2833
ivtmp_2848 = ivtmp_2874 - 1;
if (ivtmp_2848 != 0)
 succ:       47


Removing basic block 536
basic block 536, loop depth 0
 pred:       44
 succ:      


Merging blocks 44 and 538
fix_loop_structure: removing loop 56
x264_macroblock_analyse (struct x264_t * h)
{
  vector(4) int * vectp_analysis.1838;
  vector(4) int * vectp_analysis.1837;
  vector(4) int vect_cst_.1836;
  vector(4) int * vectp_analysis.1835;
  vector(4) int * vectp_analysis.1834;
  vector(4) int vect_cst_.1833;
  vector(4) int * vectp_analysis.1832;
  vector(4) int * vectp_analysis.1831;
  vector(4) int vect_cst_.1830;
  vector(4) int * vectp_analysis.1829;
  vector(4) int * vectp_analysis.1828;
  vector(4) int vect_cst_.1827;
  vector(4) int * vectp_analysis.1826;
  vector(4) int * vectp_analysis.1825;
  vector(4) int vect_cst_.1824;
  vector(4) int * vectp_analysis.1823;
  vector(4) int * vectp_analysis.1822;
  vector(4) int vect_cst_.1821;
  vector(4) int * vectp_analysis.1820;
  vector(4) int * vectp_analysis.1819;
  vector(4) int vect_cst_.1818;
  int i_cost4;
  int i_cost8;
  const int i_biweight;
  int i;
  int i_rd8;
  uint8_t pix0[256];
  uint8_t pix1[256];
  uint8_t * src0;
  uint8_t * src1;
  int stride0;
  int stride1;
  struct x264_me_t m;
  int i_ref;
  int i_mvc;
  int16_t mvc[9][2];
  int i_halfpel_thresh;
  int * p_halfpel_thresh;
  int dy;
  uint32_t val2;
  int dy;
  uint32_t val2;
  int i;
  const int x;
  const int y;
  int i_rd8;
  struct x264_me_t m;
  int16_t mvc[3][2];
  int i;
  int j;
  struct x264_me_t * l0m;
  const int ref8[2];
  const int i_ref;
  const int i_ref_cost;
  int dy;
  int dy;
  int dy;
  int dx;
  uint64_t val64;
  uint8_t pix1[128];
  const int i_stride;
  const int or;
  const int oe;
  int D.26062;
  uint8_t * * p_fref;
  int i4x4;
  const int idx;
  const int x4;
  const int y4;
  const int i_mvc;
  struct x264_me_t * m;
  int dy;
  int dx;
  const int i_ref;
  const int i_ref_cost;
  uint8_t * * p_fref;
  int i_mvc;
  int16_t[2] * mvc;
  int i;
  struct x264_me_t * m;
  const int x8;
  const int y8;
  int dy;
  int dx;
  uint64_t val64;
  struct x264_me_t m;
  int i_ref;
  int i;
  int i_maxref;
  struct x264_me_t * l0m;
  const int x8;
  const int y8;
  const int i_ref_cost;
  int dy;
  int dy;
  int dy;
  int dx;
  uint64_t val64;
  struct x264_me_t m;
  int i_ref;
  int i_mvc;
  int16_t mvc[8][2];
  int i_halfpel_thresh;
  int * p_halfpel_thresh;
  const int i_ref_cost;
  int dy;
  uint32_t val2;
  int dy;
  int dx;
  uint64_t val64;
  static const char __PRETTY_FUNCTION__[29] = "x264_mb_analyse_inter_p16x16";
  int i;
  int i;
  int j;
  int mb_y;
  int mb_height;
  int thread_mvy_range;
  int pix_y;
  int thresh;
  struct x264_frame_t * * fref;
  int i_ref;
  int dy;
  int dy;
  uint32_t val2;
  int dy;
  uint32_t val2;
  int dy;
  uint32_t val2;
  int dy;
  const int i_biweight;
  int i_part_type;
  int i_type_cost;
  int i_part_cost_old;
  struct x264_me_t * m;
  int i_satd_inter;
  int i_partition;
  int i_type;
  const unsigned int flags;
  int b_changed;
  int b_skip;
  int i_bskip_cost;
  int i8x8;
  int i8x8;
  int i_cost8x8;
  int i_satd_intra;
  int i_satd_inter;
  int i_thresh16x8;
  int i_partition;
  int i_type;
  const unsigned int flags;
  int i_intra_cost;
  int b_skip;
  static const char __PRETTY_FUNCTION__[24] = "x264_macroblock_analyse";
  int i;
  int i_cost;
  struct x264_mb_analysis_t analysis;
  _Bool _38;
  int * iftmp.54_63;
  _Bool _90;
  int _118;
  int _147;
  int _149;
  int _152;
  int _157;
  int i_cost.72_171;
  int _173;
  int _176;
  void (*<T1477>) (uint8_t *, int, int) _177;
  int _178;
  int _179;
  int _180;
  uint8_t * _181;
  int _184;
  int _185;
  short int _186;
  int _187;
  int _188;
  int _189;
  int _191;
  int _192;
  int _193;
  int _194;
  int _195;
  uint8_t * _196;
  void (*<T1477>) (uint8_t *, int, int) _197;
  int _198;
  int _199;
  int _200;
  uint8_t * _201;
  int _205;
  unsigned int _207;
  int _208;
  int _210;
  int _211;
  int _212;
  int _217;
  int _218;
  unsigned int _220;
  int _223;
  int _233;
  int _234;
  int _247;
  int _251;
  int _253;
  int _254;
  int _258;
  int _264;
  int _265;
  int _270;
  int _271;
  int _275;
  struct x264_me_t * _276;
  int _278;
  int _279;
  struct x264_me_t * _282;
  struct x264_me_t * _284;
  int _286;
  int _287;
  int _288;
  struct x264_me_t * _292;
  struct x264_me_t * _294;
  int _296;
  int _297;
  int _298;
  struct x264_me_t * _302;
  struct x264_me_t * _304;
  struct x264_me_t * _306;
  struct x264_me_t * _308;
  int _310;
  int _311;
  int _312;
  int _313;
  int _314;
  int _315;
  int _316;
  int _322;
  int _326;
  int i_cost.38_328;
  int _329;
  int _330;
  int i_cost.41_332;
  int _334;
  int i_cost.40_336;
  int _338;
  unsigned int ivtmp_340;
  int _346;
  int _349;
  int _350;
  int _365;
  int _377;
  int _379;
  int _382;
  int _383;
  int _385;
  int _387;
  int _389;
  int _390;
  int _395;
  int _396;
  int _402;
  int _403;
  int _404;
  int _406;
  int _412;
  int _414;
  int _415;
  int _417;
  int _420;
  int _421;
  int _422;
  struct x264_me_t * _423;
  int _425;
  int _426;
  struct x264_me_t * _427;
  int _429;
  int _430;
  struct x264_me_t * _431;
  int _433;
  int _434;
  struct x264_me_t * _435;
  int _437;
  int _438;
  struct x264_me_t * _439;
  int _441;
  int _442;
  struct x264_me_t * _443;
  int _445;
  int _446;
  struct x264_me_t * _447;
  int _449;
  int _450;
  struct x264_me_t * _451;
  int _453;
  int _454;
  struct x264_me_t * _455;
  short int _462;
  int _463;
  int _464;
  int _465;
  int _467;
  int _470;
  int _472;
  int _473;
  int _475;
  int _477;
  int b_changed.55_479;
  int _482;
  int _483;
  int _484;
  int _489;
  int _491;
  int _492;
  int _494;
  int _495;
  int _498;
  int _499;
  int _500;
  int _501;
  _Bool _502;
  int _505;
  int _510;
  int _511;
  int _512;
  int _523;
  int _525;
  int _526;
  int i_cost.68_528;
  int i_cost.67_529;
  int i_cost.65_530;
  int i_cost.66_531;
  unsigned int _535;
  int _540;
  int _541;
  int _542;
  int _543;
  int _551;
  int _552;
  int _562;
  int _565;
  int i_cost.56_568;
  int _569;
  int _570;
  int i_cost.42_576;
  int _577;
  int _578;
  int _581;
  struct x264_me_t * _582;
  int _584;
  struct x264_me_t * _585;
  int _588;
  struct x264_me_t * _589;
  int _591;
  struct x264_me_t * _592;
  unsigned char _596;
  int _599;
  int _601;
  int i_cost.59_604;
  int _605;
  int _606;
  int _607;
  int _608;
  unsigned char _610;
  int _613;
  int _615;
  int i_cost.59_618;
  int _619;
  int _620;
  int _621;
  int _622;
  int _625;
  int _656;
  int _657;
  unsigned int i_type.73_677;
  int _679;
  int _680;
  unsigned int _683;
  int _684;
  int _685;
  short int _686;
  int _689;
  int _691;
  int _693;
  int _695;
  int _696;
  int _697;
  int _700;
  int _701;
  struct x264_me_t * _702;
  int _704;
  int _705;
  struct x264_me_t * _706;
  int _708;
  struct x264_me_t * _709;
  struct x264_me_t * _710;
  int _713;
  int _714;
  int _717;
  int _718;
  struct x264_me_t * _719;
  int _721;
  int _722;
  struct x264_me_t * _723;
  int _725;
  struct x264_me_t * _726;
  struct x264_me_t * _727;
  int _730;
  int _731;
  int _732;
  struct x264_me_t * _733;
  int _735;
  int _736;
  struct x264_me_t * _737;
  int _739;
  struct x264_me_t * _740;
  struct x264_me_t * _741;
  int _748;
  int _750;
  int _752;
  _Bool _753;
  int _754;
  int _756;
  _Bool _757;
  _Bool _758;
  _Bool _759;
  int _760;
  int _763;
  int * _767;
  int * _768;
  int _770;
  int _779;
  unsigned int ivtmp_782;
  int _788;
  int _790;
  unsigned int ivtmp_791;
  _Bool _800;
  int _804;
  unsigned int ivtmp_806;
  unsigned int ivtmp_811;
  int _821;
  int _829;
  int _830;
  _Bool _831;
  _Bool _834;
  int _835;
  _Bool _836;
  int _837;
  int _838;
  const uint8_t * _839;
  sizetype _840;
  const uint8_t * _841;
  unsigned char _842;
  int _843;
  int _844;
  int _845;
  int _846;
  int _847;
  int _849;
  int _851;
  long unsigned int _852;
  long unsigned int _853;
  long unsigned int _854;
  long unsigned int _855;
  int iftmp.76_856;
  int iftmp.76_857;
  int _858;
  int _859;
  int iftmp.77_860;
  int _861;
  int _863;
  int _864;
  int _865;
  struct x264_sps_t * _866;
  int _867;
  int _868;
  int _869;
  int _870;
  int _871;
  int _872;
  int _873;
  int iftmp.82_874;
  int iftmp.82_875;
  int iftmp.82_876;
  int iftmp.82_877;
  int _878;
  int _879;
  int _880;
  int _881;
  int _882;
  int _883;
  int _885;
  int _887;
  int _888;
  int _889;
  int _891;
  long unsigned int _899;
  long unsigned int _900;
  struct x264_frame_t * * _902;
  struct x264_frame_t * _903;
  struct x264_frame_t * _904;
  int _905;
  int _906;
  int _912;
  int _914;
  int _917;
  int _918;
  int _919;
  int _920;
  int _921;
  int _922;
  int _923;
  int iftmp.82_924;
  int iftmp.82_925;
  int iftmp.82_926;
  int iftmp.82_927;
  int _929;
  int _930;
  int _931;
  int _932;
  int _933;
  int _934;
  int _940;
  int _941;
  int _942;
  int _943;
  unsigned int _944;
  int _945;
  unsigned int _946;
  int _947;
  unsigned int _948;
  int _949;
  unsigned int _950;
  struct x264_frame_t * _951;
  int8_t * _952;
  sizetype _953;
  int8_t * _954;
  signed char _955;
  unsigned char _956;
  int _957;
  int _958;
  int _959;
  int _960;
  int _961;
  int _962;
  int16_t * _964;
  int _965;
  int _966;
  uint8_t * _967;
  uint8_t * _968;
  uint8_t * _969;
  int _970;
  int _971;
  int _972;
  int _974;
  unsigned char _975;
  int _976;
  unsigned int ivtmp_977;
  int i_halfpel_thresh.85_980;
  uint8_t * _981;
  uint8_t * _982;
  uint8_t * _983;
  uint8_t * _984;
  uint8_t * _985;
  uint8_t * _986;
  uint16_t * _987;
  int i_mvc.86_988;
  int _990;
  int _991;
  int _992;
  int _993;
  int _994;
  int _995;
  short int _996;
  int _997;
  short int _998;
  int _999;
  int _1000;
  int _1001;
  short int _1002;
  int _1003;
  short int _1004;
  int _1005;
  int _1006;
  int _1007;
  int _1008;
  int _1009;
  short int _1010;
  int _1011;
  int _1012;
  int _1013;
  int _1015;
  int i_halfpel_thresh.84_1016;
  int i_halfpel_thresh.87_1017;
  int _1018;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _1019;
  int16_t[2] * _1021;
  int16_t[2] * _1022;
  int _1023;
  long unsigned int _1024;
  long unsigned int _1025;
  uint32_t * _1026;
  unsigned int _1027;
  int _1029;
  int _1030;
  unsigned int ivtmp_1031;
  int _1032;
  int _1033;
  short int _1041;
  int _1042;
  int _1043;
  int _1044;
  int _1045;
  int _1046;
  unsigned int _1047;
  unsigned int _1048;
  unsigned int ivtmp_1050;
  long unsigned int _1051;
  long unsigned int _1052;
  int _1063;
  int _1064;
  int _1067;
  int _1068;
  int _1069;
  signed char _1070;
  int _1071;
  signed char _1073;
  int _1074;
  signed char _1076;
  int _1077;
  signed char _1079;
  int _1080;
  signed char _1082;
  int _1083;
  signed char _1085;
  int _1086;
  int16_t[2] * _1089;
  int16_t[2] * _1090;
  uint32_t * _1094;
  unsigned int _1095;
  int16_t * _1102;
  int _1103;
  int _1104;
  uint8_t * _1105;
  int _1106;
  int _1107;
  int _1108;
  sizetype _1109;
  uint8_t * _1110;
  uint8_t * _1111;
  int _1112;
  int _1113;
  int _1114;
  int _1115;
  int _1116;
  int _1117;
  sizetype _1118;
  uint8_t * _1119;
  uint8_t * _1120;
  uint8_t * _1121;
  int _1123;
  int _1124;
  int _1126;
  unsigned char _1127;
  int _1128;
  unsigned int ivtmp_1129;
  uint8_t * _1131;
  int _1133;
  int _1134;
  sizetype _1135;
  uint8_t * _1136;
  uint8_t * _1137;
  uint8_t * _1138;
  uint8_t * _1139;
  uint8_t * _1140;
  uint8_t * _1141;
  uint8_t * _1142;
  uint8_t * _1143;
  int _1145;
  int _1146;
  sizetype _1147;
  uint8_t * _1148;
  uint8_t * _1149;
  uint8_t * _1150;
  uint16_t * _1151;
  long unsigned int _1152;
  uint16_t * _1153;
  int _1160;
  int _1161;
  int _1162;
  int16_t[5][2] * _1171;
  int _1172;
  int _1173;
  int16_t[2] * _1174;
  unsigned int _1175;
  int _1176;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _1177;
  int16_t[2] * _1179;
  unsigned int _1180;
  int16_t[2] * _1186;
  long unsigned int _1187;
  long unsigned int _1188;
  int _1195;
  int _1199;
  int _1201;
  int _1202;
  int _1212;
  int _1214;
  int _1215;
  int _1216;
  int _1217;
  int _1218;
  int _1219;
  int _1220;
  int _1223;
  int _1224;
  int _1225;
  int _1226;
  unsigned char _1227;
  int _1228;
  unsigned int ivtmp_1229;
  unsigned int _1233;
  int16_t * _1238;
  int _1239;
  int _1240;
  uint8_t * _1241;
  int _1242;
  int _1243;
  int _1244;
  sizetype _1245;
  uint8_t * _1246;
  uint8_t * _1247;
  int _1248;
  int _1249;
  int _1250;
  int _1251;
  int _1252;
  int _1253;
  sizetype _1254;
  uint8_t * _1255;
  uint8_t * _1256;
  uint8_t * _1257;
  uint8_t * _1258;
  int _1259;
  int _1260;
  int _1261;
  sizetype _1262;
  uint8_t * _1263;
  uint8_t * _1264;
  int _1267;
  uint8_t * _1269;
  uint8_t * _1270;
  uint8_t * _1275;
  uint8_t * _1276;
  uint8_t * _1281;
  uint8_t * _1282;
  int _1284;
  int _1285;
  sizetype _1286;
  uint8_t * _1287;
  uint8_t * _1288;
  uint8_t * _1293;
  uint16_t * _1294;
  long unsigned int _1299;
  uint16_t * _1300;
  int16_t[2] * _1301;
  int _1302;
  int16_t[2] * _1304;
  unsigned int _1305;
  int _1306;
  int _1307;
  int _1308;
  int _1309;
  int _1310;
  int16_t[2] * _1311;
  long unsigned int _1312;
  long unsigned int _1313;
  long unsigned int _1324;
  long unsigned int _1325;
  uint32_t * _1326;
  int _1328;
  int _1329;
  int _1330;
  int _1331;
  int _1333;
  int _1334;
  int _1335;
  int _1336;
  int _1337;
  int _1338;
  int _1339;
  int _1341;
  int _1342;
  int _1343;
  int _1344;
  unsigned char _1345;
  int _1346;
  unsigned int ivtmp_1347;
  int _1349;
  unsigned char _1355;
  unsigned char _1357;
  _Bool _1359;
  int16_t * _1362;
  int _1363;
  int _1364;
  uint8_t * _1365;
  int _1366;
  int _1367;
  int _1368;
  sizetype _1369;
  uint8_t * _1370;
  uint8_t * _1371;
  int _1372;
  int _1373;
  int _1374;
  int _1375;
  int _1376;
  int _1377;
  sizetype _1378;
  uint8_t * _1379;
  uint8_t * _1380;
  uint8_t * _1381;
  uint8_t * _1382;
  int _1383;
  int _1384;
  int _1385;
  sizetype _1386;
  uint8_t * _1387;
  uint8_t * _1388;
  uint8_t * _1393;
  uint8_t * _1394;
  uint8_t * _1399;
  uint8_t * _1400;
  uint8_t * _1405;
  uint8_t * _1406;
  _Bool _1407;
  int _1408;
  int _1409;
  sizetype _1410;
  uint8_t * _1411;
  uint8_t * _1412;
  _Bool _1416;
  uint8_t * _1417;
  uint16_t * _1418;
  _Bool _1419;
  int _1422;
  long unsigned int _1423;
  uint16_t * _1424;
  int16_t[2] * _1425;
  int16_t[2] * _1427;
  unsigned int _1428;
  int _1429;
  int _1430;
  int _1431;
  int16_t[2] * _1432;
  unsigned int ivtmp_1437;
  int _1443;
  int _1444;
  int _1445;
  int _1446;
  int _1447;
  int _1448;
  int _1449;
  int _1450;
  int _1451;
  int _1452;
  int _1453;
  unsigned char _1454;
  int _1455;
  unsigned int ivtmp_1456;
  int _1458;
  int _1459;
  int _1460;
  int _1461;
  int _1463;
  int _1464;
  int _1466;
  int _1467;
  int _1468;
  int _1469;
  int _1470;
  int _1472;
  int _1473;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _1475;
  short int _1476;
  int _1477;
  short int _1478;
  int _1479;
  uint8_t * _1480;
  sizetype _1481;
  uint8_t * _1482;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _1483;
  short int _1484;
  int _1485;
  short int _1486;
  int _1487;
  uint8_t * _1488;
  uint8_t * _1489;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _1490;
  short int _1491;
  int _1492;
  short int _1493;
  int _1494;
  uint8_t * _1495;
  int _1496;
  sizetype _1497;
  uint8_t * _1498;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _1499;
  short int _1500;
  int _1501;
  short int _1502;
  int _1503;
  uint8_t * _1504;
  uint8_t * _1505;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _1506;
  short int _1507;
  int _1508;
  short int _1509;
  int _1510;
  uint8_t * _1511;
  int _1512;
  int _1513;
  sizetype _1514;
  uint8_t * _1515;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _1516;
  short int _1517;
  int _1518;
  short int _1519;
  int _1520;
  uint8_t * _1521;
  uint8_t * _1522;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _1523;
  short int _1524;
  int _1525;
  short int _1526;
  int _1527;
  uint8_t * _1528;
  int _1529;
  sizetype _1530;
  uint8_t * _1531;
  void (*<T1455>) (uint8_t *, int, uint8_t *, int, int, int, int, int) _1532;
  short int _1533;
  int _1534;
  short int _1535;
  int _1536;
  uint8_t * _1537;
  uint8_t * _1538;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _1602;
  uint8_t * _1603;
  sizetype _1604;
  uint8_t * _1605;
  int _1606;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _1607;
  uint8_t * _1608;
  uint8_t * _1609;
  int _1610;
  int _1611;
  int _1614;
  int _1615;
  int _1616;
  int16_t * _1617;
  int _1618;
  int _1619;
  uint8_t * _1620;
  int _1621;
  sizetype _1622;
  uint8_t * _1623;
  uint8_t * _1624;
  int _1625;
  sizetype _1626;
  uint8_t * _1627;
  uint8_t * _1628;
  uint8_t * _1629;
  int _1632;
  int _1633;
  int _1634;
  int _1635;
  unsigned char _1636;
  int _1637;
  unsigned int ivtmp_1638;
  int16_t[2] * _1640;
  unsigned int _1641;
  int16_t[2] * _1643;
  unsigned int _1644;
  int16_t[2] * _1646;
  unsigned int _1647;
  uint8_t * _1648;
  uint8_t * _1649;
  uint8_t * _1650;
  uint8_t * _1651;
  uint8_t * _1652;
  uint8_t * _1653;
  uint8_t * _1654;
  uint8_t * _1655;
  uint8_t * _1656;
  uint8_t * _1657;
  uint8_t * _1658;
  uint8_t * _1659;
  uint16_t * _1660;
  uint16_t * _1662;
  int _1666;
  int _1667;
  int _1676;
  int _1677;
  int _1678;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _1679;
  int iftmp.89_1681;
  int16_t[2] * _1682;
  unsigned int _1683;
  int16_t[2] * _1686;
  long unsigned int _1687;
  long unsigned int _1688;
  _Bool _1690;
  int _1699;
  int _1701;
  int _1702;
  int _1711;
  int _1712;
  int _1715;
  _Bool _1716;
  int _1717;
  int _1718;
  long int _1722;
  long int _1723;
  long int _1724;
  long int _1725;
  long int _1726;
  int _1729;
  _Bool _1730;
  int _1731;
  int _1732;
  int _1734;
  int _1736;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _1738;
  uint8_t * _1739;
  int _1740;
  int _1741;
  sizetype _1742;
  uint8_t * _1743;
  uint8_t * _1744;
  int _1745;
  int _1746;
  sizetype _1747;
  uint8_t * _1748;
  int _1749;
  int _1750;
  int _1751;
  int _1752;
  int _1753;
  int16_t * _1755;
  int _1756;
  int _1757;
  uint8_t * _1758;
  uint8_t * _1759;
  uint8_t * _1760;
  uint8_t * _1762;
  uint8_t * _1763;
  uint8_t * _1764;
  uint8_t * _1765;
  uint8_t * _1766;
  uint8_t * _1767;
  uint16_t * _1768;
  int i_mvc.101_1769;
  int _1771;
  int _1772;
  int _1773;
  int _1774;
  unsigned char _1775;
  int _1776;
  int _1779;
  int _1780;
  int _1781;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _1782;
  short unsigned int _1783;
  int16_t[2] * _1784;
  int _1785;
  long unsigned int _1786;
  long unsigned int _1787;
  uint32_t * _1788;
  unsigned int _1789;
  int _1791;
  int _1792;
  int _1793;
  int _1794;
  int _1795;
  int _1796;
  unsigned char _1797;
  int _1798;
  unsigned int ivtmp_1799;
  int _1802;
  int _1803;
  uint8_t * _1805;
  uint8_t * _1806;
  uint8_t * _1807;
  uint8_t * _1808;
  uint8_t * _1809;
  uint8_t * _1810;
  uint16_t * _1811;
  int i_mvc.101_1812;
  int _1814;
  int _1815;
  int _1816;
  int _1817;
  unsigned char _1818;
  int _1819;
  int _1822;
  int _1823;
  int _1824;
  void * (*<T147b>) (void *, const void *, size_t, void, ...) _1825;
  int16_t[2] * _1827;
  int _1828;
  long unsigned int _1829;
  long unsigned int _1830;
  uint32_t * _1831;
  unsigned int _1832;
  int _1834;
  int _1836;
  int _1837;
  int _1838;
  int _1839;
  unsigned char _1840;
  int _1841;
  unsigned int ivtmp_1842;
  int _1845;
  unsigned int ivtmp_1847;
  int _1848;
  int _1849;
  unsigned int ivtmp_1858;
  int _1859;
  int _1860;
  uint8_t * (*<T1451>) (uint8_t *, int *, uint8_t * *, int, int, int, int, int) _1868;
  short int _1869;
  int _1870;
  short int _1871;
  int _1872;
  int _1873;
  uint8_t *[6] * _1875;
  uint8_t * (*<T1451>) (uint8_t *, int *, uint8_t * *, int, int, int, int, int) _1877;
  short int _1878;
  int _1879;
  short int _1880;
  int _1881;
  int _1882;
  int _1883;
  uint8_t *[6] * _1884;
  void (*<T1459>) (uint8_t *, int, uint8_t *, int, uint8_t *, int, int) _1886;
  int _1887;
  int _1888;
  short int _1889;
  int _1890;
  int stride1.103_1891;
  int stride0.104_1892;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _1893;
  uint8_t * _1894;
  int _1895;
  int _1896;
  int _1897;
  int _1898;
  int _1899;
  int _1900;
  unsigned char _1901;
  int _1902;
  unsigned int ivtmp_1903;
  int _1905;
  int _1906;
  int _1907;
  int _1908;
  int _1909;
  unsigned char _1910;
  int _1911;
  int _1914;
  int _1915;
  int _1916;
  int _1917;
  int _1918;
  int _1919;
  int _1921;
  int _1922;
  int _1924;
  int _1926;
  _Bool _1927;
  int _1928;
  int _1929;
  long int _1933;
  long int _1934;
  long int _1935;
  long int _1936;
  long int _1937;
  int _1940;
  _Bool _1941;
  int _1942;
  int _1943;
  int _1944;
  short int _1945;
  int _1949;
  int _1953;
  struct x264_me_t * _1954;
  struct x264_me_t * _1955;
  int _1958;
  struct x264_me_t * _1959;
  struct x264_me_t * _1960;
  int _1963;
  struct x264_me_t * _1964;
  struct x264_me_t * _1965;
  int _1970;
  int _1971;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _1972;
  uint8_t * _1973;
  uint8_t * _1974;
  int (*<T13a4>) (uint8_t *, int, uint8_t *, int) _1976;
  uint8_t * _1977;
  uint8_t * _1978;
  _Bool _1980;
  int _1981;
  unsigned int ivtmp_2013;
  unsigned int ivtmp_2022;
  int _2140;
  unsigned int ivtmp_2207;
  unsigned int ivtmp_2269;
  void (*<T1477>) (uint8_t *, int, int) _2307;
  int _2324;
  int _2333;
  _Bool _2358;
  short unsigned int _2364;
  _Bool _2368;
  _Bool _2399;
  short unsigned int _2400;
  _Bool _2409;
  short unsigned int _2445;
  int _2472;
  _Bool _2482;
  short unsigned int _2490;
  _Bool _2508;
  _Bool _2513;
  short unsigned int _2517;
  int _2520;
  unsigned char _2523;
  int _2532;
  int _2534;
  int _2535;
  unsigned int _2542;
  _Bool _2545;
  unsigned int ivtmp_2569;
  unsigned int ivtmp_2576;
  unsigned int ivtmp_2577;
  unsigned int ivtmp_2585;
  unsigned int ivtmp_2601;
  unsigned int ivtmp_2609;
  unsigned int ivtmp_2617;
  _Bool _2620;
  int _2630;
  unsigned int ivtmp_2633;
  unsigned int ivtmp_2636;
  unsigned int ivtmp_2640;
  unsigned int ivtmp_2641;
  unsigned int ivtmp_2643;
  unsigned int ivtmp_2646;
  unsigned int ivtmp_2647;
  unsigned int ivtmp_2649;
  unsigned int ivtmp_2651;
  unsigned int ivtmp_2663;
  unsigned int ivtmp_2666;
  int pretmp_2679;
  int prephitmp_2680;
  int pretmp_2681;
  int prephitmp_2682;
  int pretmp_2683;
  int prephitmp_2684;
  int prephitmp_2686;
  int pretmp_2688;
  int prephitmp_2689;
  int pretmp_2691;
  int prephitmp_2692;
  int pretmp_2693;
  int prephitmp_2694;
  int pretmp_2695;
  int prephitmp_2696;
  int pretmp_2697;
  int prephitmp_2698;
  int pretmp_2700;
  int prephitmp_2701;
  int pretmp_2703;
  int prephitmp_2704;
  int pretmp_2706;
  int prephitmp_2707;
  int pretmp_2708;
  int prephitmp_2709;
  unsigned int pretmp_2710;
  unsigned int prephitmp_2711;
  int pretmp_2718;
  int pretmp_2719;
  int pretmp_2720;
  int pretmp_2721;
  int pretmp_2722;
  int pretmp_2723;
  int pretmp_2724;
  int pretmp_2725;
  int prephitmp_2726;
  int pretmp_2727;
  int prephitmp_2728;
  unsigned int pretmp_2729;
  unsigned int pretmp_2730;
  unsigned int prephitmp_2731;
  int pretmp_2735;
  int pretmp_2736;
  int pretmp_2737;
  int pretmp_2738;
  int pretmp_2740;
  int pretmp_2741;
  int pretmp_2742;
  int pretmp_2743;
  int prephitmp_2744;
  int pretmp_2745;
  int prephitmp_2746;
  int pretmp_2747;
  int pretmp_2749;
  int prephitmp_2750;
  int pretmp_2751;
  int prephitmp_2752;
  int pretmp_2753;
  int pretmp_2754;
  int prephitmp_2755;
  int pretmp_2756;
  int pretmp_2757;
  int prephitmp_2758;
  int pretmp_2764;
  int prephitmp_2765;
  int pretmp_2766;
  int pretmp_2767;
  int prephitmp_2768;
  int pretmp_2771;
  int prephitmp_2772;
  int pretmp_2773;
  int pretmp_2774;
  int prephitmp_2775;
  int pretmp_2788;
  int prephitmp_2789;
  int pretmp_2790;
  int prephitmp_2791;
  int pretmp_2792;
  int prephitmp_2793;
  int pretmp_2794;
  int prephitmp_2795;
  int pretmp_2796;
  int prephitmp_2797;
  int pretmp_2798;
  int prephitmp_2799;
  int pretmp_2800;
  int prephitmp_2801;
  int pretmp_2803;
  int pretmp_2804;
  int pretmp_2805;
  int pretmp_2806;
  int pretmp_2807;
  int pretmp_2809;
  int pretmp_2810;
  int pretmp_2811;
  int pretmp_2812;
  int pretmp_2813;
  int prephitmp_2814;
  int pretmp_2815;
  int prephitmp_2816;
  int prephitmp_2817;
  int prephitmp_2818;
  int pretmp_2819;
  int prephitmp_2820;
  int pretmp_2835;
  int pretmp_2836;
  long unsigned int pretmp_2837;
  int pretmp_2838;
  int pretmp_2839;
  int8_t * pretmp_2840;
  int pretmp_2842;
  int pretmp_2845;
  int prephitmp_2846;
  unsigned int ivtmp_2851;
  unsigned int ivtmp_2854;
  int pretmp_2870;
  int16_t[2] * pretmp_2878;
  int pretmp_2882;
  int prephitmp_2883;
  int prephitmp_2884;
  unsigned int ivtmp_2885;
  int pretmp_2886;
  int prephitmp_2887;
  int pretmp_2912;
  int prephitmp_2913;
  int pretmp_2933;
  int prephitmp_2934;
  int pretmp_2935;
  int pretmp_2937;
  int pretmp_2939;
  int pretmp_2941;
  int pretmp_2943;
  int prephitmp_2944;
  int8_t * pretmp_2945;
  int8_t * prephitmp_2946;
  int pretmp_2947;
  int prephitmp_2948;
  int pretmp_2949;
  int prephitmp_2950;
  int pretmp_2951;
  int prephitmp_2952;
  int pretmp_2953;
  int prephitmp_2954;
  int pretmp_2955;
  int prephitmp_2956;
  int pretmp_2957;
  int pretmp_2958;
  int pretmp_2959;
  int pretmp_2960;
  int pretmp_2961;
  int8_t * pretmp_2962;
  int pretmp_2966;
  int pretmp_2968;
  int pretmp_2971;
  int prephitmp_2972;
  int pretmp_2973;
  int pretmp_2974;
  int prephitmp_2975;
  int pretmp_2976;
  long unsigned int pretmp_2978;
  long unsigned int pretmp_2979;
  int pretmp_2981;
  int pretmp_2983;
  int prephitmp_2984;
  int pretmp_2985;
  int prephitmp_2986;
  int pretmp_2988;
  int prephitmp_2989;
  int pretmp_2990;
  int pretmp_2992;
  int prephitmp_2993;
  int pretmp_2995;
  int pretmp_2996;
  int prephitmp_2997;
  int pretmp_3001;
  int prephitmp_3002;
  int pretmp_3004;
  int prephitmp_3005;

  <bb 2>:
  # DEBUG i_cost => 268435456
  _147 = x264_ratecontrol_qp (h_145(D));
  h_145(D)->mb.i_qp = _147;
  _149 = h_145(D)->param.rc.i_aq_mode;
  if (_149 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  x264_adaptive_quant (h_145(D));
  pretmp_2679 = h_145(D)->mb.i_qp;

  <bb 4>:
  # prephitmp_2680 = PHI <_147(2), pretmp_2679(3)>
  # DEBUG D#902 => h_145(D)->mb.i_qp
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  # DEBUG i_qp => D#902
  _829 = h_145(D)->param.analyse.i_subpel_refine;
  _830 = h_145(D)->sh.i_type;
  _831 = _830 == 1;
  i_832 = (int) _831;
  i_833 = _829 - i_832;
  # DEBUG i => i_833
  _834 = i_833 > 5;
  _835 = (int) _834;
  _836 = i_833 > 7;
  _837 = (int) _836;
  _838 = _835 + _837;
  analysis.i_mbrd = _838;
  analysis.i_qp = prephitmp_2680;
  _839 = h_145(D)->chroma_qp_table;
  _840 = (sizetype) prephitmp_2680;
  _841 = _839 + _840;
  _842 = *_841;
  _843 = (int) _842;
  h_145(D)->mb.i_chroma_qp = _843;
  _844 = x264_lambda_tab[prephitmp_2680];
  analysis.i_lambda = _844;
  _845 = x264_lambda2_tab[prephitmp_2680];
  analysis.i_lambda2 = _845;
  _846 = h_145(D)->param.analyse.i_me_method;
  h_145(D)->mb.i_me_method = _846;
  h_145(D)->mb.i_subpel_refine = _829;
  _847 = h_145(D)->param.analyse.b_chroma_me;
  _800 = _830 == 0;
  _2358 = _847 != 0;
  _2545 = _800 & _2358;
  _90 = _829 > 4;
  _2620 = _90 & _2545;
  _2535 = (int) _2620;
  h_145(D)->mb.b_chroma_me = _2535;
  _849 = h_145(D)->param.analyse.i_trellis;
  _2368 = _838 != 0;
  _2513 = _849 > 1;
  _1690 = _2368 & _2513;
  _1162 = (int) _1690;
  h_145(D)->mb.b_trellis = _1162;
  h_145(D)->mb.b_transform_8x8 = 0;
  h_145(D)->mb.b_noise_reduction = 0;
  analysis.i_satd_i8x8chroma = 268435456;
  analysis.i_satd_i4x4 = 268435456;
  analysis.i_satd_i8x8 = 268435456;
  analysis.i_satd_i16x16 = 268435456;
  _851 = h_145(D)->mb.i_psy_rd;
  _2508 = _851 == 0;
  _1419 = _2368 & _2508;
  if (_1419 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  _852 = (long unsigned int) _845;
  _853 = _852 * 3088;
  _854 = _853 + 128;
  _855 = _854 >> 8;
  iftmp.76_856 = (int) _855;

  <bb 6>:
  # iftmp.76_857 = PHI <iftmp.76_856(5), 268435456(4)>
  analysis.i_satd_pcm = iftmp.76_857;
  analysis.b_fast_intra = 0;
  _858 = h_145(D)->mb.b_lossless;
  if (_858 == 0)
    goto <bb 7>;
  else
    goto <bb 11>;

  <bb 7>:
  if (_838 == 0)
    goto <bb 8>;
  else
    goto <bb 11>;

  <bb 8>:
  if (_849 == 0)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 9>:
  _859 = h_145(D)->param.analyse.i_noise_reduction;
  if (_859 == 0)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:

  <bb 11>:
  # iftmp.77_860 = PHI <0(6), 2(7), 1(9), 0(10), 0(8)>
  h_145(D)->mb.i_skip_intra = iftmp.77_860;
  if (_830 != 2)
    goto <bb 12>;
  else
    goto <bb 59>;

  <bb 12>:
  _861 = h_145(D)->param.analyse.i_mv_range;
  thread_mvy_range_862 = _861 * 4;
  # DEBUG i_fmv_range => thread_mvy_range_862
  # DEBUG i_fpel_border => 5
  # DEBUG i_spel_border => 8
  _863 = h_145(D)->mb.i_mb_x;
  _864 = _863 * -64;
  _865 = _864 + -96;
  h_145(D)->mb.mv_min[0] = _865;
  _866 = h_145(D)->sps;
  _867 = _866->i_mb_width;
  _868 = _867 - _863;
  _869 = _868 + -1;
  _870 = _869 * 64;
  _871 = _870 + 96;
  h_145(D)->mb.mv_max[0] = _871;
  _872 = thread_mvy_range_862 + -1;
  _873 = -thread_mvy_range_862;
  # DEBUG v => _865
  # DEBUG i_min => _873
  # DEBUG i_max => _872
  if (_865 >= _873)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  iftmp.82_874 = MIN_EXPR <_865, _872>;

  <bb 14>:
  # iftmp.82_875 = PHI <_873(12), iftmp.82_874(13)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  h_145(D)->mb.mv_min_spel[0] = iftmp.82_875;
  # DEBUG v => _871
  # DEBUG i_min => _873
  # DEBUG i_max => _872
  if (_871 >= _873)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  iftmp.82_876 = MIN_EXPR <_871, _872>;

  <bb 16>:
  # iftmp.82_877 = PHI <_873(14), iftmp.82_876(15)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  h_145(D)->mb.mv_max_spel[0] = iftmp.82_877;
  _878 = iftmp.82_875 >> 2;
  _879 = _878 + 5;
  h_145(D)->mb.mv_min_fpel[0] = _879;
  _880 = iftmp.82_877 >> 2;
  _881 = _880 + -5;
  h_145(D)->mb.mv_max_fpel[0] = _881;
  if (_863 == 0)
    goto <bb 17>;
  else
    goto <bb 40>;

  <bb 17>:
  _882 = h_145(D)->mb.i_mb_y;
  _883 = h_145(D)->sh.b_mbaff;
  mb_y_884 = _882 >> _883;
  # DEBUG mb_y => mb_y_884
  _885 = _866->i_mb_height;
  mb_height_886 = _885 >> _883;
  # DEBUG mb_height => mb_height_886
  # DEBUG thread_mvy_range => thread_mvy_range_862
  _887 = h_145(D)->param.i_threads;
  if (_887 > 1)
    goto <bb 18>;
  else
    goto <bb 35>;

  <bb 18>:
  _888 = h_145(D)->mb.b_interlaced;
  _889 = _882 | _888;
  pix_y_890 = _889 * 16;
  # DEBUG pix_y => pix_y_890
  _891 = h_145(D)->param.analyse.i_mv_range_thread;
  thresh_892 = pix_y_890 + _891;
  # DEBUG thresh => thresh_892
  # DEBUG i => i_832
  # DEBUG thread_mvy_range => thread_mvy_range_862
  # DEBUG i => i_832

  <bb 19>:
  # i_1874 = PHI <i_911(28), i_832(18)>
  # thread_mvy_range_2529 = PHI <thread_mvy_range_2552(28), thread_mvy_range_862(18)>
  # DEBUG thread_mvy_range => thread_mvy_range_2529
  # DEBUG i => i_1874
  if (i_1874 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  fref_894 = &h_145(D)->fref1;
  # DEBUG fref => fref_894
  # DEBUG fref => fref_894
  i_ref_896 = h_145(D)->i_ref1;
  # DEBUG i_ref => i_ref_896
  # DEBUG j => 0
  # DEBUG thread_mvy_range => thread_mvy_range_2529
  # DEBUG j => 0
  if (i_ref_896 > 0)
    goto <bb 22>;
  else
    goto <bb 26>;

  <bb 21>:
  fref_895 = &h_145(D)->fref0;
  # DEBUG fref => fref_895
  # DEBUG fref => fref_895
  i_ref_897 = h_145(D)->i_ref0;
  # DEBUG i_ref => i_ref_897
  # DEBUG j => 0
  # DEBUG thread_mvy_range => thread_mvy_range_2529
  # DEBUG j => 0
  if (i_ref_897 > 0)
    goto <bb 22>;
  else
    goto <bb 29>;

  <bb 22>:
  # i_ref_1866 = PHI <i_ref_896(20), i_ref_897(21)>
  # fref_84 = PHI <fref_894(20), fref_895(21)>

  <bb 23>:
  # j_9 = PHI <0(22), j_909(25)>
  # thread_mvy_range_938 = PHI <thread_mvy_range_2529(22), thread_mvy_range_908(25)>
  # DEBUG thread_mvy_range => thread_mvy_range_938
  # DEBUG j => j_9
  _899 = (long unsigned int) j_9;
  _900 = _899 * 8;
  _902 = fref_84 + _900;
  _903 = *_902;
  x264_frame_cond_wait (_903, thresh_892);
  _904 = *_902;
  _905 = _904->i_lines_completed;
  _906 = _905 - pix_y_890;
  thread_mvy_range_908 = MIN_EXPR <_906, thread_mvy_range_938>;
  # DEBUG thread_mvy_range => thread_mvy_range_908
  j_909 = j_9 + 1;
  # DEBUG j => j_909
  # DEBUG thread_mvy_range => thread_mvy_range_908
  # DEBUG j => j_909
  if (j_909 < i_ref_1866)
    goto <bb 25>;
  else
    goto <bb 24>;

  <bb 24>:
  # thread_mvy_range_2631 = PHI <thread_mvy_range_908(23)>
  goto <bb 26>;

  <bb 25>:
  goto <bb 23>;

  <bb 26>:
  # thread_mvy_range_2552 = PHI <thread_mvy_range_2631(24), thread_mvy_range_2529(20)>
  i_911 = i_1874 + -1;
  # DEBUG i => i_911
  # DEBUG thread_mvy_range => thread_mvy_range_2552
  # DEBUG i => i_911
  if (i_911 != -1)
    goto <bb 28>;
  else
    goto <bb 27>;

  <bb 27>:
  # thread_mvy_range_2627 = PHI <thread_mvy_range_2552(26)>
  goto <bb 30>;

  <bb 28>:
  goto <bb 19>;

  <bb 29>:
  # thread_mvy_range_2628 = PHI <thread_mvy_range_2529(21)>

  <bb 30>:
  # thread_mvy_range_1594 = PHI <thread_mvy_range_2627(27), thread_mvy_range_2628(29)>
  # DEBUG thread_mvy_range => thread_mvy_range_1594
  # DEBUG i => -1
  _912 = h_145(D)->param.b_deterministic;
  if (_912 != 0)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  thread_mvy_range_913 = h_145(D)->param.analyse.i_mv_range_thread;
  # DEBUG thread_mvy_range => thread_mvy_range_913

  <bb 32>:
  # thread_mvy_range_915 = PHI <thread_mvy_range_1594(30), thread_mvy_range_913(31)>
  # DEBUG thread_mvy_range => thread_mvy_range_915
  _914 = h_145(D)->mb.b_interlaced;
  if (_914 != 0)
    goto <bb 34>;
  else
    goto <bb 33>;

  <bb 33>:
  pretmp_2995 = h_145(D)->sh.i_type;
  goto <bb 35>;

  <bb 34>:
  thread_mvy_range_916 = thread_mvy_range_915 >> 1;
  # DEBUG thread_mvy_range => thread_mvy_range_916
  pretmp_2996 = h_145(D)->sh.i_type;

  <bb 35>:
  # thread_mvy_range_928 = PHI <thread_mvy_range_862(17), thread_mvy_range_915(33), thread_mvy_range_916(34)>
  # prephitmp_2997 = PHI <_830(17), pretmp_2995(33), pretmp_2996(34)>
  # DEBUG thread_mvy_range => thread_mvy_range_928
  _917 = mb_y_884 * -64;
  _918 = _917 + -96;
  h_145(D)->mb.mv_min[1] = _918;
  _919 = mb_height_886 - mb_y_884;
  _920 = _919 + -1;
  _921 = _920 * 64;
  _922 = _921 + 96;
  h_145(D)->mb.mv_max[1] = _922;
  _923 = MAX_EXPR <_873, -2016>;
  # DEBUG v => _918
  # DEBUG i_min => _923
  # DEBUG i_max => thread_mvy_range_862
  if (_918 >= _923)
    goto <bb 36>;
  else
    goto <bb 37>;

  <bb 36>:
  iftmp.82_924 = MIN_EXPR <thread_mvy_range_862, _918>;

  <bb 37>:
  # iftmp.82_925 = PHI <_923(35), iftmp.82_924(36)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  h_145(D)->mb.mv_min_spel[1] = iftmp.82_925;
  # DEBUG v => _922
  # DEBUG i_min => _873
  # DEBUG i_max => _872
  if (_873 <= _922)
    goto <bb 38>;
  else
    goto <bb 39>;

  <bb 38>:
  iftmp.82_926 = MIN_EXPR <_872, _922>;

  <bb 39>:
  # iftmp.82_927 = PHI <_873(37), iftmp.82_926(38)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  _929 = thread_mvy_range_928 * 4;
  _930 = MIN_EXPR <iftmp.82_927, _929>;
  h_145(D)->mb.mv_max_spel[1] = _930;
  _931 = iftmp.82_925 >> 2;
  _932 = _931 + 5;
  h_145(D)->mb.mv_min_fpel[1] = _932;
  _933 = _930 >> 2;
  _934 = _933 + -5;
  h_145(D)->mb.mv_max_fpel[1] = _934;

  <bb 40>:
  # prephitmp_2686 = PHI <_830(16), prephitmp_2997(39)>
  analysis.l0.i_cost8x8 = 268435456;
  analysis.l0.i_rd16x16 = 268435456;
  analysis.l0.me16x16.cost = 268435456;
  # DEBUG i => 0
  # DEBUG i => 0
  vect_cst_.1830_2911 = { 268435456, 268435456, 268435456, 268435456 };
  vectp_analysis.1832_2970 = &analysis + 4800;
  vect_cst_.1833_2011 = { 268435456, 268435456, 268435456, 268435456 };
  vectp_analysis.1835_98 = &analysis + 3760;
  vect_cst_.1836_2012 = { 268435456, 268435456, 268435456, 268435456 };
  vectp_analysis.1838_111 = &analysis + 1696;

  <bb 41>:
  # i_255 = PHI <i_936(42), 0(40)>
  # ivtmp_2609 = PHI <ivtmp_2617(42), 4(40)>
  # vectp_analysis.1831_1440 = PHI <vectp_analysis.1831_110(42), vectp_analysis.1832_2970(40)>
  # vectp_analysis.1834_2881 = PHI <vectp_analysis.1834_2849(42), vectp_analysis.1835_98(40)>
  # vectp_analysis.1837_2584 = PHI <vectp_analysis.1837_2639(42), vectp_analysis.1838_111(40)>
  # ivtmp_2013 = PHI <ivtmp_2640(42), 0(40)>
  # DEBUG i => i_255
  MEM[(int *)vectp_analysis.1831_1440] = vect_cst_.1830_2911;
  MEM[(int *)vectp_analysis.1834_2881] = vect_cst_.1833_2011;
  MEM[(int *)vectp_analysis.1837_2584] = vect_cst_.1836_2012;
  i_936 = i_255 + 1;
  # DEBUG i => i_936
  # DEBUG i => i_936
  ivtmp_2617 = ivtmp_2609 - 1;
  vectp_analysis.1831_110 = vectp_analysis.1831_1440 + 16;
  vectp_analysis.1834_2849 = vectp_analysis.1834_2881 + 16;
  vectp_analysis.1837_2639 = vectp_analysis.1837_2584 + 16;
  ivtmp_2640 = ivtmp_2013 + 1;
  if (ivtmp_2640 < 1)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  goto <bb 41>;

  <bb 43>:
  analysis.l0.i_cost8x16 = 268435456;
  analysis.l0.i_cost16x8 = 268435456;
  if (prephitmp_2686 == 1)
    goto <bb 44>;
  else
    goto <bb 48>;

  <bb 44>:
  analysis.l1.i_cost8x8 = 268435456;
  analysis.l1.i_rd16x16 = 268435456;
  analysis.l1.me16x16.cost = 268435456;
  # DEBUG i => 0
  # DEBUG i => 0
  vect_cst_.1818_2853 = { 268435456, 268435456, 268435456, 268435456 };
  vectp_analysis.1820_787 = &analysis + 12396;
  vect_cst_.1821_2019 = { 268435456, 268435456, 268435456, 268435456 };
  vectp_analysis.1823_812 = &analysis + 10800;
  vect_cst_.1824_2020 = { 268435456, 268435456, 268435456, 268435456 };
  vectp_analysis.1826_803 = &analysis + 9760;
  vect_cst_.1827_2021 = { 268435456, 268435456, 268435456, 268435456 };
  vectp_analysis.1829_124 = &analysis + 7696;

  <bb 45>:
  # i_2616 = PHI <i_939(46), 0(44)>
  # ivtmp_1858 = PHI <ivtmp_2601(46), 4(44)>
  # vectp_analysis.1819_1350 = PHI <vectp_analysis.1819_778(46), vectp_analysis.1820_787(44)>
  # vectp_analysis.1822_2372 = PHI <vectp_analysis.1822_2381(46), vectp_analysis.1823_812(44)>
  # vectp_analysis.1825_1968 = PHI <vectp_analysis.1825_2345(46), vectp_analysis.1826_803(44)>
  # vectp_analysis.1828_2321 = PHI <vectp_analysis.1828_2665(46), vectp_analysis.1829_124(44)>
  # ivtmp_2022 = PHI <ivtmp_2885(46), 0(44)>
  # DEBUG i => i_2616
  MEM[(int *)vectp_analysis.1819_1350] = vect_cst_.1818_2853;
  MEM[(int *)vectp_analysis.1822_2372] = vect_cst_.1821_2019;
  MEM[(int *)vectp_analysis.1825_1968] = vect_cst_.1824_2020;
  MEM[(int *)vectp_analysis.1828_2321] = vect_cst_.1827_2021;
  i_939 = i_2616 + 1;
  # DEBUG i => i_939
  # DEBUG i => i_939
  ivtmp_2601 = ivtmp_1858 - 1;
  vectp_analysis.1819_778 = vectp_analysis.1819_1350 + 16;
  vectp_analysis.1822_2381 = vectp_analysis.1822_2372 + 16;
  vectp_analysis.1825_2345 = vectp_analysis.1825_1968 + 16;
  vectp_analysis.1828_2665 = vectp_analysis.1828_2321 + 16;
  ivtmp_2885 = ivtmp_2022 + 1;
  if (ivtmp_2885 < 1)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:
  goto <bb 45>;

  <bb 47>:
  analysis.i_cost8x16bi = 268435456;
  analysis.i_cost16x8bi = 268435456;
  analysis.i_cost8x8bi = 268435456;
  analysis.i_cost16x16direct = 268435456;
  analysis.i_cost16x16bi = 268435456;
  analysis.i_rd8x16bi = 268435456;
  analysis.i_rd16x8bi = 268435456;
  analysis.i_rd8x8bi = 268435456;
  analysis.i_rd16x16direct = 268435456;
  analysis.i_rd16x16bi = 268435456;
  analysis.l1.i_cost8x16 = 268435456;
  analysis.l1.i_cost16x8 = 268435456;

  <bb 48>:
  _940 = h_145(D)->mb.i_mb_xy;
  _941 = h_145(D)->sh.i_first_mb;
  _942 = _940 - _941;
  if (_942 > 4)
    goto <bb 49>;
  else
    goto <bb 57>;

  <bb 49>:
  _943 = h_145(D)->mb.i_mb_type_left;
  _944 = (unsigned int) _943;
  if (_944 <= 3)
    goto <bb 57>;
  else
    goto <bb 50>;

  <bb 50>:
  _945 = h_145(D)->mb.i_mb_type_top;
  _946 = (unsigned int) _945;
  if (_946 <= 3)
    goto <bb 57>;
  else
    goto <bb 51>;

  <bb 51>:
  _947 = h_145(D)->mb.i_mb_type_topleft;
  _948 = (unsigned int) _947;
  if (_948 <= 3)
    goto <bb 57>;
  else
    goto <bb 52>;

  <bb 52>:
  _949 = h_145(D)->mb.i_mb_type_topright;
  _950 = (unsigned int) _949;
  if (_950 <= 3)
    goto <bb 57>;
  else
    goto <bb 53>;

  <bb 53>:
  if (prephitmp_2686 == 0)
    goto <bb 54>;
  else
    goto <bb 55>;

  <bb 54>:
  _951 = h_145(D)->fref0[0];
  _952 = _951->mb_type;
  _953 = (sizetype) _940;
  _954 = _952 + _953;
  _955 = *_954;
  _956 = (unsigned char) _955;
  if (_956 <= 3)
    goto <bb 57>;
  else
    goto <bb 55>;

  <bb 55>:
  _957 = h_145(D)->stat.frame.i_mb_count[0];
  _958 = h_145(D)->stat.frame.i_mb_count[1];
  _959 = _957 + _958;
  _960 = h_145(D)->stat.frame.i_mb_count[2];
  _961 = _959 + _960;
  _962 = _961 * 3;
  if (_942 < _962)
    goto <bb 57>;
  else
    goto <bb 56>;

  <bb 56>:
  analysis.b_fast_intra = 1;

  <bb 57>:
  h_145(D)->mb.b_skip_mc = 0;
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG i_qp => NULL
  # DEBUG i_ref => NULL
  # DEBUG fref => NULL
  # DEBUG thresh => NULL
  # DEBUG pix_y => NULL
  # DEBUG thread_mvy_range => NULL
  # DEBUG mb_height => NULL
  # DEBUG mb_y => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  # DEBUG i => NULL
  if (prephitmp_2686 == 2)
    goto <bb 58>;
  else
    goto <bb 72>;

  <bb 58>:
  pretmp_2683 = analysis.i_mbrd;

  <bb 59>:
  # prephitmp_2684 = PHI <pretmp_2683(58), _838(11)>
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG i_qp => NULL
  # DEBUG i_ref => NULL
  # DEBUG fref => NULL
  # DEBUG thresh => NULL
  # DEBUG pix_y => NULL
  # DEBUG thread_mvy_range => NULL
  # DEBUG mb_height => NULL
  # DEBUG mb_y => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  # DEBUG i => NULL
  if (prephitmp_2684 != 0)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 60>:
  x264_mb_cache_fenc_satd (h_145(D));

  <bb 61>:
  x264_mb_analyse_intra (h_145(D), &analysis, 268435456);
  _157 = analysis.i_mbrd;
  if (_157 != 0)
    goto <bb 62>;
  else
    goto <bb 63>;

  <bb 62>:
  x264_intra_rd (h_145(D), &analysis, 268435456);

  <bb 63>:
  i_cost_159 = analysis.i_satd_i16x16;
  # DEBUG i_cost => i_cost_159
  h_145(D)->mb.i_type = 2;
  i_cost_162 = analysis.i_satd_i4x4;
  if (i_cost_159 > i_cost_162)
    goto <bb 64>;
  else
    goto <bb 65>;

  <bb 64>:
  # DEBUG i_cost => i_cost_162
  h_145(D)->mb.i_type = 0;

  <bb 65>:
  # i_cost_746 = PHI <i_cost_159(63), i_cost_162(64)>
  # DEBUG i_cost => i_cost_746
  i_cost_166 = analysis.i_satd_i8x8;
  if (i_cost_166 < i_cost_746)
    goto <bb 66>;
  else
    goto <bb 67>;

  <bb 66>:
  # DEBUG i_cost => i_cost_166
  h_145(D)->mb.i_type = 1;

  <bb 67>:
  # i_cost_766 = PHI <i_cost_746(65), i_cost_166(66)>
  # DEBUG i_cost => i_cost_766
  i_cost.72_171 = analysis.i_satd_pcm;
  if (i_cost.72_171 < i_cost_766)
    goto <bb 68>;
  else
    goto <bb 69>;

  <bb 68>:
  h_145(D)->mb.i_type = 3;
  goto <bb 503>;

  <bb 69>:
  _173 = analysis.i_mbrd;
  if (_173 > 1)
    goto <bb 71>;
  else
    goto <bb 70>;

  <bb 70>:
  goto <bb 503>;

  <bb 71>:
  x264_intra_rd_refine (h_145(D), &analysis);
  goto <bb 503>;

  <bb 72>:
  if (prephitmp_2686 == 0)
    goto <bb 73>;
  else
    goto <bb 266>;

  <bb 73>:
  # DEBUG b_skip => 0
  _177 = h_145(D)->mc.prefetch_ref;
  _178 = h_145(D)->mb.pic.i_stride[0];
  _179 = h_145(D)->mb.i_mb_x;
  _180 = _179 & 3;
  _181 = h_145(D)->mb.pic.p_fref[0][0][_180];
  _177 (_181, _178, 0);
  analysis.b_try_pskip = 0;
  _184 = h_145(D)->param.analyse.b_fast_pskip;
  if (_184 != 0)
    goto <bb 74>;
  else
    goto <bb 517>;

  <bb 74>:
  _185 = h_145(D)->param.i_threads;
  if (_185 > 1)
    goto <bb 75>;
  else
    goto <bb 76>;

  <bb 75>:
  _186 = h_145(D)->mb.cache.pskip_mv[1];
  _187 = (int) _186;
  _188 = h_145(D)->mb.mv_max_spel[1];
  if (_187 > _188)
    goto <bb 517>;
  else
    goto <bb 76>;

  <bb 76>:
  _189 = h_145(D)->param.analyse.i_subpel_refine;
  if (_189 > 2)
    goto <bb 77>;
  else
    goto <bb 78>;

  <bb 77>:
  analysis.b_try_pskip = 1;
  goto <bb 517>;

  <bb 78>:
  _191 = h_145(D)->mb.i_mb_type_left;
  if (_191 == 6)
    goto <bb 82>;
  else
    goto <bb 79>;

  <bb 79>:
  _192 = h_145(D)->mb.i_mb_type_top;
  if (_192 == 6)
    goto <bb 82>;
  else
    goto <bb 80>;

  <bb 80>:
  _193 = h_145(D)->mb.i_mb_type_topleft;
  if (_193 == 6)
    goto <bb 82>;
  else
    goto <bb 81>;

  <bb 81>:
  _194 = h_145(D)->mb.i_mb_type_topright;
  if (_194 == 6)
    goto <bb 82>;
  else
    goto <bb 517>;

  <bb 82>:
  # DEBUG h => h_145(D)
  b_skip_413 = x264_macroblock_probe_skip (h_145(D), 0);
  # DEBUG h => NULL
  # DEBUG b_skip => NULL
  # DEBUG b_skip => b_skip_413
  _197 = h_145(D)->mc.prefetch_ref;
  _198 = h_145(D)->mb.pic.i_stride[0];
  _199 = h_145(D)->mb.i_mb_x;
  _200 = _199 & 3;
  _201 = h_145(D)->mb.pic.p_fref[0][0][_200];
  _197 (_201, _198, 1);
  if (b_skip_413 != 0)
    goto <bb 83>;
  else
    goto <bb 86>;

  <bb 83>:
  h_145(D)->mb.i_type = 6;
  h_145(D)->mb.i_partition = 16;
  _462 = h_145(D)->mb.cache.pskip_mv[1];
  _463 = (int) _462;
  _464 = h_145(D)->mb.mv_max_spel[1];
  if (_463 > _464)
    goto <bb 84>;
  else
    goto <bb 70>;

  <bb 84>:
  _465 = h_145(D)->param.i_threads;
  if (_465 != 1)
    goto <bb 85>;
  else
    goto <bb 70>;

  <bb 85>:
  __assert_fail ("h->mb.cache.pskip_mv[1] <= h->mb.mv_max_spel[1] || h->param.i_threads == 1", "encoder/analyse.c", 2174, &__PRETTY_FUNCTION__);

  <bb 86>:
  # DEBUG b_skip => NULL
  flags_203 = h_145(D)->param.analyse.inter;
  # DEBUG flags => flags_203
  _767 = &MEM[(int *)h_145(D) + 404B];
  # DEBUG D#83 => h_145(D)
  x264_mb_analyse_load_costs.isra.18 (_767, &analysis);
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  i_halfpel_thresh = 2147483647;
  _152 = h_145(D)->mb.pic.i_fref[0];
  if (_152 > 1)
    goto <bb 88>;
  else
    goto <bb 87>;

  <bb 87>:

  <bb 88>:
  # p_halfpel_thresh_989 = PHI <&i_halfpel_thresh(86), 0B(87)>
  # DEBUG p_halfpel_thresh => p_halfpel_thresh_989
  m.i_pixel = 0;
  _964 = analysis.p_cost_mv;
  m.p_cost_mv = _964;
  _965 = h_145(D)->mb.pic.i_stride[0];
  m.i_stride[0] = _965;
  _966 = h_145(D)->mb.pic.i_stride[1];
  m.i_stride[1] = _966;
  _967 = h_145(D)->mb.pic.p_fenc[0];
  m.p_fenc[0] = _967;
  _968 = h_145(D)->mb.pic.p_fenc[1];
  m.p_fenc[1] = _968;
  _969 = h_145(D)->mb.pic.p_fenc[2];
  m.p_fenc[2] = _969;
  analysis.l0.me16x16.cost = 2147483647;
  # DEBUG i_ref => 0
  # DEBUG i_ref => 0
  if (_152 > 0)
    goto <bb 89>;
  else
    goto <bb 90>;

  <bb 89>:
  goto <bb 91>;

  <bb 90>:
  _1030 = analysis.l0.me16x16.i_ref;
  # DEBUG h => h_145(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#100 => (uint8_t) _1030
  # DEBUG ref => D#100
  # DEBUG D#914 => &h_145(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#914
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => D#100
  _1032 = _1030 & 255;
  _1033 = _1032 * 16843009;
  val2_1034 = (uint32_t) _1033;
  # DEBUG val2 => val2_1034
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_145(D) + 19116B] = val2_1034;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_145(D) + 19124B] = val2_1034;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_145(D) + 19132B] = val2_1034;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_145(D) + 19140B] = val2_1034;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _1041 = analysis.l0.me16x16.mv[1];
  _1042 = (int) _1041;
  _1043 = h_145(D)->mb.mv_max_spel[1];
  if (_1042 > _1043)
    goto <bb 108>;
  else
    goto <bb 110>;

  <bb 91>:
  # i_ref_935 = PHI <0(89), i_ref_1028(107)>
  # prephitmp_2986 = PHI <2147483647(89), pretmp_2985(107)>
  # DEBUG i_ref => i_ref_935
  _970 = analysis.i_lambda;
  _971 = h_145(D)->sh.i_num_ref_idx_l0_active;
  _972 = _971 + -1;
  # DEBUG x => _972
  # DEBUG val => i_ref_935
  if (_972 == 1)
    goto <bb 94>;
  else
    goto <bb 92>;

  <bb 92>:
  if (_972 > 1)
    goto <bb 93>;
  else
    goto <bb 94>;

  <bb 93>:
  _974 = i_ref_935 + 1;
  _975 = x264_ue_size_tab[_974];
  _976 = (int) _975;
  pretmp_2988 = _970 * _976;

  <bb 94>:
  # prephitmp_2989 = PHI <_970(91), 0(92), pretmp_2988(93)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG i_ref_cost => NULL
  i_halfpel_thresh.85_980 = prephitmp_2986 - prephitmp_2989;
  i_halfpel_thresh = i_halfpel_thresh.85_980;
  m.i_ref_cost = prephitmp_2989;
  m.i_ref = i_ref_935;
  _981 = h_145(D)->mb.pic.p_fref[0][i_ref_935][0];
  m.p_fref[0] = _981;
  _982 = h_145(D)->mb.pic.p_fref[0][i_ref_935][1];
  m.p_fref[1] = _982;
  _983 = h_145(D)->mb.pic.p_fref[0][i_ref_935][2];
  m.p_fref[2] = _983;
  _984 = h_145(D)->mb.pic.p_fref[0][i_ref_935][3];
  m.p_fref[3] = _984;
  _985 = h_145(D)->mb.pic.p_fref[0][i_ref_935][4];
  m.p_fref[4] = _985;
  _986 = h_145(D)->mb.pic.p_fref[0][i_ref_935][5];
  m.p_fref[5] = _986;
  _987 = h_145(D)->mb.pic.p_integral[0][i_ref_935];
  m.integral = _987;
  x264_mb_predict_mv_16x16 (h_145(D), 0, i_ref_935, &m.mvp);
  x264_mb_predict_mv_ref16x16 (h_145(D), 0, i_ref_935, &mvc, &i_mvc);
  i_mvc.86_988 = i_mvc;
  x264_me_search_ref (h_145(D), &m, &mvc, i_mvc.86_988, p_halfpel_thresh_989);
  if (i_ref_935 == 0)
    goto <bb 95>;
  else
    goto <bb 103>;

  <bb 95>:
  _990 = analysis.b_try_pskip;
  if (_990 != 0)
    goto <bb 96>;
  else
    goto <bb 103>;

  <bb 96>:
  _991 = m.cost;
  _992 = m.cost_mv;
  _993 = _991 - _992;
  _994 = analysis.i_lambda;
  _995 = _994 * 300;
  if (_993 < _995)
    goto <bb 97>;
  else
    goto <bb 104>;

  <bb 97>:
  _996 = m.mv[0];
  _997 = (int) _996;
  _998 = h_145(D)->mb.cache.pskip_mv[0];
  _999 = (int) _998;
  _1000 = _997 - _999;
  _1001 = ABS_EXPR <_1000>;
  _1002 = m.mv[1];
  _1003 = (int) _1002;
  _1004 = h_145(D)->mb.cache.pskip_mv[1];
  _1005 = (int) _1004;
  _1006 = _1003 - _1005;
  _1007 = ABS_EXPR <_1006>;
  _1008 = _1001 + _1007;
  if (_1008 <= 1)
    goto <bb 98>;
  else
    goto <bb 104>;

  <bb 98>:
  # DEBUG h => h_145(D)
  _1009 = x264_macroblock_probe_skip (h_145(D), 0);
  # DEBUG h => NULL
  if (_1009 != 0)
    goto <bb 100>;
  else
    goto <bb 99>;

  <bb 99>:
  pretmp_2992 = m.cost;
  goto <bb 104>;

  <bb 100>:
  h_145(D)->mb.i_type = 6;
  x264_analyse_update_cache (h_145(D), &analysis);
  _1010 = h_145(D)->mb.cache.pskip_mv[1];
  _1011 = (int) _1010;
  _1012 = h_145(D)->mb.mv_max_spel[1];
  if (_1011 > _1012)
    goto <bb 101>;
  else
    goto <bb 116>;

  <bb 101>:
  _1013 = h_145(D)->param.i_threads;
  if (_1013 != 1)
    goto <bb 102>;
  else
    goto <bb 116>;

  <bb 102>:
  __assert_fail ("h->mb.cache.pskip_mv[1] <= h->mb.mv_max_spel[1] || h->param.i_threads == 1", "encoder/analyse.c", 1080, &__PRETTY_FUNCTION__);

  <bb 103>:
  pretmp_2990 = m.cost;

  <bb 104>:
  # prephitmp_2993 = PHI <pretmp_2990(103), pretmp_2992(99), _991(96), _991(97)>
  _1015 = prephitmp_2989 + prephitmp_2993;
  m.cost = _1015;
  i_halfpel_thresh.84_1016 = i_halfpel_thresh;
  i_halfpel_thresh.87_1017 = i_halfpel_thresh.84_1016 + prephitmp_2989;
  i_halfpel_thresh = i_halfpel_thresh.87_1017;
  _1018 = analysis.l0.me16x16.cost;
  if (_1015 < _1018)
    goto <bb 105>;
  else
    goto <bb 106>;

  <bb 105>:
  _1019 = h_145(D)->mc.memcpy_aligned;
  _1019 (&analysis.l0.me16x16, &m, 128);

  <bb 106>:
  _1021 = &analysis.l0.mvc[i_ref_935][0];
  _1022 = h_145(D)->mb.mvr[0][i_ref_935];
  _1023 = h_145(D)->mb.i_mb_xy;
  _1024 = (long unsigned int) _1023;
  _1025 = _1024 * 4;
  _1026 = _1022 + _1025;
  _1027 = MEM[(uint32_t *)&m + 124B];
  *_1026 = _1027;
  MEM[(uint32_t *)_1021] = _1027;
  i_ref_1028 = i_ref_935 + 1;
  # DEBUG i_ref => i_ref_1028
  # DEBUG i_ref => i_ref_1028
  _1029 = h_145(D)->mb.pic.i_fref[0];
  if (i_ref_1028 < _1029)
    goto <bb 107>;
  else
    goto <bb 90>;

  <bb 107>:
  pretmp_2985 = i_halfpel_thresh;
  goto <bb 91>;

  <bb 108>:
  _1044 = h_145(D)->param.i_threads;
  if (_1044 != 1)
    goto <bb 109>;
  else
    goto <bb 110>;

  <bb 109>:
  __assert_fail ("a->l0.me16x16.mv[1] <= h->mb.mv_max_spel[1] || h->param.i_threads == 1", "encoder/analyse.c", 1096, &__PRETTY_FUNCTION__);

  <bb 110>:
  h_145(D)->mb.i_type = 4;
  _1045 = analysis.i_mbrd;
  if (_1045 != 0)
    goto <bb 111>;
  else
    goto <bb 115>;

  <bb 111>:
  x264_mb_cache_fenc_satd (h_145(D));
  _1046 = analysis.l0.me16x16.i_ref;
  if (_1046 == 0)
    goto <bb 113>;
  else
    goto <bb 112>;

  <bb 112>:
  pretmp_2981 = h_145(D)->mb.i_type;
  goto <bb 115>;

  <bb 113>:
  _1047 = MEM[(uint32_t *)&analysis + 524B];
  _1048 = MEM[(uint32_t *)h_145(D) + 20496B];
  if (_1047 == _1048)
    goto <bb 114>;
  else
    goto <bb 112>;

  <bb 114>:
  h_145(D)->mb.i_partition = 16;
  # DEBUG h => h_145(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => _1047
  # DEBUG D#913 => &h_145(D)->mb.cache.mv[0][12]
  # DEBUG dst => D#913
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => _1047
  _1051 = (long unsigned int) _1047;
  _1052 = _1051 << 32;
  val64_1053 = _1051 + _1052;
  # DEBUG val64 => val64_1053
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_145(D) + 19248B] = val64_1053;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_145(D) + 19256B] = val64_1053;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_145(D) + 19280B] = val64_1053;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_145(D) + 19288B] = val64_1053;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_145(D) + 19312B] = val64_1053;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_145(D) + 19320B] = val64_1053;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_145(D) + 19344B] = val64_1053;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_145(D) + 19352B] = val64_1053;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _1063 = analysis.i_lambda2;
  _1064 = x264_rd_cost_mb (h_145(D), _1063);
  analysis.l0.i_rd16x16 = _1064;
  pretmp_2983 = h_145(D)->mb.i_type;

  <bb 115>:
  # prephitmp_2984 = PHI <4(110), pretmp_2981(112), pretmp_2983(114)>
  m ={v} {CLOBBER};
  i_mvc ={v} {CLOBBER};
  mvc ={v} {CLOBBER};
  i_halfpel_thresh ={v} {CLOBBER};
  goto <bb 117>;

  <bb 116>:
  m ={v} {CLOBBER};
  i_mvc ={v} {CLOBBER};
  mvc ={v} {CLOBBER};
  i_halfpel_thresh ={v} {CLOBBER};
  pretmp_3001 = h_145(D)->mb.i_type;

  <bb 117>:
  # prephitmp_3002 = PHI <pretmp_3001(116), prephitmp_2984(115)>
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG i_ref_cost => NULL
  # DEBUG p_halfpel_thresh => NULL
  # DEBUG i_halfpel_thresh => NULL
  # DEBUG i_mvc => NULL
  # DEBUG i_ref => NULL
  if (prephitmp_3002 == 6)
    goto <bb 515>;
  else
    goto <bb 118>;

  <bb 118>:
  _207 = flags_203 & 16;
  if (_207 != 0)
    goto <bb 119>;
  else
    goto <bb 519>;

  <bb 119>:
  _208 = h_145(D)->param.analyse.b_mixed_references;
  if (_208 != 0)
    goto <bb 120>;
  else
    goto <bb 147>;

  <bb 120>:
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  # DEBUG D#68 => &h_145(D)->mb.pic.p_fenc
  # DEBUG p_fenc => D#68
  # DEBUG i_halfpel_thresh => 2147483647
  # DEBUG p_halfpel_thresh => 0B
  _205 = h_145(D)->mb.pic.i_fref[0];
  i_maxref_1066 = _205 + -1;
  # DEBUG i_maxref => i_maxref_1066
  h_145(D)->mb.i_partition = 13;
  if (i_maxref_1066 > 0)
    goto <bb 121>;
  else
    goto <bb 125>;

  <bb 121>:
  _1067 = analysis.l0.me16x16.i_ref;
  if (_1067 == 0)
    goto <bb 122>;
  else
    goto <bb 126>;

  <bb 122>:
  _1068 = h_145(D)->mb.i_mb_type_top;
  if (_1068 != 0)
    goto <bb 123>;
  else
    goto <bb 126>;

  <bb 123>:
  _1069 = h_145(D)->mb.i_mb_type_left;
  if (_1069 != 0)
    goto <bb 124>;
  else
    goto <bb 126>;

  <bb 124>:
  # DEBUG i_maxref => 0
  _1070 = h_145(D)->mb.cache.ref[0][3];
  _1071 = (int) _1070;
  # DEBUG i_maxref => MAX_EXPR <_1071, 0>
  _1073 = h_145(D)->mb.cache.ref[0][4];
  _1074 = (int) _1073;
  _2140 = MAX_EXPR <_1071, _1074>;
  i_maxref_1075 = MAX_EXPR <_2140, 0>;
  # DEBUG i_maxref => i_maxref_1075
  _1076 = h_145(D)->mb.cache.ref[0][6];
  _1077 = (int) _1076;
  i_maxref_1078 = MAX_EXPR <i_maxref_1075, _1077>;
  # DEBUG i_maxref => i_maxref_1078
  _1079 = h_145(D)->mb.cache.ref[0][8];
  _1080 = (int) _1079;
  i_maxref_1081 = MAX_EXPR <i_maxref_1078, _1080>;
  # DEBUG i_maxref => i_maxref_1081
  _1082 = h_145(D)->mb.cache.ref[0][11];
  _1083 = (int) _1082;
  i_maxref_1084 = MAX_EXPR <i_maxref_1081, _1083>;
  # DEBUG i_maxref => i_maxref_1084
  _1085 = h_145(D)->mb.cache.ref[0][27];
  _1086 = (int) _1085;
  i_maxref_1087 = MAX_EXPR <i_maxref_1084, _1086>;
  # DEBUG i_maxref => i_maxref_1087

  <bb 125>:
  # i_maxref_1097 = PHI <i_maxref_1066(120), i_maxref_1087(124)>
  # DEBUG i_maxref => i_maxref_1097
  # DEBUG i_ref => 0
  # DEBUG i_ref => 0
  if (i_maxref_1097 >= 0)
    goto <bb 126>;
  else
    goto <bb 130>;

  <bb 126>:
  # i_maxref_87 = PHI <i_maxref_1097(125), i_maxref_1066(122), i_maxref_1066(123), i_maxref_1066(121)>
  # DEBUG i_maxref => i_maxref_87
  # DEBUG i_ref => 0
  pretmp_2976 = h_145(D)->mb.i_mb_xy;
  pretmp_2978 = (long unsigned int) pretmp_2976;
  pretmp_2979 = pretmp_2978 * 4;

  <bb 127>:
  # i_ref_2553 = PHI <0(126), i_ref_1096(128)>
  # DEBUG i_ref => i_ref_2553
  _1089 = &analysis.l0.mvc[i_ref_2553][0];
  _1090 = h_145(D)->mb.mvr[0][i_ref_2553];
  _1094 = _1090 + pretmp_2979;
  _1095 = *_1094;
  MEM[(uint32_t *)_1089] = _1095;
  i_ref_1096 = i_ref_2553 + 1;
  # DEBUG i_ref => i_ref_1096
  # DEBUG i_ref => i_ref_1096
  if (i_maxref_87 >= i_ref_1096)
    goto <bb 128>;
  else
    goto <bb 129>;

  <bb 128>:
  goto <bb 127>;

  <bb 129>:

  <bb 130>:
  # i_maxref_1554 = PHI <i_maxref_87(129), i_maxref_1097(125)>
  pretmp_2933 = analysis.i_lambda;

  <bb 131>:
  # i_2608 = PHI <0(130), prephitmp_2950(145)>
  # prephitmp_2934 = PHI <pretmp_2933(130), prephitmp_3005(145)>
  # ivtmp_1638 = PHI <4(130), ivtmp_1456(145)>
  # DEBUG i => i_2608
  # DEBUG i_halfpel_thresh => 2147483647
  l0m_1099 = &analysis.l0.me8x8[i_2608];
  # DEBUG l0m => l0m_1099
  x8_1100 = i_2608 & 1;
  # DEBUG x8 => x8_1100
  y8_1101 = i_2608 >> 1;
  # DEBUG y8 => y8_1101
  m.i_pixel = 3;
  _1102 = analysis.p_cost_mv;
  m.p_cost_mv = _1102;
  _1103 = h_145(D)->mb.pic.i_stride[0];
  m.i_stride[0] = _1103;
  _1104 = h_145(D)->mb.pic.i_stride[1];
  m.i_stride[1] = _1104;
  _1105 = MEM[(uint8_t * *)h_145(D) + 15576B];
  _1106 = y8_1101 * 16;
  _1107 = x8_1100 + _1106;
  _1108 = _1107 * 8;
  _1109 = (sizetype) _1108;
  _1110 = _1105 + _1109;
  m.p_fenc[0] = _1110;
  _1111 = MEM[(uint8_t * *)h_145(D) + 15584B];
  _1112 = x8_1100 * 8;
  _1113 = _1112 >> 1;
  _1114 = y8_1101 * 8;
  _1115 = _1114 >> 1;
  _1116 = _1115 * 16;
  _1117 = _1113 + _1116;
  _1118 = (sizetype) _1117;
  _1119 = _1111 + _1118;
  m.p_fenc[1] = _1119;
  _1120 = MEM[(uint8_t * *)h_145(D) + 15592B];
  _1121 = _1120 + _1118;
  m.p_fenc[2] = _1121;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2608].cost = 2147483647;
  # DEBUG i_ref => 0
  # DEBUG i_halfpel_thresh => 2147483647
  # DEBUG i_ref => 0
  if (i_maxref_1554 >= 0)
    goto <bb 133>;
  else
    goto <bb 132>;

  <bb 132>:
  pretmp_2935 = y8_1101 * 2;
  pretmp_2937 = x8_1100 * 2;
  pretmp_2939 = pretmp_2937 + 12;
  pretmp_2941 = pretmp_2935 * 8;
  pretmp_2943 = pretmp_2939 + pretmp_2941;
  pretmp_2945 = &h_145(D)->mb.cache.ref[0][pretmp_2943];
  pretmp_2949 = i_2608 + 1;
  goto <bb 144>;

  <bb 133>:
  pretmp_2957 = y8_1101 * 2;
  pretmp_2958 = x8_1100 * 2;
  pretmp_2959 = pretmp_2958 + 12;
  pretmp_2960 = pretmp_2957 * 8;
  pretmp_2961 = pretmp_2959 + pretmp_2960;
  pretmp_2962 = &h_145(D)->mb.cache.ref[0][pretmp_2961];
  pretmp_2966 = i_2608 * 4;
  pretmp_2968 = i_2608 + 1;

  <bb 134>:
  # i_ref_963 = PHI <0(133), prephitmp_2975(142)>
  # prephitmp_2952 = PHI <prephitmp_2934(133), pretmp_2951(142)>
  # prephitmp_2954 = PHI <_1103(133), pretmp_2953(142)>
  # prephitmp_2956 = PHI <_1104(133), pretmp_2955(142)>
  # DEBUG i_halfpel_thresh => 2147483647
  # DEBUG i_ref => i_ref_963
  # DEBUG D#901 => analysis.i_lambda
  _1123 = h_145(D)->sh.i_num_ref_idx_l0_active;
  _1124 = _1123 + -1;
  # DEBUG x => _1124
  # DEBUG val => i_ref_963
  if (_1124 == 1)
    goto <bb 135>;
  else
    goto <bb 136>;

  <bb 135>:
  pretmp_2973 = i_ref_963 + 1;
  goto <bb 139>;

  <bb 136>:
  if (_1124 > 1)
    goto <bb 138>;
  else
    goto <bb 137>;

  <bb 137>:
  pretmp_2974 = i_ref_963 + 1;
  goto <bb 139>;

  <bb 138>:
  _1126 = i_ref_963 + 1;
  _1127 = x264_ue_size_tab[_1126];
  _1128 = (int) _1127;
  pretmp_2971 = _1128 * prephitmp_2952;

  <bb 139>:
  # prephitmp_2972 = PHI <prephitmp_2952(135), 0(137), pretmp_2971(138)>
  # prephitmp_2975 = PHI <pretmp_2973(135), pretmp_2974(137), _1126(138)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG D#900 => NULL
  # DEBUG i_ref_cost => D#900
  # DEBUG i_halfpel_thresh => 2147483647 - D#900
  m.i_ref_cost = prephitmp_2972;
  m.i_ref = i_ref_963;
  _1131 = h_145(D)->mb.pic.p_fref[0][i_ref_963][0];
  _1133 = _1114 * prephitmp_2954;
  _1134 = _1112 + _1133;
  _1135 = (sizetype) _1134;
  _1136 = _1131 + _1135;
  m.p_fref[0] = _1136;
  _1137 = h_145(D)->mb.pic.p_fref[0][i_ref_963][1];
  _1138 = _1137 + _1135;
  m.p_fref[1] = _1138;
  _1139 = h_145(D)->mb.pic.p_fref[0][i_ref_963][2];
  _1140 = _1139 + _1135;
  m.p_fref[2] = _1140;
  _1141 = h_145(D)->mb.pic.p_fref[0][i_ref_963][3];
  _1142 = _1141 + _1135;
  m.p_fref[3] = _1142;
  _1143 = h_145(D)->mb.pic.p_fref[0][i_ref_963][4];
  _1145 = _1115 * prephitmp_2956;
  _1146 = _1113 + _1145;
  _1147 = (sizetype) _1146;
  _1148 = _1143 + _1147;
  m.p_fref[4] = _1148;
  _1149 = h_145(D)->mb.pic.p_fref[0][i_ref_963][5];
  _1150 = _1149 + _1147;
  m.p_fref[5] = _1150;
  _1151 = h_145(D)->mb.pic.p_integral[0][i_ref_963];
  _1152 = _1135 * 2;
  _1153 = _1151 + _1152;
  m.integral = _1153;
  # DEBUG D#899 => y8_1101 * 2
  # DEBUG D#898 => x8_1100 * 2
  # DEBUG h => h_145(D)
  # DEBUG x => D#898
  # DEBUG y => D#899
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#70 => (uint8_t) i_ref_963
  # DEBUG ref => D#70
  # DEBUG D#897 => D#898 + 12
  # DEBUG D#896 => D#899 * 8
  # DEBUG D#895 => D#897 + D#896
  # DEBUG D#894 => &h_145(D)->mb.cache.ref[0][D#895]
  # DEBUG dst => D#894
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#70
  _1160 = i_ref_963 & 255;
  _1161 = _1160 * 257;
  # DEBUG val2 => (uint32_t) _1161
  # DEBUG dy => 0
  # DEBUG dy => 0
  _2517 = (short unsigned int) _1161;
  MEM[(uint16_t *)pretmp_2962] = _2517;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)pretmp_2962 + 8B] = _2517;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  x264_mb_predict_mv (h_145(D), 0, pretmp_2966, 2, &m.mvp);
  _1171 = &analysis.l0.mvc[i_ref_963];
  x264_me_search_ref (h_145(D), &m, _1171, pretmp_2968, 0B);
  _1172 = m.cost;
  _1173 = _1172 + prephitmp_2972;
  m.cost = _1173;
  # DEBUG i_halfpel_thresh => 2147483647
  _1174 = &analysis.l0.mvc[i_ref_963][pretmp_2968];
  _1175 = MEM[(uint32_t *)&m + 124B];
  MEM[(uint32_t *)_1174] = _1175;
  _1176 = MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2608].cost;
  if (_1173 < _1176)
    goto <bb 140>;
  else
    goto <bb 141>;

  <bb 140>:
  _1177 = h_145(D)->mc.memcpy_aligned;
  _1177 (l0m_1099, &m, 128);

  <bb 141>:
  # DEBUG D#893 => i_ref_963 + 1
  # DEBUG i_ref => D#893
  # DEBUG i_halfpel_thresh => 2147483647
  # DEBUG i_ref => D#893
  if (i_maxref_1554 >= prephitmp_2975)
    goto <bb 142>;
  else
    goto <bb 143>;

  <bb 142>:
  pretmp_2951 = analysis.i_lambda;
  pretmp_2953 = m.i_stride[0];
  pretmp_2955 = m.i_stride[1];
  goto <bb 134>;

  <bb 143>:
  pretmp_2947 = MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2608].cost;
  pretmp_3004 = analysis.i_lambda;

  <bb 144>:
  # prephitmp_2944 = PHI <pretmp_2961(143), pretmp_2943(132)>
  # prephitmp_2946 = PHI <pretmp_2962(143), pretmp_2945(132)>
  # prephitmp_2948 = PHI <pretmp_2947(143), 2147483647(132)>
  # prephitmp_2950 = PHI <pretmp_2968(143), pretmp_2949(132)>
  # prephitmp_3005 = PHI <pretmp_3004(143), prephitmp_2934(132)>
  _1179 = &MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2608].mv;
  _1180 = MEM[(uint32_t *)_1179];
  # DEBUG D#892 => y8_1101 * 2
  # DEBUG D#891 => x8_1100 * 2
  # DEBUG h => h_145(D)
  # DEBUG x => D#891
  # DEBUG y => D#892
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _1180
  # DEBUG D#890 => D#891 + 12
  # DEBUG D#889 => D#892 * 8
  # DEBUG D#888 => D#890 + D#889
  _1186 = &h_145(D)->mb.cache.mv[0][prephitmp_2944];
  # DEBUG dst => _1186
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => _1180
  _1187 = (long unsigned int) _1180;
  _1188 = _1187 << 32;
  val64_1189 = _1187 + _1188;
  # DEBUG val64 => val64_1189
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_1186] = val64_1189;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_1186 + 32B] = val64_1189;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _1199 = MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2608].i_ref;
  # DEBUG h => h_145(D)
  # DEBUG x => D#891
  # DEBUG y => D#892
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#69 => (uint8_t) _1199
  # DEBUG ref => D#69
  # DEBUG D#887 => &h_145(D)->mb.cache.ref[0][D#888]
  # DEBUG dst => D#887
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => D#69
  _1201 = _1199 & 255;
  _1202 = _1201 * 257;
  # DEBUG val2 => (uint32_t) _1202
  # DEBUG dy => 0
  # DEBUG dy => 0
  _2490 = (short unsigned int) _1202;
  MEM[(uint16_t *)prephitmp_2946] = _2490;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)prephitmp_2946 + 8B] = _2490;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _1212 = prephitmp_2948 + prephitmp_3005;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2608].cost = _1212;
  # DEBUG D#886 => i_2608 + 1
  # DEBUG i => D#886
  # DEBUG i => D#886
  # DEBUG i_halfpel_thresh => 2147483647
  ivtmp_1456 = ivtmp_1638 - 1;
  if (ivtmp_1456 != 0)
    goto <bb 145>;
  else
    goto <bb 146>;

  <bb 145>:
  goto <bb 131>;

  <bb 146>:
  _1214 = analysis.l0.me8x8[0].cost;
  _1215 = analysis.l0.me8x8[1].cost;
  _1216 = _1214 + _1215;
  _1217 = analysis.l0.me8x8[2].cost;
  _1218 = _1216 + _1217;
  _1219 = analysis.l0.me8x8[3].cost;
  _1220 = _1218 + _1219;
  analysis.l0.i_cost8x8 = _1220;
  h_145(D)->mb.i_sub_partition[3] = 3;
  h_145(D)->mb.i_sub_partition[2] = 3;
  h_145(D)->mb.i_sub_partition[1] = 3;
  h_145(D)->mb.i_sub_partition[0] = 3;
  m ={v} {CLOBBER};
  goto <bb 518>;

  <bb 147>:
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  i_ref_209 = analysis.l0.me16x16.i_ref;
  # DEBUG i_ref => i_ref_209
  _1223 = analysis.i_lambda;
  _1224 = h_145(D)->sh.i_num_ref_idx_l0_active;
  _1225 = _1224 + -1;
  # DEBUG x => _1225
  # DEBUG val => i_ref_209
  if (_1225 == 1)
    goto <bb 150>;
  else
    goto <bb 148>;

  <bb 148>:
  if (_1225 > 1)
    goto <bb 149>;
  else
    goto <bb 150>;

  <bb 149>:
  _1226 = i_ref_209 + 1;
  _1227 = x264_ue_size_tab[_1226];
  _1228 = (int) _1227;
  pretmp_2886 = _1223 * _1228;

  <bb 150>:
  # prephitmp_2887 = PHI <_1223(147), 0(148), pretmp_2886(149)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG i_ref_cost => NULL
  p_fref_1231 = &h_145(D)->mb.pic.p_fref[0][i_ref_209];
  # DEBUG p_fref => p_fref_1231
  # DEBUG D#71 => &h_145(D)->mb.pic.p_fenc
  # DEBUG p_fenc => D#71
  mvc_1232 = &analysis.l0.mvc[i_ref_209];
  # DEBUG mvc => mvc_1232
  h_145(D)->mb.i_partition = 13;
  # DEBUG i_mvc => 1
  _1233 = MEM[(uint32_t *)&analysis + 524B];
  MEM[(uint32_t *)mvc_1232] = _1233;
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG i_mvc => 1

  <bb 151>:
  # i_2417 = PHI <i_1332(152), 0(150)>
  # i_mvc_2426 = PHI <i_mvc_1327(152), 1(150)>
  # ivtmp_2854 = PHI <ivtmp_2851(152), 4(150)>
  # DEBUG i => i_2417
  # DEBUG i_mvc => i_mvc_2426
  m_1235 = &analysis.l0.me8x8[i_2417];
  # DEBUG m => m_1235
  x8_1236 = i_2417 & 1;
  # DEBUG x8 => x8_1236
  y8_1237 = i_2417 >> 1;
  # DEBUG y8 => y8_1237
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_pixel = 3;
  _1238 = analysis.p_cost_mv;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_cost_mv = _1238;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_ref_cost = prephitmp_2887;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_ref = i_ref_209;
  _1239 = h_145(D)->mb.pic.i_stride[0];
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_stride[0] = _1239;
  _1240 = h_145(D)->mb.pic.i_stride[1];
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_stride[1] = _1240;
  _1241 = MEM[(uint8_t * *)h_145(D) + 15576B];
  _1242 = y8_1237 * 16;
  _1243 = x8_1236 + _1242;
  _1244 = _1243 * 8;
  _1245 = (sizetype) _1244;
  _1246 = _1241 + _1245;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fenc[0] = _1246;
  _1247 = MEM[(uint8_t * *)h_145(D) + 15584B];
  _1248 = x8_1236 * 8;
  _1249 = _1248 >> 1;
  _1250 = y8_1237 * 8;
  _1251 = _1250 >> 1;
  _1252 = _1251 * 16;
  _1253 = _1249 + _1252;
  _1254 = (sizetype) _1253;
  _1255 = _1247 + _1254;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fenc[1] = _1255;
  _1256 = MEM[(uint8_t * *)h_145(D) + 15592B];
  _1257 = _1256 + _1254;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fenc[2] = _1257;
  _1258 = *p_fref_1231;
  _1259 = MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].i_stride[0];
  _1260 = _1250 * _1259;
  _1261 = _1248 + _1260;
  _1262 = (sizetype) _1261;
  _1263 = _1258 + _1262;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[0] = _1263;
  _1264 = MEM[(uint8_t * *)p_fref_1231 + 8B];
  _1269 = _1264 + _1262;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[1] = _1269;
  _1270 = MEM[(uint8_t * *)p_fref_1231 + 16B];
  _1275 = _1270 + _1262;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[2] = _1275;
  _1276 = MEM[(uint8_t * *)p_fref_1231 + 24B];
  _1281 = _1276 + _1262;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[3] = _1281;
  _1282 = MEM[(uint8_t * *)p_fref_1231 + 32B];
  _1284 = _1240 * _1251;
  _1285 = _1249 + _1284;
  _1286 = (sizetype) _1285;
  _1287 = _1282 + _1286;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[4] = _1287;
  _1288 = MEM[(uint8_t * *)p_fref_1231 + 40B];
  _1293 = _1288 + _1286;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].p_fref[5] = _1293;
  _1294 = h_145(D)->mb.pic.p_integral[0][i_ref_209];
  _1299 = _1262 * 2;
  _1300 = _1294 + _1299;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].integral = _1300;
  _1301 = &MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].mvp;
  _1302 = i_2417 * 4;
  x264_mb_predict_mv (h_145(D), 0, _1302, 2, _1301);
  # DEBUG h => h_145(D)
  # DEBUG m => m_1235
  # DEBUG mvc => mvc_1232
  # DEBUG i_mvc => i_mvc_2426
  x264_me_search_ref (h_145(D), m_1235, mvc_1232, i_mvc_2426, 0B);
  # DEBUG h => NULL
  # DEBUG m => NULL
  # DEBUG mvc => NULL
  # DEBUG i_mvc => NULL
  _1304 = &MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].mv;
  _1305 = MEM[(uint32_t *)_1304];
  _1306 = y8_1237 * 2;
  _1307 = x8_1236 * 2;
  # DEBUG h => h_145(D)
  # DEBUG x => _1307
  # DEBUG y => _1306
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => _1305
  _1308 = _1307 + 12;
  _1309 = _1306 * 8;
  _1310 = _1308 + _1309;
  _1311 = &h_145(D)->mb.cache.mv[0][_1310];
  # DEBUG dst => _1311
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => _1305
  _1312 = (long unsigned int) _1305;
  _1313 = _1312 << 32;
  val64_1314 = _1312 + _1313;
  # DEBUG val64 => val64_1314
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_1311] = val64_1314;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_1311 + 32B] = val64_1314;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _1324 = (long unsigned int) i_mvc_2426;
  _1325 = _1324 * 4;
  _1326 = mvc_1232 + _1325;
  *_1326 = _1305;
  i_mvc_1327 = i_mvc_2426 + 1;
  # DEBUG i_mvc => i_mvc_1327
  _1328 = MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].cost;
  _1329 = _1328 + prephitmp_2887;
  _1330 = analysis.i_lambda;
  _1331 = _1329 + _1330;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2417].cost = _1331;
  i_1332 = i_2417 + 1;
  # DEBUG i => i_1332
  # DEBUG i => i_1332
  # DEBUG i_mvc => i_mvc_1327
  ivtmp_2851 = ivtmp_2854 - 1;
  if (ivtmp_2851 != 0)
    goto <bb 152>;
  else
    goto <bb 153>;

  <bb 152>:
  goto <bb 151>;

  <bb 153>:
  # _2630 = PHI <_1330(151)>
  _1333 = analysis.l0.me8x8[0].cost;
  _1334 = analysis.l0.me8x8[1].cost;
  _1335 = _1333 + _1334;
  _1336 = analysis.l0.me8x8[2].cost;
  _1337 = _1335 + _1336;
  _1338 = analysis.l0.me8x8[3].cost;
  _1339 = _1337 + _1338;
  # DEBUG D#903 => analysis.l0.me16x16.i_ref
  _1342 = h_145(D)->sh.i_num_ref_idx_l0_active;
  _1343 = _1342 + -1;
  # DEBUG x => _1343
  # DEBUG val => D#903
  if (_1343 == 1)
    goto <bb 156>;
  else
    goto <bb 154>;

  <bb 154>:
  if (_1343 > 1)
    goto <bb 155>;
  else
    goto <bb 156>;

  <bb 155>:
  _1341 = analysis.l0.me16x16.i_ref;
  _1344 = _1341 + 1;
  _1345 = x264_ue_size_tab[_1344];
  _1346 = (int) _1345;
  pretmp_2912 = _2630 * _1346;

  <bb 156>:
  # prephitmp_2913 = PHI <_2630(153), 0(154), pretmp_2912(155)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1349 = _1339 - prephitmp_2913;
  analysis.l0.i_cost8x8 = _1349;
  h_145(D)->mb.i_sub_partition[3] = 3;
  h_145(D)->mb.i_sub_partition[2] = 3;
  h_145(D)->mb.i_sub_partition[1] = 3;
  h_145(D)->mb.i_sub_partition[0] = 3;
  goto <bb 518>;

  <bb 157>:
  # DEBUG i_type => 5
  # DEBUG i_partition => 13
  # DEBUG i_cost => D#885
  _220 = flags_203 & 32;
  if (_220 != 0)
    goto <bb 158>;
  else
    goto <bb 520>;

  <bb 158>:

  <bb 159>:
  # i_214 = PHI <0(158), i_239(174)>
  # i_cost_513 = PHI <prephitmp_2817(158), i_cost_744(174)>
  # ivtmp_2636 = PHI <4(158), ivtmp_2576(174)>
  # DEBUG i_cost => i_cost_513
  # DEBUG i => i_214
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  # DEBUG i8x8 => i_214
  _210 = analysis.l0.me8x8[i_214].i_ref;
  p_fref_1351 = &h_145(D)->mb.pic.p_fref[0][_210];
  # DEBUG p_fref => p_fref_1351
  # DEBUG D#72 => &h_145(D)->mb.pic.p_fenc
  # DEBUG p_fenc => D#72
  # DEBUG i_ref => _210
  h_145(D)->mb.i_partition = 13;
  # DEBUG i4x4 => 0
  # DEBUG i4x4 => 0
  pretmp_2870 = i_214 * 4;
  pretmp_2878 = &analysis.l0.me8x8[i_214].mv;

  <bb 160>:
  # i4x4_256 = PHI <i4x4_1442(161), 0(159)>
  # ivtmp_2651 = PHI <ivtmp_2643(161), 4(159)>
  # DEBUG i4x4 => i4x4_256
  idx_1354 = i4x4_256 + pretmp_2870;
  # DEBUG idx => idx_1354
  _1355 = block_idx_x[idx_1354];
  x4_1356 = (const int) _1355;
  # DEBUG x4 => x4_1356
  _1357 = block_idx_y[idx_1354];
  y4_1358 = (const int) _1357;
  # DEBUG y4 => y4_1358
  _1359 = i4x4_256 == 0;
  i_mvc_1360 = (const int) _1359;
  # DEBUG i_mvc => i_mvc_1360
  m_1361 = &analysis.l0.me4x4[i_214][i4x4_256];
  # DEBUG m => m_1361
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].i_pixel = 6;
  _1362 = analysis.p_cost_mv;
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_cost_mv = _1362;
  _1363 = h_145(D)->mb.pic.i_stride[0];
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].i_stride[0] = _1363;
  _1364 = h_145(D)->mb.pic.i_stride[1];
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].i_stride[1] = _1364;
  _1365 = MEM[(uint8_t * *)h_145(D) + 15576B];
  _1366 = y4_1358 * 16;
  _1367 = x4_1356 + _1366;
  _1368 = _1367 * 4;
  _1369 = (sizetype) _1368;
  _1370 = _1365 + _1369;
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fenc[0] = _1370;
  _1371 = MEM[(uint8_t * *)h_145(D) + 15584B];
  _1372 = x4_1356 * 4;
  _1373 = _1372 >> 1;
  _1374 = y4_1358 * 4;
  _1375 = _1374 >> 1;
  _1376 = _1375 * 16;
  _1377 = _1373 + _1376;
  _1378 = (sizetype) _1377;
  _1379 = _1371 + _1378;
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fenc[1] = _1379;
  _1380 = MEM[(uint8_t * *)h_145(D) + 15592B];
  _1381 = _1380 + _1378;
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fenc[2] = _1381;
  _1382 = *p_fref_1351;
  _1383 = MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].i_stride[0];
  _1384 = _1374 * _1383;
  _1385 = _1372 + _1384;
  _1386 = (sizetype) _1385;
  _1387 = _1382 + _1386;
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[0] = _1387;
  _1388 = MEM[(uint8_t * *)p_fref_1351 + 8B];
  _1393 = _1388 + _1386;
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[1] = _1393;
  _1394 = MEM[(uint8_t * *)p_fref_1351 + 16B];
  _1399 = _1394 + _1386;
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[2] = _1399;
  _1400 = MEM[(uint8_t * *)p_fref_1351 + 24B];
  _1405 = _1400 + _1386;
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[3] = _1405;
  _1406 = MEM[(uint8_t * *)p_fref_1351 + 32B];
  _1408 = _1364 * _1375;
  _1409 = _1373 + _1408;
  _1410 = (sizetype) _1409;
  _1411 = _1406 + _1410;
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[4] = _1411;
  _1412 = MEM[(uint8_t * *)p_fref_1351 + 40B];
  _1417 = _1412 + _1410;
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].p_fref[5] = _1417;
  _1418 = h_145(D)->mb.pic.p_integral[0][_210];
  _1423 = _1386 * 2;
  _1424 = _1418 + _1423;
  MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].integral = _1424;
  _1425 = &MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].mvp;
  x264_mb_predict_mv (h_145(D), 0, idx_1354, 1, _1425);
  # DEBUG D#884 => &analysis.l0.me8x8[i_214].mv
  # DEBUG h => h_145(D)
  # DEBUG m => m_1361
  # DEBUG mvc => D#884
  # DEBUG i_mvc => i_mvc_1360
  x264_me_search_ref (h_145(D), m_1361, pretmp_2878, i_mvc_1360, 0B);
  # DEBUG h => NULL
  # DEBUG m => NULL
  # DEBUG mvc => NULL
  # DEBUG i_mvc => NULL
  _1427 = &MEM[(struct x264_me_t *)&analysis].l0.me4x4[i_214][i4x4_256].mv;
  _1428 = MEM[(uint32_t *)_1427];
  # DEBUG h => h_145(D)
  # DEBUG x => x4_1356
  # DEBUG y => y4_1358
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => 0
  # DEBUG mv => _1428
  _1429 = x4_1356 + 12;
  _1430 = y4_1358 * 8;
  _1431 = _1429 + _1430;
  _1432 = &h_145(D)->mb.cache.mv[0][_1431];
  # DEBUG dst => _1432
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => _1428
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_1432] = _1428;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  i4x4_1442 = i4x4_256 + 1;
  # DEBUG i4x4 => i4x4_1442
  # DEBUG i4x4 => i4x4_1442
  ivtmp_2643 = ivtmp_2651 - 1;
  if (ivtmp_2643 != 0)
    goto <bb 161>;
  else
    goto <bb 162>;

  <bb 161>:
  goto <bb 160>;

  <bb 162>:
  _1443 = analysis.l0.me4x4[i_214][0].cost;
  _1444 = analysis.l0.me4x4[i_214][1].cost;
  _1445 = _1443 + _1444;
  _1446 = analysis.l0.me4x4[i_214][2].cost;
  _1447 = _1445 + _1446;
  _1448 = analysis.l0.me4x4[i_214][3].cost;
  _1449 = _1447 + _1448;
  _1450 = analysis.i_lambda;
  _1451 = h_145(D)->sh.i_num_ref_idx_l0_active;
  _1452 = _1451 + -1;
  # DEBUG x => _1452
  # DEBUG val => _210
  if (_1452 == 1)
    goto <bb 165>;
  else
    goto <bb 163>;

  <bb 163>:
  if (_1452 > 1)
    goto <bb 164>;
  else
    goto <bb 165>;

  <bb 164>:
  _1453 = _210 + 1;
  _1454 = x264_ue_size_tab[_1453];
  _1455 = (int) _1454;
  pretmp_2882 = _1450 * _1455;

  <bb 165>:
  # prephitmp_2883 = PHI <_1450(162), 0(163), pretmp_2882(164)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1458 = _1449 + prephitmp_2883;
  _1459 = _1450 * 5;
  _1460 = _1458 + _1459;
  analysis.l0.i_cost4x4[i_214] = _1460;
  _1461 = h_145(D)->mb.b_chroma_me;
  if (_1461 != 0)
    goto <bb 166>;
  else
    goto <bb 167>;

  <bb 166>:
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  # DEBUG p_fref => p_fref_1351
  # DEBUG i8x8 => i_214
  # DEBUG pixel => 6
  # DEBUG pix2 => &MEM[(void *)&pix1 + 8B]
  i_stride_221 = h_145(D)->mb.pic.i_stride[1];
  # DEBUG i_stride => i_stride_221
  _1466 = i_214 & 1;
  _1467 = _1466 * 4;
  _1468 = i_214 & 2;
  _1469 = _1468 * 2;
  _1470 = i_stride_221 * _1469;
  or_1471 = _1467 + _1470;
  # DEBUG or => or_1471
  _1472 = _1468 * 8;
  _1473 = _1466 + _1472;
  oe_1474 = _1473 * 4;
  # DEBUG oe => oe_1474
  _1475 = h_145(D)->mc.mc_chroma;
  _1476 = analysis.l0.me4x4[i_214][0].mv[1];
  _1477 = (int) _1476;
  _1478 = analysis.l0.me4x4[i_214][0].mv[0];
  _1479 = (int) _1478;
  _1480 = MEM[(uint8_t * *)p_fref_1351 + 32B];
  _1481 = (sizetype) or_1471;
  _1482 = _1480 + _1481;
  _1475 (&pix1[0], 16, _1482, i_stride_221, _1479, _1477, 2, 2);
  _1483 = h_145(D)->mc.mc_chroma;
  _1484 = analysis.l0.me4x4[i_214][0].mv[1];
  _1485 = (int) _1484;
  _1486 = analysis.l0.me4x4[i_214][0].mv[0];
  _1487 = (int) _1486;
  _1488 = MEM[(uint8_t * *)p_fref_1351 + 40B];
  _1489 = _1488 + _1481;
  _1483 (&MEM[(void *)&pix1 + 8B], 16, _1489, i_stride_221, _1487, _1485, 2, 2);
  _1490 = h_145(D)->mc.mc_chroma;
  _1491 = analysis.l0.me4x4[i_214][1].mv[1];
  _1492 = (int) _1491;
  _1493 = analysis.l0.me4x4[i_214][1].mv[0];
  _1494 = (int) _1493;
  _1495 = MEM[(uint8_t * *)p_fref_1351 + 32B];
  _1496 = or_1471 + 2;
  _1497 = (sizetype) _1496;
  _1498 = _1495 + _1497;
  _1490 (&pix1[2], 16, _1498, i_stride_221, _1494, _1492, 2, 2);
  _1499 = h_145(D)->mc.mc_chroma;
  _1500 = analysis.l0.me4x4[i_214][1].mv[1];
  _1501 = (int) _1500;
  _1502 = analysis.l0.me4x4[i_214][1].mv[0];
  _1503 = (int) _1502;
  _1504 = MEM[(uint8_t * *)p_fref_1351 + 40B];
  _1505 = _1504 + _1497;
  _1499 (&MEM[(void *)&pix1 + 10B], 16, _1505, i_stride_221, _1503, _1501, 2, 2);
  _1506 = h_145(D)->mc.mc_chroma;
  _1507 = analysis.l0.me4x4[i_214][2].mv[1];
  _1508 = (int) _1507;
  _1509 = analysis.l0.me4x4[i_214][2].mv[0];
  _1510 = (int) _1509;
  _1511 = MEM[(uint8_t * *)p_fref_1351 + 32B];
  _1512 = i_stride_221 * 2;
  _1513 = or_1471 + _1512;
  _1514 = (sizetype) _1513;
  _1515 = _1511 + _1514;
  _1506 (&pix1[32], 16, _1515, i_stride_221, _1510, _1508, 2, 2);
  _1516 = h_145(D)->mc.mc_chroma;
  _1517 = analysis.l0.me4x4[i_214][2].mv[1];
  _1518 = (int) _1517;
  _1519 = analysis.l0.me4x4[i_214][2].mv[0];
  _1520 = (int) _1519;
  _1521 = MEM[(uint8_t * *)p_fref_1351 + 40B];
  _1522 = _1521 + _1514;
  _1516 (&MEM[(void *)&pix1 + 40B], 16, _1522, i_stride_221, _1520, _1518, 2, 2);
  _1523 = h_145(D)->mc.mc_chroma;
  _1524 = analysis.l0.me4x4[i_214][3].mv[1];
  _1525 = (int) _1524;
  _1526 = analysis.l0.me4x4[i_214][3].mv[0];
  _1527 = (int) _1526;
  _1528 = MEM[(uint8_t * *)p_fref_1351 + 32B];
  _1529 = _1496 + _1512;
  _1530 = (sizetype) _1529;
  _1531 = _1528 + _1530;
  _1523 (&pix1[34], 16, _1531, i_stride_221, _1527, _1525, 2, 2);
  _1532 = h_145(D)->mc.mc_chroma;
  _1533 = analysis.l0.me4x4[i_214][3].mv[1];
  _1534 = (int) _1533;
  _1535 = analysis.l0.me4x4[i_214][3].mv[0];
  _1536 = (int) _1535;
  _1537 = MEM[(uint8_t * *)p_fref_1351 + 40B];
  _1538 = _1537 + _1530;
  _1532 (&MEM[(void *)&pix1 + 42B], 16, _1538, i_stride_221, _1536, _1534, 2, 2);
  _1602 = h_145(D)->pixf.mbcmp[6];
  _1603 = h_145(D)->mb.pic.p_fenc[1];
  _1604 = (sizetype) oe_1474;
  _1605 = _1603 + _1604;
  _1606 = _1602 (_1605, 16, &pix1, 16);
  _1607 = h_145(D)->pixf.mbcmp[6];
  _1608 = h_145(D)->mb.pic.p_fenc[2];
  _1609 = _1608 + _1604;
  _1610 = _1607 (_1609, 16, &MEM[(void *)&pix1 + 8B], 16);
  _1611 = _1606 + _1610;
  pix1 ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG p_fref => NULL
  # DEBUG i8x8 => NULL
  # DEBUG pixel => NULL
  # DEBUG oe => NULL
  # DEBUG or => NULL
  # DEBUG i_stride => NULL
  _1463 = analysis.l0.i_cost4x4[i_214];
  _1464 = _1463 + _1611;
  analysis.l0.i_cost4x4[i_214] = _1464;

  <bb 167>:
  # prephitmp_2884 = PHI <_1464(166), _1460(165)>
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG i8x8 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG m => NULL
  # DEBUG i_mvc => NULL
  # DEBUG y4 => NULL
  # DEBUG x4 => NULL
  # DEBUG idx => NULL
  # DEBUG i4x4 => NULL
  # DEBUG p_fref => NULL
  # DEBUG D#883 => analysis.l0.i_cost4x4[i_214]
  _223 = analysis.l0.me8x8[i_214].cost;
  if (_223 > prephitmp_2884)
    goto <bb 168>;
  else
    goto <bb 173>;

  <bb 168>:
  # DEBUG i_cost8x8 => D#883
  h_145(D)->mb.i_sub_partition[i_214] = 0;
  x264_mb_analyse_inter_p8x4 (h_145(D), &analysis, i_214);
  i_cost8x8_227 = analysis.l0.i_cost8x4[i_214];
  if (i_cost8x8_227 < prephitmp_2884)
    goto <bb 169>;
  else
    goto <bb 170>;

  <bb 169>:
  # DEBUG i_cost8x8 => i_cost8x8_227
  h_145(D)->mb.i_sub_partition[i_214] = 1;

  <bb 170>:
  # i_cost8x8_30 = PHI <prephitmp_2884(168), i_cost8x8_227(169)>
  # DEBUG i_cost8x8 => i_cost8x8_30
  x264_mb_analyse_inter_p4x8 (h_145(D), &analysis, i_214);
  i_cost8x8_230 = analysis.l0.i_cost4x8[i_214];
  if (i_cost8x8_30 > i_cost8x8_230)
    goto <bb 171>;
  else
    goto <bb 172>;

  <bb 171>:
  # DEBUG i_cost8x8 => i_cost8x8_230
  h_145(D)->mb.i_sub_partition[i_214] = 2;

  <bb 172>:
  # i_cost8x8_31 = PHI <i_cost8x8_30(170), i_cost8x8_230(171)>
  # DEBUG i_cost8x8 => i_cost8x8_31
  _233 = analysis.l0.me8x8[i_214].cost;
  _234 = i_cost8x8_31 - _233;
  i_cost_236 = _234 + i_cost_513;
  # DEBUG i_cost => i_cost_236

  <bb 173>:
  # i_cost_744 = PHI <i_cost_513(167), i_cost_236(172)>
  # DEBUG i_cost => i_cost_744
  x264_mb_cache_mv_p8x8 (h_145(D), &analysis, i_214);
  i_239 = i_214 + 1;
  # DEBUG i => i_239
  # DEBUG i_cost => i_cost_744
  # DEBUG i => i_239
  ivtmp_2576 = ivtmp_2636 - 1;
  if (ivtmp_2576 != 0)
    goto <bb 174>;
  else
    goto <bb 175>;

  <bb 174>:
  goto <bb 159>;

  <bb 175>:
  # i_cost_2632 = PHI <i_cost_744(173)>
  analysis.l0.i_cost8x8 = i_cost_2632;
  pretmp_2819 = analysis.l0.me16x16.cost;
  goto <bb 520>;

  <bb 176>:
  x264_mb_analyse_inter_p16x8 (h_145(D), &analysis);
  i_cost_249 = analysis.l0.i_cost16x8;
  if (i_cost_249 < i_cost_1421)
    goto <bb 178>;
  else
    goto <bb 177>;

  <bb 177>:

  <bb 178>:
  # i_type_18 = PHI <i_type_1265(177), 4(176)>
  # i_partition_24 = PHI <i_partition_167(177), 14(176)>
  # i_cost_667 = PHI <i_cost_1421(177), i_cost_249(176)>
  # DEBUG i_cost => i_cost_667
  # DEBUG i_partition => i_partition_24
  # DEBUG i_type => i_type_18
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  # DEBUG D#78 => &h_145(D)->mb.pic.p_fenc
  # DEBUG p_fenc => D#78
  h_145(D)->mb.i_partition = 15;
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 179>:
  # i_2314 = PHI <pretmp_2835(190), 0(178)>
  # ivtmp_1799 = PHI <ivtmp_2647(190), 2(178)>
  # DEBUG i => i_2314
  l0m_1613 = &analysis.l0.me8x16[i_2314];
  # DEBUG l0m => l0m_1613
  _1614 = analysis.l0.me8x8[i_2314].i_ref;
  ref8[0] = _1614;
  _1615 = i_2314 + 2;
  _1616 = analysis.l0.me8x8[_1615].i_ref;
  ref8[1] = _1616;
  if (_1614 == _1616)
    goto <bb 181>;
  else
    goto <bb 180>;

  <bb 180>:

  <bb 181>:
  # iftmp.89_1681 = PHI <1(179), 2(180)>
  # DEBUG i_ref8s => iftmp.89_1681
  m.i_pixel = 2;
  _1617 = analysis.p_cost_mv;
  m.p_cost_mv = _1617;
  _1618 = h_145(D)->mb.pic.i_stride[0];
  m.i_stride[0] = _1618;
  _1619 = h_145(D)->mb.pic.i_stride[1];
  m.i_stride[1] = _1619;
  _1620 = MEM[(uint8_t * *)h_145(D) + 15576B];
  _1621 = i_2314 * 8;
  _1622 = (sizetype) _1621;
  _1623 = _1620 + _1622;
  m.p_fenc[0] = _1623;
  _1624 = MEM[(uint8_t * *)h_145(D) + 15584B];
  _1625 = _1621 >> 1;
  _1626 = (sizetype) _1625;
  _1627 = _1624 + _1626;
  m.p_fenc[1] = _1627;
  _1628 = MEM[(uint8_t * *)h_145(D) + 15592B];
  _1629 = _1628 + _1626;
  m.p_fenc[2] = _1629;
  MEM[(struct x264_me_t *)&analysis].l0.me8x16[i_2314].cost = 2147483647;
  # DEBUG j => 0
  # DEBUG j => 0
  pretmp_2835 = i_2314 + 1;
  pretmp_2836 = i_2314 + 3;
  pretmp_2837 = _1622 * 2;
  pretmp_2838 = i_2314 * 2;
  pretmp_2839 = pretmp_2838 + 12;
  pretmp_2840 = &h_145(D)->mb.cache.ref[0][pretmp_2839];
  pretmp_2842 = i_2314 * 4;

  <bb 182>:
  # j_2572 = PHI <j_1680(188), 0(181)>
  # DEBUG j => j_2572
  i_ref_1631 = ref8[j_2572];
  # DEBUG i_ref => i_ref_1631
  _1632 = analysis.i_lambda;
  _1633 = h_145(D)->sh.i_num_ref_idx_l0_active;
  _1634 = _1633 + -1;
  # DEBUG x => _1634
  # DEBUG val => i_ref_1631
  if (_1634 == 1)
    goto <bb 185>;
  else
    goto <bb 183>;

  <bb 183>:
  if (_1634 > 1)
    goto <bb 184>;
  else
    goto <bb 185>;

  <bb 184>:
  _1635 = i_ref_1631 + 1;
  _1636 = x264_ue_size_tab[_1635];
  _1637 = (int) _1636;
  pretmp_2845 = _1632 * _1637;

  <bb 185>:
  # prephitmp_2846 = PHI <_1632(182), 0(183), pretmp_2845(184)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG i_ref_cost => NULL
  m.i_ref_cost = prephitmp_2846;
  m.i_ref = i_ref_1631;
  _1640 = &analysis.l0.mvc[i_ref_1631][0];
  _1641 = MEM[(uint32_t *)_1640];
  MEM[(uint32_t *)&mvc] = _1641;
  # DEBUG D#882 => i_2314 + 1
  _1643 = &analysis.l0.mvc[i_ref_1631][pretmp_2835];
  _1644 = MEM[(uint32_t *)_1643];
  MEM[(uint32_t *)&mvc + 4B] = _1644;
  _1646 = &analysis.l0.mvc[i_ref_1631][pretmp_2836];
  _1647 = MEM[(uint32_t *)_1646];
  MEM[(uint32_t *)&mvc + 8B] = _1647;
  _1648 = h_145(D)->mb.pic.p_fref[0][i_ref_1631][0];
  _1649 = _1648 + _1622;
  m.p_fref[0] = _1649;
  _1650 = h_145(D)->mb.pic.p_fref[0][i_ref_1631][1];
  _1651 = _1650 + _1622;
  m.p_fref[1] = _1651;
  _1652 = h_145(D)->mb.pic.p_fref[0][i_ref_1631][2];
  _1653 = _1652 + _1622;
  m.p_fref[2] = _1653;
  _1654 = h_145(D)->mb.pic.p_fref[0][i_ref_1631][3];
  _1655 = _1654 + _1622;
  m.p_fref[3] = _1655;
  _1656 = h_145(D)->mb.pic.p_fref[0][i_ref_1631][4];
  _1657 = _1656 + _1626;
  m.p_fref[4] = _1657;
  _1658 = h_145(D)->mb.pic.p_fref[0][i_ref_1631][5];
  _1659 = _1658 + _1626;
  m.p_fref[5] = _1659;
  _1660 = h_145(D)->mb.pic.p_integral[0][i_ref_1631];
  _1662 = _1660 + pretmp_2837;
  m.integral = _1662;
  # DEBUG D#881 => i_2314 * 2
  # DEBUG h => h_145(D)
  # DEBUG x => D#881
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#80 => (uint8_t) i_ref_1631
  # DEBUG ref => D#80
  # DEBUG D#880 => D#881 + 12
  # DEBUG D#879 => &h_145(D)->mb.cache.ref[0][D#880]
  # DEBUG dst => D#879
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => D#80
  _1666 = i_ref_1631 & 255;
  _1667 = _1666 * 257;
  # DEBUG val2 => (uint32_t) _1667
  # DEBUG dy => 0
  # DEBUG dy => 0
  _2445 = (short unsigned int) _1667;
  MEM[(uint16_t *)pretmp_2840] = _2445;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)pretmp_2840 + 8B] = _2445;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)pretmp_2840 + 16B] = _2445;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)pretmp_2840 + 24B] = _2445;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  x264_mb_predict_mv (h_145(D), 0, pretmp_2842, 2, &m.mvp);
  # DEBUG h => h_145(D)
  # DEBUG m => &m
  # DEBUG mvc => &mvc
  # DEBUG i_mvc => 3
  x264_me_search_ref (h_145(D), &m, &mvc, 3, 0B);
  # DEBUG h => NULL
  # DEBUG m => NULL
  # DEBUG mvc => NULL
  # DEBUG i_mvc => NULL
  _1676 = m.cost;
  _1677 = _1676 + prephitmp_2846;
  m.cost = _1677;
  _1678 = MEM[(struct x264_me_t *)&analysis].l0.me8x16[i_2314].cost;
  if (_1677 < _1678)
    goto <bb 186>;
  else
    goto <bb 187>;

  <bb 186>:
  _1679 = h_145(D)->mc.memcpy_aligned;
  _1679 (l0m_1613, &m, 128);

  <bb 187>:
  j_1680 = j_2572 + 1;
  # DEBUG j => j_1680
  # DEBUG j => j_1680
  if (j_1680 < iftmp.89_1681)
    goto <bb 188>;
  else
    goto <bb 189>;

  <bb 188>:
  goto <bb 182>;

  <bb 189>:
  _1682 = &MEM[(struct x264_me_t *)&analysis].l0.me8x16[i_2314].mv;
  _1683 = MEM[(uint32_t *)_1682];
  # DEBUG h => h_145(D)
  # DEBUG x => D#881
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => _1683
  _1686 = &h_145(D)->mb.cache.mv[0][pretmp_2839];
  # DEBUG dst => _1686
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => _1683
  _1687 = (long unsigned int) _1683;
  _1688 = _1687 << 32;
  val64_1689 = _1687 + _1688;
  # DEBUG val64 => val64_1689
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_1686] = val64_1689;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_1686 + 32B] = val64_1689;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_1686 + 64B] = val64_1689;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_1686 + 96B] = val64_1689;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _1699 = MEM[(struct x264_me_t *)&analysis].l0.me8x16[i_2314].i_ref;
  # DEBUG h => h_145(D)
  # DEBUG x => D#881
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#79 => (uint8_t) _1699
  # DEBUG ref => D#79
  # DEBUG dst => D#879
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => D#79
  _1701 = _1699 & 255;
  _1702 = _1701 * 257;
  # DEBUG val2 => (uint32_t) _1702
  # DEBUG dy => 0
  # DEBUG dy => 0
  _2400 = (short unsigned int) _1702;
  MEM[(uint16_t *)pretmp_2840] = _2400;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)pretmp_2840 + 8B] = _2400;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)pretmp_2840 + 16B] = _2400;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)pretmp_2840 + 24B] = _2400;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  ref8 ={v} {CLOBBER};
  # DEBUG i => D#882
  # DEBUG i => D#882
  ivtmp_2647 = ivtmp_1799 - 1;
  if (ivtmp_2647 != 0)
    goto <bb 190>;
  else
    goto <bb 191>;

  <bb 190>:
  goto <bb 179>;

  <bb 191>:
  _1711 = analysis.l0.me8x16[0].cost;
  _1712 = analysis.l0.me8x16[1].cost;
  i_cost_1713 = _1711 + _1712;
  analysis.l0.i_cost8x16 = i_cost_1713;
  m ={v} {CLOBBER};
  mvc ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG dy => NULL
  # DEBUG i_ref_cost => NULL
  # DEBUG i_ref => NULL
  # DEBUG l0m => NULL
  # DEBUG j => NULL
  # DEBUG i => NULL
  if (i_cost_667 > i_cost_1713)
    goto <bb 521>;
  else
    goto <bb 192>;

  <bb 192>:
  # i_type_19 = PHI <i_type_18(191), i_type_1265(520)>
  # i_partition_25 = PHI <i_partition_24(191), i_partition_167(520)>
  # i_cost_664 = PHI <i_cost_667(191), i_cost_1421(520)>
  # DEBUG i_cost => i_cost_664
  # DEBUG i_partition => i_partition_25
  # DEBUG i_type => i_type_19
  h_145(D)->mb.i_partition = i_partition_25;
  _258 = analysis.i_mbrd;
  if (_258 != 0)
    goto <bb 210>;
  else
    goto <bb 193>;

  <bb 193>:
  if (i_partition_25 == 16)
    goto <bb 194>;
  else
    goto <bb 195>;

  <bb 194>:
  # i_type_1049 = PHI <i_type_19(193), 4(519)>
  x264_me_refine_qpel (h_145(D), &analysis.l0.me16x16);
  i_cost_260 = analysis.l0.me16x16.cost;
  # DEBUG i_cost => i_cost_260
  goto <bb 210>;

  <bb 195>:
  if (i_partition_25 == 14)
    goto <bb 196>;
  else
    goto <bb 197>;

  <bb 196>:
  x264_me_refine_qpel (h_145(D), &analysis.l0.me16x8[0]);
  x264_me_refine_qpel (h_145(D), &analysis.l0.me16x8[1]);
  _264 = analysis.l0.me16x8[0].cost;
  _265 = analysis.l0.me16x8[1].cost;
  i_cost_266 = _264 + _265;
  # DEBUG i_cost => i_cost_266
  goto <bb 210>;

  <bb 197>:
  if (i_partition_25 == 15)
    goto <bb 198>;
  else
    goto <bb 199>;

  <bb 198>:
  # i_type_83 = PHI <i_type_19(197), 4(521)>
  x264_me_refine_qpel (h_145(D), &analysis.l0.me8x16[0]);
  x264_me_refine_qpel (h_145(D), &analysis.l0.me8x16[1]);
  _270 = analysis.l0.me8x16[0].cost;
  _271 = analysis.l0.me8x16[1].cost;
  i_cost_272 = _270 + _271;
  # DEBUG i_cost => i_cost_272
  goto <bb 210>;

  <bb 199>:
  if (i_partition_25 == 13)
    goto <bb 200>;
  else
    goto <bb 210>;

  <bb 200>:

  <bb 201>:
  # i8x8_1403 = PHI <0(200), i8x8_321(209)>
  # i_cost_1280 = PHI <0(200), i_cost_2292(209)>
  # ivtmp_1842 = PHI <4(200), ivtmp_2646(209)>
  # DEBUG i_cost => i_cost_1280
  # DEBUG i8x8 => i8x8_1403
  _275 = h_145(D)->mb.i_sub_partition[i8x8_1403];
  switch (_275) <default: <L82>, case 0: <L81>, case 1: <L79>, case 2: <L80>, case 3: <L78>>

<L78>:
  _276 = &analysis.l0.me8x8[i8x8_1403];
  x264_me_refine_qpel (h_145(D), _276);
  _278 = analysis.l0.me8x8[i8x8_1403].cost;
  i_cost_280 = _278 + i_cost_1280;
  # DEBUG i_cost => i_cost_280
  goto <bb 207>;

<L79>:
  _282 = &analysis.l0.me8x4[i8x8_1403][0];
  x264_me_refine_qpel (h_145(D), _282);
  _284 = &analysis.l0.me8x4[i8x8_1403][1];
  x264_me_refine_qpel (h_145(D), _284);
  _286 = analysis.l0.me8x4[i8x8_1403][0].cost;
  _287 = analysis.l0.me8x4[i8x8_1403][1].cost;
  _288 = _286 + _287;
  i_cost_290 = _288 + i_cost_1280;
  # DEBUG i_cost => i_cost_290
  goto <bb 207>;

<L80>:
  _292 = &analysis.l0.me4x8[i8x8_1403][0];
  x264_me_refine_qpel (h_145(D), _292);
  _294 = &analysis.l0.me4x8[i8x8_1403][1];
  x264_me_refine_qpel (h_145(D), _294);
  _296 = analysis.l0.me4x8[i8x8_1403][0].cost;
  _297 = analysis.l0.me4x8[i8x8_1403][1].cost;
  _298 = _296 + _297;
  i_cost_300 = _298 + i_cost_1280;
  # DEBUG i_cost => i_cost_300
  goto <bb 207>;

<L81>:
  _302 = &analysis.l0.me4x4[i8x8_1403][0];
  x264_me_refine_qpel (h_145(D), _302);
  _304 = &analysis.l0.me4x4[i8x8_1403][1];
  x264_me_refine_qpel (h_145(D), _304);
  _306 = &analysis.l0.me4x4[i8x8_1403][2];
  x264_me_refine_qpel (h_145(D), _306);
  _308 = &analysis.l0.me4x4[i8x8_1403][3];
  x264_me_refine_qpel (h_145(D), _308);
  _310 = analysis.l0.me4x4[i8x8_1403][0].cost;
  _311 = analysis.l0.me4x4[i8x8_1403][1].cost;
  _312 = _310 + _311;
  _313 = analysis.l0.me4x4[i8x8_1403][2].cost;
  _314 = _312 + _313;
  _315 = analysis.l0.me4x4[i8x8_1403][3].cost;
  _316 = _314 + _315;
  i_cost_318 = _316 + i_cost_1280;
  # DEBUG i_cost => i_cost_318
  goto <bb 207>;

<L82>:
  x264_log (h_145(D), 0, "internal error (!8x8 && !4x4)\n");

  <bb 207>:
  # i_cost_2292 = PHI <i_cost_280(202), i_cost_290(203), i_cost_300(204), i_cost_318(205), i_cost_1280(206)>
  # DEBUG i_cost => i_cost_2292
  i8x8_321 = i8x8_1403 + 1;
  # DEBUG i8x8 => i8x8_321
  # DEBUG i_cost => i_cost_2292
  # DEBUG i8x8 => i8x8_321
  ivtmp_2646 = ivtmp_1842 - 1;
  if (ivtmp_2646 != 0)
    goto <bb 209>;
  else
    goto <bb 208>;

  <bb 208>:
  # i_cost_2629 = PHI <i_cost_2292(207)>
  goto <bb 210>;

  <bb 209>:
  goto <bb 201>;

  <bb 210>:
  # i_cost_2290 = PHI <i_cost_664(192), i_cost_260(194), i_cost_266(196), i_cost_272(198), i_cost_664(199), i_cost_2629(208), i_cost_1713(521), i_cost_231(519)>
  # i_type_1398 = PHI <i_type_19(192), i_type_1049(194), i_type_19(196), i_type_83(198), i_type_19(199), i_type_19(208), 4(521), 4(519)>
  # i_partition_1402 = PHI <i_partition_25(192), 16(194), 14(196), 15(198), i_partition_25(199), 13(208), 15(521), 16(519)>
  # DEBUG i_cost => i_cost_2290
  _322 = h_145(D)->mb.b_chroma_me;
  if (_322 != 0)
    goto <bb 211>;
  else
    goto <bb 214>;

  <bb 211>:
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  _195 = analysis.i_satd_i8x8chroma;
  if (_195 <= 268435455)
    goto <bb 213>;
  else
    goto <bb 212>;

  <bb 212>:
  x264_mb_analyse_intra_chroma.part.17 (h_145(D), &analysis);
  pretmp_2815 = analysis.i_satd_i8x8chroma;

  <bb 213>:
  # prephitmp_2816 = PHI <_195(211), pretmp_2815(212)>
  # DEBUG h => NULL
  # DEBUG a => NULL
  _326 = i_cost_2290 - prephitmp_2816;
  x264_mb_analyse_intra (h_145(D), &analysis, _326);
  i_cost.38_328 = analysis.i_satd_i16x16;
  _329 = analysis.i_satd_i8x8chroma;
  _330 = i_cost.38_328 + _329;
  analysis.i_satd_i16x16 = _330;
  i_cost.41_332 = analysis.i_satd_i8x8;
  _334 = _329 + i_cost.41_332;
  analysis.i_satd_i8x8 = _334;
  i_cost.40_336 = analysis.i_satd_i4x4;
  _338 = _329 + i_cost.40_336;
  analysis.i_satd_i4x4 = _338;
  goto <bb 215>;

  <bb 214>:
  x264_mb_analyse_intra (h_145(D), &analysis, i_cost_2290);
  pretmp_2788 = analysis.i_satd_i4x4;
  pretmp_2790 = analysis.i_satd_i8x8;
  pretmp_2792 = analysis.i_satd_i16x16;

  <bb 215>:
  # prephitmp_2789 = PHI <_338(213), pretmp_2788(214)>
  # prephitmp_2791 = PHI <_334(213), pretmp_2790(214)>
  # prephitmp_2793 = PHI <_330(213), pretmp_2792(214)>
  # DEBUG i_satd_inter => i_cost_2290
  _346 = MIN_EXPR <prephitmp_2789, prephitmp_2791>;
  i_satd_intra_348 = MIN_EXPR <_346, prephitmp_2793>;
  # DEBUG i_satd_intra => i_satd_intra_348
  _349 = analysis.i_mbrd;
  if (_349 != 0)
    goto <bb 216>;
  else
    goto <bb 235>;

  <bb 216>:
  _350 = MIN_EXPR <i_satd_intra_348, i_cost_2290>;
  x264_mb_analyse_p_rd (h_145(D), &analysis, _350);
  # DEBUG i_type => 4
  # DEBUG i_partition => 16
  i_cost_352 = analysis.l0.me16x16.cost;
  # DEBUG i_cost => i_cost_352
  i_cost_354 = analysis.l0.i_cost16x8;
  if (i_cost_352 > i_cost_354)
    goto <bb 218>;
  else
    goto <bb 217>;

  <bb 217>:

  <bb 218>:
  # i_partition_26 = PHI <16(217), 14(216)>
  # i_cost_651 = PHI <i_cost_352(217), i_cost_354(216)>
  # DEBUG i_cost => i_cost_651
  # DEBUG i_partition => i_partition_26
  i_cost_356 = analysis.l0.i_cost8x16;
  if (i_cost_356 < i_cost_651)
    goto <bb 220>;
  else
    goto <bb 219>;

  <bb 219>:

  <bb 220>:
  # i_partition_27 = PHI <i_partition_26(219), 15(218)>
  # i_cost_647 = PHI <i_cost_651(219), i_cost_356(218)>
  # DEBUG i_cost => i_cost_647
  # DEBUG i_partition => i_partition_27
  i_cost_359 = analysis.l0.i_cost8x8;
  if (i_cost_359 < i_cost_647)
    goto <bb 222>;
  else
    goto <bb 221>;

  <bb 221>:

  <bb 222>:
  # i_type_20 = PHI <4(221), 5(220)>
  # i_partition_28 = PHI <i_partition_27(221), 13(220)>
  # i_cost_643 = PHI <i_cost_647(221), i_cost_359(220)>
  # DEBUG i_cost => i_cost_643
  # DEBUG i_partition => i_partition_28
  # DEBUG i_type => i_type_20
  h_145(D)->mb.i_type = i_type_20;
  h_145(D)->mb.i_partition = i_partition_28;
  if (i_cost_643 <= 268435455)
    goto <bb 224>;
  else
    goto <bb 223>;

  <bb 223>:
  pretmp_2803 = i_cost_2290 * 5;
  pretmp_2809 = pretmp_2803 / 4;
  goto <bb 234>;

  <bb 224>:
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  # DEBUG i_satd => &i_satd_inter
  # DEBUG i_rd => &i_cost
  _253 = x264_mb_transform_8x8_allowed (h_145(D));
  if (_253 != 0)
    goto <bb 226>;
  else
    goto <bb 225>;

  <bb 225>:
  pretmp_2805 = i_cost_2290 * 5;
  pretmp_2811 = pretmp_2805 / 4;
  goto <bb 234>;

  <bb 226>:
  _1715 = h_145(D)->param.analyse.b_transform_8x8;
  if (_1715 != 0)
    goto <bb 228>;
  else
    goto <bb 227>;

  <bb 227>:
  pretmp_2804 = i_cost_2290 * 5;
  pretmp_2810 = pretmp_2804 / 4;
  goto <bb 234>;

  <bb 228>:
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  # DEBUG i_satd => &i_satd_inter
  # DEBUG i_rd => &i_cost
  x264_analyse_update_cache (h_145(D), &analysis);
  _365 = h_145(D)->mb.b_transform_8x8;
  _1716 = _365 == 0;
  _1717 = (int) _1716;
  h_145(D)->mb.b_transform_8x8 = _1717;
  _1718 = analysis.i_lambda2;
  i_cost_1719 = x264_rd_cost_mb (h_145(D), _1718);
  # DEBUG i_rd8 => i_cost_1719
  if (i_cost_643 >= i_cost_1719)
    goto <bb 229>;
  else
    goto <bb 233>;

  <bb 229>:
  if (i_cost_643 > 0)
    goto <bb 230>;
  else
    goto <bb 231>;

  <bb 230>:
  _1722 = (long int) i_cost_2290;
  _1723 = (long int) i_cost_1719;
  _1724 = _1722 * _1723;
  _1725 = (long int) i_cost_643;
  _1726 = _1724 / _1725;
  i_satd_inter_1727 = (int) _1726;
  # DEBUG i_satd_inter => i_satd_inter_1727

  <bb 231>:
  # i_satd_inter_2217 = PHI <i_cost_2290(229), i_satd_inter_1727(230)>
  # DEBUG i_satd_inter => i_satd_inter_2217
  if (i_satd_inter_2217 == 0)
    goto <bb 234>;
  else
    goto <bb 232>;

  <bb 232>:
  pretmp_2807 = i_satd_inter_2217 * 5;
  pretmp_2813 = pretmp_2807 / 4;
  goto <bb 234>;

  <bb 233>:
  _1729 = h_145(D)->mb.b_transform_8x8;
  _1730 = _1729 == 0;
  _1731 = (int) _1730;
  h_145(D)->mb.b_transform_8x8 = _1731;
  pretmp_2806 = i_cost_2290 * 5;
  pretmp_2812 = pretmp_2806 / 4;

  <bb 234>:
  # i_cost_640 = PHI <i_cost_643(223), i_cost_643(227), i_cost_643(225), i_cost_643(233), i_cost_1719(231), i_cost_1719(232)>
  # i_satd_inter_358 = PHI <i_cost_2290(223), i_cost_2290(227), i_cost_2290(225), i_cost_2290(233), 1(231), i_satd_inter_2217(232)>
  # prephitmp_2814 = PHI <pretmp_2809(223), pretmp_2810(227), pretmp_2811(225), pretmp_2812(233), 1(231), pretmp_2813(232)>
  # DEBUG i_satd_inter => i_satd_inter_358
  # DEBUG i_cost => i_cost_640
  x264_intra_rd (h_145(D), &analysis, prephitmp_2814);
  pretmp_2794 = analysis.i_satd_i16x16;
  pretmp_2796 = analysis.i_satd_i8x8;
  pretmp_2798 = analysis.i_satd_i4x4;
  pretmp_2800 = analysis.i_mbrd;

  <bb 235>:
  # i_type_21 = PHI <i_type_1398(215), i_type_20(234)>
  # i_partition_29 = PHI <i_partition_1402(215), i_partition_28(234)>
  # i_cost_637 = PHI <i_cost_2290(215), i_cost_640(234)>
  # i_satd_inter_355 = PHI <i_cost_2290(215), i_satd_inter_358(234)>
  # prephitmp_2795 = PHI <prephitmp_2793(215), pretmp_2794(234)>
  # prephitmp_2797 = PHI <prephitmp_2791(215), pretmp_2796(234)>
  # prephitmp_2799 = PHI <prephitmp_2789(215), pretmp_2798(234)>
  # prephitmp_2801 = PHI <_349(215), pretmp_2800(234)>
  # DEBUG i_satd_inter => i_satd_inter_355
  # DEBUG i_cost => i_cost_637
  # DEBUG i_partition => i_partition_29
  # DEBUG i_type => i_type_21
  # DEBUG i_intra_type => 2
  # DEBUG D#878 => analysis.i_satd_i16x16
  # DEBUG i_intra_cost => D#878
  if (prephitmp_2795 > prephitmp_2797)
    goto <bb 237>;
  else
    goto <bb 236>;

  <bb 236>:

  <bb 237>:
  # i_cost_10 = PHI <prephitmp_2795(236), prephitmp_2797(235)>
  # i_type_14 = PHI <2(236), 1(235)>
  # DEBUG i_intra_type => i_type_14
  # DEBUG i_intra_cost => i_cost_10
  if (i_cost_10 > prephitmp_2799)
    goto <bb 239>;
  else
    goto <bb 238>;

  <bb 238>:

  <bb 239>:
  # i_cost_11 = PHI <i_cost_10(238), prephitmp_2799(237)>
  # i_type_15 = PHI <i_type_14(238), 0(237)>
  # DEBUG i_intra_type => i_type_15
  # DEBUG i_intra_cost => i_cost_11
  i_cost_373 = analysis.i_satd_pcm;
  if (i_cost_11 > i_cost_373)
    goto <bb 241>;
  else
    goto <bb 240>;

  <bb 240>:

  <bb 241>:
  # i_cost_12 = PHI <i_cost_11(240), i_cost_373(239)>
  # i_type_16 = PHI <i_type_15(240), 3(239)>
  # DEBUG i_intra_type => i_type_16
  # DEBUG i_intra_cost => i_cost_12
  if (i_cost_12 < i_cost_637)
    goto <bb 243>;
  else
    goto <bb 242>;

  <bb 242>:

  <bb 243>:
  # i_type_22 = PHI <i_type_21(242), i_type_16(241)>
  # i_cost_634 = PHI <i_cost_637(242), i_cost_12(241)>
  # DEBUG i_cost => i_cost_634
  # DEBUG i_type => i_type_22
  if (i_cost_12 == 268435456)
    goto <bb 244>;
  else
    goto <bb 245>;

  <bb 244>:
  _377 = i_satd_intra_348 * i_cost_634;
  _379 = _377 / i_satd_inter_355;
  i_cost_380 = _379 + 1;
  # DEBUG i_intra_cost => i_cost_380

  <bb 245>:
  # i_cost_13 = PHI <i_cost_12(243), i_cost_380(244)>
  # DEBUG i_intra_cost => i_cost_13
  h_145(D)->mb.i_type = i_type_22;
  _382 = h_145(D)->stat.frame.i_intra_cost;
  _383 = i_cost_13 + _382;
  h_145(D)->stat.frame.i_intra_cost = _383;
  _385 = h_145(D)->stat.frame.i_inter_cost;
  _387 = _385 + i_cost_634;
  h_145(D)->stat.frame.i_inter_cost = _387;
  _389 = h_145(D)->stat.frame.i_mbs_analysed;
  _390 = _389 + 1;
  h_145(D)->stat.frame.i_mbs_analysed = _390;
  _1416 = i_type_22 != 3;
  _38 = prephitmp_2801 > 1;
  _2482 = _38 & _1416;
  if (_2482 != 0)
    goto <bb 246>;
  else
    goto <bb 70>;

  <bb 246>:
  if (i_type_22 <= 3)
    goto <bb 71>;
  else
    goto <bb 247>;

  <bb 247>:
  if (i_partition_29 == 16)
    goto <bb 248>;
  else
    goto <bb 249>;

  <bb 248>:
  _395 = analysis.l0.me16x16.i_ref;
  # DEBUG h => h_145(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#149 => (uint8_t) _395
  # DEBUG ref => D#149
  # DEBUG D#910 => &h_145(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#910
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => D#149
  _176 = _395 & 255;
  _770 = _176 * 16843009;
  val2_771 = (uint32_t) _770;
  # DEBUG val2 => val2_771
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_145(D) + 19116B] = val2_771;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_145(D) + 19124B] = val2_771;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_145(D) + 19132B] = val2_771;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_145(D) + 19140B] = val2_771;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _396 = analysis.i_lambda2;
  x264_me_refine_qpel_rd (h_145(D), &analysis.l0.me16x16, _396, 0, 0);
  goto <bb 503>;

  <bb 249>:
  if (i_partition_29 == 14)
    goto <bb 250>;
  else
    goto <bb 251>;

  <bb 250>:
  h_145(D)->mb.i_sub_partition[3] = 3;
  h_145(D)->mb.i_sub_partition[2] = 3;
  h_145(D)->mb.i_sub_partition[1] = 3;
  h_145(D)->mb.i_sub_partition[0] = 3;
  _402 = analysis.l0.me16x8[0].i_ref;
  # DEBUG h => h_145(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#148 => (uint8_t) _402
  # DEBUG ref => D#148
  # DEBUG D#909 => &h_145(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#909
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => D#148
  _211 = _402 & 255;
  _788 = _211 * 16843009;
  val2_789 = (uint32_t) _788;
  # DEBUG val2 => val2_789
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_145(D) + 19116B] = val2_789;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_145(D) + 19124B] = val2_789;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _403 = analysis.l0.me16x8[1].i_ref;
  # DEBUG h => h_145(D)
  # DEBUG x => 0
  # DEBUG y => 2
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG D#146 => (uint8_t) _403
  # DEBUG ref => D#146
  # DEBUG D#908 => &h_145(D)->mb.cache.ref[0][28]
  # DEBUG dst => D#908
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => D#146
  _212 = _403 & 255;
  _779 = _212 * 16843009;
  val2_780 = (uint32_t) _779;
  # DEBUG val2 => val2_780
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_145(D) + 19132B] = val2_780;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_145(D) + 19140B] = val2_780;
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _404 = analysis.i_lambda2;
  x264_me_refine_qpel_rd (h_145(D), &analysis.l0.me16x8[0], _404, 0, 0);
  _406 = analysis.i_lambda2;
  x264_me_refine_qpel_rd (h_145(D), &analysis.l0.me16x8[1], _406, 8, 0);
  goto <bb 503>;

  <bb 251>:
  if (i_partition_29 == 15)
    goto <bb 252>;
  else
    goto <bb 253>;

  <bb 252>:
  h_145(D)->mb.i_sub_partition[3] = 3;
  h_145(D)->mb.i_sub_partition[2] = 3;
  h_145(D)->mb.i_sub_partition[1] = 3;
  h_145(D)->mb.i_sub_partition[0] = 3;
  _412 = analysis.l0.me8x16[0].i_ref;
  # DEBUG h => h_145(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#147 => (uint8_t) _412
  # DEBUG ref => D#147
  # DEBUG D#907 => &h_145(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#907
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => D#147
  _217 = _412 & 255;
  _821 = _217 * 257;
  # DEBUG val2 => (uint32_t) _821
  # DEBUG dy => 0
  # DEBUG dy => 0
  _2364 = (short unsigned int) _821;
  MEM[(uint16_t *)h_145(D) + 19116B] = _2364;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_145(D) + 19124B] = _2364;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)h_145(D) + 19132B] = _2364;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)h_145(D) + 19140B] = _2364;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _414 = analysis.l0.me8x16[1].i_ref;
  # DEBUG h => h_145(D)
  # DEBUG x => 2
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#145 => (uint8_t) _414
  # DEBUG ref => D#145
  # DEBUG D#906 => &h_145(D)->mb.cache.ref[0][14]
  # DEBUG dst => D#906
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => D#145
  _218 = _414 & 255;
  _804 = _218 * 257;
  # DEBUG val2 => (uint32_t) _804
  # DEBUG dy => 0
  # DEBUG dy => 0
  _1783 = (short unsigned int) _804;
  MEM[(uint16_t *)h_145(D) + 19118B] = _1783;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint16_t *)h_145(D) + 19126B] = _1783;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint16_t *)h_145(D) + 19134B] = _1783;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint16_t *)h_145(D) + 19142B] = _1783;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _415 = analysis.i_lambda2;
  x264_me_refine_qpel_rd (h_145(D), &analysis.l0.me8x16[0], _415, 0, 0);
  _417 = analysis.i_lambda2;
  x264_me_refine_qpel_rd (h_145(D), &analysis.l0.me8x16[1], _417, 4, 0);
  goto <bb 503>;

  <bb 253>:
  if (i_partition_29 == 13)
    goto <bb 254>;
  else
    goto <bb 70>;

  <bb 254>:
  x264_analyse_update_cache (h_145(D), &analysis);
  # DEBUG i8x8 => 0
  # DEBUG i8x8 => 0

  <bb 255>:
  # i8x8_1319 = PHI <i8x8_457(265), 0(254)>
  # ivtmp_2663 = PHI <ivtmp_1903(265), 4(254)>
  # DEBUG i8x8 => i8x8_1319
  _420 = h_145(D)->mb.i_sub_partition[i8x8_1319];
  if (_420 == 3)
    goto <bb 256>;
  else
    goto <bb 257>;

  <bb 256>:
  _421 = i8x8_1319 * 4;
  _422 = analysis.i_lambda2;
  _423 = &analysis.l0.me8x8[i8x8_1319];
  x264_me_refine_qpel_rd (h_145(D), _423, _422, _421, 0);
  goto <bb 263>;

  <bb 257>:
  if (_420 == 1)
    goto <bb 258>;
  else
    goto <bb 259>;

  <bb 258>:
  _425 = i8x8_1319 * 4;
  _426 = analysis.i_lambda2;
  _427 = &analysis.l0.me8x4[i8x8_1319][0];
  x264_me_refine_qpel_rd (h_145(D), _427, _426, _425, 0);
  _429 = _425 + 2;
  _430 = analysis.i_lambda2;
  _431 = &analysis.l0.me8x4[i8x8_1319][1];
  x264_me_refine_qpel_rd (h_145(D), _431, _430, _429, 0);
  goto <bb 263>;

  <bb 259>:
  if (_420 == 2)
    goto <bb 260>;
  else
    goto <bb 261>;

  <bb 260>:
  _433 = i8x8_1319 * 4;
  _434 = analysis.i_lambda2;
  _435 = &analysis.l0.me4x8[i8x8_1319][0];
  x264_me_refine_qpel_rd (h_145(D), _435, _434, _433, 0);
  _437 = _433 + 1;
  _438 = analysis.i_lambda2;
  _439 = &analysis.l0.me4x8[i8x8_1319][1];
  x264_me_refine_qpel_rd (h_145(D), _439, _438, _437, 0);
  goto <bb 263>;

  <bb 261>:
  if (_420 == 0)
    goto <bb 262>;
  else
    goto <bb 263>;

  <bb 262>:
  _441 = i8x8_1319 * 4;
  _442 = analysis.i_lambda2;
  _443 = &analysis.l0.me4x4[i8x8_1319][0];
  x264_me_refine_qpel_rd (h_145(D), _443, _442, _441, 0);
  _445 = _441 + 1;
  _446 = analysis.i_lambda2;
  _447 = &analysis.l0.me4x4[i8x8_1319][1];
  x264_me_refine_qpel_rd (h_145(D), _447, _446, _445, 0);
  _449 = _441 + 2;
  _450 = analysis.i_lambda2;
  _451 = &analysis.l0.me4x4[i8x8_1319][2];
  x264_me_refine_qpel_rd (h_145(D), _451, _450, _449, 0);
  _453 = _441 + 3;
  _454 = analysis.i_lambda2;
  _455 = &analysis.l0.me4x4[i8x8_1319][3];
  x264_me_refine_qpel_rd (h_145(D), _455, _454, _453, 0);

  <bb 263>:
  i8x8_457 = i8x8_1319 + 1;
  # DEBUG i8x8 => i8x8_457
  # DEBUG i8x8 => i8x8_457
  ivtmp_1903 = ivtmp_2663 - 1;
  if (ivtmp_1903 != 0)
    goto <bb 265>;
  else
    goto <bb 264>;

  <bb 264>:
  goto <bb 70>;

  <bb 265>:
  goto <bb 255>;

  <bb 266>:
  if (prephitmp_2686 == 1)
    goto <bb 267>;
  else
    goto <bb 70>;

  <bb 267>:
  # DEBUG i_bskip_cost => 268435456
  # DEBUG b_skip => 0
  _467 = analysis.i_mbrd;
  if (_467 != 0)
    goto <bb 268>;
  else
    goto <bb 269>;

  <bb 268>:
  x264_mb_cache_fenc_satd (h_145(D));

  <bb 269>:
  h_145(D)->mb.i_type = 18;
  _470 = h_145(D)->mb.b_direct_auto_write;
  if (_470 != 0)
    goto <bb 270>;
  else
    goto <bb 280>;

  <bb 270>:

  <bb 271>:
  # i_144 = PHI <0(270), i_487(279)>
  # b_skip_1061 = PHI <0(270), b_skip_36(279)>
  # ivtmp_2641 = PHI <2(270), ivtmp_2649(279)>
  # DEBUG b_skip => b_skip_1061
  # DEBUG i => i_144
  b_changed = 1;
  _472 = h_145(D)->sh.b_direct_spatial_mv_pred;
  _473 = _472 ^ 1;
  h_145(D)->sh.b_direct_spatial_mv_pred = _473;
  if (i_144 != 0)
    goto <bb 272>;
  else
    goto <bb 274>;

  <bb 272>:
  _475 = analysis.b_direct_available;
  if (_475 != 0)
    goto <bb 274>;
  else
    goto <bb 273>;

  <bb 273>:

  <bb 274>:
  # iftmp.54_63 = PHI <&b_changed(272), 0B(273), 0B(271)>
  _477 = x264_mb_predict_mv_direct16x16 (h_145(D), iftmp.54_63);
  analysis.b_direct_available = _477;
  if (_477 != 0)
    goto <bb 275>;
  else
    goto <bb 278>;

  <bb 275>:
  b_changed.55_479 = b_changed;
  if (b_changed.55_479 != 0)
    goto <bb 276>;
  else
    goto <bb 277>;

  <bb 276>:
  x264_mb_mc (h_145(D));
  # DEBUG h => h_145(D)
  b_skip_323 = x264_macroblock_probe_skip (h_145(D), 1);
  # DEBUG h => NULL
  # DEBUG b_skip => NULL

  <bb 277>:
  # b_skip_35 = PHI <b_skip_1061(275), b_skip_323(276)>
  # DEBUG b_skip => b_skip_35
  _482 = h_145(D)->sh.b_direct_spatial_mv_pred;
  _483 = h_145(D)->stat.frame.i_direct_score[_482];
  _484 = b_skip_35 + _483;
  h_145(D)->stat.frame.i_direct_score[_482] = _484;

  <bb 278>:
  # b_skip_36 = PHI <b_skip_35(277), 0(274)>
  # DEBUG b_skip => b_skip_36
  b_changed ={v} {CLOBBER};
  i_487 = i_144 + 1;
  # DEBUG i => i_487
  # DEBUG b_skip => b_skip_36
  # DEBUG i => i_487
  ivtmp_2649 = ivtmp_2641 - 1;
  if (ivtmp_2649 != 0)
    goto <bb 279>;
  else
    goto <bb 281>;

  <bb 279>:
  goto <bb 271>;

  <bb 280>:
  _489 = x264_mb_predict_mv_direct16x16 (h_145(D), 0B);
  analysis.b_direct_available = _489;
  # DEBUG b_skip => 0
  if (_489 != 0)
    goto <bb 282>;
  else
    goto <bb 290>;

  <bb 281>:
  # b_skip_2635 = PHI <b_skip_36(278)>
  # DEBUG b_skip => b_skip_2635
  _491 = analysis.b_direct_available;
  if (_491 != 0)
    goto <bb 282>;
  else
    goto <bb 289>;

  <bb 282>:
  # b_skip_2506 = PHI <b_skip_2635(281), 0(280)>
  _492 = h_145(D)->mb.b_direct_auto_write;
  if (_492 == 0)
    goto <bb 283>;
  else
    goto <bb 284>;

  <bb 283>:
  x264_mb_mc (h_145(D));

  <bb 284>:
  _494 = h_145(D)->mb.b_lossless;
  if (_494 != 0)
    goto <bb 289>;
  else
    goto <bb 285>;

  <bb 285>:
  _495 = analysis.i_mbrd;
  if (_495 != 0)
    goto <bb 286>;
  else
    goto <bb 287>;

  <bb 286>:
  i_cost_497 = ssd_mb (h_145(D));
  # DEBUG i_bskip_cost => i_cost_497
  _498 = analysis.i_lambda2;
  _499 = _498 * 6;
  _500 = _499 + 128;
  _501 = _500 >> 8;
  _502 = i_cost_497 <= _501;
  b_skip_503 = (int) _502;
  h_145(D)->mb.b_skip_mc = b_skip_503;
  # DEBUG b_skip => b_skip_503
  goto <bb 289>;

  <bb 287>:
  _505 = h_145(D)->mb.b_direct_auto_write;
  if (_505 == 0)
    goto <bb 288>;
  else
    goto <bb 289>;

  <bb 288>:
  # DEBUG h => h_145(D)
  b_skip_481 = x264_macroblock_probe_skip (h_145(D), 1);
  # DEBUG h => NULL
  # DEBUG b_skip => NULL

  <bb 289>:
  # i_cost_34 = PHI <268435456(281), 268435456(284), i_cost_497(286), 268435456(287), 268435456(288)>
  # b_skip_39 = PHI <b_skip_2635(281), b_skip_2506(284), b_skip_503(286), b_skip_2506(287), b_skip_481(288)>
  # DEBUG b_skip => b_skip_39
  # DEBUG i_bskip_cost => i_cost_34
  if (b_skip_39 == 0)
    goto <bb 290>;
  else
    goto <bb 70>;

  <bb 290>:
  # i_cost_2505 = PHI <i_cost_34(289), 268435456(280)>
  # DEBUG b_skip => NULL
  # DEBUG i_bskip_cost => i_cost_2505
  flags_506 = h_145(D)->param.analyse.inter;
  # DEBUG flags => flags_506
  # DEBUG i_satd_inter => 0
  h_145(D)->mb.b_skip_mc = 0;
  _768 = &MEM[(int *)h_145(D) + 404B];
  # DEBUG D#83 => h_145(D)
  x264_mb_analyse_load_costs.isra.18 (_768, &analysis);
  _510 = analysis.b_direct_available;
  if (_510 != 0)
    goto <bb 293>;
  else
    goto <bb 291>;

  <bb 291>:
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  stride0 = 16;
  stride1 = 16;
  i_halfpel_thresh = 2147483647;
  _511 = h_145(D)->mb.pic.i_fref[0];
  if (_511 > 1)
    goto <bb 297>;
  else
    goto <bb 292>;

  <bb 292>:
  goto <bb 297>;

  <bb 293>:
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  # DEBUG D#53 => &h_145(D)->mb.pic.p_fenc
  # DEBUG p_fenc => D#53
  # DEBUG D#54 => &h_145(D)->mb.pic.p_fdec
  # DEBUG p_fdec => D#54
  _1732 = analysis.i_lambda;
  analysis.i_cost16x16direct = _1732;
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 294>:
  # i_2644 = PHI <i_1754(296), 0(293)>
  # ivtmp_1847 = PHI <ivtmp_2633(296), 4(293)>
  # DEBUG i => i_2644
  _1734 = i_2644 & 1;
  x_1735 = _1734 * 8;
  # DEBUG x => x_1735
  _1736 = i_2644 >> 1;
  y_1737 = _1736 * 8;
  # DEBUG y => y_1737
  _1738 = h_145(D)->pixf.mbcmp[3];
  _1739 = MEM[(uint8_t * *)h_145(D) + 15624B];
  _1740 = y_1737 * 32;
  _1741 = x_1735 + _1740;
  _1742 = (sizetype) _1741;
  _1743 = _1739 + _1742;
  _1744 = MEM[(uint8_t * *)h_145(D) + 15576B];
  _1745 = y_1737 * 16;
  _1746 = x_1735 + _1745;
  _1747 = (sizetype) _1746;
  _1748 = _1744 + _1747;
  _1749 = _1738 (_1748, 16, _1743, 32);
  _1750 = analysis.i_cost16x16direct;
  _1751 = _1749 + _1750;
  analysis.i_cost16x16direct = _1751;
  _1752 = analysis.i_lambda;
  _1753 = _1749 + _1752;
  analysis.i_cost8x8direct[i_2644] = _1753;
  i_1754 = i_2644 + 1;
  # DEBUG i => i_1754
  # DEBUG i => i_1754
  ivtmp_2633 = ivtmp_1847 - 1;
  if (ivtmp_2633 != 0)
    goto <bb 296>;
  else
    goto <bb 295>;

  <bb 295>:
  goto <bb 291>;

  <bb 296>:
  goto <bb 294>;

  <bb 297>:
  # p_halfpel_thresh_1770 = PHI <&i_halfpel_thresh(291), 0B(292)>
  # DEBUG p_halfpel_thresh => p_halfpel_thresh_1770
  m.i_pixel = 0;
  _1755 = analysis.p_cost_mv;
  m.p_cost_mv = _1755;
  _1756 = h_145(D)->mb.pic.i_stride[0];
  m.i_stride[0] = _1756;
  _1757 = h_145(D)->mb.pic.i_stride[1];
  m.i_stride[1] = _1757;
  _1758 = h_145(D)->mb.pic.p_fenc[0];
  m.p_fenc[0] = _1758;
  _1759 = h_145(D)->mb.pic.p_fenc[1];
  m.p_fenc[1] = _1759;
  _1760 = h_145(D)->mb.pic.p_fenc[2];
  m.p_fenc[2] = _1760;
  analysis.l0.me16x16.cost = 2147483647;
  # DEBUG i_ref => 0
  # DEBUG i_ref => 0
  if (_511 > 0)
    goto <bb 298>;
  else
    goto <bb 309>;

  <bb 298>:

  <bb 299>:
  # i_ref_2427 = PHI <0(298), prephitmp_2775(307)>
  # DEBUG i_ref => i_ref_2427
  _1762 = h_145(D)->mb.pic.p_fref[0][i_ref_2427][0];
  m.p_fref[0] = _1762;
  _1763 = h_145(D)->mb.pic.p_fref[0][i_ref_2427][1];
  m.p_fref[1] = _1763;
  _1764 = h_145(D)->mb.pic.p_fref[0][i_ref_2427][2];
  m.p_fref[2] = _1764;
  _1765 = h_145(D)->mb.pic.p_fref[0][i_ref_2427][3];
  m.p_fref[3] = _1765;
  _1766 = h_145(D)->mb.pic.p_fref[0][i_ref_2427][4];
  m.p_fref[4] = _1766;
  _1767 = h_145(D)->mb.pic.p_fref[0][i_ref_2427][5];
  m.p_fref[5] = _1767;
  _1768 = h_145(D)->mb.pic.p_integral[0][i_ref_2427];
  m.integral = _1768;
  x264_mb_predict_mv_16x16 (h_145(D), 0, i_ref_2427, &m.mvp);
  x264_mb_predict_mv_ref16x16 (h_145(D), 0, i_ref_2427, &mvc, &i_mvc);
  i_mvc.101_1769 = i_mvc;
  x264_me_search_ref (h_145(D), &m, &mvc, i_mvc.101_1769, p_halfpel_thresh_1770);
  _1771 = analysis.i_lambda;
  _1772 = h_145(D)->sh.i_num_ref_idx_l0_active;
  _1773 = _1772 + -1;
  # DEBUG x => _1773
  # DEBUG val => i_ref_2427
  if (_1773 == 1)
    goto <bb 300>;
  else
    goto <bb 301>;

  <bb 300>:
  pretmp_2773 = i_ref_2427 + 1;
  goto <bb 304>;

  <bb 301>:
  if (_1773 > 1)
    goto <bb 303>;
  else
    goto <bb 302>;

  <bb 302>:
  pretmp_2774 = i_ref_2427 + 1;
  goto <bb 304>;

  <bb 303>:
  _1774 = i_ref_2427 + 1;
  _1775 = x264_ue_size_tab[_1774];
  _1776 = (int) _1775;
  pretmp_2771 = _1771 * _1776;

  <bb 304>:
  # prephitmp_2772 = PHI <_1771(300), 0(302), pretmp_2771(303)>
  # prephitmp_2775 = PHI <pretmp_2773(300), pretmp_2774(302), _1774(303)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1779 = m.cost;
  _1780 = _1779 + prephitmp_2772;
  m.cost = _1780;
  _1781 = analysis.l0.me16x16.cost;
  if (_1780 < _1781)
    goto <bb 305>;
  else
    goto <bb 306>;

  <bb 305>:
  analysis.l0.i_ref = i_ref_2427;
  _1782 = h_145(D)->mc.memcpy_aligned;
  _1782 (&analysis.l0.me16x16, &m, 128);

  <bb 306>:
  _1784 = h_145(D)->mb.mvr[0][i_ref_2427];
  _1785 = h_145(D)->mb.i_mb_xy;
  _1786 = (long unsigned int) _1785;
  _1787 = _1786 * 4;
  _1788 = _1784 + _1787;
  _1789 = MEM[(uint32_t *)&m + 124B];
  *_1788 = _1789;
  # DEBUG D#877 => i_ref_2427 + 1
  # DEBUG i_ref => D#877
  # DEBUG i_ref => D#877
  _1791 = h_145(D)->mb.pic.i_fref[0];
  if (_1791 > prephitmp_2775)
    goto <bb 307>;
  else
    goto <bb 308>;

  <bb 307>:
  goto <bb 299>;

  <bb 308>:
  pretmp_2688 = analysis.l0.me16x16.cost;

  <bb 309>:
  # prephitmp_2689 = PHI <pretmp_2688(308), 2147483647(297)>
  _1792 = analysis.i_lambda;
  _1793 = analysis.l0.i_ref;
  _1794 = h_145(D)->sh.i_num_ref_idx_l0_active;
  _1795 = _1794 + -1;
  # DEBUG x => _1795
  # DEBUG val => _1793
  if (_1795 == 1)
    goto <bb 312>;
  else
    goto <bb 310>;

  <bb 310>:
  if (_1795 > 1)
    goto <bb 311>;
  else
    goto <bb 312>;

  <bb 311>:
  _1796 = _1793 + 1;
  _1797 = x264_ue_size_tab[_1796];
  _1798 = (int) _1797;
  pretmp_2691 = _1792 * _1798;

  <bb 312>:
  # prephitmp_2692 = PHI <_1792(309), 0(310), pretmp_2691(311)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1802 = prephitmp_2689 - prephitmp_2692;
  analysis.l0.me16x16.cost = _1802;
  i_halfpel_thresh = 2147483647;
  _1803 = h_145(D)->mb.pic.i_fref[1];
  if (_1803 > 1)
    goto <bb 314>;
  else
    goto <bb 313>;

  <bb 313>:

  <bb 314>:
  # p_halfpel_thresh_1813 = PHI <&i_halfpel_thresh(312), 0B(313)>
  # DEBUG p_halfpel_thresh => p_halfpel_thresh_1813
  analysis.l1.me16x16.cost = 2147483647;
  # DEBUG i_ref => 0
  # DEBUG i_ref => 0
  if (_1803 > 0)
    goto <bb 315>;
  else
    goto <bb 326>;

  <bb 315>:

  <bb 316>:
  # i_ref_2404 = PHI <0(315), prephitmp_2768(324)>
  # DEBUG i_ref => i_ref_2404
  _1805 = h_145(D)->mb.pic.p_fref[1][i_ref_2404][0];
  m.p_fref[0] = _1805;
  _1806 = h_145(D)->mb.pic.p_fref[1][i_ref_2404][1];
  m.p_fref[1] = _1806;
  _1807 = h_145(D)->mb.pic.p_fref[1][i_ref_2404][2];
  m.p_fref[2] = _1807;
  _1808 = h_145(D)->mb.pic.p_fref[1][i_ref_2404][3];
  m.p_fref[3] = _1808;
  _1809 = h_145(D)->mb.pic.p_fref[1][i_ref_2404][4];
  m.p_fref[4] = _1809;
  _1810 = h_145(D)->mb.pic.p_fref[1][i_ref_2404][5];
  m.p_fref[5] = _1810;
  _1811 = h_145(D)->mb.pic.p_integral[1][i_ref_2404];
  m.integral = _1811;
  x264_mb_predict_mv_16x16 (h_145(D), 1, i_ref_2404, &m.mvp);
  x264_mb_predict_mv_ref16x16 (h_145(D), 1, i_ref_2404, &mvc, &i_mvc);
  i_mvc.101_1812 = i_mvc;
  x264_me_search_ref (h_145(D), &m, &mvc, i_mvc.101_1812, p_halfpel_thresh_1813);
  _1814 = analysis.i_lambda;
  _1815 = h_145(D)->sh.i_num_ref_idx_l1_active;
  _1816 = _1815 + -1;
  # DEBUG x => _1816
  # DEBUG val => i_ref_2404
  if (_1816 == 1)
    goto <bb 317>;
  else
    goto <bb 318>;

  <bb 317>:
  pretmp_2766 = i_ref_2404 + 1;
  goto <bb 321>;

  <bb 318>:
  if (_1816 > 1)
    goto <bb 320>;
  else
    goto <bb 319>;

  <bb 319>:
  pretmp_2767 = i_ref_2404 + 1;
  goto <bb 321>;

  <bb 320>:
  _1817 = i_ref_2404 + 1;
  _1818 = x264_ue_size_tab[_1817];
  _1819 = (int) _1818;
  pretmp_2764 = _1814 * _1819;

  <bb 321>:
  # prephitmp_2765 = PHI <_1814(317), 0(319), pretmp_2764(320)>
  # prephitmp_2768 = PHI <pretmp_2766(317), pretmp_2767(319), _1817(320)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1822 = m.cost;
  _1823 = _1822 + prephitmp_2765;
  m.cost = _1823;
  _1824 = analysis.l1.me16x16.cost;
  if (_1823 < _1824)
    goto <bb 322>;
  else
    goto <bb 323>;

  <bb 322>:
  analysis.l1.i_ref = i_ref_2404;
  _1825 = h_145(D)->mc.memcpy_aligned;
  _1825 (&analysis.l1.me16x16, &m, 128);

  <bb 323>:
  _1827 = h_145(D)->mb.mvr[1][i_ref_2404];
  _1828 = h_145(D)->mb.i_mb_xy;
  _1829 = (long unsigned int) _1828;
  _1830 = _1829 * 4;
  _1831 = _1827 + _1830;
  _1832 = MEM[(uint32_t *)&m + 124B];
  *_1831 = _1832;
  # DEBUG D#876 => i_ref_2404 + 1
  # DEBUG i_ref => D#876
  # DEBUG i_ref => D#876
  _1834 = h_145(D)->mb.pic.i_fref[1];
  if (_1834 > prephitmp_2768)
    goto <bb 324>;
  else
    goto <bb 325>;

  <bb 324>:
  goto <bb 316>;

  <bb 325>:
  pretmp_2693 = analysis.i_lambda;
  pretmp_2695 = analysis.l1.me16x16.cost;
  pretmp_2697 = analysis.l0.i_ref;

  <bb 326>:
  # prephitmp_2694 = PHI <pretmp_2693(325), _1792(314)>
  # prephitmp_2696 = PHI <pretmp_2695(325), 2147483647(314)>
  # prephitmp_2698 = PHI <pretmp_2697(325), _1793(314)>
  _1836 = analysis.l1.i_ref;
  _1837 = h_145(D)->sh.i_num_ref_idx_l1_active;
  _1838 = _1837 + -1;
  # DEBUG x => _1838
  # DEBUG val => _1836
  if (_1838 == 1)
    goto <bb 329>;
  else
    goto <bb 327>;

  <bb 327>:
  if (_1838 > 1)
    goto <bb 328>;
  else
    goto <bb 329>;

  <bb 328>:
  _1839 = _1836 + 1;
  _1840 = x264_ue_size_tab[_1839];
  _1841 = (int) _1840;
  pretmp_2700 = _1841 * prephitmp_2694;

  <bb 329>:
  # prephitmp_2701 = PHI <prephitmp_2694(326), 0(327), pretmp_2700(328)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1845 = prephitmp_2696 - prephitmp_2701;
  analysis.l1.me16x16.cost = _1845;
  # DEBUG D#875 => analysis.l0.i_ref
  # DEBUG h => h_145(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG D#82 => (uint8_t) D#875
  # DEBUG ref => D#82
  # DEBUG D#912 => &h_145(D)->mb.cache.ref[0][12]
  # DEBUG dst => D#912
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => D#82
  _1848 = prephitmp_2698 & 255;
  _1849 = _1848 * 16843009;
  val2_1850 = (uint32_t) _1849;
  # DEBUG val2 => val2_1850
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_145(D) + 19116B] = val2_1850;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_145(D) + 19124B] = val2_1850;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_145(D) + 19132B] = val2_1850;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_145(D) + 19140B] = val2_1850;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG h => h_145(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 1
  # DEBUG D#81 => (uint8_t) _1836
  # DEBUG ref => D#81
  # DEBUG D#911 => &h_145(D)->mb.cache.ref[1][12]
  # DEBUG dst => D#911
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => D#81
  _1859 = _1836 & 255;
  _1860 = _1859 * 16843009;
  val2_1861 = (uint32_t) _1860;
  # DEBUG val2 => val2_1861
  # DEBUG dy => 0
  # DEBUG dy => 0
  MEM[(uint32_t *)h_145(D) + 19164B] = val2_1861;
  # DEBUG dy => 1
  # DEBUG dy => 1
  MEM[(uint32_t *)h_145(D) + 19172B] = val2_1861;
  # DEBUG dy => 2
  # DEBUG dy => 2
  MEM[(uint32_t *)h_145(D) + 19180B] = val2_1861;
  # DEBUG dy => 3
  # DEBUG dy => 3
  MEM[(uint32_t *)h_145(D) + 19188B] = val2_1861;
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG ref => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  _1868 = h_145(D)->mc.get_ref;
  _1869 = analysis.l0.me16x16.mv[1];
  _1870 = (int) _1869;
  _1871 = analysis.l0.me16x16.mv[0];
  _1872 = (int) _1871;
  _1873 = h_145(D)->mb.pic.i_stride[0];
  _1875 = &h_145(D)->mb.pic.p_fref[0][prephitmp_2698];
  src0_1876 = _1868 (&pix0, &stride0, _1875, _1873, _1872, _1870, 16, 16);
  # DEBUG src0 => src0_1876
  _1877 = h_145(D)->mc.get_ref;
  _1878 = analysis.l1.me16x16.mv[1];
  _1879 = (int) _1878;
  _1880 = analysis.l1.me16x16.mv[0];
  _1881 = (int) _1880;
  _1882 = h_145(D)->mb.pic.i_stride[0];
  _1883 = analysis.l1.i_ref;
  _1884 = &h_145(D)->mb.pic.p_fref[1][_1883];
  src1_1885 = _1877 (&pix1, &stride1, _1884, _1882, _1881, _1879, 16, 16);
  # DEBUG src1 => src1_1885
  _1886 = h_145(D)->mc.avg[0];
  _1887 = analysis.l0.i_ref;
  _1888 = analysis.l1.i_ref;
  _1889 = h_145(D)->mb.bipred_weight[_1887][_1888];
  _1890 = (int) _1889;
  stride1.103_1891 = stride1;
  stride0.104_1892 = stride0;
  _1886 (&pix0, 16, src0_1876, stride0.104_1892, src1_1885, stride1.103_1891, _1890);
  _1893 = h_145(D)->pixf.mbcmp[0];
  _1894 = h_145(D)->mb.pic.p_fenc[0];
  _1895 = _1893 (_1894, 16, &pix0, 16);
  _1896 = analysis.i_lambda;
  # DEBUG D#905 => analysis.l0.i_ref
  _1898 = h_145(D)->sh.i_num_ref_idx_l0_active;
  _1899 = _1898 + -1;
  # DEBUG x => _1899
  # DEBUG val => D#905
  if (_1899 == 1)
    goto <bb 332>;
  else
    goto <bb 330>;

  <bb 330>:
  if (_1899 > 1)
    goto <bb 331>;
  else
    goto <bb 332>;

  <bb 331>:
  _1897 = analysis.l0.i_ref;
  _1900 = _1897 + 1;
  _1901 = x264_ue_size_tab[_1900];
  _1902 = (int) _1901;
  pretmp_2703 = _1896 * _1902;

  <bb 332>:
  # prephitmp_2704 = PHI <_1896(329), 0(330), pretmp_2703(331)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1905 = _1895 + prephitmp_2704;
  # DEBUG D#904 => analysis.l1.i_ref
  _1907 = h_145(D)->sh.i_num_ref_idx_l1_active;
  _1908 = _1907 + -1;
  # DEBUG x => _1908
  # DEBUG val => D#904
  if (_1908 == 1)
    goto <bb 335>;
  else
    goto <bb 333>;

  <bb 333>:
  if (_1908 > 1)
    goto <bb 334>;
  else
    goto <bb 335>;

  <bb 334>:
  _1906 = analysis.l1.i_ref;
  _1909 = _1906 + 1;
  _1910 = x264_ue_size_tab[_1909];
  _1911 = (int) _1910;
  pretmp_2706 = _1896 * _1911;

  <bb 335>:
  # prephitmp_2707 = PHI <_1896(332), 0(333), pretmp_2706(334)>
  # DEBUG x => NULL
  # DEBUG val => NULL
  _1914 = _1905 + prephitmp_2707;
  _1915 = analysis.l0.me16x16.cost_mv;
  _1916 = _1914 + _1915;
  _1917 = analysis.l1.me16x16.cost_mv;
  _1918 = _1916 + _1917;
  _1919 = _1896 * 5;
  i_cost_1920 = _1918 + _1919;
  analysis.i_cost16x16bi = i_cost_1920;
  _1921 = analysis.l0.me16x16.cost;
  _1922 = _1896 * 3;
  i_cost_1923 = _1921 + _1922;
  analysis.l0.me16x16.cost = i_cost_1923;
  _1924 = analysis.l1.me16x16.cost;
  i_cost_1925 = _1922 + _1924;
  analysis.l1.me16x16.cost = i_cost_1925;
  pix0 ={v} {CLOBBER};
  pix1 ={v} {CLOBBER};
  stride0 ={v} {CLOBBER};
  stride1 ={v} {CLOBBER};
  m ={v} {CLOBBER};
  i_mvc ={v} {CLOBBER};
  mvc ={v} {CLOBBER};
  i_halfpel_thresh ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG val2 => NULL
  # DEBUG dy => NULL
  # DEBUG p_halfpel_thresh => NULL
  # DEBUG i_halfpel_thresh => NULL
  # DEBUG i_mvc => NULL
  # DEBUG i_ref => NULL
  # DEBUG stride1 => NULL
  # DEBUG stride0 => NULL
  # DEBUG src1 => NULL
  # DEBUG src0 => NULL
  # DEBUG i_type => 8
  # DEBUG i_partition => 16
  # DEBUG i_cost => i_cost_1923
  if (i_cost_1923 > i_cost_1925)
    goto <bb 337>;
  else
    goto <bb 336>;

  <bb 336>:

  <bb 337>:
  # i_type_40 = PHI <8(336), 12(335)>
  # i_cost_631 = PHI <i_cost_1923(336), i_cost_1925(335)>
  # DEBUG i_cost => i_cost_631
  # DEBUG i_type => i_type_40
  if (i_cost_631 > i_cost_1920)
    goto <bb 339>;
  else
    goto <bb 338>;

  <bb 338>:

  <bb 339>:
  # i_type_41 = PHI <i_type_40(338), 16(337)>
  # i_cost_629 = PHI <i_cost_631(338), i_cost_1920(337)>
  # DEBUG i_cost => i_cost_629
  # DEBUG i_type => i_type_41
  i_cost_520 = analysis.i_cost16x16direct;
  if (i_cost_520 < i_cost_629)
    goto <bb 341>;
  else
    goto <bb 340>;

  <bb 340>:

  <bb 341>:
  # i_type_42 = PHI <i_type_41(340), 7(339)>
  # i_cost_627 = PHI <i_cost_629(340), i_cost_520(339)>
  # DEBUG i_cost => i_cost_627
  # DEBUG i_type => i_type_42
  _523 = analysis.i_mbrd;
  if (_523 != 0)
    goto <bb 342>;
  else
    goto <bb 525>;

  <bb 342>:
  _525 = i_cost_627 * 33;
  _526 = _525 / 32;
  if (i_cost_520 <= _526)
    goto <bb 343>;
  else
    goto <bb 348>;

  <bb 343>:
  x264_mb_analyse_b_rd (h_145(D), &analysis, i_cost_627);
  i_cost.68_528 = analysis.i_rd16x16direct;
  if (i_cost.68_528 > i_cost_2505)
    goto <bb 344>;
  else
    goto <bb 348>;

  <bb 344>:
  i_cost.67_529 = analysis.i_rd16x16bi;
  if (i_cost.67_529 > i_cost_2505)
    goto <bb 345>;
  else
    goto <bb 348>;

  <bb 345>:
  i_cost.65_530 = analysis.l0.i_rd16x16;
  if (i_cost.65_530 > i_cost_2505)
    goto <bb 346>;
  else
    goto <bb 348>;

  <bb 346>:
  i_cost.66_531 = analysis.l1.i_rd16x16;
  if (i_cost.66_531 > i_cost_2505)
    goto <bb 347>;
  else
    goto <bb 348>;

  <bb 347>:
  h_145(D)->mb.i_type = 18;
  x264_analyse_update_cache (h_145(D), &analysis);
  # DEBUG D#865 => {CLOBBER}
  # DEBUG i_satd_inter => D#865
  goto <bb 515>;

  <bb 348>:
  _535 = flags_506 & 256;
  if (_535 != 0)
    goto <bb 349>;
  else
    goto <bb 523>;

  <bb 349>:
  x264_mb_analyse_inter_b8x8 (h_145(D), &analysis);
  i_cost_537 = analysis.i_cost8x8bi;
  if (i_cost_537 < i_cost_627)
    goto <bb 350>;
  else
    goto <bb 523>;

  <bb 350>:
  # DEBUG i_type => 17
  # DEBUG i_partition => 13
  # DEBUG i_cost => i_cost_537
  _540 = h_145(D)->mb.i_sub_partition[0];
  _541 = h_145(D)->mb.i_sub_partition[1];
  if (_540 == _541)
    goto <bb 352>;
  else
    goto <bb 351>;

  <bb 351>:
  _542 = h_145(D)->mb.i_sub_partition[2];
  _543 = h_145(D)->mb.i_sub_partition[3];
  if (_542 == _543)
    goto <bb 352>;
  else
    goto <bb 355>;

  <bb 352>:
  x264_mb_analyse_inter_b16x8 (h_145(D), &analysis);
  i_cost_545 = analysis.i_cost16x8bi;
  if (i_cost_537 > i_cost_545)
    goto <bb 354>;
  else
    goto <bb 353>;

  <bb 353>:
  pretmp_2753 = h_145(D)->mb.i_sub_partition[0];
  pretmp_2756 = h_145(D)->mb.i_sub_partition[2];
  goto <bb 355>;

  <bb 354>:
  # DEBUG i_cost => i_cost_545
  i_type_548 = analysis.i_mb_type16x8;
  # DEBUG i_type => i_type_548
  # DEBUG i_partition => 14
  pretmp_2754 = h_145(D)->mb.i_sub_partition[0];
  pretmp_2757 = h_145(D)->mb.i_sub_partition[2];

  <bb 355>:
  # i_type_43 = PHI <17(351), 17(353), i_type_548(354)>
  # i_partition_57 = PHI <13(351), 13(353), 14(354)>
  # i_cost_572 = PHI <i_cost_537(351), i_cost_537(353), i_cost_545(354)>
  # prephitmp_2755 = PHI <_540(351), pretmp_2753(353), pretmp_2754(354)>
  # prephitmp_2758 = PHI <_542(351), pretmp_2756(353), pretmp_2757(354)>
  # DEBUG i_cost => i_cost_572
  # DEBUG i_partition => i_partition_57
  # DEBUG i_type => i_type_43
  if (prephitmp_2755 == prephitmp_2758)
    goto <bb 357>;
  else
    goto <bb 356>;

  <bb 356>:
  _551 = h_145(D)->mb.i_sub_partition[1];
  _552 = h_145(D)->mb.i_sub_partition[3];
  if (_551 == _552)
    goto <bb 357>;
  else
    goto <bb 522>;

  <bb 357>:
  x264_mb_analyse_inter_b8x16 (h_145(D), &analysis);
  i_cost_554 = analysis.i_cost8x16bi;
  if (i_cost_554 < i_cost_572)
    goto <bb 358>;
  else
    goto <bb 522>;

  <bb 358>:
  # DEBUG i_cost => i_cost_554
  i_type_557 = analysis.i_mb_type8x16;
  # DEBUG i_type => i_type_557
  # DEBUG i_partition => 15
  # DEBUG i_cost => i_cost_554
  # DEBUG i_partition => 15
  # DEBUG i_type => i_type_557
  _1195 = analysis.i_mbrd;
  if (_1195 != 0)
    goto <bb 527>;
  else
    goto <bb 375>;

  <bb 359>:
  pretmp_2745 = analysis.l0.me16x16.cost;
  pretmp_2747 = analysis.i_lambda;
  pretmp_2749 = pretmp_2747 * 3;
  pretmp_2751 = analysis.l1.me16x16.cost;

  <bb 360>:
  # prephitmp_2746 = PHI <pretmp_2745(359), i_cost_1923(525)>
  # prephitmp_2750 = PHI <pretmp_2749(359), _1922(525)>
  # prephitmp_2752 = PHI <pretmp_2751(359), i_cost_1925(525)>
  # DEBUG i_cost => i_cost_627
  # DEBUG i_partition => 16
  # DEBUG i_type => i_type_42
  _562 = prephitmp_2746 - prephitmp_2750;
  analysis.l0.me16x16.cost = _562;
  _565 = prephitmp_2752 - prephitmp_2750;
  analysis.l1.me16x16.cost = _565;
  if (i_type_42 == 8)
    goto <bb 361>;
  else
    goto <bb 362>;

  <bb 361>:
  x264_me_refine_qpel (h_145(D), &analysis.l0.me16x16);
  i_cost.42_576 = analysis.l0.me16x16.cost;
  _577 = analysis.i_lambda;
  _578 = _577 * 3;
  i_cost_579 = i_cost.42_576 + _578;
  # DEBUG i_cost => i_cost_579
  goto <bb 395>;

  <bb 362>:
  if (i_type_42 == 12)
    goto <bb 363>;
  else
    goto <bb 364>;

  <bb 363>:
  x264_me_refine_qpel (h_145(D), &analysis.l1.me16x16);
  i_cost.56_568 = analysis.l1.me16x16.cost;
  _569 = analysis.i_lambda;
  _570 = _569 * 3;
  i_cost_571 = i_cost.56_568 + _570;
  # DEBUG i_cost => i_cost_571
  goto <bb 395>;

  <bb 364>:
  if (i_type_42 == 16)
    goto <bb 365>;
  else
    goto <bb 528>;

  <bb 365>:
  x264_me_refine_qpel (h_145(D), &analysis.l0.me16x16);
  x264_me_refine_qpel (h_145(D), &analysis.l1.me16x16);
  goto <bb 395>;

  <bb 366>:
  if (i_partition_57 == 14)
    goto <bb 367>;
  else
    goto <bb 374>;

  <bb 367>:

  <bb 368>:
  # i_160 = PHI <0(367), i_587(373)>
  # ivtmp_806 = PHI <2(367), ivtmp_811(373)>
  # DEBUG i => i_160
  _581 = analysis.i_mb_partition16x8[i_160];
  if (_581 != 7)
    goto <bb 370>;
  else
    goto <bb 369>;

  <bb 369>:
  _585 = &analysis.l1.me16x8[i_160];
  x264_me_refine_qpel (h_145(D), _585);
  goto <bb 371>;

  <bb 370>:
  _582 = &analysis.l0.me16x8[i_160];
  x264_me_refine_qpel (h_145(D), _582);
  _584 = analysis.i_mb_partition16x8[i_160];
  if (_584 != 3)
    goto <bb 369>;
  else
    goto <bb 371>;

  <bb 371>:
  i_587 = i_160 + 1;
  # DEBUG i => i_587
  # DEBUG i => i_587
  ivtmp_811 = ivtmp_806 - 1;
  if (ivtmp_811 != 0)
    goto <bb 373>;
  else
    goto <bb 372>;

  <bb 372>:
  goto <bb 395>;

  <bb 373>:
  goto <bb 368>;

  <bb 374>:
  if (i_partition_57 == 15)
    goto <bb 375>;
  else
    goto <bb 381>;

  <bb 375>:
  # i_cost_274 = PHI <i_cost_572(374), i_cost_554(358)>
  # i_type_261 = PHI <i_type_43(374), i_type_557(358)>

  <bb 376>:
  # i_1320 = PHI <0(375), i_594(380)>
  # ivtmp_2207 = PHI <2(375), ivtmp_2269(380)>
  # DEBUG i => i_1320
  _588 = analysis.i_mb_partition8x16[i_1320];
  if (_588 != 7)
    goto <bb 378>;
  else
    goto <bb 377>;

  <bb 377>:
  _592 = &analysis.l1.me8x16[i_1320];
  x264_me_refine_qpel (h_145(D), _592);
  goto <bb 379>;

  <bb 378>:
  _589 = &analysis.l0.me8x16[i_1320];
  x264_me_refine_qpel (h_145(D), _589);
  _591 = analysis.i_mb_partition8x16[i_1320];
  if (_591 != 3)
    goto <bb 377>;
  else
    goto <bb 379>;

  <bb 379>:
  i_594 = i_1320 + 1;
  # DEBUG i => i_594
  # DEBUG i => i_594
  ivtmp_2269 = ivtmp_2207 - 1;
  if (ivtmp_2269 != 0)
    goto <bb 380>;
  else
    goto <bb 394>;

  <bb 380>:
  goto <bb 376>;

  <bb 381>:
  if (i_partition_57 == 13)
    goto <bb 382>;
  else
    goto <bb 528>;

  <bb 382>:

  <bb 383>:
  # i_2540 = PHI <0(382), i_624(393)>
  # ivtmp_782 = PHI <4(382), ivtmp_791(393)>
  # DEBUG i => i_2540
  i_part_type_595 = h_145(D)->mb.i_sub_partition[i_2540];
  # DEBUG i_part_type => i_part_type_595
  # DEBUG D#144 => i_part_type_595 == 11
  # DEBUG b_bidir => (int) D#144
  if (i_part_type_595 == 12)
    goto <bb 384>;
  else
    goto <bb 385>;

  <bb 384>:
  goto <bb 391>;

  <bb 385>:
  _596 = x264_mb_partition_listX_table[0][i_part_type_595];
  if (_596 != 0)
    goto <bb 386>;
  else
    goto <bb 388>;

  <bb 386>:
  m_597 = &analysis.l0.me8x8[i_2540];
  # DEBUG m => m_597
  i_part_cost_old_598 = MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2540].cost;
  # DEBUG i_part_cost_old => i_part_cost_old_598
  _599 = analysis.i_lambda;
  i_type_cost_600 = _599 * 3;
  # DEBUG i_type_cost => i_type_cost_600
  _601 = i_part_cost_old_598 - i_type_cost_600;
  MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2540].cost = _601;
  x264_me_refine_qpel (h_145(D), m_597);
  if (i_part_type_595 != 11)
    goto <bb 387>;
  else
    goto <bb 388>;

  <bb 387>:
  i_cost.59_604 = analysis.i_cost8x8bi;
  _605 = MEM[(struct x264_me_t *)&analysis].l0.me8x8[i_2540].cost;
  _606 = i_type_cost_600 + _605;
  _607 = _606 - i_part_cost_old_598;
  _608 = i_cost.59_604 + _607;
  analysis.i_cost8x8bi = _608;
  _2523 = x264_mb_partition_listX_table[1][i_part_type_595];
  if (_2523 != 0)
    goto <bb 526>;
  else
    goto <bb 384>;

  <bb 388>:
  _610 = x264_mb_partition_listX_table[1][i_part_type_595];
  if (_610 != 0)
    goto <bb 389>;
  else
    goto <bb 384>;

  <bb 389>:
  m_611 = &analysis.l1.me8x8[i_2540];
  # DEBUG m => m_611
  i_part_cost_old_612 = MEM[(struct x264_me_t *)&analysis].l1.me8x8[i_2540].cost;
  # DEBUG i_part_cost_old => i_part_cost_old_612
  _613 = analysis.i_lambda;
  i_type_cost_614 = _613 * 3;
  # DEBUG i_type_cost => i_type_cost_614
  _615 = i_part_cost_old_612 - i_type_cost_614;
  MEM[(struct x264_me_t *)&analysis].l1.me8x8[i_2540].cost = _615;
  x264_me_refine_qpel (h_145(D), m_611);
  if (i_part_type_595 != 11)
    goto <bb 390>;
  else
    goto <bb 384>;

  <bb 390>:
  # i_part_cost_old_1556 = PHI <i_part_cost_old_612(389), i_part_cost_old_2548(526)>
  # i_type_cost_95 = PHI <i_type_cost_614(389), i_type_cost_2531(526)>
  # DEBUG m => NULL
  # DEBUG i_part_cost_old => i_part_cost_old_1556
  # DEBUG i_type_cost => i_type_cost_95
  i_cost.59_618 = analysis.i_cost8x8bi;
  _619 = MEM[(struct x264_me_t *)&analysis].l1.me8x8[i_2540].cost;
  _620 = i_type_cost_95 + _619;
  _621 = _620 - i_part_cost_old_1556;
  _622 = i_cost.59_618 + _621;
  analysis.i_cost8x8bi = _622;

  <bb 391>:
  i_624 = i_2540 + 1;
  # DEBUG i => i_624
  # DEBUG i => i_624
  ivtmp_791 = ivtmp_782 - 1;
  if (ivtmp_791 != 0)
    goto <bb 393>;
  else
    goto <bb 392>;

  <bb 392>:
  goto <bb 395>;

  <bb 393>:
  goto <bb 383>;

  <bb 394>:

  <bb 395>:
  # i_cost_556 = PHI <i_cost_627(365), i_cost_571(363), i_cost_572(372), i_cost_274(394), i_cost_579(361), i_cost_572(392)>
  # i_type_2486 = PHI <16(365), 12(363), i_type_43(372), i_type_261(394), 8(361), i_type_43(392)>
  # i_partition_2484 = PHI <16(365), 16(363), 14(372), 15(394), 16(361), 13(392)>
  # DEBUG i_cost => i_cost_556
  _625 = analysis.i_mbrd;
  if (_625 != 0)
    goto <bb 396>;
  else
    goto <bb 411>;

  <bb 396>:
  # i_cost_99 = PHI <i_cost_556(395), i_cost_2350(527)>
  # DEBUG i_cost => i_cost_99
  # DEBUG i_satd_inter => i_cost_99
  x264_mb_analyse_b_rd (h_145(D), &analysis, i_cost_99);
  # DEBUG i_type => 18
  # DEBUG i_cost => i_cost_2505
  # DEBUG i_partition => 16
  i_cost_630 = analysis.l0.i_rd16x16;
  if (i_cost_630 < i_cost_2505)
    goto <bb 398>;
  else
    goto <bb 397>;

  <bb 397>:

  <bb 398>:
  # i_type_45 = PHI <18(397), 8(396)>
  # i_cost_547 = PHI <i_cost_2505(397), i_cost_630(396)>
  # DEBUG i_cost => i_cost_547
  # DEBUG i_type => i_type_45
  i_cost_632 = analysis.l1.i_rd16x16;
  if (i_cost_547 > i_cost_632)
    goto <bb 400>;
  else
    goto <bb 399>;

  <bb 399>:

  <bb 400>:
  # i_type_46 = PHI <i_type_45(399), 12(398)>
  # i_cost_539 = PHI <i_cost_547(399), i_cost_632(398)>
  # DEBUG i_cost => i_cost_539
  # DEBUG i_type => i_type_46
  i_cost_635 = analysis.i_rd16x16bi;
  if (i_cost_539 > i_cost_635)
    goto <bb 402>;
  else
    goto <bb 401>;

  <bb 401>:

  <bb 402>:
  # i_type_47 = PHI <i_type_46(401), 16(400)>
  # i_cost_534 = PHI <i_cost_539(401), i_cost_635(400)>
  # DEBUG i_cost => i_cost_534
  # DEBUG i_type => i_type_47
  i_cost_638 = analysis.i_rd16x16direct;
  if (i_cost_534 > i_cost_638)
    goto <bb 404>;
  else
    goto <bb 403>;

  <bb 403>:

  <bb 404>:
  # i_type_48 = PHI <i_type_47(403), 7(402)>
  # i_cost_522 = PHI <i_cost_534(403), i_cost_638(402)>
  # DEBUG i_cost => i_cost_522
  # DEBUG i_type => i_type_48
  i_cost_641 = analysis.i_rd16x8bi;
  if (i_cost_522 > i_cost_641)
    goto <bb 405>;
  else
    goto <bb 406>;

  <bb 405>:
  # DEBUG i_cost => i_cost_641
  i_type_644 = analysis.i_mb_type16x8;
  # DEBUG i_type => i_type_644
  # DEBUG i_partition => 14

  <bb 406>:
  # i_type_49 = PHI <i_type_48(404), i_type_644(405)>
  # i_partition_59 = PHI <16(404), 14(405)>
  # i_cost_519 = PHI <i_cost_522(404), i_cost_641(405)>
  # DEBUG i_cost => i_cost_519
  # DEBUG i_partition => i_partition_59
  # DEBUG i_type => i_type_49
  i_cost_645 = analysis.i_rd8x16bi;
  if (i_cost_519 > i_cost_645)
    goto <bb 407>;
  else
    goto <bb 408>;

  <bb 407>:
  # DEBUG i_cost => i_cost_645
  i_type_648 = analysis.i_mb_type8x16;
  # DEBUG i_type => i_type_648
  # DEBUG i_partition => 15

  <bb 408>:
  # i_type_50 = PHI <i_type_49(406), i_type_648(407)>
  # i_partition_60 = PHI <i_partition_59(406), 15(407)>
  # i_cost_516 = PHI <i_cost_519(406), i_cost_645(407)>
  # DEBUG i_cost => i_cost_516
  # DEBUG i_partition => i_partition_60
  # DEBUG i_type => i_type_50
  i_cost_649 = analysis.i_rd8x8bi;
  if (i_cost_516 > i_cost_649)
    goto <bb 410>;
  else
    goto <bb 409>;

  <bb 409>:

  <bb 410>:
  # i_type_51 = PHI <i_type_50(409), 17(408)>
  # i_partition_61 = PHI <i_partition_60(409), 13(408)>
  # i_cost_514 = PHI <i_cost_516(409), i_cost_649(408)>
  # DEBUG i_cost => i_cost_514
  # DEBUG i_partition => i_partition_61
  # DEBUG i_type => i_type_51
  h_145(D)->mb.i_type = i_type_51;
  h_145(D)->mb.i_partition = i_partition_61;

  <bb 411>:
  # i_type_52 = PHI <i_type_2486(395), i_type_51(410), i_type_319(528)>
  # i_partition_62 = PHI <i_partition_2484(395), i_partition_61(410), i_partition_131(528)>
  # i_cost_507 = PHI <i_cost_556(395), i_cost_514(410), i_cost_1595(528)>
  # i_satd_inter_353 = PHI <0(395), i_cost_99(410), 0(528)>
  # DEBUG i_satd_inter => i_satd_inter_353
  # DEBUG i_cost => i_cost_507
  # DEBUG i_partition => i_partition_62
  # DEBUG i_type => i_type_52
  x264_mb_analyse_intra (h_145(D), &analysis, i_satd_inter_353);
  _656 = analysis.i_mbrd;
  if (_656 != 0)
    goto <bb 412>;
  else
    goto <bb 423>;

  <bb 412>:
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  # DEBUG i_satd => &i_satd_inter
  # DEBUG i_rd => &i_cost
  _512 = x264_mb_transform_8x8_allowed (h_145(D));
  if (_512 != 0)
    goto <bb 414>;
  else
    goto <bb 413>;

  <bb 413>:
  pretmp_2736 = i_satd_inter_353 * 17;
  pretmp_2741 = pretmp_2736 / 16;
  goto <bb 422>;

  <bb 414>:
  _1926 = h_145(D)->param.analyse.b_transform_8x8;
  if (_1926 != 0)
    goto <bb 416>;
  else
    goto <bb 415>;

  <bb 415>:
  pretmp_2735 = i_satd_inter_353 * 17;
  pretmp_2740 = pretmp_2735 / 16;
  goto <bb 422>;

  <bb 416>:
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  # DEBUG i_satd => &i_satd_inter
  # DEBUG i_rd => &i_cost
  x264_analyse_update_cache (h_145(D), &analysis);
  _657 = h_145(D)->mb.b_transform_8x8;
  _1927 = _657 == 0;
  _1928 = (int) _1927;
  h_145(D)->mb.b_transform_8x8 = _1928;
  _1929 = analysis.i_lambda2;
  i_cost_1930 = x264_rd_cost_mb (h_145(D), _1929);
  # DEBUG i_rd8 => i_cost_1930
  if (i_cost_507 >= i_cost_1930)
    goto <bb 417>;
  else
    goto <bb 421>;

  <bb 417>:
  if (i_cost_507 > 0)
    goto <bb 418>;
  else
    goto <bb 419>;

  <bb 418>:
  _1933 = (long int) i_satd_inter_353;
  _1934 = (long int) i_cost_1930;
  _1935 = _1933 * _1934;
  _1936 = (long int) i_cost_507;
  _1937 = _1935 / _1936;
  i_satd_inter_1938 = (int) _1937;
  # DEBUG i_satd_inter => i_satd_inter_1938

  <bb 419>:
  # i_satd_inter_343 = PHI <i_satd_inter_353(417), i_satd_inter_1938(418)>
  # DEBUG i_satd_inter => i_satd_inter_343
  if (i_satd_inter_343 == 0)
    goto <bb 422>;
  else
    goto <bb 420>;

  <bb 420>:
  pretmp_2738 = i_satd_inter_343 * 17;
  pretmp_2743 = pretmp_2738 / 16;
  goto <bb 422>;

  <bb 421>:
  _1940 = h_145(D)->mb.b_transform_8x8;
  _1941 = _1940 == 0;
  _1942 = (int) _1941;
  h_145(D)->mb.b_transform_8x8 = _1942;
  pretmp_2737 = i_satd_inter_353 * 17;
  pretmp_2742 = pretmp_2737 / 16;

  <bb 422>:
  # i_cost_459 = PHI <i_cost_507(415), i_cost_507(413), i_cost_507(421), i_cost_1930(419), i_cost_1930(420)>
  # prephitmp_2744 = PHI <pretmp_2740(415), pretmp_2741(413), pretmp_2742(421), 1(419), pretmp_2743(420)>
  # DEBUG i_satd_inter => NULL
  # DEBUG i_cost => i_cost_459
  # DEBUG h => NULL
  # DEBUG a => NULL
  # DEBUG i_satd => NULL
  # DEBUG i_rd => NULL
  x264_intra_rd (h_145(D), &analysis, prephitmp_2744);
  pretmp_2708 = analysis.i_mbrd;

  <bb 423>:
  # i_cost_458 = PHI <i_cost_507(411), i_cost_459(422)>
  # prephitmp_2709 = PHI <_656(411), pretmp_2708(422)>
  # DEBUG i_cost => i_cost_458
  i_cost_662 = analysis.i_satd_i16x16;
  if (i_cost_458 > i_cost_662)
    goto <bb 425>;
  else
    goto <bb 424>;

  <bb 424>:

  <bb 425>:
  # i_type_53 = PHI <i_type_52(424), 2(423)>
  # i_cost_375 = PHI <i_cost_458(424), i_cost_662(423)>
  # DEBUG i_cost => i_cost_375
  # DEBUG i_type => i_type_53
  i_cost_665 = analysis.i_satd_i8x8;
  if (i_cost_375 > i_cost_665)
    goto <bb 427>;
  else
    goto <bb 426>;

  <bb 426>:

  <bb 427>:
  # i_type_54 = PHI <i_type_53(426), 1(425)>
  # i_cost_2219 = PHI <i_cost_375(426), i_cost_665(425)>
  # DEBUG i_cost => i_cost_2219
  # DEBUG i_type => i_type_54
  i_cost_668 = analysis.i_satd_i4x4;
  if (i_cost_668 < i_cost_2219)
    goto <bb 429>;
  else
    goto <bb 428>;

  <bb 428>:

  <bb 429>:
  # i_type_55 = PHI <i_type_54(428), 0(427)>
  # i_cost_2218 = PHI <i_cost_2219(428), i_cost_668(427)>
  # DEBUG i_cost => i_cost_2218
  # DEBUG i_type => i_type_55
  i_cost_671 = analysis.i_satd_pcm;
  if (i_cost_671 < i_cost_2218)
    goto <bb 524>;
  else
    goto <bb 430>;

  <bb 430>:
  # DEBUG i_type => i_type_55
  h_145(D)->mb.i_type = i_type_55;
  h_145(D)->mb.i_partition = i_partition_62;
  if (prephitmp_2709 > 1)
    goto <bb 431>;
  else
    goto <bb 530>;

  <bb 431>:
  i_type.73_677 = (unsigned int) i_type_55;
  if (i_type.73_677 <= 2)
    goto <bb 432>;
  else
    goto <bb 529>;

  <bb 432>:
  x264_intra_rd_refine (h_145(D), &analysis);
  _679 = h_145(D)->mb.i_subpel_refine;
  if (_679 > 4)
    goto <bb 434>;
  else
    goto <bb 433>;

  <bb 433>:
  pretmp_2718 = analysis.i_mbrd;
  goto <bb 460> (<L378>);

  <bb 434>:
  pretmp_2727 = h_145(D)->mb.i_type;
  pretmp_2729 = (unsigned int) pretmp_2727;

  <bb 435>:
  # prephitmp_2728 = PHI <pretmp_2727(434), i_type_55(529), i_type_55(531)>
  # prephitmp_2731 = PHI <pretmp_2729(434), i_type.73_677(529), pretmp_2730(531)>
  # DEBUG h => h_145(D)
  # DEBUG a => &analysis
  _1943 = analysis.l0.i_ref;
  _1944 = analysis.l1.i_ref;
  _1945 = h_145(D)->mb.bipred_weight[_1943][_1944];
  i_biweight_1946 = (const int) _1945;
  # DEBUG i_biweight => i_biweight_1946
  if (prephitmp_2731 <= 3)
    goto <bb 436>;
  else
    goto <bb 437>;

  <bb 436>:
  pretmp_2720 = analysis.i_mbrd;
  goto <bb 460> (<L378>);

  <bb 437>:
  _1949 = h_145(D)->mb.i_partition;
  switch (_1949) <default: <L394>, case 13: <L393>, case 14: <L391>, case 15: <L392>, case 16: <L376>>

<L394>:
  pretmp_2719 = analysis.i_mbrd;
  goto <bb 460> (<L378>);

<L376>:
  if (prephitmp_2728 == 16)
    goto <bb 441>;
  else
    goto <bb 440>;

  <bb 440>:
  pretmp_2725 = analysis.i_mbrd;
  goto <bb 460> (<L378>);

  <bb 441>:
  x264_me_refine_bidir_satd (h_145(D), &analysis.l0.me16x16, &analysis.l1.me16x16, i_biweight_1946);
  pretmp_2724 = analysis.i_mbrd;
  goto <bb 460> (<L378>);

<L391>:

  <bb 443>:
  # i_1561 = PHI <0(442), i_1956(446)>
  # ivtmp_2577 = PHI <2(442), ivtmp_2585(446)>
  # DEBUG i => i_1561
  _1953 = analysis.i_mb_partition16x8[i_1561];
  if (_1953 == 11)
    goto <bb 444>;
  else
    goto <bb 445>;

  <bb 444>:
  _1954 = &analysis.l1.me16x8[i_1561];
  _1955 = &analysis.l0.me16x8[i_1561];
  x264_me_refine_bidir_satd (h_145(D), _1955, _1954, i_biweight_1946);

  <bb 445>:
  i_1956 = i_1561 + 1;
  # DEBUG i => i_1956
  # DEBUG i => i_1956
  ivtmp_2585 = ivtmp_2577 - 1;
  if (ivtmp_2585 != 0)
    goto <bb 446>;
  else
    goto <bb 447>;

  <bb 446>:
  goto <bb 443>;

  <bb 447>:
  pretmp_2723 = analysis.i_mbrd;
  goto <bb 460> (<L378>);

<L392>:

  <bb 449>:
  # i_267 = PHI <0(448), i_1961(452)>
  # ivtmp_1050 = PHI <2(448), ivtmp_1437(452)>
  # DEBUG i => i_267
  _1958 = analysis.i_mb_partition8x16[i_267];
  if (_1958 == 11)
    goto <bb 450>;
  else
    goto <bb 451>;

  <bb 450>:
  _1959 = &analysis.l1.me8x16[i_267];
  _1960 = &analysis.l0.me8x16[i_267];
  x264_me_refine_bidir_satd (h_145(D), _1960, _1959, i_biweight_1946);

  <bb 451>:
  i_1961 = i_267 + 1;
  # DEBUG i => i_1961
  # DEBUG i => i_1961
  ivtmp_1437 = ivtmp_1050 - 1;
  if (ivtmp_1437 != 0)
    goto <bb 452>;
  else
    goto <bb 453>;

  <bb 452>:
  goto <bb 449>;

  <bb 453>:
  pretmp_2722 = analysis.i_mbrd;
  goto <bb 460> (<L378>);

<L393>:

  <bb 455>:
  # i_2637 = PHI <0(454), i_1966(458)>
  # ivtmp_1031 = PHI <4(454), ivtmp_2569(458)>
  # DEBUG i => i_2637
  _1963 = h_145(D)->mb.i_sub_partition[i_2637];
  if (_1963 == 11)
    goto <bb 456>;
  else
    goto <bb 457>;

  <bb 456>:
  _1964 = &analysis.l1.me8x8[i_2637];
  _1965 = &analysis.l0.me8x8[i_2637];
  x264_me_refine_bidir_satd (h_145(D), _1965, _1964, i_biweight_1946);

  <bb 457>:
  i_1966 = i_2637 + 1;
  # DEBUG i => i_1966
  # DEBUG i => i_1966
  ivtmp_2569 = ivtmp_1031 - 1;
  if (ivtmp_2569 != 0)
    goto <bb 458>;
  else
    goto <bb 459>;

  <bb 458>:
  goto <bb 455>;

  <bb 459>:
  pretmp_2721 = analysis.i_mbrd;

  # i_type_1436 = PHI <i_type_55(433), i_type_55(438), i_type_55(436), i_type_55(459), i_type_55(453), i_type_55(447), i_type_55(441), i_type_55(440), 3(524)>
  # prephitmp_2726 = PHI <pretmp_2718(433), pretmp_2719(438), pretmp_2720(436), pretmp_2721(459), pretmp_2722(453), pretmp_2723(447), pretmp_2724(441), pretmp_2725(440), prephitmp_2709(524)>
<L378>:
  if (prephitmp_2726 > 1)
    goto <bb 461>;
  else
    goto <bb 70>;

  <bb 461>:
  pretmp_2710 = (unsigned int) i_type_1436;

  <bb 462>:
  # i_type_89 = PHI <i_type_1436(461), i_type_55(529)>
  # prephitmp_2711 = PHI <pretmp_2710(461), i_type.73_677(529)>
  _683 = prephitmp_2711 + 4294967288;
  if (_683 <= 9)
    goto <bb 463>;
  else
    goto <bb 70>;

  <bb 463>:
  _684 = analysis.l0.i_ref;
  _685 = analysis.l1.i_ref;
  _686 = h_145(D)->mb.bipred_weight[_684][_685];
  i_biweight_687 = (const int) _686;
  # DEBUG i_biweight => i_biweight_687
  x264_analyse_update_cache (h_145(D), &analysis);
  if (i_partition_62 == 16)
    goto <bb 464>;
  else
    goto <bb 470>;

  <bb 464>:
  if (i_type_89 == 8)
    goto <bb 465>;
  else
    goto <bb 466>;

  <bb 465>:
  _693 = analysis.i_lambda2;
  x264_me_refine_qpel_rd (h_145(D), &analysis.l0.me16x16, _693, 0, 0);
  goto <bb 503>;

  <bb 466>:
  if (i_type_89 == 12)
    goto <bb 467>;
  else
    goto <bb 468>;

  <bb 467>:
  _689 = analysis.i_lambda2;
  x264_me_refine_qpel_rd (h_145(D), &analysis.l1.me16x16, _689, 0, 1);
  goto <bb 503>;

  <bb 468>:
  if (i_type_89 == 16)
    goto <bb 469>;
  else
    goto <bb 70>;

  <bb 469>:
  _691 = analysis.i_lambda2;
  x264_me_refine_bidir_rd (h_145(D), &analysis.l0.me16x16, &analysis.l1.me16x16, i_biweight_687, 0, _691);
  goto <bb 503>;

  <bb 470>:
  if (i_partition_62 == 14)
    goto <bb 471>;
  else
    goto <bb 481>;

  <bb 471>:

  <bb 472>:
  # i_1315 = PHI <0(471), i_712(480)>
  # ivtmp_340 = PHI <2(471), ivtmp_1347(480)>
  # DEBUG i => i_1315
  _695 = i_1315 * 2;
  _696 = _695 + 1;
  _697 = analysis.i_mb_partition16x8[i_1315];
  h_145(D)->mb.i_sub_partition[_696] = _697;
  h_145(D)->mb.i_sub_partition[_695] = _697;
  if (_697 == 3)
    goto <bb 473>;
  else
    goto <bb 474>;

  <bb 473>:
  _700 = i_1315 * 8;
  _701 = analysis.i_lambda2;
  _702 = &analysis.l0.me16x8[i_1315];
  x264_me_refine_qpel_rd (h_145(D), _702, _701, _700, 0);
  goto <bb 478>;

  <bb 474>:
  if (_697 == 7)
    goto <bb 475>;
  else
    goto <bb 476>;

  <bb 475>:
  _704 = i_1315 * 8;
  _705 = analysis.i_lambda2;
  _706 = &analysis.l1.me16x8[i_1315];
  x264_me_refine_qpel_rd (h_145(D), _706, _705, _704, 1);
  goto <bb 478>;

  <bb 476>:
  if (_697 == 11)
    goto <bb 477>;
  else
    goto <bb 478>;

  <bb 477>:
  _708 = analysis.i_lambda2;
  _709 = &analysis.l1.me16x8[i_1315];
  _710 = &analysis.l0.me16x8[i_1315];
  x264_me_refine_bidir_rd (h_145(D), _710, _709, i_biweight_687, _695, _708);

  <bb 478>:
  i_712 = i_1315 + 1;
  # DEBUG i => i_712
  # DEBUG i => i_712
  ivtmp_1347 = ivtmp_340 - 1;
  if (ivtmp_1347 != 0)
    goto <bb 480>;
  else
    goto <bb 479>;

  <bb 479>:
  goto <bb 70>;

  <bb 480>:
  goto <bb 472>;

  <bb 481>:
  if (i_partition_62 == 15)
    goto <bb 482>;
  else
    goto <bb 492>;

  <bb 482>:

  <bb 483>:
  # i_1404 = PHI <0(482), i_729(491)>
  # ivtmp_1229 = PHI <2(482), ivtmp_1129(491)>
  # DEBUG i => i_1404
  _713 = i_1404 + 2;
  _714 = analysis.i_mb_partition8x16[i_1404];
  h_145(D)->mb.i_sub_partition[_713] = _714;
  h_145(D)->mb.i_sub_partition[i_1404] = _714;
  if (_714 == 3)
    goto <bb 484>;
  else
    goto <bb 485>;

  <bb 484>:
  _717 = i_1404 * 4;
  _718 = analysis.i_lambda2;
  _719 = &analysis.l0.me8x16[i_1404];
  x264_me_refine_qpel_rd (h_145(D), _719, _718, _717, 0);
  goto <bb 489>;

  <bb 485>:
  if (_714 == 7)
    goto <bb 486>;
  else
    goto <bb 487>;

  <bb 486>:
  _721 = i_1404 * 4;
  _722 = analysis.i_lambda2;
  _723 = &analysis.l1.me8x16[i_1404];
  x264_me_refine_qpel_rd (h_145(D), _723, _722, _721, 1);
  goto <bb 489>;

  <bb 487>:
  if (_714 == 11)
    goto <bb 488>;
  else
    goto <bb 489>;

  <bb 488>:
  _725 = analysis.i_lambda2;
  _726 = &analysis.l1.me8x16[i_1404];
  _727 = &analysis.l0.me8x16[i_1404];
  x264_me_refine_bidir_rd (h_145(D), _727, _726, i_biweight_687, i_1404, _725);

  <bb 489>:
  i_729 = i_1404 + 1;
  # DEBUG i => i_729
  # DEBUG i => i_729
  ivtmp_1129 = ivtmp_1229 - 1;
  if (ivtmp_1129 != 0)
    goto <bb 491>;
  else
    goto <bb 490>;

  <bb 490>:
  goto <bb 70>;

  <bb 491>:
  goto <bb 483>;

  <bb 492>:
  if (i_partition_62 == 13)
    goto <bb 493>;
  else
    goto <bb 70>;

  <bb 493>:

  <bb 494>:
  # i_1396 = PHI <0(493), i_743(502)>
  # ivtmp_977 = PHI <4(493), ivtmp_2666(502)>
  # DEBUG i => i_1396
  _730 = h_145(D)->mb.i_sub_partition[i_1396];
  if (_730 == 3)
    goto <bb 495>;
  else
    goto <bb 496>;

  <bb 495>:
  _731 = i_1396 * 4;
  _732 = analysis.i_lambda2;
  _733 = &analysis.l0.me8x8[i_1396];
  x264_me_refine_qpel_rd (h_145(D), _733, _732, _731, 0);
  goto <bb 500>;

  <bb 496>:
  if (_730 == 7)
    goto <bb 497>;
  else
    goto <bb 498>;

  <bb 497>:
  _735 = i_1396 * 4;
  _736 = analysis.i_lambda2;
  _737 = &analysis.l1.me8x8[i_1396];
  x264_me_refine_qpel_rd (h_145(D), _737, _736, _735, 1);
  goto <bb 500>;

  <bb 498>:
  if (_730 == 11)
    goto <bb 499>;
  else
    goto <bb 500>;

  <bb 499>:
  _739 = analysis.i_lambda2;
  _740 = &analysis.l1.me8x8[i_1396];
  _741 = &analysis.l0.me8x8[i_1396];
  x264_me_refine_bidir_rd (h_145(D), _741, _740, i_biweight_687, i_1396, _739);

  <bb 500>:
  i_743 = i_1396 + 1;
  # DEBUG i => i_743
  # DEBUG i => i_743
  ivtmp_2666 = ivtmp_977 - 1;
  if (ivtmp_2666 != 0)
    goto <bb 502>;
  else
    goto <bb 501>;

  <bb 501>:
  goto <bb 70>;

  <bb 502>:
  goto <bb 494>;

  <bb 503>:
  x264_analyse_update_cache (h_145(D), &analysis);
  _748 = analysis.i_mbrd;
  if (_748 == 0)
    goto <bb 504>;
  else
    goto <bb 508>;

  <bb 504>:
  # DEBUG h => h_145(D)
  _680 = x264_mb_transform_8x8_allowed (h_145(D));
  if (_680 != 0)
    goto <bb 505>;
  else
    goto <bb 508>;

  <bb 505>:
  _1970 = h_145(D)->param.analyse.b_transform_8x8;
  if (_1970 != 0)
    goto <bb 506>;
  else
    goto <bb 508>;

  <bb 506>:
  _1971 = h_145(D)->mb.b_lossless;
  if (_1971 == 0)
    goto <bb 507>;
  else
    goto <bb 508>;

  <bb 507>:
  x264_mb_mc (h_145(D));
  _1972 = h_145(D)->pixf.sa8d[0];
  _1973 = h_145(D)->mb.pic.p_fdec[0];
  _1974 = h_145(D)->mb.pic.p_fenc[0];
  i_cost8_1975 = _1972 (_1974, 16, _1973, 32);
  # DEBUG i_cost8 => i_cost8_1975
  _1976 = h_145(D)->pixf.satd[0];
  _1977 = h_145(D)->mb.pic.p_fdec[0];
  _1978 = h_145(D)->mb.pic.p_fenc[0];
  i_cost4_1979 = _1976 (_1978, 16, _1977, 32);
  # DEBUG i_cost4 => i_cost4_1979
  _1980 = i_cost8_1975 < i_cost4_1979;
  _1981 = (int) _1980;
  h_145(D)->mb.b_transform_8x8 = _1981;
  h_145(D)->mb.b_skip_mc = 1;

  <bb 508>:
  _750 = h_145(D)->param.analyse.i_trellis;
  h_145(D)->mb.b_trellis = _750;
  _752 = h_145(D)->param.analyse.i_noise_reduction;
  _753 = _752 != 0;
  _754 = (int) _753;
  h_145(D)->mb.b_noise_reduction = _754;
  _756 = h_145(D)->mb.i_type;
  _757 = _756 != 6;
  _758 = _756 != 18;
  _759 = _757 & _758;
  if (_759 != 0)
    goto <bb 509>;
  else
    goto <bb 511>;

  <bb 509>:
  _760 = h_145(D)->mb.i_psy_trellis;
  _2409 = _750 == 1;
  _2399 = _760 != 0;
  _1407 = _2399 & _2409;
  if (_1407 != 0)
    goto <bb 510>;
  else
    goto <bb 511>;

  <bb 510>:
  x264_psy_trellis_init (h_145(D), 0);
  pretmp_2681 = h_145(D)->mb.b_trellis;

  <bb 511>:
  # prephitmp_2682 = PHI <_750(508), pretmp_2681(510), _750(509)>
  if (prephitmp_2682 == 1)
    goto <bb 513>;
  else
    goto <bb 512>;

  <bb 512>:
  _763 = h_145(D)->mb.b_noise_reduction;
  if (_763 != 0)
    goto <bb 513>;
  else
    goto <bb 514>;

  <bb 513>:
  h_145(D)->mb.i_skip_intra = 0;

  <bb 514>:
  analysis ={v} {CLOBBER};
  # DEBUG D#868 => {CLOBBER}
  # DEBUG i_cost => D#868
  goto <bb 516>;

  <bb 515>:
  analysis ={v} {CLOBBER};
  # DEBUG D#867 => {CLOBBER}
  # DEBUG i_cost => D#867

  <bb 516>:
  return;

  <bb 517>:
  # DEBUG b_skip => 0
  _2307 = h_145(D)->mc.prefetch_ref;
  _1267 = h_145(D)->mb.pic.i_stride[0];
  _254 = h_145(D)->mb.i_mb_x;
  _251 = _254 & 3;
  _196 = h_145(D)->mb.pic.p_fref[0][0][_251];
  _2307 (_196, _1267, 1);
  goto <bb 86>;

  <bb 518>:
  # prephitmp_2817 = PHI <_1349(156), _1220(146)>
  # DEBUG i_type => 4
  # DEBUG i_partition => 16
  i_cost_281 = analysis.l0.me16x16.cost;
  # DEBUG i_cost => i_cost_281
  # DEBUG i_type => 4
  # DEBUG i_partition => 16
  # DEBUG i_cost => i_cost_281
  # DEBUG D#885 => analysis.l0.i_cost8x8
  if (i_cost_281 > prephitmp_2817)
    goto <bb 157>;
  else
    goto <bb 520>;

  <bb 519>:
  # DEBUG i_type => 4
  # DEBUG i_partition => 16
  i_cost_231 = analysis.l0.me16x16.cost;
  # DEBUG i_cost => i_cost_231
  # DEBUG i_type => 4
  # DEBUG i_partition => 16
  # DEBUG i_cost => i_cost_231
  # DEBUG i_cost => i_cost_231
  # DEBUG i_partition => 16
  # DEBUG i_type => 4
  # DEBUG D#870 => analysis.l0.me8x8[1].cost_mv
  # DEBUG D#869 => analysis.l0.me8x8[2].cost_mv
  # DEBUG i_thresh16x8 => D#870 + D#869
  # DEBUG i_cost => i_cost_231
  # DEBUG i_partition => 16
  # DEBUG i_type => 4
  h_145(D)->mb.i_partition = 16;
  _2472 = analysis.i_mbrd;
  if (_2472 != 0)
    goto <bb 210>;
  else
    goto <bb 194>;

  <bb 520>:
  # i_type_1265 = PHI <5(175), 5(157), 4(518)>
  # i_partition_167 = PHI <13(175), 13(157), 16(518)>
  # i_cost_1421 = PHI <i_cost_2632(175), prephitmp_2817(157), i_cost_281(518)>
  # prephitmp_2818 = PHI <i_cost_2632(175), prephitmp_2817(157), prephitmp_2817(518)>
  # prephitmp_2820 = PHI <pretmp_2819(175), i_cost_281(157), i_cost_281(518)>
  # DEBUG i_cost => i_cost_1421
  # DEBUG i_partition => i_partition_167
  # DEBUG i_type => i_type_1265
  _1422 = analysis.l0.me8x8[1].cost_mv;
  _2520 = analysis.l0.me8x8[2].cost_mv;
  i_thresh16x8_2522 = _1422 + _2520;
  # DEBUG i_thresh16x8 => i_thresh16x8_2522
  # DEBUG i_cost => i_cost_1421
  # DEBUG i_partition => i_partition_167
  # DEBUG i_type => i_type_1265
  # DEBUG i_thresh16x8 => i_thresh16x8_2522
  _247 = i_thresh16x8_2522 + prephitmp_2820;
  if (_247 > prephitmp_2818)
    goto <bb 176>;
  else
    goto <bb 192>;

  <bb 521>:
  # DEBUG i_cost => i_cost_1713
  # DEBUG i_type => 4
  # DEBUG i_partition => 15
  # DEBUG i_cost => i_cost_1713
  # DEBUG i_partition => 15
  # DEBUG i_type => 4
  h_145(D)->mb.i_partition = 15;
  _2333 = analysis.i_mbrd;
  if (_2333 != 0)
    goto <bb 210>;
  else
    goto <bb 198>;

  <bb 522>:
  # DEBUG i_cost => i_cost_572
  # DEBUG i_partition => i_partition_57
  # DEBUG i_type => i_type_43
  _2534 = analysis.i_mbrd;
  if (_2534 != 0)
    goto <bb 527>;
  else
    goto <bb 366>;

  <bb 523>:
  # DEBUG i_cost => i_cost_627
  # DEBUG i_partition => 16
  # DEBUG i_type => i_type_42
  _2324 = analysis.i_mbrd;
  if (_2324 != 0)
    goto <bb 527>;
  else
    goto <bb 359>;

  <bb 524>:
  # DEBUG i_cost => i_cost_671
  # DEBUG i_type => 3
  # DEBUG i_type => 3
  h_145(D)->mb.i_type = 3;
  h_145(D)->mb.i_partition = i_partition_62;
  goto <bb 460> (<L378>);

  <bb 525>:
  _2542 = flags_506 & 256;
  if (_2542 != 0)
    goto <bb 349>;
  else
    goto <bb 360>;

  <bb 526>:
  m_2494 = &analysis.l1.me8x8[i_2540];
  # DEBUG m => m_2494
  i_part_cost_old_2548 = MEM[(struct x264_me_t *)&analysis].l1.me8x8[i_2540].cost;
  # DEBUG i_part_cost_old => i_part_cost_old_2548
  _2532 = analysis.i_lambda;
  i_type_cost_2531 = _2532 * 3;
  # DEBUG i_type_cost => i_type_cost_2531
  _790 = i_part_cost_old_2548 - i_type_cost_2531;
  MEM[(struct x264_me_t *)&analysis].l1.me8x8[i_2540].cost = _790;
  x264_me_refine_qpel (h_145(D), m_2494);
  goto <bb 390>;

  <bb 527>:
  # i_cost_2350 = PHI <i_cost_572(522), i_cost_627(523), i_cost_554(358)>
  # DEBUG i_cost => i_cost_2350
  goto <bb 396>;

  <bb 528>:
  # i_cost_1595 = PHI <i_cost_627(364), i_cost_572(381)>
  # i_type_319 = PHI <i_type_42(364), i_type_43(381)>
  # i_partition_131 = PHI <16(364), i_partition_57(381)>
  # DEBUG i_cost => i_cost_1595
  goto <bb 411>;

  <bb 529>:
  _279 = h_145(D)->mb.i_subpel_refine;
  if (_279 > 4)
    goto <bb 435>;
  else
    goto <bb 462>;

  <bb 530>:
  _118 = h_145(D)->mb.i_subpel_refine;
  if (_118 > 4)
    goto <bb 531>;
  else
    goto <bb 70>;

  <bb 531>:
  pretmp_2730 = (unsigned int) i_type_55;
  goto <bb 435>;

}



;; Function x264_slicetype_decide (x264_slicetype_decide, funcdef_no=235, decl_uid=7987, cgraph_uid=235, symbol_order=304)


Analyzing loop at encoder/slicetype.c:599
encoder/slicetype.c:599:13: note: ===== analyze_loop_nest =====
encoder/slicetype.c:599:13: note: === vect_analyze_loop_form ===
encoder/slicetype.c:599:13: note: not vectorized: control flow in loop.
encoder/slicetype.c:599:13: note: bad loop form.

Analyzing loop at encoder/slicetype.c:589
encoder/slicetype.c:589:9: note: ===== analyze_loop_nest =====
encoder/slicetype.c:589:9: note: === vect_analyze_loop_form ===
encoder/slicetype.c:589:9: note: === get_loop_niters ===
encoder/slicetype.c:589:9: note: not vectorized: number of iterations cannot be computed.
encoder/slicetype.c:589:9: note: bad loop form.
encoder/slicetype.c:577:6: note: vectorized 0 loops in function.
x264_slicetype_decide (struct x264_t * h)
{
  int i;
  int bframes;
  struct x264_frame_t * frm;
  struct x264_frame_t * _15;
  int _16;
  struct x264_frame_t * _17;
  int _19;
  int _21;
  int _24;
  int _25;
  int _26;
  int _29;
  int _30;
  int _31;
  int _32;
  int _33;
  _Bool _36;
  struct x264_frame_t * _40;
  int _43;
  struct x264_frame_t * _45;
  unsigned int _47;
  unsigned int _48;
  _Bool _51;
  _Bool _54;
  _Bool _55;
  _Bool _58;
  _Bool _69;
  struct x264_frame_t * _70;
  int _72;
  struct x264_frame_t * prephitmp_105;
  struct x264_frame_t * pretmp_110;
  struct x264_frame_t * pretmp_111;
  struct x264_frame_t * prephitmp_112;
  struct x264_frame_t * pretmp_113;
  struct x264_frame_t * prephitmp_114;
  int prephitmp_116;
  unsigned int pretmp_117;
  unsigned int pretmp_119;
  unsigned int prephitmp_120;
  int pretmp_121;
  int pretmp_122;
  int prephitmp_123;
  unsigned int pretmp_124;
  unsigned int pretmp_125;
  unsigned int pretmp_127;
  unsigned int pretmp_128;
  unsigned int prephitmp_129;
  int pretmp_130;
  int prephitmp_131;
  int pretmp_132;
  int prephitmp_133;
  int pretmp_134;
  int pretmp_135;
  int prephitmp_136;
  int prephitmp_139;
  int pretmp_140;
  int prephitmp_141;

  <bb 2>:
  _15 = h_14(D)->frames.next[0];
  if (_15 == 0B)
    goto <bb 35>;
  else
    goto <bb 3>;

  <bb 3>:
  _16 = h_14(D)->param.rc.b_stat_read;
  if (_16 != 0)
    goto <bb 4>;
  else
    goto <bb 8>;

  <bb 4>:

  <bb 5>:
  # i_67 = PHI <0(4), i_23(6)>
  # _70 = PHI <_15(4), _17(6)>
  # DEBUG i => i_67
  _19 = _70->i_frame;
  _21 = x264_ratecontrol_slice_type (h_14(D), _19);
  _70->i_type = _21;
  i_23 = i_67 + 1;
  # DEBUG i => i_23
  # DEBUG i => i_23
  _17 = h_14(D)->frames.next[i_23];
  if (_17 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  goto <bb 5>;

  <bb 7>:
  pretmp_111 = h_14(D)->frames.next[0];
  goto <bb 12>;

  <bb 8>:
  _24 = h_14(D)->param.i_bframe;
  if (_24 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  _25 = h_14(D)->param.i_bframe_adaptive;
  if (_25 != 0)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  _26 = h_14(D)->param.b_pre_scenecut;
  if (_26 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  x264_slicetype_analyse (h_14(D));
  pretmp_110 = h_14(D)->frames.next[0];

  <bb 12>:
  # prephitmp_112 = PHI <pretmp_110(11), pretmp_111(7), _15(10)>

  <bb 13>:
  # bframes_1 = PHI <0(12), bframes_62(34)>
  # prephitmp_114 = PHI <prephitmp_112(12), pretmp_113(34)>
  # DEBUG bframes => bframes_1
  # DEBUG D#974 => h_14(D)->frames.next[bframes_1]
  # DEBUG frm => D#974
  _29 = prephitmp_114->i_frame;
  _30 = h_14(D)->frames.i_last_idr;
  _31 = _29 - _30;
  _32 = h_14(D)->param.i_keyint_max;
  if (_31 >= _32)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:
  pretmp_134 = prephitmp_114->i_type;
  goto <bb 20>;

  <bb 15>:
  _33 = prephitmp_114->i_type;
  if (_33 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  prephitmp_114->i_type = 1;
  goto <bb 20>;

  <bb 17>:
  if (_33 != 1)
    goto <bb 19>;
  else
    goto <bb 18>;

  <bb 18>:
  if (bframes_1 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 19>:
  x264_log (h_14(D), 1, "specified frame type (%d) is not compatible with keyframe interval\n", _33);
  pretmp_135 = prephitmp_114->i_type;

  <bb 20>:
  # prephitmp_136 = PHI <pretmp_134(14), 1(16), pretmp_135(19)>
  if (prephitmp_136 == 1)
    goto <bb 18>;
  else
    goto <bb 25>;

  <bb 21>:
  bframes_39 = bframes_1 + -1;
  # DEBUG bframes => bframes_39
  _40 = h_14(D)->frames.next[bframes_39];
  _40->i_type = 3;
  pretmp_132 = prephitmp_114->i_type;
  goto <bb 25>;

  <bb 22>:
  h_14(D)->i_frame_num = 0;
  # DEBUG bframes => 0
  _72 = h_14(D)->param.i_bframe;
  if (_72 == 0)
    goto <bb 24>;
  else
    goto <bb 23>;

  <bb 23>:
  pretmp_140 = prephitmp_114->i_type;
  goto <bb 27>;

  <bb 24>:
  pretmp_122 = prephitmp_114->i_type;
  pretmp_125 = (unsigned int) pretmp_122;
  pretmp_128 = pretmp_125 + 4294967292;
  goto <bb 30>;

  <bb 25>:
  # bframes_2 = PHI <bframes_1(20), bframes_39(21)>
  # prephitmp_133 = PHI <prephitmp_136(20), pretmp_132(21)>
  # DEBUG bframes => bframes_2
  _43 = h_14(D)->param.i_bframe;
  if (bframes_2 == _43)
    goto <bb 28>;
  else
    goto <bb 26>;

  <bb 26>:
  pretmp_130 = bframes_2 + 1;

  <bb 27>:
  # bframes_80 = PHI <bframes_2(26), 0(23)>
  # prephitmp_131 = PHI <pretmp_130(26), 1(23)>
  # prephitmp_141 = PHI <prephitmp_133(26), pretmp_140(23)>
  _45 = h_14(D)->frames.next[prephitmp_131];
  if (_45 == 0B)
    goto <bb 28>;
  else
    goto <bb 32>;

  <bb 28>:
  # bframes_3 = PHI <bframes_2(25), bframes_80(27)>
  # prephitmp_139 = PHI <prephitmp_133(25), prephitmp_141(27)>
  _47 = (unsigned int) prephitmp_139;
  _48 = _47 + 4294967292;
  if (_48 <= 1)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  x264_log (h_14(D), 1, "specified frame type is not compatible with max B-frames\n");
  pretmp_121 = prephitmp_114->i_type;
  pretmp_124 = (unsigned int) pretmp_121;
  pretmp_127 = pretmp_124 + 4294967292;

  <bb 30>:
  # bframes_4 = PHI <bframes_3(28), bframes_3(29), 0(24)>
  # prephitmp_123 = PHI <prephitmp_139(28), pretmp_121(29), pretmp_122(24)>
  # prephitmp_129 = PHI <_48(28), pretmp_127(29), pretmp_128(24)>
  _51 = prephitmp_123 == 0;
  _54 = prephitmp_129 <= 1;
  _55 = _51 | _54;
  if (_55 != 0)
    goto <bb 31>;
  else
    goto <bb 33>;

  <bb 31>:
  # prephitmp_105 = PHI <prephitmp_114(30)>
  prephitmp_105->i_type = 3;
  goto <bb 36>;

  <bb 32>:
  pretmp_117 = (unsigned int) prephitmp_141;
  pretmp_119 = pretmp_117 + 4294967292;

  <bb 33>:
  # bframes_86 = PHI <bframes_80(32), bframes_4(30)>
  # prephitmp_116 = PHI <prephitmp_141(32), prephitmp_123(30)>
  # prephitmp_120 = PHI <pretmp_119(32), prephitmp_129(30)>
  _58 = prephitmp_116 != 0;
  _69 = prephitmp_120 > 1;
  _36 = _58 & _69;
  if (_36 != 0)
    goto <bb 35>;
  else
    goto <bb 34>;

  <bb 34>:
  prephitmp_114->i_type = 5;
  bframes_62 = bframes_86 + 1;
  # DEBUG bframes => bframes_62
  pretmp_113 = h_14(D)->frames.next[bframes_62];
  goto <bb 13>;

  <bb 35>:

  <bb 36>:
  return;

}



;; Function x264_rc_analyse_slice (x264_rc_analyse_slice, funcdef_no=236, decl_uid=7983, cgraph_uid=236, symbol_order=305)


Analyzing loop at encoder/slicetype.c:657
encoder/slicetype.c:657:15: note: ===== analyze_loop_nest =====
encoder/slicetype.c:657:15: note: === vect_analyze_loop_form ===
encoder/slicetype.c:657:15: note: not vectorized: control flow in loop.
encoder/slicetype.c:657:15: note: bad loop form.
encoder/slicetype.c:640:5: note: vectorized 0 loops in function.
x264_rc_analyse_slice (struct x264_t * h)
{
  int cost;
  int b;
  int p1;
  struct x264_frame_t * frames[66];
  struct x264_mb_analysis_t a;
  struct x264_frame_t * pretmp_1;
  struct x264_frame_t * _10;
  int _11;
  unsigned int _12;
  unsigned int _13;
  struct x264_frame_t * pretmp_15;
  struct x264_frame_t * _16;
  int _17;
  unsigned int _18;
  unsigned int _19;
  struct x264_frame_t * _22;
  int _23;
  struct x264_frame_t * _24;
  int _25;
  int _26;
  int pretmp_28;
  int _29;
  int _30;
  int _38;
  struct x264_frame_t * _39;
  struct x264_frame_t * _42;
  int * _44;
  struct x264_frame_t * _46;
  int * _47;
  struct x264_sps_t * _50;
  int _51;
  long unsigned int _52;
  long unsigned int _53;
  int * _54;
  int * _55;
  struct x264_frame_t * _58;
  int _59;
  int _60;
  struct x264_frame_t * prephitmp_67;
  int prephitmp_69;
  int pretmp_70;
  unsigned int _72;
  unsigned int _73;
  int _74;
  int pretmp_75;
  int prephitmp_76;

  <bb 2>:
  frames = {};
  # DEBUG p0 => 0
  # DEBUG h => h_8(D)
  # DEBUG a => &a
  a.i_qp = 12;
  a.i_lambda = 1;
  _55 = &MEM[(int *)h_8(D) + 404B];
  # DEBUG D#83 => h_8(D)
  x264_mb_analyse_load_costs.isra.18 (_55, &a);
  _59 = h_8(D)->param.analyse.i_me_method;
  _60 = MIN_EXPR <_59, 1>;
  h_8(D)->mb.i_me_method = _60;
  h_8(D)->mb.i_subpel_refine = 4;
  h_8(D)->mb.b_chroma_me = 0;
  # DEBUG h => NULL
  # DEBUG a => NULL
  _10 = h_8(D)->fenc;
  _11 = _10->i_type;
  _12 = (unsigned int) _11;
  _13 = _12 + 4294967295;
  if (_13 <= 1)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  pretmp_15 = h_8(D)->fref0[0];
  goto <bb 15>;

  <bb 4>:
  if (_11 == 3)
    goto <bb 5>;
  else
    goto <bb 14>;

  <bb 5>:
  # DEBUG p1 => 0
  _58 = h_8(D)->frames.current[0];
  if (_58 != 0B)
    goto <bb 6>;
  else
    goto <bb 13>;

  <bb 6>:
  _74 = _58->i_type;
  _73 = (unsigned int) _74;
  _72 = _73 + 4294967292;
  if (_72 <= 1)
    goto <bb 7>;
  else
    goto <bb 13>;

  <bb 7>:

  <bb 8>:
  # p1_68 = PHI <0(7), p1_20(11)>
  # DEBUG p1 => p1_68
  p1_20 = p1_68 + 1;
  # DEBUG p1 => p1_20
  # DEBUG p1 => p1_20
  _16 = h_8(D)->frames.current[p1_20];
  if (_16 != 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  # p1_78 = PHI <p1_20(8)>
  pretmp_28 = p1_78 + 1;
  goto <bb 13>;

  <bb 10>:
  _17 = _16->i_type;
  _18 = (unsigned int) _17;
  _19 = _18 + 4294967292;
  if (_19 <= 1)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  goto <bb 8>;

  <bb 12>:
  # p1_77 = PHI <p1_20(10)>
  pretmp_75 = p1_77 + 1;

  <bb 13>:
  # prephitmp_76 = PHI <pretmp_28(9), pretmp_75(12), 1(6), 1(5)>
  # DEBUG D#977 => NULL
  # DEBUG p1 => D#977
  # DEBUG b => D#977
  pretmp_1 = h_8(D)->fref0[0];
  goto <bb 15>;

  <bb 14>:
  _22 = h_8(D)->fref1[0];
  _23 = _22->i_poc;
  _24 = h_8(D)->fref0[0];
  _25 = _24->i_poc;
  _26 = _23 - _25;
  b_27 = _26 / 2;
  # DEBUG p1 => b_27
  _29 = _10->i_poc;
  _30 = _23 - _29;
  b_31 = _30 / 2;
  # DEBUG b => b_31
  frames[b_27] = _22;
  pretmp_70 = b_27 - b_31;

  <bb 15>:
  # b_2 = PHI <0(3), prephitmp_76(13), b_27(14)>
  # b_3 = PHI <0(3), prephitmp_76(13), b_31(14)>
  # prephitmp_67 = PHI <pretmp_15(3), pretmp_1(13), _24(14)>
  # prephitmp_69 = PHI <0(3), 0(13), pretmp_70(14)>
  # DEBUG b => b_3
  # DEBUG p1 => b_2
  frames[0] = prephitmp_67;
  frames[b_3] = _10;
  cost_37 = x264_slicetype_frame_cost (h_8(D), &a, &frames, 0, b_2, b_3, 0);
  # DEBUG cost => cost_37
  _38 = h_8(D)->param.rc.i_aq_mode;
  if (_38 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  _39 = frames[b_3];
  cost_41 = _39->i_cost_est[b_3][prephitmp_69];
  # DEBUG cost => cost_41

  <bb 17>:
  # cost_4 = PHI <cost_37(15), cost_41(16)>
  # DEBUG cost => cost_4
  _42 = h_8(D)->fenc;
  _44 = _42->i_row_satds[b_3][prephitmp_69];
  _42->i_row_satd = _44;
  _46 = h_8(D)->fdec;
  _47 = _46->i_row_satds[b_3][prephitmp_69];
  _46->i_row_satd = _47;
  _46->i_satd = cost_4;
  _50 = h_8(D)->sps;
  _51 = _50->i_mb_height;
  _52 = (long unsigned int) _51;
  _53 = _52 * 4;
  _54 = _42->i_row_satd;
  # DEBUG __dest => _47
  # DEBUG __src => _54
  # DEBUG __len => _53
  __builtin_memcpy (_47, _54, _53);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  a ={v} {CLOBBER};
  frames ={v} {CLOBBER};
  return cost_4;

}


