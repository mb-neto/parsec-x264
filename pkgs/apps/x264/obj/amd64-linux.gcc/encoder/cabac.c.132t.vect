
;; Function x264_cabac_mb_ref (x264_cabac_mb_ref, funcdef_no=128, decl_uid=5918, cgraph_uid=128, symbol_order=171)


Analyzing loop at encoder/cabac.c:434
encoder/cabac.c:434:10: note: ===== analyze_loop_nest =====
encoder/cabac.c:434:10: note: === vect_analyze_loop_form ===
encoder/cabac.c:434:10: note: not vectorized: control flow in loop.
encoder/cabac.c:434:10: note: bad loop form.
encoder/cabac.c:421:13: note: vectorized 0 loops in function.
x264_cabac_mb_ref (struct x264_t * h, struct x264_cabac_t * cb, int i_list, int idx)
{
  int ctx;
  int i_ref;
  const int i8;
  int prephitmp_1;
  int pretmp_4;
  int prephitmp_5;
  int _9;
  signed char _12;
  int _13;
  signed char _14;
  signed char _15;
  signed char _18;
  _Bool _19;
  signed char _20;
  int _22;
  int prephitmp_28;

  <bb 2>:
  i8_8 = x264_scan8[idx_7(D)];
  # DEBUG i8 => i8_8
  _9 = i8_8 + -1;
  _12 = h_10(D)->mb.cache.ref[i_list_11(D)][_9];
  # DEBUG i_refa => (const int) _12
  _13 = i8_8 + -8;
  _14 = h_10(D)->mb.cache.ref[i_list_11(D)][_13];
  # DEBUG i_refb => (const int) _14
  _15 = h_10(D)->mb.cache.ref[i_list_11(D)][i8_8];
  i_ref_16 = (int) _15;
  # DEBUG i_ref => i_ref_16
  # DEBUG ctx => 0
  if (_12 > 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _18 = h_10(D)->mb.cache.skip[_9];
  _19 = _18 == 0;
  ctx_29 = (int) _19;

  <bb 4>:
  # ctx_2 = PHI <0(2), ctx_29(3)>
  # DEBUG ctx => ctx_2
  if (_14 > 0)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  _20 = h_10(D)->mb.cache.skip[_13];
  if (_20 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  ctx_21 = ctx_2 + 2;
  # DEBUG ctx => ctx_21

  <bb 7>:
  # ctx_17 = PHI <ctx_21(6), ctx_2(4), ctx_2(5)>
  # DEBUG ctx => ctx_17
  # DEBUG i_ref => i_ref_16
  if (i_ref_16 > 0)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  pretmp_4 = ctx_17 + 54;
  goto <bb 15>;

  <bb 9>:

  <bb 10>:
  # i_ref_32 = PHI <i_ref_16(9), i_ref_25(13)>
  # ctx_33 = PHI <ctx_17(9), ctx_3(13)>
  # DEBUG ctx => ctx_33
  # DEBUG i_ref => i_ref_32
  _22 = ctx_33 + 54;
  x264_cabac_encode_decision_asm (cb_23(D), _22, 1);
  if (ctx_33 <= 3)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:

  <bb 12>:
  # ctx_3 = PHI <4(10), 5(11)>
  # prephitmp_1 = PHI <58(10), 59(11)>
  # DEBUG ctx => ctx_3
  i_ref_25 = i_ref_32 + -1;
  # DEBUG i_ref => i_ref_25
  # DEBUG ctx => ctx_3
  # DEBUG i_ref => i_ref_25
  if (i_ref_25 > 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  goto <bb 10>;

  <bb 14>:
  # prephitmp_28 = PHI <prephitmp_1(12)>

  <bb 15>:
  # prephitmp_5 = PHI <prephitmp_28(14), pretmp_4(8)>
  x264_cabac_encode_decision_asm (cb_23(D), prephitmp_5, 0);
  return;

}



;; Function block_residual_write_cabac (block_residual_write_cabac, funcdef_no=133, decl_uid=6007, cgraph_uid=133, symbol_order=184)


Analyzing loop at encoder/cabac.c:782
encoder/cabac.c:782:5: note: ===== analyze_loop_nest =====
encoder/cabac.c:782:5: note: === vect_analyze_loop_form ===
encoder/cabac.c:782:5: note: ===== analyze_loop_nest_1 =====
encoder/cabac.c:782:5: note: === vect_analyze_loop_form ===
encoder/cabac.c:782:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [1, + , 1](no_overflow) < i_prefix_125 + -1
  bounds on difference of bases: 0 ... 12
  result:
    # of iterations (unsigned int) i_prefix_125 + 4294967294, bounded by 12
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:782:5: note: Symbolic number of iterations is (unsigned int) i_prefix_125 + 4294967295
encoder/cabac.c:782:5: note: not vectorized: inner-loop count not invariant.
encoder/cabac.c:782:5: note: bad loop form.

Analyzing loop at encoder/cabac.c:760
encoder/cabac.c:760:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:760:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:760:13: note: === get_loop_niters ===
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:760:13: note: Symbolic number of iterations is (unsigned int) i_prefix_125 + 4294967295
encoder/cabac.c:760:13: note: === vect_analyze_data_refs ===
encoder/cabac.c:760:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:760:13: note: bad data references.

Analyzing loop at encoder/cabac.c:730
encoder/cabac.c:730:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:730:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:730:9: note: not vectorized: control flow in loop.
encoder/cabac.c:730:9: note: bad loop form.

Analyzing loop at encoder/cabac.c:732
encoder/cabac.c:732:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:732:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:732:9: note: not vectorized: control flow in loop.
encoder/cabac.c:732:9: note: bad loop form.
encoder/cabac.c:681:13: note: vectorized 0 loops in function.
block_residual_write_cabac (struct x264_t * h, struct x264_cabac_t * cb, int i_ctxBlockCat, int i_idx, int16_t * l, int i_count)
{
  int i_mba_xy;
  int i_mbb_xy;
  int i_nza;
  int i_nzb;
  int D.7118;
  int i_idx;
  int ctx;
  int i_prefix;
  int ctx;
  int i;
  int node_ctx;
  int i_sigmap_size;
  int i_last;
  int i_coeff;
  int i_coeff_sign[64];
  int i_coeff_abs_m1[64];
  const uint8_t * significant_coeff_flag_offset;
  const int i_ctx_level;
  const int i_ctx_last;
  const int i_ctx_sig;
  int _27;
  short unsigned int _29;
  short unsigned int _32;
  short unsigned int _34;
  int _40;
  unsigned char _43;
  int (*<T1194>) (int16_t *) _49;
  int _53;
  int _54;
  long unsigned int _56;
  long unsigned int _57;
  int16_t * _58;
  short int _59;
  int _63;
  int _64;
  int _65;
  _Bool _69;
  int _70;
  const uint8_t * _73;
  unsigned char _74;
  int _75;
  int _76;
  _Bool _78;
  int _79;
  unsigned char _80;
  int _81;
  int _82;
  const uint8_t * _84;
  unsigned char _85;
  int _86;
  int _87;
  long unsigned int _90;
  long unsigned int _91;
  int16_t * _92;
  short int _93;
  int _94;
  int _95;
  int _96;
  _Bool _98;
  int _99;
  int _102;
  _Bool _104;
  int _105;
  int _106;
  int _108;
  long unsigned int _111;
  long unsigned int _112;
  int16_t * _113;
  short int _114;
  int _115;
  int _116;
  int _117;
  _Bool _119;
  int _120;
  int _124;
  int _129;
  int _135;
  unsigned char _137;
  unsigned char _140;
  int _142;
  unsigned int _146;
  unsigned int _147;
  int _148;
  int16_t * _150;
  long unsigned int _151;
  long unsigned int _152;
  int16_t * _153;
  short int _154;
  short int _155;
  unsigned int _157;
  int16_t * _159;
  long unsigned int _160;
  long unsigned int _161;
  int16_t * _162;
  short int _163;
  short int _164;
  int _166;
  unsigned int _168;
  unsigned int _169;
  int _170;
  int _172;
  unsigned int _174;
  unsigned int _175;
  int _178;
  int _179;
  unsigned char _180;
  int _184;
  unsigned char _185;
  unsigned int _188;
  unsigned int _189;
  int _190;
  int16_t * _192;
  long unsigned int _193;
  long unsigned int _194;
  int16_t * _195;
  short int _196;
  int _197;
  int _198;
  unsigned int _200;
  int16_t * _202;
  long unsigned int _203;
  long unsigned int _204;
  int16_t * _205;
  short int _206;
  int _207;
  int _208;
  int _210;
  unsigned int _212;
  unsigned int _213;
  int _214;
  int _216;
  unsigned int _218;
  unsigned int _219;
  int _222;
  int _223;
  unsigned char _224;
  int _228;
  unsigned char _229;
  int _231;
  unsigned int _232;
  _Bool _234;
  int _235;
  _Bool _239;
  int _240;
  int _243;
  int iftmp.14_245;
  int _246;
  _Bool _248;
  int _249;
  int _250;
  int pretmp_267;
  int pretmp_268;
  int pretmp_269;
  int pretmp_270;
  int prephitmp_272;
  int pretmp_273;
  int prephitmp_279;
  int pretmp_284;
  int pretmp_288;
  int prephitmp_289;
  int prephitmp_290;
  int pretmp_299;
  int pretmp_310;
  int pretmp_312;

  <bb 2>:
  _27 = h_26(D)->mb.b_interlaced;
  _29 = significant_coeff_flag_offset[_27][i_ctxBlockCat_28(D)];
  # DEBUG i_ctx_sig => (const int) _29
  _32 = last_coeff_flag_offset[_27][i_ctxBlockCat_28(D)];
  # DEBUG i_ctx_last => (const int) _32
  _34 = coeff_abs_level_m1_offset[i_ctxBlockCat_28(D)];
  # DEBUG i_ctx_level => (const int) _34
  # DEBUG D#19 => &significant_coeff_flag_offset_8x8[_27]
  # DEBUG significant_coeff_flag_offset => D#19
  # DEBUG i_coeff => 0
  # DEBUG node_ctx => 0
  if (i_count_38(D) != 64)
    goto <bb 3>;
  else
    goto <bb 48>;

  <bb 3>:
  # DEBUG h => h_26(D)
  # DEBUG i_cat => i_ctxBlockCat_28(D)
  # DEBUG i_idx => i_idx_39(D)
  # DEBUG i_mba_xy => -1
  # DEBUG i_mbb_xy => -1
  # DEBUG i_nza => 0
  # DEBUG i_nzb => 0
  switch (i_ctxBlockCat_28(D)) <default: <L46>, case 0: <L41>, case 1 ... 2: <L42>, case 3: <L43>, case 4: <L44>>

<L46>:
  pretmp_273 = x264_scan8[i_idx_39(D)];
  goto <bb 41> (<L45>);

<L41>:
  _146 = h_26(D)->mb.i_neighbour;
  _147 = _146 & 1;
  if (_147 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  _148 = h_26(D)->mb.i_mb_xy;
  i_mba_xy_149 = _148 + -1;
  # DEBUG i_mba_xy => i_mba_xy_149
  _150 = h_26(D)->mb.cbp;
  _151 = (long unsigned int) i_mba_xy_149;
  _152 = _151 * 2;
  _153 = _150 + _152;
  _154 = *_153;
  _155 = _154 & 256;
  i_nza_156 = (int) _155;
  # DEBUG i_nza => i_nza_156

  <bb 7>:
  # i_mba_xy_251 = PHI <-1(5), i_mba_xy_149(6)>
  # i_nza_252 = PHI <0(5), i_nza_156(6)>
  # DEBUG i_nza => i_nza_252
  # DEBUG i_mba_xy => i_mba_xy_251
  _157 = _146 & 2;
  if (_157 != 0)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  pretmp_284 = x264_scan8[i_idx_39(D)];
  goto <bb 41> (<L45>);

  <bb 9>:
  i_mbb_xy_158 = h_26(D)->mb.i_mb_top_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_158
  _159 = h_26(D)->mb.cbp;
  _160 = (long unsigned int) i_mbb_xy_158;
  _161 = _160 * 2;
  _162 = _159 + _161;
  _163 = *_162;
  _164 = _163 & 256;
  i_nzb_165 = (int) _164;
  # DEBUG i_nzb => i_nzb_165
  pretmp_267 = x264_scan8[i_idx_39(D)];
  goto <bb 41> (<L45>);

<L42>:
  _166 = i_idx_39(D) & -11;
  if (_166 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  i_mba_xy_167 = h_26(D)->mb.i_mb_xy;
  # DEBUG i_mba_xy => i_mba_xy_167
  goto <bb 14>;

  <bb 12>:
  _168 = h_26(D)->mb.i_neighbour;
  _169 = _168 & 1;
  if (_169 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _170 = h_26(D)->mb.i_mb_xy;
  i_mba_xy_171 = _170 + -1;
  # DEBUG i_mba_xy => i_mba_xy_171

  <bb 14>:
  # i_mba_xy_177 = PHI <i_mba_xy_167(11), -1(12), i_mba_xy_171(13)>
  # DEBUG i_mba_xy => i_mba_xy_177
  _172 = i_idx_39(D) & -6;
  if (_172 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  i_mbb_xy_173 = h_26(D)->mb.i_mb_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_173
  goto <bb 18>;

  <bb 16>:
  _174 = h_26(D)->mb.i_neighbour;
  _175 = _174 & 2;
  if (_175 != 0)
    goto <bb 17>;
  else
    goto <bb 83>;

  <bb 17>:
  i_mbb_xy_176 = h_26(D)->mb.i_mb_top_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_176

  <bb 18>:
  # i_mbb_xy_182 = PHI <i_mbb_xy_173(15), i_mbb_xy_176(17)>
  # DEBUG i_mbb_xy => i_mbb_xy_182
  if (i_mba_xy_177 >= 0)
    goto <bb 20>;
  else
    goto <bb 19>;

  <bb 19>:
  pretmp_288 = x264_scan8[i_idx_39(D)];
  goto <bb 21>;

  <bb 20>:
  # i_mbb_xy_257 = PHI <i_mbb_xy_182(18), -1(83)>
  _178 = x264_scan8[i_idx_39(D)];
  _179 = _178 + -1;
  _180 = h_26(D)->mb.cache.non_zero_count[_179];
  i_nza_181 = (int) _180;
  # DEBUG i_nza => i_nza_181

  <bb 21>:
  # i_nza_253 = PHI <0(19), i_nza_181(20)>
  # i_mbb_xy_304 = PHI <i_mbb_xy_182(19), i_mbb_xy_257(20)>
  # prephitmp_272 = PHI <pretmp_288(19), _178(20)>
  # DEBUG i_nza => i_nza_253
  if (i_mbb_xy_304 >= 0)
    goto <bb 22>;
  else
    goto <bb 41> (<L45>);

  <bb 22>:
  _184 = prephitmp_272 + -8;
  _185 = h_26(D)->mb.cache.non_zero_count[_184];
  i_nzb_186 = (int) _185;
  # DEBUG i_nzb => i_nzb_186
  goto <bb 41> (<L45>);

<L43>:
  i_idx_187 = i_idx_39(D) + -25;
  # DEBUG i_idx => i_idx_187
  _188 = h_26(D)->mb.i_neighbour;
  _189 = _188 & 1;
  if (_189 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  _190 = h_26(D)->mb.i_mb_xy;
  i_mba_xy_191 = _190 + -1;
  # DEBUG i_mba_xy => i_mba_xy_191
  _192 = h_26(D)->mb.cbp;
  _193 = (long unsigned int) i_mba_xy_191;
  _194 = _193 * 2;
  _195 = _192 + _194;
  _196 = *_195;
  _197 = (int) _196;
  _198 = 512 << i_idx_187;
  i_nza_199 = _197 & _198;
  # DEBUG i_nza => i_nza_199

  <bb 25>:
  # i_mba_xy_254 = PHI <-1(23), i_mba_xy_191(24)>
  # i_nza_255 = PHI <0(23), i_nza_199(24)>
  # DEBUG i_nza => i_nza_255
  # DEBUG i_mba_xy => i_mba_xy_254
  _200 = _188 & 2;
  if (_200 != 0)
    goto <bb 27>;
  else
    goto <bb 26>;

  <bb 26>:
  pretmp_312 = x264_scan8[i_idx_39(D)];
  goto <bb 41> (<L45>);

  <bb 27>:
  i_mbb_xy_201 = h_26(D)->mb.i_mb_top_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_201
  _202 = h_26(D)->mb.cbp;
  _203 = (long unsigned int) i_mbb_xy_201;
  _204 = _203 * 2;
  _205 = _202 + _204;
  _206 = *_205;
  _207 = (int) _206;
  _208 = 512 << i_idx_187;
  i_nzb_209 = _207 & _208;
  # DEBUG i_nzb => i_nzb_209
  pretmp_268 = x264_scan8[i_idx_39(D)];
  goto <bb 41> (<L45>);

<L44>:
  _210 = i_idx_39(D) & 1;
  if (_210 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  i_mba_xy_211 = h_26(D)->mb.i_mb_xy;
  # DEBUG i_mba_xy => i_mba_xy_211
  goto <bb 32>;

  <bb 30>:
  _212 = h_26(D)->mb.i_neighbour;
  _213 = _212 & 1;
  if (_213 != 0)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  _214 = h_26(D)->mb.i_mb_xy;
  i_mba_xy_215 = _214 + -1;
  # DEBUG i_mba_xy => i_mba_xy_215

  <bb 32>:
  # i_mba_xy_221 = PHI <i_mba_xy_211(29), -1(30), i_mba_xy_215(31)>
  # DEBUG i_mba_xy => i_mba_xy_221
  _216 = i_idx_39(D) & 2;
  if (_216 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 33>:
  i_mbb_xy_217 = h_26(D)->mb.i_mb_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_217
  goto <bb 36>;

  <bb 34>:
  _218 = h_26(D)->mb.i_neighbour;
  _219 = _218 & 2;
  if (_219 != 0)
    goto <bb 35>;
  else
    goto <bb 85>;

  <bb 35>:
  i_mbb_xy_220 = h_26(D)->mb.i_mb_top_xy;
  # DEBUG i_mbb_xy => i_mbb_xy_220

  <bb 36>:
  # i_mbb_xy_226 = PHI <i_mbb_xy_217(33), i_mbb_xy_220(35)>
  # DEBUG i_mbb_xy => i_mbb_xy_226
  if (i_mba_xy_221 >= 0)
    goto <bb 38>;
  else
    goto <bb 37>;

  <bb 37>:
  pretmp_269 = x264_scan8[i_idx_39(D)];
  goto <bb 39>;

  <bb 38>:
  # i_mbb_xy_21 = PHI <i_mbb_xy_226(36), -1(85)>
  _222 = x264_scan8[i_idx_39(D)];
  _223 = _222 + -1;
  _224 = h_26(D)->mb.cache.non_zero_count[_223];
  i_nza_225 = (int) _224;
  # DEBUG i_nza => i_nza_225

  <bb 39>:
  # i_nza_256 = PHI <0(37), i_nza_225(38)>
  # i_mbb_xy_62 = PHI <i_mbb_xy_226(37), i_mbb_xy_21(38)>
  # prephitmp_289 = PHI <pretmp_269(37), _222(38)>
  # DEBUG i_nza => i_nza_256
  if (i_mbb_xy_62 >= 0)
    goto <bb 40>;
  else
    goto <bb 41> (<L45>);

  <bb 40>:
  _228 = prephitmp_289 + -8;
  _229 = h_26(D)->mb.cache.non_zero_count[_228];
  i_nzb_230 = (int) _229;
  # DEBUG i_nzb => i_nzb_230

  # i_mba_xy_233 = PHI <-1(4), i_mba_xy_251(8), i_mba_xy_251(9), i_mba_xy_177(21), i_mba_xy_177(22), i_mba_xy_254(26), i_mba_xy_254(27), i_mba_xy_221(39), i_mba_xy_221(40), i_mba_xy_177(84), i_mba_xy_221(86)>
  # i_mbb_xy_238 = PHI <-1(4), -1(8), i_mbb_xy_158(9), i_mbb_xy_304(21), i_mbb_xy_304(22), -1(26), i_mbb_xy_201(27), i_mbb_xy_62(39), i_mbb_xy_62(40), -1(84), -1(86)>
  # i_nza_236 = PHI <0(4), i_nza_252(8), i_nza_252(9), i_nza_253(21), i_nza_253(22), i_nza_255(26), i_nza_255(27), i_nza_256(39), i_nza_256(40), 0(84), 0(86)>
  # i_nzb_241 = PHI <0(4), 0(8), i_nzb_165(9), 0(21), i_nzb_186(22), 0(26), i_nzb_209(27), 0(39), i_nzb_230(40), 0(84), 0(86)>
  # prephitmp_290 = PHI <pretmp_273(4), pretmp_284(8), pretmp_267(9), prephitmp_272(21), prephitmp_272(22), pretmp_312(26), pretmp_268(27), prephitmp_289(39), prephitmp_289(40), pretmp_310(84), pretmp_270(86)>
<L45>:
  # DEBUG i_nzb => i_nzb_241
  # DEBUG i_nza => i_nza_236
  # DEBUG i_mbb_xy => i_mbb_xy_238
  # DEBUG i_mba_xy => i_mba_xy_233
  _231 = h_26(D)->mb.i_type;
  _232 = (unsigned int) _231;
  if (_232 <= 3)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  _234 = i_mba_xy_233 < 0;
  _235 = (int) _234;
  i_nza_237 = _235 | i_nza_236;
  # DEBUG i_nza => i_nza_237
  _239 = i_mbb_xy_238 < 0;
  _240 = (int) _239;
  i_nzb_242 = _240 | i_nzb_241;
  # DEBUG i_nzb => i_nzb_242

  <bb 43>:
  # i_nza_247 = PHI <i_nza_236(41), i_nza_237(42)>
  # i_nzb_244 = PHI <i_nzb_241(41), i_nzb_242(42)>
  # DEBUG i_nzb => i_nzb_244
  # DEBUG i_nza => i_nza_247
  _243 = i_ctxBlockCat_28(D) * 4;
  if (i_nzb_244 != 0)
    goto <bb 45>;
  else
    goto <bb 44>;

  <bb 44>:

  <bb 45>:
  # iftmp.14_245 = PHI <2(43), 0(44)>
  _246 = _243 + iftmp.14_245;
  _248 = i_nza_247 != 0;
  _249 = (int) _248;
  _250 = _246 + _249;
  # DEBUG h => NULL
  # DEBUG i_cat => NULL
  # DEBUG i_idx => NULL
  # DEBUG i_nzb => NULL
  # DEBUG i_nza => NULL
  # DEBUG i_mbb_xy => NULL
  # DEBUG i_mba_xy => NULL
  ctx_41 = _250 + 85;
  # DEBUG ctx => ctx_41
  _43 = h_26(D)->mb.cache.non_zero_count[prephitmp_290];
  if (_43 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:
  x264_cabac_encode_decision_asm (cb_44(D), ctx_41, 1);
  goto <bb 48>;

  <bb 47>:
  x264_cabac_encode_decision_asm (cb_44(D), ctx_41, 0);
  i_coeff_abs_m1 ={v} {CLOBBER};
  i_coeff_sign ={v} {CLOBBER};
  goto <bb 81>;

  <bb 48>:
  i_ctx_sig_30 = (const int) _29;
  i_ctx_last_33 = (const int) _32;
  _49 = h_26(D)->quantf.coeff_last[i_ctxBlockCat_28(D)];
  i_last_52 = _49 (l_50(D));
  # DEBUG i_last => i_last_52
  _53 = i_count_38(D) + -1;
  _54 = i_last_52 + 1;
  i_sigmap_size_55 = MIN_EXPR <_53, _54>;
  # DEBUG i_sigmap_size => i_sigmap_size_55
  if (i_ctxBlockCat_28(D) == 5)
    goto <bb 50>;
  else
    goto <bb 49>;

  <bb 49>:
  # DEBUG i => 0
  # DEBUG i_coeff => 0
  if (i_sigmap_size_55 > 0)
    goto <bb 58>;
  else
    goto <bb 65>;

  <bb 50>:
  # DEBUG i => 0
  # DEBUG i_coeff => 0
  if (i_sigmap_size_55 > 0)
    goto <bb 51>;
  else
    goto <bb 65>;

  <bb 51>:
  significant_coeff_flag_offset_37 = &significant_coeff_flag_offset_8x8[_27];

  <bb 52>:
  # i_coeff_263 = PHI <0(51), i_coeff_1(57)>
  # i_262 = PHI <0(51), i_89(57)>
  # DEBUG i => i_262
  # DEBUG i_coeff => i_coeff_263
  _56 = (long unsigned int) i_262;
  _57 = _56 * 2;
  _58 = l_50(D) + _57;
  _59 = *_58;
  if (_59 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  _63 = (int) _59;
  _64 = ABS_EXPR <_63>;
  _65 = _64 + -1;
  i_coeff_abs_m1[i_coeff_263] = _65;
  _69 = _59 < 0;
  _70 = (int) _69;
  i_coeff_sign[i_coeff_263] = _70;
  i_coeff_72 = i_coeff_263 + 1;
  # DEBUG i_coeff => i_coeff_72
  _73 = significant_coeff_flag_offset_37 + _56;
  _74 = *_73;
  _75 = (int) _74;
  _76 = i_ctx_sig_30 + _75;
  x264_cabac_encode_decision_asm (cb_44(D), _76, 1);
  _78 = i_last_52 == i_262;
  _79 = (int) _78;
  _80 = last_coeff_flag_offset_8x8[i_262];
  _81 = (int) _80;
  _82 = i_ctx_last_33 + _81;
  x264_cabac_encode_decision_asm (cb_44(D), _82, _79);
  goto <bb 55>;

  <bb 54>:
  _84 = significant_coeff_flag_offset_37 + _56;
  _85 = *_84;
  _86 = (int) _85;
  _87 = i_ctx_sig_30 + _86;
  x264_cabac_encode_decision_asm (cb_44(D), _87, 0);

  <bb 55>:
  # i_coeff_1 = PHI <i_coeff_72(53), i_coeff_263(54)>
  # DEBUG i_coeff => i_coeff_1
  i_89 = i_262 + 1;
  # DEBUG i => i_89
  # DEBUG i => i_89
  # DEBUG i_coeff => i_coeff_1
  if (i_sigmap_size_55 > i_89)
    goto <bb 57>;
  else
    goto <bb 56>;

  <bb 56>:
  # i_coeff_294 = PHI <i_coeff_1(55)>
  goto <bb 65>;

  <bb 57>:
  goto <bb 52>;

  <bb 58>:

  <bb 59>:
  # i_coeff_305 = PHI <0(58), i_coeff_3(64)>
  # i_261 = PHI <0(58), i_110(64)>
  # DEBUG i => i_261
  # DEBUG i_coeff => i_coeff_305
  _90 = (long unsigned int) i_261;
  _91 = _90 * 2;
  _92 = l_50(D) + _91;
  _93 = *_92;
  if (_93 != 0)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 60>:
  _94 = (int) _93;
  _95 = ABS_EXPR <_94>;
  _96 = _95 + -1;
  i_coeff_abs_m1[i_coeff_305] = _96;
  _98 = _93 < 0;
  _99 = (int) _98;
  i_coeff_sign[i_coeff_305] = _99;
  i_coeff_101 = i_coeff_305 + 1;
  # DEBUG i_coeff => i_coeff_101
  _102 = i_ctx_sig_30 + i_261;
  x264_cabac_encode_decision_asm (cb_44(D), _102, 1);
  _104 = i_last_52 == i_261;
  _105 = (int) _104;
  _106 = i_ctx_last_33 + i_261;
  x264_cabac_encode_decision_asm (cb_44(D), _106, _105);
  goto <bb 62>;

  <bb 61>:
  _108 = i_ctx_sig_30 + i_261;
  x264_cabac_encode_decision_asm (cb_44(D), _108, 0);

  <bb 62>:
  # i_coeff_3 = PHI <i_coeff_101(60), i_coeff_305(61)>
  # DEBUG i_coeff => i_coeff_3
  i_110 = i_261 + 1;
  # DEBUG i => i_110
  # DEBUG i => i_110
  # DEBUG i_coeff => i_coeff_3
  if (i_sigmap_size_55 > i_110)
    goto <bb 64>;
  else
    goto <bb 63>;

  <bb 63>:
  # i_coeff_287 = PHI <i_coeff_3(62)>
  goto <bb 65>;

  <bb 64>:
  goto <bb 59>;

  <bb 65>:
  # i_coeff_5 = PHI <i_coeff_294(56), i_coeff_287(63), 0(50), 0(49)>
  # i_11 = PHI <i_sigmap_size_55(56), i_sigmap_size_55(63), 0(50), 0(49)>
  # DEBUG i => i_11
  # DEBUG i_coeff => i_coeff_5
  if (i_11 == i_last_52)
    goto <bb 66>;
  else
    goto <bb 67>;

  <bb 66>:
  _111 = (long unsigned int) i_11;
  _112 = _111 * 2;
  _113 = l_50(D) + _112;
  _114 = *_113;
  _115 = (int) _114;
  _116 = ABS_EXPR <_115>;
  _117 = _116 + -1;
  i_coeff_abs_m1[i_coeff_5] = _117;
  _119 = _114 < 0;
  _120 = (int) _119;
  i_coeff_sign[i_coeff_5] = _120;
  i_coeff_122 = i_coeff_5 + 1;
  # DEBUG i_coeff => i_coeff_122

  <bb 67>:
  # i_coeff_68 = PHI <i_coeff_122(66), i_coeff_5(65)>
  i_ctx_level_35 = (const int) _34;

  <bb 68>:
  # i_coeff_6 = PHI <i_coeff_68(67), i_coeff_123(79)>
  # node_ctx_7 = PHI <0(67), node_ctx_8(79)>
  # prephitmp_279 = PHI <1(67), pretmp_299(79)>
  # DEBUG node_ctx => node_ctx_7
  # DEBUG i_coeff => i_coeff_6
  i_coeff_123 = i_coeff_6 + -1;
  # DEBUG i_coeff => i_coeff_123
  _124 = i_coeff_abs_m1[i_coeff_123];
  i_prefix_125 = MIN_EXPR <_124, 14>;
  # DEBUG i_prefix => i_prefix_125
  ctx_127 = i_ctx_level_35 + prephitmp_279;
  # DEBUG ctx => ctx_127
  if (i_prefix_125 != 0)
    goto <bb 69>;
  else
    goto <bb 77>;

  <bb 69>:
  x264_cabac_encode_decision_asm (cb_44(D), ctx_127, 1);
  _129 = coeff_abs_levelgt1_ctx[node_ctx_7];
  ctx_130 = i_ctx_level_35 + _129;
  # DEBUG ctx => ctx_130
  # DEBUG i => 0
  # DEBUG i => 0
  _40 = i_prefix_125 + -1;
  if (_40 > 0)
    goto <bb 71>;
  else
    goto <bb 70>;

  <bb 70>:
  if (i_prefix_125 != 14)
    goto <bb 75>;
  else
    goto <bb 82>;

  <bb 71>:

  <bb 72>:
  # i_301 = PHI <0(71), i_133(74)>
  # DEBUG i => i_301
  x264_cabac_encode_decision_asm (cb_44(D), ctx_130, 1);
  i_133 = i_301 + 1;
  # DEBUG i => i_133
  # DEBUG i => i_133
  if (_40 > i_133)
    goto <bb 74>;
  else
    goto <bb 73>;

  <bb 73>:
  goto <bb 70>;

  <bb 74>:
  goto <bb 72>;

  <bb 75>:
  x264_cabac_encode_decision_asm (cb_44(D), ctx_130, 0);

  <bb 76>:
  _137 = coeff_abs_level_transition[1][node_ctx_7];
  node_ctx_138 = (int) _137;
  # DEBUG node_ctx => node_ctx_138
  goto <bb 78>;

  <bb 77>:
  x264_cabac_encode_decision_asm (cb_44(D), ctx_127, 0);
  _140 = coeff_abs_level_transition[0][node_ctx_7];
  node_ctx_141 = (int) _140;
  # DEBUG node_ctx => node_ctx_141

  <bb 78>:
  # node_ctx_8 = PHI <node_ctx_138(76), node_ctx_141(77)>
  # DEBUG node_ctx => node_ctx_8
  _142 = i_coeff_sign[i_coeff_123];
  x264_cabac_encode_bypass (cb_44(D), _142);
  if (i_coeff_123 > 0)
    goto <bb 79>;
  else
    goto <bb 80>;

  <bb 79>:
  pretmp_299 = coeff_abs_level1_ctx[node_ctx_8];
  goto <bb 68>;

  <bb 80>:
  i_coeff_abs_m1 ={v} {CLOBBER};
  i_coeff_sign ={v} {CLOBBER};

  <bb 81>:
  return;

  <bb 82>:
  _135 = _124 + -14;
  x264_cabac_encode_ue_bypass (cb_44(D), 0, _135);
  goto <bb 76>;

  <bb 83>:
  # DEBUG i_mbb_xy => -1
  if (i_mba_xy_177 >= 0)
    goto <bb 20>;
  else
    goto <bb 84>;

  <bb 84>:
  pretmp_310 = x264_scan8[i_idx_39(D)];
  goto <bb 41> (<L45>);

  <bb 85>:
  # DEBUG i_mbb_xy => -1
  if (i_mba_xy_221 >= 0)
    goto <bb 38>;
  else
    goto <bb 86>;

  <bb 86>:
  pretmp_270 = x264_scan8[i_idx_39(D)];
  goto <bb 41> (<L45>);

}



;; Function x264_cabac_mb_mvd (x264_cabac_mb_mvd, funcdef_no=130, decl_uid=5954, cgraph_uid=130, symbol_order=173)


Analyzing loop at ./common/macroblock.h:373
./common/macroblock.h:373:9: note: ===== analyze_loop_nest =====
./common/macroblock.h:373:9: note: === vect_analyze_loop_form ===
./common/macroblock.h:373:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < height_27(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) height_27(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
./common/macroblock.h:373:9: note: Symbolic number of iterations is (unsigned int) height_27(D)
./common/macroblock.h:373:9: note: === vect_analyze_data_refs ===
Creating dr for *_39
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
	base_address: h_2(D) + ((sizetype) (_24 * 8 + _26) + (sizetype) i_list_3(D) * 48) * 4
	offset from base address: 0
	constant offset from base address: 19632
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)h_2(D) + ((sizetype) (_24 * 8 + _26) + (sizetype) i_list_3(D) * 48) * 4]
	Access function 0: {19632B, +, 32}_1
./common/macroblock.h:373:9: note: got vectype for stmt: *_39 = _59;
vector(4) unsigned int
./common/macroblock.h:373:9: note: === vect_analyze_scalar_cycles ===
./common/macroblock.h:373:9: note: Analyze phi: .MEM_177 = PHI <.MEM_144(30), .MEM_66(32)>

./common/macroblock.h:373:9: note: Analyze phi: dy_165 = PHI <0(30), dy_41(32)>

./common/macroblock.h:373:9: note: Access function of PHI: {0, +, 1}_1
./common/macroblock.h:373:9: note: step: 1,  init: 0
./common/macroblock.h:373:9: note: Detected induction.
./common/macroblock.h:373:9: note: === vect_pattern_recog ===
./common/macroblock.h:373:9: note: vect_is_simple_use: operand dy_165
./common/macroblock.h:373:9: note: def_stmt: dy_165 = PHI <0(30), dy_41(32)>
./common/macroblock.h:373:9: note: type of def: 4.
./common/macroblock.h:373:9: note: vect_is_simple_use: operand _37
./common/macroblock.h:373:9: note: def_stmt: _37 = (long unsigned int) _34;
./common/macroblock.h:373:9: note: type of def: 3.
./common/macroblock.h:373:9: note: vect_is_simple_use: operand _34
./common/macroblock.h:373:9: note: def_stmt: _34 = dy_165 * 8;
./common/macroblock.h:373:9: note: type of def: 3.
./common/macroblock.h:373:9: note: vect_is_simple_use: operand 4
./common/macroblock.h:373:9: note: === vect_analyze_data_ref_accesses ===
./common/macroblock.h:373:9: note: not consecutive access *_39 = _59;

./common/macroblock.h:373:9: note: not vectorized: complicated access pattern.
./common/macroblock.h:373:9: note: bad data access.

Analyzing loop at ./common/macroblock.h:380
./common/macroblock.h:380:9: note: ===== analyze_loop_nest =====
./common/macroblock.h:380:9: note: === vect_analyze_loop_form ===
./common/macroblock.h:380:9: note: ===== analyze_loop_nest_1 =====
./common/macroblock.h:380:9: note: === vect_analyze_loop_form ===
./common/macroblock.h:380:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [1, + , 1](no_overflow) < pretmp_236
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) pretmp_236 + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
./common/macroblock.h:380:9: note: Symbolic number of iterations is (unsigned int) pretmp_236
./common/macroblock.h:380:9: note: not vectorized: control flow in loop.
./common/macroblock.h:380:9: note: bad loop form.

Analyzing loop at ./common/macroblock.h:381
./common/macroblock.h:381:13: note: ===== analyze_loop_nest =====
./common/macroblock.h:381:13: note: === vect_analyze_loop_form ===
./common/macroblock.h:381:13: note: === get_loop_niters ===
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
./common/macroblock.h:381:13: note: Symbolic number of iterations is (unsigned int) pretmp_236
./common/macroblock.h:381:13: note: === vect_analyze_data_refs ===
Creating dr for *_51
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:749, generic-match.c:1467
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:749, generic-match.c:1467
	base_address: (uint64_t *) (h_2(D) + ((sizetype) (_24 * 8 + _26) + (sizetype) i_list_3(D) * 48) * 4) + (sizetype) ((long unsigned int) (dy_60 * 4) * 8)
	offset from base address: 0
	constant offset from base address: 19632
	step: 8
	aligned to: 128
	base_object: *(uint64_t *) (h_2(D) + ((sizetype) (_24 * 8 + _26) + (sizetype) i_list_3(D) * 48) * 4) + (sizetype) ((long unsigned int) (dy_60 * 4) * 8)
	Access function 0: {19632B, +, 8}_4
./common/macroblock.h:381:13: note: got vectype for stmt: *_51 = val64_44;
vector(2) long unsigned int
./common/macroblock.h:381:13: note: === vect_analyze_scalar_cycles ===
./common/macroblock.h:381:13: note: Analyze phi: dx_163 = PHI <0(42), dx_52(35)>

./common/macroblock.h:381:13: note: Access function of PHI: {0, +, 1}_4
./common/macroblock.h:381:13: note: step: 1,  init: 0
./common/macroblock.h:381:13: note: Detected induction.
./common/macroblock.h:381:13: note: Analyze phi: .MEM_13 = PHI <.MEM_134(42), .MEM_65(35)>

./common/macroblock.h:381:13: note: === vect_pattern_recog ===
./common/macroblock.h:381:13: note: vect_is_simple_use: operand _49
./common/macroblock.h:381:13: note: def_stmt: _49 = (long unsigned int) _48;
./common/macroblock.h:381:13: note: type of def: 3.
./common/macroblock.h:381:13: note: vect_is_simple_use: operand _48
./common/macroblock.h:381:13: note: def_stmt: _48 = dx_163 + pretmp_237;
./common/macroblock.h:381:13: note: type of def: 3.
./common/macroblock.h:381:13: note: vect_is_simple_use: operand 8
./common/macroblock.h:381:13: note: === vect_analyze_data_ref_accesses ===
./common/macroblock.h:381:13: note: === vect_mark_stmts_to_be_vectorized ===
./common/macroblock.h:381:13: note: init: phi relevant? dx_163 = PHI <0(42), dx_52(35)>
./common/macroblock.h:381:13: note: init: phi relevant? .MEM_13 = PHI <.MEM_134(42), .MEM_65(35)>
./common/macroblock.h:381:13: note: init: stmt relevant? # DEBUG dx => dx_163
./common/macroblock.h:381:13: note: init: stmt relevant? _48 = dx_163 + pretmp_237;
./common/macroblock.h:381:13: note: init: stmt relevant? _49 = (long unsigned int) _48;
./common/macroblock.h:381:13: note: init: stmt relevant? _50 = _49 * 8;
./common/macroblock.h:381:13: note: init: stmt relevant? _51 = _32 + _50;
./common/macroblock.h:381:13: note: init: stmt relevant? *_51 = val64_44;
./common/macroblock.h:381:13: note: vec_stmt_relevant_p: stmt has vdefs.
./common/macroblock.h:381:13: note: mark relevant 4, live 0.
./common/macroblock.h:381:13: note: init: stmt relevant? dx_52 = dx_163 + 1;
./common/macroblock.h:381:13: note: init: stmt relevant? # DEBUG dx => dx_52
./common/macroblock.h:381:13: note: init: stmt relevant? # DEBUG dx => dx_52
./common/macroblock.h:381:13: note: init: stmt relevant? if (dx_52 < pretmp_236)
./common/macroblock.h:381:13: note: worklist: examine stmt: *_51 = val64_44;
./common/macroblock.h:381:13: note: vect_is_simple_use: operand val64_44
./common/macroblock.h:381:13: note: def_stmt: val64_44 = _42 + _43;
./common/macroblock.h:381:13: note: type of def: 2.
./common/macroblock.h:381:13: note: def_stmt is out of loop.
./common/macroblock.h:381:13: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: *_51 = val64_44;
  stmt_b: *_51 = val64_44;
(analyze_overlapping_iterations 
  (chrec_a = {19632B, +, 8}_4)
  (chrec_b = {19632B, +, 8}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
./common/macroblock.h:381:13: note: === vect_determine_vectorization_factor ===
./common/macroblock.h:381:13: note: ==> examining phi: dx_163 = PHI <0(42), dx_52(35)>

./common/macroblock.h:381:13: note: ==> examining phi: .MEM_13 = PHI <.MEM_134(42), .MEM_65(35)>

./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_163

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: _48 = dx_163 + pretmp_237;

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: _49 = (long unsigned int) _48;

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: _50 = _49 * 8;

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: _51 = _32 + _50;

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: *_51 = val64_44;

./common/macroblock.h:381:13: note: get vectype for scalar type:  uint64_t
./common/macroblock.h:381:13: note: vectype: vector(2) long unsigned int
./common/macroblock.h:381:13: note: nunits = 2
./common/macroblock.h:381:13: note: ==> examining statement: dx_52 = dx_163 + 1;

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_52

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_52

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: ==> examining statement: if (dx_52 < pretmp_236)

./common/macroblock.h:381:13: note: skip.
./common/macroblock.h:381:13: note: vectorization factor = 2
./common/macroblock.h:381:13: note: === vect_analyze_data_refs_alignment ===
./common/macroblock.h:381:13: note: vect_compute_data_ref_alignment:
./common/macroblock.h:381:13: note: can't force alignment of ref: *_51
./common/macroblock.h:381:13: note: === vect_prune_runtime_alias_test_list ===
./common/macroblock.h:381:13: note: === vect_enhance_data_refs_alignment ===
./common/macroblock.h:381:13: note: Unknown misalignment, is_packed = 0
./common/macroblock.h:381:13: note: vect_can_advance_ivs_p:
./common/macroblock.h:381:13: note: Analyze phi: dx_163 = PHI <0(42), dx_52(35)>

./common/macroblock.h:381:13: note: Analyze phi: .MEM_13 = PHI <.MEM_134(42), .MEM_65(35)>

./common/macroblock.h:381:13: note: virtual phi. skip.
./common/macroblock.h:381:13: note: Disable peeling, max peels reached: 1
./common/macroblock.h:381:13: note: Vectorizing an unaligned access.
./common/macroblock.h:381:13: note: === vect_analyze_slp ===
./common/macroblock.h:381:13: note: === vect_make_slp_decision ===
./common/macroblock.h:381:13: note: === vect_detect_hybrid_slp ===
./common/macroblock.h:381:13: note: === vect_analyze_loop_operations ===
./common/macroblock.h:381:13: note: examining phi: dx_163 = PHI <0(42), dx_52(35)>

./common/macroblock.h:381:13: note: examining phi: .MEM_13 = PHI <.MEM_134(42), .MEM_65(35)>

./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_163
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: _48 = dx_163 + pretmp_237;
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: _49 = (long unsigned int) _48;
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: _50 = _49 * 8;
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: _51 = _32 + _50;
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: *_51 = val64_44;
./common/macroblock.h:381:13: note: vect_is_simple_use: operand val64_44
./common/macroblock.h:381:13: note: def_stmt: val64_44 = _42 + _43;
./common/macroblock.h:381:13: note: type of def: 2.
./common/macroblock.h:381:13: note: vect_model_store_cost: unaligned supported by hardware.
./common/macroblock.h:381:13: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 1 .
./common/macroblock.h:381:13: note: ==> examining statement: dx_52 = dx_163 + 1;
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_52
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: # DEBUG dx => dx_52
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: ==> examining statement: if (dx_52 < pretmp_236)
./common/macroblock.h:381:13: note: irrelevant.
./common/macroblock.h:381:13: note: === vect_update_slp_costs_according_to_vf ===
./common/macroblock.h:381:13: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
./common/macroblock.h:381:13: note: Cost model analysis: 
  Vector inside of loop cost: 2
  Vector prologue cost: 7
  Vector epilogue cost: 1
  Scalar iteration cost: 1
  Scalar outside cost: 6
  Vector outside cost: 8
  prologue iterations: 0
  epilogue iterations: 1
./common/macroblock.h:381:13: note: cost model: the vector iteration cost = 2 divided by the scalar iteration cost = 1 is greater or equal to the vectorization factor = 2.
./common/macroblock.h:381:13: note: not vectorized: vectorization not profitable.
./common/macroblock.h:381:13: note: not vectorized: vector version will never be profitable.
./common/macroblock.h:381:13: note: bad operation or unsupported loop bound.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [2, + , 1](no_overflow) < i_abs_77
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_77 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_77 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_175]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_5
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 6
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_174]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_6
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 7
  exit condition [2, + , 1](no_overflow) < i_abs_114
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_114 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_114 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_183]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_7
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_176]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_8
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.
encoder/cabac.c:497:20: note: vectorized 0 loops in function.
x264_cabac_mb_mvd (struct x264_t * h, struct x264_cabac_t * cb, int i_list, int idx, int width, int height)
{
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int _7;
  short int _8;
  int _9;
  short int _10;
  int _11;
  short int _14;
  int _15;
  short int _16;
  int _17;
  int _22;
  unsigned char _23;
  int _24;
  unsigned char _25;
  int _26;
  int _28;
  int _30;
  int _31;
  int16_t[2] * _32;
  int _34;
  long unsigned int _37;
  long unsigned int _38;
  uint32_t * _39;
  long unsigned int _42;
  long unsigned int _43;
  int _48;
  long unsigned int _49;
  long unsigned int _50;
  uint64_t * _51;
  int _57;
  int _58;
  unsigned int _59;
  short int _69;
  int _70;
  int _71;
  short int _73;
  int _74;
  int _75;
  _Bool _78;
  int _79;
  _Bool _80;
  int _81;
  int _84;
  int _85;
  unsigned char _87;
  int _88;
  int _89;
  unsigned char _91;
  int _92;
  int _93;
  _Bool _94;
  int _95;
  int _96;
  unsigned char _98;
  int _99;
  int _100;
  int _102;
  _Bool _103;
  int _104;
  int _105;
  short int _106;
  int _107;
  int _108;
  int _109;
  short int _110;
  int _111;
  int _112;
  _Bool _115;
  int _116;
  _Bool _117;
  int _118;
  int _121;
  int _122;
  unsigned char _124;
  int _125;
  int _126;
  unsigned char _128;
  int _129;
  int _130;
  _Bool _131;
  int _132;
  int _133;
  unsigned char _135;
  int _136;
  int _137;
  int _139;
  _Bool _140;
  int _141;
  unsigned int ivtmp_226;
  int pretmp_236;
  int pretmp_237;
  unsigned int ivtmp_248;
  unsigned int ivtmp_258;
  unsigned int ivtmp_265;

  <bb 2>:
  x264_mb_predict_mv (h_2(D), i_list_3(D), idx_4(D), width_5(D), &mvp);
  _7 = x264_scan8[idx_4(D)];
  _8 = h_2(D)->mb.cache.mv[i_list_3(D)][_7][0];
  _9 = (int) _8;
  _10 = mvp[0];
  _11 = (int) _10;
  mdx_12 = _9 - _11;
  # DEBUG mdx => mdx_12
  _14 = h_2(D)->mb.cache.mv[i_list_3(D)][_7][1];
  _15 = (int) _14;
  _16 = mvp[1];
  _17 = (int) _16;
  mdy_18 = _15 - _17;
  # DEBUG mdy => mdy_18
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_19(D)
  # DEBUG i_list => i_list_3(D)
  # DEBUG idx => idx_4(D)
  # DEBUG l => 0
  # DEBUG mvd => mdx_12
  _105 = _7 + -1;
  _106 = h_2(D)->mb.cache.mvd[i_list_3(D)][_105][0];
  _107 = (int) _106;
  _108 = ABS_EXPR <_107>;
  _109 = _7 + -8;
  _110 = h_2(D)->mb.cache.mvd[i_list_3(D)][_109][0];
  _111 = (int) _110;
  _112 = ABS_EXPR <_111>;
  amvd_113 = _108 + _112;
  # DEBUG amvd => amvd_113
  i_abs_114 = ABS_EXPR <mdx_12>;
  # DEBUG i_abs => i_abs_114
  # DEBUG ctxbase => 40
  _115 = amvd_113 > 2;
  _116 = (int) _115;
  _117 = amvd_113 > 32;
  _118 = (int) _117;
  ctx_119 = _116 + _118;
  # DEBUG ctx => ctx_119
  if (i_abs_114 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _121 = ctx_119 + 40;
  x264_cabac_encode_decision_asm (cb_19(D), _121, 0);
  goto <bb 15>;

  <bb 4>:
  if (i_abs_114 <= 8)
    goto <bb 5>;
  else
    goto <bb 11>;

  <bb 5>:
  _122 = ctx_119 + 40;
  x264_cabac_encode_decision_asm (cb_19(D), _122, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_114 > 1)
    goto <bb 6>;
  else
    goto <bb 8>;

  <bb 6>:
  goto <bb 9>;

  <bb 7>:

  <bb 8>:
  _128 = ctxes[i_abs_114];
  _129 = (int) _128;
  _130 = _129 + 40;
  x264_cabac_encode_decision_asm (cb_19(D), _130, 0);
  _131 = mdx_12 < 0;
  _132 = (int) _131;
  x264_cabac_encode_bypass (cb_19(D), _132);
  goto <bb 15>;

  <bb 9>:
  # i_183 = PHI <1(6), i_127(10)>
  # DEBUG i => i_183
  _124 = ctxes[i_183];
  _125 = (int) _124;
  _126 = _125 + 40;
  x264_cabac_encode_decision_asm (cb_19(D), _126, 1);
  i_127 = i_183 + 1;
  # DEBUG i => i_127
  # DEBUG i => i_127
  if (i_abs_114 > i_127)
    goto <bb 10>;
  else
    goto <bb 7>;

  <bb 10>:
  goto <bb 9>;

  <bb 11>:
  _133 = ctx_119 + 40;
  x264_cabac_encode_decision_asm (cb_19(D), _133, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 12>:
  # i_176 = PHI <i_138(13), 1(11)>
  # ivtmp_226 = PHI <ivtmp_265(13), 8(11)>
  # DEBUG i => i_176
  _135 = ctxes[i_176];
  _136 = (int) _135;
  _137 = _136 + 40;
  x264_cabac_encode_decision_asm (cb_19(D), _137, 1);
  i_138 = i_176 + 1;
  # DEBUG i => i_138
  # DEBUG i => i_138
  ivtmp_265 = ivtmp_226 - 1;
  if (ivtmp_265 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  goto <bb 12>;

  <bb 14>:
  _139 = i_abs_114 + -9;
  x264_cabac_encode_ue_bypass (cb_19(D), 3, _139);
  _140 = mdx_12 < 0;
  _141 = (int) _140;
  x264_cabac_encode_bypass (cb_19(D), _141);

  <bb 15>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_19(D)
  # DEBUG i_list => i_list_3(D)
  # DEBUG idx => idx_4(D)
  # DEBUG l => 1
  # DEBUG mvd => mdy_18
  _69 = h_2(D)->mb.cache.mvd[i_list_3(D)][_105][1];
  _70 = (int) _69;
  _71 = ABS_EXPR <_70>;
  _73 = h_2(D)->mb.cache.mvd[i_list_3(D)][_109][1];
  _74 = (int) _73;
  _75 = ABS_EXPR <_74>;
  amvd_76 = _71 + _75;
  # DEBUG amvd => amvd_76
  i_abs_77 = ABS_EXPR <mdy_18>;
  # DEBUG i_abs => i_abs_77
  # DEBUG ctxbase => 47
  _78 = amvd_76 > 2;
  _79 = (int) _78;
  _80 = amvd_76 > 32;
  _81 = (int) _80;
  ctx_82 = _79 + _81;
  # DEBUG ctx => ctx_82
  if (i_abs_77 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  _84 = ctx_82 + 47;
  x264_cabac_encode_decision_asm (cb_19(D), _84, 0);
  goto <bb 28>;

  <bb 17>:
  if (i_abs_77 <= 8)
    goto <bb 18>;
  else
    goto <bb 24>;

  <bb 18>:
  _85 = ctx_82 + 47;
  x264_cabac_encode_decision_asm (cb_19(D), _85, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_77 > 1)
    goto <bb 19>;
  else
    goto <bb 21>;

  <bb 19>:
  goto <bb 22>;

  <bb 20>:

  <bb 21>:
  _91 = ctxes[i_abs_77];
  _92 = (int) _91;
  _93 = _92 + 47;
  x264_cabac_encode_decision_asm (cb_19(D), _93, 0);
  _94 = mdy_18 < 0;
  _95 = (int) _94;
  x264_cabac_encode_bypass (cb_19(D), _95);
  goto <bb 28>;

  <bb 22>:
  # i_175 = PHI <1(19), i_90(23)>
  # DEBUG i => i_175
  _87 = ctxes[i_175];
  _88 = (int) _87;
  _89 = _88 + 47;
  x264_cabac_encode_decision_asm (cb_19(D), _89, 1);
  i_90 = i_175 + 1;
  # DEBUG i => i_90
  # DEBUG i => i_90
  if (i_abs_77 > i_90)
    goto <bb 23>;
  else
    goto <bb 20>;

  <bb 23>:
  goto <bb 22>;

  <bb 24>:
  _96 = ctx_82 + 47;
  x264_cabac_encode_decision_asm (cb_19(D), _96, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 25>:
  # i_174 = PHI <i_101(26), 1(24)>
  # ivtmp_258 = PHI <ivtmp_248(26), 8(24)>
  # DEBUG i => i_174
  _98 = ctxes[i_174];
  _99 = (int) _98;
  _100 = _99 + 47;
  x264_cabac_encode_decision_asm (cb_19(D), _100, 1);
  i_101 = i_174 + 1;
  # DEBUG i => i_101
  # DEBUG i => i_101
  ivtmp_248 = ivtmp_258 - 1;
  if (ivtmp_248 != 0)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  goto <bb 25>;

  <bb 27>:
  _102 = i_abs_77 + -9;
  x264_cabac_encode_ue_bypass (cb_19(D), 3, _102);
  _103 = mdy_18 < 0;
  _104 = (int) _103;
  x264_cabac_encode_bypass (cb_19(D), _104);

  <bb 28>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_12
  # DEBUG b => mdy_18
  _28 = mdx_12 & 65535;
  _57 = mdy_18 << 16;
  _58 = _28 + _57;
  _59 = (unsigned int) _58;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _23 = block_idx_y[idx_4(D)];
  _24 = (int) _23;
  _25 = block_idx_x[idx_4(D)];
  _26 = (int) _25;
  # DEBUG h => h_2(D)
  # DEBUG x => _26
  # DEBUG y => _24
  # DEBUG width => width_5(D)
  # DEBUG height => height_27(D)
  # DEBUG i_list => i_list_3(D)
  # DEBUG mv => NULL
  _22 = _26 + 12;
  _30 = _24 * 8;
  _31 = _22 + _30;
  _32 = &h_2(D)->mb.cache.mvd[i_list_3(D)][_31];
  # DEBUG dst => _32
  # DEBUG width => width_5(D)
  # DEBUG height => height_27(D)
  # DEBUG val => NULL
  if (width_5(D) == 1)
    goto <bb 29>;
  else
    goto <bb 33>;

  <bb 29>:
  # DEBUG dy => 0
  if (height_27(D) > 0)
    goto <bb 30>;
  else
    goto <bb 44>;

  <bb 30>:

  <bb 31>:
  # dy_165 = PHI <0(30), dy_41(32)>
  # DEBUG dy => dy_165
  # DEBUG dx => 0
  _34 = dy_165 * 8;
  _37 = (long unsigned int) _34;
  _38 = _37 * 4;
  _39 = _32 + _38;
  *_39 = _59;
  # DEBUG dx => 1
  # DEBUG dx => 1
  dy_41 = dy_165 + 1;
  # DEBUG dy => dy_41
  # DEBUG dy => dy_41
  if (height_27(D) > dy_41)
    goto <bb 32>;
  else
    goto <bb 43>;

  <bb 32>:
  goto <bb 31>;

  <bb 33>:
  _42 = (long unsigned int) _59;
  _43 = _42 << 32;
  val64_44 = _42 + _43;
  # DEBUG val64 => val64_44
  # DEBUG dy => 0
  # DEBUG dy => 0
  if (height_27(D) > 0)
    goto <bb 34>;
  else
    goto <bb 44>;

  <bb 34>:
  pretmp_236 = width_5(D) / 2;
  goto <bb 41>;

  <bb 35>:

  <bb 36>:
  # dx_163 = PHI <0(42), dx_52(35)>
  # DEBUG dx => dx_163
  _48 = dx_163 + pretmp_237;
  _49 = (long unsigned int) _48;
  _50 = _49 * 8;
  _51 = _32 + _50;
  *_51 = val64_44;
  dx_52 = dx_163 + 1;
  # DEBUG dx => dx_52
  # DEBUG dx => dx_52
  if (dx_52 < pretmp_236)
    goto <bb 35>;
  else
    goto <bb 37>;

  <bb 37>:

  <bb 38>:
  dy_54 = dy_60 + 1;
  # DEBUG dy => dy_54
  # DEBUG dy => dy_54
  if (height_27(D) > dy_54)
    goto <bb 40>;
  else
    goto <bb 39>;

  <bb 39>:
  goto <bb 44>;

  <bb 40>:

  <bb 41>:
  # dy_60 = PHI <0(34), dy_54(40)>
  # DEBUG dy => dy_60
  # DEBUG dx => 0
  if (pretmp_236 > 0)
    goto <bb 42>;
  else
    goto <bb 38>;

  <bb 42>:
  pretmp_237 = dy_60 * 4;
  goto <bb 36>;

  <bb 43>:

  <bb 44>:
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  return;

}



;; Function x264_cabac_mb8x8_mvd (x264_cabac_mb8x8_mvd, funcdef_no=131, decl_uid=5963, cgraph_uid=131, symbol_order=174)


Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 69
  exit condition [2, + , 1](no_overflow) < i_abs_1068
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1068 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1068 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_763]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_69
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 70
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_225]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_70
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 71
  exit condition [2, + , 1](no_overflow) < i_abs_1106
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1106 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1106 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1210]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_71
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 72
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_237]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_72
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 65
  exit condition [2, + , 1](no_overflow) < i_abs_992
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_992 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_992 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1305]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_65
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 66
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_178]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_66
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 67
  exit condition [2, + , 1](no_overflow) < i_abs_1030
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1030 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1030 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1296]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_67
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 68
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_827]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_68
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 61
  exit condition [2, + , 1](no_overflow) < i_abs_916
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_916 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_916 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1331]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_61
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 62
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_45]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_62
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 63
  exit condition [2, + , 1](no_overflow) < i_abs_954
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_954 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_954 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1313]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_63
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 64
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1340]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_64
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 57
  exit condition [2, + , 1](no_overflow) < i_abs_840
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_840 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_840 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_182]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_57
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 58
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_481]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_58
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 59
  exit condition [2, + , 1](no_overflow) < i_abs_878
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_878 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_878 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_461]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_59
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 60
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_121]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_60
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 21
  exit condition [2, + , 1](no_overflow) < i_abs_323
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_323 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_323 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1285]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_21
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 22
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1280]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_22
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 23
  exit condition [2, + , 1](no_overflow) < i_abs_361
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_361 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_361 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1319]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_23
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 24
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_59]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_24
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 17
  exit condition [2, + , 1](no_overflow) < i_abs_247
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_247 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_247 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_435]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_17
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 18
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1274]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_18
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 19
  exit condition [2, + , 1](no_overflow) < i_abs_285
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_285 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_285 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1284]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_19
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 20
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1271]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_20
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 37
  exit condition [2, + , 1](no_overflow) < i_abs_569
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_569 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_569 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_228]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_37
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 38
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_58]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_38
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 39
  exit condition [2, + , 1](no_overflow) < i_abs_607
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_607 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_607 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1330]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_39
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 40
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1254]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_40
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 33
  exit condition [2, + , 1](no_overflow) < i_abs_493
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_493 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_493 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1317]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_33
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 34
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1276]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_34
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 35
  exit condition [2, + , 1](no_overflow) < i_abs_531
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_531 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_531 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_813]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_35
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 36
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_186]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_36
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [2, + , 1](no_overflow) < i_abs_77
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_77 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_77 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1289]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_5
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 6
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1272]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_6
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 7
  exit condition [2, + , 1](no_overflow) < i_abs_115
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_115 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_115 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1290]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_7
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_233]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_8
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.
encoder/cabac.c:515:20: note: vectorized 0 loops in function.
x264_cabac_mb8x8_mvd (struct x264_t * h, struct x264_cabac_t * cb, int i_list, int i)
{
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  int _4;
  unsigned char _6;
  int _7;
  int _10;
  int _12;
  int _13;
  int _14;
  int _16;
  int _17;
  int _19;
  int _20;
  short int _21;
  int _22;
  short int _23;
  int _24;
  short int _26;
  int _27;
  short int _28;
  int _29;
  int _31;
  int _32;
  int _33;
  unsigned int _34;
  unsigned char _35;
  int _36;
  unsigned char _37;
  int _38;
  int _39;
  int _40;
  int _41;
  int16_t[2] * _42;
  long unsigned int _52;
  long unsigned int _53;
  short int _69;
  int _70;
  int _71;
  short int _73;
  int _74;
  int _75;
  _Bool _78;
  int _79;
  _Bool _80;
  int _81;
  int _84;
  int _85;
  unsigned char _87;
  int _88;
  int _89;
  unsigned char _91;
  int _92;
  int _93;
  _Bool _94;
  int _95;
  int _96;
  unsigned char _98;
  int _99;
  int _100;
  int _102;
  _Bool _103;
  int _104;
  int _106;
  short int _107;
  int _108;
  int _109;
  int _110;
  short int _111;
  int _112;
  int _113;
  _Bool _116;
  int _117;
  _Bool _118;
  int _119;
  int _122;
  int _123;
  unsigned char _125;
  int _126;
  int _127;
  unsigned char _129;
  int _130;
  int _131;
  _Bool _132;
  int _133;
  int _134;
  unsigned char _136;
  int _137;
  int _138;
  int _140;
  _Bool _141;
  int _142;
  int _143;
  short int _144;
  int _145;
  short int _146;
  int _147;
  short int _149;
  int _150;
  short int _151;
  int _152;
  int _154;
  int _155;
  int _156;
  unsigned int _157;
  unsigned char _158;
  int _159;
  unsigned char _160;
  int _161;
  int _162;
  int _163;
  int _164;
  int16_t[2] * _165;
  long unsigned int _175;
  long unsigned int _176;
  short int _191;
  int _192;
  short int _193;
  int _194;
  short int _196;
  int _197;
  short int _198;
  int _199;
  int _201;
  int _202;
  int _203;
  unsigned int _204;
  unsigned char _205;
  int _206;
  unsigned char _207;
  int _208;
  int _209;
  int _210;
  int _211;
  int16_t[2] * _212;
  long unsigned int _222;
  long unsigned int _223;
  short int _239;
  int _240;
  int _241;
  short int _243;
  int _244;
  int _245;
  _Bool _248;
  int _249;
  _Bool _250;
  int _251;
  int _254;
  int _255;
  unsigned char _257;
  int _258;
  int _259;
  unsigned char _261;
  int _262;
  int _263;
  _Bool _264;
  int _265;
  int _266;
  unsigned char _268;
  int _269;
  int _270;
  int _272;
  _Bool _273;
  int _274;
  int _276;
  short int _277;
  int _278;
  int _279;
  int _280;
  short int _281;
  int _282;
  int _283;
  _Bool _286;
  int _287;
  _Bool _288;
  int _289;
  int _292;
  int _293;
  unsigned char _295;
  int _296;
  int _297;
  unsigned char _299;
  int _300;
  int _301;
  _Bool _302;
  int _303;
  int _304;
  unsigned char _306;
  int _307;
  int _308;
  int _310;
  _Bool _311;
  int _312;
  short int _315;
  int _316;
  int _317;
  short int _319;
  int _320;
  int _321;
  _Bool _324;
  int _325;
  _Bool _326;
  int _327;
  int _330;
  int _331;
  unsigned char _333;
  int _334;
  int _335;
  unsigned char _337;
  int _338;
  int _339;
  _Bool _340;
  int _341;
  int _342;
  unsigned char _344;
  int _345;
  int _346;
  int _348;
  _Bool _349;
  int _350;
  int _352;
  short int _353;
  int _354;
  int _355;
  int _356;
  short int _357;
  int _358;
  int _359;
  _Bool _362;
  int _363;
  _Bool _364;
  int _365;
  int _368;
  int _369;
  unsigned char _371;
  int _372;
  int _373;
  unsigned char _375;
  int _376;
  int _377;
  _Bool _378;
  int _379;
  int _380;
  unsigned char _382;
  int _383;
  int _384;
  int _386;
  _Bool _387;
  int _388;
  int _389;
  short int _390;
  int _391;
  short int _392;
  int _393;
  short int _395;
  int _396;
  short int _397;
  int _398;
  int _400;
  int _401;
  int _402;
  unsigned int _403;
  unsigned char _404;
  int _405;
  unsigned char _406;
  int _407;
  int _408;
  int _409;
  int _410;
  int16_t[2] * _411;
  short int _437;
  int _438;
  short int _439;
  int _440;
  short int _442;
  int _443;
  short int _444;
  int _445;
  int _447;
  int _448;
  int _449;
  unsigned int _450;
  unsigned char _451;
  int _452;
  unsigned char _453;
  int _454;
  int _455;
  int _456;
  int _457;
  int16_t[2] * _458;
  short int _485;
  int _486;
  int _487;
  short int _489;
  int _490;
  int _491;
  _Bool _494;
  int _495;
  _Bool _496;
  int _497;
  int _500;
  int _501;
  unsigned char _503;
  int _504;
  int _505;
  unsigned char _507;
  int _508;
  int _509;
  _Bool _510;
  int _511;
  int _512;
  unsigned char _514;
  int _515;
  int _516;
  int _518;
  _Bool _519;
  int _520;
  int _522;
  short int _523;
  int _524;
  int _525;
  int _526;
  short int _527;
  int _528;
  int _529;
  _Bool _532;
  int _533;
  _Bool _534;
  int _535;
  int _538;
  int _539;
  unsigned char _541;
  int _542;
  int _543;
  unsigned char _545;
  int _546;
  int _547;
  _Bool _548;
  int _549;
  int _550;
  unsigned char _552;
  int _553;
  int _554;
  int _556;
  _Bool _557;
  int _558;
  short int _561;
  int _562;
  int _563;
  short int _565;
  int _566;
  int _567;
  _Bool _570;
  int _571;
  _Bool _572;
  int _573;
  int _576;
  int _577;
  unsigned char _579;
  int _580;
  int _581;
  unsigned char _583;
  int _584;
  int _585;
  _Bool _586;
  int _587;
  int _588;
  unsigned char _590;
  int _591;
  int _592;
  int _594;
  _Bool _595;
  int _596;
  int _598;
  short int _599;
  int _600;
  int _601;
  int _602;
  short int _603;
  int _604;
  int _605;
  _Bool _608;
  int _609;
  _Bool _610;
  int _611;
  int _614;
  int _615;
  unsigned char _617;
  int _618;
  int _619;
  unsigned char _621;
  int _622;
  int _623;
  _Bool _624;
  int _625;
  int _626;
  unsigned char _628;
  int _629;
  int _630;
  int _632;
  _Bool _633;
  int _634;
  int _635;
  int _636;
  int _637;
  int _638;
  short int _639;
  int _640;
  short int _641;
  int _642;
  short int _644;
  int _645;
  short int _646;
  int _647;
  int _649;
  int _650;
  int _651;
  unsigned int _652;
  unsigned char _653;
  int _654;
  unsigned char _655;
  int _656;
  int _657;
  int _658;
  int _659;
  int16_t[2] * _660;
  int _686;
  short int _687;
  int _688;
  short int _689;
  int _690;
  short int _692;
  int _693;
  short int _694;
  int _695;
  int _697;
  int _698;
  int _699;
  unsigned int _700;
  unsigned char _701;
  int _702;
  unsigned char _703;
  int _704;
  int _705;
  int _706;
  int _707;
  int16_t[2] * _708;
  int _734;
  short int _735;
  int _736;
  short int _737;
  int _738;
  short int _740;
  int _741;
  short int _742;
  int _743;
  int _745;
  int _746;
  int _747;
  unsigned int _748;
  unsigned char _749;
  int _750;
  unsigned char _751;
  int _752;
  int _753;
  int _754;
  int _755;
  int16_t[2] * _756;
  int _782;
  short int _783;
  int _784;
  short int _785;
  int _786;
  short int _788;
  int _789;
  short int _790;
  int _791;
  int _793;
  int _794;
  int _795;
  unsigned int _796;
  unsigned char _797;
  int _798;
  unsigned char _799;
  int _800;
  int _801;
  int _802;
  int _803;
  int16_t[2] * _804;
  short int _832;
  int _833;
  int _834;
  short int _836;
  int _837;
  int _838;
  _Bool _841;
  int _842;
  _Bool _843;
  int _844;
  int _847;
  int _848;
  unsigned char _850;
  int _851;
  int _852;
  unsigned char _854;
  int _855;
  int _856;
  _Bool _857;
  int _858;
  int _859;
  unsigned char _861;
  int _862;
  int _863;
  int _865;
  _Bool _866;
  int _867;
  int _869;
  short int _870;
  int _871;
  int _872;
  int _873;
  short int _874;
  int _875;
  int _876;
  _Bool _879;
  int _880;
  _Bool _881;
  int _882;
  int _885;
  int _886;
  unsigned char _888;
  int _889;
  int _890;
  unsigned char _892;
  int _893;
  int _894;
  _Bool _895;
  int _896;
  int _897;
  unsigned char _899;
  int _900;
  int _901;
  int _903;
  _Bool _904;
  int _905;
  short int _908;
  int _909;
  int _910;
  short int _912;
  int _913;
  int _914;
  _Bool _917;
  int _918;
  _Bool _919;
  int _920;
  int _923;
  int _924;
  unsigned char _926;
  int _927;
  int _928;
  unsigned char _930;
  int _931;
  int _932;
  _Bool _933;
  int _934;
  int _935;
  unsigned char _937;
  int _938;
  int _939;
  int _941;
  _Bool _942;
  int _943;
  int _945;
  short int _946;
  int _947;
  int _948;
  int _949;
  short int _950;
  int _951;
  int _952;
  _Bool _955;
  int _956;
  _Bool _957;
  int _958;
  int _961;
  int _962;
  unsigned char _964;
  int _965;
  int _966;
  unsigned char _968;
  int _969;
  int _970;
  _Bool _971;
  int _972;
  int _973;
  unsigned char _975;
  int _976;
  int _977;
  int _979;
  _Bool _980;
  int _981;
  short int _984;
  int _985;
  int _986;
  short int _988;
  int _989;
  int _990;
  _Bool _993;
  int _994;
  _Bool _995;
  int _996;
  int _999;
  int _1000;
  unsigned char _1002;
  int _1003;
  int _1004;
  unsigned char _1006;
  int _1007;
  int _1008;
  _Bool _1009;
  int _1010;
  int _1011;
  unsigned char _1013;
  int _1014;
  int _1015;
  int _1017;
  _Bool _1018;
  int _1019;
  int _1021;
  short int _1022;
  int _1023;
  int _1024;
  int _1025;
  short int _1026;
  int _1027;
  int _1028;
  _Bool _1031;
  int _1032;
  _Bool _1033;
  int _1034;
  int _1037;
  int _1038;
  unsigned char _1040;
  int _1041;
  int _1042;
  unsigned char _1044;
  int _1045;
  int _1046;
  _Bool _1047;
  int _1048;
  int _1049;
  unsigned char _1051;
  int _1052;
  int _1053;
  int _1055;
  _Bool _1056;
  int _1057;
  short int _1060;
  int _1061;
  int _1062;
  short int _1064;
  int _1065;
  int _1066;
  _Bool _1069;
  int _1070;
  _Bool _1071;
  int _1072;
  int _1075;
  int _1076;
  unsigned char _1078;
  int _1079;
  int _1080;
  unsigned char _1082;
  int _1083;
  int _1084;
  _Bool _1085;
  int _1086;
  int _1087;
  unsigned char _1089;
  int _1090;
  int _1091;
  int _1093;
  _Bool _1094;
  int _1095;
  int _1097;
  short int _1098;
  int _1099;
  int _1100;
  int _1101;
  short int _1102;
  int _1103;
  int _1104;
  _Bool _1107;
  int _1108;
  _Bool _1109;
  int _1110;
  int _1113;
  int _1114;
  unsigned char _1116;
  int _1117;
  int _1118;
  unsigned char _1120;
  int _1121;
  int _1122;
  _Bool _1123;
  int _1124;
  int _1125;
  unsigned char _1127;
  int _1128;
  int _1129;
  int _1131;
  _Bool _1132;
  int _1133;
  unsigned int ivtmp_1767;
  unsigned int ivtmp_1772;
  unsigned int ivtmp_1777;
  unsigned int ivtmp_1782;
  unsigned int ivtmp_1787;
  unsigned int ivtmp_1792;
  unsigned int ivtmp_1797;
  unsigned int ivtmp_1802;
  unsigned int ivtmp_1807;
  unsigned int ivtmp_1812;
  unsigned int ivtmp_1817;
  unsigned int ivtmp_1822;
  unsigned int ivtmp_1827;
  unsigned int ivtmp_1832;
  unsigned int ivtmp_1837;
  unsigned int ivtmp_1842;
  unsigned int ivtmp_1853;
  unsigned int ivtmp_1858;
  unsigned int ivtmp_1863;
  unsigned int ivtmp_1868;
  unsigned int ivtmp_1873;
  unsigned int ivtmp_1878;
  unsigned int ivtmp_1883;
  unsigned int ivtmp_1888;
  unsigned int ivtmp_1899;
  unsigned int ivtmp_1904;
  unsigned int ivtmp_1909;
  unsigned int ivtmp_1914;
  unsigned int ivtmp_1919;
  unsigned int ivtmp_1924;
  unsigned int ivtmp_1929;
  unsigned int ivtmp_1934;
  unsigned int ivtmp_1942;
  unsigned int ivtmp_1947;
  unsigned int ivtmp_1952;
  unsigned int ivtmp_1957;

  <bb 2>:
  _4 = h_2(D)->mb.i_sub_partition[i_3(D)];
  _6 = x264_mb_partition_listX_table[i_list_5(D)][_4];
  if (_6 == 0)
    goto <bb 242> (<L14>);
  else
    goto <bb 3>;

  <bb 3>:
  switch (_4) <default: <L14>, case 0: <L17>, case 1: <L5>, case 2: <L8>, case 3: <L2>, case 4: <L17>, case 5: <L5>, case 6: <L8>, case 7: <L2>, case 8: <L17>, case 9: <L5>, case 10: <L8>, case 11: <L2>>

<L2>:
  _7 = i_3(D) * 4;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _7
  # DEBUG width => 2
  # DEBUG height => 2
  x264_mb_predict_mv (h_2(D), i_list_5(D), _7, 2, &mvp);
  _20 = x264_scan8[_7];
  _21 = h_2(D)->mb.cache.mv[i_list_5(D)][_20][0];
  _22 = (int) _21;
  _23 = mvp[0];
  _24 = (int) _23;
  mdx_25 = _22 - _24;
  # DEBUG mdx => mdx_25
  _26 = h_2(D)->mb.cache.mv[i_list_5(D)][_20][1];
  _27 = (int) _26;
  _28 = mvp[1];
  _29 = (int) _28;
  mdy_30 = _27 - _29;
  # DEBUG mdy => mdy_30
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _7
  # DEBUG l => 0
  # DEBUG mvd => mdx_25
  _106 = _20 + -1;
  _107 = h_2(D)->mb.cache.mvd[i_list_5(D)][_106][0];
  _108 = (int) _107;
  _109 = ABS_EXPR <_108>;
  _110 = _20 + -8;
  _111 = h_2(D)->mb.cache.mvd[i_list_5(D)][_110][0];
  _112 = (int) _111;
  _113 = ABS_EXPR <_112>;
  amvd_114 = _109 + _113;
  # DEBUG amvd => amvd_114
  i_abs_115 = ABS_EXPR <mdx_25>;
  # DEBUG i_abs => i_abs_115
  # DEBUG ctxbase => 40
  _116 = amvd_114 > 2;
  _117 = (int) _116;
  _118 = amvd_114 > 32;
  _119 = (int) _118;
  ctx_120 = _117 + _119;
  # DEBUG ctx => ctx_120
  if (i_abs_115 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  _122 = ctx_120 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _122, 0);
  goto <bb 17>;

  <bb 6>:
  if (i_abs_115 <= 8)
    goto <bb 7>;
  else
    goto <bb 13>;

  <bb 7>:
  _123 = ctx_120 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _123, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_115 > 1)
    goto <bb 8>;
  else
    goto <bb 10>;

  <bb 8>:
  goto <bb 11>;

  <bb 9>:

  <bb 10>:
  _129 = ctxes[i_abs_115];
  _130 = (int) _129;
  _131 = _130 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _131, 0);
  _132 = mdx_25 < 0;
  _133 = (int) _132;
  x264_cabac_encode_bypass (cb_8(D), _133);
  goto <bb 17>;

  <bb 11>:
  # i_1290 = PHI <1(8), i_128(12)>
  # DEBUG i => i_1290
  _125 = ctxes[i_1290];
  _126 = (int) _125;
  _127 = _126 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _127, 1);
  i_128 = i_1290 + 1;
  # DEBUG i => i_128
  # DEBUG i => i_128
  if (i_abs_115 > i_128)
    goto <bb 12>;
  else
    goto <bb 9>;

  <bb 12>:
  goto <bb 11>;

  <bb 13>:
  _134 = ctx_120 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _134, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 14>:
  # i_233 = PHI <i_139(15), 1(13)>
  # ivtmp_1782 = PHI <ivtmp_1772(15), 8(13)>
  # DEBUG i => i_233
  _136 = ctxes[i_233];
  _137 = (int) _136;
  _138 = _137 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _138, 1);
  i_139 = i_233 + 1;
  # DEBUG i => i_139
  # DEBUG i => i_139
  ivtmp_1772 = ivtmp_1782 - 1;
  if (ivtmp_1772 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  goto <bb 14>;

  <bb 16>:
  _140 = i_abs_115 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _140);
  _141 = mdx_25 < 0;
  _142 = (int) _141;
  x264_cabac_encode_bypass (cb_8(D), _142);

  <bb 17>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _7
  # DEBUG l => 1
  # DEBUG mvd => mdy_30
  _69 = h_2(D)->mb.cache.mvd[i_list_5(D)][_106][1];
  _70 = (int) _69;
  _71 = ABS_EXPR <_70>;
  _73 = h_2(D)->mb.cache.mvd[i_list_5(D)][_110][1];
  _74 = (int) _73;
  _75 = ABS_EXPR <_74>;
  amvd_76 = _71 + _75;
  # DEBUG amvd => amvd_76
  i_abs_77 = ABS_EXPR <mdy_30>;
  # DEBUG i_abs => i_abs_77
  # DEBUG ctxbase => 47
  _78 = amvd_76 > 2;
  _79 = (int) _78;
  _80 = amvd_76 > 32;
  _81 = (int) _80;
  ctx_82 = _79 + _81;
  # DEBUG ctx => ctx_82
  if (i_abs_77 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  _84 = ctx_82 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _84, 0);
  goto <bb 30>;

  <bb 19>:
  if (i_abs_77 <= 8)
    goto <bb 20>;
  else
    goto <bb 26>;

  <bb 20>:
  _85 = ctx_82 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _85, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_77 > 1)
    goto <bb 21>;
  else
    goto <bb 23>;

  <bb 21>:
  goto <bb 24>;

  <bb 22>:

  <bb 23>:
  _91 = ctxes[i_abs_77];
  _92 = (int) _91;
  _93 = _92 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _93, 0);
  _94 = mdy_30 < 0;
  _95 = (int) _94;
  x264_cabac_encode_bypass (cb_8(D), _95);
  goto <bb 30>;

  <bb 24>:
  # i_1289 = PHI <1(21), i_90(25)>
  # DEBUG i => i_1289
  _87 = ctxes[i_1289];
  _88 = (int) _87;
  _89 = _88 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _89, 1);
  i_90 = i_1289 + 1;
  # DEBUG i => i_90
  # DEBUG i => i_90
  if (i_abs_77 > i_90)
    goto <bb 25>;
  else
    goto <bb 22>;

  <bb 25>:
  goto <bb 24>;

  <bb 26>:
  _96 = ctx_82 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _96, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 27>:
  # i_1272 = PHI <i_101(28), 1(26)>
  # ivtmp_1792 = PHI <ivtmp_1767(28), 8(26)>
  # DEBUG i => i_1272
  _98 = ctxes[i_1272];
  _99 = (int) _98;
  _100 = _99 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _100, 1);
  i_101 = i_1272 + 1;
  # DEBUG i => i_101
  # DEBUG i => i_101
  ivtmp_1767 = ivtmp_1792 - 1;
  if (ivtmp_1767 != 0)
    goto <bb 28>;
  else
    goto <bb 29>;

  <bb 28>:
  goto <bb 27>;

  <bb 29>:
  _102 = i_abs_77 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _102);
  _103 = mdy_30 < 0;
  _104 = (int) _103;
  x264_cabac_encode_bypass (cb_8(D), _104);

  <bb 30>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_25
  # DEBUG b => mdy_30
  _31 = mdx_25 & 65535;
  _32 = mdy_30 << 16;
  _33 = _31 + _32;
  _34 = (unsigned int) _33;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _35 = block_idx_y[_7];
  _36 = (int) _35;
  _37 = block_idx_x[_7];
  _38 = (int) _37;
  # DEBUG h => h_2(D)
  # DEBUG x => _38
  # DEBUG y => _36
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _39 = _38 + 12;
  _40 = _36 * 8;
  _41 = _39 + _40;
  _42 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_41];
  # DEBUG dst => _42
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG val => NULL
  _52 = (long unsigned int) _34;
  _53 = _52 << 32;
  val64_54 = _52 + _53;
  # DEBUG val64 => val64_54
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_42] = val64_54;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_42 + 32B] = val64_54;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  goto <bb 242> (<L14>);

<L5>:
  _10 = i_3(D) * 4;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _10
  # DEBUG width => 2
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _10, 2, &mvp);
  _13 = x264_scan8[_10];
  _191 = h_2(D)->mb.cache.mv[i_list_5(D)][_13][0];
  _192 = (int) _191;
  _193 = mvp[0];
  _194 = (int) _193;
  mdx_195 = _192 - _194;
  # DEBUG mdx => mdx_195
  _196 = h_2(D)->mb.cache.mv[i_list_5(D)][_13][1];
  _197 = (int) _196;
  _198 = mvp[1];
  _199 = (int) _198;
  mdy_200 = _197 - _199;
  # DEBUG mdy => mdy_200
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _10
  # DEBUG l => 0
  # DEBUG mvd => mdx_195
  _276 = _13 + -1;
  _277 = h_2(D)->mb.cache.mvd[i_list_5(D)][_276][0];
  _278 = (int) _277;
  _279 = ABS_EXPR <_278>;
  _280 = _13 + -8;
  _281 = h_2(D)->mb.cache.mvd[i_list_5(D)][_280][0];
  _282 = (int) _281;
  _283 = ABS_EXPR <_282>;
  amvd_284 = _279 + _283;
  # DEBUG amvd => amvd_284
  i_abs_285 = ABS_EXPR <mdx_195>;
  # DEBUG i_abs => i_abs_285
  # DEBUG ctxbase => 40
  _286 = amvd_284 > 2;
  _287 = (int) _286;
  _288 = amvd_284 > 32;
  _289 = (int) _288;
  ctx_290 = _287 + _289;
  # DEBUG ctx => ctx_290
  if (i_abs_285 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  _292 = ctx_290 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _292, 0);
  goto <bb 44>;

  <bb 33>:
  if (i_abs_285 <= 8)
    goto <bb 34>;
  else
    goto <bb 40>;

  <bb 34>:
  _293 = ctx_290 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _293, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_285 > 1)
    goto <bb 35>;
  else
    goto <bb 37>;

  <bb 35>:
  goto <bb 38>;

  <bb 36>:

  <bb 37>:
  _299 = ctxes[i_abs_285];
  _300 = (int) _299;
  _301 = _300 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _301, 0);
  _302 = mdx_195 < 0;
  _303 = (int) _302;
  x264_cabac_encode_bypass (cb_8(D), _303);
  goto <bb 44>;

  <bb 38>:
  # i_1284 = PHI <1(35), i_298(39)>
  # DEBUG i => i_1284
  _295 = ctxes[i_1284];
  _296 = (int) _295;
  _297 = _296 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _297, 1);
  i_298 = i_1284 + 1;
  # DEBUG i => i_298
  # DEBUG i => i_298
  if (i_abs_285 > i_298)
    goto <bb 39>;
  else
    goto <bb 36>;

  <bb 39>:
  goto <bb 38>;

  <bb 40>:
  _304 = ctx_290 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _304, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 41>:
  # i_1271 = PHI <i_309(42), 1(40)>
  # ivtmp_1868 = PHI <ivtmp_1899(42), 8(40)>
  # DEBUG i => i_1271
  _306 = ctxes[i_1271];
  _307 = (int) _306;
  _308 = _307 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _308, 1);
  i_309 = i_1271 + 1;
  # DEBUG i => i_309
  # DEBUG i => i_309
  ivtmp_1899 = ivtmp_1868 - 1;
  if (ivtmp_1899 != 0)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  goto <bb 41>;

  <bb 43>:
  _310 = i_abs_285 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _310);
  _311 = mdx_195 < 0;
  _312 = (int) _311;
  x264_cabac_encode_bypass (cb_8(D), _312);

  <bb 44>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _10
  # DEBUG l => 1
  # DEBUG mvd => mdy_200
  _239 = h_2(D)->mb.cache.mvd[i_list_5(D)][_276][1];
  _240 = (int) _239;
  _241 = ABS_EXPR <_240>;
  _243 = h_2(D)->mb.cache.mvd[i_list_5(D)][_280][1];
  _244 = (int) _243;
  _245 = ABS_EXPR <_244>;
  amvd_246 = _241 + _245;
  # DEBUG amvd => amvd_246
  i_abs_247 = ABS_EXPR <mdy_200>;
  # DEBUG i_abs => i_abs_247
  # DEBUG ctxbase => 47
  _248 = amvd_246 > 2;
  _249 = (int) _248;
  _250 = amvd_246 > 32;
  _251 = (int) _250;
  ctx_252 = _249 + _251;
  # DEBUG ctx => ctx_252
  if (i_abs_247 == 0)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 45>:
  _254 = ctx_252 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _254, 0);
  goto <bb 57>;

  <bb 46>:
  if (i_abs_247 <= 8)
    goto <bb 47>;
  else
    goto <bb 53>;

  <bb 47>:
  _255 = ctx_252 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _255, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_247 > 1)
    goto <bb 48>;
  else
    goto <bb 50>;

  <bb 48>:
  goto <bb 51>;

  <bb 49>:

  <bb 50>:
  _261 = ctxes[i_abs_247];
  _262 = (int) _261;
  _263 = _262 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _263, 0);
  _264 = mdy_200 < 0;
  _265 = (int) _264;
  x264_cabac_encode_bypass (cb_8(D), _265);
  goto <bb 57>;

  <bb 51>:
  # i_435 = PHI <1(48), i_260(52)>
  # DEBUG i => i_435
  _257 = ctxes[i_435];
  _258 = (int) _257;
  _259 = _258 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _259, 1);
  i_260 = i_435 + 1;
  # DEBUG i => i_260
  # DEBUG i => i_260
  if (i_abs_247 > i_260)
    goto <bb 52>;
  else
    goto <bb 49>;

  <bb 52>:
  goto <bb 51>;

  <bb 53>:
  _266 = ctx_252 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _266, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 54>:
  # i_1274 = PHI <i_271(55), 1(53)>
  # ivtmp_1822 = PHI <ivtmp_1853(55), 8(53)>
  # DEBUG i => i_1274
  _268 = ctxes[i_1274];
  _269 = (int) _268;
  _270 = _269 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _270, 1);
  i_271 = i_1274 + 1;
  # DEBUG i => i_271
  # DEBUG i => i_271
  ivtmp_1853 = ivtmp_1822 - 1;
  if (ivtmp_1853 != 0)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 55>:
  goto <bb 54>;

  <bb 56>:
  _272 = i_abs_247 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _272);
  _273 = mdy_200 < 0;
  _274 = (int) _273;
  x264_cabac_encode_bypass (cb_8(D), _274);

  <bb 57>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_195
  # DEBUG b => mdy_200
  _201 = mdx_195 & 65535;
  _202 = mdy_200 << 16;
  _203 = _201 + _202;
  _204 = (unsigned int) _203;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _205 = block_idx_y[_10];
  _206 = (int) _205;
  _207 = block_idx_x[_10];
  _208 = (int) _207;
  # DEBUG h => h_2(D)
  # DEBUG x => _208
  # DEBUG y => _206
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _209 = _208 + 12;
  _210 = _206 * 8;
  _211 = _209 + _210;
  _212 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_211];
  # DEBUG dst => _212
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG val => NULL
  _222 = (long unsigned int) _204;
  _223 = _222 << 32;
  val64_224 = _222 + _223;
  # DEBUG val64 => val64_224
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_212] = val64_224;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _12 = _10 + 2;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _12
  # DEBUG width => 2
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _12, 2, &mvp);
  _143 = x264_scan8[_12];
  _144 = h_2(D)->mb.cache.mv[i_list_5(D)][_143][0];
  _145 = (int) _144;
  _146 = mvp[0];
  _147 = (int) _146;
  mdx_148 = _145 - _147;
  # DEBUG mdx => mdx_148
  _149 = h_2(D)->mb.cache.mv[i_list_5(D)][_143][1];
  _150 = (int) _149;
  _151 = mvp[1];
  _152 = (int) _151;
  mdy_153 = _150 - _152;
  # DEBUG mdy => mdy_153
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _12
  # DEBUG l => 0
  # DEBUG mvd => mdx_148
  _352 = _143 + -1;
  _353 = h_2(D)->mb.cache.mvd[i_list_5(D)][_352][0];
  _354 = (int) _353;
  _355 = ABS_EXPR <_354>;
  _356 = _143 + -8;
  _357 = h_2(D)->mb.cache.mvd[i_list_5(D)][_356][0];
  _358 = (int) _357;
  _359 = ABS_EXPR <_358>;
  amvd_360 = _355 + _359;
  # DEBUG amvd => amvd_360
  i_abs_361 = ABS_EXPR <mdx_148>;
  # DEBUG i_abs => i_abs_361
  # DEBUG ctxbase => 40
  _362 = amvd_360 > 2;
  _363 = (int) _362;
  _364 = amvd_360 > 32;
  _365 = (int) _364;
  ctx_366 = _363 + _365;
  # DEBUG ctx => ctx_366
  if (i_abs_361 == 0)
    goto <bb 58>;
  else
    goto <bb 59>;

  <bb 58>:
  _368 = ctx_366 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _368, 0);
  goto <bb 70>;

  <bb 59>:
  if (i_abs_361 <= 8)
    goto <bb 60>;
  else
    goto <bb 66>;

  <bb 60>:
  _369 = ctx_366 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _369, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_361 > 1)
    goto <bb 61>;
  else
    goto <bb 63>;

  <bb 61>:
  goto <bb 64>;

  <bb 62>:

  <bb 63>:
  _375 = ctxes[i_abs_361];
  _376 = (int) _375;
  _377 = _376 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _377, 0);
  _378 = mdx_148 < 0;
  _379 = (int) _378;
  x264_cabac_encode_bypass (cb_8(D), _379);
  goto <bb 70>;

  <bb 64>:
  # i_1319 = PHI <1(61), i_374(65)>
  # DEBUG i => i_1319
  _371 = ctxes[i_1319];
  _372 = (int) _371;
  _373 = _372 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _373, 1);
  i_374 = i_1319 + 1;
  # DEBUG i => i_374
  # DEBUG i => i_374
  if (i_abs_361 > i_374)
    goto <bb 65>;
  else
    goto <bb 62>;

  <bb 65>:
  goto <bb 64>;

  <bb 66>:
  _380 = ctx_366 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _380, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 67>:
  # i_59 = PHI <i_385(68), 1(66)>
  # ivtmp_1947 = PHI <ivtmp_1807(68), 8(66)>
  # DEBUG i => i_59
  _382 = ctxes[i_59];
  _383 = (int) _382;
  _384 = _383 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _384, 1);
  i_385 = i_59 + 1;
  # DEBUG i => i_385
  # DEBUG i => i_385
  ivtmp_1807 = ivtmp_1947 - 1;
  if (ivtmp_1807 != 0)
    goto <bb 68>;
  else
    goto <bb 69>;

  <bb 68>:
  goto <bb 67>;

  <bb 69>:
  _386 = i_abs_361 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _386);
  _387 = mdx_148 < 0;
  _388 = (int) _387;
  x264_cabac_encode_bypass (cb_8(D), _388);

  <bb 70>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _12
  # DEBUG l => 1
  # DEBUG mvd => mdy_153
  _315 = h_2(D)->mb.cache.mvd[i_list_5(D)][_352][1];
  _316 = (int) _315;
  _317 = ABS_EXPR <_316>;
  _319 = h_2(D)->mb.cache.mvd[i_list_5(D)][_356][1];
  _320 = (int) _319;
  _321 = ABS_EXPR <_320>;
  amvd_322 = _317 + _321;
  # DEBUG amvd => amvd_322
  i_abs_323 = ABS_EXPR <mdy_153>;
  # DEBUG i_abs => i_abs_323
  # DEBUG ctxbase => 47
  _324 = amvd_322 > 2;
  _325 = (int) _324;
  _326 = amvd_322 > 32;
  _327 = (int) _326;
  ctx_328 = _325 + _327;
  # DEBUG ctx => ctx_328
  if (i_abs_323 == 0)
    goto <bb 71>;
  else
    goto <bb 72>;

  <bb 71>:
  _330 = ctx_328 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _330, 0);
  goto <bb 83>;

  <bb 72>:
  if (i_abs_323 <= 8)
    goto <bb 73>;
  else
    goto <bb 79>;

  <bb 73>:
  _331 = ctx_328 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _331, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_323 > 1)
    goto <bb 74>;
  else
    goto <bb 76>;

  <bb 74>:
  goto <bb 77>;

  <bb 75>:

  <bb 76>:
  _337 = ctxes[i_abs_323];
  _338 = (int) _337;
  _339 = _338 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _339, 0);
  _340 = mdy_153 < 0;
  _341 = (int) _340;
  x264_cabac_encode_bypass (cb_8(D), _341);
  goto <bb 83>;

  <bb 77>:
  # i_1285 = PHI <1(74), i_336(78)>
  # DEBUG i => i_1285
  _333 = ctxes[i_1285];
  _334 = (int) _333;
  _335 = _334 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _335, 1);
  i_336 = i_1285 + 1;
  # DEBUG i => i_336
  # DEBUG i => i_336
  if (i_abs_323 > i_336)
    goto <bb 78>;
  else
    goto <bb 75>;

  <bb 78>:
  goto <bb 77>;

  <bb 79>:
  _342 = ctx_328 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _342, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 80>:
  # i_1280 = PHI <i_347(81), 1(79)>
  # ivtmp_1909 = PHI <ivtmp_1924(81), 8(79)>
  # DEBUG i => i_1280
  _344 = ctxes[i_1280];
  _345 = (int) _344;
  _346 = _345 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _346, 1);
  i_347 = i_1280 + 1;
  # DEBUG i => i_347
  # DEBUG i => i_347
  ivtmp_1924 = ivtmp_1909 - 1;
  if (ivtmp_1924 != 0)
    goto <bb 81>;
  else
    goto <bb 82>;

  <bb 81>:
  goto <bb 80>;

  <bb 82>:
  _348 = i_abs_323 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _348);
  _349 = mdy_153 < 0;
  _350 = (int) _349;
  x264_cabac_encode_bypass (cb_8(D), _350);

  <bb 83>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_148
  # DEBUG b => mdy_153
  _154 = mdx_148 & 65535;
  _155 = mdy_153 << 16;
  _156 = _154 + _155;
  _157 = (unsigned int) _156;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _158 = block_idx_y[_12];
  _159 = (int) _158;
  _160 = block_idx_x[_12];
  _161 = (int) _160;
  # DEBUG h => h_2(D)
  # DEBUG x => _161
  # DEBUG y => _159
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _162 = _161 + 12;
  _163 = _159 * 8;
  _164 = _162 + _163;
  _165 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_164];
  # DEBUG dst => _165
  # DEBUG width => 2
  # DEBUG height => 1
  # DEBUG val => NULL
  _175 = (long unsigned int) _157;
  _176 = _175 << 32;
  val64_177 = _175 + _176;
  # DEBUG val64 => val64_177
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_165] = val64_177;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  goto <bb 242> (<L14>);

<L8>:
  _14 = i_3(D) * 4;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _14
  # DEBUG width => 1
  # DEBUG height => 2
  x264_mb_predict_mv (h_2(D), i_list_5(D), _14, 1, &mvp);
  _17 = x264_scan8[_14];
  _437 = h_2(D)->mb.cache.mv[i_list_5(D)][_17][0];
  _438 = (int) _437;
  _439 = mvp[0];
  _440 = (int) _439;
  mdx_441 = _438 - _440;
  # DEBUG mdx => mdx_441
  _442 = h_2(D)->mb.cache.mv[i_list_5(D)][_17][1];
  _443 = (int) _442;
  _444 = mvp[1];
  _445 = (int) _444;
  mdy_446 = _443 - _445;
  # DEBUG mdy => mdy_446
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _14
  # DEBUG l => 0
  # DEBUG mvd => mdx_441
  _522 = _17 + -1;
  _523 = h_2(D)->mb.cache.mvd[i_list_5(D)][_522][0];
  _524 = (int) _523;
  _525 = ABS_EXPR <_524>;
  _526 = _17 + -8;
  _527 = h_2(D)->mb.cache.mvd[i_list_5(D)][_526][0];
  _528 = (int) _527;
  _529 = ABS_EXPR <_528>;
  amvd_530 = _525 + _529;
  # DEBUG amvd => amvd_530
  i_abs_531 = ABS_EXPR <mdx_441>;
  # DEBUG i_abs => i_abs_531
  # DEBUG ctxbase => 40
  _532 = amvd_530 > 2;
  _533 = (int) _532;
  _534 = amvd_530 > 32;
  _535 = (int) _534;
  ctx_536 = _533 + _535;
  # DEBUG ctx => ctx_536
  if (i_abs_531 == 0)
    goto <bb 85>;
  else
    goto <bb 86>;

  <bb 85>:
  _538 = ctx_536 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _538, 0);
  goto <bb 97>;

  <bb 86>:
  if (i_abs_531 <= 8)
    goto <bb 87>;
  else
    goto <bb 93>;

  <bb 87>:
  _539 = ctx_536 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _539, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_531 > 1)
    goto <bb 88>;
  else
    goto <bb 90>;

  <bb 88>:
  goto <bb 91>;

  <bb 89>:

  <bb 90>:
  _545 = ctxes[i_abs_531];
  _546 = (int) _545;
  _547 = _546 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _547, 0);
  _548 = mdx_441 < 0;
  _549 = (int) _548;
  x264_cabac_encode_bypass (cb_8(D), _549);
  goto <bb 97>;

  <bb 91>:
  # i_813 = PHI <1(88), i_544(92)>
  # DEBUG i => i_813
  _541 = ctxes[i_813];
  _542 = (int) _541;
  _543 = _542 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _543, 1);
  i_544 = i_813 + 1;
  # DEBUG i => i_544
  # DEBUG i => i_544
  if (i_abs_531 > i_544)
    goto <bb 92>;
  else
    goto <bb 89>;

  <bb 92>:
  goto <bb 91>;

  <bb 93>:
  _550 = ctx_536 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _550, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 94>:
  # i_186 = PHI <i_555(95), 1(93)>
  # ivtmp_1802 = PHI <ivtmp_1777(95), 8(93)>
  # DEBUG i => i_186
  _552 = ctxes[i_186];
  _553 = (int) _552;
  _554 = _553 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _554, 1);
  i_555 = i_186 + 1;
  # DEBUG i => i_555
  # DEBUG i => i_555
  ivtmp_1777 = ivtmp_1802 - 1;
  if (ivtmp_1777 != 0)
    goto <bb 95>;
  else
    goto <bb 96>;

  <bb 95>:
  goto <bb 94>;

  <bb 96>:
  _556 = i_abs_531 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _556);
  _557 = mdx_441 < 0;
  _558 = (int) _557;
  x264_cabac_encode_bypass (cb_8(D), _558);

  <bb 97>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _14
  # DEBUG l => 1
  # DEBUG mvd => mdy_446
  _485 = h_2(D)->mb.cache.mvd[i_list_5(D)][_522][1];
  _486 = (int) _485;
  _487 = ABS_EXPR <_486>;
  _489 = h_2(D)->mb.cache.mvd[i_list_5(D)][_526][1];
  _490 = (int) _489;
  _491 = ABS_EXPR <_490>;
  amvd_492 = _487 + _491;
  # DEBUG amvd => amvd_492
  i_abs_493 = ABS_EXPR <mdy_446>;
  # DEBUG i_abs => i_abs_493
  # DEBUG ctxbase => 47
  _494 = amvd_492 > 2;
  _495 = (int) _494;
  _496 = amvd_492 > 32;
  _497 = (int) _496;
  ctx_498 = _495 + _497;
  # DEBUG ctx => ctx_498
  if (i_abs_493 == 0)
    goto <bb 98>;
  else
    goto <bb 99>;

  <bb 98>:
  _500 = ctx_498 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _500, 0);
  goto <bb 110>;

  <bb 99>:
  if (i_abs_493 <= 8)
    goto <bb 100>;
  else
    goto <bb 106>;

  <bb 100>:
  _501 = ctx_498 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _501, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_493 > 1)
    goto <bb 101>;
  else
    goto <bb 103>;

  <bb 101>:
  goto <bb 104>;

  <bb 102>:

  <bb 103>:
  _507 = ctxes[i_abs_493];
  _508 = (int) _507;
  _509 = _508 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _509, 0);
  _510 = mdy_446 < 0;
  _511 = (int) _510;
  x264_cabac_encode_bypass (cb_8(D), _511);
  goto <bb 110>;

  <bb 104>:
  # i_1317 = PHI <1(101), i_506(105)>
  # DEBUG i => i_1317
  _503 = ctxes[i_1317];
  _504 = (int) _503;
  _505 = _504 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _505, 1);
  i_506 = i_1317 + 1;
  # DEBUG i => i_506
  # DEBUG i => i_506
  if (i_abs_493 > i_506)
    goto <bb 105>;
  else
    goto <bb 102>;

  <bb 105>:
  goto <bb 104>;

  <bb 106>:
  _512 = ctx_498 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _512, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 107>:
  # i_1276 = PHI <i_517(108), 1(106)>
  # ivtmp_1904 = PHI <ivtmp_1787(108), 8(106)>
  # DEBUG i => i_1276
  _514 = ctxes[i_1276];
  _515 = (int) _514;
  _516 = _515 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _516, 1);
  i_517 = i_1276 + 1;
  # DEBUG i => i_517
  # DEBUG i => i_517
  ivtmp_1787 = ivtmp_1904 - 1;
  if (ivtmp_1787 != 0)
    goto <bb 108>;
  else
    goto <bb 109>;

  <bb 108>:
  goto <bb 107>;

  <bb 109>:
  _518 = i_abs_493 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _518);
  _519 = mdy_446 < 0;
  _520 = (int) _519;
  x264_cabac_encode_bypass (cb_8(D), _520);

  <bb 110>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_441
  # DEBUG b => mdy_446
  _447 = mdx_441 & 65535;
  _448 = mdy_446 << 16;
  _449 = _447 + _448;
  _450 = (unsigned int) _449;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _451 = block_idx_y[_14];
  _452 = (int) _451;
  _453 = block_idx_x[_14];
  _454 = (int) _453;
  # DEBUG h => h_2(D)
  # DEBUG x => _454
  # DEBUG y => _452
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _455 = _454 + 12;
  _456 = _452 * 8;
  _457 = _455 + _456;
  _458 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_457];
  # DEBUG dst => _458
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_458] = _450;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint32_t *)_458 + 32B] = _450;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _16 = _14 + 1;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _16
  # DEBUG width => 1
  # DEBUG height => 2
  x264_mb_predict_mv (h_2(D), i_list_5(D), _16, 1, &mvp);
  _389 = x264_scan8[_16];
  _390 = h_2(D)->mb.cache.mv[i_list_5(D)][_389][0];
  _391 = (int) _390;
  _392 = mvp[0];
  _393 = (int) _392;
  mdx_394 = _391 - _393;
  # DEBUG mdx => mdx_394
  _395 = h_2(D)->mb.cache.mv[i_list_5(D)][_389][1];
  _396 = (int) _395;
  _397 = mvp[1];
  _398 = (int) _397;
  mdy_399 = _396 - _398;
  # DEBUG mdy => mdy_399
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _16
  # DEBUG l => 0
  # DEBUG mvd => mdx_394
  _598 = _389 + -1;
  _599 = h_2(D)->mb.cache.mvd[i_list_5(D)][_598][0];
  _600 = (int) _599;
  _601 = ABS_EXPR <_600>;
  _602 = _389 + -8;
  _603 = h_2(D)->mb.cache.mvd[i_list_5(D)][_602][0];
  _604 = (int) _603;
  _605 = ABS_EXPR <_604>;
  amvd_606 = _601 + _605;
  # DEBUG amvd => amvd_606
  i_abs_607 = ABS_EXPR <mdx_394>;
  # DEBUG i_abs => i_abs_607
  # DEBUG ctxbase => 40
  _608 = amvd_606 > 2;
  _609 = (int) _608;
  _610 = amvd_606 > 32;
  _611 = (int) _610;
  ctx_612 = _609 + _611;
  # DEBUG ctx => ctx_612
  if (i_abs_607 == 0)
    goto <bb 111>;
  else
    goto <bb 112>;

  <bb 111>:
  _614 = ctx_612 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _614, 0);
  goto <bb 123>;

  <bb 112>:
  if (i_abs_607 <= 8)
    goto <bb 113>;
  else
    goto <bb 119>;

  <bb 113>:
  _615 = ctx_612 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _615, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_607 > 1)
    goto <bb 114>;
  else
    goto <bb 116>;

  <bb 114>:
  goto <bb 117>;

  <bb 115>:

  <bb 116>:
  _621 = ctxes[i_abs_607];
  _622 = (int) _621;
  _623 = _622 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _623, 0);
  _624 = mdx_394 < 0;
  _625 = (int) _624;
  x264_cabac_encode_bypass (cb_8(D), _625);
  goto <bb 123>;

  <bb 117>:
  # i_1330 = PHI <1(114), i_620(118)>
  # DEBUG i => i_1330
  _617 = ctxes[i_1330];
  _618 = (int) _617;
  _619 = _618 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _619, 1);
  i_620 = i_1330 + 1;
  # DEBUG i => i_620
  # DEBUG i => i_620
  if (i_abs_607 > i_620)
    goto <bb 118>;
  else
    goto <bb 115>;

  <bb 118>:
  goto <bb 117>;

  <bb 119>:
  _626 = ctx_612 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _626, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 120>:
  # i_1254 = PHI <i_631(121), 1(119)>
  # ivtmp_1812 = PHI <ivtmp_1858(121), 8(119)>
  # DEBUG i => i_1254
  _628 = ctxes[i_1254];
  _629 = (int) _628;
  _630 = _629 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _630, 1);
  i_631 = i_1254 + 1;
  # DEBUG i => i_631
  # DEBUG i => i_631
  ivtmp_1858 = ivtmp_1812 - 1;
  if (ivtmp_1858 != 0)
    goto <bb 121>;
  else
    goto <bb 122>;

  <bb 121>:
  goto <bb 120>;

  <bb 122>:
  _632 = i_abs_607 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _632);
  _633 = mdx_394 < 0;
  _634 = (int) _633;
  x264_cabac_encode_bypass (cb_8(D), _634);

  <bb 123>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _16
  # DEBUG l => 1
  # DEBUG mvd => mdy_399
  _561 = h_2(D)->mb.cache.mvd[i_list_5(D)][_598][1];
  _562 = (int) _561;
  _563 = ABS_EXPR <_562>;
  _565 = h_2(D)->mb.cache.mvd[i_list_5(D)][_602][1];
  _566 = (int) _565;
  _567 = ABS_EXPR <_566>;
  amvd_568 = _563 + _567;
  # DEBUG amvd => amvd_568
  i_abs_569 = ABS_EXPR <mdy_399>;
  # DEBUG i_abs => i_abs_569
  # DEBUG ctxbase => 47
  _570 = amvd_568 > 2;
  _571 = (int) _570;
  _572 = amvd_568 > 32;
  _573 = (int) _572;
  ctx_574 = _571 + _573;
  # DEBUG ctx => ctx_574
  if (i_abs_569 == 0)
    goto <bb 124>;
  else
    goto <bb 125>;

  <bb 124>:
  _576 = ctx_574 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _576, 0);
  goto <bb 136>;

  <bb 125>:
  if (i_abs_569 <= 8)
    goto <bb 126>;
  else
    goto <bb 132>;

  <bb 126>:
  _577 = ctx_574 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _577, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_569 > 1)
    goto <bb 127>;
  else
    goto <bb 129>;

  <bb 127>:
  goto <bb 130>;

  <bb 128>:

  <bb 129>:
  _583 = ctxes[i_abs_569];
  _584 = (int) _583;
  _585 = _584 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _585, 0);
  _586 = mdy_399 < 0;
  _587 = (int) _586;
  x264_cabac_encode_bypass (cb_8(D), _587);
  goto <bb 136>;

  <bb 130>:
  # i_228 = PHI <1(127), i_582(131)>
  # DEBUG i => i_228
  _579 = ctxes[i_228];
  _580 = (int) _579;
  _581 = _580 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _581, 1);
  i_582 = i_228 + 1;
  # DEBUG i => i_582
  # DEBUG i => i_582
  if (i_abs_569 > i_582)
    goto <bb 131>;
  else
    goto <bb 128>;

  <bb 131>:
  goto <bb 130>;

  <bb 132>:
  _588 = ctx_574 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _588, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 133>:
  # i_58 = PHI <i_593(134), 1(132)>
  # ivtmp_1914 = PHI <ivtmp_1797(134), 8(132)>
  # DEBUG i => i_58
  _590 = ctxes[i_58];
  _591 = (int) _590;
  _592 = _591 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _592, 1);
  i_593 = i_58 + 1;
  # DEBUG i => i_593
  # DEBUG i => i_593
  ivtmp_1797 = ivtmp_1914 - 1;
  if (ivtmp_1797 != 0)
    goto <bb 134>;
  else
    goto <bb 135>;

  <bb 134>:
  goto <bb 133>;

  <bb 135>:
  _594 = i_abs_569 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _594);
  _595 = mdy_399 < 0;
  _596 = (int) _595;
  x264_cabac_encode_bypass (cb_8(D), _596);

  <bb 136>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_394
  # DEBUG b => mdy_399
  _400 = mdx_394 & 65535;
  _401 = mdy_399 << 16;
  _402 = _400 + _401;
  _403 = (unsigned int) _402;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _404 = block_idx_y[_16];
  _405 = (int) _404;
  _406 = block_idx_x[_16];
  _407 = (int) _406;
  # DEBUG h => h_2(D)
  # DEBUG x => _407
  # DEBUG y => _405
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _408 = _407 + 12;
  _409 = _405 * 8;
  _410 = _408 + _409;
  _411 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_410];
  # DEBUG dst => _411
  # DEBUG width => 1
  # DEBUG height => 2
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_411] = _403;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint32_t *)_411 + 32B] = _403;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  goto <bb 242> (<L14>);

<L17>:
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG i => i_3(D)
  _635 = i_3(D) * 4;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _635
  # DEBUG width => 1
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _635, 1, &mvp);
  _782 = x264_scan8[_635];
  _783 = h_2(D)->mb.cache.mv[i_list_5(D)][_782][0];
  _784 = (int) _783;
  _785 = mvp[0];
  _786 = (int) _785;
  mdx_787 = _784 - _786;
  # DEBUG mdx => mdx_787
  _788 = h_2(D)->mb.cache.mv[i_list_5(D)][_782][1];
  _789 = (int) _788;
  _790 = mvp[1];
  _791 = (int) _790;
  mdy_792 = _789 - _791;
  # DEBUG mdy => mdy_792
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _635
  # DEBUG l => 0
  # DEBUG mvd => mdx_787
  _869 = _782 + -1;
  _870 = h_2(D)->mb.cache.mvd[i_list_5(D)][_869][0];
  _871 = (int) _870;
  _872 = ABS_EXPR <_871>;
  _873 = _782 + -8;
  _874 = h_2(D)->mb.cache.mvd[i_list_5(D)][_873][0];
  _875 = (int) _874;
  _876 = ABS_EXPR <_875>;
  amvd_877 = _872 + _876;
  # DEBUG amvd => amvd_877
  i_abs_878 = ABS_EXPR <mdx_787>;
  # DEBUG i_abs => i_abs_878
  # DEBUG ctxbase => 40
  _879 = amvd_877 > 2;
  _880 = (int) _879;
  _881 = amvd_877 > 32;
  _882 = (int) _881;
  ctx_883 = _880 + _882;
  # DEBUG ctx => ctx_883
  if (i_abs_878 == 0)
    goto <bb 138>;
  else
    goto <bb 139>;

  <bb 138>:
  _885 = ctx_883 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _885, 0);
  goto <bb 150>;

  <bb 139>:
  if (i_abs_878 <= 8)
    goto <bb 140>;
  else
    goto <bb 146>;

  <bb 140>:
  _886 = ctx_883 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _886, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_878 > 1)
    goto <bb 141>;
  else
    goto <bb 143>;

  <bb 141>:
  goto <bb 144>;

  <bb 142>:

  <bb 143>:
  _892 = ctxes[i_abs_878];
  _893 = (int) _892;
  _894 = _893 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _894, 0);
  _895 = mdx_787 < 0;
  _896 = (int) _895;
  x264_cabac_encode_bypass (cb_8(D), _896);
  goto <bb 150>;

  <bb 144>:
  # i_461 = PHI <1(141), i_891(145)>
  # DEBUG i => i_461
  _888 = ctxes[i_461];
  _889 = (int) _888;
  _890 = _889 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _890, 1);
  i_891 = i_461 + 1;
  # DEBUG i => i_891
  # DEBUG i => i_891
  if (i_abs_878 > i_891)
    goto <bb 145>;
  else
    goto <bb 142>;

  <bb 145>:
  goto <bb 144>;

  <bb 146>:
  _897 = ctx_883 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _897, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 147>:
  # i_121 = PHI <i_902(148), 1(146)>
  # ivtmp_1863 = PHI <ivtmp_1878(148), 8(146)>
  # DEBUG i => i_121
  _899 = ctxes[i_121];
  _900 = (int) _899;
  _901 = _900 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _901, 1);
  i_902 = i_121 + 1;
  # DEBUG i => i_902
  # DEBUG i => i_902
  ivtmp_1878 = ivtmp_1863 - 1;
  if (ivtmp_1878 != 0)
    goto <bb 148>;
  else
    goto <bb 149>;

  <bb 148>:
  goto <bb 147>;

  <bb 149>:
  _903 = i_abs_878 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _903);
  _904 = mdx_787 < 0;
  _905 = (int) _904;
  x264_cabac_encode_bypass (cb_8(D), _905);

  <bb 150>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _635
  # DEBUG l => 1
  # DEBUG mvd => mdy_792
  _832 = h_2(D)->mb.cache.mvd[i_list_5(D)][_869][1];
  _833 = (int) _832;
  _834 = ABS_EXPR <_833>;
  _836 = h_2(D)->mb.cache.mvd[i_list_5(D)][_873][1];
  _837 = (int) _836;
  _838 = ABS_EXPR <_837>;
  amvd_839 = _834 + _838;
  # DEBUG amvd => amvd_839
  i_abs_840 = ABS_EXPR <mdy_792>;
  # DEBUG i_abs => i_abs_840
  # DEBUG ctxbase => 47
  _841 = amvd_839 > 2;
  _842 = (int) _841;
  _843 = amvd_839 > 32;
  _844 = (int) _843;
  ctx_845 = _842 + _844;
  # DEBUG ctx => ctx_845
  if (i_abs_840 == 0)
    goto <bb 151>;
  else
    goto <bb 152>;

  <bb 151>:
  _847 = ctx_845 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _847, 0);
  goto <bb 163>;

  <bb 152>:
  if (i_abs_840 <= 8)
    goto <bb 153>;
  else
    goto <bb 159>;

  <bb 153>:
  _848 = ctx_845 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _848, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_840 > 1)
    goto <bb 154>;
  else
    goto <bb 156>;

  <bb 154>:
  goto <bb 157>;

  <bb 155>:

  <bb 156>:
  _854 = ctxes[i_abs_840];
  _855 = (int) _854;
  _856 = _855 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _856, 0);
  _857 = mdy_792 < 0;
  _858 = (int) _857;
  x264_cabac_encode_bypass (cb_8(D), _858);
  goto <bb 163>;

  <bb 157>:
  # i_182 = PHI <1(154), i_853(158)>
  # DEBUG i => i_182
  _850 = ctxes[i_182];
  _851 = (int) _850;
  _852 = _851 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _852, 1);
  i_853 = i_182 + 1;
  # DEBUG i => i_853
  # DEBUG i => i_853
  if (i_abs_840 > i_853)
    goto <bb 158>;
  else
    goto <bb 155>;

  <bb 158>:
  goto <bb 157>;

  <bb 159>:
  _859 = ctx_845 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _859, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 160>:
  # i_481 = PHI <i_864(161), 1(159)>
  # ivtmp_1817 = PHI <ivtmp_1832(161), 8(159)>
  # DEBUG i => i_481
  _861 = ctxes[i_481];
  _862 = (int) _861;
  _863 = _862 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _863, 1);
  i_864 = i_481 + 1;
  # DEBUG i => i_864
  # DEBUG i => i_864
  ivtmp_1832 = ivtmp_1817 - 1;
  if (ivtmp_1832 != 0)
    goto <bb 161>;
  else
    goto <bb 162>;

  <bb 161>:
  goto <bb 160>;

  <bb 162>:
  _865 = i_abs_840 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _865);
  _866 = mdy_792 < 0;
  _867 = (int) _866;
  x264_cabac_encode_bypass (cb_8(D), _867);

  <bb 163>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_787
  # DEBUG b => mdy_792
  _793 = mdx_787 & 65535;
  _794 = mdy_792 << 16;
  _795 = _793 + _794;
  _796 = (unsigned int) _795;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _797 = block_idx_y[_635];
  _798 = (int) _797;
  _799 = block_idx_x[_635];
  _800 = (int) _799;
  # DEBUG h => h_2(D)
  # DEBUG x => _800
  # DEBUG y => _798
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _801 = _800 + 12;
  _802 = _798 * 8;
  _803 = _801 + _802;
  _804 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_803];
  # DEBUG dst => _804
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_804] = _796;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _636 = _635 + 1;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _636
  # DEBUG width => 1
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _636, 1, &mvp);
  _734 = x264_scan8[_636];
  _735 = h_2(D)->mb.cache.mv[i_list_5(D)][_734][0];
  _736 = (int) _735;
  _737 = mvp[0];
  _738 = (int) _737;
  mdx_739 = _736 - _738;
  # DEBUG mdx => mdx_739
  _740 = h_2(D)->mb.cache.mv[i_list_5(D)][_734][1];
  _741 = (int) _740;
  _742 = mvp[1];
  _743 = (int) _742;
  mdy_744 = _741 - _743;
  # DEBUG mdy => mdy_744
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _636
  # DEBUG l => 0
  # DEBUG mvd => mdx_739
  _945 = _734 + -1;
  _946 = h_2(D)->mb.cache.mvd[i_list_5(D)][_945][0];
  _947 = (int) _946;
  _948 = ABS_EXPR <_947>;
  _949 = _734 + -8;
  _950 = h_2(D)->mb.cache.mvd[i_list_5(D)][_949][0];
  _951 = (int) _950;
  _952 = ABS_EXPR <_951>;
  amvd_953 = _948 + _952;
  # DEBUG amvd => amvd_953
  i_abs_954 = ABS_EXPR <mdx_739>;
  # DEBUG i_abs => i_abs_954
  # DEBUG ctxbase => 40
  _955 = amvd_953 > 2;
  _956 = (int) _955;
  _957 = amvd_953 > 32;
  _958 = (int) _957;
  ctx_959 = _956 + _958;
  # DEBUG ctx => ctx_959
  if (i_abs_954 == 0)
    goto <bb 164>;
  else
    goto <bb 165>;

  <bb 164>:
  _961 = ctx_959 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _961, 0);
  goto <bb 176>;

  <bb 165>:
  if (i_abs_954 <= 8)
    goto <bb 166>;
  else
    goto <bb 172>;

  <bb 166>:
  _962 = ctx_959 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _962, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_954 > 1)
    goto <bb 167>;
  else
    goto <bb 169>;

  <bb 167>:
  goto <bb 170>;

  <bb 168>:

  <bb 169>:
  _968 = ctxes[i_abs_954];
  _969 = (int) _968;
  _970 = _969 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _970, 0);
  _971 = mdx_739 < 0;
  _972 = (int) _971;
  x264_cabac_encode_bypass (cb_8(D), _972);
  goto <bb 176>;

  <bb 170>:
  # i_1313 = PHI <1(167), i_967(171)>
  # DEBUG i => i_1313
  _964 = ctxes[i_1313];
  _965 = (int) _964;
  _966 = _965 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _966, 1);
  i_967 = i_1313 + 1;
  # DEBUG i => i_967
  # DEBUG i => i_967
  if (i_abs_954 > i_967)
    goto <bb 171>;
  else
    goto <bb 168>;

  <bb 171>:
  goto <bb 170>;

  <bb 172>:
  _973 = ctx_959 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _973, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 173>:
  # i_1340 = PHI <i_978(174), 1(172)>
  # ivtmp_1942 = PHI <ivtmp_1957(174), 8(172)>
  # DEBUG i => i_1340
  _975 = ctxes[i_1340];
  _976 = (int) _975;
  _977 = _976 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _977, 1);
  i_978 = i_1340 + 1;
  # DEBUG i => i_978
  # DEBUG i => i_978
  ivtmp_1957 = ivtmp_1942 - 1;
  if (ivtmp_1957 != 0)
    goto <bb 174>;
  else
    goto <bb 175>;

  <bb 174>:
  goto <bb 173>;

  <bb 175>:
  _979 = i_abs_954 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _979);
  _980 = mdx_739 < 0;
  _981 = (int) _980;
  x264_cabac_encode_bypass (cb_8(D), _981);

  <bb 176>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _636
  # DEBUG l => 1
  # DEBUG mvd => mdy_744
  _908 = h_2(D)->mb.cache.mvd[i_list_5(D)][_945][1];
  _909 = (int) _908;
  _910 = ABS_EXPR <_909>;
  _912 = h_2(D)->mb.cache.mvd[i_list_5(D)][_949][1];
  _913 = (int) _912;
  _914 = ABS_EXPR <_913>;
  amvd_915 = _910 + _914;
  # DEBUG amvd => amvd_915
  i_abs_916 = ABS_EXPR <mdy_744>;
  # DEBUG i_abs => i_abs_916
  # DEBUG ctxbase => 47
  _917 = amvd_915 > 2;
  _918 = (int) _917;
  _919 = amvd_915 > 32;
  _920 = (int) _919;
  ctx_921 = _918 + _920;
  # DEBUG ctx => ctx_921
  if (i_abs_916 == 0)
    goto <bb 177>;
  else
    goto <bb 178>;

  <bb 177>:
  _923 = ctx_921 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _923, 0);
  goto <bb 189>;

  <bb 178>:
  if (i_abs_916 <= 8)
    goto <bb 179>;
  else
    goto <bb 185>;

  <bb 179>:
  _924 = ctx_921 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _924, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_916 > 1)
    goto <bb 180>;
  else
    goto <bb 182>;

  <bb 180>:
  goto <bb 183>;

  <bb 181>:

  <bb 182>:
  _930 = ctxes[i_abs_916];
  _931 = (int) _930;
  _932 = _931 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _932, 0);
  _933 = mdy_744 < 0;
  _934 = (int) _933;
  x264_cabac_encode_bypass (cb_8(D), _934);
  goto <bb 189>;

  <bb 183>:
  # i_1331 = PHI <1(180), i_929(184)>
  # DEBUG i => i_1331
  _926 = ctxes[i_1331];
  _927 = (int) _926;
  _928 = _927 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _928, 1);
  i_929 = i_1331 + 1;
  # DEBUG i => i_929
  # DEBUG i => i_929
  if (i_abs_916 > i_929)
    goto <bb 184>;
  else
    goto <bb 181>;

  <bb 184>:
  goto <bb 183>;

  <bb 185>:
  _935 = ctx_921 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _935, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 186>:
  # i_45 = PHI <i_940(187), 1(185)>
  # ivtmp_1919 = PHI <ivtmp_1934(187), 8(185)>
  # DEBUG i => i_45
  _937 = ctxes[i_45];
  _938 = (int) _937;
  _939 = _938 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _939, 1);
  i_940 = i_45 + 1;
  # DEBUG i => i_940
  # DEBUG i => i_940
  ivtmp_1934 = ivtmp_1919 - 1;
  if (ivtmp_1934 != 0)
    goto <bb 187>;
  else
    goto <bb 188>;

  <bb 187>:
  goto <bb 186>;

  <bb 188>:
  _941 = i_abs_916 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _941);
  _942 = mdy_744 < 0;
  _943 = (int) _942;
  x264_cabac_encode_bypass (cb_8(D), _943);

  <bb 189>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_739
  # DEBUG b => mdy_744
  _745 = mdx_739 & 65535;
  _746 = mdy_744 << 16;
  _747 = _745 + _746;
  _748 = (unsigned int) _747;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _749 = block_idx_y[_636];
  _750 = (int) _749;
  _751 = block_idx_x[_636];
  _752 = (int) _751;
  # DEBUG h => h_2(D)
  # DEBUG x => _752
  # DEBUG y => _750
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _753 = _752 + 12;
  _754 = _750 * 8;
  _755 = _753 + _754;
  _756 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_755];
  # DEBUG dst => _756
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_756] = _748;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _637 = _635 + 2;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _637
  # DEBUG width => 1
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _637, 1, &mvp);
  _686 = x264_scan8[_637];
  _687 = h_2(D)->mb.cache.mv[i_list_5(D)][_686][0];
  _688 = (int) _687;
  _689 = mvp[0];
  _690 = (int) _689;
  mdx_691 = _688 - _690;
  # DEBUG mdx => mdx_691
  _692 = h_2(D)->mb.cache.mv[i_list_5(D)][_686][1];
  _693 = (int) _692;
  _694 = mvp[1];
  _695 = (int) _694;
  mdy_696 = _693 - _695;
  # DEBUG mdy => mdy_696
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _637
  # DEBUG l => 0
  # DEBUG mvd => mdx_691
  _1021 = _686 + -1;
  _1022 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1021][0];
  _1023 = (int) _1022;
  _1024 = ABS_EXPR <_1023>;
  _1025 = _686 + -8;
  _1026 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1025][0];
  _1027 = (int) _1026;
  _1028 = ABS_EXPR <_1027>;
  amvd_1029 = _1024 + _1028;
  # DEBUG amvd => amvd_1029
  i_abs_1030 = ABS_EXPR <mdx_691>;
  # DEBUG i_abs => i_abs_1030
  # DEBUG ctxbase => 40
  _1031 = amvd_1029 > 2;
  _1032 = (int) _1031;
  _1033 = amvd_1029 > 32;
  _1034 = (int) _1033;
  ctx_1035 = _1032 + _1034;
  # DEBUG ctx => ctx_1035
  if (i_abs_1030 == 0)
    goto <bb 190>;
  else
    goto <bb 191>;

  <bb 190>:
  _1037 = ctx_1035 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1037, 0);
  goto <bb 202>;

  <bb 191>:
  if (i_abs_1030 <= 8)
    goto <bb 192>;
  else
    goto <bb 198>;

  <bb 192>:
  _1038 = ctx_1035 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1038, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1030 > 1)
    goto <bb 193>;
  else
    goto <bb 195>;

  <bb 193>:
  goto <bb 196>;

  <bb 194>:

  <bb 195>:
  _1044 = ctxes[i_abs_1030];
  _1045 = (int) _1044;
  _1046 = _1045 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1046, 0);
  _1047 = mdx_691 < 0;
  _1048 = (int) _1047;
  x264_cabac_encode_bypass (cb_8(D), _1048);
  goto <bb 202>;

  <bb 196>:
  # i_1296 = PHI <1(193), i_1043(197)>
  # DEBUG i => i_1296
  _1040 = ctxes[i_1296];
  _1041 = (int) _1040;
  _1042 = _1041 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1042, 1);
  i_1043 = i_1296 + 1;
  # DEBUG i => i_1043
  # DEBUG i => i_1043
  if (i_abs_1030 > i_1043)
    goto <bb 197>;
  else
    goto <bb 194>;

  <bb 197>:
  goto <bb 196>;

  <bb 198>:
  _1049 = ctx_1035 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1049, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 199>:
  # i_827 = PHI <i_1054(200), 1(198)>
  # ivtmp_1873 = PHI <ivtmp_1888(200), 8(198)>
  # DEBUG i => i_827
  _1051 = ctxes[i_827];
  _1052 = (int) _1051;
  _1053 = _1052 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1053, 1);
  i_1054 = i_827 + 1;
  # DEBUG i => i_1054
  # DEBUG i => i_1054
  ivtmp_1888 = ivtmp_1873 - 1;
  if (ivtmp_1888 != 0)
    goto <bb 200>;
  else
    goto <bb 201>;

  <bb 200>:
  goto <bb 199>;

  <bb 201>:
  _1055 = i_abs_1030 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _1055);
  _1056 = mdx_691 < 0;
  _1057 = (int) _1056;
  x264_cabac_encode_bypass (cb_8(D), _1057);

  <bb 202>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _637
  # DEBUG l => 1
  # DEBUG mvd => mdy_696
  _984 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1021][1];
  _985 = (int) _984;
  _986 = ABS_EXPR <_985>;
  _988 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1025][1];
  _989 = (int) _988;
  _990 = ABS_EXPR <_989>;
  amvd_991 = _986 + _990;
  # DEBUG amvd => amvd_991
  i_abs_992 = ABS_EXPR <mdy_696>;
  # DEBUG i_abs => i_abs_992
  # DEBUG ctxbase => 47
  _993 = amvd_991 > 2;
  _994 = (int) _993;
  _995 = amvd_991 > 32;
  _996 = (int) _995;
  ctx_997 = _994 + _996;
  # DEBUG ctx => ctx_997
  if (i_abs_992 == 0)
    goto <bb 203>;
  else
    goto <bb 204>;

  <bb 203>:
  _999 = ctx_997 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _999, 0);
  goto <bb 215>;

  <bb 204>:
  if (i_abs_992 <= 8)
    goto <bb 205>;
  else
    goto <bb 211>;

  <bb 205>:
  _1000 = ctx_997 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _1000, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_992 > 1)
    goto <bb 206>;
  else
    goto <bb 208>;

  <bb 206>:
  goto <bb 209>;

  <bb 207>:

  <bb 208>:
  _1006 = ctxes[i_abs_992];
  _1007 = (int) _1006;
  _1008 = _1007 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _1008, 0);
  _1009 = mdy_696 < 0;
  _1010 = (int) _1009;
  x264_cabac_encode_bypass (cb_8(D), _1010);
  goto <bb 215>;

  <bb 209>:
  # i_1305 = PHI <1(206), i_1005(210)>
  # DEBUG i => i_1305
  _1002 = ctxes[i_1305];
  _1003 = (int) _1002;
  _1004 = _1003 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _1004, 1);
  i_1005 = i_1305 + 1;
  # DEBUG i => i_1005
  # DEBUG i => i_1005
  if (i_abs_992 > i_1005)
    goto <bb 210>;
  else
    goto <bb 207>;

  <bb 210>:
  goto <bb 209>;

  <bb 211>:
  _1011 = ctx_997 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _1011, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 212>:
  # i_178 = PHI <i_1016(213), 1(211)>
  # ivtmp_1827 = PHI <ivtmp_1842(213), 8(211)>
  # DEBUG i => i_178
  _1013 = ctxes[i_178];
  _1014 = (int) _1013;
  _1015 = _1014 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _1015, 1);
  i_1016 = i_178 + 1;
  # DEBUG i => i_1016
  # DEBUG i => i_1016
  ivtmp_1842 = ivtmp_1827 - 1;
  if (ivtmp_1842 != 0)
    goto <bb 213>;
  else
    goto <bb 214>;

  <bb 213>:
  goto <bb 212>;

  <bb 214>:
  _1017 = i_abs_992 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _1017);
  _1018 = mdy_696 < 0;
  _1019 = (int) _1018;
  x264_cabac_encode_bypass (cb_8(D), _1019);

  <bb 215>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_691
  # DEBUG b => mdy_696
  _697 = mdx_691 & 65535;
  _698 = mdy_696 << 16;
  _699 = _697 + _698;
  _700 = (unsigned int) _699;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _701 = block_idx_y[_637];
  _702 = (int) _701;
  _703 = block_idx_x[_637];
  _704 = (int) _703;
  # DEBUG h => h_2(D)
  # DEBUG x => _704
  # DEBUG y => _702
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _705 = _704 + 12;
  _706 = _702 * 8;
  _707 = _705 + _706;
  _708 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_707];
  # DEBUG dst => _708
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_708] = _700;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  _638 = _635 + 3;
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _638
  # DEBUG width => 1
  # DEBUG height => 1
  x264_mb_predict_mv (h_2(D), i_list_5(D), _638, 1, &mvp);
  _19 = x264_scan8[_638];
  _639 = h_2(D)->mb.cache.mv[i_list_5(D)][_19][0];
  _640 = (int) _639;
  _641 = mvp[0];
  _642 = (int) _641;
  mdx_643 = _640 - _642;
  # DEBUG mdx => mdx_643
  _644 = h_2(D)->mb.cache.mv[i_list_5(D)][_19][1];
  _645 = (int) _644;
  _646 = mvp[1];
  _647 = (int) _646;
  mdy_648 = _645 - _647;
  # DEBUG mdy => mdy_648
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _638
  # DEBUG l => 0
  # DEBUG mvd => mdx_643
  _1097 = _19 + -1;
  _1098 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1097][0];
  _1099 = (int) _1098;
  _1100 = ABS_EXPR <_1099>;
  _1101 = _19 + -8;
  _1102 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1101][0];
  _1103 = (int) _1102;
  _1104 = ABS_EXPR <_1103>;
  amvd_1105 = _1100 + _1104;
  # DEBUG amvd => amvd_1105
  i_abs_1106 = ABS_EXPR <mdx_643>;
  # DEBUG i_abs => i_abs_1106
  # DEBUG ctxbase => 40
  _1107 = amvd_1105 > 2;
  _1108 = (int) _1107;
  _1109 = amvd_1105 > 32;
  _1110 = (int) _1109;
  ctx_1111 = _1108 + _1110;
  # DEBUG ctx => ctx_1111
  if (i_abs_1106 == 0)
    goto <bb 216>;
  else
    goto <bb 217>;

  <bb 216>:
  _1113 = ctx_1111 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1113, 0);
  goto <bb 228>;

  <bb 217>:
  if (i_abs_1106 <= 8)
    goto <bb 218>;
  else
    goto <bb 224>;

  <bb 218>:
  _1114 = ctx_1111 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1114, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1106 > 1)
    goto <bb 219>;
  else
    goto <bb 221>;

  <bb 219>:
  goto <bb 222>;

  <bb 220>:

  <bb 221>:
  _1120 = ctxes[i_abs_1106];
  _1121 = (int) _1120;
  _1122 = _1121 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1122, 0);
  _1123 = mdx_643 < 0;
  _1124 = (int) _1123;
  x264_cabac_encode_bypass (cb_8(D), _1124);
  goto <bb 228>;

  <bb 222>:
  # i_1210 = PHI <1(219), i_1119(223)>
  # DEBUG i => i_1210
  _1116 = ctxes[i_1210];
  _1117 = (int) _1116;
  _1118 = _1117 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1118, 1);
  i_1119 = i_1210 + 1;
  # DEBUG i => i_1119
  # DEBUG i => i_1119
  if (i_abs_1106 > i_1119)
    goto <bb 223>;
  else
    goto <bb 220>;

  <bb 223>:
  goto <bb 222>;

  <bb 224>:
  _1125 = ctx_1111 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1125, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 225>:
  # i_237 = PHI <i_1130(226), 1(224)>
  # ivtmp_1929 = PHI <ivtmp_1952(226), 8(224)>
  # DEBUG i => i_237
  _1127 = ctxes[i_237];
  _1128 = (int) _1127;
  _1129 = _1128 + 40;
  x264_cabac_encode_decision_asm (cb_8(D), _1129, 1);
  i_1130 = i_237 + 1;
  # DEBUG i => i_1130
  # DEBUG i => i_1130
  ivtmp_1952 = ivtmp_1929 - 1;
  if (ivtmp_1952 != 0)
    goto <bb 226>;
  else
    goto <bb 227>;

  <bb 226>:
  goto <bb 225>;

  <bb 227>:
  _1131 = i_abs_1106 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _1131);
  _1132 = mdx_643 < 0;
  _1133 = (int) _1132;
  x264_cabac_encode_bypass (cb_8(D), _1133);

  <bb 228>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_2(D)
  # DEBUG cb => cb_8(D)
  # DEBUG i_list => i_list_5(D)
  # DEBUG idx => _638
  # DEBUG l => 1
  # DEBUG mvd => mdy_648
  _1060 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1097][1];
  _1061 = (int) _1060;
  _1062 = ABS_EXPR <_1061>;
  _1064 = h_2(D)->mb.cache.mvd[i_list_5(D)][_1101][1];
  _1065 = (int) _1064;
  _1066 = ABS_EXPR <_1065>;
  amvd_1067 = _1062 + _1066;
  # DEBUG amvd => amvd_1067
  i_abs_1068 = ABS_EXPR <mdy_648>;
  # DEBUG i_abs => i_abs_1068
  # DEBUG ctxbase => 47
  _1069 = amvd_1067 > 2;
  _1070 = (int) _1069;
  _1071 = amvd_1067 > 32;
  _1072 = (int) _1071;
  ctx_1073 = _1070 + _1072;
  # DEBUG ctx => ctx_1073
  if (i_abs_1068 == 0)
    goto <bb 229>;
  else
    goto <bb 230>;

  <bb 229>:
  _1075 = ctx_1073 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _1075, 0);
  goto <bb 241>;

  <bb 230>:
  if (i_abs_1068 <= 8)
    goto <bb 231>;
  else
    goto <bb 237>;

  <bb 231>:
  _1076 = ctx_1073 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _1076, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1068 > 1)
    goto <bb 232>;
  else
    goto <bb 234>;

  <bb 232>:
  goto <bb 235>;

  <bb 233>:

  <bb 234>:
  _1082 = ctxes[i_abs_1068];
  _1083 = (int) _1082;
  _1084 = _1083 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _1084, 0);
  _1085 = mdy_648 < 0;
  _1086 = (int) _1085;
  x264_cabac_encode_bypass (cb_8(D), _1086);
  goto <bb 241>;

  <bb 235>:
  # i_763 = PHI <1(232), i_1081(236)>
  # DEBUG i => i_763
  _1078 = ctxes[i_763];
  _1079 = (int) _1078;
  _1080 = _1079 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _1080, 1);
  i_1081 = i_763 + 1;
  # DEBUG i => i_1081
  # DEBUG i => i_1081
  if (i_abs_1068 > i_1081)
    goto <bb 236>;
  else
    goto <bb 233>;

  <bb 236>:
  goto <bb 235>;

  <bb 237>:
  _1087 = ctx_1073 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _1087, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 238>:
  # i_225 = PHI <i_1092(239), 1(237)>
  # ivtmp_1837 = PHI <ivtmp_1883(239), 8(237)>
  # DEBUG i => i_225
  _1089 = ctxes[i_225];
  _1090 = (int) _1089;
  _1091 = _1090 + 47;
  x264_cabac_encode_decision_asm (cb_8(D), _1091, 1);
  i_1092 = i_225 + 1;
  # DEBUG i => i_1092
  # DEBUG i => i_1092
  ivtmp_1883 = ivtmp_1837 - 1;
  if (ivtmp_1883 != 0)
    goto <bb 239>;
  else
    goto <bb 240>;

  <bb 239>:
  goto <bb 238>;

  <bb 240>:
  _1093 = i_abs_1068 + -9;
  x264_cabac_encode_ue_bypass (cb_8(D), 3, _1093);
  _1094 = mdy_648 < 0;
  _1095 = (int) _1094;
  x264_cabac_encode_bypass (cb_8(D), _1095);

  <bb 241>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_643
  # DEBUG b => mdy_648
  _649 = mdx_643 & 65535;
  _650 = mdy_648 << 16;
  _651 = _649 + _650;
  _652 = (unsigned int) _651;
  # DEBUG a => NULL
  # DEBUG b => NULL
  _653 = block_idx_y[_638];
  _654 = (int) _653;
  _655 = block_idx_x[_638];
  _656 = (int) _655;
  # DEBUG h => h_2(D)
  # DEBUG x => _656
  # DEBUG y => _654
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG i_list => i_list_5(D)
  # DEBUG mv => NULL
  _657 = _656 + 12;
  _658 = _654 * 8;
  _659 = _657 + _658;
  _660 = &h_2(D)->mb.cache.mvd[i_list_5(D)][_659];
  # DEBUG dst => _660
  # DEBUG width => 1
  # DEBUG height => 1
  # DEBUG val => NULL
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint32_t *)_660] = _652;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};

<L14>:
  return;

}



;; Function x264_macroblock_write_cabac (x264_macroblock_write_cabac, funcdef_no=134, decl_uid=5783, cgraph_uid=134, symbol_order=185)


Analyzing loop at encoder/cabac.c:1027
encoder/cabac.c:1027:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:1027:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:1027:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 13
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:1027:13: note: === vect_analyze_data_refs ===
encoder/cabac.c:1027:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:1027:13: note: bad data references.

Analyzing loop at encoder/cabac.c:1004
encoder/cabac.c:1004:17: note: ===== analyze_loop_nest =====
encoder/cabac.c:1004:17: note: === vect_analyze_loop_form ===
encoder/cabac.c:1004:17: note: === get_loop_niters ===
Analyzing # of iterations of loop 12
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
encoder/cabac.c:1004:17: note: === vect_analyze_data_refs ===
encoder/cabac.c:1004:17: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:1004:17: note: bad data references.

Analyzing loop at encoder/cabac.c:1009
encoder/cabac.c:1009:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:1009:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:1009:13: note: not vectorized: control flow in loop.
encoder/cabac.c:1009:13: note: bad loop form.

Analyzing loop at encoder/cabac.c:1015
encoder/cabac.c:1015:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:1015:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:1015:13: note: not vectorized: control flow in loop.
encoder/cabac.c:1015:13: note: bad loop form.

Analyzing loop at encoder/cabac.c:331
encoder/cabac.c:331:14: note: ===== analyze_loop_nest =====
encoder/cabac.c:331:14: note: === vect_analyze_loop_form ===
encoder/cabac.c:331:14: note: not vectorized: control flow in loop.
encoder/cabac.c:331:14: note: bad loop form.

Analyzing loop at ./common/macroblock.h:490
./common/macroblock.h:490:38: note: ===== analyze_loop_nest =====
./common/macroblock.h:490:38: note: === vect_analyze_loop_form ===
./common/macroblock.h:490:38: note: not vectorized: control flow in loop.
./common/macroblock.h:490:38: note: bad loop form.

Analyzing loop at ./common/macroblock.h:500
./common/macroblock.h:500:38: note: ===== analyze_loop_nest =====
./common/macroblock.h:500:38: note: === vect_analyze_loop_form ===
./common/macroblock.h:500:38: note: not vectorized: control flow in loop.
./common/macroblock.h:500:38: note: bad loop form.

Analyzing loop at encoder/cabac.c:839
encoder/cabac.c:839:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:839:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:839:13: note: not vectorized: control flow in loop.
encoder/cabac.c:839:13: note: bad loop form.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 21
  exit condition [2, + , 1](no_overflow) < i_abs_551
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_551 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_551 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1996]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_21
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 22
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_826]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_22
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 23
  exit condition [2, + , 1](no_overflow) < i_abs_589
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_589 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_589 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_5]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_23
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 24
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_787]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_24
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 37
  exit condition [2, + , 1](no_overflow) < i_abs_797
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_797 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_797 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2027]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_37
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 38
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1972]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_38
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 39
  exit condition [2, + , 1](no_overflow) < i_abs_835
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_835 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_835 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2029]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_39
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 40
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1750]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_40
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 33
  exit condition [2, + , 1](no_overflow) < i_abs_721
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_721 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_721 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2068]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_33
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 34
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1947]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_34
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 35
  exit condition [2, + , 1](no_overflow) < i_abs_759
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_759 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_759 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2028]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_35
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 36
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2089]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_36
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 53
  exit condition [2, + , 1](no_overflow) < i_abs_1043
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1043 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1043 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2000]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_53
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 54
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_27]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_54
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 55
  exit condition [2, + , 1](no_overflow) < i_abs_1081
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1081 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1081 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2001]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_55
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 56
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1580]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_56
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 49
  exit condition [2, + , 1](no_overflow) < i_abs_967
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_967 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_967 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1991]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_49
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 50
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1886]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_50
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 51
  exit condition [2, + , 1](no_overflow) < i_abs_1005
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1005 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1005 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2004]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_51
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 52
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_319]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_52
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:897
encoder/cabac.c:897:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:897:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:897:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cabac.c:897:9: note: === vect_analyze_data_refs ===
encoder/cabac.c:897:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:897:9: note: bad data references.

Analyzing loop at encoder/cabac.c:920
encoder/cabac.c:920:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:920:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:920:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 6
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cabac.c:920:9: note: === vect_analyze_data_refs ===
encoder/cabac.c:920:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:920:9: note: bad data references.

Analyzing loop at encoder/cabac.c:918
encoder/cabac.c:918:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:918:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:918:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cabac.c:918:9: note: === vect_analyze_data_refs ===
encoder/cabac.c:918:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:918:9: note: bad data references.

Analyzing loop at encoder/cabac.c:909
encoder/cabac.c:909:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:909:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:909:9: note: ===== analyze_loop_nest_1 =====
encoder/cabac.c:909:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:909:9: note: not vectorized: control flow in loop.
encoder/cabac.c:909:9: note: bad inner-loop form.
encoder/cabac.c:909:9: note: not vectorized: Bad inner loop.
encoder/cabac.c:909:9: note: bad loop form.

Analyzing loop at encoder/cabac.c:913
encoder/cabac.c:913:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:913:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:913:13: note: not vectorized: control flow in loop.
encoder/cabac.c:913:13: note: bad loop form.

Analyzing loop at encoder/cabac.c:957
encoder/cabac.c:957:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:957:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:957:9: note: not vectorized: multiple nested loops.
encoder/cabac.c:957:9: note: bad loop form.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 61
  exit condition [2, + , 1](no_overflow) < i_abs_1162
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1162 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1162 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2109]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_61
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 62
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2104]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_62
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 63
  exit condition [2, + , 1](no_overflow) < i_abs_1200
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1200 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1200 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2116]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_63
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 64
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1953]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_64
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 77
  exit condition [2, + , 1](no_overflow) < i_abs_1408
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1408 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1408 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_49]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_77
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 78
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_927]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_78
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 79
  exit condition [2, + , 1](no_overflow) < i_abs_1446
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1446 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1446 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_754]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_79
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 80
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_925]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_80
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 69
  exit condition [2, + , 1](no_overflow) < i_abs_1285
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1285 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1285 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_2099]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_69
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 70
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1884]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_70
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:473
encoder/cabac.c:473:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:473:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:473:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 71
  exit condition [2, + , 1](no_overflow) < i_abs_1323
  bounds on difference of bases: 0 ... 6
  result:
    # of iterations (unsigned int) i_abs_1323 + 4294967294, bounded by 6
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:473:13: note: Symbolic number of iterations is (unsigned int) i_abs_1323 + 4294967295
encoder/cabac.c:473:13: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_1618]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_71
encoder/cabac.c:473:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:473:13: note: bad data references.

Analyzing loop at encoder/cabac.c:489
encoder/cabac.c:489:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:489:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:489:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 72
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cabac.c:489:9: note: === vect_analyze_data_refs ===
Creating dr for ctxes[i_958]
analyze_innermost: Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &ctxes
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: MEM[(uint8_t[9] *)&ctxes]
	Access function 0: {1, +, 1}_72
encoder/cabac.c:489:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:489:9: note: bad data references.

Analyzing loop at encoder/cabac.c:935
encoder/cabac.c:935:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:935:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:935:9: note: not vectorized: control flow in loop.
encoder/cabac.c:935:9: note: bad loop form.

Analyzing loop at encoder/cabac.c:812
encoder/cabac.c:812:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:812:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:812:9: note: not vectorized: latch block not empty.
encoder/cabac.c:812:9: note: bad loop form.

Analyzing loop at encoder/cabac.c:809
encoder/cabac.c:809:9: note: ===== analyze_loop_nest =====
encoder/cabac.c:809:9: note: === vect_analyze_loop_form ===
encoder/cabac.c:809:9: note: not vectorized: latch block not empty.
encoder/cabac.c:809:9: note: bad loop form.

Analyzing loop at encoder/cabac.c:200
encoder/cabac.c:200:13: note: ===== analyze_loop_nest =====
encoder/cabac.c:200:13: note: === vect_analyze_loop_form ===
encoder/cabac.c:200:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 16
  exit condition [4, + , 1](no_overflow) < _1994
  bounds on difference of bases: 0 ... 2147483643
  result:
    # of iterations (unsigned int) _1994 + 4294967292, bounded by 2147483643
Applying pattern match.pd:494, generic-match.c:3721
encoder/cabac.c:200:13: note: Symbolic number of iterations is (unsigned int) _1994 + 4294967293
encoder/cabac.c:200:13: note: === vect_analyze_data_refs ===
Creating dr for i_mb_bits[idx_411][i_609]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &i_mb_bits
	offset from base address: (ssizetype) ((sizetype) ((int) i_mb_type_59 * 3 + _409) * 28)
	constant offset from base address: -1052
	step: 4
	aligned to: 4
	base_object: MEM[(int[27][7] *)&i_mb_bits]
	Access function 0: {3, +, 1}_16
	Access function 1: idx_411
encoder/cabac.c:200:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cabac.c:200:13: note: bad data references.
encoder/cabac.c:787:6: note: vectorized 0 loops in function.
x264_macroblock_write_cabac (struct x264_t * h, struct x264_cabac_t * cb)
{
  int i_mbn_xy;
  int i_dqp;
  int ctx;
  int val;
  int p;
  int i;
  int D.8500;
  static const uint8_t partition_tab[19] = {0, 0, 0, 0, 1, 2, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0};
  int cbp;
  int cbp_l;
  int cbp_t;
  int cbp_a;
  int cbp_b;
  int ctx;
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  const int amvd;
  const int i_abs;
  int ctx;
  int i;
  static const uint8_t ctxes[9] = {0, 3, 4, 5, 6, 6, 6, 6, 6};
  uint64_t val64;
  int dx;
  int dy;
  int mdy;
  int mdx;
  int16_t mvp[2];
  const int i_mode;
  int ctx;
  int i_mode;
  int i_pred;
  int i_pred;
  int i_pred;
  const int i_mb_type;
  int ctx;
  int ctx;
  const int idx;
  int i;
  static const int i_mb_bits[27][7] = {{1, 1, 0, 0, 0, 1}, {1, 1, 0, 0, 1, 0}, {1, 0, 0}, {1, 1, 0, 1, 0, 1}, {1, 1, 0, 1, 1, 0}, {0}, {1, 1, 1, 0, 0, 0, 0}, {1, 1, 1, 0, 0, 0, 1}, {0}, {1, 1, 0, 1, 1, 1}, {1, 1, 1, 1, 1, 0}, {0}, {1, 1, 0, 0, 1, 1}, {1, 1, 0, 1, 0, 0}, {1, 0, 1}, {1, 1, 1, 0, 0, 1, 0}, {1, 1, 1, 0, 0, 1, 1}, {0}, {1, 1, 1, 0, 1, 0, 0}, {1, 1, 1, 0, 1, 0, 1}, {0}, {1, 1, 1, 0, 1, 1, 0}, {1, 1, 1, 0, 1, 1, 1}, {0}, {1, 1, 1, 1, 0, 0, 0}, {1, 1, 1, 1, 0, 0, 1}, {1, 1, 0, 0, 0, 0}};
  static const int i_mb_len[27] = {6, 6, 3, 6, 6, 0, 7, 7, 0, 6, 6, 0, 6, 6, 3, 7, 7, 0, 7, 7, 0, 7, 7, 0, 7, 7, 6};
  int ctx;
  const int ma;
  const int mb;
  const int m;
  int ctx;
  int b_list[2][2];
  const int i_mode;
  int di;
  int i;
  int i_list;
  const int i_mb_type;
  int _10;
  long int _61;
  unsigned int i_mb_type.8_62;
  uint8_t * _63;
  int _65;
  int _66;
  int _67;
  uint8_t * _69;
  uint8_t * _71;
  uint8_t * _72;
  uint8_t * _74;
  int _75;
  sizetype _76;
  uint8_t * _77;
  int _79;
  sizetype _80;
  uint8_t * _81;
  uint8_t * _84;
  uint8_t * _85;
  uint8_t * _87;
  int _88;
  sizetype _89;
  uint8_t * _90;
  int _92;
  sizetype _93;
  uint8_t * _94;
  uint8_t * _95;
  uint8_t * _97;
  uint8_t * _98;
  void (*<Tf94>) (uint8_t *, int, uint8_t *, int, int) _104;
  uint8_t * _105;
  uint8_t * _106;
  void (*<Tf94>) (uint8_t *, int, uint8_t *, int, int) _108;
  uint8_t * _109;
  uint8_t * _110;
  void (*<Tf94>) (uint8_t *, int, uint8_t *, int, int) _112;
  uint8_t * _113;
  uint8_t * _114;
  long int _116;
  int _118;
  int _119;
  int _120;
  struct x264_pps_t * _123;
  int _124;
  int _125;
  signed char _128;
  int _129;
  int _130;
  signed char _131;
  int _133;
  int _138;
  _Bool _142;
  int _143;
  unsigned int _147;
  int _148;
  int _151;
  int _153;
  short int _154;
  int _155;
  int _156;
  int _157;
  short int _158;
  int _159;
  int _166;
  int _168;
  int _170;
  int _172;
  int _174;
  int _176;
  int _178;
  unsigned char _179;
  int _180;
  unsigned int ivtmp_191;
  int iftmp.6_195;
  int iftmp.6_196;
  int _199;
  int _201;
  int _203;
  int _206;
  int _208;
  int _212;
  int _214;
  int _216;
  int _219;
  int _221;
  int _225;
  int _226;
  int _227;
  struct x264_pps_t * _229;
  signed char _231;
  int _232;
  uint8_t * _233;
  int _234;
  int _235;
  int16_t[16] * _237;
  int _239;
  int16_t[16] * _240;
  int16_t * _241;
  int _244;
  int _245;
  int _246;
  int _247;
  int16_t[64] * _248;
  int _251;
  int _252;
  int _253;
  int _254;
  int16_t[16] * _255;
  int _258;
  int _259;
  int16_t[4] * _260;
  int16_t[4] * _262;
  int _265;
  int16_t[16] * _266;
  int16_t * _267;
  int _272;
  int _273;
  int _274;
  int _276;
  int _277;
  int _278;
  int _279;
  long int _280;
  int _281;
  long int _282;
  long int _283;
  unsigned int _284;
  unsigned int _285;
  int _286;
  unsigned int _287;
  unsigned int _288;
  int _289;
  uint8_t * _290;
  long int _291;
  uint8_t * _292;
  long int _293;
  long int _294;
  int _295;
  long int _296;
  long int _297;
  unsigned int _298;
  unsigned int _299;
  int _300;
  unsigned int _301;
  unsigned int _302;
  int _303;
  uint8_t * _304;
  long int _305;
  uint8_t * _306;
  long int _307;
  long int _308;
  int _309;
  long int _310;
  long int _311;
  unsigned int _312;
  unsigned int _313;
  int _314;
  unsigned int _315;
  unsigned int _316;
  int _317;
  int _320;
  signed char _321;
  int _323;
  signed char _324;
  int _326;
  signed char _327;
  int _328;
  signed char _329;
  signed char _330;
  int _332;
  uint8_t * _333;
  long int _334;
  uint8_t * _335;
  long int _336;
  long int _337;
  int _338;
  long int _339;
  long int _340;
  unsigned int _341;
  unsigned int _342;
  int _343;
  unsigned int _344;
  unsigned int _345;
  int _346;
  long int _349;
  uint8_t * _350;
  long int _351;
  long int _352;
  int _353;
  long int _354;
  long int _355;
  unsigned int _356;
  unsigned int _357;
  int _358;
  unsigned int _359;
  unsigned int _360;
  int _361;
  int _368;
  int _369;
  int _370;
  int8_t * _371;
  int _372;
  int _373;
  int _374;
  sizetype _375;
  int8_t * _376;
  signed char _377;
  _Bool _378;
  _Bool _379;
  _Bool _380;
  int _381;
  int _382;
  int _383;
  int _384;
  int _385;
  int _386;
  int _390;
  int _391;
  int _392;
  _Bool _393;
  _Bool _394;
  _Bool _395;
  int _396;
  _Bool _397;
  _Bool _398;
  _Bool _399;
  int _403;
  int _404;
  unsigned int i_mb_type.7_405;
  int _406;
  int _407;
  int _408;
  int _409;
  int _410;
  int _412;
  int _413;
  int _414;
  int _415;
  int _416;
  int _418;
  int _421;
  unsigned char _422;
  int _424;
  _Bool _425;
  int _426;
  int _427;
  int _428;
  _Bool _429;
  int _430;
  int _431;
  unsigned char _432;
  int _433;
  unsigned int i_mb_type.8_434;
  int _435;
  unsigned char _436;
  int _438;
  _Bool _439;
  int _440;
  int _441;
  int _442;
  _Bool _443;
  int _444;
  int _445;
  unsigned char _446;
  int _447;
  int _449;
  unsigned char _450;
  int _452;
  _Bool _453;
  int _454;
  int _455;
  int _456;
  _Bool _457;
  int _458;
  int _459;
  unsigned char _460;
  int _461;
  int _464;
  int _465;
  int _466;
  int _467;
  int _468;
  unsigned char _469;
  unsigned int _471;
  unsigned int _472;
  int8_t * _473;
  int _474;
  sizetype _475;
  sizetype _476;
  int8_t * _477;
  signed char _478;
  unsigned int _479;
  int8_t * _480;
  int _481;
  sizetype _482;
  int8_t * _483;
  signed char _484;
  _Bool _487;
  int _488;
  int _490;
  _Bool _491;
  int _492;
  _Bool _493;
  int _494;
  short int _495;
  int _496;
  short int _497;
  int _498;
  short int _500;
  int _501;
  short int _502;
  int _503;
  int _505;
  int _506;
  int _507;
  unsigned int _508;
  unsigned int ivtmp_516;
  long unsigned int _526;
  long unsigned int _527;
  unsigned int ivtmp_532;
  short int _543;
  int _544;
  int _545;
  short int _547;
  int _548;
  int _549;
  _Bool _552;
  int _553;
  _Bool _554;
  int _555;
  int _558;
  int _559;
  unsigned char _561;
  int _562;
  int _563;
  unsigned char _565;
  int _566;
  int _567;
  _Bool _568;
  int _569;
  int _570;
  int8_t * _571;
  unsigned char _572;
  int _573;
  int _574;
  int _576;
  _Bool _577;
  int _578;
  short int _581;
  int _582;
  int _583;
  short int _585;
  int _586;
  int _587;
  _Bool _590;
  int _591;
  _Bool _592;
  int _593;
  int _596;
  int _597;
  unsigned char _599;
  int _600;
  int _601;
  unsigned char _603;
  int _604;
  int _605;
  _Bool _606;
  int _607;
  int _608;
  unsigned char _610;
  int _611;
  int _612;
  int _614;
  _Bool _615;
  int _616;
  short int _618;
  int _619;
  short int _620;
  int _621;
  short int _623;
  int _624;
  short int _625;
  int _626;
  int _628;
  int _629;
  int _630;
  unsigned int _631;
  unsigned int ivtmp_639;
  long unsigned int _649;
  long unsigned int _650;
  unsigned int ivtmp_654;
  short int _665;
  int _666;
  short int _667;
  int _668;
  short int _670;
  int _671;
  short int _672;
  int _673;
  int _675;
  int _676;
  int _677;
  unsigned int _678;
  unsigned int ivtmp_686;
  long unsigned int _696;
  long unsigned int _697;
  unsigned int ivtmp_701;
  short int _713;
  int _714;
  int _715;
  short int _717;
  int _718;
  int _719;
  _Bool _722;
  int _723;
  _Bool _724;
  int _725;
  int _727;
  int _728;
  int _729;
  unsigned char _731;
  int _732;
  int _733;
  unsigned char _735;
  int _736;
  int _737;
  _Bool _738;
  int _739;
  int _740;
  unsigned char _742;
  int _743;
  int _744;
  int _746;
  _Bool _747;
  int _748;
  short int _751;
  int _752;
  int _753;
  short int _755;
  int _756;
  int _757;
  _Bool _760;
  int _761;
  _Bool _762;
  int _763;
  int _766;
  int _767;
  unsigned char _769;
  int _770;
  int _771;
  unsigned char _773;
  int _774;
  int _775;
  _Bool _776;
  int _777;
  int _778;
  unsigned char _780;
  int _781;
  int _782;
  int _784;
  _Bool _785;
  int _786;
  _Bool _788;
  short int _789;
  int _790;
  int _791;
  short int _793;
  int _794;
  int _795;
  _Bool _798;
  int _799;
  _Bool _800;
  int _801;
  int _804;
  int _805;
  unsigned char _807;
  int _808;
  int _809;
  unsigned char _811;
  int _812;
  int _813;
  _Bool _814;
  int _815;
  int _816;
  unsigned char _818;
  int _819;
  int _820;
  int _822;
  _Bool _823;
  int _824;
  short int _827;
  int _828;
  int _829;
  short int _831;
  int _832;
  int _833;
  _Bool _836;
  int _837;
  _Bool _838;
  int _839;
  int _842;
  int _843;
  unsigned char _845;
  int _846;
  int _847;
  unsigned char _849;
  int _850;
  int _851;
  _Bool _852;
  int _853;
  int _854;
  unsigned char _856;
  int _857;
  int _858;
  int _860;
  _Bool _861;
  int _862;
  short int _864;
  int _865;
  short int _866;
  int _867;
  short int _869;
  int _870;
  short int _871;
  int _872;
  int _874;
  int _875;
  int _876;
  unsigned int _877;
  unsigned int ivtmp_885;
  sizetype _888;
  long unsigned int _895;
  long unsigned int _896;
  unsigned int ivtmp_899;
  unsigned int ivtmp_905;
  short int _911;
  int _912;
  short int _913;
  int _914;
  short int _916;
  int _917;
  short int _918;
  int _919;
  int _921;
  int _922;
  int _923;
  unsigned int _924;
  unsigned int ivtmp_932;
  long unsigned int _942;
  long unsigned int _943;
  short int _959;
  int _960;
  int _961;
  short int _963;
  int _964;
  int _965;
  _Bool _968;
  int _969;
  _Bool _970;
  int _971;
  int _973;
  int _974;
  int _975;
  unsigned char _977;
  int _978;
  int _979;
  unsigned char _981;
  int _982;
  int _983;
  _Bool _984;
  int _985;
  int _986;
  unsigned char _988;
  int _989;
  int _990;
  int _992;
  _Bool _993;
  int _994;
  short int _997;
  int _998;
  int _999;
  short int _1001;
  int _1002;
  int _1003;
  _Bool _1006;
  int _1007;
  _Bool _1008;
  int _1009;
  int _1012;
  int _1013;
  unsigned char _1015;
  int _1016;
  int _1017;
  unsigned char _1019;
  int _1020;
  int _1021;
  _Bool _1022;
  int _1023;
  int _1024;
  unsigned char _1026;
  int _1027;
  int _1028;
  int _1030;
  _Bool _1031;
  int _1032;
  short int _1035;
  int _1036;
  int _1037;
  short int _1039;
  int _1040;
  int _1041;
  _Bool _1044;
  int _1045;
  _Bool _1046;
  int _1047;
  int _1050;
  int _1051;
  unsigned char _1053;
  int _1054;
  int _1055;
  unsigned char _1057;
  int _1058;
  int _1059;
  _Bool _1060;
  int _1061;
  int _1062;
  unsigned char _1064;
  int _1065;
  int _1066;
  int _1068;
  _Bool _1069;
  int _1070;
  short int _1073;
  int _1074;
  int _1075;
  short int _1077;
  int _1078;
  int _1079;
  _Bool _1082;
  int _1083;
  _Bool _1084;
  int _1085;
  int _1088;
  int _1089;
  unsigned char _1091;
  int _1092;
  int _1093;
  unsigned char _1095;
  int _1096;
  int _1097;
  _Bool _1098;
  int _1099;
  int _1100;
  unsigned char _1102;
  int _1103;
  int _1104;
  int _1106;
  _Bool _1107;
  int _1108;
  int _1109;
  short int _1111;
  int _1112;
  short int _1113;
  int _1114;
  int _1116;
  int _1117;
  int _1118;
  unsigned int _1119;
  int16_t[2] * _1127;
  long unsigned int _1137;
  long unsigned int _1138;
  unsigned int ivtmp_1146;
  short int _1154;
  int _1155;
  int _1156;
  short int _1158;
  int _1159;
  int _1160;
  _Bool _1163;
  int _1164;
  _Bool _1165;
  int _1166;
  int _1169;
  int _1170;
  unsigned char _1172;
  int _1173;
  int _1174;
  unsigned char _1176;
  int _1177;
  int _1178;
  _Bool _1179;
  int _1180;
  int _1181;
  unsigned char _1183;
  int _1184;
  int _1185;
  int _1187;
  _Bool _1188;
  int _1189;
  short int _1192;
  int _1193;
  int _1194;
  short int _1196;
  int _1197;
  int _1198;
  _Bool _1201;
  int _1202;
  _Bool _1203;
  int _1204;
  int _1207;
  int _1208;
  unsigned char _1210;
  int _1211;
  int _1212;
  unsigned char _1214;
  int _1215;
  int _1216;
  _Bool _1217;
  int _1218;
  int _1219;
  unsigned char _1221;
  int _1222;
  int _1223;
  int _1225;
  _Bool _1226;
  int _1227;
  short int _1229;
  int _1230;
  short int _1231;
  int _1232;
  short int _1234;
  int _1235;
  short int _1236;
  int _1237;
  int _1239;
  int _1240;
  int _1241;
  unsigned int _1242;
  int16_t[2] * _1250;
  unsigned int ivtmp_1258;
  long unsigned int _1260;
  long unsigned int _1261;
  sizetype _1263;
  unsigned int ivtmp_1265;
  unsigned int ivtmp_1267;
  short int _1277;
  int _1278;
  int _1279;
  short int _1281;
  int _1282;
  int _1283;
  _Bool _1286;
  int _1287;
  _Bool _1288;
  int _1289;
  int _1292;
  int _1293;
  unsigned char _1295;
  int _1296;
  int _1297;
  unsigned char _1299;
  int _1300;
  int _1301;
  _Bool _1302;
  int _1303;
  int _1304;
  unsigned char _1306;
  int _1307;
  int _1308;
  int _1310;
  _Bool _1311;
  int _1312;
  short int _1315;
  int _1316;
  int _1317;
  unsigned int ivtmp_1318;
  short int _1319;
  int _1320;
  int _1321;
  _Bool _1324;
  int _1325;
  _Bool _1326;
  int _1327;
  int _1330;
  int _1331;
  unsigned char _1333;
  int _1334;
  int _1335;
  unsigned char _1337;
  int _1338;
  int _1339;
  _Bool _1340;
  int _1341;
  int _1342;
  unsigned char _1344;
  int _1345;
  int _1346;
  int _1348;
  _Bool _1349;
  int _1350;
  short int _1352;
  int _1353;
  short int _1354;
  int _1355;
  short int _1357;
  int _1358;
  short int _1359;
  int _1360;
  int _1362;
  int _1363;
  int _1364;
  unsigned int _1365;
  int16_t[2] * _1373;
  long unsigned int _1383;
  long unsigned int _1384;
  short int _1400;
  int _1401;
  int _1402;
  short int _1404;
  int _1405;
  int _1406;
  _Bool _1409;
  int _1410;
  _Bool _1411;
  int _1412;
  int _1415;
  int _1416;
  unsigned char _1418;
  int _1419;
  int _1420;
  unsigned char _1422;
  int _1423;
  int _1424;
  _Bool _1425;
  int _1426;
  int _1427;
  unsigned char _1429;
  int _1430;
  int _1431;
  int _1433;
  _Bool _1434;
  int _1435;
  short int _1438;
  int _1439;
  int _1440;
  short int _1442;
  int _1443;
  int _1444;
  _Bool _1447;
  int _1448;
  _Bool _1449;
  int _1450;
  int _1453;
  int _1454;
  unsigned char _1456;
  int _1457;
  int _1458;
  unsigned char _1460;
  int _1461;
  int _1462;
  _Bool _1463;
  int _1464;
  int _1465;
  unsigned char _1467;
  int _1468;
  int _1469;
  int _1471;
  _Bool _1472;
  int _1473;
  unsigned int _1474;
  unsigned int _1475;
  int16_t * _1476;
  int _1477;
  long unsigned int _1478;
  long unsigned int _1479;
  sizetype _1480;
  int16_t * _1481;
  short int _1482;
  short int _1483;
  short int _1484;
  unsigned int _1486;
  int _1488;
  long unsigned int _1489;
  long unsigned int _1490;
  int16_t * _1491;
  short int _1492;
  short int _1493;
  short int _1494;
  int _1500;
  int _1506;
  _Bool _1507;
  int _1508;
  int _1510;
  unsigned int _1511;
  unsigned int _1512;
  int16_t * _1513;
  int _1514;
  long unsigned int _1515;
  long unsigned int _1516;
  sizetype _1517;
  int16_t * _1518;
  short int _1519;
  unsigned int _1521;
  int16_t * _1522;
  int _1523;
  long unsigned int _1524;
  long unsigned int _1525;
  int16_t * _1526;
  short int _1527;
  int _1529;
  int _1537;
  int _1538;
  int _1539;
  int _1540;
  int _1541;
  int _1544;
  int _1545;
  int _1546;
  int _1547;
  int _1551;
  int _1552;
  int _1553;
  int _1554;
  int _1555;
  int _1556;
  int _1557;
  int _1558;
  int _1559;
  int _1560;
  int _1561;
  int _1562;
  int _1563;
  unsigned char _1564;
  struct x264_sps_t * _1566;
  int _1567;
  unsigned int _1568;
  unsigned int _1569;
  int _1571;
  struct x264_sps_t * _1573;
  int _1574;
  int _1576;
  int _1578;
  int _1582;
  int _1583;
  int _1585;
  int16_t * _1586;
  int _1587;
  long unsigned int _1588;
  long unsigned int _1589;
  int16_t * _1590;
  short int _1591;
  int _1592;
  int8_t * _1593;
  sizetype _1594;
  int8_t * _1595;
  signed char _1596;
  long unsigned int _1598;
  int16_t * _1599;
  short int _1600;
  short int _1601;
  int _1604;
  _Bool _1607;
  _Bool _1608;
  _Bool _1609;
  int _1612;
  int8_t * _1621;
  unsigned int ivtmp_1870;
  unsigned int ivtmp_1879;
  unsigned int ivtmp_1902;
  unsigned char _1904;
  int _1905;
  unsigned char _1907;
  int _1908;
  _Bool _1910;
  unsigned char _1913;
  int _1914;
  unsigned char _1916;
  int _1917;
  unsigned int ivtmp_1928;
  unsigned int ivtmp_1938;
  unsigned int ivtmp_1948;
  unsigned int ivtmp_1968;
  unsigned int ivtmp_1978;
  unsigned int ivtmp_1988;
  int _1994;
  _Bool _2003;
  _Bool _2019;
  _Bool _2022;
  _Bool _2033;
  unsigned int ivtmp_2036;
  long unsigned int _2078;
  long unsigned int _2084;
  int _2108;
  _Bool _2113;
  _Bool _2114;
  unsigned int ivtmp_2115;
  int prephitmp_2672;
  unsigned int ivtmp_2674;
  unsigned int pretmp_2727;
  unsigned int pretmp_2728;
  unsigned int prephitmp_2729;
  int pretmp_2731;
  int prephitmp_2732;
  int pretmp_2733;
  int prephitmp_2734;
  int prephitmp_2740;
  int16_t * pretmp_2743;
  int16_t * prephitmp_2744;
  int pretmp_2745;
  int pretmp_2747;
  int pretmp_2749;
  int prephitmp_2750;
  int pretmp_2751;
  int pretmp_2753;
  int pretmp_2755;
  int prephitmp_2756;
  int pretmp_2757;
  int pretmp_2759;
  int prephitmp_2760;
  int pretmp_2761;
  int pretmp_2763;
  int prephitmp_2764;
  int pretmp_2765;
  int pretmp_2766;
  int prephitmp_2767;
  int16_t * pretmp_2768;
  int16_t * prephitmp_2769;
  unsigned int ivtmp_2770;
  unsigned int ivtmp_2775;
  unsigned int ivtmp_2780;
  unsigned int ivtmp_2785;
  unsigned int ivtmp_2790;
  unsigned int ivtmp_2795;
  unsigned int ivtmp_2800;
  unsigned int ivtmp_2805;
  unsigned int ivtmp_2810;
  unsigned int ivtmp_2815;
  unsigned int ivtmp_2820;
  unsigned int ivtmp_2825;
  unsigned int ivtmp_2830;
  unsigned int ivtmp_2835;
  unsigned int ivtmp_2840;
  unsigned int ivtmp_2845;
  unsigned int ivtmp_2850;
  unsigned int ivtmp_2855;
  unsigned int ivtmp_2860;
  unsigned int ivtmp_2865;
  unsigned int pretmp_2870;
  unsigned int prephitmp_2871;
  int pretmp_2874;
  int pretmp_2875;
  int pretmp_2876;
  int pretmp_2877;
  int pretmp_2878;
  int prephitmp_2879;
  int pretmp_2880;
  int prephitmp_2881;
  unsigned int ivtmp_2883;
  unsigned int ivtmp_2893;
  unsigned int ivtmp_2903;
  unsigned int ivtmp_2913;
  unsigned int ivtmp_2918;
  unsigned int ivtmp_2923;
  unsigned int ivtmp_2928;
  unsigned int ivtmp_2933;
  unsigned int ivtmp_2938;
  unsigned int ivtmp_2949;
  uint8_t * pretmp_2956;
  uint8_t * prephitmp_2957;
  uint8_t * pretmp_2963;
  uint8_t * prephitmp_2964;
  int pretmp_2969;
  int pretmp_2970;
  int pretmp_2971;
  int prephitmp_2972;
  int pretmp_2973;
  int prephitmp_2974;
  int prephitmp_2976;
  int pretmp_2977;
  int prephitmp_2978;

  <bb 2>:
  i_mb_type_59 = h_58(D)->mb.i_type;
  # DEBUG i_mb_type => i_mb_type_59
  # DEBUG cb => cb_60(D)
  _95 = cb_60(D)->p;
  _116 = (long int) _95;
  _63 = cb_60(D)->p_start;
  _61 = (long int) _63;
  _280 = _116 - _61;
  _281 = cb_60(D)->i_bytes_outstanding;
  _282 = (long int) _281;
  _283 = _280 + _282;
  _284 = (unsigned int) _283;
  _285 = _284 * 8;
  _286 = cb_60(D)->i_queue;
  _287 = (unsigned int) _286;
  _288 = _285 + _287;
  _289 = (int) _288;
  # DEBUG cb => NULL
  # DEBUG i_mb_pos_start => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_mb_type => i_mb_type_59
  _368 = h_58(D)->sh.b_mbaff;
  if (_368 != 0)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 3>:
  _369 = h_58(D)->mb.i_mb_y;
  _370 = _369 & 1;
  if (_370 == 0)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:
  _371 = h_58(D)->mb.type;
  _372 = h_58(D)->mb.i_mb_xy;
  _373 = h_58(D)->mb.i_mb_stride;
  _374 = _372 - _373;
  _375 = (sizetype) _374;
  _376 = _371 + _375;
  _377 = *_376;
  _378 = _377 == 6;
  _379 = _377 == 18;
  _380 = _378 | _379;
  if (_380 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  _381 = h_58(D)->mb.b_interlaced;
  _382 = h_58(D)->mb.cache.i_neighbour_interlaced;
  _383 = _382 + 70;
  x264_cabac_encode_decision_asm (cb_60(D), _383, _381);

  <bb 6>:
  _384 = h_58(D)->sh.i_type;
  if (_384 == 2)
    goto <bb 7>;
  else
    goto <bb 17>;

  <bb 7>:
  # DEBUG ctx => 0
  _385 = h_58(D)->mb.i_mb_type_left;
  _788 = _385 > 0;
  ctx_2110 = (int) _788;
  # DEBUG ctx => ctx_2110
  _386 = h_58(D)->mb.i_mb_type_top;
  if (_386 > 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  ctx_388 = ctx_2110 + 1;
  # DEBUG ctx => ctx_388

  <bb 9>:
  # ctx_389 = PHI <ctx_2110(7), ctx_388(8)>
  # DEBUG ctx => ctx_389
  _390 = ctx_389 + 3;
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_mb_type => i_mb_type_59
  # DEBUG ctx0 => _390
  # DEBUG ctx1 => 6
  # DEBUG ctx2 => 7
  # DEBUG ctx3 => 8
  # DEBUG ctx4 => 9
  # DEBUG ctx5 => 10
  i_mb_type.8_62 = (unsigned int) i_mb_type_59;
  if (i_mb_type.8_62 <= 1)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  x264_cabac_encode_decision_asm (cb_60(D), _390, 0);
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  goto <bb 66>;

  <bb 11>:
  if (i_mb_type_59 == 3)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  # DEBUG D#4 => 3
  # DEBUG D#5 => 6
  # DEBUG D#6 => 7
  # DEBUG D#7 => 8
  # DEBUG D#8 => 9
  # DEBUG D#9 => 10
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG ctx0 => _390
  # DEBUG D#10 => D#9
  # DEBUG ctx5 => D#10
  # DEBUG D#11 => D#8
  # DEBUG ctx4 => D#11
  # DEBUG D#12 => D#7
  # DEBUG ctx3 => D#12
  # DEBUG D#13 => D#6
  # DEBUG ctx2 => D#13
  # DEBUG D#14 => D#5
  # DEBUG ctx1 => D#14
  # DEBUG D#15 => D#4
  # DEBUG i_mb_type => D#15
  x264_cabac_encode_decision_asm (cb_60(D), _390, 1);
  x264_cabac_encode_flush (h_58(D), cb_60(D));
  goto <bb 503>;

  <bb 13>:
  _421 = h_58(D)->mb.i_intra16x16_pred_mode;
  _422 = x264_mb_pred_mode16x16_fix[_421];
  i_pred_423 = (int) _422;
  # DEBUG i_pred => i_pred_423
  x264_cabac_encode_decision_asm (cb_60(D), _390, 1);
  x264_cabac_encode_terminal (cb_60(D));
  _424 = h_58(D)->mb.i_cbp_luma;
  _425 = _424 != 0;
  _426 = (int) _425;
  x264_cabac_encode_decision_asm (cb_60(D), 6, _426);
  _427 = h_58(D)->mb.i_cbp_chroma;
  if (_427 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:
  x264_cabac_encode_decision_asm (cb_60(D), 7, 0);
  goto <bb 16>;

  <bb 15>:
  x264_cabac_encode_decision_asm (cb_60(D), 7, 1);
  _428 = h_58(D)->mb.i_cbp_chroma;
  _429 = _428 != 1;
  _430 = (int) _429;
  x264_cabac_encode_decision_asm (cb_60(D), 8, _430);

  <bb 16>:
  _431 = i_pred_423 >> 1;
  x264_cabac_encode_decision_asm (cb_60(D), 9, _431);
  _432 = _422 & 1;
  _433 = (int) _432;
  x264_cabac_encode_decision_asm (cb_60(D), 10, _433);
  goto <bb 502>;

  <bb 17>:
  if (_384 == 0)
    goto <bb 18>;
  else
    goto <bb 35>;

  <bb 18>:
  if (i_mb_type_59 == 4)
    goto <bb 19>;
  else
    goto <bb 25>;

  <bb 19>:
  _391 = h_58(D)->mb.i_partition;
  if (_391 == 16)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  x264_cabac_encode_decision_asm (cb_60(D), 14, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 15, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 16, 0);
  pretmp_2969 = h_58(D)->mb.i_partition;
  goto <bb 510>;

  <bb 21>:
  if (_391 == 14)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  x264_cabac_encode_decision_asm (cb_60(D), 14, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 15, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 17, 1);
  pretmp_2971 = h_58(D)->mb.i_partition;
  goto <bb 510>;

  <bb 23>:
  if (_391 == 15)
    goto <bb 24>;
  else
    goto <bb 510>;

  <bb 24>:
  x264_cabac_encode_decision_asm (cb_60(D), 14, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 15, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 17, 0);
  pretmp_2970 = h_58(D)->mb.i_partition;
  goto <bb 510>;

  <bb 25>:
  if (i_mb_type_59 == 5)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  x264_cabac_encode_decision_asm (cb_60(D), 14, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 15, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 16, 1);
  pretmp_2727 = (unsigned int) i_mb_type_59;
  goto <bb 502>;

  <bb 27>:
  x264_cabac_encode_decision_asm (cb_60(D), 14, 1);
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_mb_type => i_mb_type_59
  # DEBUG ctx0 => 17
  # DEBUG ctx1 => 18
  # DEBUG ctx2 => 19
  # DEBUG ctx3 => 19
  # DEBUG ctx4 => 20
  # DEBUG ctx5 => 20
  i_mb_type.8_434 = (unsigned int) i_mb_type_59;
  if (i_mb_type.8_434 <= 1)
    goto <bb 28>;
  else
    goto <bb 29>;

  <bb 28>:
  x264_cabac_encode_decision_asm (cb_60(D), 17, 0);
  goto <bb 58>;

  <bb 29>:
  if (i_mb_type_59 == 3)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  # DEBUG D#4 => 3
  # DEBUG D#5 => 18
  # DEBUG D#6 => 19
  # DEBUG D#7 => 19
  # DEBUG D#8 => 20
  # DEBUG D#9 => 20
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG ctx0 => 17
  # DEBUG D#10 => D#9
  # DEBUG ctx5 => D#10
  # DEBUG D#11 => D#8
  # DEBUG ctx4 => D#11
  # DEBUG D#12 => D#7
  # DEBUG ctx3 => D#12
  # DEBUG D#13 => D#6
  # DEBUG ctx2 => D#13
  # DEBUG D#14 => D#5
  # DEBUG ctx1 => D#14
  # DEBUG D#15 => D#4
  # DEBUG i_mb_type => D#15
  x264_cabac_encode_decision_asm (cb_60(D), 17, 1);
  x264_cabac_encode_flush (h_58(D), cb_60(D));
  goto <bb 503>;

  <bb 31>:
  _435 = h_58(D)->mb.i_intra16x16_pred_mode;
  _436 = x264_mb_pred_mode16x16_fix[_435];
  i_pred_437 = (int) _436;
  # DEBUG i_pred => i_pred_437
  x264_cabac_encode_decision_asm (cb_60(D), 17, 1);
  x264_cabac_encode_terminal (cb_60(D));
  _438 = h_58(D)->mb.i_cbp_luma;
  _439 = _438 != 0;
  _440 = (int) _439;
  x264_cabac_encode_decision_asm (cb_60(D), 18, _440);
  _441 = h_58(D)->mb.i_cbp_chroma;
  if (_441 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  x264_cabac_encode_decision_asm (cb_60(D), 19, 0);
  goto <bb 34>;

  <bb 33>:
  x264_cabac_encode_decision_asm (cb_60(D), 19, 1);
  _442 = h_58(D)->mb.i_cbp_chroma;
  _443 = _442 != 1;
  _444 = (int) _443;
  x264_cabac_encode_decision_asm (cb_60(D), 19, _444);

  <bb 34>:
  _445 = i_pred_437 >> 1;
  x264_cabac_encode_decision_asm (cb_60(D), 20, _445);
  _446 = _436 & 1;
  _447 = (int) _446;
  x264_cabac_encode_decision_asm (cb_60(D), 20, _447);
  goto <bb 502>;

  <bb 35>:
  if (_384 == 1)
    goto <bb 36>;
  else
    goto <bb 57>;

  <bb 36>:
  # DEBUG ctx => 0
  _392 = h_58(D)->mb.i_mb_type_left;
  _393 = _392 >= 0;
  _394 = _392 != 18;
  _395 = _393 & _394;
  _2003 = _392 != 7;
  _2019 = _395 & _2003;
  ctx_367 = (int) _2019;
  # DEBUG ctx => ctx_367
  _396 = h_58(D)->mb.i_mb_type_top;
  _397 = _396 >= 0;
  _398 = _396 != 18;
  _399 = _397 & _398;
  _2022 = _396 != 7;
  _2033 = _399 & _2022;
  if (_2033 != 0)
    goto <bb 37>;
  else
    goto <bb 38>;

  <bb 37>:
  ctx_401 = ctx_367 + 1;
  # DEBUG ctx => ctx_401

  <bb 38>:
  # ctx_402 = PHI <ctx_401(37), ctx_367(36)>
  # DEBUG ctx => ctx_402
  if (i_mb_type_59 == 7)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 39>:
  _403 = ctx_402 + 27;
  x264_cabac_encode_decision_asm (cb_60(D), _403, 0);
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  goto <bb 413>;

  <bb 40>:
  if (i_mb_type_59 == 17)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  _404 = ctx_402 + 27;
  x264_cabac_encode_decision_asm (cb_60(D), _404, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 30, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 31, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 32, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 32, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 32, 1);
  pretmp_2728 = (unsigned int) i_mb_type_59;
  goto <bb 502>;

  <bb 42>:
  i_mb_type.7_405 = (unsigned int) i_mb_type_59;
  if (i_mb_type.7_405 <= 3)
    goto <bb 43>;
  else
    goto <bb 51>;

  <bb 43>:
  _406 = ctx_402 + 27;
  x264_cabac_encode_decision_asm (cb_60(D), _406, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 30, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 31, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 32, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 32, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 32, 1);
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_mb_type => i_mb_type_59
  # DEBUG ctx0 => 32
  # DEBUG ctx1 => 33
  # DEBUG ctx2 => 34
  # DEBUG ctx3 => 34
  # DEBUG ctx4 => 35
  # DEBUG ctx5 => 35
  if (i_mb_type.7_405 <= 1)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  x264_cabac_encode_decision_asm (cb_60(D), 32, 0);
  goto <bb 58>;

  <bb 45>:
  if (i_mb_type_59 == 3)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:
  # DEBUG D#4 => 3
  # DEBUG D#5 => 33
  # DEBUG D#6 => 34
  # DEBUG D#7 => 34
  # DEBUG D#8 => 35
  # DEBUG D#9 => 35
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG ctx0 => 32
  # DEBUG D#10 => D#9
  # DEBUG ctx5 => D#10
  # DEBUG D#11 => D#8
  # DEBUG ctx4 => D#11
  # DEBUG D#12 => D#7
  # DEBUG ctx3 => D#12
  # DEBUG D#13 => D#6
  # DEBUG ctx2 => D#13
  # DEBUG D#14 => D#5
  # DEBUG ctx1 => D#14
  # DEBUG D#15 => D#4
  # DEBUG i_mb_type => D#15
  x264_cabac_encode_decision_asm (cb_60(D), 32, 1);
  x264_cabac_encode_flush (h_58(D), cb_60(D));
  goto <bb 503>;

  <bb 47>:
  _449 = h_58(D)->mb.i_intra16x16_pred_mode;
  _450 = x264_mb_pred_mode16x16_fix[_449];
  i_pred_451 = (int) _450;
  # DEBUG i_pred => i_pred_451
  x264_cabac_encode_decision_asm (cb_60(D), 32, 1);
  x264_cabac_encode_terminal (cb_60(D));
  _452 = h_58(D)->mb.i_cbp_luma;
  _453 = _452 != 0;
  _454 = (int) _453;
  x264_cabac_encode_decision_asm (cb_60(D), 33, _454);
  _455 = h_58(D)->mb.i_cbp_chroma;
  if (_455 == 0)
    goto <bb 48>;
  else
    goto <bb 49>;

  <bb 48>:
  x264_cabac_encode_decision_asm (cb_60(D), 34, 0);
  goto <bb 50>;

  <bb 49>:
  x264_cabac_encode_decision_asm (cb_60(D), 34, 1);
  _456 = h_58(D)->mb.i_cbp_chroma;
  _457 = _456 != 1;
  _458 = (int) _457;
  x264_cabac_encode_decision_asm (cb_60(D), 34, _458);

  <bb 50>:
  _459 = i_pred_451 >> 1;
  x264_cabac_encode_decision_asm (cb_60(D), 35, _459);
  _460 = _450 & 1;
  _461 = (int) _460;
  x264_cabac_encode_decision_asm (cb_60(D), 35, _461);
  goto <bb 502>;

  <bb 51>:
  _407 = i_mb_type_59 + -8;
  _408 = _407 * 3;
  _409 = h_58(D)->mb.i_partition;
  _410 = _409 + -14;
  idx_411 = _408 + _410;
  # DEBUG idx => idx_411
  _412 = i_mb_bits[idx_411][0];
  _413 = ctx_402 + 27;
  x264_cabac_encode_decision_asm (cb_60(D), _413, _412);
  _414 = i_mb_bits[idx_411][1];
  x264_cabac_encode_decision_asm (cb_60(D), 30, _414);
  _415 = i_mb_bits[idx_411][2];
  _416 = 32 - _414;
  x264_cabac_encode_decision_asm (cb_60(D), _416, _415);
  # DEBUG i => 3
  # DEBUG i => 3
  _1994 = i_mb_len[idx_411];
  if (_1994 > 3)
    goto <bb 53>;
  else
    goto <bb 52>;

  <bb 52>:
  goto <bb 58>;

  <bb 53>:

  <bb 54>:
  # i_609 = PHI <3(53), i_419(56)>
  # DEBUG i => i_609
  _418 = i_mb_bits[idx_411][i_609];
  x264_cabac_encode_decision_asm (cb_60(D), 32, _418);
  i_419 = i_609 + 1;
  # DEBUG i => i_419
  # DEBUG i => i_419
  if (i_419 < _1994)
    goto <bb 56>;
  else
    goto <bb 55>;

  <bb 55>:
  goto <bb 52>;

  <bb 56>:
  goto <bb 54>;

  <bb 57>:
  x264_log (h_58(D), 0, "unknown SLICE_TYPE unsupported in x264_macroblock_write_cabac\n");

  <bb 58>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  if (i_mb_type_59 == 3)
    goto <bb 503>;
  else
    goto <bb 65>;

  <bb 59>:
  # i_1140 = PHI <i_83(60), 0(503)>
  # prephitmp_2957 = PHI <pretmp_2956(60), _72(503)>
  # ivtmp_2918 = PHI <ivtmp_2883(60), 8(503)>
  # DEBUG i => i_1140
  _74 = h_58(D)->mb.pic.p_fenc[1];
  _75 = i_1140 * 16;
  _76 = (sizetype) _75;
  _77 = _74 + _76;
  _79 = i_1140 * 8;
  _80 = (sizetype) _79;
  _81 = prephitmp_2957 + _80;
  # DEBUG __dest => _81
  # DEBUG __src => _77
  # DEBUG __len => 8
  _2084 = MEM[(char * {ref-all})_77];
  MEM[(char * {ref-all})_81] = _2084;
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  i_83 = i_1140 + 1;
  # DEBUG i => i_83
  # DEBUG i => i_83
  ivtmp_2883 = ivtmp_2918 - 1;
  if (ivtmp_2883 != 0)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 60>:
  pretmp_2956 = cb_60(D)->p;
  goto <bb 59>;

  <bb 61>:
  _84 = cb_60(D)->p;
  _85 = _84 + 64;
  cb_60(D)->p = _85;
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 62>:
  # i_538 = PHI <i_96(63), 0(61)>
  # prephitmp_2964 = PHI <pretmp_2963(63), _85(61)>
  # ivtmp_2893 = PHI <ivtmp_2903(63), 8(61)>
  # DEBUG i => i_538
  _87 = h_58(D)->mb.pic.p_fenc[2];
  _88 = i_538 * 16;
  _89 = (sizetype) _88;
  _90 = _87 + _89;
  _92 = i_538 * 8;
  _93 = (sizetype) _92;
  _94 = prephitmp_2964 + _93;
  # DEBUG __dest => _94
  # DEBUG __src => _90
  # DEBUG __len => 8
  _2078 = MEM[(char * {ref-all})_90];
  MEM[(char * {ref-all})_94] = _2078;
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  i_96 = i_538 + 1;
  # DEBUG i => i_96
  # DEBUG i => i_96
  ivtmp_2903 = ivtmp_2893 - 1;
  if (ivtmp_2903 != 0)
    goto <bb 63>;
  else
    goto <bb 64>;

  <bb 63>:
  pretmp_2963 = cb_60(D)->p;
  goto <bb 62>;

  <bb 64>:
  _97 = cb_60(D)->p;
  _98 = _97 + 64;
  cb_60(D)->p = _98;
  cb_60(D)->i_low = 0;
  cb_60(D)->i_range = 510;
  cb_60(D)->i_queue = -1;
  cb_60(D)->i_bytes_outstanding = 0;
  _104 = h_58(D)->mc.copy[0];
  _105 = h_58(D)->mb.pic.p_fenc[0];
  _106 = h_58(D)->mb.pic.p_fdec[0];
  _104 (_106, 32, _105, 16, 16);
  _108 = h_58(D)->mc.copy[3];
  _109 = h_58(D)->mb.pic.p_fenc[1];
  _110 = h_58(D)->mb.pic.p_fdec[1];
  _108 (_110, 32, _109, 16, 8);
  _112 = h_58(D)->mc.copy[3];
  _113 = h_58(D)->mb.pic.p_fenc[2];
  _114 = h_58(D)->mb.pic.p_fdec[2];
  _112 (_114, 32, _113, 16, 8);
  # DEBUG cb => cb_60(D)
  _304 = cb_60(D)->p;
  _305 = (long int) _304;
  _306 = cb_60(D)->p_start;
  _307 = (long int) _306;
  _308 = _305 - _307;
  _309 = cb_60(D)->i_bytes_outstanding;
  _310 = (long int) _309;
  _311 = _308 + _310;
  _312 = (unsigned int) _311;
  _313 = _312 * 8;
  _314 = cb_60(D)->i_queue;
  _315 = (unsigned int) _314;
  _316 = _313 + _315;
  _317 = (int) _316;
  # DEBUG cb => NULL
  _118 = _317 - _303;
  _119 = h_58(D)->stat.frame.i_tex_bits;
  _120 = _118 + _119;
  h_58(D)->stat.frame.i_tex_bits = _120;
  goto <bb 499>;

  <bb 65>:
  pretmp_2870 = (unsigned int) i_mb_type_59;

  <bb 66>:
  # prephitmp_2871 = PHI <pretmp_2870(65), i_mb_type.8_62(10), prephitmp_2729(502)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  if (prephitmp_2871 <= 3)
    goto <bb 67>;
  else
    goto <bb 92>;

  <bb 67>:
  _123 = h_58(D)->pps;
  _124 = _123->b_transform_8x8_mode;
  if (_124 != 0)
    goto <bb 68>;
  else
    goto <bb 71>;

  <bb 68>:
  if (i_mb_type_59 != 2)
    goto <bb 70>;
  else
    goto <bb 69>;

  <bb 69>:
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  _133 = h_58(D)->mb.i_chroma_pred_mode;
  _469 = x264_mb_pred_mode8x8c_fix[_133];
  i_mode_470 = (const int) _469;
  # DEBUG i_mode => i_mode_470
  # DEBUG ctx => 0
  _471 = h_58(D)->mb.i_neighbour;
  _472 = _471 & 1;
  if (_472 != 0)
    goto <bb 84>;
  else
    goto <bb 85>;

  <bb 70>:
  _276 = MEM[(int *)h_58(D) + 11808B];
  # DEBUG D#3 => h_58(D)
  _277 = MEM[(int *)h_58(D) + 20500B];
  # DEBUG D#3 => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG h => D#3
  # DEBUG h => D#3
  ctx_318 = _277 + 399;
  # DEBUG ctx => ctx_318
  x264_cabac_encode_decision_asm (cb_60(D), ctx_318, _276);
  goto <bb 72>;

  <bb 71>:
  if (i_mb_type_59 != 2)
    goto <bb 72>;
  else
    goto <bb 69>;

  <bb 72>:
  if (i_mb_type_59 == 1)
    goto <bb 73>;
  else
    goto <bb 74>;

  <bb 73>:

  <bb 74>:
  # di_16 = PHI <4(73), 1(72)>
  # DEBUG di => di_16
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 75>:
  # i_1071 = PHI <i_134(83), 0(74)>
  # DEBUG i => i_1071
  # DEBUG h => h_58(D)
  # DEBUG idx => i_1071
  _125 = x264_scan8[i_1071];
  _320 = _125 + -1;
  _321 = h_58(D)->mb.cache.intra4x4_pred_mode[_320];
  ma_322 = (const int) _321;
  # DEBUG ma => ma_322
  _323 = _125 + -8;
  _324 = h_58(D)->mb.cache.intra4x4_pred_mode[_323];
  mb_325 = (const int) _324;
  # DEBUG mb => mb_325
  _326 = mb_325 + 1;
  _327 = x264_mb_pred_mode4x4_fix[_326];
  _328 = ma_322 + 1;
  _329 = x264_mb_pred_mode4x4_fix[_328];
  _330 = MIN_EXPR <_327, _329>;
  m_331 = (const int) _330;
  # DEBUG m => m_331
  if (m_331 < 0)
    goto <bb 76>;
  else
    goto <bb 77>;

  <bb 76>:

  <bb 77>:
  # _332 = PHI <2(76), m_331(75)>
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG i_pred => NULL
  _128 = h_58(D)->mb.cache.intra4x4_pred_mode[_125];
  _129 = (int) _128;
  _130 = _129 + 1;
  _131 = x264_mb_pred_mode4x4_fix[_130];
  i_mode_132 = (const int) _131;
  # DEBUG i_mode => i_mode_132
  # DEBUG cb => cb_60(D)
  # DEBUG i_pred => _332
  # DEBUG i_mode => i_mode_132
  if (i_mode_132 == _332)
    goto <bb 78>;
  else
    goto <bb 79>;

  <bb 78>:
  x264_cabac_encode_decision_asm (cb_60(D), 68, 1);
  goto <bb 82>;

  <bb 79>:
  x264_cabac_encode_decision_asm (cb_60(D), 68, 0);
  if (i_mode_132 > _332)
    goto <bb 80>;
  else
    goto <bb 81>;

  <bb 80>:
  i_mode_462 = i_mode_132 + -1;
  # DEBUG i_mode => i_mode_462

  <bb 81>:
  # i_mode_463 = PHI <i_mode_132(79), i_mode_462(80)>
  # DEBUG i_mode => i_mode_463
  _464 = i_mode_463 & 1;
  x264_cabac_encode_decision_asm (cb_60(D), 69, _464);
  _465 = i_mode_463 >> 1;
  _466 = _465 & 1;
  x264_cabac_encode_decision_asm (cb_60(D), 69, _466);
  _467 = i_mode_463 >> 2;
  _468 = _467 & 1;
  x264_cabac_encode_decision_asm (cb_60(D), 69, _468);

  <bb 82>:
  # DEBUG cb => NULL
  # DEBUG i_pred => NULL
  # DEBUG i_mode => NULL
  i_134 = di_16 + i_1071;
  # DEBUG i => i_134
  # DEBUG i => i_134
  if (i_134 <= 15)
    goto <bb 83>;
  else
    goto <bb 69>;

  <bb 83>:
  goto <bb 75>;

  <bb 84>:
  _473 = h_58(D)->mb.chroma_pred_mode;
  _474 = h_58(D)->mb.i_mb_xy;
  _475 = (sizetype) _474;
  _476 = _475 + 18446744073709551615;
  _477 = _473 + _476;
  _478 = *_477;
  _2113 = _478 != 0;
  ctx_1602 = (int) _2113;

  <bb 85>:
  # ctx_485 = PHI <0(69), ctx_1602(84)>
  # DEBUG ctx => ctx_485
  _479 = _471 & 2;
  if (_479 != 0)
    goto <bb 86>;
  else
    goto <bb 88>;

  <bb 86>:
  _480 = h_58(D)->mb.chroma_pred_mode;
  _481 = h_58(D)->mb.i_mb_top_xy;
  _482 = (sizetype) _481;
  _483 = _480 + _482;
  _484 = *_483;
  if (_484 != 0)
    goto <bb 87>;
  else
    goto <bb 88>;

  <bb 87>:
  ctx_486 = ctx_485 + 1;
  # DEBUG ctx => ctx_486

  <bb 88>:
  # ctx_489 = PHI <ctx_485(85), ctx_485(86), ctx_486(87)>
  # DEBUG ctx => ctx_489
  _487 = i_mode_470 > 0;
  _488 = (int) _487;
  _490 = ctx_489 + 64;
  x264_cabac_encode_decision_asm (cb_60(D), _490, _488);
  if (i_mode_470 != 0)
    goto <bb 90>;
  else
    goto <bb 89>;

  <bb 89>:
  goto <bb 413>;

  <bb 90>:
  _491 = i_mode_470 > 1;
  _492 = (int) _491;
  x264_cabac_encode_decision_asm (cb_60(D), 67, _492);
  if (i_mode_470 != 1)
    goto <bb 91>;
  else
    goto <bb 89>;

  <bb 91>:
  _493 = i_mode_470 > 2;
  _494 = (int) _493;
  x264_cabac_encode_decision_asm (cb_60(D), 67, _494);
  goto <bb 413>;

  <bb 92>:
  if (i_mb_type_59 == 4)
    goto <bb 93>;
  else
    goto <bb 236>;

  <bb 93>:
  pretmp_2973 = h_58(D)->mb.i_partition;

  <bb 94>:
  # prephitmp_2974 = PHI <pretmp_2973(93), prephitmp_2972(510)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  if (prephitmp_2974 == 16)
    goto <bb 95>;
  else
    goto <bb 124>;

  <bb 95>:
  _148 = h_58(D)->mb.pic.i_fref[0];
  if (_148 > 1)
    goto <bb 96>;
  else
    goto <bb 97>;

  <bb 96>:
  x264_cabac_mb_ref (h_58(D), cb_60(D), 0, 0);

  <bb 97>:
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 0
  # DEBUG width => 4
  # DEBUG height => 4
  x264_mb_predict_mv (h_58(D), 0, 0, 4, &mvp);
  _495 = h_58(D)->mb.cache.mv[0][12][0];
  _496 = (int) _495;
  _497 = mvp[0];
  _498 = (int) _497;
  mdx_499 = _496 - _498;
  # DEBUG mdx => mdx_499
  _500 = h_58(D)->mb.cache.mv[0][12][1];
  _501 = (int) _500;
  _502 = mvp[1];
  _503 = (int) _502;
  mdy_504 = _501 - _503;
  # DEBUG mdy => mdy_504
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 0
  # DEBUG l => 0
  # DEBUG mvd => mdx_499
  _581 = h_58(D)->mb.cache.mvd[0][11][0];
  _582 = (int) _581;
  _583 = ABS_EXPR <_582>;
  _585 = h_58(D)->mb.cache.mvd[0][4][0];
  _586 = (int) _585;
  _587 = ABS_EXPR <_586>;
  amvd_588 = _583 + _587;
  # DEBUG amvd => amvd_588
  i_abs_589 = ABS_EXPR <mdx_499>;
  # DEBUG i_abs => i_abs_589
  # DEBUG ctxbase => 40
  _590 = amvd_588 > 2;
  _591 = (int) _590;
  _592 = amvd_588 > 32;
  _593 = (int) _592;
  ctx_594 = _591 + _593;
  # DEBUG ctx => ctx_594
  if (i_abs_589 == 0)
    goto <bb 98>;
  else
    goto <bb 99>;

  <bb 98>:
  _596 = ctx_594 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _596, 0);
  goto <bb 110>;

  <bb 99>:
  if (i_abs_589 <= 8)
    goto <bb 100>;
  else
    goto <bb 106>;

  <bb 100>:
  _597 = ctx_594 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _597, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_589 > 1)
    goto <bb 101>;
  else
    goto <bb 103>;

  <bb 101>:
  goto <bb 104>;

  <bb 102>:

  <bb 103>:
  _603 = ctxes[i_abs_589];
  _604 = (int) _603;
  _605 = _604 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _605, 0);
  _606 = mdx_499 < 0;
  _607 = (int) _606;
  x264_cabac_encode_bypass (cb_60(D), _607);
  goto <bb 110>;

  <bb 104>:
  # i_5 = PHI <1(101), i_602(105)>
  # DEBUG i => i_5
  _599 = ctxes[i_5];
  _600 = (int) _599;
  _601 = _600 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _601, 1);
  i_602 = i_5 + 1;
  # DEBUG i => i_602
  # DEBUG i => i_602
  if (i_abs_589 > i_602)
    goto <bb 105>;
  else
    goto <bb 102>;

  <bb 105>:
  goto <bb 104>;

  <bb 106>:
  _608 = ctx_594 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _608, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 107>:
  # i_787 = PHI <i_613(108), 1(106)>
  # ivtmp_701 = PHI <ivtmp_654(108), 8(106)>
  # DEBUG i => i_787
  _610 = ctxes[i_787];
  _611 = (int) _610;
  _612 = _611 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _612, 1);
  i_613 = i_787 + 1;
  # DEBUG i => i_613
  # DEBUG i => i_613
  ivtmp_654 = ivtmp_701 - 1;
  if (ivtmp_654 != 0)
    goto <bb 108>;
  else
    goto <bb 109>;

  <bb 108>:
  goto <bb 107>;

  <bb 109>:
  _614 = i_abs_589 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _614);
  _615 = mdx_499 < 0;
  _616 = (int) _615;
  x264_cabac_encode_bypass (cb_60(D), _616);

  <bb 110>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 0
  # DEBUG l => 1
  # DEBUG mvd => mdy_504
  _543 = h_58(D)->mb.cache.mvd[0][11][1];
  _544 = (int) _543;
  _545 = ABS_EXPR <_544>;
  _547 = h_58(D)->mb.cache.mvd[0][4][1];
  _548 = (int) _547;
  _549 = ABS_EXPR <_548>;
  amvd_550 = _545 + _549;
  # DEBUG amvd => amvd_550
  i_abs_551 = ABS_EXPR <mdy_504>;
  # DEBUG i_abs => i_abs_551
  # DEBUG ctxbase => 47
  _552 = amvd_550 > 2;
  _553 = (int) _552;
  _554 = amvd_550 > 32;
  _555 = (int) _554;
  ctx_556 = _553 + _555;
  # DEBUG ctx => ctx_556
  if (i_abs_551 == 0)
    goto <bb 111>;
  else
    goto <bb 112>;

  <bb 111>:
  _558 = ctx_556 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _558, 0);
  goto <bb 123>;

  <bb 112>:
  if (i_abs_551 <= 8)
    goto <bb 113>;
  else
    goto <bb 119>;

  <bb 113>:
  _559 = ctx_556 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _559, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_551 > 1)
    goto <bb 114>;
  else
    goto <bb 116>;

  <bb 114>:
  goto <bb 117>;

  <bb 115>:

  <bb 116>:
  _565 = ctxes[i_abs_551];
  _566 = (int) _565;
  _567 = _566 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _567, 0);
  _568 = mdy_504 < 0;
  _569 = (int) _568;
  x264_cabac_encode_bypass (cb_60(D), _569);
  goto <bb 123>;

  <bb 117>:
  # i_1996 = PHI <1(114), i_564(118)>
  # DEBUG i => i_1996
  _561 = ctxes[i_1996];
  _562 = (int) _561;
  _563 = _562 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _563, 1);
  i_564 = i_1996 + 1;
  # DEBUG i => i_564
  # DEBUG i => i_564
  if (i_abs_551 > i_564)
    goto <bb 118>;
  else
    goto <bb 115>;

  <bb 118>:
  goto <bb 117>;

  <bb 119>:
  _570 = ctx_556 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _570, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 120>:
  # i_826 = PHI <i_575(121), 1(119)>
  # ivtmp_686 = PHI <ivtmp_1318(121), 8(119)>
  # DEBUG i => i_826
  _572 = ctxes[i_826];
  _573 = (int) _572;
  _574 = _573 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _574, 1);
  i_575 = i_826 + 1;
  # DEBUG i => i_575
  # DEBUG i => i_575
  ivtmp_1318 = ivtmp_686 - 1;
  if (ivtmp_1318 != 0)
    goto <bb 121>;
  else
    goto <bb 122>;

  <bb 121>:
  goto <bb 120>;

  <bb 122>:
  _576 = i_abs_551 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _576);
  _577 = mdy_504 < 0;
  _578 = (int) _577;
  x264_cabac_encode_bypass (cb_60(D), _578);

  <bb 123>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_499
  # DEBUG b => mdy_504
  _505 = mdx_499 & 65535;
  _506 = mdy_504 << 16;
  _507 = _505 + _506;
  _508 = (unsigned int) _507;
  # DEBUG a => NULL
  # DEBUG b => NULL
  # DEBUG h => h_58(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => NULL
  # DEBUG D#136 => &h_58(D)->mb.cache.mvd[0][12]
  # DEBUG dst => D#136
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => NULL
  _526 = (long unsigned int) _508;
  _527 = _526 << 32;
  val64_528 = _526 + _527;
  # DEBUG val64 => val64_528
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19632B] = val64_528;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_58(D) + 19640B] = val64_528;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19664B] = val64_528;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_58(D) + 19672B] = val64_528;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19696B] = val64_528;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_58(D) + 19704B] = val64_528;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19728B] = val64_528;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_58(D) + 19736B] = val64_528;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  goto <bb 413>;

  <bb 124>:
  if (prephitmp_2974 == 14)
    goto <bb 125>;
  else
    goto <bb 180>;

  <bb 125>:
  _138 = h_58(D)->mb.pic.i_fref[0];
  if (_138 > 1)
    goto <bb 126>;
  else
    goto <bb 127>;

  <bb 126>:
  x264_cabac_mb_ref (h_58(D), cb_60(D), 0, 0);
  x264_cabac_mb_ref (h_58(D), cb_60(D), 0, 8);

  <bb 127>:
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 0
  # DEBUG width => 4
  # DEBUG height => 2
  x264_mb_predict_mv (h_58(D), 0, 0, 4, &mvp);
  _665 = h_58(D)->mb.cache.mv[0][12][0];
  _666 = (int) _665;
  _667 = mvp[0];
  _668 = (int) _667;
  mdx_669 = _666 - _668;
  # DEBUG mdx => mdx_669
  _670 = h_58(D)->mb.cache.mv[0][12][1];
  _671 = (int) _670;
  _672 = mvp[1];
  _673 = (int) _672;
  mdy_674 = _671 - _673;
  # DEBUG mdy => mdy_674
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 0
  # DEBUG l => 0
  # DEBUG mvd => mdx_669
  _751 = h_58(D)->mb.cache.mvd[0][11][0];
  _752 = (int) _751;
  _753 = ABS_EXPR <_752>;
  _755 = h_58(D)->mb.cache.mvd[0][4][0];
  _756 = (int) _755;
  _757 = ABS_EXPR <_756>;
  amvd_758 = _753 + _757;
  # DEBUG amvd => amvd_758
  i_abs_759 = ABS_EXPR <mdx_669>;
  # DEBUG i_abs => i_abs_759
  # DEBUG ctxbase => 40
  _760 = amvd_758 > 2;
  _761 = (int) _760;
  _762 = amvd_758 > 32;
  _763 = (int) _762;
  ctx_764 = _761 + _763;
  # DEBUG ctx => ctx_764
  if (i_abs_759 == 0)
    goto <bb 128>;
  else
    goto <bb 129>;

  <bb 128>:
  _766 = ctx_764 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _766, 0);
  goto <bb 140>;

  <bb 129>:
  if (i_abs_759 <= 8)
    goto <bb 130>;
  else
    goto <bb 136>;

  <bb 130>:
  _767 = ctx_764 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _767, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_759 > 1)
    goto <bb 131>;
  else
    goto <bb 133>;

  <bb 131>:
  goto <bb 134>;

  <bb 132>:

  <bb 133>:
  _773 = ctxes[i_abs_759];
  _774 = (int) _773;
  _775 = _774 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _775, 0);
  _776 = mdx_669 < 0;
  _777 = (int) _776;
  x264_cabac_encode_bypass (cb_60(D), _777);
  goto <bb 140>;

  <bb 134>:
  # i_2028 = PHI <1(131), i_772(135)>
  # DEBUG i => i_2028
  _769 = ctxes[i_2028];
  _770 = (int) _769;
  _771 = _770 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _771, 1);
  i_772 = i_2028 + 1;
  # DEBUG i => i_772
  # DEBUG i => i_772
  if (i_abs_759 > i_772)
    goto <bb 135>;
  else
    goto <bb 132>;

  <bb 135>:
  goto <bb 134>;

  <bb 136>:
  _778 = ctx_764 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _778, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 137>:
  # i_2089 = PHI <i_783(138), 1(136)>
  # ivtmp_532 = PHI <ivtmp_1902(138), 8(136)>
  # DEBUG i => i_2089
  _780 = ctxes[i_2089];
  _781 = (int) _780;
  _782 = _781 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _782, 1);
  i_783 = i_2089 + 1;
  # DEBUG i => i_783
  # DEBUG i => i_783
  ivtmp_1902 = ivtmp_532 - 1;
  if (ivtmp_1902 != 0)
    goto <bb 138>;
  else
    goto <bb 139>;

  <bb 138>:
  goto <bb 137>;

  <bb 139>:
  _784 = i_abs_759 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _784);
  _785 = mdx_669 < 0;
  _786 = (int) _785;
  x264_cabac_encode_bypass (cb_60(D), _786);

  <bb 140>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 0
  # DEBUG l => 1
  # DEBUG mvd => mdy_674
  _713 = h_58(D)->mb.cache.mvd[0][11][1];
  _714 = (int) _713;
  _715 = ABS_EXPR <_714>;
  _717 = h_58(D)->mb.cache.mvd[0][4][1];
  _718 = (int) _717;
  _719 = ABS_EXPR <_718>;
  amvd_720 = _715 + _719;
  # DEBUG amvd => amvd_720
  i_abs_721 = ABS_EXPR <mdy_674>;
  # DEBUG i_abs => i_abs_721
  # DEBUG ctxbase => 47
  _722 = amvd_720 > 2;
  _723 = (int) _722;
  _724 = amvd_720 > 32;
  _725 = (int) _724;
  ctx_726 = _723 + _725;
  # DEBUG ctx => ctx_726
  if (i_abs_721 == 0)
    goto <bb 141>;
  else
    goto <bb 142>;

  <bb 141>:
  _728 = ctx_726 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _728, 0);
  goto <bb 153>;

  <bb 142>:
  if (i_abs_721 <= 8)
    goto <bb 143>;
  else
    goto <bb 149>;

  <bb 143>:
  _729 = ctx_726 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _729, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_721 > 1)
    goto <bb 144>;
  else
    goto <bb 146>;

  <bb 144>:
  goto <bb 147>;

  <bb 145>:

  <bb 146>:
  _735 = ctxes[i_abs_721];
  _736 = (int) _735;
  _737 = _736 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _737, 0);
  _738 = mdy_674 < 0;
  _739 = (int) _738;
  x264_cabac_encode_bypass (cb_60(D), _739);
  goto <bb 153>;

  <bb 147>:
  # i_2068 = PHI <1(144), i_734(148)>
  # DEBUG i => i_2068
  _731 = ctxes[i_2068];
  _732 = (int) _731;
  _733 = _732 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _733, 1);
  i_734 = i_2068 + 1;
  # DEBUG i => i_734
  # DEBUG i => i_734
  if (i_abs_721 > i_734)
    goto <bb 148>;
  else
    goto <bb 145>;

  <bb 148>:
  goto <bb 147>;

  <bb 149>:
  _740 = ctx_726 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _740, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 150>:
  # i_1947 = PHI <i_745(151), 1(149)>
  # ivtmp_2860 = PHI <ivtmp_639(151), 8(149)>
  # DEBUG i => i_1947
  _742 = ctxes[i_1947];
  _743 = (int) _742;
  _744 = _743 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _744, 1);
  i_745 = i_1947 + 1;
  # DEBUG i => i_745
  # DEBUG i => i_745
  ivtmp_639 = ivtmp_2860 - 1;
  if (ivtmp_639 != 0)
    goto <bb 151>;
  else
    goto <bb 152>;

  <bb 151>:
  goto <bb 150>;

  <bb 152>:
  _746 = i_abs_721 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _746);
  _747 = mdy_674 < 0;
  _748 = (int) _747;
  x264_cabac_encode_bypass (cb_60(D), _748);

  <bb 153>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_669
  # DEBUG b => mdy_674
  _675 = mdx_669 & 65535;
  _676 = mdy_674 << 16;
  _677 = _675 + _676;
  _678 = (unsigned int) _677;
  # DEBUG a => NULL
  # DEBUG b => NULL
  # DEBUG h => h_58(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => NULL
  # DEBUG D#135 => &h_58(D)->mb.cache.mvd[0][12]
  # DEBUG dst => D#135
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => NULL
  _696 = (long unsigned int) _678;
  _697 = _696 << 32;
  val64_698 = _696 + _697;
  # DEBUG val64 => val64_698
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19632B] = val64_698;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_58(D) + 19640B] = val64_698;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19664B] = val64_698;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_58(D) + 19672B] = val64_698;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 8
  # DEBUG width => 4
  # DEBUG height => 2
  x264_mb_predict_mv (h_58(D), 0, 8, 4, &mvp);
  _618 = h_58(D)->mb.cache.mv[0][28][0];
  _619 = (int) _618;
  _620 = mvp[0];
  _621 = (int) _620;
  mdx_622 = _619 - _621;
  # DEBUG mdx => mdx_622
  _623 = h_58(D)->mb.cache.mv[0][28][1];
  _624 = (int) _623;
  _625 = mvp[1];
  _626 = (int) _625;
  mdy_627 = _624 - _626;
  # DEBUG mdy => mdy_627
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 8
  # DEBUG l => 0
  # DEBUG mvd => mdx_622
  _827 = h_58(D)->mb.cache.mvd[0][27][0];
  _828 = (int) _827;
  _829 = ABS_EXPR <_828>;
  _831 = h_58(D)->mb.cache.mvd[0][20][0];
  _832 = (int) _831;
  _833 = ABS_EXPR <_832>;
  amvd_834 = _829 + _833;
  # DEBUG amvd => amvd_834
  i_abs_835 = ABS_EXPR <mdx_622>;
  # DEBUG i_abs => i_abs_835
  # DEBUG ctxbase => 40
  _836 = amvd_834 > 2;
  _837 = (int) _836;
  _838 = amvd_834 > 32;
  _839 = (int) _838;
  ctx_840 = _837 + _839;
  # DEBUG ctx => ctx_840
  if (i_abs_835 == 0)
    goto <bb 154>;
  else
    goto <bb 155>;

  <bb 154>:
  _842 = ctx_840 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _842, 0);
  goto <bb 166>;

  <bb 155>:
  if (i_abs_835 <= 8)
    goto <bb 156>;
  else
    goto <bb 162>;

  <bb 156>:
  _843 = ctx_840 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _843, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_835 > 1)
    goto <bb 157>;
  else
    goto <bb 159>;

  <bb 157>:
  goto <bb 160>;

  <bb 158>:

  <bb 159>:
  _849 = ctxes[i_abs_835];
  _850 = (int) _849;
  _851 = _850 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _851, 0);
  _852 = mdx_622 < 0;
  _853 = (int) _852;
  x264_cabac_encode_bypass (cb_60(D), _853);
  goto <bb 166>;

  <bb 160>:
  # i_2029 = PHI <1(157), i_848(161)>
  # DEBUG i => i_2029
  _845 = ctxes[i_2029];
  _846 = (int) _845;
  _847 = _846 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _847, 1);
  i_848 = i_2029 + 1;
  # DEBUG i => i_848
  # DEBUG i => i_848
  if (i_abs_835 > i_848)
    goto <bb 161>;
  else
    goto <bb 158>;

  <bb 161>:
  goto <bb 160>;

  <bb 162>:
  _854 = ctx_840 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _854, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 163>:
  # i_1750 = PHI <i_859(164), 1(162)>
  # ivtmp_1978 = PHI <ivtmp_1988(164), 8(162)>
  # DEBUG i => i_1750
  _856 = ctxes[i_1750];
  _857 = (int) _856;
  _858 = _857 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _858, 1);
  i_859 = i_1750 + 1;
  # DEBUG i => i_859
  # DEBUG i => i_859
  ivtmp_1988 = ivtmp_1978 - 1;
  if (ivtmp_1988 != 0)
    goto <bb 164>;
  else
    goto <bb 165>;

  <bb 164>:
  goto <bb 163>;

  <bb 165>:
  _860 = i_abs_835 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _860);
  _861 = mdx_622 < 0;
  _862 = (int) _861;
  x264_cabac_encode_bypass (cb_60(D), _862);

  <bb 166>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 8
  # DEBUG l => 1
  # DEBUG mvd => mdy_627
  _789 = h_58(D)->mb.cache.mvd[0][27][1];
  _790 = (int) _789;
  _791 = ABS_EXPR <_790>;
  _793 = h_58(D)->mb.cache.mvd[0][20][1];
  _794 = (int) _793;
  _795 = ABS_EXPR <_794>;
  amvd_796 = _791 + _795;
  # DEBUG amvd => amvd_796
  i_abs_797 = ABS_EXPR <mdy_627>;
  # DEBUG i_abs => i_abs_797
  # DEBUG ctxbase => 47
  _798 = amvd_796 > 2;
  _799 = (int) _798;
  _800 = amvd_796 > 32;
  _801 = (int) _800;
  ctx_802 = _799 + _801;
  # DEBUG ctx => ctx_802
  if (i_abs_797 == 0)
    goto <bb 167>;
  else
    goto <bb 168>;

  <bb 167>:
  _804 = ctx_802 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _804, 0);
  goto <bb 179>;

  <bb 168>:
  if (i_abs_797 <= 8)
    goto <bb 169>;
  else
    goto <bb 175>;

  <bb 169>:
  _805 = ctx_802 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _805, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_797 > 1)
    goto <bb 170>;
  else
    goto <bb 172>;

  <bb 170>:
  goto <bb 173>;

  <bb 171>:

  <bb 172>:
  _811 = ctxes[i_abs_797];
  _812 = (int) _811;
  _813 = _812 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _813, 0);
  _814 = mdy_627 < 0;
  _815 = (int) _814;
  x264_cabac_encode_bypass (cb_60(D), _815);
  goto <bb 179>;

  <bb 173>:
  # i_2027 = PHI <1(170), i_810(174)>
  # DEBUG i => i_2027
  _807 = ctxes[i_2027];
  _808 = (int) _807;
  _809 = _808 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _809, 1);
  i_810 = i_2027 + 1;
  # DEBUG i => i_810
  # DEBUG i => i_810
  if (i_abs_797 > i_810)
    goto <bb 174>;
  else
    goto <bb 171>;

  <bb 174>:
  goto <bb 173>;

  <bb 175>:
  _816 = ctx_802 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _816, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 176>:
  # i_1972 = PHI <i_821(177), 1(175)>
  # ivtmp_932 = PHI <ivtmp_1968(177), 8(175)>
  # DEBUG i => i_1972
  _818 = ctxes[i_1972];
  _819 = (int) _818;
  _820 = _819 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _820, 1);
  i_821 = i_1972 + 1;
  # DEBUG i => i_821
  # DEBUG i => i_821
  ivtmp_1968 = ivtmp_932 - 1;
  if (ivtmp_1968 != 0)
    goto <bb 177>;
  else
    goto <bb 178>;

  <bb 177>:
  goto <bb 176>;

  <bb 178>:
  _822 = i_abs_797 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _822);
  _823 = mdy_627 < 0;
  _824 = (int) _823;
  x264_cabac_encode_bypass (cb_60(D), _824);

  <bb 179>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_622
  # DEBUG b => mdy_627
  _628 = mdx_622 & 65535;
  _629 = mdy_627 << 16;
  _630 = _628 + _629;
  _631 = (unsigned int) _630;
  # DEBUG a => NULL
  # DEBUG b => NULL
  # DEBUG h => h_58(D)
  # DEBUG x => 0
  # DEBUG y => 2
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => 0
  # DEBUG mv => NULL
  # DEBUG D#133 => &h_58(D)->mb.cache.mvd[0][28]
  # DEBUG dst => D#133
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => NULL
  _649 = (long unsigned int) _631;
  _650 = _649 << 32;
  val64_651 = _649 + _650;
  # DEBUG val64 => val64_651
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19696B] = val64_651;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_58(D) + 19704B] = val64_651;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19728B] = val64_651;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)h_58(D) + 19736B] = val64_651;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  goto <bb 413>;

  <bb 180>:
  if (prephitmp_2974 == 15)
    goto <bb 181>;
  else
    goto <bb 89>;

  <bb 181>:
  _143 = h_58(D)->mb.pic.i_fref[0];
  if (_143 > 1)
    goto <bb 182>;
  else
    goto <bb 183>;

  <bb 182>:
  x264_cabac_mb_ref (h_58(D), cb_60(D), 0, 0);
  x264_cabac_mb_ref (h_58(D), cb_60(D), 0, 4);

  <bb 183>:
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 0
  # DEBUG width => 2
  # DEBUG height => 4
  x264_mb_predict_mv (h_58(D), 0, 0, 2, &mvp);
  _911 = h_58(D)->mb.cache.mv[0][12][0];
  _912 = (int) _911;
  _913 = mvp[0];
  _914 = (int) _913;
  mdx_915 = _912 - _914;
  # DEBUG mdx => mdx_915
  _916 = h_58(D)->mb.cache.mv[0][12][1];
  _917 = (int) _916;
  _918 = mvp[1];
  _919 = (int) _918;
  mdy_920 = _917 - _919;
  # DEBUG mdy => mdy_920
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 0
  # DEBUG l => 0
  # DEBUG mvd => mdx_915
  _997 = h_58(D)->mb.cache.mvd[0][11][0];
  _998 = (int) _997;
  _999 = ABS_EXPR <_998>;
  _1001 = h_58(D)->mb.cache.mvd[0][4][0];
  _1002 = (int) _1001;
  _1003 = ABS_EXPR <_1002>;
  amvd_1004 = _999 + _1003;
  # DEBUG amvd => amvd_1004
  i_abs_1005 = ABS_EXPR <mdx_915>;
  # DEBUG i_abs => i_abs_1005
  # DEBUG ctxbase => 40
  _1006 = amvd_1004 > 2;
  _1007 = (int) _1006;
  _1008 = amvd_1004 > 32;
  _1009 = (int) _1008;
  ctx_1010 = _1007 + _1009;
  # DEBUG ctx => ctx_1010
  if (i_abs_1005 == 0)
    goto <bb 184>;
  else
    goto <bb 185>;

  <bb 184>:
  _1012 = ctx_1010 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1012, 0);
  goto <bb 196>;

  <bb 185>:
  if (i_abs_1005 <= 8)
    goto <bb 186>;
  else
    goto <bb 192>;

  <bb 186>:
  _1013 = ctx_1010 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1013, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1005 > 1)
    goto <bb 187>;
  else
    goto <bb 189>;

  <bb 187>:
  goto <bb 190>;

  <bb 188>:

  <bb 189>:
  _1019 = ctxes[i_abs_1005];
  _1020 = (int) _1019;
  _1021 = _1020 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1021, 0);
  _1022 = mdx_915 < 0;
  _1023 = (int) _1022;
  x264_cabac_encode_bypass (cb_60(D), _1023);
  goto <bb 196>;

  <bb 190>:
  # i_2004 = PHI <1(187), i_1018(191)>
  # DEBUG i => i_2004
  _1015 = ctxes[i_2004];
  _1016 = (int) _1015;
  _1017 = _1016 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1017, 1);
  i_1018 = i_2004 + 1;
  # DEBUG i => i_1018
  # DEBUG i => i_1018
  if (i_abs_1005 > i_1018)
    goto <bb 191>;
  else
    goto <bb 188>;

  <bb 191>:
  goto <bb 190>;

  <bb 192>:
  _1024 = ctx_1010 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1024, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 193>:
  # i_319 = PHI <i_1029(194), 1(192)>
  # ivtmp_1928 = PHI <ivtmp_1938(194), 8(192)>
  # DEBUG i => i_319
  _1026 = ctxes[i_319];
  _1027 = (int) _1026;
  _1028 = _1027 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1028, 1);
  i_1029 = i_319 + 1;
  # DEBUG i => i_1029
  # DEBUG i => i_1029
  ivtmp_1938 = ivtmp_1928 - 1;
  if (ivtmp_1938 != 0)
    goto <bb 194>;
  else
    goto <bb 195>;

  <bb 194>:
  goto <bb 193>;

  <bb 195>:
  _1030 = i_abs_1005 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _1030);
  _1031 = mdx_915 < 0;
  _1032 = (int) _1031;
  x264_cabac_encode_bypass (cb_60(D), _1032);

  <bb 196>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 0
  # DEBUG l => 1
  # DEBUG mvd => mdy_920
  _959 = h_58(D)->mb.cache.mvd[0][11][1];
  _960 = (int) _959;
  _961 = ABS_EXPR <_960>;
  _963 = h_58(D)->mb.cache.mvd[0][4][1];
  _964 = (int) _963;
  _965 = ABS_EXPR <_964>;
  amvd_966 = _961 + _965;
  # DEBUG amvd => amvd_966
  i_abs_967 = ABS_EXPR <mdy_920>;
  # DEBUG i_abs => i_abs_967
  # DEBUG ctxbase => 47
  _968 = amvd_966 > 2;
  _969 = (int) _968;
  _970 = amvd_966 > 32;
  _971 = (int) _970;
  ctx_972 = _969 + _971;
  # DEBUG ctx => ctx_972
  if (i_abs_967 == 0)
    goto <bb 197>;
  else
    goto <bb 198>;

  <bb 197>:
  _974 = ctx_972 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _974, 0);
  goto <bb 209>;

  <bb 198>:
  if (i_abs_967 <= 8)
    goto <bb 199>;
  else
    goto <bb 205>;

  <bb 199>:
  _975 = ctx_972 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _975, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_967 > 1)
    goto <bb 200>;
  else
    goto <bb 202>;

  <bb 200>:
  goto <bb 203>;

  <bb 201>:

  <bb 202>:
  _981 = ctxes[i_abs_967];
  _982 = (int) _981;
  _983 = _982 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _983, 0);
  _984 = mdy_920 < 0;
  _985 = (int) _984;
  x264_cabac_encode_bypass (cb_60(D), _985);
  goto <bb 209>;

  <bb 203>:
  # i_1991 = PHI <1(200), i_980(204)>
  # DEBUG i => i_1991
  _977 = ctxes[i_1991];
  _978 = (int) _977;
  _979 = _978 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _979, 1);
  i_980 = i_1991 + 1;
  # DEBUG i => i_980
  # DEBUG i => i_980
  if (i_abs_967 > i_980)
    goto <bb 204>;
  else
    goto <bb 201>;

  <bb 204>:
  goto <bb 203>;

  <bb 205>:
  _986 = ctx_972 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _986, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 206>:
  # i_1886 = PHI <i_991(207), 1(205)>
  # ivtmp_2949 = PHI <ivtmp_885(207), 8(205)>
  # DEBUG i => i_1886
  _988 = ctxes[i_1886];
  _989 = (int) _988;
  _990 = _989 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _990, 1);
  i_991 = i_1886 + 1;
  # DEBUG i => i_991
  # DEBUG i => i_991
  ivtmp_885 = ivtmp_2949 - 1;
  if (ivtmp_885 != 0)
    goto <bb 207>;
  else
    goto <bb 208>;

  <bb 207>:
  goto <bb 206>;

  <bb 208>:
  _992 = i_abs_967 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _992);
  _993 = mdy_920 < 0;
  _994 = (int) _993;
  x264_cabac_encode_bypass (cb_60(D), _994);

  <bb 209>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_915
  # DEBUG b => mdy_920
  _921 = mdx_915 & 65535;
  _922 = mdy_920 << 16;
  _923 = _921 + _922;
  _924 = (unsigned int) _923;
  # DEBUG a => NULL
  # DEBUG b => NULL
  # DEBUG h => h_58(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => NULL
  # DEBUG D#134 => &h_58(D)->mb.cache.mvd[0][12]
  # DEBUG dst => D#134
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => NULL
  _942 = (long unsigned int) _924;
  _943 = _942 << 32;
  val64_944 = _942 + _943;
  # DEBUG val64 => val64_944
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19632B] = val64_944;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19664B] = val64_944;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19696B] = val64_944;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19728B] = val64_944;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG mdx => NULL
  # DEBUG mdy => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 4
  # DEBUG width => 2
  # DEBUG height => 4
  x264_mb_predict_mv (h_58(D), 0, 4, 2, &mvp);
  _864 = h_58(D)->mb.cache.mv[0][14][0];
  _865 = (int) _864;
  _866 = mvp[0];
  _867 = (int) _866;
  mdx_868 = _865 - _867;
  # DEBUG mdx => mdx_868
  _869 = h_58(D)->mb.cache.mv[0][14][1];
  _870 = (int) _869;
  _871 = mvp[1];
  _872 = (int) _871;
  mdy_873 = _870 - _872;
  # DEBUG mdy => mdy_873
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 4
  # DEBUG l => 0
  # DEBUG mvd => mdx_868
  _1073 = h_58(D)->mb.cache.mvd[0][13][0];
  _1074 = (int) _1073;
  _1075 = ABS_EXPR <_1074>;
  _1077 = h_58(D)->mb.cache.mvd[0][6][0];
  _1078 = (int) _1077;
  _1079 = ABS_EXPR <_1078>;
  amvd_1080 = _1075 + _1079;
  # DEBUG amvd => amvd_1080
  i_abs_1081 = ABS_EXPR <mdx_868>;
  # DEBUG i_abs => i_abs_1081
  # DEBUG ctxbase => 40
  _1082 = amvd_1080 > 2;
  _1083 = (int) _1082;
  _1084 = amvd_1080 > 32;
  _1085 = (int) _1084;
  ctx_1086 = _1083 + _1085;
  # DEBUG ctx => ctx_1086
  if (i_abs_1081 == 0)
    goto <bb 210>;
  else
    goto <bb 211>;

  <bb 210>:
  _1088 = ctx_1086 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1088, 0);
  goto <bb 222>;

  <bb 211>:
  if (i_abs_1081 <= 8)
    goto <bb 212>;
  else
    goto <bb 218>;

  <bb 212>:
  _1089 = ctx_1086 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1089, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1081 > 1)
    goto <bb 213>;
  else
    goto <bb 215>;

  <bb 213>:
  goto <bb 216>;

  <bb 214>:

  <bb 215>:
  _1095 = ctxes[i_abs_1081];
  _1096 = (int) _1095;
  _1097 = _1096 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1097, 0);
  _1098 = mdx_868 < 0;
  _1099 = (int) _1098;
  x264_cabac_encode_bypass (cb_60(D), _1099);
  goto <bb 222>;

  <bb 216>:
  # i_2001 = PHI <1(213), i_1094(217)>
  # DEBUG i => i_2001
  _1091 = ctxes[i_2001];
  _1092 = (int) _1091;
  _1093 = _1092 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1093, 1);
  i_1094 = i_2001 + 1;
  # DEBUG i => i_1094
  # DEBUG i => i_1094
  if (i_abs_1081 > i_1094)
    goto <bb 217>;
  else
    goto <bb 214>;

  <bb 217>:
  goto <bb 216>;

  <bb 218>:
  _1100 = ctx_1086 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1100, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 219>:
  # i_1580 = PHI <i_1105(220), 1(218)>
  # ivtmp_2850 = PHI <ivtmp_2865(220), 8(218)>
  # DEBUG i => i_1580
  _1102 = ctxes[i_1580];
  _1103 = (int) _1102;
  _1104 = _1103 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1104, 1);
  i_1105 = i_1580 + 1;
  # DEBUG i => i_1105
  # DEBUG i => i_1105
  ivtmp_2865 = ivtmp_2850 - 1;
  if (ivtmp_2865 != 0)
    goto <bb 220>;
  else
    goto <bb 221>;

  <bb 220>:
  goto <bb 219>;

  <bb 221>:
  _1106 = i_abs_1081 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _1106);
  _1107 = mdx_868 < 0;
  _1108 = (int) _1107;
  x264_cabac_encode_bypass (cb_60(D), _1108);

  <bb 222>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => 0
  # DEBUG idx => 4
  # DEBUG l => 1
  # DEBUG mvd => mdy_873
  _1035 = h_58(D)->mb.cache.mvd[0][13][1];
  _1036 = (int) _1035;
  _1037 = ABS_EXPR <_1036>;
  _1039 = h_58(D)->mb.cache.mvd[0][6][1];
  _1040 = (int) _1039;
  _1041 = ABS_EXPR <_1040>;
  amvd_1042 = _1037 + _1041;
  # DEBUG amvd => amvd_1042
  i_abs_1043 = ABS_EXPR <mdy_873>;
  # DEBUG i_abs => i_abs_1043
  # DEBUG ctxbase => 47
  _1044 = amvd_1042 > 2;
  _1045 = (int) _1044;
  _1046 = amvd_1042 > 32;
  _1047 = (int) _1046;
  ctx_1048 = _1045 + _1047;
  # DEBUG ctx => ctx_1048
  if (i_abs_1043 == 0)
    goto <bb 223>;
  else
    goto <bb 224>;

  <bb 223>:
  _1050 = ctx_1048 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1050, 0);
  goto <bb 235>;

  <bb 224>:
  if (i_abs_1043 <= 8)
    goto <bb 225>;
  else
    goto <bb 231>;

  <bb 225>:
  _1051 = ctx_1048 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1051, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1043 > 1)
    goto <bb 226>;
  else
    goto <bb 228>;

  <bb 226>:
  goto <bb 229>;

  <bb 227>:

  <bb 228>:
  _1057 = ctxes[i_abs_1043];
  _1058 = (int) _1057;
  _1059 = _1058 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1059, 0);
  _1060 = mdy_873 < 0;
  _1061 = (int) _1060;
  x264_cabac_encode_bypass (cb_60(D), _1061);
  goto <bb 235>;

  <bb 229>:
  # i_2000 = PHI <1(226), i_1056(230)>
  # DEBUG i => i_2000
  _1053 = ctxes[i_2000];
  _1054 = (int) _1053;
  _1055 = _1054 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1055, 1);
  i_1056 = i_2000 + 1;
  # DEBUG i => i_1056
  # DEBUG i => i_1056
  if (i_abs_1043 > i_1056)
    goto <bb 230>;
  else
    goto <bb 227>;

  <bb 230>:
  goto <bb 229>;

  <bb 231>:
  _1062 = ctx_1048 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1062, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 232>:
  # i_27 = PHI <i_1067(233), 1(231)>
  # ivtmp_1265 = PHI <ivtmp_2840(233), 8(231)>
  # DEBUG i => i_27
  _1064 = ctxes[i_27];
  _1065 = (int) _1064;
  _1066 = _1065 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1066, 1);
  i_1067 = i_27 + 1;
  # DEBUG i => i_1067
  # DEBUG i => i_1067
  ivtmp_2840 = ivtmp_1265 - 1;
  if (ivtmp_2840 != 0)
    goto <bb 233>;
  else
    goto <bb 234>;

  <bb 233>:
  goto <bb 232>;

  <bb 234>:
  _1068 = i_abs_1043 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _1068);
  _1069 = mdy_873 < 0;
  _1070 = (int) _1069;
  x264_cabac_encode_bypass (cb_60(D), _1070);

  <bb 235>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_868
  # DEBUG b => mdy_873
  _874 = mdx_868 & 65535;
  _875 = mdy_873 << 16;
  _876 = _874 + _875;
  _877 = (unsigned int) _876;
  # DEBUG a => NULL
  # DEBUG b => NULL
  # DEBUG h => h_58(D)
  # DEBUG x => 2
  # DEBUG y => 0
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_list => 0
  # DEBUG mv => NULL
  # DEBUG D#132 => &h_58(D)->mb.cache.mvd[0][14]
  # DEBUG dst => D#132
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG val => NULL
  _895 = (long unsigned int) _877;
  _896 = _895 << 32;
  val64_897 = _895 + _896;
  # DEBUG val64 => val64_897
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19640B] = val64_897;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19672B] = val64_897;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19704B] = val64_897;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)h_58(D) + 19736B] = val64_897;
  # DEBUG dx => 1
  # DEBUG dx => 1
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  goto <bb 413>;

  <bb 236>:
  if (i_mb_type_59 == 5)
    goto <bb 237>;
  else
    goto <bb 275>;

  <bb 237>:
  _151 = h_58(D)->mb.i_sub_partition[0];
  # DEBUG cb => cb_60(D)
  # DEBUG i_sub => _151
  if (_151 == 3)
    goto <bb 238>;
  else
    goto <bb 239>;

  <bb 238>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 1);
  goto <bb 245>;

  <bb 239>:
  if (_151 == 1)
    goto <bb 240>;
  else
    goto <bb 241>;

  <bb 240>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 0);
  goto <bb 245>;

  <bb 241>:
  if (_151 == 2)
    goto <bb 242>;
  else
    goto <bb 243>;

  <bb 242>:
  # DEBUG D#1 => 2
  # DEBUG cb => cb_60(D)
  # DEBUG D#2 => D#1
  # DEBUG i_sub => D#2
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 23, 1);
  goto <bb 245>;

  <bb 243>:
  if (_151 == 0)
    goto <bb 244>;
  else
    goto <bb 245>;

  <bb 244>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 23, 0);

  <bb 245>:
  # DEBUG cb => NULL
  # DEBUG i_sub => NULL
  _153 = h_58(D)->mb.i_sub_partition[1];
  # DEBUG cb => cb_60(D)
  # DEBUG i_sub => _153
  if (_153 == 3)
    goto <bb 246>;
  else
    goto <bb 247>;

  <bb 246>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 1);
  goto <bb 253>;

  <bb 247>:
  if (_153 == 1)
    goto <bb 248>;
  else
    goto <bb 249>;

  <bb 248>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 0);
  goto <bb 253>;

  <bb 249>:
  if (_153 == 2)
    goto <bb 250>;
  else
    goto <bb 251>;

  <bb 250>:
  # DEBUG D#1 => 2
  # DEBUG cb => cb_60(D)
  # DEBUG D#2 => D#1
  # DEBUG i_sub => D#2
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 23, 1);
  goto <bb 253>;

  <bb 251>:
  if (_153 == 0)
    goto <bb 252>;
  else
    goto <bb 253>;

  <bb 252>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 23, 0);

  <bb 253>:
  # DEBUG cb => NULL
  # DEBUG i_sub => NULL
  _155 = h_58(D)->mb.i_sub_partition[2];
  # DEBUG cb => cb_60(D)
  # DEBUG i_sub => _155
  if (_155 == 3)
    goto <bb 254>;
  else
    goto <bb 255>;

  <bb 254>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 1);
  goto <bb 261>;

  <bb 255>:
  if (_155 == 1)
    goto <bb 256>;
  else
    goto <bb 257>;

  <bb 256>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 0);
  goto <bb 261>;

  <bb 257>:
  if (_155 == 2)
    goto <bb 258>;
  else
    goto <bb 259>;

  <bb 258>:
  # DEBUG D#1 => 2
  # DEBUG cb => cb_60(D)
  # DEBUG D#2 => D#1
  # DEBUG i_sub => D#2
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 23, 1);
  goto <bb 261>;

  <bb 259>:
  if (_155 == 0)
    goto <bb 260>;
  else
    goto <bb 261>;

  <bb 260>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 23, 0);

  <bb 261>:
  # DEBUG cb => NULL
  # DEBUG i_sub => NULL
  _157 = h_58(D)->mb.i_sub_partition[3];
  # DEBUG cb => cb_60(D)
  # DEBUG i_sub => _157
  if (_157 == 3)
    goto <bb 262>;
  else
    goto <bb 263>;

  <bb 262>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 1);
  goto <bb 269>;

  <bb 263>:
  if (_157 == 1)
    goto <bb 264>;
  else
    goto <bb 265>;

  <bb 264>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 0);
  goto <bb 269>;

  <bb 265>:
  if (_157 == 2)
    goto <bb 266>;
  else
    goto <bb 267>;

  <bb 266>:
  # DEBUG D#1 => 2
  # DEBUG cb => cb_60(D)
  # DEBUG D#2 => D#1
  # DEBUG i_sub => D#2
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 23, 1);
  goto <bb 269>;

  <bb 267>:
  if (_157 == 0)
    goto <bb 268>;
  else
    goto <bb 269>;

  <bb 268>:
  x264_cabac_encode_decision_asm (cb_60(D), 21, 0);
  x264_cabac_encode_decision_asm (cb_60(D), 22, 1);
  x264_cabac_encode_decision_asm (cb_60(D), 23, 0);

  <bb 269>:
  # DEBUG cb => NULL
  # DEBUG i_sub => NULL
  _159 = h_58(D)->mb.pic.i_fref[0];
  if (_159 > 1)
    goto <bb 270>;
  else
    goto <bb 271>;

  <bb 270>:
  x264_cabac_mb_ref (h_58(D), cb_60(D), 0, 0);
  x264_cabac_mb_ref (h_58(D), cb_60(D), 0, 4);
  x264_cabac_mb_ref (h_58(D), cb_60(D), 0, 8);
  x264_cabac_mb_ref (h_58(D), cb_60(D), 0, 12);

  <bb 271>:
  # DEBUG i => 0

  <bb 272>:
  # i_663 = PHI <i_165(274), 0(271)>
  # ivtmp_1948 = PHI <ivtmp_2800(274), 4(271)>
  # DEBUG i => i_663
  x264_cabac_mb8x8_mvd (h_58(D), cb_60(D), 0, i_663);
  i_165 = i_663 + 1;
  # DEBUG i => i_165
  # DEBUG i => i_165
  ivtmp_2800 = ivtmp_1948 - 1;
  if (ivtmp_2800 != 0)
    goto <bb 274>;
  else
    goto <bb 273>;

  <bb 273>:
  goto <bb 89>;

  <bb 274>:
  goto <bb 272>;

  <bb 275>:
  if (i_mb_type_59 == 17)
    goto <bb 276>;
  else
    goto <bb 295>;

  <bb 276>:
  _166 = h_58(D)->mb.i_sub_partition[0];
  x264_cabac_mb_sub_b_partition (cb_60(D), _166);
  _168 = h_58(D)->mb.i_sub_partition[1];
  x264_cabac_mb_sub_b_partition (cb_60(D), _168);
  _170 = h_58(D)->mb.i_sub_partition[2];
  x264_cabac_mb_sub_b_partition (cb_60(D), _170);
  _172 = h_58(D)->mb.i_sub_partition[3];
  x264_cabac_mb_sub_b_partition (cb_60(D), _172);
  # DEBUG i_list => 0
  # DEBUG i_list => 0
  goto <bb 278>;

  <bb 277>:
  # i_list_175 = PHI <i_list_183(282), i_list_1014(504)>

  <bb 278>:
  # i_list_1993 = PHI <i_list_175(277), 0(276)>
  # DEBUG i_list => i_list_1993
  if (i_list_1993 != 0)
    goto <bb 279>;
  else
    goto <bb 283>;

  <bb 279>:
  _174 = h_58(D)->mb.pic.i_fref[1];
  if (_174 == 1)
    goto <bb 282>;
  else
    goto <bb 280>;

  <bb 280>:
  goto <bb 285>;

  <bb 281>:

  <bb 282>:
  i_list_183 = i_list_1993 + 1;
  # DEBUG i_list => i_list_183
  # DEBUG i_list => i_list_183
  if (i_list_183 != 2)
    goto <bb 277>;
  else
    goto <bb 288>;

  <bb 283>:
  # DEBUG i_list => i_list_1993
  _176 = h_58(D)->mb.pic.i_fref[0];
  if (_176 == 1)
    goto <bb 504>;
  else
    goto <bb 280>;

  <bb 284>:

  <bb 285>:
  # i_1072 = PHI <0(280), i_182(284)>
  # ivtmp_2805 = PHI <4(280), ivtmp_2820(284)>
  # DEBUG i => i_1072
  _178 = h_58(D)->mb.i_sub_partition[i_1072];
  _179 = x264_mb_partition_listX_table[i_list_1993][_178];
  if (_179 != 0)
    goto <bb 286>;
  else
    goto <bb 287>;

  <bb 286>:
  _180 = i_1072 * 4;
  x264_cabac_mb_ref (h_58(D), cb_60(D), i_list_1993, _180);

  <bb 287>:
  i_182 = i_1072 + 1;
  # DEBUG i => i_182
  # DEBUG i => i_182
  ivtmp_2820 = ivtmp_2805 - 1;
  if (ivtmp_2820 != 0)
    goto <bb 284>;
  else
    goto <bb 281>;

  <bb 288>:

  <bb 289>:
  # i_1394 = PHI <0(288), i_185(290)>
  # ivtmp_2855 = PHI <4(288), ivtmp_2790(290)>
  # DEBUG i => i_1394
  x264_cabac_mb8x8_mvd (h_58(D), cb_60(D), 0, i_1394);
  i_185 = i_1394 + 1;
  # DEBUG i => i_185
  # DEBUG i => i_185
  ivtmp_2790 = ivtmp_2855 - 1;
  if (ivtmp_2790 != 0)
    goto <bb 290>;
  else
    goto <bb 291>;

  <bb 290>:
  goto <bb 289>;

  <bb 291>:

  <bb 292>:
  # i_2045 = PHI <0(291), i_187(294)>
  # ivtmp_2830 = PHI <4(291), ivtmp_2845(294)>
  # DEBUG i => i_2045
  x264_cabac_mb8x8_mvd (h_58(D), cb_60(D), 1, i_2045);
  i_187 = i_2045 + 1;
  # DEBUG i => i_187
  # DEBUG i => i_187
  ivtmp_2845 = ivtmp_2830 - 1;
  if (ivtmp_2845 != 0)
    goto <bb 294>;
  else
    goto <bb 293>;

  <bb 293>:
  goto <bb 89>;

  <bb 294>:
  goto <bb 292>;

  <bb 295>:
  if (i_mb_type_59 != 7)
    goto <bb 296>;
  else
    goto <bb 89>;

  <bb 296>:
  # DEBUG i => 0
  _1904 = x264_mb_type_list0_table[i_mb_type_59][0];
  _1905 = (int) _1904;
  b_list[0][0] = _1905;
  _1907 = x264_mb_type_list1_table[i_mb_type_59][0];
  _1908 = (int) _1907;
  b_list[1][0] = _1908;
  # DEBUG i => 1
  # DEBUG i => 1
  _1913 = x264_mb_type_list0_table[i_mb_type_59][1];
  _1914 = (int) _1913;
  b_list[0][1] = _1914;
  _1916 = x264_mb_type_list1_table[i_mb_type_59][1];
  _1917 = (int) _1916;
  b_list[1][1] = _1917;
  # DEBUG i => 2
  # DEBUG i => 2
  # DEBUG i_list => 0
  pretmp_2977 = h_58(D)->mb.i_partition;
  goto <bb 298>;

  <bb 297>:
  # i_list_830 = PHI <i_list_210(316), i_list_1381(505)>
  # prephitmp_2976 = PHI <prephitmp_2879(316), prephitmp_2978(505)>

  <bb 298>:
  # i_list_1896 = PHI <i_list_830(297), 0(296)>
  # prephitmp_2978 = PHI <prephitmp_2976(297), pretmp_2977(296)>
  # DEBUG i_list => i_list_1896
  if (i_list_1896 == 0)
    goto <bb 299>;
  else
    goto <bb 300>;

  <bb 299>:
  # DEBUG i_list => i_list_1896
  iftmp.6_195 = h_58(D)->mb.pic.i_fref[0];
  # DEBUG i_ref_max => iftmp.6_195
  if (iftmp.6_195 > 1)
    goto <bb 301>;
  else
    goto <bb 505>;

  <bb 300>:
  iftmp.6_196 = h_58(D)->mb.pic.i_fref[1];
  # DEBUG i_ref_max => iftmp.6_196
  if (iftmp.6_196 > 1)
    goto <bb 301>;
  else
    goto <bb 316>;

  <bb 301>:
  if (prephitmp_2978 == 16)
    goto <bb 302>;
  else
    goto <bb 304>;

  <bb 302>:
  _199 = b_list[i_list_1896][0];
  if (_199 != 0)
    goto <bb 303>;
  else
    goto <bb 316>;

  <bb 303>:
  x264_cabac_mb_ref (h_58(D), cb_60(D), i_list_1896, 0);
  pretmp_2874 = h_58(D)->mb.i_partition;
  goto <bb 316>;

  <bb 304>:
  if (prephitmp_2978 == 14)
    goto <bb 305>;
  else
    goto <bb 310>;

  <bb 305>:
  _201 = b_list[i_list_1896][0];
  if (_201 != 0)
    goto <bb 306>;
  else
    goto <bb 307>;

  <bb 306>:
  x264_cabac_mb_ref (h_58(D), cb_60(D), i_list_1896, 0);

  <bb 307>:
  _203 = b_list[i_list_1896][1];
  if (_203 != 0)
    goto <bb 309>;
  else
    goto <bb 308>;

  <bb 308>:
  pretmp_2878 = h_58(D)->mb.i_partition;
  goto <bb 316>;

  <bb 309>:
  x264_cabac_mb_ref (h_58(D), cb_60(D), i_list_1896, 8);
  pretmp_2875 = h_58(D)->mb.i_partition;
  goto <bb 316>;

  <bb 310>:
  if (prephitmp_2978 == 15)
    goto <bb 311>;
  else
    goto <bb 316>;

  <bb 311>:
  _206 = b_list[i_list_1896][0];
  if (_206 != 0)
    goto <bb 312>;
  else
    goto <bb 313>;

  <bb 312>:
  x264_cabac_mb_ref (h_58(D), cb_60(D), i_list_1896, 0);

  <bb 313>:
  _208 = b_list[i_list_1896][1];
  if (_208 != 0)
    goto <bb 315>;
  else
    goto <bb 314>;

  <bb 314>:
  pretmp_2876 = h_58(D)->mb.i_partition;
  goto <bb 316>;

  <bb 315>:
  x264_cabac_mb_ref (h_58(D), cb_60(D), i_list_1896, 4);
  pretmp_2877 = h_58(D)->mb.i_partition;

  <bb 316>:
  # prephitmp_2879 = PHI <prephitmp_2978(300), pretmp_2874(303), pretmp_2875(309), prephitmp_2978(310), pretmp_2876(314), pretmp_2877(315), prephitmp_2978(302), pretmp_2878(308)>
  i_list_210 = i_list_1896 + 1;
  # DEBUG i_list => i_list_210
  # DEBUG i_list => i_list_210
  if (i_list_210 != 2)
    goto <bb 297>;
  else
    goto <bb 317>;

  <bb 317>:
  # prephitmp_2672 = PHI <prephitmp_2879(316)>

  <bb 318>:
  # i_list_863 = PHI <0(317), i_list_223(411)>
  # prephitmp_2881 = PHI <prephitmp_2672(317), pretmp_2880(411)>
  # ivtmp_2913 = PHI <2(317), ivtmp_2928(411)>
  # DEBUG i_list => i_list_863
  if (prephitmp_2881 == 16)
    goto <bb 319>;
  else
    goto <bb 348>;

  <bb 319>:
  _212 = b_list[i_list_863][0];
  if (_212 != 0)
    goto <bb 321>;
  else
    goto <bb 320>;

  <bb 320>:
  goto <bb 410>;

  <bb 321>:
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => i_list_863
  # DEBUG idx => 0
  # DEBUG width => 4
  # DEBUG height => 4
  x264_mb_predict_mv (h_58(D), i_list_863, 0, 4, &mvp);
  _154 = h_58(D)->mb.cache.mv[i_list_863][12][0];
  _156 = (int) _154;
  _158 = mvp[0];
  _1109 = (int) _158;
  mdx_1110 = _156 - _1109;
  # DEBUG mdx => mdx_1110
  _1111 = h_58(D)->mb.cache.mv[i_list_863][12][1];
  _1112 = (int) _1111;
  _1113 = mvp[1];
  _1114 = (int) _1113;
  mdy_1115 = _1112 - _1114;
  # DEBUG mdy => mdy_1115
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => i_list_863
  # DEBUG idx => 0
  # DEBUG l => 0
  # DEBUG mvd => mdx_1110
  _1192 = h_58(D)->mb.cache.mvd[i_list_863][11][0];
  _1193 = (int) _1192;
  _1194 = ABS_EXPR <_1193>;
  _1196 = h_58(D)->mb.cache.mvd[i_list_863][4][0];
  _1197 = (int) _1196;
  _1198 = ABS_EXPR <_1197>;
  amvd_1199 = _1194 + _1198;
  # DEBUG amvd => amvd_1199
  i_abs_1200 = ABS_EXPR <mdx_1110>;
  # DEBUG i_abs => i_abs_1200
  # DEBUG ctxbase => 40
  _1201 = amvd_1199 > 2;
  _1202 = (int) _1201;
  _1203 = amvd_1199 > 32;
  _1204 = (int) _1203;
  ctx_1205 = _1202 + _1204;
  # DEBUG ctx => ctx_1205
  if (i_abs_1200 == 0)
    goto <bb 322>;
  else
    goto <bb 323>;

  <bb 322>:
  _1207 = ctx_1205 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1207, 0);
  goto <bb 334>;

  <bb 323>:
  if (i_abs_1200 <= 8)
    goto <bb 324>;
  else
    goto <bb 330>;

  <bb 324>:
  _1208 = ctx_1205 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1208, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1200 > 1)
    goto <bb 325>;
  else
    goto <bb 327>;

  <bb 325>:
  goto <bb 328>;

  <bb 326>:

  <bb 327>:
  _1214 = ctxes[i_abs_1200];
  _1215 = (int) _1214;
  _1216 = _1215 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1216, 0);
  _1217 = mdx_1110 < 0;
  _1218 = (int) _1217;
  x264_cabac_encode_bypass (cb_60(D), _1218);
  goto <bb 334>;

  <bb 328>:
  # i_2116 = PHI <1(325), i_1213(329)>
  # DEBUG i => i_2116
  _1210 = ctxes[i_2116];
  _1211 = (int) _1210;
  _1212 = _1211 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1212, 1);
  i_1213 = i_2116 + 1;
  # DEBUG i => i_1213
  # DEBUG i => i_1213
  if (i_abs_1200 > i_1213)
    goto <bb 329>;
  else
    goto <bb 326>;

  <bb 329>:
  goto <bb 328>;

  <bb 330>:
  _1219 = ctx_1205 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1219, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 331>:
  # i_1953 = PHI <i_1224(332), 1(330)>
  # ivtmp_2795 = PHI <ivtmp_2810(332), 8(330)>
  # DEBUG i => i_1953
  _1221 = ctxes[i_1953];
  _1222 = (int) _1221;
  _1223 = _1222 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1223, 1);
  i_1224 = i_1953 + 1;
  # DEBUG i => i_1224
  # DEBUG i => i_1224
  ivtmp_2810 = ivtmp_2795 - 1;
  if (ivtmp_2810 != 0)
    goto <bb 332>;
  else
    goto <bb 333>;

  <bb 332>:
  goto <bb 331>;

  <bb 333>:
  _1225 = i_abs_1200 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _1225);
  _1226 = mdx_1110 < 0;
  _1227 = (int) _1226;
  x264_cabac_encode_bypass (cb_60(D), _1227);

  <bb 334>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => i_list_863
  # DEBUG idx => 0
  # DEBUG l => 1
  # DEBUG mvd => mdy_1115
  _1154 = h_58(D)->mb.cache.mvd[i_list_863][11][1];
  _1155 = (int) _1154;
  _1156 = ABS_EXPR <_1155>;
  _1158 = h_58(D)->mb.cache.mvd[i_list_863][4][1];
  _1159 = (int) _1158;
  _1160 = ABS_EXPR <_1159>;
  amvd_1161 = _1156 + _1160;
  # DEBUG amvd => amvd_1161
  i_abs_1162 = ABS_EXPR <mdy_1115>;
  # DEBUG i_abs => i_abs_1162
  # DEBUG ctxbase => 47
  _1163 = amvd_1161 > 2;
  _1164 = (int) _1163;
  _1165 = amvd_1161 > 32;
  _1166 = (int) _1165;
  ctx_1167 = _1164 + _1166;
  # DEBUG ctx => ctx_1167
  if (i_abs_1162 == 0)
    goto <bb 335>;
  else
    goto <bb 336>;

  <bb 335>:
  _1169 = ctx_1167 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1169, 0);
  goto <bb 347>;

  <bb 336>:
  if (i_abs_1162 <= 8)
    goto <bb 337>;
  else
    goto <bb 343>;

  <bb 337>:
  _1170 = ctx_1167 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1170, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1162 > 1)
    goto <bb 338>;
  else
    goto <bb 340>;

  <bb 338>:
  goto <bb 341>;

  <bb 339>:

  <bb 340>:
  _1176 = ctxes[i_abs_1162];
  _1177 = (int) _1176;
  _1178 = _1177 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1178, 0);
  _1179 = mdy_1115 < 0;
  _1180 = (int) _1179;
  x264_cabac_encode_bypass (cb_60(D), _1180);
  goto <bb 347>;

  <bb 341>:
  # i_2109 = PHI <1(338), i_1175(342)>
  # DEBUG i => i_2109
  _1172 = ctxes[i_2109];
  _1173 = (int) _1172;
  _1174 = _1173 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1174, 1);
  i_1175 = i_2109 + 1;
  # DEBUG i => i_1175
  # DEBUG i => i_1175
  if (i_abs_1162 > i_1175)
    goto <bb 342>;
  else
    goto <bb 339>;

  <bb 342>:
  goto <bb 341>;

  <bb 343>:
  _1181 = ctx_1167 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1181, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 344>:
  # i_2104 = PHI <i_1186(345), 1(343)>
  # ivtmp_2835 = PHI <ivtmp_2780(345), 8(343)>
  # DEBUG i => i_2104
  _1183 = ctxes[i_2104];
  _1184 = (int) _1183;
  _1185 = _1184 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1185, 1);
  i_1186 = i_2104 + 1;
  # DEBUG i => i_1186
  # DEBUG i => i_1186
  ivtmp_2780 = ivtmp_2835 - 1;
  if (ivtmp_2780 != 0)
    goto <bb 345>;
  else
    goto <bb 346>;

  <bb 345>:
  goto <bb 344>;

  <bb 346>:
  _1187 = i_abs_1162 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _1187);
  _1188 = mdy_1115 < 0;
  _1189 = (int) _1188;
  x264_cabac_encode_bypass (cb_60(D), _1189);

  <bb 347>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_1110
  # DEBUG b => mdy_1115
  _1116 = mdx_1110 & 65535;
  _1117 = mdy_1115 << 16;
  _1118 = _1116 + _1117;
  _1119 = (unsigned int) _1118;
  # DEBUG a => NULL
  # DEBUG b => NULL
  # DEBUG h => h_58(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_list => i_list_863
  # DEBUG mv => NULL
  _1127 = &h_58(D)->mb.cache.mvd[i_list_863][12];
  # DEBUG dst => _1127
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG val => NULL
  _1137 = (long unsigned int) _1119;
  _1138 = _1137 << 32;
  val64_1139 = _1137 + _1138;
  # DEBUG val64 => val64_1139
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_1127] = val64_1139;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_1127 + 8B] = val64_1139;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_1127 + 32B] = val64_1139;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_1127 + 40B] = val64_1139;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dx => 0
  MEM[(uint64_t *)_1127 + 64B] = val64_1139;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_1127 + 72B] = val64_1139;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 3
  # DEBUG dy => 3
  # DEBUG dx => 0
  MEM[(uint64_t *)_1127 + 96B] = val64_1139;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_1127 + 104B] = val64_1139;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 4
  # DEBUG dy => 4
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  goto <bb 410>;

  <bb 348>:
  if (prephitmp_2881 == 14)
    goto <bb 349>;
  else
    goto <bb 405>;

  <bb 349>:
  _214 = b_list[i_list_863][0];
  if (_214 != 0)
    goto <bb 350>;
  else
    goto <bb 377>;

  <bb 350>:
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => i_list_863
  # DEBUG idx => 0
  # DEBUG width => 4
  # DEBUG height => 2
  x264_mb_predict_mv (h_58(D), i_list_863, 0, 4, &mvp);
  _1229 = h_58(D)->mb.cache.mv[i_list_863][12][0];
  _1230 = (int) _1229;
  _1231 = mvp[0];
  _1232 = (int) _1231;
  mdx_1233 = _1230 - _1232;
  # DEBUG mdx => mdx_1233
  _1234 = h_58(D)->mb.cache.mv[i_list_863][12][1];
  _1235 = (int) _1234;
  _1236 = mvp[1];
  _1237 = (int) _1236;
  mdy_1238 = _1235 - _1237;
  # DEBUG mdy => mdy_1238
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => i_list_863
  # DEBUG idx => 0
  # DEBUG l => 0
  # DEBUG mvd => mdx_1233
  _1315 = h_58(D)->mb.cache.mvd[i_list_863][11][0];
  _1316 = (int) _1315;
  _1317 = ABS_EXPR <_1316>;
  _1319 = h_58(D)->mb.cache.mvd[i_list_863][4][0];
  _1320 = (int) _1319;
  _1321 = ABS_EXPR <_1320>;
  amvd_1322 = _1317 + _1321;
  # DEBUG amvd => amvd_1322
  i_abs_1323 = ABS_EXPR <mdx_1233>;
  # DEBUG i_abs => i_abs_1323
  # DEBUG ctxbase => 40
  _1324 = amvd_1322 > 2;
  _1325 = (int) _1324;
  _1326 = amvd_1322 > 32;
  _1327 = (int) _1326;
  ctx_1328 = _1325 + _1327;
  # DEBUG ctx => ctx_1328
  if (i_abs_1323 == 0)
    goto <bb 351>;
  else
    goto <bb 352>;

  <bb 351>:
  _1330 = ctx_1328 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1330, 0);
  goto <bb 363>;

  <bb 352>:
  if (i_abs_1323 <= 8)
    goto <bb 353>;
  else
    goto <bb 359>;

  <bb 353>:
  _1331 = ctx_1328 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1331, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1323 > 1)
    goto <bb 354>;
  else
    goto <bb 356>;

  <bb 354>:
  goto <bb 357>;

  <bb 355>:

  <bb 356>:
  _1337 = ctxes[i_abs_1323];
  _1338 = (int) _1337;
  _1339 = _1338 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1339, 0);
  _1340 = mdx_1233 < 0;
  _1341 = (int) _1340;
  x264_cabac_encode_bypass (cb_60(D), _1341);
  goto <bb 363>;

  <bb 357>:
  # i_1618 = PHI <1(354), i_1336(358)>
  # DEBUG i => i_1618
  _1333 = ctxes[i_1618];
  _1334 = (int) _1333;
  _1335 = _1334 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1335, 1);
  i_1336 = i_1618 + 1;
  # DEBUG i => i_1336
  # DEBUG i => i_1336
  if (i_abs_1323 > i_1336)
    goto <bb 358>;
  else
    goto <bb 355>;

  <bb 358>:
  goto <bb 357>;

  <bb 359>:
  _1342 = ctx_1328 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1342, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 360>:
  # i_958 = PHI <i_1347(361), 1(359)>
  # ivtmp_2923 = PHI <ivtmp_2938(361), 8(359)>
  # DEBUG i => i_958
  _1344 = ctxes[i_958];
  _1345 = (int) _1344;
  _1346 = _1345 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1346, 1);
  i_1347 = i_958 + 1;
  # DEBUG i => i_1347
  # DEBUG i => i_1347
  ivtmp_2938 = ivtmp_2923 - 1;
  if (ivtmp_2938 != 0)
    goto <bb 361>;
  else
    goto <bb 362>;

  <bb 361>:
  goto <bb 360>;

  <bb 362>:
  _1348 = i_abs_1323 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _1348);
  _1349 = mdx_1233 < 0;
  _1350 = (int) _1349;
  x264_cabac_encode_bypass (cb_60(D), _1350);

  <bb 363>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => i_list_863
  # DEBUG idx => 0
  # DEBUG l => 1
  # DEBUG mvd => mdy_1238
  _1277 = h_58(D)->mb.cache.mvd[i_list_863][11][1];
  _1278 = (int) _1277;
  _1279 = ABS_EXPR <_1278>;
  _1281 = h_58(D)->mb.cache.mvd[i_list_863][4][1];
  _1282 = (int) _1281;
  _1283 = ABS_EXPR <_1282>;
  amvd_1284 = _1279 + _1283;
  # DEBUG amvd => amvd_1284
  i_abs_1285 = ABS_EXPR <mdy_1238>;
  # DEBUG i_abs => i_abs_1285
  # DEBUG ctxbase => 47
  _1286 = amvd_1284 > 2;
  _1287 = (int) _1286;
  _1288 = amvd_1284 > 32;
  _1289 = (int) _1288;
  ctx_1290 = _1287 + _1289;
  # DEBUG ctx => ctx_1290
  if (i_abs_1285 == 0)
    goto <bb 364>;
  else
    goto <bb 365>;

  <bb 364>:
  _1292 = ctx_1290 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1292, 0);
  goto <bb 376>;

  <bb 365>:
  if (i_abs_1285 <= 8)
    goto <bb 366>;
  else
    goto <bb 372>;

  <bb 366>:
  _1293 = ctx_1290 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1293, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1285 > 1)
    goto <bb 367>;
  else
    goto <bb 369>;

  <bb 367>:
  goto <bb 370>;

  <bb 368>:

  <bb 369>:
  _1299 = ctxes[i_abs_1285];
  _1300 = (int) _1299;
  _1301 = _1300 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1301, 0);
  _1302 = mdy_1238 < 0;
  _1303 = (int) _1302;
  x264_cabac_encode_bypass (cb_60(D), _1303);
  goto <bb 376>;

  <bb 370>:
  # i_2099 = PHI <1(367), i_1298(371)>
  # DEBUG i => i_2099
  _1295 = ctxes[i_2099];
  _1296 = (int) _1295;
  _1297 = _1296 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1297, 1);
  i_1298 = i_2099 + 1;
  # DEBUG i => i_1298
  # DEBUG i => i_1298
  if (i_abs_1285 > i_1298)
    goto <bb 371>;
  else
    goto <bb 368>;

  <bb 371>:
  goto <bb 370>;

  <bb 372>:
  _1304 = ctx_1290 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1304, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 373>:
  # i_1884 = PHI <i_1309(374), 1(372)>
  # ivtmp_2775 = PHI <ivtmp_2933(374), 8(372)>
  # DEBUG i => i_1884
  _1306 = ctxes[i_1884];
  _1307 = (int) _1306;
  _1308 = _1307 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1308, 1);
  i_1309 = i_1884 + 1;
  # DEBUG i => i_1309
  # DEBUG i => i_1309
  ivtmp_2933 = ivtmp_2775 - 1;
  if (ivtmp_2933 != 0)
    goto <bb 374>;
  else
    goto <bb 375>;

  <bb 374>:
  goto <bb 373>;

  <bb 375>:
  _1310 = i_abs_1285 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _1310);
  _1311 = mdy_1238 < 0;
  _1312 = (int) _1311;
  x264_cabac_encode_bypass (cb_60(D), _1312);

  <bb 376>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_1233
  # DEBUG b => mdy_1238
  _1239 = mdx_1233 & 65535;
  _1240 = mdy_1238 << 16;
  _1241 = _1239 + _1240;
  _1242 = (unsigned int) _1241;
  # DEBUG a => NULL
  # DEBUG b => NULL
  # DEBUG h => h_58(D)
  # DEBUG x => 0
  # DEBUG y => 0
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => i_list_863
  # DEBUG mv => NULL
  _1250 = &h_58(D)->mb.cache.mvd[i_list_863][12];
  # DEBUG dst => _1250
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => NULL
  _1260 = (long unsigned int) _1242;
  _1261 = _1260 << 32;
  val64_1262 = _1260 + _1261;
  # DEBUG val64 => val64_1262
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_1250] = val64_1262;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_1250 + 8B] = val64_1262;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_1250 + 32B] = val64_1262;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_1250 + 40B] = val64_1262;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};

  <bb 377>:
  _216 = b_list[i_list_863][1];
  if (_216 != 0)
    goto <bb 378>;
  else
    goto <bb 320>;

  <bb 378>:
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => i_list_863
  # DEBUG idx => 8
  # DEBUG width => 4
  # DEBUG height => 2
  x264_mb_predict_mv (h_58(D), i_list_863, 8, 4, &mvp);
  _1352 = h_58(D)->mb.cache.mv[i_list_863][28][0];
  _1353 = (int) _1352;
  _1354 = mvp[0];
  _1355 = (int) _1354;
  mdx_1356 = _1353 - _1355;
  # DEBUG mdx => mdx_1356
  _1357 = h_58(D)->mb.cache.mv[i_list_863][28][1];
  _1358 = (int) _1357;
  _1359 = mvp[1];
  _1360 = (int) _1359;
  mdy_1361 = _1358 - _1360;
  # DEBUG mdy => mdy_1361
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => i_list_863
  # DEBUG idx => 8
  # DEBUG l => 0
  # DEBUG mvd => mdx_1356
  _1438 = h_58(D)->mb.cache.mvd[i_list_863][27][0];
  _1439 = (int) _1438;
  _1440 = ABS_EXPR <_1439>;
  _1442 = h_58(D)->mb.cache.mvd[i_list_863][20][0];
  _1443 = (int) _1442;
  _1444 = ABS_EXPR <_1443>;
  amvd_1445 = _1440 + _1444;
  # DEBUG amvd => amvd_1445
  i_abs_1446 = ABS_EXPR <mdx_1356>;
  # DEBUG i_abs => i_abs_1446
  # DEBUG ctxbase => 40
  _1447 = amvd_1445 > 2;
  _1448 = (int) _1447;
  _1449 = amvd_1445 > 32;
  _1450 = (int) _1449;
  ctx_1451 = _1448 + _1450;
  # DEBUG ctx => ctx_1451
  if (i_abs_1446 == 0)
    goto <bb 379>;
  else
    goto <bb 380>;

  <bb 379>:
  _1453 = ctx_1451 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1453, 0);
  goto <bb 391>;

  <bb 380>:
  if (i_abs_1446 <= 8)
    goto <bb 381>;
  else
    goto <bb 387>;

  <bb 381>:
  _1454 = ctx_1451 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1454, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1446 > 1)
    goto <bb 382>;
  else
    goto <bb 384>;

  <bb 382>:
  goto <bb 385>;

  <bb 383>:

  <bb 384>:
  _1460 = ctxes[i_abs_1446];
  _1461 = (int) _1460;
  _1462 = _1461 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1462, 0);
  _1463 = mdx_1356 < 0;
  _1464 = (int) _1463;
  x264_cabac_encode_bypass (cb_60(D), _1464);
  goto <bb 391>;

  <bb 385>:
  # i_754 = PHI <1(382), i_1459(386)>
  # DEBUG i => i_754
  _1456 = ctxes[i_754];
  _1457 = (int) _1456;
  _1458 = _1457 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1458, 1);
  i_1459 = i_754 + 1;
  # DEBUG i => i_1459
  # DEBUG i => i_1459
  if (i_abs_1446 > i_1459)
    goto <bb 386>;
  else
    goto <bb 383>;

  <bb 386>:
  goto <bb 385>;

  <bb 387>:
  _1465 = ctx_1451 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1465, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 388>:
  # i_925 = PHI <i_1470(389), 1(387)>
  # ivtmp_2785 = PHI <ivtmp_2815(389), 8(387)>
  # DEBUG i => i_925
  _1467 = ctxes[i_925];
  _1468 = (int) _1467;
  _1469 = _1468 + 40;
  x264_cabac_encode_decision_asm (cb_60(D), _1469, 1);
  i_1470 = i_925 + 1;
  # DEBUG i => i_1470
  # DEBUG i => i_1470
  ivtmp_2815 = ivtmp_2785 - 1;
  if (ivtmp_2815 != 0)
    goto <bb 389>;
  else
    goto <bb 390>;

  <bb 389>:
  goto <bb 388>;

  <bb 390>:
  _1471 = i_abs_1446 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _1471);
  _1472 = mdx_1356 < 0;
  _1473 = (int) _1472;
  x264_cabac_encode_bypass (cb_60(D), _1473);

  <bb 391>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG i_list => i_list_863
  # DEBUG idx => 8
  # DEBUG l => 1
  # DEBUG mvd => mdy_1361
  _1400 = h_58(D)->mb.cache.mvd[i_list_863][27][1];
  _1401 = (int) _1400;
  _1402 = ABS_EXPR <_1401>;
  _1404 = h_58(D)->mb.cache.mvd[i_list_863][20][1];
  _1405 = (int) _1404;
  _1406 = ABS_EXPR <_1405>;
  amvd_1407 = _1402 + _1406;
  # DEBUG amvd => amvd_1407
  i_abs_1408 = ABS_EXPR <mdy_1361>;
  # DEBUG i_abs => i_abs_1408
  # DEBUG ctxbase => 47
  _1409 = amvd_1407 > 2;
  _1410 = (int) _1409;
  _1411 = amvd_1407 > 32;
  _1412 = (int) _1411;
  ctx_1413 = _1410 + _1412;
  # DEBUG ctx => ctx_1413
  if (i_abs_1408 == 0)
    goto <bb 392>;
  else
    goto <bb 393>;

  <bb 392>:
  _1415 = ctx_1413 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1415, 0);
  goto <bb 404>;

  <bb 393>:
  if (i_abs_1408 <= 8)
    goto <bb 394>;
  else
    goto <bb 400>;

  <bb 394>:
  _1416 = ctx_1413 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1416, 1);
  # DEBUG i => 1
  # DEBUG i => 1
  if (i_abs_1408 > 1)
    goto <bb 395>;
  else
    goto <bb 397>;

  <bb 395>:
  goto <bb 398>;

  <bb 396>:

  <bb 397>:
  _1422 = ctxes[i_abs_1408];
  _1423 = (int) _1422;
  _1424 = _1423 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1424, 0);
  _1425 = mdy_1361 < 0;
  _1426 = (int) _1425;
  x264_cabac_encode_bypass (cb_60(D), _1426);
  goto <bb 404>;

  <bb 398>:
  # i_49 = PHI <1(395), i_1421(399)>
  # DEBUG i => i_49
  _1418 = ctxes[i_49];
  _1419 = (int) _1418;
  _1420 = _1419 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1420, 1);
  i_1421 = i_49 + 1;
  # DEBUG i => i_1421
  # DEBUG i => i_1421
  if (i_abs_1408 > i_1421)
    goto <bb 399>;
  else
    goto <bb 396>;

  <bb 399>:
  goto <bb 398>;

  <bb 400>:
  _1427 = ctx_1413 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1427, 1);
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 401>:
  # i_927 = PHI <i_1432(402), 1(400)>
  # ivtmp_2825 = PHI <ivtmp_2770(402), 8(400)>
  # DEBUG i => i_927
  _1429 = ctxes[i_927];
  _1430 = (int) _1429;
  _1431 = _1430 + 47;
  x264_cabac_encode_decision_asm (cb_60(D), _1431, 1);
  i_1432 = i_927 + 1;
  # DEBUG i => i_1432
  # DEBUG i => i_1432
  ivtmp_2770 = ivtmp_2825 - 1;
  if (ivtmp_2770 != 0)
    goto <bb 402>;
  else
    goto <bb 403>;

  <bb 402>:
  goto <bb 401>;

  <bb 403>:
  _1433 = i_abs_1408 + -9;
  x264_cabac_encode_ue_bypass (cb_60(D), 3, _1433);
  _1434 = mdy_1361 < 0;
  _1435 = (int) _1434;
  x264_cabac_encode_bypass (cb_60(D), _1435);

  <bb 404>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i_list => NULL
  # DEBUG idx => NULL
  # DEBUG l => NULL
  # DEBUG mvd => NULL
  # DEBUG i => NULL
  # DEBUG ctx => NULL
  # DEBUG i_abs => NULL
  # DEBUG amvd => NULL
  # DEBUG a => mdx_1356
  # DEBUG b => mdy_1361
  _1362 = mdx_1356 & 65535;
  _1363 = mdy_1361 << 16;
  _1364 = _1362 + _1363;
  _1365 = (unsigned int) _1364;
  # DEBUG a => NULL
  # DEBUG b => NULL
  # DEBUG h => h_58(D)
  # DEBUG x => 0
  # DEBUG y => 2
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_list => i_list_863
  # DEBUG mv => NULL
  _1373 = &h_58(D)->mb.cache.mvd[i_list_863][28];
  # DEBUG dst => _1373
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG val => NULL
  _1383 = (long unsigned int) _1365;
  _1384 = _1383 << 32;
  val64_1385 = _1383 + _1384;
  # DEBUG val64 => val64_1385
  # DEBUG dy => 0
  # DEBUG dy => 0
  # DEBUG dx => 0
  MEM[(uint64_t *)_1373] = val64_1385;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_1373 + 8B] = val64_1385;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 1
  # DEBUG dy => 1
  # DEBUG dx => 0
  MEM[(uint64_t *)_1373 + 32B] = val64_1385;
  # DEBUG dx => 1
  # DEBUG dx => 1
  MEM[(uint64_t *)_1373 + 40B] = val64_1385;
  # DEBUG dx => 2
  # DEBUG dx => 2
  # DEBUG dy => 2
  # DEBUG dy => 2
  # DEBUG dst => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG val => NULL
  # DEBUG val64 => NULL
  # DEBUG dx => NULL
  # DEBUG dy => NULL
  # DEBUG h => NULL
  # DEBUG x => NULL
  # DEBUG y => NULL
  # DEBUG width => NULL
  # DEBUG height => NULL
  # DEBUG i_list => NULL
  # DEBUG mv => NULL
  # DEBUG dy => NULL
  # DEBUG dx => NULL
  # DEBUG val64 => NULL
  mvp ={v} {CLOBBER};
  goto <bb 410>;

  <bb 405>:
  if (prephitmp_2881 == 15)
    goto <bb 406>;
  else
    goto <bb 320>;

  <bb 406>:
  _219 = b_list[i_list_863][0];
  if (_219 != 0)
    goto <bb 407>;
  else
    goto <bb 408>;

  <bb 407>:
  x264_cabac_mb_mvd (h_58(D), cb_60(D), i_list_863, 0, 2, 4);

  <bb 408>:
  _221 = b_list[i_list_863][1];
  if (_221 != 0)
    goto <bb 409>;
  else
    goto <bb 320>;

  <bb 409>:
  x264_cabac_mb_mvd (h_58(D), cb_60(D), i_list_863, 4, 2, 4);

  <bb 410>:
  i_list_223 = i_list_863 + 1;
  # DEBUG i_list => i_list_223
  # DEBUG i_list => i_list_223
  ivtmp_2928 = ivtmp_2913 - 1;
  if (ivtmp_2928 != 0)
    goto <bb 411>;
  else
    goto <bb 412>;

  <bb 411>:
  pretmp_2880 = h_58(D)->mb.i_partition;
  goto <bb 318>;

  <bb 412>:
  b_list ={v} {CLOBBER};

  <bb 413>:
  # DEBUG cb => cb_60(D)
  _333 = cb_60(D)->p;
  _334 = (long int) _333;
  _335 = cb_60(D)->p_start;
  _336 = (long int) _335;
  _337 = _334 - _336;
  _338 = cb_60(D)->i_bytes_outstanding;
  _339 = (long int) _338;
  _340 = _337 + _339;
  _341 = (unsigned int) _340;
  _342 = _341 * 8;
  _343 = cb_60(D)->i_queue;
  _344 = (unsigned int) _343;
  _345 = _342 + _344;
  _346 = (int) _345;
  # DEBUG cb => NULL
  # DEBUG i_mb_pos_tex => NULL
  _225 = h_58(D)->stat.frame.i_mv_bits;
  _226 = _346 - _289;
  _227 = _225 + _226;
  h_58(D)->stat.frame.i_mv_bits = _227;
  if (i_mb_type_59 != 2)
    goto <bb 414>;
  else
    goto <bb 432>;

  <bb 414>:
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  cbp_230 = h_58(D)->mb.i_cbp_luma;
  # DEBUG cbp => cbp_230
  _1511 = h_58(D)->mb.i_neighbour;
  _1512 = _1511 & 1;
  if (_1512 != 0)
    goto <bb 415>;
  else
    goto <bb 416>;

  <bb 415>:
  _1513 = h_58(D)->mb.cbp;
  _1514 = h_58(D)->mb.i_mb_xy;
  _1515 = (long unsigned int) _1514;
  _1516 = _1515 * 2;
  _1517 = _1516 + 18446744073709551614;
  _1518 = _1513 + _1517;
  _1519 = *_1518;
  cbp_l_1520 = (int) _1519;
  pretmp_2745 = cbp_l_1520 >> 1;
  pretmp_2747 = pretmp_2745 & 1;
  pretmp_2749 = 76 - pretmp_2747;
  pretmp_2751 = cbp_l_1520 >> 3;
  pretmp_2753 = pretmp_2751 & 1;
  pretmp_2755 = 76 - pretmp_2753;

  <bb 416>:
  # prephitmp_2750 = PHI <75(414), pretmp_2749(415)>
  # prephitmp_2756 = PHI <75(414), pretmp_2755(415)>
  # DEBUG cbp_l => NULL
  _1521 = _1511 & 2;
  if (_1521 != 0)
    goto <bb 417>;
  else
    goto <bb 418>;

  <bb 417>:
  _1522 = h_58(D)->mb.cbp;
  _1523 = h_58(D)->mb.i_mb_top_xy;
  _1524 = (long unsigned int) _1523;
  _1525 = _1524 * 2;
  _1526 = _1522 + _1525;
  _1527 = *_1526;
  cbp_t_1528 = (int) _1527;
  pretmp_2757 = cbp_t_1528 >> 1;
  pretmp_2759 = pretmp_2757 & 2;
  pretmp_2761 = cbp_t_1528 >> 2;
  pretmp_2763 = pretmp_2761 & 2;

  <bb 418>:
  # prephitmp_2760 = PHI <2(416), pretmp_2759(417)>
  # prephitmp_2764 = PHI <2(416), pretmp_2763(417)>
  # DEBUG cbp_t => NULL
  _1529 = cbp_230 & 1;
  _1537 = prephitmp_2750 - prephitmp_2760;
  x264_cabac_encode_decision_asm (cb_60(D), _1537, _1529);
  _1538 = h_58(D)->mb.i_cbp_luma;
  _1539 = _1538 >> 1;
  _1540 = _1539 & 1;
  _1541 = 76 - _1529;
  _1544 = _1541 - prephitmp_2764;
  x264_cabac_encode_decision_asm (cb_60(D), _1544, _1540);
  _1545 = h_58(D)->mb.i_cbp_luma;
  _1546 = _1545 >> 2;
  _1547 = _1546 & 1;
  _1551 = cbp_230 << 1;
  _1552 = _1551 & 2;
  _1553 = prephitmp_2756 - _1552;
  x264_cabac_encode_decision_asm (cb_60(D), _1553, _1547);
  _1554 = h_58(D)->mb.i_cbp_luma;
  _1555 = _1554 >> 3;
  _1556 = _1555 & 1;
  _1557 = cbp_230 >> 2;
  _1558 = _1557 & 1;
  _1559 = 76 - _1558;
  _1560 = cbp_230 & 2;
  _1561 = _1559 - _1560;
  x264_cabac_encode_decision_asm (cb_60(D), _1561, _1556);
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG cbp_t => NULL
  # DEBUG cbp_l => NULL
  # DEBUG cbp => NULL
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG cbp_a => -1
  # DEBUG cbp_b => -1
  _1474 = h_58(D)->mb.i_neighbour;
  _1475 = _1474 & 1;
  if (_1475 != 0)
    goto <bb 419>;
  else
    goto <bb 500>;

  <bb 419>:
  _1476 = h_58(D)->mb.cbp;
  _1477 = h_58(D)->mb.i_mb_xy;
  _1478 = (long unsigned int) _1477;
  _1479 = _1478 * 2;
  _1480 = _1479 + 18446744073709551614;
  _1481 = _1476 + _1480;
  _1482 = *_1481;
  _1483 = _1482 >> 4;
  _1484 = _1483 & 3;
  cbp_a_1485 = (int) _1484;
  # DEBUG cbp_a => cbp_a_1485
  # DEBUG cbp_a => cbp_a_1485
  _1486 = _1474 & 2;
  if (_1486 != 0)
    goto <bb 420>;
  else
    goto <bb 506>;

  <bb 420>:
  # cbp_a_957 = PHI <cbp_a_1485(419), -1(501)>
  # prephitmp_2769 = PHI <_1476(419), pretmp_2768(501)>
  _1488 = h_58(D)->mb.i_mb_top_xy;
  _1489 = (long unsigned int) _1488;
  _1490 = _1489 * 2;
  _1491 = prephitmp_2769 + _1490;
  _1492 = *_1491;
  _1493 = _1492 >> 4;
  _1494 = _1493 & 3;
  cbp_b_1495 = (int) _1494;
  # DEBUG cbp_b => cbp_b_1495
  # DEBUG cbp_b => cbp_b_1495
  # DEBUG ctx => 0
  if (cbp_a_957 > 0)
    goto <bb 422>;
  else
    goto <bb 421>;

  <bb 421>:
  # cbp_a_931 = PHI <cbp_a_957(420), cbp_a_1485(506)>
  # cbp_b_205 = PHI <cbp_b_1495(420), -1(506)>
  # DEBUG cbp_b => cbp_b_205
  # DEBUG ctx => 0

  <bb 422>:
  # ctx_1498 = PHI <0(421), 1(420)>
  # cbp_a_510 = PHI <cbp_a_931(421), cbp_a_957(420)>
  # cbp_b_513 = PHI <cbp_b_205(421), cbp_b_1495(420)>
  # DEBUG ctx => ctx_1498
  if (cbp_b_513 > 0)
    goto <bb 424>;
  else
    goto <bb 423>;

  <bb 423>:
  pretmp_2765 = ctx_1498 + 77;
  goto <bb 425>;

  <bb 424>:
  ctx_1499 = ctx_1498 + 2;
  # DEBUG ctx => ctx_1499
  pretmp_2766 = ctx_1499 + 77;

  <bb 425>:
  # cbp_a_43 = PHI <cbp_a_510(423), cbp_a_510(424), cbp_a_1485(506), -1(500)>
  # cbp_b_938 = PHI <cbp_b_513(423), cbp_b_513(424), -1(506), -1(500)>
  # prephitmp_2767 = PHI <pretmp_2765(423), pretmp_2766(424), 78(506), 77(500)>
  # DEBUG ctx => NULL
  _1500 = h_58(D)->mb.i_cbp_chroma;
  if (_1500 == 0)
    goto <bb 426>;
  else
    goto <bb 427>;

  <bb 426>:
  x264_cabac_encode_decision_asm (cb_60(D), prephitmp_2767, 0);
  goto <bb 432>;

  <bb 427>:
  x264_cabac_encode_decision_asm (cb_60(D), prephitmp_2767, 1);
  # DEBUG ctx => 4
  if (cbp_a_43 == 2)
    goto <bb 428>;
  else
    goto <bb 429>;

  <bb 428>:

  <bb 429>:
  # ctx_1504 = PHI <4(427), 5(428)>
  # DEBUG ctx => ctx_1504
  if (cbp_b_938 == 2)
    goto <bb 430>;
  else
    goto <bb 431>;

  <bb 430>:
  ctx_1505 = ctx_1504 + 2;
  # DEBUG ctx => ctx_1505

  <bb 431>:
  # ctx_1509 = PHI <ctx_1504(429), ctx_1505(430)>
  # DEBUG ctx => ctx_1509
  _1506 = h_58(D)->mb.i_cbp_chroma;
  _1507 = _1506 > 1;
  _1508 = (int) _1507;
  _1510 = ctx_1509 + 77;
  x264_cabac_encode_decision_asm (cb_60(D), _1510, _1508);

  <bb 432>:
  # DEBUG h => h_58(D)
  _229 = h_58(D)->pps;
  _1562 = _229->b_transform_8x8_mode;
  if (_1562 == 0)
    goto <bb 451>;
  else
    goto <bb 433>;

  <bb 433>:
  _1563 = h_58(D)->mb.i_type;
  _1564 = partition_tab[_1563];
  p_1565 = (int) _1564;
  # DEBUG p => p_1565
  if (p_1565 <= 1)
    goto <bb 447>;
  else
    goto <bb 434>;

  <bb 434>:
  if (_1563 == 7)
    goto <bb 435>;
  else
    goto <bb 436>;

  <bb 435>:
  _1566 = h_58(D)->sps;
  _1567 = _1566->b_direct8x8_inference;
  goto <bb 447>;

  <bb 436>:
  if (_1563 == 5)
    goto <bb 437>;
  else
    goto <bb 442>;

  <bb 437>:
  _1568 = h_58(D)->param.analyse.inter;
  _1569 = _1568 & 32;
  if (_1569 == 0)
    goto <bb 448>;
  else
    goto <bb 438>;

  <bb 438>:

  <bb 439>:
  # i_511 = PHI <0(438), i_1572(441)>
  # ivtmp_1870 = PHI <4(438), ivtmp_1146(441)>
  # DEBUG i => i_511
  _1571 = h_58(D)->mb.i_sub_partition[i_511];
  if (_1571 != 3)
    goto <bb 508>;
  else
    goto <bb 440>;

  <bb 440>:
  i_1572 = i_511 + 1;
  # DEBUG i => i_1572
  # DEBUG i => i_1572
  ivtmp_1146 = ivtmp_1870 - 1;
  if (ivtmp_1146 != 0)
    goto <bb 441>;
  else
    goto <bb 448>;

  <bb 441>:
  goto <bb 439>;

  <bb 442>:
  _1573 = h_58(D)->sps;
  _1574 = _1573->b_direct8x8_inference;
  if (_1574 != 0)
    goto <bb 448>;
  else
    goto <bb 443>;

  <bb 443>:

  <bb 444>:
  # i_515 = PHI <0(443), i_1577(446)>
  # ivtmp_899 = PHI <4(443), ivtmp_905(446)>
  # DEBUG i => i_515
  _1576 = h_58(D)->mb.i_sub_partition[i_515];
  if (_1576 == 12)
    goto <bb 451>;
  else
    goto <bb 445>;

  <bb 445>:
  i_1577 = i_515 + 1;
  # DEBUG i => i_1577
  # DEBUG i => i_1577
  ivtmp_905 = ivtmp_899 - 1;
  if (ivtmp_905 != 0)
    goto <bb 446>;
  else
    goto <bb 448>;

  <bb 446>:
  goto <bb 444>;

  <bb 447>:
  # _1578 = PHI <_1567(435), p_1565(433)>
  # DEBUG h => NULL
  # DEBUG i => NULL
  # DEBUG p => NULL
  if (_1578 != 0)
    goto <bb 448>;
  else
    goto <bb 451>;

  <bb 448>:
  # DEBUG h => NULL
  # DEBUG i => NULL
  # DEBUG p => NULL
  _232 = h_58(D)->mb.i_cbp_luma;
  if (_232 != 0)
    goto <bb 450>;
  else
    goto <bb 449>;

  <bb 449>:
  _235 = h_58(D)->mb.i_cbp_chroma;
  _142 = i_mb_type_59 == 2;
  _1910 = _235 > 0;
  _2114 = _142 | _1910;
  if (_2114 != 0)
    goto <bb 452>;
  else
    goto <bb 454>;

  <bb 450>:
  _278 = MEM[(int *)h_58(D) + 11808B];
  # DEBUG D#3 => h_58(D)
  _279 = MEM[(int *)h_58(D) + 20500B];
  # DEBUG D#3 => h_58(D)
  # DEBUG cb => cb_60(D)
  # DEBUG h => D#3
  # DEBUG h => D#3
  ctx_348 = _279 + 399;
  # DEBUG ctx => ctx_348
  x264_cabac_encode_decision_asm (cb_60(D), ctx_348, _278);

  <bb 451>:
  _234 = h_58(D)->mb.i_cbp_luma;
  if (_234 > 0)
    goto <bb 452>;
  else
    goto <bb 449>;

  <bb 452>:
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  i_mbn_xy_1581 = h_58(D)->mb.i_mb_prev_xy;
  # DEBUG i_mbn_xy => i_mbn_xy_1581
  _1582 = h_58(D)->mb.i_qp;
  _1583 = h_58(D)->mb.i_last_qp;
  i_dqp_1584 = _1582 - _1583;
  # DEBUG i_dqp => i_dqp_1584
  _1585 = h_58(D)->mb.i_type;
  if (_1585 == 2)
    goto <bb 455>;
  else
    goto <bb 457>;

  <bb 453>:

  <bb 454>:
  # DEBUG cb => cb_60(D)
  _233 = cb_60(D)->p;
  _349 = (long int) _233;
  _350 = cb_60(D)->p_start;
  _351 = (long int) _350;
  _352 = _349 - _351;
  _353 = cb_60(D)->i_bytes_outstanding;
  _354 = (long int) _353;
  _355 = _352 + _354;
  _356 = (unsigned int) _355;
  _357 = _356 * 8;
  _358 = cb_60(D)->i_queue;
  _359 = (unsigned int) _358;
  _360 = _357 + _359;
  _361 = (int) _360;
  # DEBUG cb => NULL
  _272 = _361 - _346;
  _273 = h_58(D)->stat.frame.i_tex_bits;
  _274 = _272 + _273;
  h_58(D)->stat.frame.i_tex_bits = _274;
  goto <bb 499>;

  <bb 455>:
  _1586 = h_58(D)->mb.cbp;
  _1587 = h_58(D)->mb.i_mb_xy;
  _1588 = (long unsigned int) _1587;
  _1589 = _1588 * 2;
  _1590 = _1586 + _1589;
  _1591 = *_1590;
  if (_1591 == 0)
    goto <bb 456>;
  else
    goto <bb 457>;

  <bb 456>:
  h_58(D)->mb.i_qp = _1583;
  # DEBUG i_dqp => 0
  # DEBUG i_dqp => 0
  _2108 = h_58(D)->mb.i_last_dqp;
  if (_2108 != 0)
    goto <bb 509>;
  else
    goto <bb 474>;

  <bb 457>:
  # i_mbn_xy_955 = PHI <i_mbn_xy_1581(452), i_mbn_xy_1581(455), i_mbn_xy_9(507)>
  # i_dqp_889 = PHI <i_dqp_1584(452), i_dqp_1584(455), i_dqp_560(507)>
  # DEBUG i_dqp => i_dqp_889
  _1592 = h_58(D)->mb.i_last_dqp;
  if (_1592 != 0)
    goto <bb 458>;
  else
    goto <bb 461>;

  <bb 458>:
  _1593 = h_58(D)->mb.type;
  _1594 = (sizetype) i_mbn_xy_955;
  _1595 = _1593 + _1594;
  _1596 = *_1595;
  if (_1596 == 2)
    goto <bb 462>;
  else
    goto <bb 459>;

  <bb 459>:
  pretmp_2743 = h_58(D)->mb.cbp;

  <bb 460>:
  # i_dqp_662 = PHI <i_dqp_889(459), 0(509)>
  # _888 = PHI <_1594(459), _1263(509)>
  # prephitmp_2744 = PHI <pretmp_2743(459), _1586(509)>
  _1598 = _888 * 2;
  _1599 = prephitmp_2744 + _1598;
  _1600 = *_1599;
  _1601 = _1600 & 63;
  if (_1601 != 0)
    goto <bb 462>;
  else
    goto <bb 461>;

  <bb 461>:
  # i_dqp_514 = PHI <i_dqp_889(457), i_dqp_662(460)>
  # DEBUG ctx => 0

  <bb 462>:
  # ctx_1617 = PHI <1(458), 1(460), 0(461)>
  # i_dqp_708 = PHI <i_dqp_889(458), i_dqp_662(460), i_dqp_514(461)>
  # prephitmp_2740 = PHI <61(458), 61(460), 60(461)>
  # DEBUG ctx => ctx_1617
  if (i_dqp_708 != 0)
    goto <bb 463>;
  else
    goto <bb 474>;

  <bb 463>:
  if (i_dqp_708 <= 0)
    goto <bb 464>;
  else
    goto <bb 465>;

  <bb 464>:
  val_1603 = i_dqp_708 * -2;
  goto <bb 466>;

  <bb 465>:
  _1604 = i_dqp_708 * 2;
  val_1605 = _1604 + -1;

  <bb 466>:
  # val_1606 = PHI <val_1603(464), val_1605(465)>
  # DEBUG val => val_1606
  _1607 = val_1606 > 50;
  _1608 = val_1606 != 52;
  _1609 = _1607 & _1608;
  if (_1609 != 0)
    goto <bb 467>;
  else
    goto <bb 468>;

  <bb 467>:
  val_1610 = 103 - val_1606;
  # DEBUG val => val_1610

  <bb 468>:
  # val_448 = PHI <val_1606(466), val_1610(467)>
  goto <bb 472>;

  <bb 469>:
  # DEBUG ctx => ctx_1611
  # DEBUG val => val_1614
  _1612 = ctx_1611 + 60;
  x264_cabac_encode_decision_asm (cb_60(D), _1612, 1);
  if (ctx_1611 <= 1)
    goto <bb 471>;
  else
    goto <bb 470>;

  <bb 470>:

  <bb 471>:
  # ctx_127 = PHI <2(469), 3(470)>

  <bb 472>:
  # ctx_1611 = PHI <ctx_1617(468), ctx_127(471)>
  # val_1613 = PHI <val_448(468), val_1614(471)>
  # DEBUG val => val_1613
  # DEBUG ctx => ctx_1611
  val_1614 = val_1613 + -1;
  # DEBUG val => val_1614
  if (val_1613 != 0)
    goto <bb 469>;
  else
    goto <bb 473>;

  <bb 473>:
  # ctx_2673 = PHI <ctx_1611(472)>
  pretmp_2731 = ctx_2673 + 60;

  <bb 474>:
  # prephitmp_2732 = PHI <prephitmp_2740(462), pretmp_2731(473), 60(456), 61(509)>
  # DEBUG ctx => NULL
  x264_cabac_encode_decision_asm (cb_60(D), prephitmp_2732, 0);
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG val => NULL
  # DEBUG ctx => NULL
  # DEBUG i_dqp => NULL
  # DEBUG i_mbn_xy => NULL
  if (i_mb_type_59 == 2)
    goto <bb 475>;
  else
    goto <bb 481>;

  <bb 475>:
  _237 = &h_58(D)->dct.luma16x16_dc;
  block_residual_write_cabac (h_58(D), cb_60(D), 0, 24, _237, 16);
  _239 = h_58(D)->mb.i_cbp_luma;
  if (_239 != 0)
    goto <bb 477>;
  else
    goto <bb 476>;

  <bb 476>:
  _258 = h_58(D)->mb.i_cbp_chroma;
  _259 = _258 & 3;
  if (_259 != 0)
    goto <bb 494>;
  else
    goto <bb 495>;

  <bb 477>:

  <bb 478>:
  # i_2050 = PHI <0(477), i_243(480)>
  # ivtmp_1879 = PHI <16(477), ivtmp_2674(480)>
  # DEBUG i => i_2050
  _240 = &h_58(D)->dct.luma4x4[i_2050];
  _241 = _240 + 2;
  block_residual_write_cabac (h_58(D), cb_60(D), 1, i_2050, _241, 15);
  i_243 = i_2050 + 1;
  # DEBUG i => i_243
  # DEBUG i => i_243
  ivtmp_2674 = ivtmp_1879 - 1;
  if (ivtmp_2674 != 0)
    goto <bb 480>;
  else
    goto <bb 479>;

  <bb 479>:
  goto <bb 476>;

  <bb 480>:
  goto <bb 478>;

  <bb 481>:
  _244 = h_58(D)->mb.b_transform_8x8;
  if (_244 != 0)
    goto <bb 482>;
  else
    goto <bb 488>;

  <bb 482>:

  <bb 483>:
  # i_2054 = PHI <0(482), i_250(487)>
  # ivtmp_516 = PHI <4(482), ivtmp_1258(487)>
  # DEBUG i => i_2054
  _245 = h_58(D)->mb.i_cbp_luma;
  _246 = _245 >> i_2054;
  _247 = _246 & 1;
  if (_247 != 0)
    goto <bb 484>;
  else
    goto <bb 485>;

  <bb 484>:
  _248 = &h_58(D)->dct.luma8x8[i_2054];
  block_residual_write_cabac (h_58(D), cb_60(D), 5, i_2054, _248, 64);

  <bb 485>:
  i_250 = i_2054 + 1;
  # DEBUG i => i_250
  # DEBUG i => i_250
  ivtmp_1258 = ivtmp_516 - 1;
  if (ivtmp_1258 != 0)
    goto <bb 487>;
  else
    goto <bb 486>;

  <bb 486>:
  goto <bb 476>;

  <bb 487>:
  goto <bb 483>;

  <bb 488>:

  <bb 489>:
  # i_2048 = PHI <0(488), i_257(493)>
  # ivtmp_191 = PHI <16(488), ivtmp_1267(493)>
  # DEBUG i => i_2048
  _251 = h_58(D)->mb.i_cbp_luma;
  _252 = i_2048 >> 2;
  _253 = _251 >> _252;
  _254 = _253 & 1;
  if (_254 != 0)
    goto <bb 490>;
  else
    goto <bb 491>;

  <bb 490>:
  _255 = &h_58(D)->dct.luma4x4[i_2048];
  block_residual_write_cabac (h_58(D), cb_60(D), 2, i_2048, _255, 16);

  <bb 491>:
  i_257 = i_2048 + 1;
  # DEBUG i => i_257
  # DEBUG i => i_257
  ivtmp_1267 = ivtmp_191 - 1;
  if (ivtmp_1267 != 0)
    goto <bb 493>;
  else
    goto <bb 492>;

  <bb 492>:
  goto <bb 476>;

  <bb 493>:
  goto <bb 489>;

  <bb 494>:
  _260 = &h_58(D)->dct.chroma_dc[0];
  block_residual_write_cabac (h_58(D), cb_60(D), 3, 25, _260, 4);
  _262 = &h_58(D)->dct.chroma_dc[1];
  block_residual_write_cabac (h_58(D), cb_60(D), 3, 26, _262, 4);
  pretmp_2733 = h_58(D)->mb.i_cbp_chroma;

  <bb 495>:
  # prephitmp_2734 = PHI <_258(476), pretmp_2733(494)>
  _265 = prephitmp_2734 & 2;
  if (_265 != 0)
    goto <bb 496>;
  else
    goto <bb 454>;

  <bb 496>:

  <bb 497>:
  # i_2051 = PHI <16(496), i_269(498)>
  # ivtmp_2036 = PHI <8(496), ivtmp_2115(498)>
  # DEBUG i => i_2051
  _266 = &h_58(D)->dct.luma4x4[i_2051];
  _267 = _266 + 2;
  block_residual_write_cabac (h_58(D), cb_60(D), 4, i_2051, _267, 15);
  i_269 = i_2051 + 1;
  # DEBUG i => i_269
  # DEBUG i => i_269
  ivtmp_2115 = ivtmp_2036 - 1;
  if (ivtmp_2115 != 0)
    goto <bb 498>;
  else
    goto <bb 453>;

  <bb 498>:
  goto <bb 497>;

  <bb 499>:
  return;

  <bb 500>:
  # DEBUG cbp_a => -1
  _147 = _1474 & 2;
  if (_147 != 0)
    goto <bb 501>;
  else
    goto <bb 425>;

  <bb 501>:
  pretmp_2768 = h_58(D)->mb.cbp;
  goto <bb 420>;

  <bb 502>:
  # prephitmp_2729 = PHI <i_mb_type.8_434(34), pretmp_2727(26), i_mb_type.8_62(16), pretmp_2728(41), i_mb_type.7_405(50)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  goto <bb 66>;

  <bb 503>:
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  # DEBUG cb => cb_60(D)
  _290 = cb_60(D)->p;
  _291 = (long int) _290;
  _292 = cb_60(D)->p_start;
  _293 = (long int) _292;
  _294 = _291 - _293;
  _295 = cb_60(D)->i_bytes_outstanding;
  _296 = (long int) _295;
  _297 = _294 + _296;
  _298 = (unsigned int) _297;
  _299 = _298 * 8;
  _300 = cb_60(D)->i_queue;
  _301 = (unsigned int) _300;
  _302 = _299 + _301;
  _303 = (int) _302;
  # DEBUG cb => NULL
  # DEBUG i_mb_pos_tex => NULL
  _65 = h_58(D)->stat.frame.i_mv_bits;
  _66 = _303 - _289;
  _67 = _65 + _66;
  h_58(D)->stat.frame.i_mv_bits = _67;
  _69 = h_58(D)->mb.pic.p_fenc[0];
  # DEBUG __dest => _290
  # DEBUG __src => _69
  # DEBUG __len => 256
  __builtin_memcpy (_290, _69, 256);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  _71 = cb_60(D)->p;
  _72 = _71 + 256;
  cb_60(D)->p = _72;
  # DEBUG i => 0
  # DEBUG i => 0
  goto <bb 59>;

  <bb 504>:
  i_list_1014 = i_list_1993 + 1;
  # DEBUG i_list => i_list_1014
  # DEBUG i_list => i_list_1014
  goto <bb 277>;

  <bb 505>:
  i_list_1381 = i_list_1896 + 1;
  # DEBUG i_list => i_list_1381
  # DEBUG i_list => i_list_1381
  goto <bb 297>;

  <bb 506>:
  # DEBUG cbp_b => -1
  # DEBUG ctx => 0
  if (cbp_a_1485 > 0)
    goto <bb 425>;
  else
    goto <bb 421>;

  <bb 507>:
  # DEBUG h => h_58(D)
  # DEBUG cb => cb_60(D)
  i_mbn_xy_9 = h_58(D)->mb.i_mb_prev_xy;
  # DEBUG i_mbn_xy => i_mbn_xy_9
  _10 = h_58(D)->mb.i_qp;
  _727 = h_58(D)->mb.i_last_qp;
  i_dqp_560 = _10 - _727;
  # DEBUG i_dqp => i_dqp_560
  goto <bb 457>;

  <bb 508>:
  _973 = h_58(D)->mb.i_cbp_luma;
  if (_973 > 0)
    goto <bb 507>;
  else
    goto <bb 449>;

  <bb 509>:
  _571 = h_58(D)->mb.type;
  _1263 = (sizetype) i_mbn_xy_1581;
  _1621 = _571 + _1263;
  _231 = *_1621;
  if (_231 == 2)
    goto <bb 474>;
  else
    goto <bb 460>;

  <bb 510>:
  # prephitmp_2972 = PHI <pretmp_2969(20), pretmp_2970(24), _391(23), pretmp_2971(22)>
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  # DEBUG h => NULL
  # DEBUG cb => NULL
  # DEBUG i => NULL
  # DEBUG idx => NULL
  # DEBUG ctx => NULL
  # DEBUG ctx => NULL
  # DEBUG i_mb_type => NULL
  goto <bb 94>;

}


