
;; Function block_residual_write_cavlc (block_residual_write_cavlc, funcdef_no=118, decl_uid=5847, cgraph_uid=118, symbol_order=166)


Analyzing loop at encoder/cavlc.c:189
encoder/cavlc.c:189:31: note: ===== analyze_loop_nest =====
encoder/cavlc.c:189:31: note: === vect_analyze_loop_form ===
encoder/cavlc.c:189:31: note: not vectorized: control flow in loop.
encoder/cavlc.c:189:31: note: bad loop form.

Analyzing loop at encoder/cavlc.c:124
encoder/cavlc.c:124:5: note: ===== analyze_loop_nest =====
encoder/cavlc.c:124:5: note: === vect_analyze_loop_form ===
encoder/cavlc.c:124:5: note: ===== analyze_loop_nest_1 =====
encoder/cavlc.c:124:5: note: === vect_analyze_loop_form ===
encoder/cavlc.c:124:5: note: === get_loop_niters ===
encoder/cavlc.c:124:5: note: not vectorized: number of iterations cannot be computed.
encoder/cavlc.c:124:5: note: bad inner-loop form.
encoder/cavlc.c:124:5: note: not vectorized: Bad inner loop.
encoder/cavlc.c:124:5: note: bad loop form.

Analyzing loop at encoder/cavlc.c:153
encoder/cavlc.c:153:26: note: ===== analyze_loop_nest =====
encoder/cavlc.c:153:26: note: === vect_analyze_loop_form ===
encoder/cavlc.c:153:26: note: === get_loop_niters ===
encoder/cavlc.c:153:26: note: not vectorized: number of iterations cannot be computed.
encoder/cavlc.c:153:26: note: bad loop form.

Analyzing loop at encoder/cavlc.c:114
encoder/cavlc.c:114:16: note: ===== analyze_loop_nest =====
encoder/cavlc.c:114:16: note: === vect_analyze_loop_form ===
encoder/cavlc.c:114:16: note: not vectorized: control flow in loop.
encoder/cavlc.c:114:16: note: bad loop form.

Analyzing loop at encoder/cavlc.c:96
encoder/cavlc.c:96:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:96:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:96:13: note: ===== analyze_loop_nest_1 =====
encoder/cavlc.c:96:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:96:13: note: not vectorized: control flow in loop.
encoder/cavlc.c:96:13: note: bad inner-loop form.
encoder/cavlc.c:96:13: note: not vectorized: Bad inner loop.
encoder/cavlc.c:96:13: note: bad loop form.

Analyzing loop at encoder/cavlc.c:98
encoder/cavlc.c:98:14: note: ===== analyze_loop_nest =====
encoder/cavlc.c:98:14: note: === vect_analyze_loop_form ===
encoder/cavlc.c:98:14: note: not vectorized: control flow in loop.
encoder/cavlc.c:98:14: note: bad loop form.
encoder/cavlc.c:67:13: note: vectorized 0 loops in function.
block_residual_write_cavlc (struct x264_t * h, struct bs_t * s, int i_ctxBlockCat, int i_idx, int16_t * l, int i_count)
{
  unsigned char v$i_size;
  unsigned char v$i_bits;
  unsigned char v$i_size;
  unsigned char v$i_bits;
  unsigned char v$i_size;
  unsigned char v$i_bits;
  unsigned char v$i_size;
  unsigned char v$i_bits;
  unsigned char v$i_size;
  unsigned char v$i_bits;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  const int za;
  const int zb;
  int i_ret;
  int i_zl;
  int i_level_prefix;
  int i_level_code;
  int abs_level;
  int mask;
  int r;
  int nC;
  int i_suffix_length;
  int i;
  unsigned int i_sign;
  int i_last;
  int i_total_zero;
  int i_total;
  int run[16];
  int level[16];
  static const int ct_index[17] = {0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3};
  _Bool _10;
  const struct vlc_t * _31;
  const struct vlc_t * _39;
  unsigned char _42;
  int (*<T1194>) (int16_t *) _44;
  const struct vlc_t * _48;
  const struct vlc_t * _50;
  long unsigned int _51;
  long unsigned int _52;
  int16_t * _53;
  short int _54;
  int _55;
  long unsigned int _58;
  long unsigned int _59;
  int16_t * _60;
  short int _61;
  _Bool _66;
  int _69;
  int _70;
  unsigned int _71;
  _Bool _73;
  _Bool _74;
  unsigned int _75;
  long int _85;
  int _86;
  int _88;
  int _90;
  int _91;
  _Bool _93;
  _Bool _94;
  int _96;
  int _97;
  int _98;
  int _99;
  int _100;
  unsigned int _101;
  int _102;
  int _103;
  long int _104;
  _Bool _105;
  _Bool _106;
  _Bool _107;
  int _108;
  unsigned int _109;
  long int _110;
  int _111;
  int _112;
  int _113;
  int _114;
  unsigned int _115;
  int _116;
  const struct vlc_t * _117;
  struct x264_sps_t * _121;
  int _122;
  int _123;
  int _124;
  int _128;
  int _134;
  unsigned int _135;
  long int _136;
  int _138;
  int _139;
  int _149;
  unsigned char _158;
  unsigned char _161;
  int _164;
  int _167;
  int _168;
  long int _169;
  long int _170;
  long int _171;
  long int _172;
  int _173;
  int _174;
  uint8_t * _175;
  long int _176;
  unsigned int _178;
  int _179;
  int _180;
  uint8_t * _181;
  int _182;
  long int _183;
  long int _184;
  long int _185;
  long int _186;
  int _187;
  int _188;
  uint8_t * _189;
  long int _190;
  unsigned int _192;
  int _193;
  int _194;
  uint8_t * _195;
  long int _196;
  long int _197;
  long int _198;
  int _199;
  int _200;
  uint8_t * _201;
  long int _202;
  unsigned int _204;
  int _205;
  int _206;
  uint8_t * _207;
  long int _208;
  long int _209;
  long int _210;
  int _211;
  int _212;
  uint8_t * _213;
  long int _214;
  unsigned int _216;
  int _217;
  int _218;
  uint8_t * _219;
  long int _220;
  long int _221;
  long int _222;
  int _223;
  int _224;
  uint8_t * _225;
  long int _226;
  unsigned int _228;
  int _229;
  int _230;
  uint8_t * _231;
  long int _232;
  long int _233;
  long int _234;
  int _235;
  int _236;
  uint8_t * _237;
  long int _238;
  unsigned int _240;
  int _241;
  int _242;
  uint8_t * _243;
  long int _244;
  long int _245;
  long int _246;
  int _248;
  uint8_t * _249;
  long int _250;
  unsigned int _252;
  int _253;
  int _254;
  uint8_t * _255;
  long int _256;
  long int _257;
  int _258;
  int _259;
  uint8_t * _260;
  long int _261;
  unsigned int _263;
  int _264;
  int _265;
  uint8_t * _266;
  int _267;
  long int _268;
  long int _269;
  long int _270;
  long int _271;
  int _272;
  int _273;
  uint8_t * _274;
  long int _275;
  unsigned int _277;
  int _278;
  int _279;
  uint8_t * _280;
  int _281;
  long int _282;
  long int _283;
  long int _284;
  long int _285;
  int _286;
  int _287;
  uint8_t * _288;
  long int _289;
  unsigned int _291;
  int _292;
  int _293;
  uint8_t * _294;
  int _295;
  long int _297;
  long int _298;
  long int _299;
  int _300;
  int _301;
  uint8_t * _302;
  long int _303;
  unsigned int _305;
  int _306;
  int _307;
  uint8_t * _308;
  _Bool _375;
  _Bool _376;
  _Bool _377;
  long unsigned int _394;
  int16_t * _395;
  short int _397;
  long unsigned int _401;
  unsigned int _423;
  int _428;
  int _437;
  int _447;
  int _450;
  int _455;
  int pretmp_555;
  int pretmp_556;
  int pretmp_557;
  int pretmp_558;
  int pretmp_560;
  int pretmp_561;
  int pretmp_562;
  int prephitmp_564;
  _Bool pretmp_565;
  _Bool pretmp_566;
  _Bool pretmp_567;
  _Bool pretmp_568;
  _Bool pretmp_570;
  _Bool pretmp_571;
  _Bool pretmp_572;
  _Bool prephitmp_573;
  _Bool pretmp_574;
  _Bool pretmp_575;
  _Bool pretmp_576;
  int pretmp_579;
  int pretmp_580;
  int pretmp_581;
  int pretmp_582;
  int prephitmp_583;
  int pretmp_584;
  _Bool pretmp_585;
  int pretmp_586;
  _Bool pretmp_587;
  int pretmp_588;
  _Bool pretmp_589;
  int pretmp_590;
  _Bool pretmp_591;
  int prephitmp_593;
  _Bool pretmp_594;
  _Bool pretmp_595;
  _Bool pretmp_596;
  _Bool pretmp_597;
  _Bool pretmp_598;
  _Bool pretmp_599;
  _Bool pretmp_600;
  _Bool pretmp_601;
  _Bool prephitmp_602;
  long int pretmp_604;
  long int prephitmp_605;
  int pretmp_606;
  int prephitmp_607;
  int pretmp_608;
  int prephitmp_609;
  int pretmp_610;
  int prephitmp_611;
  int pretmp_612;
  int pretmp_614;
  int prephitmp_615;
  int prephitmp_616;
  int pretmp_625;
  int pretmp_627;
  int prephitmp_628;
  int pretmp_629;
  int prephitmp_630;
  int pretmp_631;
  int prephitmp_632;
  int pretmp_633;
  int prephitmp_634;

  <bb 2>:
  # DEBUG idx => 0
  if (i_idx_32(D) <= 24)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  pretmp_633 = x264_scan8[i_idx_32(D)];
  goto <bb 10>;

  <bb 4>:
  if (i_idx_32(D) != 24)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  pretmp_625 = x264_scan8[i_idx_32(D)];
  pretmp_629 = pretmp_625 + -1;
  pretmp_631 = pretmp_625 + -8;
  goto <bb 7>;

  <bb 6>:
  pretmp_627 = x264_scan8[i_idx_32(D)];

  <bb 7>:
  # prephitmp_628 = PHI <pretmp_625(5), pretmp_627(6)>
  # prephitmp_630 = PHI <pretmp_629(5), 11(6)>
  # prephitmp_632 = PHI <pretmp_631(5), 4(6)>
  # DEBUG h => h_35(D)
  # DEBUG idx => NULL
  _158 = h_35(D)->mb.cache.non_zero_count[prephitmp_630];
  za_159 = (const int) _158;
  # DEBUG za => za_159
  _161 = h_35(D)->mb.cache.non_zero_count[prephitmp_632];
  zb_162 = (const int) _161;
  # DEBUG zb => zb_162
  i_ret_163 = za_159 + zb_162;
  # DEBUG i_ret => i_ret_163
  if (i_ret_163 <= 127)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _164 = i_ret_163 + 1;
  i_ret_165 = _164 >> 1;
  # DEBUG i_ret => i_ret_165

  <bb 9>:
  # i_ret_166 = PHI <i_ret_163(7), i_ret_165(8)>
  # DEBUG i_ret => i_ret_166
  _167 = i_ret_166 & 127;
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG i_ret => NULL
  # DEBUG zb => NULL
  # DEBUG za => NULL
  nC_38 = ct_index[_167];

  <bb 10>:
  # nC_20 = PHI <nC_38(9), 4(3)>
  # prephitmp_634 = PHI <prephitmp_628(9), pretmp_633(3)>
  # DEBUG nC => nC_20
  _42 = h_35(D)->mb.cache.non_zero_count[prephitmp_634];
  if (_42 == 0)
    goto <bb 11>;
  else
    goto <bb 14>;

  <bb 11>:
  # DEBUG s => s_80(D)
  _31 = &x264_coeff_token[nC_20][0];
  v$i_bits_373 = MEM[(struct  *)_31];
  # DEBUG v$i_bits => v$i_bits_373
  v$i_size_374 = MEM[(struct  *)_31 + 1B];
  # DEBUG v$i_size => v$i_size_374
  _168 = (int) v$i_size_374;
  # DEBUG s => s_80(D)
  # DEBUG i_count => _168
  # DEBUG i_bits => (unsigned int) v$i_bits_373
  _169 = s_80(D)->cur_bits;
  _170 = _169 << _168;
  _171 = (long int) v$i_bits_373;
  _172 = _170 | _171;
  s_80(D)->cur_bits = _172;
  _173 = s_80(D)->i_left;
  _174 = _173 - _168;
  s_80(D)->i_left = _174;
  if (_174 <= 32)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  _175 = s_80(D)->p;
  _176 = _172 << _174;
  # DEBUG x => _176
  __asm__("bswap %0" : "=r" x_177 : "0" _176);
  # DEBUG x => x_177
  # DEBUG x => NULL
  _178 = (unsigned int) x_177;
  MEM[(uint32_t *)_175] = _178;
  _179 = s_80(D)->i_left;
  _180 = _179 + 32;
  s_80(D)->i_left = _180;
  _181 = _175 + 4;
  s_80(D)->p = _181;

  <bb 13>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG x => NULL
  level ={v} {CLOBBER};
  run ={v} {CLOBBER};
  goto <bb 92>;

  <bb 14>:
  _44 = h_35(D)->quantf.coeff_last[i_ctxBlockCat_43(D)];
  i_last_47 = _44 (l_45(D));
  # DEBUG i_last => i_last_47
  # DEBUG i_sign => 0
  # DEBUG i_total => 0
  # DEBUG i_trailing => 0
  i_total_zero_49 = i_last_47 + 1;
  # DEBUG i_total_zero => i_total_zero_49
  # DEBUG idx => 0
  # DEBUG i_last => i_last_47
  if (i_last_47 >= 0)
    goto <bb 15>;
  else
    goto <bb 37>;

  <bb 15>:

  <bb 16>:
  # i_last_445 = PHI <i_last_47(15), i_last_378(25)>
  # i_total_420 = PHI <0(15), i_total_64(25)>
  # DEBUG idx => i_total_420
  # DEBUG i_last => i_last_445
  # DEBUG r => 0
  _51 = (long unsigned int) i_last_445;
  _52 = _51 * 2;
  _53 = l_45(D) + _52;
  _54 = *_53;
  _55 = (int) _54;
  level[i_total_420] = _55;
  # DEBUG r => 0
  # DEBUG i_last => i_last_445
  i_last_400 = i_last_445 + -1;
  # DEBUG i_last => i_last_400
  if (i_last_400 != -1)
    goto <bb 17>;
  else
    goto <bb 97>;

  <bb 17>:
  _401 = (long unsigned int) i_last_400;
  _394 = _401 * 2;
  _395 = l_45(D) + _394;
  _397 = *_395;
  if (_397 == 0)
    goto <bb 18>;
  else
    goto <bb 24>;

  <bb 18>:

  <bb 19>:
  # r_442 = PHI <0(18), r_62(23)>
  # i_last_438 = PHI <i_last_400(18), i_last_57(23)>
  # DEBUG r => r_442
  # DEBUG i_last => i_last_438
  r_62 = r_442 + 1;
  # DEBUG r => r_62
  # DEBUG r => r_62
  # DEBUG i_last => i_last_438
  i_last_57 = i_last_438 + -1;
  # DEBUG i_last => i_last_57
  if (i_last_57 != -1)
    goto <bb 21>;
  else
    goto <bb 20>;

  <bb 20>:
  # r_539 = PHI <r_62(19)>
  # i_total_530 = PHI <i_total_420(19)>
  goto <bb 98>;

  <bb 21>:
  _58 = (long unsigned int) i_last_57;
  _59 = _58 * 2;
  _60 = l_45(D) + _59;
  _61 = *_60;
  if (_61 == 0)
    goto <bb 23>;
  else
    goto <bb 22>;

  <bb 22>:
  # i_last_540 = PHI <i_last_57(21)>
  # r_538 = PHI <r_62(21)>
  goto <bb 24>;

  <bb 23>:
  goto <bb 19>;

  <bb 24>:
  # i_last_378 = PHI <i_last_400(17), i_last_540(22)>
  # r_441 = PHI <0(17), r_538(22)>
  i_total_64 = i_total_420 + 1;
  # DEBUG idx => i_total_64
  run[i_total_420] = r_441;
  # DEBUG idx => i_total_64
  # DEBUG i_last => i_last_378
  if (i_last_378 >= 0)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  goto <bb 16>;

  <bb 26>:
  # i_total_537 = PHI <i_total_64(24)>

  <bb 27>:
  # i_total_399 = PHI <i_total_537(26), i_total_393(98)>
  # DEBUG i_total => i_total_399
  i_total_zero_67 = i_total_zero_49 - i_total_399;
  # DEBUG i_total_zero => i_total_zero_67
  i_68 = MIN_EXPR <i_total_399, 3>;
  # DEBUG i_trailing => i_68
  # DEBUG idx => 0
  # DEBUG idx => 0
  # DEBUG i_sign => 0
  if (i_68 > 0)
    goto <bb 29>;
  else
    goto <bb 28>;

  <bb 28>:
  pretmp_557 = i_total_399 * 4;
  pretmp_562 = i_68 + pretmp_557;
  pretmp_567 = i_total_399 > 10;
  pretmp_572 = i_68 <= 2;
  pretmp_576 = pretmp_567 & pretmp_572;
  pretmp_581 = (int) pretmp_576;
  pretmp_588 = i_total_399 + -1;
  pretmp_589 = pretmp_588 > 0;
  pretmp_598 = i_total_zero_67 > 0;
  pretmp_599 = pretmp_589 & pretmp_598;
  goto <bb 37>;

  <bb 29>:
  _447 = level[0];
  _450 = _447 + 1;
  _423 = (unsigned int) _450;
  if (_423 > 2)
    goto <bb 30>;
  else
    goto <bb 34>;

  <bb 30>:
  pretmp_558 = i_total_399 * 4;
  pretmp_568 = i_total_399 > 10;
  pretmp_582 = (int) pretmp_568;
  pretmp_590 = i_total_399 + -1;
  pretmp_591 = pretmp_590 > 0;
  pretmp_600 = i_total_zero_67 > 0;
  pretmp_601 = pretmp_591 & pretmp_600;
  goto <bb 37>;

  <bb 31>:
  _69 = level[i_77];
  _70 = _69 + 1;
  _71 = (unsigned int) _70;
  if (_71 > 2)
    goto <bb 33>;
  else
    goto <bb 32>;

  <bb 32>:
  goto <bb 35>;

  <bb 33>:
  # i_sign_536 = PHI <i_sign_76(31)>
  # i_534 = PHI <i_77(31)>
  pretmp_555 = i_total_399 * 4;
  pretmp_560 = i_534 + pretmp_555;
  pretmp_565 = i_total_399 > 10;
  pretmp_570 = i_534 <= 2;
  pretmp_574 = pretmp_565 & pretmp_570;
  pretmp_579 = (int) pretmp_574;
  pretmp_584 = i_total_399 + -1;
  pretmp_585 = pretmp_584 > 0;
  pretmp_594 = i_total_zero_67 > 0;
  pretmp_595 = pretmp_585 & pretmp_594;
  goto <bb 37>;

  <bb 34>:

  <bb 35>:
  # i_sign_421 = PHI <0(34), i_sign_76(32)>
  # i_398 = PHI <0(34), i_77(32)>
  # _428 = PHI <_447(34), _69(32)>
  # DEBUG idx => i_398
  # DEBUG i_sign => i_sign_421
  i_sign_72 = i_sign_421 << 1;
  # DEBUG i_sign => i_sign_72
  _74 = _428 < 0;
  _75 = (unsigned int) _74;
  i_sign_76 = i_sign_72 | _75;
  # DEBUG i_sign => i_sign_76
  i_77 = i_398 + 1;
  # DEBUG idx => i_77
  # DEBUG idx => i_77
  # DEBUG i_sign => i_sign_76
  if (i_68 > i_77)
    goto <bb 31>;
  else
    goto <bb 36>;

  <bb 36>:
  # i_sign_535 = PHI <i_sign_76(35)>
  pretmp_556 = i_total_399 * 4;
  pretmp_561 = i_68 + pretmp_556;
  pretmp_566 = i_total_399 > 10;
  pretmp_571 = i_68 <= 2;
  pretmp_575 = pretmp_566 & pretmp_571;
  pretmp_580 = (int) pretmp_575;
  pretmp_586 = i_total_399 + -1;
  pretmp_587 = pretmp_586 > 0;
  pretmp_596 = i_total_zero_67 > 0;
  pretmp_597 = pretmp_587 & pretmp_596;

  <bb 37>:
  # i_1 = PHI <i_534(33), i_68(36), i_68(28), 0(30), 0(14)>
  # i_sign_396 = PHI <i_sign_536(33), i_sign_535(36), 0(28), 0(30), 0(14)>
  # i_total_zero_402 = PHI <i_total_zero_67(33), i_total_zero_67(36), i_total_zero_67(28), i_total_zero_67(30), i_total_zero_49(14)>
  # i_total_432 = PHI <i_total_399(33), i_total_399(36), i_total_399(28), i_total_399(30), 0(14)>
  # prephitmp_564 = PHI <pretmp_560(33), pretmp_561(36), pretmp_562(28), pretmp_558(30), 0(14)>
  # prephitmp_573 = PHI <pretmp_570(33), pretmp_571(36), pretmp_572(28), 1(30), 1(14)>
  # prephitmp_583 = PHI <pretmp_579(33), pretmp_580(36), pretmp_581(28), pretmp_582(30), 0(14)>
  # prephitmp_593 = PHI <pretmp_584(33), pretmp_586(36), pretmp_588(28), pretmp_590(30), -1(14)>
  # prephitmp_602 = PHI <pretmp_595(33), pretmp_597(36), pretmp_599(28), pretmp_601(30), 0(14)>
  # DEBUG i_trailing => i_1
  # DEBUG s => s_80(D)
  _39 = &x264_coeff_token[nC_20][prephitmp_564];
  v$i_bits_145 = MEM[(struct  *)_39];
  # DEBUG v$i_bits => v$i_bits_145
  v$i_size_148 = MEM[(struct  *)_39 + 1B];
  # DEBUG v$i_size => v$i_size_148
  _182 = (int) v$i_size_148;
  # DEBUG s => s_80(D)
  # DEBUG i_count => _182
  # DEBUG i_bits => (unsigned int) v$i_bits_145
  _183 = s_80(D)->cur_bits;
  _184 = _183 << _182;
  _185 = (long int) v$i_bits_145;
  _186 = _184 | _185;
  s_80(D)->cur_bits = _186;
  _187 = s_80(D)->i_left;
  _188 = _187 - _182;
  s_80(D)->i_left = _188;
  if (_188 <= 32)
    goto <bb 38>;
  else
    goto <bb 39>;

  <bb 38>:
  _189 = s_80(D)->p;
  _190 = _186 << _188;
  # DEBUG x => _190
  __asm__("bswap %0" : "=r" x_191 : "0" _190);
  # DEBUG x => x_191
  # DEBUG x => NULL
  _192 = (unsigned int) x_191;
  MEM[(uint32_t *)_189] = _192;
  _193 = s_80(D)->i_left;
  _194 = _193 + 32;
  s_80(D)->i_left = _194;
  _195 = _189 + 4;
  s_80(D)->p = _195;

  <bb 39>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG D#6 => i_total_432 > 10
  # DEBUG D#5 => i_1 <= 2
  # DEBUG D#4 => D#6 & D#5
  # DEBUG D#3 => (int) D#4
  # DEBUG i_suffix_length => D#3
  if (i_1 != 0)
    goto <bb 40>;
  else
    goto <bb 42>;

  <bb 40>:
  # DEBUG s => s_80(D)
  # DEBUG i_count => i_1
  # DEBUG i_bits => i_sign_396
  _196 = _186 << i_1;
  _197 = (long int) i_sign_396;
  _198 = _196 | _197;
  s_80(D)->cur_bits = _198;
  _199 = s_80(D)->i_left;
  _200 = _199 - i_1;
  s_80(D)->i_left = _200;
  if (_200 <= 32)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  _201 = s_80(D)->p;
  _202 = _198 << _200;
  # DEBUG x => _202
  __asm__("bswap %0" : "=r" x_203 : "0" _202);
  # DEBUG x => x_203
  # DEBUG x => NULL
  _204 = (unsigned int) x_203;
  MEM[(uint32_t *)_201] = _204;
  _205 = s_80(D)->i_left;
  _206 = _205 + 32;
  s_80(D)->i_left = _206;
  _207 = _201 + 4;
  s_80(D)->p = _207;

  <bb 42>:
  # i_40 = PHI <i_1(40), 0(39), i_1(41)>
  # DEBUG i_suffix_length => D#3
  # DEBUG i => i_40
  if (i_40 < i_total_432)
    goto <bb 44>;
  else
    goto <bb 43>;

  <bb 43>:
  if (i_count_142(D) > i_total_432)
    goto <bb 78>;
  else
    goto <bb 77>;

  <bb 44>:

  <bb 45>:
  # i_444 = PHI <i_40(44), i_141(76)>
  # i_suffix_length_430 = PHI <prephitmp_583(44), i_suffix_length_11(76)>
  # DEBUG i_suffix_length => i_suffix_length_430
  # DEBUG i => i_444
  _86 = level[i_444];
  mask_87 = _86 >> 15;
  # DEBUG mask => mask_87
  _88 = _86 ^ mask_87;
  abs_level_89 = _88 - mask_87;
  # DEBUG abs_level => abs_level_89
  _90 = abs_level_89 * 2;
  _91 = _90 - mask_87;
  # DEBUG i_level_code => _91 + -2
  _93 = i_1 == i_444;
  _94 = _93 & prephitmp_573;
  if (_94 != 0)
    goto <bb 47>;
  else
    goto <bb 46>;

  <bb 46>:
  i_level_code_92 = _91 + -2;
  goto <bb 48>;

  <bb 47>:
  i_level_code_95 = _91 + -4;
  # DEBUG i_level_code => i_level_code_95

  <bb 48>:
  # i_level_code_14 = PHI <i_level_code_92(46), i_level_code_95(47)>
  # DEBUG i_level_code => i_level_code_14
  _96 = i_level_code_14 >> i_suffix_length_430;
  if (_96 <= 13)
    goto <bb 49>;
  else
    goto <bb 52>;

  <bb 49>:
  _97 = 1 << i_suffix_length_430;
  _98 = _97 + -1;
  _99 = i_level_code_14 & _98;
  _100 = _97 + _99;
  _101 = (unsigned int) _100;
  _102 = _96 + 1;
  _103 = _102 + i_suffix_length_430;
  # DEBUG s => s_80(D)
  # DEBUG i_count => _103
  # DEBUG i_bits => _101
  _85 = s_80(D)->cur_bits;
  _208 = _85 << _103;
  _209 = (long int) _101;
  _210 = _208 | _209;
  s_80(D)->cur_bits = _210;
  _211 = s_80(D)->i_left;
  _212 = _211 - _103;
  s_80(D)->i_left = _212;
  if (_212 <= 32)
    goto <bb 51>;
  else
    goto <bb 50>;

  <bb 50>:
  goto <bb 71>;

  <bb 51>:
  _213 = s_80(D)->p;
  _214 = _210 << _212;
  # DEBUG x => _214
  __asm__("bswap %0" : "=r" x_215 : "0" _214);
  # DEBUG x => x_215
  # DEBUG x => NULL
  _216 = (unsigned int) x_215;
  MEM[(uint32_t *)_213] = _216;
  _217 = s_80(D)->i_left;
  _218 = _217 + 32;
  s_80(D)->i_left = _218;
  _219 = _213 + 4;
  s_80(D)->p = _219;
  goto <bb 71>;

  <bb 52>:
  _105 = i_suffix_length_430 == 0;
  _106 = i_level_code_14 <= 29;
  _107 = _105 & _106;
  if (_107 != 0)
    goto <bb 53>;
  else
    goto <bb 55>;

  <bb 53>:
  _108 = i_level_code_14 + 2;
  _109 = (unsigned int) _108;
  # DEBUG s => s_80(D)
  # DEBUG i_count => 19
  # DEBUG i_bits => _109
  _104 = s_80(D)->cur_bits;
  _220 = _104 << 19;
  _221 = (long int) _109;
  _222 = _220 | _221;
  s_80(D)->cur_bits = _222;
  _223 = s_80(D)->i_left;
  _224 = _223 + -19;
  s_80(D)->i_left = _224;
  if (_224 <= 32)
    goto <bb 54>;
  else
    goto <bb 96>;

  <bb 54>:
  _225 = s_80(D)->p;
  _226 = _222 << _224;
  # DEBUG x => _226
  __asm__("bswap %0" : "=r" x_227 : "0" _226);
  # DEBUG x => x_227
  # DEBUG x => NULL
  _228 = (unsigned int) x_227;
  MEM[(uint32_t *)_225] = _228;
  _229 = s_80(D)->i_left;
  _230 = _229 + 32;
  s_80(D)->i_left = _230;
  _231 = _225 + 4;
  s_80(D)->p = _231;
  goto <bb 96>;

  <bb 55>:
  if (i_suffix_length_430 != 0)
    goto <bb 56>;
  else
    goto <bb 93>;

  <bb 56>:
  if (_96 == 14)
    goto <bb 57>;
  else
    goto <bb 94>;

  <bb 57>:
  _111 = 1 << i_suffix_length_430;
  _112 = _111 + -1;
  _113 = i_level_code_14 & _112;
  _114 = _111 + _113;
  _115 = (unsigned int) _114;
  _116 = i_suffix_length_430 + 15;
  # DEBUG s => s_80(D)
  # DEBUG i_count => _116
  # DEBUG i_bits => _115
  _110 = s_80(D)->cur_bits;
  _232 = _110 << _116;
  _233 = (long int) _115;
  _234 = _232 | _233;
  s_80(D)->cur_bits = _234;
  _235 = s_80(D)->i_left;
  _236 = _235 - _116;
  s_80(D)->i_left = _236;
  if (_236 <= 32)
    goto <bb 58>;
  else
    goto <bb 95>;

  <bb 58>:
  _237 = s_80(D)->p;
  _238 = _234 << _236;
  # DEBUG x => _238
  __asm__("bswap %0" : "=r" x_239 : "0" _238);
  # DEBUG x => x_239
  # DEBUG x => NULL
  _240 = (unsigned int) x_239;
  MEM[(uint32_t *)_237] = _240;
  _241 = s_80(D)->i_left;
  _242 = _241 + 32;
  s_80(D)->i_left = _242;
  _243 = _237 + 4;
  s_80(D)->p = _243;
  goto <bb 95>;

  <bb 59>:
  # i_level_code_15 = PHI <i_level_code_424(94), i_level_code_120(93)>
  # DEBUG i_level_code => i_level_code_15
  if (i_level_code_15 > 4095)
    goto <bb 60>;
  else
    goto <bb 67>;

  <bb 60>:
  _121 = h_35(D)->sps;
  _122 = _121->i_profile_idc;
  if (_122 > 99)
    goto <bb 61>;
  else
    goto <bb 66>;

  <bb 61>:
  # DEBUG i_level_prefix => 15
  # DEBUG i_level_code => i_level_code_15
  if (i_level_code_15 > 4096)
    goto <bb 62>;
  else
    goto <bb 67>;

  <bb 62>:

  <bb 63>:
  # i_level_code_429 = PHI <i_level_code_15(62), i_level_code_125(64)>
  # i_level_prefix_385 = PHI <15(62), i_level_prefix_126(64)>
  # _437 = PHI <4096(62), _124(64)>
  # DEBUG i_level_prefix => i_level_prefix_385
  # DEBUG i_level_code => i_level_code_429
  i_level_code_125 = i_level_code_429 - _437;
  # DEBUG i_level_code => i_level_code_125
  i_level_prefix_126 = i_level_prefix_385 + 1;
  # DEBUG i_level_prefix => i_level_prefix_126
  # DEBUG i_level_prefix => i_level_prefix_126
  # DEBUG i_level_code => i_level_code_125
  _123 = i_level_prefix_385 + -2;
  _124 = 1 << _123;
  if (_124 < i_level_code_125)
    goto <bb 64>;
  else
    goto <bb 65>;

  <bb 64>:
  goto <bb 63>;

  <bb 65>:
  # i_level_code_533 = PHI <i_level_code_125(63)>
  # i_level_prefix_532 = PHI <i_level_prefix_126(63)>
  pretmp_608 = i_level_prefix_532 + 1;
  pretmp_610 = i_level_prefix_532 + -3;
  pretmp_612 = 1 << pretmp_610;
  pretmp_614 = pretmp_612 + -1;
  goto <bb 67>;

  <bb 66>:
  x264_log (h_35(D), 1, "OVERFLOW levelcode=%d is only allowed in High Profile", i_level_code_15);
  _128 = i_level_code_15 & 1;
  i_level_code_129 = _128 + 4094;
  # DEBUG i_level_code => i_level_code_129

  <bb 67>:
  # i_level_code_17 = PHI <i_level_code_15(59), i_level_code_533(65), i_level_code_129(66), i_level_code_15(61)>
  # prephitmp_609 = PHI <16(59), pretmp_608(65), 16(66), 16(61)>
  # prephitmp_611 = PHI <12(59), pretmp_610(65), 12(66), 12(61)>
  # prephitmp_615 = PHI <4095(59), pretmp_614(65), 4095(66), 4095(61)>
  # DEBUG i_level_prefix => NULL
  # DEBUG i_level_code => i_level_code_17
  # DEBUG s => s_80(D)
  # DEBUG i_count => NULL
  # DEBUG i_bits => 1
  _136 = s_80(D)->cur_bits;
  _256 = _136 << prephitmp_609;
  _257 = _256 | 1;
  s_80(D)->cur_bits = _257;
  _258 = s_80(D)->i_left;
  _259 = _258 - prephitmp_609;
  s_80(D)->i_left = _259;
  if (_259 <= 32)
    goto <bb 68>;
  else
    goto <bb 69>;

  <bb 68>:
  _260 = s_80(D)->p;
  _261 = _257 << _259;
  # DEBUG x => _261
  __asm__("bswap %0" : "=r" x_262 : "0" _261);
  # DEBUG x => x_262
  # DEBUG x => NULL
  _263 = (unsigned int) x_262;
  MEM[(uint32_t *)_260] = _263;
  _264 = s_80(D)->i_left;
  _265 = _264 + 32;
  s_80(D)->i_left = _265;
  _266 = _260 + 4;
  s_80(D)->p = _266;

  <bb 69>:
  # prephitmp_616 = PHI <_265(68), _259(67)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  _134 = i_level_code_17 & prephitmp_615;
  _135 = (unsigned int) _134;
  # DEBUG s => s_80(D)
  # DEBUG i_count => NULL
  # DEBUG i_bits => _135
  _244 = _257 << prephitmp_611;
  _245 = (long int) _135;
  _246 = _244 | _245;
  s_80(D)->cur_bits = _246;
  _248 = prephitmp_616 - prephitmp_611;
  s_80(D)->i_left = _248;
  if (_248 <= 32)
    goto <bb 70>;
  else
    goto <bb 50>;

  <bb 70>:
  _249 = s_80(D)->p;
  _250 = _246 << _248;
  # DEBUG x => _250
  __asm__("bswap %0" : "=r" x_251 : "0" _250);
  # DEBUG x => x_251
  # DEBUG x => NULL
  _252 = (unsigned int) x_251;
  MEM[(uint32_t *)_249] = _252;
  _253 = s_80(D)->i_left;
  _254 = _253 + 32;
  s_80(D)->i_left = _254;
  _255 = _249 + 4;
  s_80(D)->p = _255;

  <bb 71>:
  if (i_suffix_length_430 == 0)
    goto <bb 96>;
  else
    goto <bb 95>;

  <bb 72>:
  pretmp_606 = i_suffix_length_430 + 1;

  <bb 73>:
  # prephitmp_607 = PHI <pretmp_606(72), 2(96)>
  # DEBUG i_suffix_length => NULL

  <bb 74>:
  # i_suffix_length_11 = PHI <1(96), i_suffix_length_430(95), prephitmp_607(73)>
  # DEBUG i_suffix_length => i_suffix_length_11
  i_141 = i_444 + 1;
  # DEBUG i => i_141
  # DEBUG i_suffix_length => i_suffix_length_11
  # DEBUG i => i_141
  if (i_141 < i_total_432)
    goto <bb 76>;
  else
    goto <bb 75>;

  <bb 75>:
  goto <bb 43>;

  <bb 76>:
  goto <bb 45>;

  <bb 77>:
  goto <bb 81>;

  <bb 78>:
  if (i_idx_32(D) > 24)
    goto <bb 79>;
  else
    goto <bb 83>;

  <bb 79>:
  # DEBUG s => s_80(D)
  _48 = &x264_total_zeros_dc[prephitmp_593][i_total_zero_402];
  v$i_bits_367 = MEM[(struct  *)_48];
  # DEBUG v$i_bits => v$i_bits_367
  v$i_size_368 = MEM[(struct  *)_48 + 1B];
  # DEBUG v$i_size => v$i_size_368
  _267 = (int) v$i_size_368;
  # DEBUG s => s_80(D)
  # DEBUG i_count => _267
  # DEBUG i_bits => (unsigned int) v$i_bits_367
  _268 = s_80(D)->cur_bits;
  _269 = _268 << _267;
  _270 = (long int) v$i_bits_367;
  _271 = _269 | _270;
  s_80(D)->cur_bits = _271;
  _272 = s_80(D)->i_left;
  _273 = _272 - _267;
  s_80(D)->i_left = _273;
  if (_273 <= 32)
    goto <bb 80>;
  else
    goto <bb 77>;

  <bb 80>:
  _274 = s_80(D)->p;
  _275 = _271 << _273;
  # DEBUG x => _275
  __asm__("bswap %0" : "=r" x_276 : "0" _275);
  # DEBUG x => x_276
  # DEBUG x => NULL
  _277 = (unsigned int) x_276;
  MEM[(uint32_t *)_274] = _277;
  _278 = s_80(D)->i_left;
  _279 = _278 + 32;
  s_80(D)->i_left = _279;
  _280 = _274 + 4;
  s_80(D)->p = _280;

  <bb 81>:
  # DEBUG i => 0
  # DEBUG i_total_zero => i_total_zero_402
  if (prephitmp_602 != 0)
    goto <bb 85>;
  else
    goto <bb 82>;

  <bb 82>:
  level ={v} {CLOBBER};
  run ={v} {CLOBBER};
  goto <bb 92>;

  <bb 83>:
  # DEBUG s => s_80(D)
  _50 = &x264_total_zeros[prephitmp_593][i_total_zero_402];
  v$i_bits_369 = MEM[(struct  *)_50];
  # DEBUG v$i_bits => v$i_bits_369
  v$i_size_370 = MEM[(struct  *)_50 + 1B];
  # DEBUG v$i_size => v$i_size_370
  _281 = (int) v$i_size_370;
  # DEBUG s => s_80(D)
  # DEBUG i_count => _281
  # DEBUG i_bits => (unsigned int) v$i_bits_369
  _282 = s_80(D)->cur_bits;
  _283 = _282 << _281;
  _284 = (long int) v$i_bits_369;
  _285 = _283 | _284;
  s_80(D)->cur_bits = _285;
  _286 = s_80(D)->i_left;
  _287 = _286 - _281;
  s_80(D)->i_left = _287;
  if (_287 <= 32)
    goto <bb 84>;
  else
    goto <bb 77>;

  <bb 84>:
  _288 = s_80(D)->p;
  _289 = _285 << _287;
  # DEBUG x => _289
  __asm__("bswap %0" : "=r" x_290 : "0" _289);
  # DEBUG x => x_290
  # DEBUG x => NULL
  _291 = (unsigned int) x_290;
  MEM[(uint32_t *)_288] = _291;
  _292 = s_80(D)->i_left;
  _293 = _292 + 32;
  s_80(D)->i_left = _293;
  _294 = _288 + 4;
  s_80(D)->p = _294;
  goto <bb 81>;

  <bb 85>:
  pretmp_604 = s_80(D)->cur_bits;

  <bb 86>:
  # i_total_zero_446 = PHI <i_total_zero_402(85), i_total_zero_151(91)>
  # i_443 = PHI <0(85), i_152(91)>
  # prephitmp_605 = PHI <pretmp_604(85), _299(91)>
  # DEBUG i => i_443
  # DEBUG i_total_zero => i_total_zero_446
  if (i_total_zero_446 <= 6)
    goto <bb 87>;
  else
    goto <bb 88>;

  <bb 87>:
  i_zl_147 = i_total_zero_446 + -1;

  <bb 88>:
  # i_zl_22 = PHI <i_zl_147(87), 6(86)>
  # DEBUG i_zl => i_zl_22
  _149 = run[i_443];
  # DEBUG s => s_80(D)
  _117 = &x264_run_before[i_zl_22][_149];
  v$i_bits_371 = MEM[(struct  *)_117];
  # DEBUG v$i_bits => v$i_bits_371
  v$i_size_372 = MEM[(struct  *)_117 + 1B];
  # DEBUG v$i_size => v$i_size_372
  _295 = (int) v$i_size_372;
  # DEBUG s => s_80(D)
  # DEBUG i_count => _295
  # DEBUG i_bits => (unsigned int) v$i_bits_371
  _297 = prephitmp_605 << _295;
  _298 = (long int) v$i_bits_371;
  _299 = _297 | _298;
  s_80(D)->cur_bits = _299;
  _300 = s_80(D)->i_left;
  _301 = _300 - _295;
  s_80(D)->i_left = _301;
  if (_301 <= 32)
    goto <bb 89>;
  else
    goto <bb 90>;

  <bb 89>:
  _302 = s_80(D)->p;
  _303 = _299 << _301;
  # DEBUG x => _303
  __asm__("bswap %0" : "=r" x_304 : "0" _303);
  # DEBUG x => x_304
  # DEBUG x => NULL
  _305 = (unsigned int) x_304;
  MEM[(uint32_t *)_302] = _305;
  _306 = s_80(D)->i_left;
  _307 = _306 + 32;
  s_80(D)->i_left = _307;
  _308 = _302 + 4;
  s_80(D)->p = _308;

  <bb 90>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG x => NULL
  i_total_zero_151 = i_total_zero_446 - _149;
  # DEBUG i_total_zero => i_total_zero_151
  i_152 = i_443 + 1;
  # DEBUG i => i_152
  # DEBUG i => i_152
  # DEBUG i_total_zero => i_total_zero_151
  _66 = i_total_zero_151 > 0;
  _73 = i_152 < prephitmp_593;
  _10 = _66 & _73;
  if (_10 != 0)
    goto <bb 91>;
  else
    goto <bb 82>;

  <bb 91>:
  goto <bb 86>;

  <bb 92>:
  return;

  <bb 93>:
  # DEBUG i_level_prefix => 15
  # DEBUG D#7 => i_level_code_14 + -15
  # DEBUG i_level_code => D#7
  # DEBUG i_level_prefix => 15
  # DEBUG i_level_code => D#7
  i_level_code_120 = i_level_code_14 + -30;
  # DEBUG i_level_code => i_level_code_120
  goto <bb 59>;

  <bb 94>:
  # DEBUG i_level_prefix => 15
  _455 = 15 << i_suffix_length_430;
  i_level_code_424 = i_level_code_14 - _455;
  # DEBUG i_level_code => i_level_code_424
  goto <bb 59>;

  <bb 95>:
  # DEBUG i_suffix_length => i_suffix_length_430
  _138 = i_suffix_length_430 + -1;
  _139 = 3 << _138;
  _377 = i_suffix_length_430 <= 5;
  _376 = abs_level_89 > _139;
  _375 = _376 & _377;
  if (_375 != 0)
    goto <bb 72>;
  else
    goto <bb 74>;

  <bb 96>:
  # DEBUG i_suffix_length => 1
  # DEBUG i_suffix_length => 1
  if (abs_level_89 > 3)
    goto <bb 73>;
  else
    goto <bb 74>;

  <bb 97>:
  # i_total_531 = PHI <i_total_420(16)>

  <bb 98>:
  # r_448 = PHI <0(97), r_539(20)>
  # i_total_529 = PHI <i_total_531(97), i_total_530(20)>
  i_total_393 = i_total_529 + 1;
  # DEBUG idx => i_total_393
  run[i_total_529] = r_448;
  # DEBUG idx => i_total_393
  # DEBUG i_last => -1
  goto <bb 27>;

}



;; Function x264_macroblock_write_cavlc (x264_macroblock_write_cavlc, funcdef_no=123, decl_uid=5786, cgraph_uid=123, symbol_order=171)


Analyzing loop at encoder/cavlc.c:334
encoder/cavlc.c:334:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:334:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:334:9: note: not vectorized: latch block not empty.
encoder/cavlc.c:334:9: note: bad loop form.

Analyzing loop at encoder/cavlc.c:331
encoder/cavlc.c:331:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:331:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:331:9: note: not vectorized: latch block not empty.
encoder/cavlc.c:331:9: note: bad loop form.

Analyzing loop at encoder/cavlc.c:614
encoder/cavlc.c:614:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:614:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:614:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 13
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
encoder/cavlc.c:614:13: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[i_2698]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: 0
	constant offset from base address: 64
	step: 4
	aligned to: 128
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {16, +, 1}_13
encoder/cavlc.c:614:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:614:13: note: bad data references.

Analyzing loop at encoder/cavlc.c:597
encoder/cavlc.c:597:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:597:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:597:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 12
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
encoder/cavlc.c:597:13: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[i_2456]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {0, +, 1}_12
encoder/cavlc.c:597:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:597:13: note: bad data references.

Analyzing loop at encoder/cavlc.c:275
encoder/cavlc.c:275:5: note: ===== analyze_loop_nest =====
encoder/cavlc.c:275:5: note: === vect_analyze_loop_form ===
encoder/cavlc.c:275:5: note: ===== analyze_loop_nest_1 =====
encoder/cavlc.c:275:5: note: === vect_analyze_loop_form ===
encoder/cavlc.c:275:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 19
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:275:5: note: not vectorized: control flow in loop.
encoder/cavlc.c:275:5: note: bad loop form.

Analyzing loop at encoder/cavlc.c:277
encoder/cavlc.c:277:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:277:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:277:13: note: === get_loop_niters ===
encoder/cavlc.c:277:13: note: === vect_analyze_data_refs ===
Creating dr for x264_scan8[_1977]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &x264_scan8
	offset from base address: (ssizetype) ((sizetype) (i8start_2681 * 4) * 4)
	constant offset from base address: 0
	step: 4
	aligned to: 16
	base_object: MEM[(int[27] *)&x264_scan8]
	Access function 0: {pretmp_3121, +, 1}_19
encoder/cavlc.c:277:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:277:13: note: bad data references.

Analyzing loop at encoder/cavlc.c:270
encoder/cavlc.c:270:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:270:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:270:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:270:9: note: bad loop form.

Analyzing loop at ./common/macroblock.h:490
./common/macroblock.h:490:38: note: ===== analyze_loop_nest =====
./common/macroblock.h:490:38: note: === vect_analyze_loop_form ===
./common/macroblock.h:490:38: note: not vectorized: control flow in loop.
./common/macroblock.h:490:38: note: bad loop form.

Analyzing loop at ./common/macroblock.h:500
./common/macroblock.h:500:38: note: ===== analyze_loop_nest =====
./common/macroblock.h:500:38: note: === vect_analyze_loop_form ===
./common/macroblock.h:500:38: note: not vectorized: control flow in loop.
./common/macroblock.h:500:38: note: bad loop form.

Analyzing loop at encoder/cavlc.c:360
encoder/cavlc.c:360:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:360:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:360:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:360:9: note: bad loop form.

Analyzing loop at encoder/cavlc.c:458
encoder/cavlc.c:458:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:458:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:458:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 10
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:458:9: note: === vect_analyze_data_refs ===
encoder/cavlc.c:458:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:458:9: note: bad data references.

Analyzing loop at encoder/cavlc.c:444
encoder/cavlc.c:444:13: note: ===== analyze_loop_nest =====
encoder/cavlc.c:444:13: note: === vect_analyze_loop_form ===
encoder/cavlc.c:444:13: note: not vectorized: control flow in loop.
encoder/cavlc.c:444:13: note: bad loop form.

Analyzing loop at encoder/cavlc.c:480
encoder/cavlc.c:480:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:480:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:480:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 8
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:480:9: note: === vect_analyze_data_refs ===
encoder/cavlc.c:480:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:480:9: note: bad data references.

Analyzing loop at encoder/cavlc.c:478
encoder/cavlc.c:478:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:478:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:478:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 7
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
encoder/cavlc.c:478:9: note: === vect_analyze_data_refs ===
encoder/cavlc.c:478:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
encoder/cavlc.c:478:9: note: bad data references.

Analyzing loop at encoder/cavlc.c:473
encoder/cavlc.c:473:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:473:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:473:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:473:9: note: bad loop form.

Analyzing loop at encoder/cavlc.c:470
encoder/cavlc.c:470:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:470:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:470:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:470:9: note: bad loop form.

Analyzing loop at encoder/cavlc.c:466
encoder/cavlc.c:466:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:466:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:466:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:466:9: note: bad loop form.

Analyzing loop at encoder/cavlc.c:521
encoder/cavlc.c:521:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:521:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:521:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:521:9: note: bad loop form.

Analyzing loop at encoder/cavlc.c:501
encoder/cavlc.c:501:9: note: ===== analyze_loop_nest =====
encoder/cavlc.c:501:9: note: === vect_analyze_loop_form ===
encoder/cavlc.c:501:9: note: not vectorized: control flow in loop.
encoder/cavlc.c:501:9: note: bad loop form.
encoder/cavlc.c:287:6: note: vectorized 0 loops in function.
x264_macroblock_write_cavlc (struct x264_t * h, struct bs_t * s)
{
  _Bool s__cur_bits_lsm.86;
  intptr_t s__cur_bits_lsm.85;
  _Bool s__cur_bits_lsm.84;
  intptr_t s__cur_bits_lsm.83;
  int i8start;
  int count;
  int i4;
  int p;
  int i;
  int D.7584;
  static const uint8_t partition_tab[19] = {0, 0, 0, 0, 1, 2, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0};
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  uint32_t x;
  intptr_t x;
  uint32_t x;
  intptr_t x;
  uint32_t x;
  intptr_t x;
  uint32_t x;
  intptr_t x;
  uint32_t x;
  intptr_t x;
  uint32_t x;
  intptr_t x;
  uint32_t x;
  intptr_t x;
  uint32_t x;
  uint32_t x;
  uint32_t x;
  uint32_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  uint32_t x;
  uint32_t x;
  intptr_t x;
  intptr_t x;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  uint32_t x;
  uint32_t x;
  intptr_t x;
  intptr_t x;
  int size;
  intptr_t x;
  int val;
  int size;
  intptr_t x;
  int val;
  uint32_t x;
  intptr_t x;
  int count;
  int count;
  uint32_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  uint32_t x;
  const int ma;
  const int mb;
  const int m;
  uint32_t x;
  intptr_t x;
  intptr_t x;
  intptr_t x;
  uint32_t x;
  int b_list[2][2];
  int16_t mvp[2];
  int i_list;
  int b_sub_ref0;
  int16_t mvp[2];
  int i_mode;
  int di;
  int i;
  int i_mb_i_offset;
  const int i_mb_type;
  signed char _2;
  int _3;
  int _4;
  signed char _5;
  signed char _8;
  signed char _12;
  unsigned int ivtmp_15;
  int iftmp.2_19;
  signed char _23;
  int _32;
  int _34;
  int _35;
  signed char _37;
  int _40;
  signed char _42;
  unsigned int _63;
  int _65;
  int _67;
  int _68;
  int _69;
  int8_t * _70;
  int _71;
  int _72;
  int _73;
  sizetype _74;
  int8_t * _75;
  signed char _76;
  _Bool _77;
  _Bool _78;
  _Bool _79;
  int _80;
  unsigned int _81;
  uint8_t * _83;
  long int _84;
  int _85;
  int _86;
  int _87;
  uint8_t * _90;
  uint8_t * _92;
  uint8_t * _93;
  uint8_t * _95;
  int _96;
  sizetype _97;
  uint8_t * _98;
  int _100;
  sizetype _101;
  uint8_t * _102;
  uint8_t * _105;
  uint8_t * _106;
  uint8_t * _108;
  int _109;
  sizetype _110;
  uint8_t * _111;
  int _113;
  sizetype _114;
  uint8_t * _115;
  uint8_t * _116;
  uint8_t * _118;
  uint8_t * _119;
  void (*<Tf94>) (uint8_t *, int, uint8_t *, int, int) _121;
  uint8_t * _122;
  uint8_t * _123;
  void (*<Tf94>) (uint8_t *, int, uint8_t *, int, int) _125;
  uint8_t * _126;
  uint8_t * _127;
  void (*<Tf94>) (uint8_t *, int, uint8_t *, int, int) _129;
  uint8_t * _130;
  uint8_t * _131;
  long int _133;
  int _135;
  int _136;
  int _137;
  unsigned int i_mb_type.0_139;
  signed char _142;
  signed char _143;
  signed char _144;
  signed char _145;
  signed char _146;
  signed char _147;
  signed char _148;
  int _149;
  int _150;
  int _151;
  unsigned char _152;
  int _153;
  int _154;
  int iftmp.3_155;
  int _156;
  int iftmp.3_157;
  int _159;
  signed char _160;
  int _161;
  signed char _162;
  int _163;
  signed char _164;
  int _165;
  int _166;
  int _167;
  signed char _168;
  int _169;
  int _170;
  int _171;
  signed char _172;
  int _173;
  signed char _174;
  int _175;
  signed char _176;
  int _177;
  int _178;
  int _181;
  short int _183;
  int _184;
  short int _185;
  int _186;
  int _187;
  int _188;
  short int _189;
  int _190;
  short int _191;
  int _192;
  int _193;
  int _194;
  int _195;
  short int _197;
  int _198;
  short int _199;
  int _200;
  int _201;
  int _202;
  short int _203;
  int _204;
  short int _205;
  int _206;
  int _207;
  int _208;
  int _209;
  short int _211;
  int _212;
  short int _213;
  int _214;
  int _215;
  int _216;
  short int _217;
  int _218;
  short int _219;
  int _220;
  int _221;
  int _222;
  int _223;
  short int _225;
  int _226;
  short int _227;
  int _228;
  int _229;
  int _230;
  short int _231;
  int _232;
  short int _233;
  int _234;
  int _235;
  int _236;
  int _237;
  short int _239;
  int _240;
  short int _241;
  int _242;
  int _243;
  struct x264_pps_t * _244;
  short int _245;
  int _246;
  short int _247;
  int _248;
  int _249;
  int _250;
  int _254;
  int _255;
  unsigned char _256;
  int _257;
  int _258;
  int _260;
  unsigned char _261;
  int _262;
  int _263;
  signed char _264;
  int _265;
  int _266;
  int _267;
  signed char _268;
  int _270;
  unsigned char _271;
  int _272;
  int _273;
  signed char _274;
  int _275;
  int _276;
  int _277;
  signed char _284;
  signed char _285;
  signed char _286;
  signed char _287;
  signed char _288;
  signed char _289;
  signed char _290;
  int _291;
  unsigned int _292;
  unsigned int _293;
  int _294;
  unsigned char _295;
  int _296;
  int _299;
  signed char _300;
  int _301;
  signed char _305;
  int _306;
  int _307;
  int _308;
  int _309;
  signed char _310;
  int _311;
  int _312;
  int _313;
  int _314;
  signed char _315;
  int _316;
  int _317;
  int _318;
  int _319;
  int _322;
  int _323;
  signed char _324;
  int _325;
  unsigned int ivtmp_328;
  short int _330;
  int _331;
  short int _332;
  int _333;
  int _334;
  int _335;
  short int _336;
  int _337;
  short int _338;
  int _339;
  int _340;
  int _341;
  int _343;
  signed char _344;
  int _345;
  struct x264_pps_t * _347;
  signed char _348;
  int _349;
  int _350;
  int _351;
  int _352;
  short int _354;
  int _355;
  short int _356;
  int _357;
  int _358;
  int _359;
  short int _360;
  int _361;
  short int _362;
  int _363;
  int _364;
  int _365;
  short int _367;
  int _368;
  short int _369;
  int _370;
  int _371;
  int _372;
  short int _373;
  int _374;
  short int _375;
  int _376;
  int _377;
  int _378;
  int _380;
  signed char _381;
  int _382;
  struct x264_pps_t * _385;
  signed char _386;
  int _387;
  int _388;
  int _389;
  int _390;
  short int _392;
  int _393;
  short int _394;
  int _395;
  int _396;
  int _397;
  short int _398;
  int _399;
  short int _400;
  int _401;
  int _402;
  int _403;
  short int _405;
  int _406;
  short int _407;
  int _408;
  int _409;
  int _410;
  short int _411;
  int _412;
  short int _413;
  int _414;
  int _415;
  int _416;
  int _418;
  int _419;
  unsigned char _420;
  int _421;
  int _422;
  int _423;
  int _424;
  int _425;
  int _426;
  int _427;
  int _428;
  unsigned char _429;
  int _430;
  int _431;
  struct x264_pps_t * _432;
  int _433;
  int _434;
  unsigned int _435;
  int _436;
  uint8_t * _437;
  signed char _438;
  int _439;
  int _440;
  signed char _441;
  _Bool _444;
  int _445;
  int _446;
  unsigned int _447;
  int _448;
  int _450;
  unsigned char _451;
  int _452;
  int _453;
  long int _454;
  int _455;
  int _456;
  int _457;
  int _459;
  int _460;
  int _461;
  int _462;
  unsigned char _463;
  int _464;
  int _465;
  int _466;
  int _467;
  int _468;
  int _469;
  unsigned char _470;
  int _471;
  long int _472;
  int _474;
  int _475;
  unsigned int _476;
  int16_t[16] * _479;
  int _481;
  int _482;
  int16_t[16] * _483;
  unsigned char _484;
  int16_t * _486;
  int _489;
  int _490;
  int _491;
  int16_t[4] * _495;
  int16_t[4] * _497;
  int _499;
  int _500;
  int _501;
  int16_t[16] * _502;
  unsigned char _503;
  int16_t * _505;
  int _508;
  int _509;
  int _510;
  int _511;
  unsigned int _513;
  int _514;
  unsigned int _515;
  unsigned int _517;
  int _518;
  long int _519;
  long int _520;
  long int _521;
  long int _522;
  int _524;
  unsigned int _526;
  uint8_t * _528;
  int _529;
  long int _530;
  int _531;
  signed char _532;
  long int _535;
  int _537;
  long unsigned int _538;
  long unsigned int _539;
  uint8_t * _540;
  long int _541;
  long int _543;
  unsigned int _544;
  unsigned int _545;
  unsigned int _547;
  unsigned int _548;
  unsigned int _549;
  int _550;
  int _551;
  unsigned char _553;
  int _554;
  long int _555;
  long int _556;
  long int _557;
  long int _558;
  int _560;
  uint8_t * _561;
  long int _562;
  unsigned int _564;
  int _565;
  int _566;
  uint8_t * _567;
  long int _568;
  uint8_t * _569;
  long int _570;
  long int _571;
  unsigned int _572;
  unsigned int _573;
  int _574;
  unsigned int _575;
  unsigned int _576;
  unsigned int _577;
  int _578;
  int _579;
  signed char _580;
  unsigned char _581;
  int _582;
  long int _583;
  long int _584;
  long int _585;
  long int _586;
  int _588;
  uint8_t * _589;
  long int _590;
  unsigned int _592;
  int _593;
  int _594;
  uint8_t * _595;
  long int _596;
  long int _597;
  long int _598;
  int _600;
  unsigned int _602;
  uint8_t * _604;
  int _605;
  signed char _606;
  int _608;
  signed char _609;
  int _611;
  signed char _612;
  int _613;
  signed char _614;
  signed char _615;
  int _617;
  long int _619;
  long int _620;
  int _622;
  unsigned int _624;
  uint8_t * _626;
  long int _627;
  long int _628;
  long int _629;
  int _631;
  long int _633;
  unsigned int _635;
  int _636;
  int _637;
  uint8_t * _638;
  unsigned char _640;
  int _641;
  long int _643;
  long int _644;
  long int _645;
  int _647;
  long int _649;
  unsigned int _651;
  int _652;
  int _653;
  uint8_t * _654;
  int _655;
  unsigned char _656;
  int _657;
  long int _659;
  long int _660;
  long int _661;
  int _663;
  long int _665;
  unsigned int _667;
  int _668;
  int _669;
  uint8_t * _670;
  unsigned int _671;
  unsigned char _672;
  int _673;
  long int _674;
  long int _675;
  long int _676;
  long int _677;
  int _679;
  uint8_t * _680;
  long int _681;
  unsigned int _683;
  int _684;
  int _685;
  uint8_t * _686;
  long int _687;
  long int _688;
  long int _689;
  int _691;
  uint8_t * _692;
  long int _693;
  unsigned int _695;
  int _696;
  int _697;
  uint8_t * _698;
  long int _699;
  long int _700;
  long int _701;
  int _703;
  uint8_t * _704;
  long int _705;
  unsigned int _707;
  int _708;
  int _709;
  uint8_t * _710;
  long int _711;
  long int _712;
  long int _713;
  int _715;
  uint8_t * _716;
  long int _717;
  unsigned int _719;
  int _720;
  int _721;
  uint8_t * _722;
  long int _723;
  long int _724;
  long int _725;
  int _727;
  uint8_t * _728;
  long int _729;
  unsigned int _731;
  int _732;
  int _733;
  uint8_t * _734;
  long int _735;
  long int _736;
  long int _737;
  int _739;
  uint8_t * _740;
  long int _741;
  unsigned int _743;
  int _744;
  int _745;
  uint8_t * _746;
  unsigned char _748;
  int _749;
  long int _751;
  long int _752;
  long int _753;
  int _755;
  uint8_t * _756;
  long int _757;
  unsigned int _759;
  int _760;
  int _761;
  uint8_t * _762;
  long int _763;
  long int _764;
  int _766;
  uint8_t * _767;
  long int _768;
  unsigned int _770;
  int _771;
  int _772;
  uint8_t * _773;
  long int _774;
  long int _775;
  long int _776;
  int _778;
  uint8_t * _779;
  long int _780;
  unsigned int _782;
  int _783;
  int _784;
  uint8_t * _785;
  unsigned char _787;
  int _788;
  long int _790;
  long int _791;
  long int _792;
  int _794;
  uint8_t * _795;
  long int _796;
  unsigned int _798;
  int _799;
  int _800;
  uint8_t * _801;
  unsigned char _803;
  int _804;
  long int _805;
  long int _806;
  long int _807;
  long int _808;
  int _810;
  uint8_t * _811;
  long int _812;
  unsigned int _814;
  int _815;
  int _816;
  uint8_t * _817;
  long int _818;
  long int _819;
  long int _820;
  int _822;
  uint8_t * _823;
  long int _824;
  unsigned int _826;
  int _827;
  int _828;
  uint8_t * _829;
  long int _830;
  long int _833;
  unsigned int _834;
  unsigned int _835;
  unsigned int _837;
  unsigned int _838;
  unsigned int _839;
  int _840;
  int _841;
  int _842;
  unsigned char _843;
  int _844;
  long int _845;
  long int _846;
  long int _847;
  long int _848;
  int _849;
  long int _850;
  unsigned int _852;
  int _853;
  int _854;
  uint8_t * _855;
  unsigned char _857;
  int _858;
  long int _859;
  long int _860;
  long int _861;
  long int _862;
  int _863;
  long int _864;
  unsigned int _866;
  int _867;
  int _868;
  uint8_t * _869;
  long int _870;
  long int _871;
  long int _872;
  int _873;
  int _874;
  uint8_t * _875;
  unsigned int _876;
  uint8_t * _878;
  int _879;
  int _881;
  uint8_t * _882;
  long int _883;
  uint8_t * _884;
  long int _885;
  long int _886;
  unsigned int _887;
  unsigned int _888;
  int _889;
  unsigned int _890;
  unsigned int _891;
  unsigned int _892;
  int _893;
  signed char _903;
  unsigned int ivtmp_940;
  unsigned int ivtmp_955;
  int _1033;
  unsigned int _1034;
  unsigned char _1035;
  int _1036;
  long int _1038;
  long int _1039;
  long int _1040;
  int _1041;
  int _1042;
  uint8_t * _1043;
  long int _1044;
  unsigned int _1046;
  int _1047;
  int _1048;
  uint8_t * _1049;
  unsigned int _1050;
  long int _1052;
  long int _1053;
  long int _1054;
  int _1055;
  int _1056;
  uint8_t * _1057;
  unsigned int _1058;
  uint8_t * _1060;
  int _1061;
  unsigned char _1067;
  int _1068;
  long int _1073;
  long int _1074;
  long int _1075;
  int _1077;
  long int _1079;
  unsigned int _1081;
  int _1082;
  int _1083;
  uint8_t * _1084;
  unsigned char _1090;
  int _1091;
  int _1094;
  long int _1095;
  long int _1096;
  long int _1097;
  long int _1098;
  int _1099;
  int _1100;
  uint8_t * _1101;
  long int _1102;
  unsigned int _1104;
  int _1105;
  int _1106;
  uint8_t * _1107;
  unsigned int _1108;
  unsigned char _1109;
  int _1110;
  long int _1111;
  long int _1112;
  long int _1113;
  long int _1114;
  int _1115;
  int _1116;
  uint8_t * _1117;
  long int _1118;
  unsigned int _1120;
  int _1121;
  int _1122;
  uint8_t * _1123;
  unsigned int _1124;
  unsigned char _1125;
  int _1126;
  long int _1128;
  long int _1129;
  long int _1130;
  int _1131;
  int _1132;
  uint8_t * _1133;
  long int _1134;
  unsigned int _1136;
  int _1137;
  int _1138;
  uint8_t * _1139;
  unsigned int _1140;
  long int _1142;
  long int _1143;
  long int _1144;
  int _1145;
  int _1146;
  uint8_t * _1147;
  unsigned int _1148;
  uint8_t * _1150;
  int iftmp.3_1151;
  unsigned int _1152;
  long int _1154;
  long int _1155;
  long int _1156;
  int _1158;
  uint8_t * _1159;
  unsigned int _1160;
  uint8_t * _1162;
  int _1163;
  unsigned char _1169;
  int _1170;
  int _1173;
  long int _1175;
  long int _1176;
  long int _1177;
  int _1179;
  long int _1181;
  unsigned int _1183;
  int _1184;
  int _1185;
  uint8_t * _1186;
  unsigned char _1192;
  int _1193;
  int _1196;
  long int _1197;
  long int _1198;
  long int _1199;
  long int _1200;
  int _1201;
  int _1202;
  uint8_t * _1203;
  long int _1204;
  unsigned int _1206;
  int _1207;
  int _1208;
  uint8_t * _1209;
  unsigned char _1215;
  int _1216;
  signed char _1219;
  long int _1221;
  long int _1222;
  long int _1223;
  int _1225;
  uint8_t * _1226;
  long int _1227;
  unsigned int _1229;
  int _1230;
  int _1231;
  uint8_t * _1232;
  unsigned char _1238;
  int _1239;
  int _1242;
  long int _1243;
  long int _1244;
  long int _1245;
  long int _1246;
  int _1247;
  int _1248;
  uint8_t * _1249;
  long int _1250;
  unsigned int _1252;
  int _1253;
  int _1254;
  uint8_t * _1255;
  unsigned int _1256;
  unsigned char _1257;
  int _1258;
  long int _1259;
  long int _1260;
  long int _1261;
  long int _1262;
  int _1263;
  int _1264;
  uint8_t * _1265;
  long int _1266;
  unsigned int _1268;
  int _1269;
  int _1270;
  uint8_t * _1271;
  unsigned int _1272;
  unsigned char _1273;
  int _1274;
  long int _1276;
  long int _1277;
  long int _1278;
  int _1279;
  int _1280;
  uint8_t * _1281;
  long int _1282;
  unsigned int _1284;
  int _1285;
  int _1286;
  uint8_t * _1287;
  unsigned int _1288;
  long int _1290;
  long int _1291;
  long int _1292;
  int _1293;
  int _1294;
  uint8_t * _1295;
  unsigned int _1296;
  uint8_t * _1298;
  unsigned int _1300;
  long int _1302;
  long int _1303;
  long int _1304;
  int _1306;
  uint8_t * _1307;
  unsigned int _1308;
  uint8_t * _1310;
  int _1311;
  unsigned char _1317;
  int _1318;
  signed char _1321;
  long int _1323;
  long int _1324;
  long int _1325;
  int _1327;
  long int _1329;
  unsigned int _1331;
  int _1332;
  int _1333;
  uint8_t * _1334;
  unsigned char _1340;
  int _1341;
  signed char _1344;
  long int _1345;
  long int _1346;
  long int _1347;
  long int _1348;
  int _1349;
  int _1350;
  uint8_t * _1351;
  long int _1352;
  unsigned int _1354;
  int _1355;
  int _1356;
  uint8_t * _1357;
  unsigned char _1363;
  int _1364;
  int _1367;
  long int _1369;
  long int _1370;
  long int _1371;
  int _1373;
  uint8_t * _1374;
  long int _1375;
  unsigned int _1377;
  int _1378;
  int _1379;
  uint8_t * _1380;
  unsigned char _1386;
  int _1387;
  long int _1391;
  long int _1392;
  long int _1393;
  long int _1394;
  int _1395;
  int _1396;
  uint8_t * _1397;
  long int _1398;
  unsigned int _1400;
  int _1401;
  int _1402;
  uint8_t * _1403;
  unsigned int _1404;
  unsigned char _1405;
  int _1406;
  long int _1408;
  long int _1409;
  long int _1410;
  int _1412;
  uint8_t * _1413;
  long int _1414;
  unsigned int _1416;
  int _1417;
  int _1418;
  uint8_t * _1419;
  unsigned int _1420;
  unsigned char _1421;
  int _1422;
  long int _1424;
  long int _1425;
  long int _1426;
  int _1428;
  uint8_t * _1429;
  long int _1430;
  unsigned int _1432;
  int _1433;
  int _1434;
  uint8_t * _1435;
  unsigned int _1436;
  unsigned char _1437;
  int _1438;
  long int _1439;
  long int _1440;
  long int _1441;
  long int _1442;
  int _1443;
  int _1444;
  uint8_t * _1445;
  long int _1446;
  unsigned int _1448;
  int _1449;
  int _1450;
  uint8_t * _1451;
  unsigned int _1452;
  unsigned char _1453;
  int _1454;
  long int _1455;
  long int _1456;
  long int _1457;
  long int _1458;
  int _1459;
  int _1460;
  uint8_t * _1461;
  long int _1462;
  unsigned int _1464;
  int _1465;
  int _1466;
  uint8_t * _1467;
  unsigned int _1468;
  long int _1469;
  long int _1470;
  long int _1471;
  long int _1472;
  int _1473;
  int _1474;
  uint8_t * _1475;
  unsigned int _1476;
  uint8_t * _1478;
  unsigned int _1480;
  long int _1482;
  long int _1483;
  long int _1484;
  int _1486;
  uint8_t * _1487;
  unsigned int _1488;
  uint8_t * _1490;
  unsigned int _1492;
  long int _1494;
  long int _1495;
  long int _1496;
  int _1498;
  uint8_t * _1499;
  unsigned int _1500;
  uint8_t * _1502;
  unsigned int _1504;
  long int _1506;
  long int _1507;
  long int _1508;
  int _1510;
  uint8_t * _1511;
  unsigned int _1512;
  uint8_t * _1514;
  int _1515;
  unsigned int _1516;
  unsigned char _1517;
  int _1518;
  long int _1519;
  long int _1520;
  long int _1521;
  long int _1522;
  int _1523;
  int _1524;
  uint8_t * _1525;
  long int _1526;
  unsigned int _1528;
  int _1529;
  int _1530;
  uint8_t * _1531;
  unsigned int _1532;
  long int _1533;
  long int _1534;
  long int _1535;
  long int _1536;
  int _1537;
  int _1538;
  uint8_t * _1539;
  unsigned int _1540;
  uint8_t * _1542;
  int _1543;
  unsigned int _1544;
  unsigned char _1545;
  int _1546;
  long int _1547;
  long int _1548;
  long int _1549;
  long int _1550;
  int _1551;
  int _1552;
  uint8_t * _1553;
  long int _1554;
  unsigned int _1556;
  int _1557;
  int _1558;
  uint8_t * _1559;
  unsigned int _1560;
  long int _1561;
  long int _1562;
  long int _1563;
  long int _1564;
  int _1565;
  int _1566;
  uint8_t * _1567;
  unsigned int _1568;
  uint8_t * _1570;
  int _1571;
  unsigned int _1572;
  unsigned char _1573;
  int _1574;
  long int _1575;
  long int _1576;
  long int _1577;
  long int _1578;
  int _1579;
  int _1580;
  uint8_t * _1581;
  long int _1582;
  unsigned int _1584;
  int _1585;
  int _1586;
  uint8_t * _1587;
  unsigned int _1588;
  long int _1589;
  long int _1590;
  long int _1591;
  long int _1592;
  int _1593;
  int _1594;
  uint8_t * _1595;
  unsigned int _1596;
  uint8_t * _1598;
  int _1599;
  unsigned int _1600;
  unsigned char _1601;
  int _1602;
  long int _1603;
  long int _1604;
  long int _1605;
  long int _1606;
  int _1607;
  int _1608;
  uint8_t * _1609;
  long int _1610;
  unsigned int _1612;
  int _1613;
  int _1614;
  uint8_t * _1615;
  unsigned int _1616;
  long int _1617;
  long int _1618;
  long int _1619;
  long int _1620;
  int _1621;
  int _1622;
  uint8_t * _1623;
  unsigned int _1624;
  uint8_t * _1626;
  int _1627;
  unsigned int _1628;
  unsigned char _1629;
  int _1630;
  long int _1632;
  long int _1633;
  long int _1634;
  int _1635;
  int _1636;
  uint8_t * _1637;
  long int _1638;
  unsigned int _1640;
  int _1641;
  int _1642;
  uint8_t * _1643;
  unsigned int _1644;
  long int _1645;
  long int _1646;
  long int _1647;
  long int _1648;
  int _1649;
  int _1650;
  uint8_t * _1651;
  unsigned int _1652;
  uint8_t * _1654;
  int _1655;
  unsigned int _1656;
  unsigned char _1657;
  int _1658;
  long int _1659;
  long int _1660;
  long int _1661;
  long int _1662;
  int _1663;
  int _1664;
  uint8_t * _1665;
  long int _1666;
  unsigned int _1668;
  int _1669;
  int _1670;
  uint8_t * _1671;
  unsigned int _1672;
  long int _1673;
  long int _1674;
  long int _1675;
  long int _1676;
  int _1677;
  int _1678;
  uint8_t * _1679;
  unsigned int _1680;
  uint8_t * _1682;
  int _1683;
  unsigned int _1684;
  unsigned char _1685;
  int _1686;
  long int _1688;
  long int _1689;
  long int _1690;
  int _1691;
  int _1692;
  uint8_t * _1693;
  long int _1694;
  unsigned int _1696;
  int _1697;
  int _1698;
  uint8_t * _1699;
  unsigned int _1700;
  long int _1701;
  long int _1702;
  long int _1703;
  long int _1704;
  int _1705;
  int _1706;
  uint8_t * _1707;
  unsigned int _1708;
  uint8_t * _1710;
  int _1711;
  unsigned char _1717;
  int _1718;
  signed char _1722;
  long int _1723;
  long int _1724;
  long int _1725;
  int _1727;
  uint8_t * _1728;
  long int _1729;
  unsigned int _1731;
  int _1732;
  int _1733;
  uint8_t * _1734;
  unsigned char _1740;
  int _1741;
  int _1744;
  long int _1745;
  long int _1746;
  long int _1747;
  long int _1748;
  int _1749;
  int _1750;
  uint8_t * _1751;
  long int _1752;
  unsigned int _1754;
  int _1755;
  int _1756;
  uint8_t * _1757;
  unsigned char _1763;
  int _1764;
  long int _1769;
  long int _1770;
  long int _1771;
  int _1773;
  uint8_t * _1774;
  long int _1775;
  unsigned int _1777;
  int _1778;
  int _1779;
  uint8_t * _1780;
  unsigned char _1786;
  int _1787;
  int _1790;
  long int _1791;
  long int _1792;
  long int _1793;
  long int _1794;
  int _1795;
  int _1796;
  uint8_t * _1797;
  long int _1798;
  unsigned int _1800;
  int _1801;
  int _1802;
  uint8_t * _1803;
  unsigned char _1809;
  int _1810;
  long int _1815;
  long int _1816;
  long int _1817;
  int _1819;
  uint8_t * _1820;
  long int _1821;
  unsigned int _1823;
  int _1824;
  int _1825;
  uint8_t * _1826;
  unsigned char _1832;
  int _1833;
  int _1836;
  long int _1837;
  long int _1838;
  long int _1839;
  long int _1840;
  int _1841;
  int _1842;
  uint8_t * _1843;
  long int _1844;
  unsigned int _1846;
  int _1847;
  int _1848;
  uint8_t * _1849;
  unsigned char _1855;
  int _1856;
  long int _1861;
  long int _1862;
  long int _1863;
  int _1865;
  uint8_t * _1866;
  long int _1867;
  unsigned int _1869;
  int _1870;
  int _1871;
  uint8_t * _1872;
  unsigned char _1878;
  int _1879;
  signed char _1882;
  long int _1883;
  long int _1884;
  long int _1885;
  long int _1886;
  int _1887;
  int _1888;
  uint8_t * _1889;
  long int _1890;
  unsigned int _1892;
  int _1893;
  int _1894;
  uint8_t * _1895;
  unsigned char _1901;
  int _1902;
  long int _1907;
  long int _1908;
  long int _1909;
  int _1911;
  uint8_t * _1912;
  long int _1913;
  unsigned int _1915;
  int _1916;
  int _1917;
  uint8_t * _1918;
  unsigned char _1924;
  int _1925;
  int _1928;
  long int _1929;
  long int _1930;
  long int _1931;
  long int _1932;
  int _1933;
  int _1934;
  uint8_t * _1935;
  long int _1936;
  unsigned int _1938;
  int _1939;
  int _1940;
  uint8_t * _1941;
  int _1942;
  int _1943;
  unsigned char _1944;
  struct x264_sps_t * _1946;
  int _1947;
  unsigned int _1948;
  unsigned int _1949;
  int _1951;
  struct x264_sps_t * _1953;
  int _1954;
  int _1956;
  int _1958;
  int _1959;
  int _1961;
  int _1964;
  int _1965;
  void (*<T10f2>) (int16_t *, int16_t *) _1966;
  int16_t[64] * _1967;
  int _1968;
  int16_t[16] * _1969;
  int _1973;
  int _1974;
  int _1977;
  int _1978;
  int16_t[16] * _1979;
  int _1981;
  unsigned char _1982;
  unsigned int ivtmp_2006;
  signed char _2007;
  unsigned int _2015;
  signed char _2294;
  signed char _2295;
  unsigned char _2296;
  int _2297;
  unsigned char _2299;
  int _2300;
  signed char _2303;
  signed char _2304;
  unsigned char _2305;
  int _2306;
  unsigned char _2308;
  int _2309;
  signed char _2312;
  signed char _2313;
  signed char _2314;
  long unsigned int _2315;
  long unsigned int _2316;
  signed char _2336;
  int _2337;
  int _2338;
  _Bool _2343;
  signed char _2370;
  int _2569;
  _Bool _2571;
  signed char _2572;
  signed char _2573;
  int _2709;
  unsigned int ivtmp_3035;
  unsigned int ivtmp_3037;
  unsigned int ivtmp_3039;
  unsigned int ivtmp_3040;
  unsigned int ivtmp_3041;
  unsigned int ivtmp_3042;
  unsigned int ivtmp_3044;
  unsigned int ivtmp_3045;
  unsigned int ivtmp_3046;
  unsigned int ivtmp_3047;
  uint8_t * prephitmp_3048;
  int prephitmp_3049;
  long int prephitmp_3050;
  int prephitmp_3051;
  int prephitmp_3052;
  unsigned int ivtmp_3053;
  unsigned int ivtmp_3054;
  unsigned int ivtmp_3055;
  unsigned int ivtmp_3056;
  unsigned int ivtmp_3057;
  unsigned int ivtmp_3058;
  unsigned int ivtmp_3059;
  unsigned int ivtmp_3060;
  unsigned int ivtmp_3061;
  unsigned int ivtmp_3062;
  unsigned int ivtmp_3063;
  unsigned int ivtmp_3064;
  unsigned int ivtmp_3065;
  unsigned int ivtmp_3066;
  unsigned int ivtmp_3067;
  int prephitmp_3085;
  uint8_t * pretmp_3087;
  uint8_t * pretmp_3088;
  uint8_t * pretmp_3089;
  uint8_t * pretmp_3092;
  uint8_t * prephitmp_3093;
  uint8_t * pretmp_3094;
  uint8_t * pretmp_3096;
  uint8_t * pretmp_3097;
  uint8_t * pretmp_3098;
  uint8_t * pretmp_3099;
  long int pretmp_3101;
  long int pretmp_3103;
  long int pretmp_3104;
  long int pretmp_3105;
  long int pretmp_3106;
  long int prephitmp_3107;
  int pretmp_3109;
  int pretmp_3110;
  int pretmp_3111;
  int prephitmp_3112;
  int pretmp_3113;
  int pretmp_3114;
  int pretmp_3115;
  int prephitmp_3116;
  unsigned int ivtmp_3117;
  int pretmp_3121;
  int pretmp_3124;
  int prephitmp_3125;
  unsigned int ivtmp_3126;
  long int pretmp_3130;
  long int prephitmp_3131;
  long int pretmp_3132;
  long int prephitmp_3133;
  int pretmp_3135;
  int pretmp_3136;
  int pretmp_3137;
  int pretmp_3138;
  int pretmp_3139;
  int pretmp_3140;
  int pretmp_3141;
  int pretmp_3142;
  int pretmp_3143;
  int pretmp_3144;
  int pretmp_3145;
  int pretmp_3146;
  int pretmp_3147;
  int pretmp_3148;
  int pretmp_3149;
  int pretmp_3150;
  int prephitmp_3151;
  int pretmp_3152;
  int prephitmp_3153;
  int prephitmp_3155;
  int prephitmp_3156;
  int prephitmp_3157;
  int prephitmp_3158;
  int prephitmp_3159;
  int prephitmp_3160;
  long int prephitmp_3162;
  int pretmp_3163;
  int prephitmp_3164;
  long int prephitmp_3169;
  int prephitmp_3170;
  _Bool prephitmp_3171;
  long int pretmp_3173;
  long int prephitmp_3174;
  int pretmp_3175;
  int prephitmp_3176;
  long int pretmp_3177;
  long int prephitmp_3178;
  int pretmp_3179;
  int prephitmp_3180;
  long int pretmp_3181;
  long int prephitmp_3182;
  int pretmp_3183;
  int prephitmp_3184;
  long int pretmp_3185;
  long int prephitmp_3186;
  int pretmp_3187;
  int prephitmp_3188;
  long int pretmp_3189;
  long int prephitmp_3190;
  int pretmp_3191;
  int prephitmp_3192;
  long int prephitmp_3194;
  int pretmp_3195;
  int prephitmp_3196;
  uint8_t * pretmp_3197;
  uint8_t * prephitmp_3201;
  uint8_t * pretmp_3202;
  uint8_t * pretmp_3203;
  uint8_t * pretmp_3204;
  uint8_t * pretmp_3205;
  uint8_t * pretmp_3206;
  uint8_t * pretmp_3207;
  unsigned int ivtmp_3208;
  long int pretmp_3209;
  long int pretmp_3210;
  long int pretmp_3211;
  long int pretmp_3212;
  long int pretmp_3213;
  long int pretmp_3214;
  long int prephitmp_3215;
  int prephitmp_3217;
  int prephitmp_3218;
  int prephitmp_3219;
  uint8_t * pretmp_3220;
  uint8_t * prephitmp_3221;
  long int pretmp_3222;
  long int prephitmp_3223;
  int pretmp_3224;
  int prephitmp_3225;
  int prephitmp_3226;
  int prephitmp_3227;
  uint8_t * pretmp_3228;
  uint8_t * prephitmp_3229;
  long int pretmp_3230;
  long int prephitmp_3231;
  int pretmp_3232;
  int prephitmp_3233;
  int prephitmp_3234;
  uint8_t * pretmp_3235;
  uint8_t * prephitmp_3236;
  int prephitmp_3237;
  uint8_t * pretmp_3238;
  uint8_t * prephitmp_3239;
  int prephitmp_3241;
  uint8_t * pretmp_3242;
  uint8_t * prephitmp_3243;
  long int prephitmp_3244;
  int prephitmp_3246;
  uint8_t * prephitmp_3249;
  unsigned int ivtmp_3250;
  long int prephitmp_3253;
  int prephitmp_3258;
  uint8_t * prephitmp_3260;
  long int prephitmp_3261;
  int prephitmp_3262;
  uint8_t * prephitmp_3265;
  uint8_t * pretmp_3266;
  uint8_t * prephitmp_3267;
  int prephitmp_3268;
  long int prephitmp_3269;
  int pretmp_3270;
  int prephitmp_3271;
  uint8_t * pretmp_3274;
  uint8_t * prephitmp_3275;
  uint8_t * pretmp_3281;
  uint8_t * prephitmp_3282;
  int pretmp_3286;
  int prephitmp_3287;
  int pretmp_3288;
  int prephitmp_3289;
  int pretmp_3290;
  int prephitmp_3291;
  int prephitmp_3293;
  int pretmp_3294;
  int prephitmp_3295;

  <bb 2>:
  # DEBUG D#45 => h_60(D)->mb.i_type
  # DEBUG i_mb_type => D#45
  # DEBUG s => s_62(D)
  # DEBUG s => NULL
  # DEBUG i_mb_pos_start => NULL
  _65 = h_60(D)->sh.i_type;
  switch (_65) <default: <L3>, case 0: <L177>, case 1: <L173>, case 2: <L174>>

<L177>:
  goto <bb 6> (<L173>);

<L3>:
  x264_log (h_60(D), 0, "internal error or slice unsupported\n");
  goto <bb 462>;

<L174>:

  # i_mb_i_offset_1 = PHI <0(5), 5(3), 23(2)>
<L173>:
  i_mb_type_61 = h_60(D)->mb.i_type;
  _116 = s_62(D)->p;
  _437 = s_62(D)->p_start;
  _514 = s_62(D)->i_left;
  # DEBUG i_mb_i_offset => i_mb_i_offset_1
  _67 = h_60(D)->sh.b_mbaff;
  if (_67 != 0)
    goto <bb 7>;
  else
    goto <bb 11>;

  <bb 7>:
  _68 = h_60(D)->mb.i_mb_y;
  _69 = _68 & 1;
  if (_69 == 0)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  _70 = h_60(D)->mb.type;
  _71 = h_60(D)->mb.i_mb_xy;
  _72 = h_60(D)->mb.i_mb_stride;
  _73 = _71 - _72;
  _74 = (sizetype) _73;
  _75 = _70 + _74;
  _76 = *_75;
  _77 = _76 == 6;
  _78 = _76 == 18;
  _79 = _77 | _78;
  if (_79 != 0)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 9>:
  _80 = h_60(D)->mb.b_interlaced;
  _81 = (unsigned int) _80;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _81
  _519 = s_62(D)->cur_bits;
  _520 = _519 << 1;
  _521 = (long int) _81;
  _522 = _520 | _521;
  s_62(D)->cur_bits = _522;
  _524 = _514 + -1;
  s_62(D)->i_left = _524;
  if (_524 == 32)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  _526 = (unsigned int) _522;
  # DEBUG x => _526
  __asm__("bswap %0" : "=r" x_527 : "0" _526);
  # DEBUG x => x_527
  # DEBUG x => NULL
  MEM[(uint32_t *)_116] = x_527;
  _528 = _116 + 4;
  s_62(D)->p = _528;
  s_62(D)->i_left = 64;

  <bb 11>:
  # prephitmp_3085 = PHI <_514(6), _514(8), 64(10), _524(9)>
  _133 = (long int) _437;
  _515 = (unsigned int) _514;
  _548 = 64 - _515;
  _454 = (long int) _116;
  _84 = _454 - _133;
  _63 = (unsigned int) _84;
  _513 = _63 * 8;
  _517 = _513 + _548;
  _518 = (int) _517;
  if (i_mb_type_61 == 3)
    goto <bb 12>;
  else
    goto <bb 25>;

  <bb 12>:
  # DEBUG s => s_62(D)
  # DEBUG val => i_mb_i_offset_1 + 25
  _551 = i_mb_i_offset_1 + 26;
  _553 = x264_ue_size_tab[_551];
  _554 = (int) _553;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _554
  # DEBUG i_bits => (unsigned int) _551
  _555 = s_62(D)->cur_bits;
  _556 = _555 << _554;
  _557 = (long int) _551;
  _558 = _556 | _557;
  s_62(D)->cur_bits = _558;
  _560 = prephitmp_3085 - _554;
  s_62(D)->i_left = _560;
  if (_560 <= 32)
    goto <bb 14>;
  else
    goto <bb 13>;

  <bb 13>:
  pretmp_3266 = s_62(D)->p;
  goto <bb 15>;

  <bb 14>:
  _561 = s_62(D)->p;
  _562 = _558 << _560;
  # DEBUG x => _562
  __asm__("bswap %0" : "=r" x_563 : "0" _562);
  # DEBUG x => x_563
  # DEBUG x => NULL
  _564 = (unsigned int) x_563;
  MEM[(uint32_t *)_561] = _564;
  _565 = s_62(D)->i_left;
  _566 = _565 + 32;
  s_62(D)->i_left = _566;
  _567 = _561 + 4;
  s_62(D)->p = _567;

  <bb 15>:
  # prephitmp_3267 = PHI <_567(14), pretmp_3266(13)>
  # prephitmp_3268 = PHI <_566(14), _560(13)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG s => s_62(D)
  _541 = (long int) prephitmp_3267;
  _543 = _541 - _133;
  _544 = (unsigned int) _543;
  _545 = _544 * 8;
  _547 = (unsigned int) prephitmp_3268;
  _576 = 64 - _547;
  _549 = _545 + _576;
  _550 = (int) _549;
  # DEBUG s => NULL
  # DEBUG i_mb_pos_tex => NULL
  _85 = h_60(D)->stat.frame.i_mv_bits;
  _86 = _550 - _518;
  _87 = _85 + _86;
  h_60(D)->stat.frame.i_mv_bits = _87;
  # DEBUG s => s_62(D)
  _529 = prephitmp_3268 & 7;
  if (_529 != 0)
    goto <bb 17>;
  else
    goto <bb 16>;

  <bb 16>:
  pretmp_3270 = s_62(D)->i_left;
  goto <bb 18>;

  <bb 17>:
  _530 = _558 << _529;
  s_62(D)->cur_bits = _530;
  _531 = prephitmp_3268 & -8;
  s_62(D)->i_left = _531;

  <bb 18>:
  # prephitmp_3269 = PHI <_558(16), _530(17)>
  # prephitmp_3271 = PHI <pretmp_3270(16), _531(17)>
  # DEBUG s => s_62(D)
  _535 = prephitmp_3269 << prephitmp_3271;
  # DEBUG x => _535
  __asm__("bswap %0" : "=r" x_536 : "0" _535);
  # DEBUG x => x_536
  # DEBUG x => NULL
  MEM[(intptr_t *)prephitmp_3267] = x_536;
  _537 = prephitmp_3271 / 8;
  _538 = (long unsigned int) _537;
  _539 = 8 - _538;
  _540 = prephitmp_3267 + _539;
  s_62(D)->p = _540;
  s_62(D)->i_left = 64;
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG x => NULL
  _90 = h_60(D)->mb.pic.p_fenc[0];
  # DEBUG __dest => _540
  # DEBUG __src => _90
  # DEBUG __len => 256
  __builtin_memcpy (_540, _90, 256);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  _92 = s_62(D)->p;
  _93 = _92 + 256;
  s_62(D)->p = _93;
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 19>:
  # i_140 = PHI <i_104(20), 0(18)>
  # prephitmp_3275 = PHI <pretmp_3274(20), _93(18)>
  # ivtmp_3058 = PHI <ivtmp_3066(20), 8(18)>
  # DEBUG i => i_140
  _95 = h_60(D)->mb.pic.p_fenc[1];
  _96 = i_140 * 16;
  _97 = (sizetype) _96;
  _98 = _95 + _97;
  _100 = i_140 * 8;
  _101 = (sizetype) _100;
  _102 = prephitmp_3275 + _101;
  # DEBUG __dest => _102
  # DEBUG __src => _98
  # DEBUG __len => 8
  _2315 = MEM[(char * {ref-all})_98];
  MEM[(char * {ref-all})_102] = _2315;
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  i_104 = i_140 + 1;
  # DEBUG i => i_104
  # DEBUG i => i_104
  ivtmp_3066 = ivtmp_3058 - 1;
  if (ivtmp_3066 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  pretmp_3274 = s_62(D)->p;
  goto <bb 19>;

  <bb 21>:
  _105 = s_62(D)->p;
  _106 = _105 + 64;
  s_62(D)->p = _106;
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 22>:
  # i_2697 = PHI <i_117(23), 0(21)>
  # prephitmp_3282 = PHI <pretmp_3281(23), _106(21)>
  # ivtmp_3062 = PHI <ivtmp_3060(23), 8(21)>
  # DEBUG i => i_2697
  _108 = h_60(D)->mb.pic.p_fenc[2];
  _109 = i_2697 * 16;
  _110 = (sizetype) _109;
  _111 = _108 + _110;
  _113 = i_2697 * 8;
  _114 = (sizetype) _113;
  _115 = prephitmp_3282 + _114;
  # DEBUG __dest => _115
  # DEBUG __src => _111
  # DEBUG __len => 8
  _2316 = MEM[(char * {ref-all})_111];
  MEM[(char * {ref-all})_115] = _2316;
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  i_117 = i_2697 + 1;
  # DEBUG i => i_117
  # DEBUG i => i_117
  ivtmp_3060 = ivtmp_3062 - 1;
  if (ivtmp_3060 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  pretmp_3281 = s_62(D)->p;
  goto <bb 22>;

  <bb 24>:
  _118 = s_62(D)->p;
  _119 = _118 + 64;
  s_62(D)->p = _119;
  _121 = h_60(D)->mc.copy[0];
  _122 = h_60(D)->mb.pic.p_fenc[0];
  _123 = h_60(D)->mb.pic.p_fdec[0];
  _121 (_123, 32, _122, 16, 16);
  _125 = h_60(D)->mc.copy[3];
  _126 = h_60(D)->mb.pic.p_fenc[1];
  _127 = h_60(D)->mb.pic.p_fdec[1];
  _125 (_127, 32, _126, 16, 8);
  _129 = h_60(D)->mc.copy[3];
  _130 = h_60(D)->mb.pic.p_fenc[2];
  _131 = h_60(D)->mb.pic.p_fdec[2];
  _129 (_131, 32, _130, 16, 8);
  # DEBUG s => s_62(D)
  _83 = s_62(D)->p;
  _568 = (long int) _83;
  _569 = s_62(D)->p_start;
  _570 = (long int) _569;
  _571 = _568 - _570;
  _572 = (unsigned int) _571;
  _573 = _572 * 8;
  _574 = s_62(D)->i_left;
  _575 = (unsigned int) _574;
  _838 = 64 - _575;
  _577 = _573 + _838;
  _578 = (int) _577;
  # DEBUG s => NULL
  _135 = _578 - _550;
  _136 = h_60(D)->stat.frame.i_tex_bits;
  _137 = _135 + _136;
  h_60(D)->stat.frame.i_tex_bits = _137;
  goto <bb 462>;

  <bb 25>:
  i_mb_type.0_139 = (unsigned int) i_mb_type_61;
  if (i_mb_type.0_139 <= 1)
    goto <bb 26>;
  else
    goto <bb 47>;

  <bb 26>:
  if (i_mb_type_61 == 1)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:

  <bb 28>:
  # di_18 = PHI <4(27), 1(26)>
  # DEBUG di => di_18
  # DEBUG s => s_62(D)
  # DEBUG val => i_mb_i_offset_1
  _579 = i_mb_i_offset_1 + 1;
  _581 = x264_ue_size_tab[_579];
  _582 = (int) _581;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _582
  # DEBUG i_bits => (unsigned int) _579
  _583 = s_62(D)->cur_bits;
  _584 = _583 << _582;
  _585 = (long int) _579;
  _586 = _584 | _585;
  s_62(D)->cur_bits = _586;
  _588 = prephitmp_3085 - _582;
  s_62(D)->i_left = _588;
  if (_588 <= 32)
    goto <bb 30>;
  else
    goto <bb 29>;

  <bb 29>:
  pretmp_3242 = s_62(D)->p;
  goto <bb 31>;

  <bb 30>:
  _589 = s_62(D)->p;
  _590 = _586 << _588;
  # DEBUG x => _590
  __asm__("bswap %0" : "=r" x_591 : "0" _590);
  # DEBUG x => x_591
  # DEBUG x => NULL
  _592 = (unsigned int) x_591;
  MEM[(uint32_t *)_589] = _592;
  _593 = s_62(D)->i_left;
  _594 = _593 + 32;
  s_62(D)->i_left = _594;
  _595 = _589 + 4;
  s_62(D)->p = _595;

  <bb 31>:
  # prephitmp_3241 = PHI <_594(30), _588(29)>
  # prephitmp_3243 = PHI <_595(30), pretmp_3242(29)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _432 = h_60(D)->pps;
  _433 = _432->b_transform_8x8_mode;
  if (_433 != 0)
    goto <bb 32>;
  else
    goto <bb 34>;

  <bb 32>:
  _434 = h_60(D)->mb.b_transform_8x8;
  _435 = (unsigned int) _434;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _435
  _596 = _586 << 1;
  _597 = (long int) _435;
  _598 = _596 | _597;
  s_62(D)->cur_bits = _598;
  _600 = prephitmp_3241 + -1;
  s_62(D)->i_left = _600;
  if (_600 == 32)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 33>:
  _602 = (unsigned int) _598;
  # DEBUG x => _602
  __asm__("bswap %0" : "=r" x_603 : "0" _602);
  # DEBUG x => x_603
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_3243] = x_603;
  _604 = prephitmp_3243 + 4;
  s_62(D)->p = _604;
  s_62(D)->i_left = 64;

  <bb 34>:
  # prephitmp_3244 = PHI <_598(32), _586(31), _598(33)>
  # prephitmp_3246 = PHI <_600(32), prephitmp_3241(31), 64(33)>
  # prephitmp_3249 = PHI <prephitmp_3243(32), prephitmp_3243(31), _604(33)>
  # DEBUG i => 0

  <bb 35>:
  # i_2696 = PHI <i_449(43), 0(34)>
  # prephitmp_3253 = PHI <prephitmp_3261(43), prephitmp_3244(34)>
  # prephitmp_3258 = PHI <prephitmp_3262(43), prephitmp_3246(34)>
  # prephitmp_3260 = PHI <prephitmp_3265(43), prephitmp_3249(34)>
  # DEBUG i => i_2696
  # DEBUG h => h_60(D)
  # DEBUG idx => i_2696
  _436 = x264_scan8[i_2696];
  _605 = _436 + -1;
  _606 = h_60(D)->mb.cache.intra4x4_pred_mode[_605];
  ma_607 = (const int) _606;
  # DEBUG ma => ma_607
  _608 = _436 + -8;
  _609 = h_60(D)->mb.cache.intra4x4_pred_mode[_608];
  mb_610 = (const int) _609;
  # DEBUG mb => mb_610
  _611 = mb_610 + 1;
  _612 = x264_mb_pred_mode4x4_fix[_611];
  _613 = ma_607 + 1;
  _614 = x264_mb_pred_mode4x4_fix[_613];
  _615 = MIN_EXPR <_612, _614>;
  m_616 = (const int) _615;
  # DEBUG m => m_616
  if (m_616 < 0)
    goto <bb 36>;
  else
    goto <bb 37>;

  <bb 36>:

  <bb 37>:
  # _617 = PHI <2(36), m_616(35)>
  # DEBUG h => NULL
  # DEBUG idx => NULL
  # DEBUG m => NULL
  # DEBUG mb => NULL
  # DEBUG ma => NULL
  # DEBUG i_pred => NULL
  _438 = h_60(D)->mb.cache.intra4x4_pred_mode[_436];
  _439 = (int) _438;
  _440 = _439 + 1;
  _441 = x264_mb_pred_mode4x4_fix[_440];
  i_mode_442 = (int) _441;
  # DEBUG i_mode => i_mode_442
  if (i_mode_442 == _617)
    goto <bb 38>;
  else
    goto <bb 40>;

  <bb 38>:
  # DEBUG s => s_62(D)
  # DEBUG i_bit => 1
  _619 = prephitmp_3253 << 1;
  _620 = _619 | 1;
  s_62(D)->cur_bits = _620;
  _622 = prephitmp_3258 + -1;
  s_62(D)->i_left = _622;
  if (_622 == 32)
    goto <bb 39>;
  else
    goto <bb 42>;

  <bb 39>:
  _624 = (unsigned int) _620;
  # DEBUG x => _624
  __asm__("bswap %0" : "=r" x_625 : "0" _624);
  # DEBUG x => x_625
  # DEBUG x => NULL
  MEM[(uint32_t *)prephitmp_3260] = x_625;
  _626 = prephitmp_3260 + 4;
  s_62(D)->p = _626;
  s_62(D)->i_left = 64;
  goto <bb 42>;

  <bb 40>:
  _444 = i_mode_442 > _617;
  _445 = (int) _444;
  _446 = i_mode_442 - _445;
  _447 = (unsigned int) _446;
  # DEBUG s => s_62(D)
  # DEBUG i_count => 4
  # DEBUG i_bits => _447
  _627 = prephitmp_3253 << 4;
  _628 = (long int) _447;
  _629 = _627 | _628;
  s_62(D)->cur_bits = _629;
  _631 = prephitmp_3258 + -4;
  s_62(D)->i_left = _631;
  if (_631 <= 32)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  _633 = _629 << _631;
  # DEBUG x => _633
  __asm__("bswap %0" : "=r" x_634 : "0" _633);
  # DEBUG x => x_634
  # DEBUG x => NULL
  _635 = (unsigned int) x_634;
  MEM[(uint32_t *)prephitmp_3260] = _635;
  _636 = s_62(D)->i_left;
  _637 = _636 + 32;
  s_62(D)->i_left = _637;
  _638 = prephitmp_3260 + 4;
  s_62(D)->p = _638;

  <bb 42>:
  # prephitmp_3261 = PHI <_620(39), _629(41), _620(38), _629(40)>
  # prephitmp_3262 = PHI <64(39), _637(41), _622(38), _631(40)>
  # prephitmp_3265 = PHI <_626(39), _638(41), prephitmp_3260(38), prephitmp_3260(40)>
  i_449 = di_18 + i_2696;
  # DEBUG i => i_449
  # DEBUG i => i_449
  if (i_449 <= 15)
    goto <bb 43>;
  else
    goto <bb 44>;

  <bb 43>:
  goto <bb 35>;

  <bb 44>:
  # prephitmp_3050 = PHI <prephitmp_3261(42)>
  # prephitmp_3049 = PHI <prephitmp_3262(42)>
  # prephitmp_3048 = PHI <prephitmp_3265(42)>
  _450 = h_60(D)->mb.i_chroma_pred_mode;
  _451 = x264_mb_pred_mode8x8c_fix[_450];
  _452 = (int) _451;
  # DEBUG s => s_62(D)
  # DEBUG val => _452
  _448 = _452 + 1;
  _640 = x264_ue_size_tab[_448];
  _641 = (int) _640;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _641
  # DEBUG i_bits => (unsigned int) _448
  _643 = prephitmp_3050 << _641;
  _644 = (long int) _448;
  _645 = _643 | _644;
  s_62(D)->cur_bits = _645;
  _647 = prephitmp_3049 - _641;
  s_62(D)->i_left = _647;
  if (_647 <= 32)
    goto <bb 46>;
  else
    goto <bb 45>;

  <bb 45>:
  pretmp_3099 = s_62(D)->p_start;
  pretmp_3106 = (long int) pretmp_3099;
  goto <bb 404>;

  <bb 46>:
  _649 = _645 << _647;
  # DEBUG x => _649
  __asm__("bswap %0" : "=r" x_650 : "0" _649);
  # DEBUG x => x_650
  # DEBUG x => NULL
  _651 = (unsigned int) x_650;
  MEM[(uint32_t *)prephitmp_3048] = _651;
  _652 = s_62(D)->i_left;
  _653 = _652 + 32;
  s_62(D)->i_left = _653;
  _654 = prephitmp_3048 + 4;
  s_62(D)->p = _654;
  pretmp_3094 = s_62(D)->p_start;
  pretmp_3101 = (long int) pretmp_3094;
  goto <bb 404>;

  <bb 47>:
  if (i_mb_type_61 == 2)
    goto <bb 48>;
  else
    goto <bb 55>;

  <bb 48>:
  _418 = i_mb_i_offset_1 + 1;
  _419 = h_60(D)->mb.i_intra16x16_pred_mode;
  _420 = x264_mb_pred_mode16x16_fix[_419];
  _421 = (int) _420;
  _422 = _418 + _421;
  _423 = h_60(D)->mb.i_cbp_chroma;
  _424 = _423 * 4;
  _425 = _422 + _424;
  _426 = h_60(D)->mb.i_cbp_luma;
  if (_426 == 0)
    goto <bb 50>;
  else
    goto <bb 49>;

  <bb 49>:

  <bb 50>:
  # iftmp.2_19 = PHI <0(48), 12(49)>
  _427 = iftmp.2_19 + _425;
  # DEBUG s => s_62(D)
  # DEBUG val => _427
  _431 = _427 + 1;
  _671 = (unsigned int) _431;
  _672 = x264_ue_size_tab[_431];
  _673 = (int) _672;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _673
  # DEBUG i_bits => _671
  _674 = s_62(D)->cur_bits;
  _675 = _674 << _673;
  _676 = (long int) _671;
  _677 = _675 | _676;
  s_62(D)->cur_bits = _677;
  _679 = prephitmp_3085 - _673;
  s_62(D)->i_left = _679;
  if (_679 <= 32)
    goto <bb 52>;
  else
    goto <bb 51>;

  <bb 51>:
  pretmp_3238 = s_62(D)->p;
  goto <bb 53>;

  <bb 52>:
  _680 = s_62(D)->p;
  _681 = _677 << _679;
  # DEBUG x => _681
  __asm__("bswap %0" : "=r" x_682 : "0" _681);
  # DEBUG x => x_682
  # DEBUG x => NULL
  _683 = (unsigned int) x_682;
  MEM[(uint32_t *)_680] = _683;
  _684 = s_62(D)->i_left;
  _685 = _684 + 32;
  s_62(D)->i_left = _685;
  _686 = _680 + 4;
  s_62(D)->p = _686;

  <bb 53>:
  # prephitmp_3237 = PHI <_685(52), _679(51)>
  # prephitmp_3239 = PHI <_686(52), pretmp_3238(51)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _428 = h_60(D)->mb.i_chroma_pred_mode;
  _429 = x264_mb_pred_mode8x8c_fix[_428];
  _430 = (int) _429;
  # DEBUG s => s_62(D)
  # DEBUG val => _430
  _453 = _430 + 1;
  _656 = x264_ue_size_tab[_453];
  _657 = (int) _656;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _657
  # DEBUG i_bits => (unsigned int) _453
  _659 = _677 << _657;
  _660 = (long int) _453;
  _661 = _659 | _660;
  s_62(D)->cur_bits = _661;
  _663 = prephitmp_3237 - _657;
  s_62(D)->i_left = _663;
  if (_663 <= 32)
    goto <bb 54>;
  else
    goto <bb 404>;

  <bb 54>:
  _665 = _661 << _663;
  # DEBUG x => _665
  __asm__("bswap %0" : "=r" x_666 : "0" _665);
  # DEBUG x => x_666
  # DEBUG x => NULL
  _667 = (unsigned int) x_666;
  MEM[(uint32_t *)prephitmp_3239] = _667;
  _668 = s_62(D)->i_left;
  _669 = _668 + 32;
  s_62(D)->i_left = _669;
  _670 = prephitmp_3239 + 4;
  s_62(D)->p = _670;
  goto <bb 404>;

  <bb 55>:
  if (i_mb_type_61 == 4)
    goto <bb 56>;
  else
    goto <bb 178>;

  <bb 56>:
  _322 = h_60(D)->mb.i_partition;
  if (_322 == 16)
    goto <bb 57>;
  else
    goto <bb 82>;

  <bb 57>:
  # DEBUG s => s_62(D)
  # DEBUG val => 0
  # DEBUG s => s_62(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => 1
  _687 = s_62(D)->cur_bits;
  _688 = _687 << 1;
  _689 = _688 | 1;
  s_62(D)->cur_bits = _689;
  _691 = prephitmp_3085 + -1;
  s_62(D)->i_left = _691;
  if (_691 <= 32)
    goto <bb 58>;
  else
    goto <bb 59>;

  <bb 58>:
  _692 = s_62(D)->p;
  _693 = _689 << _691;
  # DEBUG x => _693
  __asm__("bswap %0" : "=r" x_694 : "0" _693);
  # DEBUG x => x_694
  # DEBUG x => NULL
  _695 = (unsigned int) x_694;
  MEM[(uint32_t *)_692] = _695;
  _696 = s_62(D)->i_left;
  _697 = _696 + 32;
  s_62(D)->i_left = _697;
  _698 = _692 + 4;
  s_62(D)->p = _698;

  <bb 59>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _323 = h_60(D)->mb.pic.i_fref[0];
  if (_323 > 1)
    goto <bb 61>;
  else
    goto <bb 60>;

  <bb 60>:
  goto <bb 66>;

  <bb 61>:
  _324 = h_60(D)->mb.cache.ref[0][12];
  # DEBUG D#44 => (int) _324
  # DEBUG s => s_62(D)
  # DEBUG x => _323 + -1
  # DEBUG val => D#44
  if (_323 == 2)
    goto <bb 62>;
  else
    goto <bb 64>;

  <bb 62>:
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => D#44
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _42 = _324 ^ 1;
  _1050 = (unsigned int) _42;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1050
  _1052 = _689 << 1;
  _1053 = (long int) _1050;
  _1054 = _1052 | _1053;
  s_62(D)->cur_bits = _1054;
  _1055 = s_62(D)->i_left;
  _1056 = _1055 + -1;
  s_62(D)->i_left = _1056;
  if (_1056 == 32)
    goto <bb 63>;
  else
    goto <bb 60>;

  <bb 63>:
  _1057 = s_62(D)->p;
  _1058 = (unsigned int) _1054;
  # DEBUG x => _1058
  __asm__("bswap %0" : "=r" x_1059 : "0" _1058);
  # DEBUG x => x_1059
  # DEBUG x => NULL
  MEM[(uint32_t *)_1057] = x_1059;
  _1060 = _1057 + 4;
  s_62(D)->p = _1060;
  s_62(D)->i_left = 64;
  goto <bb 66>;

  <bb 64>:
  # DEBUG s => s_62(D)
  # DEBUG val => D#44
  _325 = (int) _324;
  _1033 = _325 + 1;
  _1034 = (unsigned int) _1033;
  _1035 = x264_ue_size_tab[_1033];
  _1036 = (int) _1035;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1036
  # DEBUG i_bits => _1034
  _1038 = _689 << _1036;
  _1039 = (long int) _1034;
  _1040 = _1038 | _1039;
  s_62(D)->cur_bits = _1040;
  _1041 = s_62(D)->i_left;
  _1042 = _1041 - _1036;
  s_62(D)->i_left = _1042;
  if (_1042 <= 32)
    goto <bb 65>;
  else
    goto <bb 60>;

  <bb 65>:
  _1043 = s_62(D)->p;
  _1044 = _1040 << _1042;
  # DEBUG x => _1044
  __asm__("bswap %0" : "=r" x_1045 : "0" _1044);
  # DEBUG x => x_1045
  # DEBUG x => NULL
  _1046 = (unsigned int) x_1045;
  MEM[(uint32_t *)_1043] = _1046;
  _1047 = s_62(D)->i_left;
  _1048 = _1047 + 32;
  s_62(D)->i_left = _1048;
  _1049 = _1043 + 4;
  s_62(D)->p = _1049;

  <bb 66>:
  x264_mb_predict_mv (h_60(D), 0, 0, 4, &mvp);
  _330 = h_60(D)->mb.cache.mv[0][12][0];
  _331 = (int) _330;
  _332 = mvp[0];
  _333 = (int) _332;
  _334 = _331 - _333;
  # DEBUG s => s_62(D)
  # DEBUG val => _334
  # DEBUG size => 0
  if (_334 <= 0)
    goto <bb 67>;
  else
    goto <bb 68>;

  <bb 67>:
  _341 = _334 * -2;
  val_1085 = _341 + 1;
  goto <bb 69>;

  <bb 68>:
  val_1086 = _334 * 2;

  <bb 69>:
  # val_1087 = PHI <val_1085(67), val_1086(68)>
  # DEBUG val => val_1087
  # DEBUG tmp => val_1087
  if (val_1087 > 255)
    goto <bb 70>;
  else
    goto <bb 71>;

  <bb 70>:
  # DEBUG size => 16
  val_1088 = val_1087 >> 8;
  # DEBUG tmp => val_1088

  <bb 71>:
  # size_1092 = PHI <0(69), 16(70)>
  # val_1089 = PHI <val_1087(69), val_1088(70)>
  # DEBUG tmp => val_1089
  # DEBUG size => size_1092
  _1090 = x264_ue_size_tab[val_1089];
  _1091 = (int) _1090;
  size_1093 = _1091 + size_1092;
  # DEBUG size => size_1093
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1093
  # DEBUG i_bits => (unsigned int) val_1087
  _1095 = s_62(D)->cur_bits;
  _1096 = _1095 << size_1093;
  _1097 = (long int) val_1087;
  _1098 = _1096 | _1097;
  s_62(D)->cur_bits = _1098;
  _1099 = s_62(D)->i_left;
  _1100 = _1099 - size_1093;
  s_62(D)->i_left = _1100;
  if (_1100 <= 32)
    goto <bb 73>;
  else
    goto <bb 72>;

  <bb 72>:
  pretmp_3235 = s_62(D)->p;
  goto <bb 74>;

  <bb 73>:
  _1101 = s_62(D)->p;
  _1102 = _1098 << _1100;
  # DEBUG x => _1102
  __asm__("bswap %0" : "=r" x_1103 : "0" _1102);
  # DEBUG x => x_1103
  # DEBUG x => NULL
  _1104 = (unsigned int) x_1103;
  MEM[(uint32_t *)_1101] = _1104;
  _1105 = s_62(D)->i_left;
  _1106 = _1105 + 32;
  s_62(D)->i_left = _1106;
  _1107 = _1101 + 4;
  s_62(D)->p = _1107;

  <bb 74>:
  # prephitmp_3234 = PHI <_1106(73), _1100(72)>
  # prephitmp_3236 = PHI <_1107(73), pretmp_3235(72)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _336 = h_60(D)->mb.cache.mv[0][12][1];
  _337 = (int) _336;
  _338 = mvp[1];
  _339 = (int) _338;
  _340 = _337 - _339;
  # DEBUG s => s_62(D)
  # DEBUG val => _340
  # DEBUG size => 0
  if (_340 <= 0)
    goto <bb 75>;
  else
    goto <bb 76>;

  <bb 75>:
  _1061 = _340 * -2;
  val_1062 = _1061 + 1;
  goto <bb 77>;

  <bb 76>:
  val_1063 = _340 * 2;

  <bb 77>:
  # val_1064 = PHI <val_1062(75), val_1063(76)>
  # DEBUG val => val_1064
  # DEBUG tmp => val_1064
  if (val_1064 > 255)
    goto <bb 78>;
  else
    goto <bb 79>;

  <bb 78>:
  # DEBUG size => 16
  val_1065 = val_1064 >> 8;
  # DEBUG tmp => val_1065

  <bb 79>:
  # size_1069 = PHI <0(77), 16(78)>
  # val_1066 = PHI <val_1064(77), val_1065(78)>
  # DEBUG tmp => val_1066
  # DEBUG size => size_1069
  _1067 = x264_ue_size_tab[val_1066];
  _1068 = (int) _1067;
  size_1070 = _1068 + size_1069;
  # DEBUG size => size_1070
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1070
  # DEBUG i_bits => (unsigned int) val_1064
  _1073 = _1098 << size_1070;
  _1074 = (long int) val_1064;
  _1075 = _1073 | _1074;
  s_62(D)->cur_bits = _1075;
  _1077 = prephitmp_3234 - size_1070;
  s_62(D)->i_left = _1077;
  if (_1077 <= 32)
    goto <bb 81>;
  else
    goto <bb 80>;

  <bb 80>:
  pretmp_3205 = s_62(D)->p_start;
  pretmp_3212 = (long int) pretmp_3205;
  goto <bb 177>;

  <bb 81>:
  _1079 = _1075 << _1077;
  # DEBUG x => _1079
  __asm__("bswap %0" : "=r" x_1080 : "0" _1079);
  # DEBUG x => x_1080
  # DEBUG x => NULL
  _1081 = (unsigned int) x_1080;
  MEM[(uint32_t *)prephitmp_3236] = _1081;
  _1082 = s_62(D)->i_left;
  _1083 = _1082 + 32;
  s_62(D)->i_left = _1083;
  _1084 = prephitmp_3236 + 4;
  s_62(D)->p = _1084;
  pretmp_3202 = s_62(D)->p_start;
  pretmp_3209 = (long int) pretmp_3202;
  goto <bb 177>;

  <bb 82>:
  if (_322 == 14)
    goto <bb 83>;
  else
    goto <bb 129>;

  <bb 83>:
  # DEBUG s => s_62(D)
  # DEBUG val => 1
  # DEBUG s => s_62(D)
  # DEBUG i_count => 3
  # DEBUG i_bits => 2
  _699 = s_62(D)->cur_bits;
  _700 = _699 << 3;
  _701 = _700 | 2;
  s_62(D)->cur_bits = _701;
  _703 = prephitmp_3085 + -3;
  s_62(D)->i_left = _703;
  if (_703 <= 32)
    goto <bb 84>;
  else
    goto <bb 85>;

  <bb 84>:
  _704 = s_62(D)->p;
  _705 = _701 << _703;
  # DEBUG x => _705
  __asm__("bswap %0" : "=r" x_706 : "0" _705);
  # DEBUG x => x_706
  # DEBUG x => NULL
  _707 = (unsigned int) x_706;
  MEM[(uint32_t *)_704] = _707;
  _708 = s_62(D)->i_left;
  _709 = _708 + 32;
  s_62(D)->i_left = _709;
  _710 = _704 + 4;
  s_62(D)->p = _710;

  <bb 85>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _343 = h_60(D)->mb.pic.i_fref[0];
  if (_343 > 1)
    goto <bb 87>;
  else
    goto <bb 86>;

  <bb 86>:
  goto <bb 99>;

  <bb 87>:
  _344 = h_60(D)->mb.cache.ref[0][12];
  # DEBUG D#43 => (int) _344
  # DEBUG s => s_62(D)
  # DEBUG x => _343 + -1
  # DEBUG val => D#43
  if (_343 == 2)
    goto <bb 88>;
  else
    goto <bb 90>;

  <bb 88>:
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => D#43
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _12 = _344 ^ 1;
  _1140 = (unsigned int) _12;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1140
  _1142 = _701 << 1;
  _1143 = (long int) _1140;
  _1144 = _1142 | _1143;
  s_62(D)->cur_bits = _1144;
  _1145 = s_62(D)->i_left;
  _1146 = _1145 + -1;
  s_62(D)->i_left = _1146;
  if (_1146 == 32)
    goto <bb 89>;
  else
    goto <bb 463>;

  <bb 89>:
  _1147 = s_62(D)->p;
  _1148 = (unsigned int) _1144;
  # DEBUG x => _1148
  __asm__("bswap %0" : "=r" x_1149 : "0" _1148);
  # DEBUG x => x_1149
  # DEBUG x => NULL
  MEM[(uint32_t *)_1147] = x_1149;
  _1150 = _1147 + 4;
  s_62(D)->p = _1150;
  s_62(D)->i_left = 64;
  goto <bb 92>;

  <bb 90>:
  # DEBUG s => s_62(D)
  # DEBUG val => D#43
  _345 = (int) _344;
  _352 = _345 + 1;
  _1124 = (unsigned int) _352;
  _1125 = x264_ue_size_tab[_352];
  _1126 = (int) _1125;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1126
  # DEBUG i_bits => _1124
  _1128 = _701 << _1126;
  _1129 = (long int) _1124;
  _1130 = _1128 | _1129;
  s_62(D)->cur_bits = _1130;
  _1131 = s_62(D)->i_left;
  _1132 = _1131 - _1126;
  s_62(D)->i_left = _1132;
  if (_1132 <= 32)
    goto <bb 91>;
  else
    goto <bb 464>;

  <bb 91>:
  _1133 = s_62(D)->p;
  _1134 = _1130 << _1132;
  # DEBUG x => _1134
  __asm__("bswap %0" : "=r" x_1135 : "0" _1134);
  # DEBUG x => x_1135
  # DEBUG x => NULL
  _1136 = (unsigned int) x_1135;
  MEM[(uint32_t *)_1133] = _1136;
  _1137 = s_62(D)->i_left;
  _1138 = _1137 + 32;
  s_62(D)->i_left = _1138;
  _1139 = _1133 + 4;
  s_62(D)->p = _1139;

  <bb 92>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _348 = h_60(D)->mb.cache.ref[0][28];
  _349 = (int) _348;
  _350 = h_60(D)->mb.pic.i_fref[0];
  _351 = _350 + -1;
  # DEBUG s => s_62(D)
  # DEBUG x => _351
  # DEBUG val => _349
  if (_351 == 1)
    goto <bb 93>;
  else
    goto <bb 96>;

  <bb 93>:
  pretmp_3230 = s_62(D)->cur_bits;
  pretmp_3232 = s_62(D)->i_left;

  <bb 94>:
  # _1882 = PHI <_348(93), _8(463)>
  # prephitmp_3231 = PHI <pretmp_3230(93), _1144(463)>
  # prephitmp_3233 = PHI <pretmp_3232(93), _1146(463)>
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG s => s_62(D)
  # DEBUG x => 1
  # DEBUG val => NULL
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => NULL
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _2304 = _1882 ^ 1;
  _1152 = (unsigned int) _2304;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1152
  _1154 = prephitmp_3231 << 1;
  _1155 = (long int) _1152;
  _1156 = _1154 | _1155;
  s_62(D)->cur_bits = _1156;
  _1158 = prephitmp_3233 + -1;
  s_62(D)->i_left = _1158;
  if (_1158 == 32)
    goto <bb 95>;
  else
    goto <bb 86>;

  <bb 95>:
  _1159 = s_62(D)->p;
  _1160 = (unsigned int) _1156;
  # DEBUG x => _1160
  __asm__("bswap %0" : "=r" x_1161 : "0" _1160);
  # DEBUG x => x_1161
  # DEBUG x => NULL
  MEM[(uint32_t *)_1159] = x_1161;
  _1162 = _1159 + 4;
  s_62(D)->p = _1162;
  s_62(D)->i_left = 64;
  goto <bb 99>;

  <bb 96>:
  # _1790 = PHI <_349(92), _4(464)>
  # _1744 = PHI <_351(92), _3(464)>
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG s => s_62(D)
  # DEBUG x => _1744
  # DEBUG val => _1790
  if (_1744 > 1)
    goto <bb 97>;
  else
    goto <bb 86>;

  <bb 97>:
  # DEBUG s => s_62(D)
  # DEBUG val => _1790
  _335 = _1790 + 1;
  _1108 = (unsigned int) _335;
  _1109 = x264_ue_size_tab[_335];
  _1110 = (int) _1109;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1110
  # DEBUG i_bits => _1108
  _1111 = s_62(D)->cur_bits;
  _1112 = _1111 << _1110;
  _1113 = (long int) _1108;
  _1114 = _1112 | _1113;
  s_62(D)->cur_bits = _1114;
  _1115 = s_62(D)->i_left;
  _1116 = _1115 - _1110;
  s_62(D)->i_left = _1116;
  if (_1116 <= 32)
    goto <bb 98>;
  else
    goto <bb 86>;

  <bb 98>:
  _1117 = s_62(D)->p;
  _1118 = _1114 << _1116;
  # DEBUG x => _1118
  __asm__("bswap %0" : "=r" x_1119 : "0" _1118);
  # DEBUG x => x_1119
  # DEBUG x => NULL
  _1120 = (unsigned int) x_1119;
  MEM[(uint32_t *)_1117] = _1120;
  _1121 = s_62(D)->i_left;
  _1122 = _1121 + 32;
  s_62(D)->i_left = _1122;
  _1123 = _1117 + 4;
  s_62(D)->p = _1123;

  <bb 99>:
  x264_mb_predict_mv (h_60(D), 0, 0, 4, &mvp);
  _354 = h_60(D)->mb.cache.mv[0][12][0];
  _355 = (int) _354;
  _356 = mvp[0];
  _357 = (int) _356;
  _358 = _355 - _357;
  # DEBUG s => s_62(D)
  # DEBUG val => _358
  # DEBUG size => 0
  if (_358 <= 0)
    goto <bb 100>;
  else
    goto <bb 101>;

  <bb 100>:
  _365 = _358 * -2;
  val_1233 = _365 + 1;
  goto <bb 102>;

  <bb 101>:
  val_1234 = _358 * 2;

  <bb 102>:
  # val_1235 = PHI <val_1233(100), val_1234(101)>
  # DEBUG val => val_1235
  # DEBUG tmp => val_1235
  if (val_1235 > 255)
    goto <bb 103>;
  else
    goto <bb 104>;

  <bb 103>:
  # DEBUG size => 16
  val_1236 = val_1235 >> 8;
  # DEBUG tmp => val_1236

  <bb 104>:
  # size_1240 = PHI <0(102), 16(103)>
  # val_1237 = PHI <val_1235(102), val_1236(103)>
  # DEBUG tmp => val_1237
  # DEBUG size => size_1240
  _1238 = x264_ue_size_tab[val_1237];
  _1239 = (int) _1238;
  size_1241 = _1239 + size_1240;
  # DEBUG size => size_1241
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1241
  # DEBUG i_bits => (unsigned int) val_1235
  _1243 = s_62(D)->cur_bits;
  _1244 = _1243 << size_1241;
  _1245 = (long int) val_1235;
  _1246 = _1244 | _1245;
  s_62(D)->cur_bits = _1246;
  _1247 = s_62(D)->i_left;
  _1248 = _1247 - size_1241;
  s_62(D)->i_left = _1248;
  if (_1248 <= 32)
    goto <bb 105>;
  else
    goto <bb 106>;

  <bb 105>:
  _1249 = s_62(D)->p;
  _1250 = _1246 << _1248;
  # DEBUG x => _1250
  __asm__("bswap %0" : "=r" x_1251 : "0" _1250);
  # DEBUG x => x_1251
  # DEBUG x => NULL
  _1252 = (unsigned int) x_1251;
  MEM[(uint32_t *)_1249] = _1252;
  _1253 = s_62(D)->i_left;
  _1254 = _1253 + 32;
  s_62(D)->i_left = _1254;
  _1255 = _1249 + 4;
  s_62(D)->p = _1255;

  <bb 106>:
  # prephitmp_3226 = PHI <_1254(105), _1248(104)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _360 = h_60(D)->mb.cache.mv[0][12][1];
  _361 = (int) _360;
  _362 = mvp[1];
  _363 = (int) _362;
  _364 = _361 - _363;
  # DEBUG s => s_62(D)
  # DEBUG val => _364
  # DEBUG size => 0
  if (_364 <= 0)
    goto <bb 107>;
  else
    goto <bb 108>;

  <bb 107>:
  _372 = _364 * -2;
  val_1210 = _372 + 1;
  goto <bb 109>;

  <bb 108>:
  val_1211 = _364 * 2;

  <bb 109>:
  # val_1212 = PHI <val_1210(107), val_1211(108)>
  # DEBUG val => val_1212
  # DEBUG tmp => val_1212
  if (val_1212 > 255)
    goto <bb 110>;
  else
    goto <bb 111>;

  <bb 110>:
  # DEBUG size => 16
  val_1213 = val_1212 >> 8;
  # DEBUG tmp => val_1213

  <bb 111>:
  # size_1217 = PHI <0(109), 16(110)>
  # val_1214 = PHI <val_1212(109), val_1213(110)>
  # DEBUG tmp => val_1214
  # DEBUG size => size_1217
  _1215 = x264_ue_size_tab[val_1214];
  _1216 = (int) _1215;
  size_1218 = _1216 + size_1217;
  # DEBUG size => size_1218
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1218
  # DEBUG i_bits => (unsigned int) val_1212
  _1221 = _1246 << size_1218;
  _1222 = (long int) val_1212;
  _1223 = _1221 | _1222;
  s_62(D)->cur_bits = _1223;
  _1225 = prephitmp_3226 - size_1218;
  s_62(D)->i_left = _1225;
  if (_1225 <= 32)
    goto <bb 112>;
  else
    goto <bb 113>;

  <bb 112>:
  _1226 = s_62(D)->p;
  _1227 = _1223 << _1225;
  # DEBUG x => _1227
  __asm__("bswap %0" : "=r" x_1228 : "0" _1227);
  # DEBUG x => x_1228
  # DEBUG x => NULL
  _1229 = (unsigned int) x_1228;
  MEM[(uint32_t *)_1226] = _1229;
  _1230 = s_62(D)->i_left;
  _1231 = _1230 + 32;
  s_62(D)->i_left = _1231;
  _1232 = _1226 + 4;
  s_62(D)->p = _1232;

  <bb 113>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  x264_mb_predict_mv (h_60(D), 0, 8, 4, &mvp);
  _367 = h_60(D)->mb.cache.mv[0][28][0];
  _368 = (int) _367;
  _369 = mvp[0];
  _370 = (int) _369;
  _371 = _368 - _370;
  # DEBUG s => s_62(D)
  # DEBUG val => _371
  # DEBUG size => 0
  if (_371 <= 0)
    goto <bb 114>;
  else
    goto <bb 115>;

  <bb 114>:
  _378 = _371 * -2;
  val_1187 = _378 + 1;
  goto <bb 116>;

  <bb 115>:
  val_1188 = _371 * 2;

  <bb 116>:
  # val_1189 = PHI <val_1187(114), val_1188(115)>
  # DEBUG val => val_1189
  # DEBUG tmp => val_1189
  if (val_1189 > 255)
    goto <bb 117>;
  else
    goto <bb 118>;

  <bb 117>:
  # DEBUG size => 16
  val_1190 = val_1189 >> 8;
  # DEBUG tmp => val_1190

  <bb 118>:
  # size_1194 = PHI <0(116), 16(117)>
  # val_1191 = PHI <val_1189(116), val_1190(117)>
  # DEBUG tmp => val_1191
  # DEBUG size => size_1194
  _1192 = x264_ue_size_tab[val_1191];
  _1193 = (int) _1192;
  size_1195 = _1193 + size_1194;
  # DEBUG size => size_1195
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1195
  # DEBUG i_bits => (unsigned int) val_1189
  _1197 = s_62(D)->cur_bits;
  _1198 = _1197 << size_1195;
  _1199 = (long int) val_1189;
  _1200 = _1198 | _1199;
  s_62(D)->cur_bits = _1200;
  _1201 = s_62(D)->i_left;
  _1202 = _1201 - size_1195;
  s_62(D)->i_left = _1202;
  if (_1202 <= 32)
    goto <bb 120>;
  else
    goto <bb 119>;

  <bb 119>:
  pretmp_3228 = s_62(D)->p;
  goto <bb 121>;

  <bb 120>:
  _1203 = s_62(D)->p;
  _1204 = _1200 << _1202;
  # DEBUG x => _1204
  __asm__("bswap %0" : "=r" x_1205 : "0" _1204);
  # DEBUG x => x_1205
  # DEBUG x => NULL
  _1206 = (unsigned int) x_1205;
  MEM[(uint32_t *)_1203] = _1206;
  _1207 = s_62(D)->i_left;
  _1208 = _1207 + 32;
  s_62(D)->i_left = _1208;
  _1209 = _1203 + 4;
  s_62(D)->p = _1209;

  <bb 121>:
  # prephitmp_3227 = PHI <_1208(120), _1202(119)>
  # prephitmp_3229 = PHI <_1209(120), pretmp_3228(119)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _373 = h_60(D)->mb.cache.mv[0][28][1];
  _374 = (int) _373;
  _375 = mvp[1];
  _376 = (int) _375;
  _377 = _374 - _376;
  # DEBUG s => s_62(D)
  # DEBUG val => _377
  # DEBUG size => 0
  if (_377 <= 0)
    goto <bb 122>;
  else
    goto <bb 123>;

  <bb 122>:
  _1163 = _377 * -2;
  val_1164 = _1163 + 1;
  goto <bb 124>;

  <bb 123>:
  val_1165 = _377 * 2;

  <bb 124>:
  # val_1166 = PHI <val_1164(122), val_1165(123)>
  # DEBUG val => val_1166
  # DEBUG tmp => val_1166
  if (val_1166 > 255)
    goto <bb 125>;
  else
    goto <bb 126>;

  <bb 125>:
  # DEBUG size => 16
  val_1167 = val_1166 >> 8;
  # DEBUG tmp => val_1167

  <bb 126>:
  # size_1171 = PHI <0(124), 16(125)>
  # val_1168 = PHI <val_1166(124), val_1167(125)>
  # DEBUG tmp => val_1168
  # DEBUG size => size_1171
  _1169 = x264_ue_size_tab[val_1168];
  _1170 = (int) _1169;
  size_1172 = _1170 + size_1171;
  # DEBUG size => size_1172
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1172
  # DEBUG i_bits => (unsigned int) val_1166
  _1175 = _1200 << size_1172;
  _1176 = (long int) val_1166;
  _1177 = _1175 | _1176;
  s_62(D)->cur_bits = _1177;
  _1179 = prephitmp_3227 - size_1172;
  s_62(D)->i_left = _1179;
  if (_1179 <= 32)
    goto <bb 128>;
  else
    goto <bb 127>;

  <bb 127>:
  pretmp_3206 = s_62(D)->p_start;
  pretmp_3213 = (long int) pretmp_3206;
  goto <bb 177>;

  <bb 128>:
  _1181 = _1177 << _1179;
  # DEBUG x => _1181
  __asm__("bswap %0" : "=r" x_1182 : "0" _1181);
  # DEBUG x => x_1182
  # DEBUG x => NULL
  _1183 = (unsigned int) x_1182;
  MEM[(uint32_t *)prephitmp_3229] = _1183;
  _1184 = s_62(D)->i_left;
  _1185 = _1184 + 32;
  s_62(D)->i_left = _1185;
  _1186 = prephitmp_3229 + 4;
  s_62(D)->p = _1186;
  pretmp_3203 = s_62(D)->p_start;
  pretmp_3210 = (long int) pretmp_3203;
  goto <bb 177>;

  <bb 129>:
  if (_322 == 15)
    goto <bb 131>;
  else
    goto <bb 130>;

  <bb 130>:
  pretmp_3197 = s_62(D)->p;
  goto <bb 177>;

  <bb 131>:
  # DEBUG s => s_62(D)
  # DEBUG val => 2
  # DEBUG s => s_62(D)
  # DEBUG i_count => 3
  # DEBUG i_bits => 3
  _711 = s_62(D)->cur_bits;
  _712 = _711 << 3;
  _713 = _712 | 3;
  s_62(D)->cur_bits = _713;
  _715 = prephitmp_3085 + -3;
  s_62(D)->i_left = _715;
  if (_715 <= 32)
    goto <bb 132>;
  else
    goto <bb 133>;

  <bb 132>:
  _716 = s_62(D)->p;
  _717 = _713 << _715;
  # DEBUG x => _717
  __asm__("bswap %0" : "=r" x_718 : "0" _717);
  # DEBUG x => x_718
  # DEBUG x => NULL
  _719 = (unsigned int) x_718;
  MEM[(uint32_t *)_716] = _719;
  _720 = s_62(D)->i_left;
  _721 = _720 + 32;
  s_62(D)->i_left = _721;
  _722 = _716 + 4;
  s_62(D)->p = _722;

  <bb 133>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _380 = h_60(D)->mb.pic.i_fref[0];
  if (_380 > 1)
    goto <bb 135>;
  else
    goto <bb 134>;

  <bb 134>:
  goto <bb 147>;

  <bb 135>:
  _381 = h_60(D)->mb.cache.ref[0][12];
  # DEBUG D#42 => (int) _381
  # DEBUG s => s_62(D)
  # DEBUG x => _380 + -1
  # DEBUG val => D#42
  if (_380 == 2)
    goto <bb 136>;
  else
    goto <bb 138>;

  <bb 136>:
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => D#42
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _2303 = _381 ^ 1;
  _1288 = (unsigned int) _2303;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1288
  _1290 = _713 << 1;
  _1291 = (long int) _1288;
  _1292 = _1290 | _1291;
  s_62(D)->cur_bits = _1292;
  _1293 = s_62(D)->i_left;
  _1294 = _1293 + -1;
  s_62(D)->i_left = _1294;
  if (_1294 == 32)
    goto <bb 137>;
  else
    goto <bb 466>;

  <bb 137>:
  _1295 = s_62(D)->p;
  _1296 = (unsigned int) _1292;
  # DEBUG x => _1296
  __asm__("bswap %0" : "=r" x_1297 : "0" _1296);
  # DEBUG x => x_1297
  # DEBUG x => NULL
  MEM[(uint32_t *)_1295] = x_1297;
  _1298 = _1295 + 4;
  s_62(D)->p = _1298;
  s_62(D)->i_left = 64;
  goto <bb 140>;

  <bb 138>:
  # DEBUG s => s_62(D)
  # DEBUG val => D#42
  _382 = (int) _381;
  _390 = _382 + 1;
  _1272 = (unsigned int) _390;
  _1273 = x264_ue_size_tab[_390];
  _1274 = (int) _1273;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1274
  # DEBUG i_bits => _1272
  _1276 = _713 << _1274;
  _1277 = (long int) _1272;
  _1278 = _1276 | _1277;
  s_62(D)->cur_bits = _1278;
  _1279 = s_62(D)->i_left;
  _1280 = _1279 - _1274;
  s_62(D)->i_left = _1280;
  if (_1280 <= 32)
    goto <bb 139>;
  else
    goto <bb 465>;

  <bb 139>:
  _1281 = s_62(D)->p;
  _1282 = _1278 << _1280;
  # DEBUG x => _1282
  __asm__("bswap %0" : "=r" x_1283 : "0" _1282);
  # DEBUG x => x_1283
  # DEBUG x => NULL
  _1284 = (unsigned int) x_1283;
  MEM[(uint32_t *)_1281] = _1284;
  _1285 = s_62(D)->i_left;
  _1286 = _1285 + 32;
  s_62(D)->i_left = _1286;
  _1287 = _1281 + 4;
  s_62(D)->p = _1287;

  <bb 140>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _386 = h_60(D)->mb.cache.ref[0][14];
  _387 = (int) _386;
  _388 = h_60(D)->mb.pic.i_fref[0];
  _389 = _388 + -1;
  # DEBUG s => s_62(D)
  # DEBUG x => _389
  # DEBUG val => _387
  if (_389 == 1)
    goto <bb 141>;
  else
    goto <bb 144>;

  <bb 141>:
  pretmp_3222 = s_62(D)->cur_bits;
  pretmp_3224 = s_62(D)->i_left;

  <bb 142>:
  # _1321 = PHI <_386(141), _2370(466)>
  # prephitmp_3223 = PHI <pretmp_3222(141), _1292(466)>
  # prephitmp_3225 = PHI <pretmp_3224(141), _1294(466)>
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG s => s_62(D)
  # DEBUG x => 1
  # DEBUG val => NULL
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => NULL
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _142 = _1321 ^ 1;
  _1300 = (unsigned int) _142;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1300
  _1302 = prephitmp_3223 << 1;
  _1303 = (long int) _1300;
  _1304 = _1302 | _1303;
  s_62(D)->cur_bits = _1304;
  _1306 = prephitmp_3225 + -1;
  s_62(D)->i_left = _1306;
  if (_1306 == 32)
    goto <bb 143>;
  else
    goto <bb 134>;

  <bb 143>:
  _1307 = s_62(D)->p;
  _1308 = (unsigned int) _1304;
  # DEBUG x => _1308
  __asm__("bswap %0" : "=r" x_1309 : "0" _1308);
  # DEBUG x => x_1309
  # DEBUG x => NULL
  MEM[(uint32_t *)_1307] = x_1309;
  _1310 = _1307 + 4;
  s_62(D)->p = _1310;
  s_62(D)->i_left = 64;
  goto <bb 147>;

  <bb 144>:
  # _1928 = PHI <_387(140), _2338(465)>
  # _1836 = PHI <_389(140), _2569(465)>
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG s => s_62(D)
  # DEBUG x => _1836
  # DEBUG val => _1928
  if (_1836 > 1)
    goto <bb 145>;
  else
    goto <bb 134>;

  <bb 145>:
  # DEBUG s => s_62(D)
  # DEBUG val => _1928
  _359 = _1928 + 1;
  _1256 = (unsigned int) _359;
  _1257 = x264_ue_size_tab[_359];
  _1258 = (int) _1257;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1258
  # DEBUG i_bits => _1256
  _1259 = s_62(D)->cur_bits;
  _1260 = _1259 << _1258;
  _1261 = (long int) _1256;
  _1262 = _1260 | _1261;
  s_62(D)->cur_bits = _1262;
  _1263 = s_62(D)->i_left;
  _1264 = _1263 - _1258;
  s_62(D)->i_left = _1264;
  if (_1264 <= 32)
    goto <bb 146>;
  else
    goto <bb 134>;

  <bb 146>:
  _1265 = s_62(D)->p;
  _1266 = _1262 << _1264;
  # DEBUG x => _1266
  __asm__("bswap %0" : "=r" x_1267 : "0" _1266);
  # DEBUG x => x_1267
  # DEBUG x => NULL
  _1268 = (unsigned int) x_1267;
  MEM[(uint32_t *)_1265] = _1268;
  _1269 = s_62(D)->i_left;
  _1270 = _1269 + 32;
  s_62(D)->i_left = _1270;
  _1271 = _1265 + 4;
  s_62(D)->p = _1271;

  <bb 147>:
  x264_mb_predict_mv (h_60(D), 0, 0, 2, &mvp);
  _392 = h_60(D)->mb.cache.mv[0][12][0];
  _393 = (int) _392;
  _394 = mvp[0];
  _395 = (int) _394;
  _396 = _393 - _395;
  # DEBUG s => s_62(D)
  # DEBUG val => _396
  # DEBUG size => 0
  if (_396 <= 0)
    goto <bb 148>;
  else
    goto <bb 149>;

  <bb 148>:
  _403 = _396 * -2;
  val_1381 = _403 + 1;
  goto <bb 150>;

  <bb 149>:
  val_1382 = _396 * 2;

  <bb 150>:
  # val_1383 = PHI <val_1381(148), val_1382(149)>
  # DEBUG val => val_1383
  # DEBUG tmp => val_1383
  if (val_1383 > 255)
    goto <bb 151>;
  else
    goto <bb 152>;

  <bb 151>:
  # DEBUG size => 16
  val_1384 = val_1383 >> 8;
  # DEBUG tmp => val_1384

  <bb 152>:
  # size_1388 = PHI <0(150), 16(151)>
  # val_1385 = PHI <val_1383(150), val_1384(151)>
  # DEBUG tmp => val_1385
  # DEBUG size => size_1388
  _1386 = x264_ue_size_tab[val_1385];
  _1387 = (int) _1386;
  size_1389 = _1387 + size_1388;
  # DEBUG size => size_1389
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1389
  # DEBUG i_bits => (unsigned int) val_1383
  _1391 = s_62(D)->cur_bits;
  _1392 = _1391 << size_1389;
  _1393 = (long int) val_1383;
  _1394 = _1392 | _1393;
  s_62(D)->cur_bits = _1394;
  _1395 = s_62(D)->i_left;
  _1396 = _1395 - size_1389;
  s_62(D)->i_left = _1396;
  if (_1396 <= 32)
    goto <bb 153>;
  else
    goto <bb 154>;

  <bb 153>:
  _1397 = s_62(D)->p;
  _1398 = _1394 << _1396;
  # DEBUG x => _1398
  __asm__("bswap %0" : "=r" x_1399 : "0" _1398);
  # DEBUG x => x_1399
  # DEBUG x => NULL
  _1400 = (unsigned int) x_1399;
  MEM[(uint32_t *)_1397] = _1400;
  _1401 = s_62(D)->i_left;
  _1402 = _1401 + 32;
  s_62(D)->i_left = _1402;
  _1403 = _1397 + 4;
  s_62(D)->p = _1403;

  <bb 154>:
  # prephitmp_3218 = PHI <_1402(153), _1396(152)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _398 = h_60(D)->mb.cache.mv[0][12][1];
  _399 = (int) _398;
  _400 = mvp[1];
  _401 = (int) _400;
  _402 = _399 - _401;
  # DEBUG s => s_62(D)
  # DEBUG val => _402
  # DEBUG size => 0
  if (_402 <= 0)
    goto <bb 155>;
  else
    goto <bb 156>;

  <bb 155>:
  _410 = _402 * -2;
  val_1358 = _410 + 1;
  goto <bb 157>;

  <bb 156>:
  val_1359 = _402 * 2;

  <bb 157>:
  # val_1360 = PHI <val_1358(155), val_1359(156)>
  # DEBUG val => val_1360
  # DEBUG tmp => val_1360
  if (val_1360 > 255)
    goto <bb 158>;
  else
    goto <bb 159>;

  <bb 158>:
  # DEBUG size => 16
  val_1361 = val_1360 >> 8;
  # DEBUG tmp => val_1361

  <bb 159>:
  # size_1365 = PHI <0(157), 16(158)>
  # val_1362 = PHI <val_1360(157), val_1361(158)>
  # DEBUG tmp => val_1362
  # DEBUG size => size_1365
  _1363 = x264_ue_size_tab[val_1362];
  _1364 = (int) _1363;
  size_1366 = _1364 + size_1365;
  # DEBUG size => size_1366
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1366
  # DEBUG i_bits => (unsigned int) val_1360
  _1369 = _1394 << size_1366;
  _1370 = (long int) val_1360;
  _1371 = _1369 | _1370;
  s_62(D)->cur_bits = _1371;
  _1373 = prephitmp_3218 - size_1366;
  s_62(D)->i_left = _1373;
  if (_1373 <= 32)
    goto <bb 160>;
  else
    goto <bb 161>;

  <bb 160>:
  _1374 = s_62(D)->p;
  _1375 = _1371 << _1373;
  # DEBUG x => _1375
  __asm__("bswap %0" : "=r" x_1376 : "0" _1375);
  # DEBUG x => x_1376
  # DEBUG x => NULL
  _1377 = (unsigned int) x_1376;
  MEM[(uint32_t *)_1374] = _1377;
  _1378 = s_62(D)->i_left;
  _1379 = _1378 + 32;
  s_62(D)->i_left = _1379;
  _1380 = _1374 + 4;
  s_62(D)->p = _1380;

  <bb 161>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  x264_mb_predict_mv (h_60(D), 0, 4, 2, &mvp);
  _405 = h_60(D)->mb.cache.mv[0][14][0];
  _406 = (int) _405;
  _407 = mvp[0];
  _408 = (int) _407;
  _409 = _406 - _408;
  # DEBUG s => s_62(D)
  # DEBUG val => _409
  # DEBUG size => 0
  if (_409 <= 0)
    goto <bb 162>;
  else
    goto <bb 163>;

  <bb 162>:
  _416 = _409 * -2;
  val_1335 = _416 + 1;
  goto <bb 164>;

  <bb 163>:
  val_1336 = _409 * 2;

  <bb 164>:
  # val_1337 = PHI <val_1335(162), val_1336(163)>
  # DEBUG val => val_1337
  # DEBUG tmp => val_1337
  if (val_1337 > 255)
    goto <bb 165>;
  else
    goto <bb 166>;

  <bb 165>:
  # DEBUG size => 16
  val_1338 = val_1337 >> 8;
  # DEBUG tmp => val_1338

  <bb 166>:
  # size_1342 = PHI <0(164), 16(165)>
  # val_1339 = PHI <val_1337(164), val_1338(165)>
  # DEBUG tmp => val_1339
  # DEBUG size => size_1342
  _1340 = x264_ue_size_tab[val_1339];
  _1341 = (int) _1340;
  size_1343 = _1341 + size_1342;
  # DEBUG size => size_1343
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1343
  # DEBUG i_bits => (unsigned int) val_1337
  _1345 = s_62(D)->cur_bits;
  _1346 = _1345 << size_1343;
  _1347 = (long int) val_1337;
  _1348 = _1346 | _1347;
  s_62(D)->cur_bits = _1348;
  _1349 = s_62(D)->i_left;
  _1350 = _1349 - size_1343;
  s_62(D)->i_left = _1350;
  if (_1350 <= 32)
    goto <bb 168>;
  else
    goto <bb 167>;

  <bb 167>:
  pretmp_3220 = s_62(D)->p;
  goto <bb 169>;

  <bb 168>:
  _1351 = s_62(D)->p;
  _1352 = _1348 << _1350;
  # DEBUG x => _1352
  __asm__("bswap %0" : "=r" x_1353 : "0" _1352);
  # DEBUG x => x_1353
  # DEBUG x => NULL
  _1354 = (unsigned int) x_1353;
  MEM[(uint32_t *)_1351] = _1354;
  _1355 = s_62(D)->i_left;
  _1356 = _1355 + 32;
  s_62(D)->i_left = _1356;
  _1357 = _1351 + 4;
  s_62(D)->p = _1357;

  <bb 169>:
  # prephitmp_3219 = PHI <_1356(168), _1350(167)>
  # prephitmp_3221 = PHI <_1357(168), pretmp_3220(167)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _411 = h_60(D)->mb.cache.mv[0][14][1];
  _412 = (int) _411;
  _413 = mvp[1];
  _414 = (int) _413;
  _415 = _412 - _414;
  # DEBUG s => s_62(D)
  # DEBUG val => _415
  # DEBUG size => 0
  if (_415 <= 0)
    goto <bb 170>;
  else
    goto <bb 171>;

  <bb 170>:
  _1311 = _415 * -2;
  val_1312 = _1311 + 1;
  goto <bb 172>;

  <bb 171>:
  val_1313 = _415 * 2;

  <bb 172>:
  # val_1314 = PHI <val_1312(170), val_1313(171)>
  # DEBUG val => val_1314
  # DEBUG tmp => val_1314
  if (val_1314 > 255)
    goto <bb 173>;
  else
    goto <bb 174>;

  <bb 173>:
  # DEBUG size => 16
  val_1315 = val_1314 >> 8;
  # DEBUG tmp => val_1315

  <bb 174>:
  # size_1319 = PHI <0(172), 16(173)>
  # val_1316 = PHI <val_1314(172), val_1315(173)>
  # DEBUG tmp => val_1316
  # DEBUG size => size_1319
  _1317 = x264_ue_size_tab[val_1316];
  _1318 = (int) _1317;
  size_1320 = _1318 + size_1319;
  # DEBUG size => size_1320
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1320
  # DEBUG i_bits => (unsigned int) val_1314
  _1323 = _1348 << size_1320;
  _1324 = (long int) val_1314;
  _1325 = _1323 | _1324;
  s_62(D)->cur_bits = _1325;
  _1327 = prephitmp_3219 - size_1320;
  s_62(D)->i_left = _1327;
  if (_1327 <= 32)
    goto <bb 176>;
  else
    goto <bb 175>;

  <bb 175>:
  pretmp_3207 = s_62(D)->p_start;
  pretmp_3214 = (long int) pretmp_3207;
  goto <bb 177>;

  <bb 176>:
  _1329 = _1325 << _1327;
  # DEBUG x => _1329
  __asm__("bswap %0" : "=r" x_1330 : "0" _1329);
  # DEBUG x => x_1330
  # DEBUG x => NULL
  _1331 = (unsigned int) x_1330;
  MEM[(uint32_t *)prephitmp_3221] = _1331;
  _1332 = s_62(D)->i_left;
  _1333 = _1332 + 32;
  s_62(D)->i_left = _1333;
  _1334 = prephitmp_3221 + 4;
  s_62(D)->p = _1334;
  pretmp_3204 = s_62(D)->p_start;
  pretmp_3211 = (long int) pretmp_3204;

  <bb 177>:
  # prephitmp_3201 = PHI <_1084(81), _1186(128), pretmp_3197(130), _1334(176), prephitmp_3236(80), prephitmp_3229(127), prephitmp_3221(175)>
  # prephitmp_3215 = PHI <pretmp_3209(81), pretmp_3210(128), _133(130), pretmp_3211(176), pretmp_3212(80), pretmp_3213(127), pretmp_3214(175)>
  # prephitmp_3217 = PHI <_1083(81), _1185(128), prephitmp_3085(130), _1333(176), _1077(80), _1179(127), _1327(175)>
  mvp ={v} {CLOBBER};
  goto <bb 404>;

  <bb 178>:
  if (i_mb_type_61 == 5)
    goto <bb 179>;
  else
    goto <bb 228>;

  <bb 179>:
  _284 = h_60(D)->mb.cache.ref[0][12];
  _285 = h_60(D)->mb.cache.ref[0][14];
  _286 = _284 | _285;
  _287 = h_60(D)->mb.cache.ref[0][28];
  _288 = _286 | _287;
  _289 = h_60(D)->mb.cache.ref[0][30];
  _290 = _288 | _289;
  if (_290 == 0)
    goto <bb 180>;
  else
    goto <bb 182>;

  <bb 180>:
  # DEBUG s => s_62(D)
  # DEBUG val => 4
  # DEBUG s => s_62(D)
  # DEBUG i_count => 5
  # DEBUG i_bits => 5
  _723 = s_62(D)->cur_bits;
  _724 = _723 << 5;
  _725 = _724 | 5;
  s_62(D)->cur_bits = _725;
  _727 = prephitmp_3085 + -5;
  s_62(D)->i_left = _727;
  if (_727 <= 32)
    goto <bb 181>;
  else
    goto <bb 184>;

  <bb 181>:
  _728 = s_62(D)->p;
  _729 = _725 << _727;
  # DEBUG x => _729
  __asm__("bswap %0" : "=r" x_730 : "0" _729);
  # DEBUG x => x_730
  # DEBUG x => NULL
  _731 = (unsigned int) x_730;
  MEM[(uint32_t *)_728] = _731;
  _732 = s_62(D)->i_left;
  _733 = _732 + 32;
  s_62(D)->i_left = _733;
  _734 = _728 + 4;
  s_62(D)->p = _734;
  goto <bb 184>;

  <bb 182>:
  # DEBUG s => s_62(D)
  # DEBUG val => 3
  # DEBUG s => s_62(D)
  # DEBUG i_count => 5
  # DEBUG i_bits => 4
  _735 = s_62(D)->cur_bits;
  _736 = _735 << 5;
  _737 = _736 | 4;
  s_62(D)->cur_bits = _737;
  _739 = prephitmp_3085 + -5;
  s_62(D)->i_left = _739;
  if (_739 <= 32)
    goto <bb 183>;
  else
    goto <bb 184>;

  <bb 183>:
  _740 = s_62(D)->p;
  _741 = _737 << _739;
  # DEBUG x => _741
  __asm__("bswap %0" : "=r" x_742 : "0" _741);
  # DEBUG x => x_742
  # DEBUG x => NULL
  _743 = (unsigned int) x_742;
  MEM[(uint32_t *)_740] = _743;
  _744 = s_62(D)->i_left;
  _745 = _744 + 32;
  s_62(D)->i_left = _745;
  _746 = _740 + 4;
  s_62(D)->p = _746;

  <bb 184>:
  # prephitmp_3169 = PHI <_725(180), _737(182), _737(183), _725(181)>
  # prephitmp_3170 = PHI <_727(180), _739(182), _745(183), _733(181)>
  # prephitmp_3171 = PHI <0(180), 1(182), 1(183), 0(181)>
  # DEBUG b_sub_ref0 => NULL
  _292 = h_60(D)->param.analyse.inter;
  _293 = _292 & 32;
  if (_293 != 0)
    goto <bb 185>;
  else
    goto <bb 192>;

  <bb 185>:

  <bb 186>:
  # i_2694 = PHI <0(185), i_298(191)>
  # prephitmp_3194 = PHI <prephitmp_3169(185), _753(191)>
  # prephitmp_3196 = PHI <prephitmp_3170(185), pretmp_3195(191)>
  # ivtmp_3046 = PHI <4(185), ivtmp_3045(191)>
  # DEBUG i => i_2694
  _294 = h_60(D)->mb.i_sub_partition[i_2694];
  _295 = sub_mb_type_p_to_golomb[_294];
  _296 = (int) _295;
  # DEBUG s => s_62(D)
  # DEBUG val => _296
  _291 = _296 + 1;
  _748 = x264_ue_size_tab[_291];
  _749 = (int) _748;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _749
  # DEBUG i_bits => (unsigned int) _291
  _751 = prephitmp_3194 << _749;
  _752 = (long int) _291;
  _753 = _751 | _752;
  _755 = prephitmp_3196 - _749;
  s_62(D)->i_left = _755;
  if (_755 <= 32)
    goto <bb 187>;
  else
    goto <bb 188>;

  <bb 187>:
  _756 = s_62(D)->p;
  _757 = _753 << _755;
  # DEBUG x => _757
  __asm__("bswap %0" : "=r" x_758 : "0" _757);
  # DEBUG x => x_758
  # DEBUG x => NULL
  _759 = (unsigned int) x_758;
  MEM[(uint32_t *)_756] = _759;
  _760 = s_62(D)->i_left;
  _761 = _760 + 32;
  s_62(D)->i_left = _761;
  _762 = _756 + 4;
  s_62(D)->p = _762;

  <bb 188>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  i_298 = i_2694 + 1;
  # DEBUG i => i_298
  # DEBUG i => i_298
  ivtmp_3045 = ivtmp_3046 - 1;
  if (ivtmp_3045 != 0)
    goto <bb 191>;
  else
    goto <bb 189>;

  <bb 189>:
  # s__cur_bits_lsm.83_3034 = PHI <_753(188)>
  s_62(D)->cur_bits = s__cur_bits_lsm.83_3034;

  <bb 190>:
  goto <bb 194>;

  <bb 191>:
  pretmp_3195 = s_62(D)->i_left;
  goto <bb 186>;

  <bb 192>:
  # DEBUG s => s_62(D)
  # DEBUG i_count => 4
  # DEBUG i_bits => 15
  _763 = prephitmp_3169 << 4;
  _764 = _763 | 15;
  s_62(D)->cur_bits = _764;
  _766 = prephitmp_3170 + -4;
  s_62(D)->i_left = _766;
  if (_766 <= 32)
    goto <bb 193>;
  else
    goto <bb 190>;

  <bb 193>:
  _767 = s_62(D)->p;
  _768 = _764 << _766;
  # DEBUG x => _768
  __asm__("bswap %0" : "=r" x_769 : "0" _768);
  # DEBUG x => x_769
  # DEBUG x => NULL
  _770 = (unsigned int) x_769;
  MEM[(uint32_t *)_767] = _770;
  _771 = s_62(D)->i_left;
  _772 = _771 + 32;
  s_62(D)->i_left = _772;
  _773 = _767 + 4;
  s_62(D)->p = _773;

  <bb 194>:
  _299 = h_60(D)->mb.pic.i_fref[0];
  _2343 = _299 > 1;
  _2571 = _2343 & prephitmp_3171;
  if (_2571 != 0)
    goto <bb 196>;
  else
    goto <bb 195>;

  <bb 195>:
  goto <bb 220>;

  <bb 196>:
  _300 = h_60(D)->mb.cache.ref[0][12];
  # DEBUG D#41 => (int) _300
  # DEBUG s => s_62(D)
  # DEBUG x => _299 + -1
  # DEBUG val => D#41
  if (_299 == 2)
    goto <bb 197>;
  else
    goto <bb 199>;

  <bb 197>:
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => D#41
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _143 = _300 ^ 1;
  _1468 = (unsigned int) _143;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1468
  _1469 = s_62(D)->cur_bits;
  _1470 = _1469 << 1;
  _1471 = (long int) _1468;
  _1472 = _1470 | _1471;
  s_62(D)->cur_bits = _1472;
  _1473 = s_62(D)->i_left;
  _1474 = _1473 + -1;
  s_62(D)->i_left = _1474;
  if (_1474 == 32)
    goto <bb 198>;
  else
    goto <bb 467>;

  <bb 198>:
  _1475 = s_62(D)->p;
  _1476 = (unsigned int) _1472;
  # DEBUG x => _1476
  __asm__("bswap %0" : "=r" x_1477 : "0" _1476);
  # DEBUG x => x_1477
  # DEBUG x => NULL
  MEM[(uint32_t *)_1475] = x_1477;
  _1478 = _1475 + 4;
  s_62(D)->p = _1478;
  s_62(D)->i_left = 64;
  goto <bb 201>;

  <bb 199>:
  # DEBUG s => s_62(D)
  # DEBUG val => D#41
  _301 = (int) _300;
  _309 = _301 + 1;
  _1452 = (unsigned int) _309;
  _1453 = x264_ue_size_tab[_309];
  _1454 = (int) _1453;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1454
  # DEBUG i_bits => _1452
  _1455 = s_62(D)->cur_bits;
  _1456 = _1455 << _1454;
  _1457 = (long int) _1452;
  _1458 = _1456 | _1457;
  s_62(D)->cur_bits = _1458;
  _1459 = s_62(D)->i_left;
  _1460 = _1459 - _1454;
  s_62(D)->i_left = _1460;
  if (_1460 <= 32)
    goto <bb 200>;
  else
    goto <bb 468>;

  <bb 200>:
  _1461 = s_62(D)->p;
  _1462 = _1458 << _1460;
  # DEBUG x => _1462
  __asm__("bswap %0" : "=r" x_1463 : "0" _1462);
  # DEBUG x => x_1463
  # DEBUG x => NULL
  _1464 = (unsigned int) x_1463;
  MEM[(uint32_t *)_1461] = _1464;
  _1465 = s_62(D)->i_left;
  _1466 = _1465 + 32;
  s_62(D)->i_left = _1466;
  _1467 = _1461 + 4;
  s_62(D)->p = _1467;

  <bb 201>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _305 = h_60(D)->mb.cache.ref[0][14];
  _306 = (int) _305;
  _307 = h_60(D)->mb.pic.i_fref[0];
  _308 = _307 + -1;
  # DEBUG s => s_62(D)
  # DEBUG x => _308
  # DEBUG val => _306
  if (_308 == 1)
    goto <bb 202>;
  else
    goto <bb 205>;

  <bb 202>:
  pretmp_3189 = s_62(D)->cur_bits;
  pretmp_3191 = s_62(D)->i_left;

  <bb 203>:
  # _162 = PHI <_305(202), _2572(467)>
  # prephitmp_3190 = PHI <pretmp_3189(202), _1472(467)>
  # prephitmp_3192 = PHI <pretmp_3191(202), _1474(467)>
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG s => s_62(D)
  # DEBUG x => 1
  # DEBUG val => NULL
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => NULL
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _144 = _162 ^ 1;
  _1480 = (unsigned int) _144;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1480
  _1482 = prephitmp_3190 << 1;
  _1483 = (long int) _1480;
  _1484 = _1482 | _1483;
  s_62(D)->cur_bits = _1484;
  _1486 = prephitmp_3192 + -1;
  s_62(D)->i_left = _1486;
  if (_1486 == 32)
    goto <bb 204>;
  else
    goto <bb 469>;

  <bb 204>:
  _1487 = s_62(D)->p;
  _1488 = (unsigned int) _1484;
  # DEBUG x => _1488
  __asm__("bswap %0" : "=r" x_1489 : "0" _1488);
  # DEBUG x => x_1489
  # DEBUG x => NULL
  MEM[(uint32_t *)_1487] = x_1489;
  _1490 = _1487 + 4;
  s_62(D)->p = _1490;
  s_62(D)->i_left = 64;
  goto <bb 208>;

  <bb 205>:
  # _178 = PHI <_306(201), _2337(468)>
  # _170 = PHI <_308(201), _2709(468)>
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG s => s_62(D)
  # DEBUG x => _170
  # DEBUG val => _178
  if (_170 > 1)
    goto <bb 206>;
  else
    goto <bb 216>;

  <bb 206>:
  # DEBUG s => s_62(D)
  # DEBUG val => _178
  _314 = _178 + 1;
  _1436 = (unsigned int) _314;
  _1437 = x264_ue_size_tab[_314];
  _1438 = (int) _1437;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1438
  # DEBUG i_bits => _1436
  _1439 = s_62(D)->cur_bits;
  _1440 = _1439 << _1438;
  _1441 = (long int) _1436;
  _1442 = _1440 | _1441;
  s_62(D)->cur_bits = _1442;
  _1443 = s_62(D)->i_left;
  _1444 = _1443 - _1438;
  s_62(D)->i_left = _1444;
  if (_1444 <= 32)
    goto <bb 207>;
  else
    goto <bb 470>;

  <bb 207>:
  _1445 = s_62(D)->p;
  _1446 = _1442 << _1444;
  # DEBUG x => _1446
  __asm__("bswap %0" : "=r" x_1447 : "0" _1446);
  # DEBUG x => x_1447
  # DEBUG x => NULL
  _1448 = (unsigned int) x_1447;
  MEM[(uint32_t *)_1445] = _1448;
  _1449 = s_62(D)->i_left;
  _1450 = _1449 + 32;
  s_62(D)->i_left = _1450;
  _1451 = _1445 + 4;
  s_62(D)->p = _1451;

  <bb 208>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _310 = h_60(D)->mb.cache.ref[0][28];
  _311 = (int) _310;
  _312 = h_60(D)->mb.pic.i_fref[0];
  _313 = _312 + -1;
  # DEBUG s => s_62(D)
  # DEBUG x => _313
  # DEBUG val => _311
  if (_313 == 1)
    goto <bb 209>;
  else
    goto <bb 212>;

  <bb 209>:
  pretmp_3185 = s_62(D)->cur_bits;
  pretmp_3187 = s_62(D)->i_left;

  <bb 210>:
  # _268 = PHI <_310(209), _2336(469)>
  # prephitmp_3186 = PHI <pretmp_3185(209), _1484(469)>
  # prephitmp_3188 = PHI <pretmp_3187(209), _1486(469)>
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG s => s_62(D)
  # DEBUG x => 1
  # DEBUG val => NULL
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => NULL
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _145 = _268 ^ 1;
  _1492 = (unsigned int) _145;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1492
  _1494 = prephitmp_3186 << 1;
  _1495 = (long int) _1492;
  _1496 = _1494 | _1495;
  s_62(D)->cur_bits = _1496;
  _1498 = prephitmp_3188 + -1;
  s_62(D)->i_left = _1498;
  if (_1498 == 32)
    goto <bb 211>;
  else
    goto <bb 471>;

  <bb 211>:
  _1499 = s_62(D)->p;
  _1500 = (unsigned int) _1496;
  # DEBUG x => _1500
  __asm__("bswap %0" : "=r" x_1501 : "0" _1500);
  # DEBUG x => x_1501
  # DEBUG x => NULL
  MEM[(uint32_t *)_1499] = x_1501;
  _1502 = _1499 + 4;
  s_62(D)->p = _1502;
  s_62(D)->i_left = 64;
  goto <bb 216>;

  <bb 212>:
  if (_313 > 1)
    goto <bb 213>;
  else
    goto <bb 195>;

  <bb 213>:
  pretmp_3181 = s_62(D)->cur_bits;
  pretmp_3183 = s_62(D)->i_left;

  <bb 214>:
  # _1196 = PHI <_311(213), _1959(470)>
  # prephitmp_3182 = PHI <pretmp_3181(213), _1442(470)>
  # prephitmp_3184 = PHI <pretmp_3183(213), _1444(470)>
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG s => s_62(D)
  # DEBUG x => NULL
  # DEBUG val => _1196
  # DEBUG s => s_62(D)
  # DEBUG val => _1196
  _319 = _1196 + 1;
  _1420 = (unsigned int) _319;
  _1421 = x264_ue_size_tab[_319];
  _1422 = (int) _1421;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1422
  # DEBUG i_bits => _1420
  _1424 = prephitmp_3182 << _1422;
  _1425 = (long int) _1420;
  _1426 = _1424 | _1425;
  s_62(D)->cur_bits = _1426;
  _1428 = prephitmp_3184 - _1422;
  s_62(D)->i_left = _1428;
  if (_1428 <= 32)
    goto <bb 215>;
  else
    goto <bb 472>;

  <bb 215>:
  _1429 = s_62(D)->p;
  _1430 = _1426 << _1428;
  # DEBUG x => _1430
  __asm__("bswap %0" : "=r" x_1431 : "0" _1430);
  # DEBUG x => x_1431
  # DEBUG x => NULL
  _1432 = (unsigned int) x_1431;
  MEM[(uint32_t *)_1429] = _1432;
  _1433 = s_62(D)->i_left;
  _1434 = _1433 + 32;
  s_62(D)->i_left = _1434;
  _1435 = _1429 + 4;
  s_62(D)->p = _1435;

  <bb 216>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _315 = h_60(D)->mb.cache.ref[0][30];
  _317 = h_60(D)->mb.pic.i_fref[0];
  _318 = _317 + -1;
  # DEBUG s => s_62(D)
  # DEBUG x => _318
  # DEBUG val => (int) _315
  if (_318 == 1)
    goto <bb 217>;
  else
    goto <bb 221>;

  <bb 217>:
  pretmp_3177 = s_62(D)->cur_bits;
  pretmp_3179 = s_62(D)->i_left;

  <bb 218>:
  # _1344 = PHI <_315(217), _532(471)>
  # prephitmp_3178 = PHI <pretmp_3177(217), _1496(471)>
  # prephitmp_3180 = PHI <pretmp_3179(217), _1498(471)>
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG s => s_62(D)
  # DEBUG x => 1
  # DEBUG val => NULL
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => NULL
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _146 = _1344 ^ 1;
  _1504 = (unsigned int) _146;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1504
  _1506 = prephitmp_3178 << 1;
  _1507 = (long int) _1504;
  _1508 = _1506 | _1507;
  s_62(D)->cur_bits = _1508;
  _1510 = prephitmp_3180 + -1;
  s_62(D)->i_left = _1510;
  if (_1510 == 32)
    goto <bb 219>;
  else
    goto <bb 195>;

  <bb 219>:
  _1511 = s_62(D)->p;
  _1512 = (unsigned int) _1508;
  # DEBUG x => _1512
  __asm__("bswap %0" : "=r" x_1513 : "0" _1512);
  # DEBUG x => x_1513
  # DEBUG x => NULL
  MEM[(uint32_t *)_1511] = x_1513;
  _1514 = _1511 + 4;
  s_62(D)->p = _1514;
  s_62(D)->i_left = 64;

  <bb 220>:
  # DEBUG i => 0
  goto <bb 226>;

  <bb 221>:
  if (_318 > 1)
    goto <bb 222>;
  else
    goto <bb 195>;

  <bb 222>:
  _316 = (int) _315;
  pretmp_3173 = s_62(D)->cur_bits;
  pretmp_3175 = s_62(D)->i_left;

  <bb 223>:
  # _1173 = PHI <_316(222), _40(472)>
  # prephitmp_3174 = PHI <pretmp_3173(222), _1426(472)>
  # prephitmp_3176 = PHI <pretmp_3175(222), _1428(472)>
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG s => s_62(D)
  # DEBUG x => NULL
  # DEBUG val => _1173
  # DEBUG s => s_62(D)
  # DEBUG val => _1173
  _397 = _1173 + 1;
  _1404 = (unsigned int) _397;
  _1405 = x264_ue_size_tab[_397];
  _1406 = (int) _1405;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1406
  # DEBUG i_bits => _1404
  _1408 = prephitmp_3174 << _1406;
  _1409 = (long int) _1404;
  _1410 = _1408 | _1409;
  s_62(D)->cur_bits = _1410;
  _1412 = prephitmp_3176 - _1406;
  s_62(D)->i_left = _1412;
  if (_1412 <= 32)
    goto <bb 224>;
  else
    goto <bb 195>;

  <bb 224>:
  _1413 = s_62(D)->p;
  _1414 = _1410 << _1412;
  # DEBUG x => _1414
  __asm__("bswap %0" : "=r" x_1415 : "0" _1414);
  # DEBUG x => x_1415
  # DEBUG x => NULL
  _1416 = (unsigned int) x_1415;
  MEM[(uint32_t *)_1413] = _1416;
  _1417 = s_62(D)->i_left;
  _1418 = _1417 + 32;
  s_62(D)->i_left = _1418;
  _1419 = _1413 + 4;
  s_62(D)->p = _1419;
  goto <bb 220>;

  <bb 225>:

  <bb 226>:
  # i_2695 = PHI <i_321(225), 0(220)>
  # ivtmp_3065 = PHI <ivtmp_3064(225), 4(220)>
  # DEBUG i => i_2695
  cavlc_mb8x8_mvd (h_60(D), s_62(D), 0, i_2695);
  i_321 = i_2695 + 1;
  # DEBUG i => i_321
  # DEBUG i => i_321
  ivtmp_3064 = ivtmp_3065 - 1;
  if (ivtmp_3064 != 0)
    goto <bb 225>;
  else
    goto <bb 227>;

  <bb 227>:
  pretmp_3087 = s_62(D)->p;
  pretmp_3096 = s_62(D)->p_start;
  pretmp_3103 = (long int) pretmp_3096;
  pretmp_3109 = s_62(D)->i_left;
  goto <bb 404>;

  <bb 228>:
  if (i_mb_type_61 == 17)
    goto <bb 229>;
  else
    goto <bb 265>;

  <bb 229>:
  # DEBUG s => s_62(D)
  # DEBUG val => 22
  # DEBUG s => s_62(D)
  # DEBUG i_count => 9
  # DEBUG i_bits => 23
  _774 = s_62(D)->cur_bits;
  _775 = _774 << 9;
  _776 = _775 | 23;
  s_62(D)->cur_bits = _776;
  _778 = prephitmp_3085 + -9;
  s_62(D)->i_left = _778;
  if (_778 <= 32)
    goto <bb 230>;
  else
    goto <bb 231>;

  <bb 230>:
  _779 = s_62(D)->p;
  _780 = _776 << _778;
  # DEBUG x => _780
  __asm__("bswap %0" : "=r" x_781 : "0" _780);
  # DEBUG x => x_781
  # DEBUG x => NULL
  _782 = (unsigned int) x_781;
  MEM[(uint32_t *)_779] = _782;
  _783 = s_62(D)->i_left;
  _784 = _783 + 32;
  s_62(D)->i_left = _784;
  _785 = _779 + 4;
  s_62(D)->p = _785;

  <bb 231>:
  # prephitmp_3160 = PHI <_784(230), _778(229)>
  # DEBUG i => 0

  <bb 232>:
  # i_2490 = PHI <i_259(235), 0(231)>
  # prephitmp_3162 = PHI <_792(235), _776(231)>
  # prephitmp_3164 = PHI <pretmp_3163(235), prephitmp_3160(231)>
  # ivtmp_3061 = PHI <ivtmp_3063(235), 4(231)>
  # DEBUG i => i_2490
  _255 = h_60(D)->mb.i_sub_partition[i_2490];
  _256 = sub_mb_type_b_to_golomb[_255];
  _257 = (int) _256;
  # DEBUG s => s_62(D)
  # DEBUG val => _257
  _254 = _257 + 1;
  _787 = x264_ue_size_tab[_254];
  _788 = (int) _787;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _788
  # DEBUG i_bits => (unsigned int) _254
  _790 = prephitmp_3162 << _788;
  _791 = (long int) _254;
  _792 = _790 | _791;
  _794 = prephitmp_3164 - _788;
  s_62(D)->i_left = _794;
  if (_794 <= 32)
    goto <bb 233>;
  else
    goto <bb 234>;

  <bb 233>:
  _795 = s_62(D)->p;
  _796 = _792 << _794;
  # DEBUG x => _796
  __asm__("bswap %0" : "=r" x_797 : "0" _796);
  # DEBUG x => x_797
  # DEBUG x => NULL
  _798 = (unsigned int) x_797;
  MEM[(uint32_t *)_795] = _798;
  _799 = s_62(D)->i_left;
  _800 = _799 + 32;
  s_62(D)->i_left = _800;
  _801 = _795 + 4;
  s_62(D)->p = _801;

  <bb 234>:
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  i_259 = i_2490 + 1;
  # DEBUG i => i_259
  # DEBUG i => i_259
  ivtmp_3063 = ivtmp_3061 - 1;
  if (ivtmp_3063 != 0)
    goto <bb 235>;
  else
    goto <bb 236>;

  <bb 235>:
  pretmp_3163 = s_62(D)->i_left;
  goto <bb 232>;

  <bb 236>:
  # s__cur_bits_lsm.85_3036 = PHI <_792(234)>
  s_62(D)->cur_bits = s__cur_bits_lsm.85_3036;

  <bb 237>:
  # i_2489 = PHI <0(236), i_269(246)>
  # ivtmp_3057 = PHI <4(236), ivtmp_3059(246)>
  # DEBUG i => i_2489
  _260 = h_60(D)->mb.i_sub_partition[i_2489];
  _261 = x264_mb_partition_listX_table[0][_260];
  if (_261 != 0)
    goto <bb 239>;
  else
    goto <bb 238>;

  <bb 238>:
  goto <bb 245>;

  <bb 239>:
  _262 = i_2489 * 4;
  _263 = x264_scan8[_262];
  _264 = h_60(D)->mb.cache.ref[0][_263];
  # DEBUG D#40 => (int) _264
  _266 = h_60(D)->mb.pic.i_fref[0];
  _267 = _266 + -1;
  # DEBUG s => s_62(D)
  # DEBUG x => _267
  # DEBUG val => D#40
  if (_267 == 1)
    goto <bb 240>;
  else
    goto <bb 242>;

  <bb 240>:
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => D#40
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _147 = _264 ^ 1;
  _1532 = (unsigned int) _147;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1532
  _1533 = s_62(D)->cur_bits;
  _1534 = _1533 << 1;
  _1535 = (long int) _1532;
  _1536 = _1534 | _1535;
  s_62(D)->cur_bits = _1536;
  _1537 = s_62(D)->i_left;
  _1538 = _1537 + -1;
  s_62(D)->i_left = _1538;
  if (_1538 == 32)
    goto <bb 241>;
  else
    goto <bb 238>;

  <bb 241>:
  _1539 = s_62(D)->p;
  _1540 = (unsigned int) _1536;
  # DEBUG x => _1540
  __asm__("bswap %0" : "=r" x_1541 : "0" _1540);
  # DEBUG x => x_1541
  # DEBUG x => NULL
  MEM[(uint32_t *)_1539] = x_1541;
  _1542 = _1539 + 4;
  s_62(D)->p = _1542;
  s_62(D)->i_left = 64;
  goto <bb 245>;

  <bb 242>:
  if (_267 > 1)
    goto <bb 243>;
  else
    goto <bb 238>;

  <bb 243>:
  # DEBUG s => s_62(D)
  # DEBUG val => D#40
  _265 = (int) _264;
  _1515 = _265 + 1;
  _1516 = (unsigned int) _1515;
  _1517 = x264_ue_size_tab[_1515];
  _1518 = (int) _1517;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1518
  # DEBUG i_bits => _1516
  _1519 = s_62(D)->cur_bits;
  _1520 = _1519 << _1518;
  _1521 = (long int) _1516;
  _1522 = _1520 | _1521;
  s_62(D)->cur_bits = _1522;
  _1523 = s_62(D)->i_left;
  _1524 = _1523 - _1518;
  s_62(D)->i_left = _1524;
  if (_1524 <= 32)
    goto <bb 244>;
  else
    goto <bb 238>;

  <bb 244>:
  _1525 = s_62(D)->p;
  _1526 = _1522 << _1524;
  # DEBUG x => _1526
  __asm__("bswap %0" : "=r" x_1527 : "0" _1526);
  # DEBUG x => x_1527
  # DEBUG x => NULL
  _1528 = (unsigned int) x_1527;
  MEM[(uint32_t *)_1525] = _1528;
  _1529 = s_62(D)->i_left;
  _1530 = _1529 + 32;
  s_62(D)->i_left = _1530;
  _1531 = _1525 + 4;
  s_62(D)->p = _1531;

  <bb 245>:
  i_269 = i_2489 + 1;
  # DEBUG i => i_269
  # DEBUG i => i_269
  ivtmp_3059 = ivtmp_3057 - 1;
  if (ivtmp_3059 != 0)
    goto <bb 246>;
  else
    goto <bb 247>;

  <bb 246>:
  goto <bb 237>;

  <bb 247>:

  <bb 248>:
  # i_2701 = PHI <0(247), i_279(257)>
  # ivtmp_3039 = PHI <4(247), ivtmp_3037(257)>
  # DEBUG i => i_2701
  _270 = h_60(D)->mb.i_sub_partition[i_2701];
  _271 = x264_mb_partition_listX_table[1][_270];
  if (_271 != 0)
    goto <bb 250>;
  else
    goto <bb 249>;

  <bb 249>:
  goto <bb 256>;

  <bb 250>:
  _272 = i_2701 * 4;
  _273 = x264_scan8[_272];
  _274 = h_60(D)->mb.cache.ref[1][_273];
  # DEBUG D#39 => (int) _274
  _276 = h_60(D)->mb.pic.i_fref[1];
  _277 = _276 + -1;
  # DEBUG s => s_62(D)
  # DEBUG x => _277
  # DEBUG val => D#39
  if (_277 == 1)
    goto <bb 251>;
  else
    goto <bb 253>;

  <bb 251>:
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => D#39
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _148 = _274 ^ 1;
  _1560 = (unsigned int) _148;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1560
  _1561 = s_62(D)->cur_bits;
  _1562 = _1561 << 1;
  _1563 = (long int) _1560;
  _1564 = _1562 | _1563;
  s_62(D)->cur_bits = _1564;
  _1565 = s_62(D)->i_left;
  _1566 = _1565 + -1;
  s_62(D)->i_left = _1566;
  if (_1566 == 32)
    goto <bb 252>;
  else
    goto <bb 249>;

  <bb 252>:
  _1567 = s_62(D)->p;
  _1568 = (unsigned int) _1564;
  # DEBUG x => _1568
  __asm__("bswap %0" : "=r" x_1569 : "0" _1568);
  # DEBUG x => x_1569
  # DEBUG x => NULL
  MEM[(uint32_t *)_1567] = x_1569;
  _1570 = _1567 + 4;
  s_62(D)->p = _1570;
  s_62(D)->i_left = 64;
  goto <bb 256>;

  <bb 253>:
  if (_277 > 1)
    goto <bb 254>;
  else
    goto <bb 249>;

  <bb 254>:
  # DEBUG s => s_62(D)
  # DEBUG val => D#39
  _275 = (int) _274;
  _1543 = _275 + 1;
  _1544 = (unsigned int) _1543;
  _1545 = x264_ue_size_tab[_1543];
  _1546 = (int) _1545;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1546
  # DEBUG i_bits => _1544
  _1547 = s_62(D)->cur_bits;
  _1548 = _1547 << _1546;
  _1549 = (long int) _1544;
  _1550 = _1548 | _1549;
  s_62(D)->cur_bits = _1550;
  _1551 = s_62(D)->i_left;
  _1552 = _1551 - _1546;
  s_62(D)->i_left = _1552;
  if (_1552 <= 32)
    goto <bb 255>;
  else
    goto <bb 249>;

  <bb 255>:
  _1553 = s_62(D)->p;
  _1554 = _1550 << _1552;
  # DEBUG x => _1554
  __asm__("bswap %0" : "=r" x_1555 : "0" _1554);
  # DEBUG x => x_1555
  # DEBUG x => NULL
  _1556 = (unsigned int) x_1555;
  MEM[(uint32_t *)_1553] = _1556;
  _1557 = s_62(D)->i_left;
  _1558 = _1557 + 32;
  s_62(D)->i_left = _1558;
  _1559 = _1553 + 4;
  s_62(D)->p = _1559;

  <bb 256>:
  i_279 = i_2701 + 1;
  # DEBUG i => i_279
  # DEBUG i => i_279
  ivtmp_3037 = ivtmp_3039 - 1;
  if (ivtmp_3037 != 0)
    goto <bb 257>;
  else
    goto <bb 258>;

  <bb 257>:
  goto <bb 248>;

  <bb 258>:

  <bb 259>:
  # i_2457 = PHI <0(258), i_281(260)>
  # ivtmp_3041 = PHI <4(258), ivtmp_3040(260)>
  # DEBUG i => i_2457
  cavlc_mb8x8_mvd (h_60(D), s_62(D), 0, i_2457);
  i_281 = i_2457 + 1;
  # DEBUG i => i_281
  # DEBUG i => i_281
  ivtmp_3040 = ivtmp_3041 - 1;
  if (ivtmp_3040 != 0)
    goto <bb 260>;
  else
    goto <bb 261>;

  <bb 260>:
  goto <bb 259>;

  <bb 261>:

  <bb 262>:
  # i_2700 = PHI <0(261), i_283(263)>
  # ivtmp_3044 = PHI <4(261), ivtmp_3035(263)>
  # DEBUG i => i_2700
  cavlc_mb8x8_mvd (h_60(D), s_62(D), 1, i_2700);
  i_283 = i_2700 + 1;
  # DEBUG i => i_283
  # DEBUG i => i_283
  ivtmp_3035 = ivtmp_3044 - 1;
  if (ivtmp_3035 != 0)
    goto <bb 263>;
  else
    goto <bb 264>;

  <bb 263>:
  goto <bb 262>;

  <bb 264>:
  pretmp_3088 = s_62(D)->p;
  pretmp_3097 = s_62(D)->p_start;
  pretmp_3104 = (long int) pretmp_3097;
  pretmp_3110 = s_62(D)->i_left;
  goto <bb 404>;

  <bb 265>:
  if (i_mb_type_61 != 7)
    goto <bb 266>;
  else
    goto <bb 401>;

  <bb 266>:
  # DEBUG i => 0
  _2296 = x264_mb_type_list0_table[i_mb_type_61][0];
  _2297 = (int) _2296;
  b_list[0][0] = _2297;
  _2299 = x264_mb_type_list1_table[i_mb_type_61][0];
  _2300 = (int) _2299;
  b_list[1][0] = _2300;
  # DEBUG i => 1
  # DEBUG i => 1
  _2305 = x264_mb_type_list0_table[i_mb_type_61][1];
  _2306 = (int) _2305;
  b_list[0][1] = _2306;
  _2308 = x264_mb_type_list1_table[i_mb_type_61][1];
  _2309 = (int) _2308;
  b_list[1][1] = _2309;
  # DEBUG i => 2
  # DEBUG i => 2
  _149 = h_60(D)->mb.i_partition;
  _150 = _149 + -14;
  _151 = i_mb_type_61 + -8;
  _152 = mb_type_b_to_golomb[_150][_151];
  _153 = (int) _152;
  # DEBUG s => s_62(D)
  # DEBUG val => _153
  _258 = _153 + 1;
  _803 = x264_ue_size_tab[_258];
  _804 = (int) _803;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _804
  # DEBUG i_bits => (unsigned int) _258
  _805 = s_62(D)->cur_bits;
  _806 = _805 << _804;
  _807 = (long int) _258;
  _808 = _806 | _807;
  s_62(D)->cur_bits = _808;
  _810 = prephitmp_3085 - _804;
  s_62(D)->i_left = _810;
  if (_810 <= 32)
    goto <bb 267>;
  else
    goto <bb 268>;

  <bb 267>:
  _811 = s_62(D)->p;
  _812 = _808 << _810;
  # DEBUG x => _812
  __asm__("bswap %0" : "=r" x_813 : "0" _812);
  # DEBUG x => x_813
  # DEBUG x => NULL
  _814 = (unsigned int) x_813;
  MEM[(uint32_t *)_811] = _814;
  _815 = s_62(D)->i_left;
  _816 = _815 + 32;
  s_62(D)->i_left = _816;
  _817 = _811 + 4;
  s_62(D)->p = _817;

  <bb 268>:
  # DEBUG i_list => 0
  pretmp_3294 = h_60(D)->mb.i_partition;
  goto <bb 270>;

  <bb 269>:
  # i_list_303 = PHI <i_list_179(317), i_list_1987(473)>
  # prephitmp_3293 = PHI <prephitmp_3151(317), prephitmp_3295(473)>

  <bb 270>:
  # i_list_2699 = PHI <i_list_303(269), 0(268)>
  # prephitmp_3295 = PHI <prephitmp_3293(269), pretmp_3294(268)>
  # DEBUG i_list => i_list_2699
  if (i_list_2699 == 0)
    goto <bb 271>;
  else
    goto <bb 272>;

  <bb 271>:
  # DEBUG i_list => 0
  _154 = h_60(D)->mb.pic.i_fref[0];
  iftmp.3_155 = _154 + -1;
  # DEBUG i_ref_max => iftmp.3_155
  if (iftmp.3_155 != 0)
    goto <bb 273>;
  else
    goto <bb 473>;

  <bb 272>:
  _156 = h_60(D)->mb.pic.i_fref[1];
  iftmp.3_157 = _156 + -1;
  # DEBUG i_ref_max => iftmp.3_157
  if (iftmp.3_157 != 0)
    goto <bb 273>;
  else
    goto <bb 317> (<L113>);

  <bb 273>:
  # iftmp.3_1151 = PHI <iftmp.3_157(272), iftmp.3_155(271)>
  switch (prephitmp_3295) <default: <L113>, case 14: <L103>, case 15: <L108>, case 16: <L100>>

<L100>:
  _159 = b_list[i_list_2699][0];
  if (_159 != 0)
    goto <bb 275>;
  else
    goto <bb 317> (<L113>);

  <bb 275>:
  _160 = h_60(D)->mb.cache.ref[i_list_2699][12];
  # DEBUG D#38 => (int) _160
  # DEBUG s => s_62(D)
  # DEBUG x => iftmp.3_1151
  # DEBUG val => D#38
  if (iftmp.3_1151 == 1)
    goto <bb 276>;
  else
    goto <bb 279>;

  <bb 276>:
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => D#38
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _2312 = _160 ^ 1;
  _1588 = (unsigned int) _2312;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1588
  _1589 = s_62(D)->cur_bits;
  _1590 = _1589 << 1;
  _1591 = (long int) _1588;
  _1592 = _1590 | _1591;
  s_62(D)->cur_bits = _1592;
  _1593 = s_62(D)->i_left;
  _1594 = _1593 + -1;
  s_62(D)->i_left = _1594;
  if (_1594 == 32)
    goto <bb 278>;
  else
    goto <bb 277>;

  <bb 277>:
  pretmp_3138 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 278>:
  _1595 = s_62(D)->p;
  _1596 = (unsigned int) _1592;
  # DEBUG x => _1596
  __asm__("bswap %0" : "=r" x_1597 : "0" _1596);
  # DEBUG x => x_1597
  # DEBUG x => NULL
  MEM[(uint32_t *)_1595] = x_1597;
  _1598 = _1595 + 4;
  s_62(D)->p = _1598;
  s_62(D)->i_left = 64;
  pretmp_3135 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 279>:
  if (iftmp.3_1151 > 1)
    goto <bb 280>;
  else
    goto <bb 317> (<L113>);

  <bb 280>:
  # DEBUG s => s_62(D)
  # DEBUG val => D#38
  _161 = (int) _160;
  _1571 = _161 + 1;
  _1572 = (unsigned int) _1571;
  _1573 = x264_ue_size_tab[_1571];
  _1574 = (int) _1573;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1574
  # DEBUG i_bits => _1572
  _1575 = s_62(D)->cur_bits;
  _1576 = _1575 << _1574;
  _1577 = (long int) _1572;
  _1578 = _1576 | _1577;
  s_62(D)->cur_bits = _1578;
  _1579 = s_62(D)->i_left;
  _1580 = _1579 - _1574;
  s_62(D)->i_left = _1580;
  if (_1580 <= 32)
    goto <bb 282>;
  else
    goto <bb 281>;

  <bb 281>:
  pretmp_3137 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 282>:
  _1581 = s_62(D)->p;
  _1582 = _1578 << _1580;
  # DEBUG x => _1582
  __asm__("bswap %0" : "=r" x_1583 : "0" _1582);
  # DEBUG x => x_1583
  # DEBUG x => NULL
  _1584 = (unsigned int) x_1583;
  MEM[(uint32_t *)_1581] = _1584;
  _1585 = s_62(D)->i_left;
  _1586 = _1585 + 32;
  s_62(D)->i_left = _1586;
  _1587 = _1581 + 4;
  s_62(D)->p = _1587;
  pretmp_3136 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

<L103>:
  _163 = b_list[i_list_2699][0];
  if (_163 != 0)
    goto <bb 284>;
  else
    goto <bb 290>;

  <bb 284>:
  _164 = h_60(D)->mb.cache.ref[i_list_2699][12];
  # DEBUG D#37 => (int) _164
  # DEBUG s => s_62(D)
  # DEBUG x => iftmp.3_1151
  # DEBUG val => D#37
  if (iftmp.3_1151 == 1)
    goto <bb 285>;
  else
    goto <bb 287>;

  <bb 285>:
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => D#37
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _2295 = _164 ^ 1;
  _1616 = (unsigned int) _2295;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1616
  _1617 = s_62(D)->cur_bits;
  _1618 = _1617 << 1;
  _1619 = (long int) _1616;
  _1620 = _1618 | _1619;
  s_62(D)->cur_bits = _1620;
  _1621 = s_62(D)->i_left;
  _1622 = _1621 + -1;
  s_62(D)->i_left = _1622;
  if (_1622 == 32)
    goto <bb 286>;
  else
    goto <bb 475>;

  <bb 286>:
  _1623 = s_62(D)->p;
  _1624 = (unsigned int) _1620;
  # DEBUG x => _1624
  __asm__("bswap %0" : "=r" x_1625 : "0" _1624);
  # DEBUG x => x_1625
  # DEBUG x => NULL
  MEM[(uint32_t *)_1623] = x_1625;
  _1626 = _1623 + 4;
  s_62(D)->p = _1626;
  s_62(D)->i_left = 64;
  goto <bb 475>;

  <bb 287>:
  if (iftmp.3_1151 > 1)
    goto <bb 288>;
  else
    goto <bb 317> (<L113>);

  <bb 288>:
  # DEBUG s => s_62(D)
  # DEBUG val => D#37
  _165 = (int) _164;
  _1599 = _165 + 1;
  _1600 = (unsigned int) _1599;
  _1601 = x264_ue_size_tab[_1599];
  _1602 = (int) _1601;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1602
  # DEBUG i_bits => _1600
  _1603 = s_62(D)->cur_bits;
  _1604 = _1603 << _1602;
  _1605 = (long int) _1600;
  _1606 = _1604 | _1605;
  s_62(D)->cur_bits = _1606;
  _1607 = s_62(D)->i_left;
  _1608 = _1607 - _1602;
  s_62(D)->i_left = _1608;
  if (_1608 <= 32)
    goto <bb 289>;
  else
    goto <bb 478>;

  <bb 289>:
  _1609 = s_62(D)->p;
  _1610 = _1606 << _1608;
  # DEBUG x => _1610
  __asm__("bswap %0" : "=r" x_1611 : "0" _1610);
  # DEBUG x => x_1611
  # DEBUG x => NULL
  _1612 = (unsigned int) x_1611;
  MEM[(uint32_t *)_1609] = _1612;
  _1613 = s_62(D)->i_left;
  _1614 = _1613 + 32;
  s_62(D)->i_left = _1614;
  _1615 = _1609 + 4;
  s_62(D)->p = _1615;
  goto <bb 478>;

  <bb 290>:
  _167 = b_list[i_list_2699][1];
  if (_167 != 0)
    goto <bb 291>;
  else
    goto <bb 317> (<L113>);

  <bb 291>:
  _168 = h_60(D)->mb.cache.ref[i_list_2699][28];
  # DEBUG s => s_62(D)
  # DEBUG x => iftmp.3_1151
  # DEBUG val => (int) _168
  if (iftmp.3_1151 == 1)
    goto <bb 292>;
  else
    goto <bb 295>;

  <bb 292>:
  # _1219 = PHI <_168(291), _37(474)>
  # DEBUG s => s_62(D)
  # DEBUG x => 1
  # DEBUG val => NULL
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => NULL
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _2313 = _1219 ^ 1;
  _1644 = (unsigned int) _2313;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1644
  _1645 = s_62(D)->cur_bits;
  _1646 = _1645 << 1;
  _1647 = (long int) _1644;
  _1648 = _1646 | _1647;
  s_62(D)->cur_bits = _1648;
  _1649 = s_62(D)->i_left;
  _1650 = _1649 + -1;
  s_62(D)->i_left = _1650;
  if (_1650 == 32)
    goto <bb 294>;
  else
    goto <bb 293>;

  <bb 293>:
  pretmp_3142 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 294>:
  _1651 = s_62(D)->p;
  _1652 = (unsigned int) _1648;
  # DEBUG x => _1652
  __asm__("bswap %0" : "=r" x_1653 : "0" _1652);
  # DEBUG x => x_1653
  # DEBUG x => NULL
  MEM[(uint32_t *)_1651] = x_1653;
  _1654 = _1651 + 4;
  s_62(D)->p = _1654;
  s_62(D)->i_left = 64;
  pretmp_3139 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 295>:
  if (iftmp.3_1151 > 1)
    goto <bb 296>;
  else
    goto <bb 317> (<L113>);

  <bb 296>:
  _169 = (int) _168;
  pretmp_3132 = s_62(D)->cur_bits;

  <bb 297>:
  # _1367 = PHI <_169(296), _34(477)>
  # prephitmp_3133 = PHI <pretmp_3132(296), _1606(477)>
  # DEBUG s => s_62(D)
  # DEBUG x => iftmp.3_1151
  # DEBUG val => _1367
  # DEBUG s => s_62(D)
  # DEBUG val => _1367
  _1627 = _1367 + 1;
  _1628 = (unsigned int) _1627;
  _1629 = x264_ue_size_tab[_1627];
  _1630 = (int) _1629;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1630
  # DEBUG i_bits => _1628
  _1632 = prephitmp_3133 << _1630;
  _1633 = (long int) _1628;
  _1634 = _1632 | _1633;
  s_62(D)->cur_bits = _1634;
  _1635 = s_62(D)->i_left;
  _1636 = _1635 - _1630;
  s_62(D)->i_left = _1636;
  if (_1636 <= 32)
    goto <bb 299>;
  else
    goto <bb 298>;

  <bb 298>:
  pretmp_3141 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 299>:
  _1637 = s_62(D)->p;
  _1638 = _1634 << _1636;
  # DEBUG x => _1638
  __asm__("bswap %0" : "=r" x_1639 : "0" _1638);
  # DEBUG x => x_1639
  # DEBUG x => NULL
  _1640 = (unsigned int) x_1639;
  MEM[(uint32_t *)_1637] = _1640;
  _1641 = s_62(D)->i_left;
  _1642 = _1641 + 32;
  s_62(D)->i_left = _1642;
  _1643 = _1637 + 4;
  s_62(D)->p = _1643;
  pretmp_3140 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

<L108>:
  _171 = b_list[i_list_2699][0];
  if (_171 != 0)
    goto <bb 301>;
  else
    goto <bb 307>;

  <bb 301>:
  _172 = h_60(D)->mb.cache.ref[i_list_2699][12];
  # DEBUG D#36 => (int) _172
  # DEBUG s => s_62(D)
  # DEBUG x => iftmp.3_1151
  # DEBUG val => D#36
  if (iftmp.3_1151 == 1)
    goto <bb 302>;
  else
    goto <bb 304>;

  <bb 302>:
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => D#36
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _2294 = _172 ^ 1;
  _1672 = (unsigned int) _2294;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1672
  _1673 = s_62(D)->cur_bits;
  _1674 = _1673 << 1;
  _1675 = (long int) _1672;
  _1676 = _1674 | _1675;
  s_62(D)->cur_bits = _1676;
  _1677 = s_62(D)->i_left;
  _1678 = _1677 + -1;
  s_62(D)->i_left = _1678;
  if (_1678 == 32)
    goto <bb 303>;
  else
    goto <bb 481>;

  <bb 303>:
  _1679 = s_62(D)->p;
  _1680 = (unsigned int) _1676;
  # DEBUG x => _1680
  __asm__("bswap %0" : "=r" x_1681 : "0" _1680);
  # DEBUG x => x_1681
  # DEBUG x => NULL
  MEM[(uint32_t *)_1679] = x_1681;
  _1682 = _1679 + 4;
  s_62(D)->p = _1682;
  s_62(D)->i_left = 64;
  goto <bb 481>;

  <bb 304>:
  if (iftmp.3_1151 > 1)
    goto <bb 305>;
  else
    goto <bb 317> (<L113>);

  <bb 305>:
  # DEBUG s => s_62(D)
  # DEBUG val => D#36
  _173 = (int) _172;
  _1655 = _173 + 1;
  _1656 = (unsigned int) _1655;
  _1657 = x264_ue_size_tab[_1655];
  _1658 = (int) _1657;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1658
  # DEBUG i_bits => _1656
  _1659 = s_62(D)->cur_bits;
  _1660 = _1659 << _1658;
  _1661 = (long int) _1656;
  _1662 = _1660 | _1661;
  s_62(D)->cur_bits = _1662;
  _1663 = s_62(D)->i_left;
  _1664 = _1663 - _1658;
  s_62(D)->i_left = _1664;
  if (_1664 <= 32)
    goto <bb 306>;
  else
    goto <bb 484>;

  <bb 306>:
  _1665 = s_62(D)->p;
  _1666 = _1662 << _1664;
  # DEBUG x => _1666
  __asm__("bswap %0" : "=r" x_1667 : "0" _1666);
  # DEBUG x => x_1667
  # DEBUG x => NULL
  _1668 = (unsigned int) x_1667;
  MEM[(uint32_t *)_1665] = _1668;
  _1669 = s_62(D)->i_left;
  _1670 = _1669 + 32;
  s_62(D)->i_left = _1670;
  _1671 = _1665 + 4;
  s_62(D)->p = _1671;
  goto <bb 484>;

  <bb 307>:
  _175 = b_list[i_list_2699][1];
  if (_175 != 0)
    goto <bb 308>;
  else
    goto <bb 317> (<L113>);

  <bb 308>:
  _176 = h_60(D)->mb.cache.ref[i_list_2699][14];
  # DEBUG s => s_62(D)
  # DEBUG x => iftmp.3_1151
  # DEBUG val => (int) _176
  if (iftmp.3_1151 == 1)
    goto <bb 309>;
  else
    goto <bb 312>;

  <bb 309>:
  # _174 = PHI <_176(308), _23(480)>
  # DEBUG s => s_62(D)
  # DEBUG x => 1
  # DEBUG val => NULL
  # DEBUG D#1 => 1
  # DEBUG s => s_62(D)
  # DEBUG val => NULL
  # DEBUG D#2 => D#1
  # DEBUG x => D#2
  _2314 = _174 ^ 1;
  _1700 = (unsigned int) _2314;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _1700
  _1701 = s_62(D)->cur_bits;
  _1702 = _1701 << 1;
  _1703 = (long int) _1700;
  _1704 = _1702 | _1703;
  s_62(D)->cur_bits = _1704;
  _1705 = s_62(D)->i_left;
  _1706 = _1705 + -1;
  s_62(D)->i_left = _1706;
  if (_1706 == 32)
    goto <bb 311>;
  else
    goto <bb 310>;

  <bb 310>:
  pretmp_3146 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 311>:
  _1707 = s_62(D)->p;
  _1708 = (unsigned int) _1704;
  # DEBUG x => _1708
  __asm__("bswap %0" : "=r" x_1709 : "0" _1708);
  # DEBUG x => x_1709
  # DEBUG x => NULL
  MEM[(uint32_t *)_1707] = x_1709;
  _1710 = _1707 + 4;
  s_62(D)->p = _1710;
  s_62(D)->i_left = 64;
  pretmp_3143 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 312>:
  if (iftmp.3_1151 > 1)
    goto <bb 313>;
  else
    goto <bb 317> (<L113>);

  <bb 313>:
  _177 = (int) _176;
  pretmp_3130 = s_62(D)->cur_bits;

  <bb 314>:
  # _166 = PHI <_177(313), _508(483)>
  # prephitmp_3131 = PHI <pretmp_3130(313), _1662(483)>
  # DEBUG s => s_62(D)
  # DEBUG x => iftmp.3_1151
  # DEBUG val => _166
  # DEBUG s => s_62(D)
  # DEBUG val => _166
  _1683 = _166 + 1;
  _1684 = (unsigned int) _1683;
  _1685 = x264_ue_size_tab[_1683];
  _1686 = (int) _1685;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _1686
  # DEBUG i_bits => _1684
  _1688 = prephitmp_3131 << _1686;
  _1689 = (long int) _1684;
  _1690 = _1688 | _1689;
  s_62(D)->cur_bits = _1690;
  _1691 = s_62(D)->i_left;
  _1692 = _1691 - _1686;
  s_62(D)->i_left = _1692;
  if (_1692 <= 32)
    goto <bb 316>;
  else
    goto <bb 315>;

  <bb 315>:
  pretmp_3145 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 316>:
  _1693 = s_62(D)->p;
  _1694 = _1690 << _1692;
  # DEBUG x => _1694
  __asm__("bswap %0" : "=r" x_1695 : "0" _1694);
  # DEBUG x => x_1695
  # DEBUG x => NULL
  _1696 = (unsigned int) x_1695;
  MEM[(uint32_t *)_1693] = _1696;
  _1697 = s_62(D)->i_left;
  _1698 = _1697 + 32;
  s_62(D)->i_left = _1698;
  _1699 = _1693 + 4;
  s_62(D)->p = _1699;
  pretmp_3144 = h_60(D)->mb.i_partition;

  # prephitmp_3151 = PHI <prephitmp_3295(272), prephitmp_3295(273), prephitmp_3295(279), prephitmp_3295(295), prephitmp_3295(312), prephitmp_3295(274), prephitmp_3295(290), prephitmp_3295(307), pretmp_3135(278), pretmp_3136(282), pretmp_3137(281), pretmp_3138(277), pretmp_3139(294), pretmp_3140(299), pretmp_3141(298), pretmp_3142(293), pretmp_3143(311), pretmp_3144(316), pretmp_3145(315), pretmp_3146(310), pretmp_3147(476), pretmp_3148(479), prephitmp_3295(287), prephitmp_3295(304), pretmp_3149(482), pretmp_3150(485)>
<L113>:
  i_list_179 = i_list_2699 + 1;
  # DEBUG i_list => i_list_179
  # DEBUG i_list => i_list_179
  if (i_list_179 != 2)
    goto <bb 269>;
  else
    goto <bb 318>;

  <bb 318>:
  # prephitmp_3051 = PHI <prephitmp_3151(317)>

  <bb 319>:
  # i_list_2488 = PHI <0(318), i_list_251(399)>
  # prephitmp_3153 = PHI <prephitmp_3051(318), pretmp_3152(399)>
  # ivtmp_3055 = PHI <2(318), ivtmp_3053(399)>
  # DEBUG i_list => i_list_2488
  switch (prephitmp_3153) <default: <L132>, case 14: <L122>, case 15: <L127>, case 16: <L119>>

<L119>:
  _181 = b_list[i_list_2488][0];
  if (_181 != 0)
    goto <bb 322>;
  else
    goto <bb 321>;

  <bb 321>:
  goto <bb 398> (<L132>);

  <bb 322>:
  x264_mb_predict_mv (h_60(D), i_list_2488, 0, 4, &mvp);
  _183 = h_60(D)->mb.cache.mv[i_list_2488][12][0];
  _184 = (int) _183;
  _185 = mvp[0];
  _186 = (int) _185;
  _187 = _184 - _186;
  # DEBUG s => s_62(D)
  # DEBUG val => _187
  # DEBUG size => 0
  if (_187 <= 0)
    goto <bb 323>;
  else
    goto <bb 324>;

  <bb 323>:
  _194 = _187 * -2;
  val_1735 = _194 + 1;
  goto <bb 325>;

  <bb 324>:
  val_1736 = _187 * 2;

  <bb 325>:
  # val_1737 = PHI <val_1735(323), val_1736(324)>
  # DEBUG val => val_1737
  # DEBUG tmp => val_1737
  if (val_1737 > 255)
    goto <bb 326>;
  else
    goto <bb 327>;

  <bb 326>:
  # DEBUG size => 16
  val_1738 = val_1737 >> 8;
  # DEBUG tmp => val_1738

  <bb 327>:
  # size_1742 = PHI <0(325), 16(326)>
  # val_1739 = PHI <val_1737(325), val_1738(326)>
  # DEBUG tmp => val_1739
  # DEBUG size => size_1742
  _1740 = x264_ue_size_tab[val_1739];
  _1741 = (int) _1740;
  size_1743 = _1741 + size_1742;
  # DEBUG size => size_1743
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1743
  # DEBUG i_bits => (unsigned int) val_1737
  _1745 = s_62(D)->cur_bits;
  _1746 = _1745 << size_1743;
  _1747 = (long int) val_1737;
  _1748 = _1746 | _1747;
  s_62(D)->cur_bits = _1748;
  _1749 = s_62(D)->i_left;
  _1750 = _1749 - size_1743;
  s_62(D)->i_left = _1750;
  if (_1750 <= 32)
    goto <bb 328>;
  else
    goto <bb 329>;

  <bb 328>:
  _1751 = s_62(D)->p;
  _1752 = _1748 << _1750;
  # DEBUG x => _1752
  __asm__("bswap %0" : "=r" x_1753 : "0" _1752);
  # DEBUG x => x_1753
  # DEBUG x => NULL
  _1754 = (unsigned int) x_1753;
  MEM[(uint32_t *)_1751] = _1754;
  _1755 = s_62(D)->i_left;
  _1756 = _1755 + 32;
  s_62(D)->i_left = _1756;
  _1757 = _1751 + 4;
  s_62(D)->p = _1757;

  <bb 329>:
  # prephitmp_3159 = PHI <_1756(328), _1750(327)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _189 = h_60(D)->mb.cache.mv[i_list_2488][12][1];
  _190 = (int) _189;
  _191 = mvp[1];
  _192 = (int) _191;
  _193 = _190 - _192;
  # DEBUG s => s_62(D)
  # DEBUG val => _193
  # DEBUG size => 0
  if (_193 <= 0)
    goto <bb 330>;
  else
    goto <bb 331>;

  <bb 330>:
  _1711 = _193 * -2;
  val_1712 = _1711 + 1;
  goto <bb 332>;

  <bb 331>:
  val_1713 = _193 * 2;

  <bb 332>:
  # val_1714 = PHI <val_1712(330), val_1713(331)>
  # DEBUG val => val_1714
  # DEBUG tmp => val_1714
  if (val_1714 > 255)
    goto <bb 333>;
  else
    goto <bb 334>;

  <bb 333>:
  # DEBUG size => 16
  val_1715 = val_1714 >> 8;
  # DEBUG tmp => val_1715

  <bb 334>:
  # size_1719 = PHI <0(332), 16(333)>
  # val_1716 = PHI <val_1714(332), val_1715(333)>
  # DEBUG tmp => val_1716
  # DEBUG size => size_1719
  _1717 = x264_ue_size_tab[val_1716];
  _1718 = (int) _1717;
  size_1720 = _1718 + size_1719;
  # DEBUG size => size_1720
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1720
  # DEBUG i_bits => (unsigned int) val_1714
  _1723 = _1748 << size_1720;
  _1724 = (long int) val_1714;
  _1725 = _1723 | _1724;
  s_62(D)->cur_bits = _1725;
  _1727 = prephitmp_3159 - size_1720;
  s_62(D)->i_left = _1727;
  if (_1727 <= 32)
    goto <bb 335>;
  else
    goto <bb 321>;

  <bb 335>:
  _1728 = s_62(D)->p;
  _1729 = _1725 << _1727;
  # DEBUG x => _1729
  __asm__("bswap %0" : "=r" x_1730 : "0" _1729);
  # DEBUG x => x_1730
  # DEBUG x => NULL
  _1731 = (unsigned int) x_1730;
  MEM[(uint32_t *)_1728] = _1731;
  _1732 = s_62(D)->i_left;
  _1733 = _1732 + 32;
  s_62(D)->i_left = _1733;
  _1734 = _1728 + 4;
  s_62(D)->p = _1734;
  goto <bb 398> (<L132>);

<L122>:
  _195 = b_list[i_list_2488][0];
  if (_195 != 0)
    goto <bb 338>;
  else
    goto <bb 337>;

  <bb 337>:
  goto <bb 352>;

  <bb 338>:
  x264_mb_predict_mv (h_60(D), i_list_2488, 0, 4, &mvp);
  _197 = h_60(D)->mb.cache.mv[i_list_2488][12][0];
  _198 = (int) _197;
  _199 = mvp[0];
  _200 = (int) _199;
  _201 = _198 - _200;
  # DEBUG s => s_62(D)
  # DEBUG val => _201
  # DEBUG size => 0
  if (_201 <= 0)
    goto <bb 339>;
  else
    goto <bb 340>;

  <bb 339>:
  _208 = _201 * -2;
  val_1781 = _208 + 1;
  goto <bb 341>;

  <bb 340>:
  val_1782 = _201 * 2;

  <bb 341>:
  # val_1783 = PHI <val_1781(339), val_1782(340)>
  # DEBUG val => val_1783
  # DEBUG tmp => val_1783
  if (val_1783 > 255)
    goto <bb 342>;
  else
    goto <bb 343>;

  <bb 342>:
  # DEBUG size => 16
  val_1784 = val_1783 >> 8;
  # DEBUG tmp => val_1784

  <bb 343>:
  # size_1788 = PHI <0(341), 16(342)>
  # val_1785 = PHI <val_1783(341), val_1784(342)>
  # DEBUG tmp => val_1785
  # DEBUG size => size_1788
  _1786 = x264_ue_size_tab[val_1785];
  _1787 = (int) _1786;
  size_1789 = _1787 + size_1788;
  # DEBUG size => size_1789
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1789
  # DEBUG i_bits => (unsigned int) val_1783
  _1791 = s_62(D)->cur_bits;
  _1792 = _1791 << size_1789;
  _1793 = (long int) val_1783;
  _1794 = _1792 | _1793;
  s_62(D)->cur_bits = _1794;
  _1795 = s_62(D)->i_left;
  _1796 = _1795 - size_1789;
  s_62(D)->i_left = _1796;
  if (_1796 <= 32)
    goto <bb 344>;
  else
    goto <bb 345>;

  <bb 344>:
  _1797 = s_62(D)->p;
  _1798 = _1794 << _1796;
  # DEBUG x => _1798
  __asm__("bswap %0" : "=r" x_1799 : "0" _1798);
  # DEBUG x => x_1799
  # DEBUG x => NULL
  _1800 = (unsigned int) x_1799;
  MEM[(uint32_t *)_1797] = _1800;
  _1801 = s_62(D)->i_left;
  _1802 = _1801 + 32;
  s_62(D)->i_left = _1802;
  _1803 = _1797 + 4;
  s_62(D)->p = _1803;

  <bb 345>:
  # prephitmp_3158 = PHI <_1802(344), _1796(343)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _203 = h_60(D)->mb.cache.mv[i_list_2488][12][1];
  _204 = (int) _203;
  _205 = mvp[1];
  _206 = (int) _205;
  _207 = _204 - _206;
  # DEBUG s => s_62(D)
  # DEBUG val => _207
  # DEBUG size => 0
  if (_207 <= 0)
    goto <bb 346>;
  else
    goto <bb 347>;

  <bb 346>:
  _188 = _207 * -2;
  val_1758 = _188 + 1;
  goto <bb 348>;

  <bb 347>:
  val_1759 = _207 * 2;

  <bb 348>:
  # val_1760 = PHI <val_1758(346), val_1759(347)>
  # DEBUG val => val_1760
  # DEBUG tmp => val_1760
  if (val_1760 > 255)
    goto <bb 349>;
  else
    goto <bb 350>;

  <bb 349>:
  # DEBUG size => 16
  val_1761 = val_1760 >> 8;
  # DEBUG tmp => val_1761

  <bb 350>:
  # size_1765 = PHI <0(348), 16(349)>
  # val_1762 = PHI <val_1760(348), val_1761(349)>
  # DEBUG tmp => val_1762
  # DEBUG size => size_1765
  _1763 = x264_ue_size_tab[val_1762];
  _1764 = (int) _1763;
  size_1766 = _1764 + size_1765;
  # DEBUG size => size_1766
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1766
  # DEBUG i_bits => (unsigned int) val_1760
  _1769 = _1794 << size_1766;
  _1770 = (long int) val_1760;
  _1771 = _1769 | _1770;
  s_62(D)->cur_bits = _1771;
  _1773 = prephitmp_3158 - size_1766;
  s_62(D)->i_left = _1773;
  if (_1773 <= 32)
    goto <bb 351>;
  else
    goto <bb 337>;

  <bb 351>:
  _1774 = s_62(D)->p;
  _1775 = _1771 << _1773;
  # DEBUG x => _1775
  __asm__("bswap %0" : "=r" x_1776 : "0" _1775);
  # DEBUG x => x_1776
  # DEBUG x => NULL
  _1777 = (unsigned int) x_1776;
  MEM[(uint32_t *)_1774] = _1777;
  _1778 = s_62(D)->i_left;
  _1779 = _1778 + 32;
  s_62(D)->i_left = _1779;
  _1780 = _1774 + 4;
  s_62(D)->p = _1780;

  <bb 352>:
  _209 = b_list[i_list_2488][1];
  if (_209 != 0)
    goto <bb 353>;
  else
    goto <bb 321>;

  <bb 353>:
  x264_mb_predict_mv (h_60(D), i_list_2488, 8, 4, &mvp);
  _211 = h_60(D)->mb.cache.mv[i_list_2488][28][0];
  _212 = (int) _211;
  _213 = mvp[0];
  _214 = (int) _213;
  _215 = _212 - _214;
  # DEBUG s => s_62(D)
  # DEBUG val => _215
  # DEBUG size => 0
  if (_215 <= 0)
    goto <bb 354>;
  else
    goto <bb 355>;

  <bb 354>:
  _222 = _215 * -2;
  val_1827 = _222 + 1;
  goto <bb 356>;

  <bb 355>:
  val_1828 = _215 * 2;

  <bb 356>:
  # val_1829 = PHI <val_1827(354), val_1828(355)>
  # DEBUG val => val_1829
  # DEBUG tmp => val_1829
  if (val_1829 > 255)
    goto <bb 357>;
  else
    goto <bb 358>;

  <bb 357>:
  # DEBUG size => 16
  val_1830 = val_1829 >> 8;
  # DEBUG tmp => val_1830

  <bb 358>:
  # size_1834 = PHI <0(356), 16(357)>
  # val_1831 = PHI <val_1829(356), val_1830(357)>
  # DEBUG tmp => val_1831
  # DEBUG size => size_1834
  _1832 = x264_ue_size_tab[val_1831];
  _1833 = (int) _1832;
  size_1835 = _1833 + size_1834;
  # DEBUG size => size_1835
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1835
  # DEBUG i_bits => (unsigned int) val_1829
  _1837 = s_62(D)->cur_bits;
  _1838 = _1837 << size_1835;
  _1839 = (long int) val_1829;
  _1840 = _1838 | _1839;
  s_62(D)->cur_bits = _1840;
  _1841 = s_62(D)->i_left;
  _1842 = _1841 - size_1835;
  s_62(D)->i_left = _1842;
  if (_1842 <= 32)
    goto <bb 359>;
  else
    goto <bb 360>;

  <bb 359>:
  _1843 = s_62(D)->p;
  _1844 = _1840 << _1842;
  # DEBUG x => _1844
  __asm__("bswap %0" : "=r" x_1845 : "0" _1844);
  # DEBUG x => x_1845
  # DEBUG x => NULL
  _1846 = (unsigned int) x_1845;
  MEM[(uint32_t *)_1843] = _1846;
  _1847 = s_62(D)->i_left;
  _1848 = _1847 + 32;
  s_62(D)->i_left = _1848;
  _1849 = _1843 + 4;
  s_62(D)->p = _1849;

  <bb 360>:
  # prephitmp_3157 = PHI <_1848(359), _1842(358)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _217 = h_60(D)->mb.cache.mv[i_list_2488][28][1];
  _218 = (int) _217;
  _219 = mvp[1];
  _220 = (int) _219;
  _221 = _218 - _220;
  # DEBUG s => s_62(D)
  # DEBUG val => _221
  # DEBUG size => 0
  if (_221 <= 0)
    goto <bb 361>;
  else
    goto <bb 362>;

  <bb 361>:
  _202 = _221 * -2;
  val_1804 = _202 + 1;
  goto <bb 363>;

  <bb 362>:
  val_1805 = _221 * 2;

  <bb 363>:
  # val_1806 = PHI <val_1804(361), val_1805(362)>
  # DEBUG val => val_1806
  # DEBUG tmp => val_1806
  if (val_1806 > 255)
    goto <bb 364>;
  else
    goto <bb 365>;

  <bb 364>:
  # DEBUG size => 16
  val_1807 = val_1806 >> 8;
  # DEBUG tmp => val_1807

  <bb 365>:
  # size_1811 = PHI <0(363), 16(364)>
  # val_1808 = PHI <val_1806(363), val_1807(364)>
  # DEBUG tmp => val_1808
  # DEBUG size => size_1811
  _1809 = x264_ue_size_tab[val_1808];
  _1810 = (int) _1809;
  size_1812 = _1810 + size_1811;
  # DEBUG size => size_1812
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1812
  # DEBUG i_bits => (unsigned int) val_1806
  _1815 = _1840 << size_1812;
  _1816 = (long int) val_1806;
  _1817 = _1815 | _1816;
  s_62(D)->cur_bits = _1817;
  _1819 = prephitmp_3157 - size_1812;
  s_62(D)->i_left = _1819;
  if (_1819 <= 32)
    goto <bb 366>;
  else
    goto <bb 321>;

  <bb 366>:
  _1820 = s_62(D)->p;
  _1821 = _1817 << _1819;
  # DEBUG x => _1821
  __asm__("bswap %0" : "=r" x_1822 : "0" _1821);
  # DEBUG x => x_1822
  # DEBUG x => NULL
  _1823 = (unsigned int) x_1822;
  MEM[(uint32_t *)_1820] = _1823;
  _1824 = s_62(D)->i_left;
  _1825 = _1824 + 32;
  s_62(D)->i_left = _1825;
  _1826 = _1820 + 4;
  s_62(D)->p = _1826;
  goto <bb 398> (<L132>);

<L127>:
  _223 = b_list[i_list_2488][0];
  if (_223 != 0)
    goto <bb 369>;
  else
    goto <bb 368>;

  <bb 368>:
  goto <bb 383>;

  <bb 369>:
  x264_mb_predict_mv (h_60(D), i_list_2488, 0, 2, &mvp);
  _225 = h_60(D)->mb.cache.mv[i_list_2488][12][0];
  _226 = (int) _225;
  _227 = mvp[0];
  _228 = (int) _227;
  _229 = _226 - _228;
  # DEBUG s => s_62(D)
  # DEBUG val => _229
  # DEBUG size => 0
  if (_229 <= 0)
    goto <bb 370>;
  else
    goto <bb 371>;

  <bb 370>:
  _236 = _229 * -2;
  val_1873 = _236 + 1;
  goto <bb 372>;

  <bb 371>:
  val_1874 = _229 * 2;

  <bb 372>:
  # val_1875 = PHI <val_1873(370), val_1874(371)>
  # DEBUG val => val_1875
  # DEBUG tmp => val_1875
  if (val_1875 > 255)
    goto <bb 373>;
  else
    goto <bb 374>;

  <bb 373>:
  # DEBUG size => 16
  val_1876 = val_1875 >> 8;
  # DEBUG tmp => val_1876

  <bb 374>:
  # size_1880 = PHI <0(372), 16(373)>
  # val_1877 = PHI <val_1875(372), val_1876(373)>
  # DEBUG tmp => val_1877
  # DEBUG size => size_1880
  _1878 = x264_ue_size_tab[val_1877];
  _1879 = (int) _1878;
  size_1881 = _1879 + size_1880;
  # DEBUG size => size_1881
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1881
  # DEBUG i_bits => (unsigned int) val_1875
  _1883 = s_62(D)->cur_bits;
  _1884 = _1883 << size_1881;
  _1885 = (long int) val_1875;
  _1886 = _1884 | _1885;
  s_62(D)->cur_bits = _1886;
  _1887 = s_62(D)->i_left;
  _1888 = _1887 - size_1881;
  s_62(D)->i_left = _1888;
  if (_1888 <= 32)
    goto <bb 375>;
  else
    goto <bb 376>;

  <bb 375>:
  _1889 = s_62(D)->p;
  _1890 = _1886 << _1888;
  # DEBUG x => _1890
  __asm__("bswap %0" : "=r" x_1891 : "0" _1890);
  # DEBUG x => x_1891
  # DEBUG x => NULL
  _1892 = (unsigned int) x_1891;
  MEM[(uint32_t *)_1889] = _1892;
  _1893 = s_62(D)->i_left;
  _1894 = _1893 + 32;
  s_62(D)->i_left = _1894;
  _1895 = _1889 + 4;
  s_62(D)->p = _1895;

  <bb 376>:
  # prephitmp_3156 = PHI <_1894(375), _1888(374)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _231 = h_60(D)->mb.cache.mv[i_list_2488][12][1];
  _232 = (int) _231;
  _233 = mvp[1];
  _234 = (int) _233;
  _235 = _232 - _234;
  # DEBUG s => s_62(D)
  # DEBUG val => _235
  # DEBUG size => 0
  if (_235 <= 0)
    goto <bb 377>;
  else
    goto <bb 378>;

  <bb 377>:
  _216 = _235 * -2;
  val_1850 = _216 + 1;
  goto <bb 379>;

  <bb 378>:
  val_1851 = _235 * 2;

  <bb 379>:
  # val_1852 = PHI <val_1850(377), val_1851(378)>
  # DEBUG val => val_1852
  # DEBUG tmp => val_1852
  if (val_1852 > 255)
    goto <bb 380>;
  else
    goto <bb 381>;

  <bb 380>:
  # DEBUG size => 16
  val_1853 = val_1852 >> 8;
  # DEBUG tmp => val_1853

  <bb 381>:
  # size_1857 = PHI <0(379), 16(380)>
  # val_1854 = PHI <val_1852(379), val_1853(380)>
  # DEBUG tmp => val_1854
  # DEBUG size => size_1857
  _1855 = x264_ue_size_tab[val_1854];
  _1856 = (int) _1855;
  size_1858 = _1856 + size_1857;
  # DEBUG size => size_1858
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1858
  # DEBUG i_bits => (unsigned int) val_1852
  _1861 = _1886 << size_1858;
  _1862 = (long int) val_1852;
  _1863 = _1861 | _1862;
  s_62(D)->cur_bits = _1863;
  _1865 = prephitmp_3156 - size_1858;
  s_62(D)->i_left = _1865;
  if (_1865 <= 32)
    goto <bb 382>;
  else
    goto <bb 368>;

  <bb 382>:
  _1866 = s_62(D)->p;
  _1867 = _1863 << _1865;
  # DEBUG x => _1867
  __asm__("bswap %0" : "=r" x_1868 : "0" _1867);
  # DEBUG x => x_1868
  # DEBUG x => NULL
  _1869 = (unsigned int) x_1868;
  MEM[(uint32_t *)_1866] = _1869;
  _1870 = s_62(D)->i_left;
  _1871 = _1870 + 32;
  s_62(D)->i_left = _1871;
  _1872 = _1866 + 4;
  s_62(D)->p = _1872;

  <bb 383>:
  _237 = b_list[i_list_2488][1];
  if (_237 != 0)
    goto <bb 384>;
  else
    goto <bb 321>;

  <bb 384>:
  x264_mb_predict_mv (h_60(D), i_list_2488, 4, 2, &mvp);
  _239 = h_60(D)->mb.cache.mv[i_list_2488][14][0];
  _240 = (int) _239;
  _241 = mvp[0];
  _242 = (int) _241;
  _243 = _240 - _242;
  # DEBUG s => s_62(D)
  # DEBUG val => _243
  # DEBUG size => 0
  if (_243 <= 0)
    goto <bb 385>;
  else
    goto <bb 386>;

  <bb 385>:
  _250 = _243 * -2;
  val_1919 = _250 + 1;
  goto <bb 387>;

  <bb 386>:
  val_1920 = _243 * 2;

  <bb 387>:
  # val_1921 = PHI <val_1919(385), val_1920(386)>
  # DEBUG val => val_1921
  # DEBUG tmp => val_1921
  if (val_1921 > 255)
    goto <bb 388>;
  else
    goto <bb 389>;

  <bb 388>:
  # DEBUG size => 16
  val_1922 = val_1921 >> 8;
  # DEBUG tmp => val_1922

  <bb 389>:
  # size_1926 = PHI <0(387), 16(388)>
  # val_1923 = PHI <val_1921(387), val_1922(388)>
  # DEBUG tmp => val_1923
  # DEBUG size => size_1926
  _1924 = x264_ue_size_tab[val_1923];
  _1925 = (int) _1924;
  size_1927 = _1925 + size_1926;
  # DEBUG size => size_1927
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1927
  # DEBUG i_bits => (unsigned int) val_1921
  _1929 = s_62(D)->cur_bits;
  _1930 = _1929 << size_1927;
  _1931 = (long int) val_1921;
  _1932 = _1930 | _1931;
  s_62(D)->cur_bits = _1932;
  _1933 = s_62(D)->i_left;
  _1934 = _1933 - size_1927;
  s_62(D)->i_left = _1934;
  if (_1934 <= 32)
    goto <bb 390>;
  else
    goto <bb 391>;

  <bb 390>:
  _1935 = s_62(D)->p;
  _1936 = _1932 << _1934;
  # DEBUG x => _1936
  __asm__("bswap %0" : "=r" x_1937 : "0" _1936);
  # DEBUG x => x_1937
  # DEBUG x => NULL
  _1938 = (unsigned int) x_1937;
  MEM[(uint32_t *)_1935] = _1938;
  _1939 = s_62(D)->i_left;
  _1940 = _1939 + 32;
  s_62(D)->i_left = _1940;
  _1941 = _1935 + 4;
  s_62(D)->p = _1941;

  <bb 391>:
  # prephitmp_3155 = PHI <_1940(390), _1934(389)>
  # DEBUG s => NULL
  # DEBUG i_count => NULL
  # DEBUG i_bits => NULL
  # DEBUG x => NULL
  # DEBUG s => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  # DEBUG size => NULL
  _245 = h_60(D)->mb.cache.mv[i_list_2488][14][1];
  _246 = (int) _245;
  _247 = mvp[1];
  _248 = (int) _247;
  _249 = _246 - _248;
  # DEBUG s => s_62(D)
  # DEBUG val => _249
  # DEBUG size => 0
  if (_249 <= 0)
    goto <bb 392>;
  else
    goto <bb 393>;

  <bb 392>:
  _230 = _249 * -2;
  val_1896 = _230 + 1;
  goto <bb 394>;

  <bb 393>:
  val_1897 = _249 * 2;

  <bb 394>:
  # val_1898 = PHI <val_1896(392), val_1897(393)>
  # DEBUG val => val_1898
  # DEBUG tmp => val_1898
  if (val_1898 > 255)
    goto <bb 395>;
  else
    goto <bb 396>;

  <bb 395>:
  # DEBUG size => 16
  val_1899 = val_1898 >> 8;
  # DEBUG tmp => val_1899

  <bb 396>:
  # size_1903 = PHI <0(394), 16(395)>
  # val_1900 = PHI <val_1898(394), val_1899(395)>
  # DEBUG tmp => val_1900
  # DEBUG size => size_1903
  _1901 = x264_ue_size_tab[val_1900];
  _1902 = (int) _1901;
  size_1904 = _1902 + size_1903;
  # DEBUG size => size_1904
  # DEBUG s => s_62(D)
  # DEBUG i_count => size_1904
  # DEBUG i_bits => (unsigned int) val_1898
  _1907 = _1932 << size_1904;
  _1908 = (long int) val_1898;
  _1909 = _1907 | _1908;
  s_62(D)->cur_bits = _1909;
  _1911 = prephitmp_3155 - size_1904;
  s_62(D)->i_left = _1911;
  if (_1911 <= 32)
    goto <bb 397>;
  else
    goto <bb 321>;

  <bb 397>:
  _1912 = s_62(D)->p;
  _1913 = _1909 << _1911;
  # DEBUG x => _1913
  __asm__("bswap %0" : "=r" x_1914 : "0" _1913);
  # DEBUG x => x_1914
  # DEBUG x => NULL
  _1915 = (unsigned int) x_1914;
  MEM[(uint32_t *)_1912] = _1915;
  _1916 = s_62(D)->i_left;
  _1917 = _1916 + 32;
  s_62(D)->i_left = _1917;
  _1918 = _1912 + 4;
  s_62(D)->p = _1918;

<L132>:
  i_list_251 = i_list_2488 + 1;
  # DEBUG i_list => i_list_251
  # DEBUG i_list => i_list_251
  ivtmp_3053 = ivtmp_3055 - 1;
  if (ivtmp_3053 != 0)
    goto <bb 399>;
  else
    goto <bb 400>;

  <bb 399>:
  pretmp_3152 = h_60(D)->mb.i_partition;
  goto <bb 319>;

  <bb 400>:
  mvp ={v} {CLOBBER};
  b_list ={v} {CLOBBER};
  pretmp_3089 = s_62(D)->p;
  pretmp_3098 = s_62(D)->p_start;
  pretmp_3105 = (long int) pretmp_3098;
  pretmp_3111 = s_62(D)->i_left;
  goto <bb 404>;

  <bb 401>:
  # DEBUG s => s_62(D)
  # DEBUG val => 0
  # DEBUG s => s_62(D)
  # DEBUG i_count => 1
  # DEBUG i_bits => 1
  _818 = s_62(D)->cur_bits;
  _819 = _818 << 1;
  _820 = _819 | 1;
  s_62(D)->cur_bits = _820;
  _822 = prephitmp_3085 + -1;
  s_62(D)->i_left = _822;
  if (_822 <= 32)
    goto <bb 403>;
  else
    goto <bb 402>;

  <bb 402>:
  pretmp_3092 = s_62(D)->p;
  goto <bb 404>;

  <bb 403>:
  _823 = s_62(D)->p;
  _824 = _820 << _822;
  # DEBUG x => _824
  __asm__("bswap %0" : "=r" x_825 : "0" _824);
  # DEBUG x => x_825
  # DEBUG x => NULL
  _826 = (unsigned int) x_825;
  MEM[(uint32_t *)_823] = _826;
  _827 = s_62(D)->i_left;
  _828 = _827 + 32;
  s_62(D)->i_left = _828;
  _829 = _823 + 4;
  s_62(D)->p = _829;

  <bb 404>:
  # prephitmp_3093 = PHI <_654(46), _670(54), prephitmp_3201(177), pretmp_3087(227), pretmp_3088(264), pretmp_3089(400), _829(403), prephitmp_3048(45), prephitmp_3239(53), pretmp_3092(402)>
  # prephitmp_3107 = PHI <pretmp_3101(46), _133(54), prephitmp_3215(177), pretmp_3103(227), pretmp_3104(264), pretmp_3105(400), _133(403), pretmp_3106(45), _133(53), _133(402)>
  # prephitmp_3112 = PHI <_653(46), _669(54), prephitmp_3217(177), pretmp_3109(227), pretmp_3110(264), pretmp_3111(400), _828(403), _647(45), _663(53), _822(402)>
  # DEBUG s => s_62(D)
  _830 = (long int) prephitmp_3093;
  _833 = _830 - prephitmp_3107;
  _834 = (unsigned int) _833;
  _835 = _834 * 8;
  _837 = (unsigned int) prephitmp_3112;
  _891 = 64 - _837;
  _839 = _835 + _891;
  _840 = (int) _839;
  # DEBUG s => NULL
  # DEBUG i_mb_pos_tex => NULL
  _455 = h_60(D)->stat.frame.i_mv_bits;
  _456 = _840 - _518;
  _457 = _455 + _456;
  h_60(D)->stat.frame.i_mv_bits = _457;
  if (i_mb_type.0_139 <= 1)
    goto <bb 405>;
  else
    goto <bb 407>;

  <bb 405>:
  _459 = h_60(D)->mb.i_cbp_chroma;
  _460 = _459 << 4;
  _461 = h_60(D)->mb.i_cbp_luma;
  _462 = _460 | _461;
  _463 = intra4x4_cbp_to_golomb[_462];
  _464 = (int) _463;
  # DEBUG s => s_62(D)
  # DEBUG val => _464
  _841 = _464 + 1;
  _843 = x264_ue_size_tab[_841];
  _844 = (int) _843;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _844
  # DEBUG i_bits => (unsigned int) _841
  _845 = s_62(D)->cur_bits;
  _846 = _845 << _844;
  _847 = (long int) _841;
  _848 = _846 | _847;
  s_62(D)->cur_bits = _848;
  _849 = prephitmp_3112 - _844;
  s_62(D)->i_left = _849;
  if (_849 <= 32)
    goto <bb 406>;
  else
    goto <bb 410>;

  <bb 406>:
  _850 = _848 << _849;
  # DEBUG x => _850
  __asm__("bswap %0" : "=r" x_851 : "0" _850);
  # DEBUG x => x_851
  # DEBUG x => NULL
  _852 = (unsigned int) x_851;
  MEM[(uint32_t *)prephitmp_3093] = _852;
  _853 = s_62(D)->i_left;
  _854 = _853 + 32;
  s_62(D)->i_left = _854;
  _855 = prephitmp_3093 + 4;
  s_62(D)->p = _855;
  goto <bb 410>;

  <bb 407>:
  if (i_mb_type_61 != 2)
    goto <bb 408>;
  else
    goto <bb 486>;

  <bb 408>:
  _466 = h_60(D)->mb.i_cbp_chroma;
  _467 = _466 << 4;
  _468 = h_60(D)->mb.i_cbp_luma;
  _469 = _467 | _468;
  _470 = inter_cbp_to_golomb[_469];
  _471 = (int) _470;
  # DEBUG s => s_62(D)
  # DEBUG val => _471
  _465 = _471 + 1;
  _857 = x264_ue_size_tab[_465];
  _858 = (int) _857;
  # DEBUG s => s_62(D)
  # DEBUG i_count => _858
  # DEBUG i_bits => (unsigned int) _465
  _859 = s_62(D)->cur_bits;
  _860 = _859 << _858;
  _861 = (long int) _465;
  _862 = _860 | _861;
  s_62(D)->cur_bits = _862;
  _863 = prephitmp_3112 - _858;
  s_62(D)->i_left = _863;
  if (_863 <= 32)
    goto <bb 409>;
  else
    goto <bb 487>;

  <bb 409>:
  _864 = _862 << _863;
  # DEBUG x => _864
  __asm__("bswap %0" : "=r" x_865 : "0" _864);
  # DEBUG x => x_865
  # DEBUG x => NULL
  _866 = (unsigned int) x_865;
  MEM[(uint32_t *)prephitmp_3093] = _866;
  _867 = s_62(D)->i_left;
  _868 = _867 + 32;
  s_62(D)->i_left = _868;
  _869 = prephitmp_3093 + 4;
  s_62(D)->p = _869;
  goto <bb 487>;

  <bb 410>:
  # DEBUG h => h_60(D)
  _244 = h_60(D)->pps;
  _1942 = _244->b_transform_8x8_mode;
  if (_1942 == 0)
    goto <bb 411>;
  else
    goto <bb 412>;

  <bb 411>:
  goto <bb 430>;

  <bb 412>:
  _1943 = h_60(D)->mb.i_type;
  _1944 = partition_tab[_1943];
  p_1945 = (int) _1944;
  # DEBUG p => p_1945
  if (p_1945 <= 1)
    goto <bb 426>;
  else
    goto <bb 413>;

  <bb 413>:
  if (_1943 == 7)
    goto <bb 414>;
  else
    goto <bb 415>;

  <bb 414>:
  _1946 = h_60(D)->sps;
  _1947 = _1946->b_direct8x8_inference;
  goto <bb 426>;

  <bb 415>:
  if (_1943 == 5)
    goto <bb 416>;
  else
    goto <bb 421>;

  <bb 416>:
  _1948 = h_60(D)->param.analyse.inter;
  _1949 = _1948 & 32;
  if (_1949 == 0)
    goto <bb 427>;
  else
    goto <bb 417>;

  <bb 417>:

  <bb 418>:
  # i_2484 = PHI <0(417), i_1952(420)>
  # ivtmp_940 = PHI <4(417), ivtmp_3056(420)>
  # DEBUG i => i_2484
  _1951 = h_60(D)->mb.i_sub_partition[i_2484];
  if (_1951 != 3)
    goto <bb 411>;
  else
    goto <bb 419>;

  <bb 419>:
  i_1952 = i_2484 + 1;
  # DEBUG i => i_1952
  # DEBUG i => i_1952
  ivtmp_3056 = ivtmp_940 - 1;
  if (ivtmp_3056 != 0)
    goto <bb 420>;
  else
    goto <bb 427>;

  <bb 420>:
  goto <bb 418>;

  <bb 421>:
  _1953 = h_60(D)->sps;
  _1954 = _1953->b_direct8x8_inference;
  if (_1954 != 0)
    goto <bb 427>;
  else
    goto <bb 422>;

  <bb 422>:

  <bb 423>:
  # i_2483 = PHI <0(422), i_1957(425)>
  # ivtmp_3054 = PHI <4(422), ivtmp_3067(425)>
  # DEBUG i => i_2483
  _1956 = h_60(D)->mb.i_sub_partition[i_2483];
  if (_1956 == 12)
    goto <bb 411>;
  else
    goto <bb 424>;

  <bb 424>:
  i_1957 = i_2483 + 1;
  # DEBUG i => i_1957
  # DEBUG i => i_1957
  ivtmp_3067 = ivtmp_3054 - 1;
  if (ivtmp_3067 != 0)
    goto <bb 425>;
  else
    goto <bb 427>;

  <bb 425>:
  goto <bb 423>;

  <bb 426>:
  # _1958 = PHI <_1947(414), p_1945(412)>
  # DEBUG h => NULL
  # DEBUG i => NULL
  # DEBUG p => NULL
  if (_1958 != 0)
    goto <bb 427>;
  else
    goto <bb 411>;

  <bb 427>:
  # DEBUG h => NULL
  # DEBUG i => NULL
  # DEBUG p => NULL
  _474 = h_60(D)->mb.i_cbp_luma;
  if (_474 != 0)
    goto <bb 428>;
  else
    goto <bb 411>;

  <bb 428>:
  _475 = h_60(D)->mb.b_transform_8x8;
  _476 = (unsigned int) _475;
  # DEBUG s => s_62(D)
  # DEBUG i_bit => _476
  _472 = s_62(D)->cur_bits;
  _870 = _472 << 1;
  _871 = (long int) _476;
  _872 = _870 | _871;
  s_62(D)->cur_bits = _872;
  _873 = s_62(D)->i_left;
  _874 = _873 + -1;
  s_62(D)->i_left = _874;
  if (_874 == 32)
    goto <bb 429>;
  else
    goto <bb 411>;

  <bb 429>:
  _875 = s_62(D)->p;
  _876 = (unsigned int) _872;
  # DEBUG x => _876
  __asm__("bswap %0" : "=r" x_877 : "0" _876);
  # DEBUG x => x_877
  # DEBUG x => NULL
  MEM[(uint32_t *)_875] = x_877;
  _878 = _875 + 4;
  s_62(D)->p = _878;
  s_62(D)->i_left = 64;

  <bb 430>:
  if (i_mb_type_61 == 2)
    goto <bb 431>;
  else
    goto <bb 437>;

  <bb 431>:
  cavlc_qp_delta (h_60(D), s_62(D));
  _479 = &h_60(D)->dct.luma16x16_dc;
  block_residual_write_cavlc (h_60(D), s_62(D), 0, 24, _479, 16);
  _481 = h_60(D)->mb.i_cbp_luma;
  if (_481 != 0)
    goto <bb 432>;
  else
    goto <bb 433>;

  <bb 432>:
  goto <bb 434>;

  <bb 433>:
  pretmp_3115 = h_60(D)->mb.i_cbp_chroma;
  goto <bb 455>;

  <bb 434>:
  # i_2456 = PHI <0(432), i_488(436)>
  # ivtmp_3126 = PHI <16(432), ivtmp_3117(436)>
  # DEBUG i => i_2456
  _482 = x264_scan8[i_2456];
  _483 = &h_60(D)->dct.luma4x4[i_2456];
  # DEBUG v => _483
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_477 : "r" _483, "m" MEM[(struct  *)_483]);
  # DEBUG count => count_477
  _879 = count_477 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _484 = (unsigned char) _879;
  h_60(D)->mb.cache.non_zero_count[_482] = _484;
  _486 = _483 + 2;
  block_residual_write_cavlc (h_60(D), s_62(D), 1, i_2456, _486, 15);
  i_488 = i_2456 + 1;
  # DEBUG i => i_488
  # DEBUG i => i_488
  ivtmp_3117 = ivtmp_3126 - 1;
  if (ivtmp_3117 != 0)
    goto <bb 436>;
  else
    goto <bb 435>;

  <bb 435>:
  pretmp_3113 = h_60(D)->mb.i_cbp_chroma;
  goto <bb 455>;

  <bb 436>:
  goto <bb 434>;

  <bb 437>:
  _489 = h_60(D)->mb.i_cbp_luma;
  _490 = h_60(D)->mb.i_cbp_chroma;
  _491 = _489 | _490;
  if (_491 != 0)
    goto <bb 438>;
  else
    goto <bb 455>;

  <bb 438>:
  cavlc_qp_delta (h_60(D), s_62(D));
  # DEBUG h => h_60(D)
  # DEBUG s => s_62(D)
  # DEBUG i8end => 3
  # DEBUG i8start => 0
  _1961 = h_60(D)->mb.b_transform_8x8;
  if (_1961 != 0)
    goto <bb 440>;
  else
    goto <bb 439>;

  <bb 439>:
  pretmp_3286 = h_60(D)->mb.i_cbp_luma;
  goto <bb 446>;

  <bb 440>:
  pretmp_3290 = h_60(D)->mb.i_cbp_luma;

  <bb 441>:
  # i8start_2364 = PHI <0(440), i8start_1970(444)>
  # prephitmp_3291 = PHI <pretmp_3290(440), prephitmp_3125(444)>
  # ivtmp_2006 = PHI <4(440), ivtmp_955(444)>
  # DEBUG i8 => i8start_2364
  _1964 = prephitmp_3291 >> i8start_2364;
  _1965 = _1964 & 1;
  if (_1965 != 0)
    goto <bb 442>;
  else
    goto <bb 443>;

  <bb 442>:
  _1966 = h_60(D)->zigzagf.interleave_8x8_cavlc;
  _1967 = &h_60(D)->dct.luma8x8[i8start_2364];
  _1968 = i8start_2364 * 4;
  _1969 = &h_60(D)->dct.luma4x4[_1968];
  _1966 (_1969, _1967);
  pretmp_3124 = h_60(D)->mb.i_cbp_luma;

  <bb 443>:
  # prephitmp_3125 = PHI <prephitmp_3291(441), pretmp_3124(442)>
  i8start_1970 = i8start_2364 + 1;
  # DEBUG i8 => i8start_1970
  # DEBUG i8 => i8start_1970
  ivtmp_955 = ivtmp_2006 - 1;
  if (ivtmp_955 != 0)
    goto <bb 444>;
  else
    goto <bb 445>;

  <bb 444>:
  goto <bb 441>;

  <bb 445>:
  # prephitmp_3052 = PHI <prephitmp_3125(443)>

  <bb 446>:
  # prephitmp_3287 = PHI <prephitmp_3052(445), pretmp_3286(439)>
  # DEBUG i8 => 0

  <bb 447>:
  # i8start_2681 = PHI <i8start_1984(453), 0(446)>
  # prephitmp_3289 = PHI <pretmp_3288(453), prephitmp_3287(446)>
  # ivtmp_3250 = PHI <ivtmp_328(453), 4(446)>
  # DEBUG i8 => i8start_2681
  _1973 = prephitmp_3289 >> i8start_2681;
  _1974 = _1973 & 1;
  if (_1974 != 0)
    goto <bb 449>;
  else
    goto <bb 448>;

  <bb 448>:
  i8start_1984 = i8start_2681 + 1;
  # DEBUG i8 => i8start_1984
  # DEBUG i8 => i8start_1984
  ivtmp_328 = ivtmp_3250 - 1;
  if (ivtmp_328 != 0)
    goto <bb 453>;
  else
    goto <bb 454>;

  <bb 449>:
  pretmp_3121 = i8start_2681 * 4;

  <bb 450>:
  # i4_2680 = PHI <0(449), i4_1983(452)>
  # ivtmp_3042 = PHI <4(449), ivtmp_3047(452)>
  # DEBUG i4 => i4_2680
  _1977 = i4_2680 + pretmp_3121;
  _1978 = x264_scan8[_1977];
  _1979 = &h_60(D)->dct.luma4x4[_1977];
  # DEBUG v => _1979
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_1980 : "r" _1979, "m" MEM[(struct  *)_1979]);
  # DEBUG count => count_1980
  _1981 = count_1980 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _1982 = (unsigned char) _1981;
  h_60(D)->mb.cache.non_zero_count[_1978] = _1982;
  block_residual_write_cavlc (h_60(D), s_62(D), 2, _1977, _1979, 16);
  i4_1983 = i4_2680 + 1;
  # DEBUG i4 => i4_1983
  # DEBUG i4 => i4_1983
  ivtmp_3047 = ivtmp_3042 - 1;
  if (ivtmp_3047 != 0)
    goto <bb 452>;
  else
    goto <bb 451>;

  <bb 451>:
  goto <bb 448>;

  <bb 452>:
  goto <bb 450>;

  <bb 453>:
  pretmp_3288 = h_60(D)->mb.i_cbp_luma;
  goto <bb 447>;

  <bb 454>:
  pretmp_3114 = h_60(D)->mb.i_cbp_chroma;

  <bb 455>:
  # prephitmp_3116 = PHI <pretmp_3113(435), _490(437), pretmp_3114(454), pretmp_3115(433)>
  if (prephitmp_3116 != 0)
    goto <bb 457>;
  else
    goto <bb 456>;

  <bb 456>:
  # DEBUG s => s_62(D)
  _882 = s_62(D)->p;
  _883 = (long int) _882;
  _884 = s_62(D)->p_start;
  _885 = (long int) _884;
  _886 = _883 - _885;
  _887 = (unsigned int) _886;
  _888 = _887 * 8;
  _889 = s_62(D)->i_left;
  _890 = (unsigned int) _889;
  _2015 = 64 - _890;
  _892 = _888 + _2015;
  _893 = (int) _892;
  # DEBUG s => NULL
  _509 = _893 - _840;
  _510 = h_60(D)->stat.frame.i_tex_bits;
  _511 = _509 + _510;
  h_60(D)->stat.frame.i_tex_bits = _511;
  goto <bb 462>;

  <bb 457>:
  _495 = &h_60(D)->dct.chroma_dc[0];
  block_residual_write_cavlc (h_60(D), s_62(D), 3, 25, _495, 4);
  _497 = &h_60(D)->dct.chroma_dc[1];
  block_residual_write_cavlc (h_60(D), s_62(D), 3, 26, _497, 4);
  _499 = h_60(D)->mb.i_cbp_chroma;
  _500 = _499 & 2;
  if (_500 != 0)
    goto <bb 458>;
  else
    goto <bb 456>;

  <bb 458>:

  <bb 459>:
  # i_2698 = PHI <16(458), i_507(461)>
  # ivtmp_15 = PHI <8(458), ivtmp_3208(461)>
  # DEBUG i => i_2698
  _501 = x264_scan8[i_2698];
  _502 = &h_60(D)->dct.luma4x4[i_2698];
  # DEBUG v => _502
  __asm__("pxor     %%mm7,  %%mm7 
movq     (%1),   %%mm0 
movq     8(%1),  %%mm1 
packsswb 16(%1), %%mm0 
packsswb 24(%1), %%mm1 
pcmpeqb  %%mm7,  %%mm0 
pcmpeqb  %%mm7,  %%mm1 
paddb    %%mm0,  %%mm1 
psadbw   %%mm7,  %%mm1 
movd     %%mm1,  %0    
" : "=r" count_880 : "r" _502, "m" MEM[(struct  *)_502]);
  # DEBUG count => count_880
  _881 = count_880 + 16;
  # DEBUG v => NULL
  # DEBUG count => NULL
  _503 = (unsigned char) _881;
  h_60(D)->mb.cache.non_zero_count[_501] = _503;
  _505 = _502 + 2;
  block_residual_write_cavlc (h_60(D), s_62(D), 4, i_2698, _505, 15);
  i_507 = i_2698 + 1;
  # DEBUG i => i_507
  # DEBUG i => i_507
  ivtmp_3208 = ivtmp_15 - 1;
  if (ivtmp_3208 != 0)
    goto <bb 461>;
  else
    goto <bb 460>;

  <bb 460>:
  goto <bb 456>;

  <bb 461>:
  goto <bb 459>;

  <bb 462>:
  return;

  <bb 463>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _8 = h_60(D)->mb.cache.ref[0][28];
  # DEBUG D#29 => h_60(D)->mb.pic.i_fref[0]
  # DEBUG s => s_62(D)
  # DEBUG x => D#29 + -1
  # DEBUG val => (int) _8
  goto <bb 94>;

  <bb 464>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _5 = h_60(D)->mb.cache.ref[0][28];
  _4 = (int) _5;
  _3 = _343 + -1;
  # DEBUG s => s_62(D)
  # DEBUG x => _3
  # DEBUG val => _4
  goto <bb 96>;

  <bb 465>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _2 = h_60(D)->mb.cache.ref[0][14];
  _2338 = (int) _2;
  _2569 = _380 + -1;
  # DEBUG s => s_62(D)
  # DEBUG x => _2569
  # DEBUG val => _2338
  goto <bb 144>;

  <bb 466>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _2370 = h_60(D)->mb.cache.ref[0][14];
  # DEBUG D#25 => h_60(D)->mb.pic.i_fref[0]
  # DEBUG s => s_62(D)
  # DEBUG x => D#25 + -1
  # DEBUG val => (int) _2370
  goto <bb 142>;

  <bb 467>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _2572 = h_60(D)->mb.cache.ref[0][14];
  # DEBUG D#30 => h_60(D)->mb.pic.i_fref[0]
  # DEBUG s => s_62(D)
  # DEBUG x => D#30 + -1
  # DEBUG val => (int) _2572
  goto <bb 203>;

  <bb 468>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _2573 = h_60(D)->mb.cache.ref[0][14];
  _2337 = (int) _2573;
  _2709 = _299 + -1;
  # DEBUG s => s_62(D)
  # DEBUG x => _2709
  # DEBUG val => _2337
  goto <bb 205>;

  <bb 469>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _2336 = h_60(D)->mb.cache.ref[0][28];
  # DEBUG D#31 => h_60(D)->mb.pic.i_fref[0]
  # DEBUG s => s_62(D)
  # DEBUG x => D#31 + -1
  # DEBUG val => (int) _2336
  goto <bb 210>;

  <bb 470>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _2007 = h_60(D)->mb.cache.ref[0][28];
  _1959 = (int) _2007;
  # DEBUG D#26 => h_60(D)->mb.pic.i_fref[0]
  # DEBUG s => s_62(D)
  # DEBUG x => D#26 + -1
  # DEBUG val => _1959
  goto <bb 214>;

  <bb 471>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _532 = h_60(D)->mb.cache.ref[0][30];
  # DEBUG D#34 => h_60(D)->mb.pic.i_fref[0]
  # DEBUG s => s_62(D)
  # DEBUG x => D#34 + -1
  # DEBUG val => (int) _532
  goto <bb 218>;

  <bb 472>:
  # DEBUG s => NULL
  # DEBUG x => NULL
  # DEBUG val => NULL
  # DEBUG x => NULL
  _1722 = h_60(D)->mb.cache.ref[0][30];
  _40 = (int) _1722;
  # DEBUG D#35 => h_60(D)->mb.pic.i_fref[0]
  # DEBUG s => s_62(D)
  # DEBUG x => D#35 + -1
  # DEBUG val => _40
  goto <bb 223>;

  <bb 473>:
  i_list_1987 = i_list_2699 + 1;
  # DEBUG i_list => i_list_1987
  # DEBUG i_list => i_list_1987
  goto <bb 269>;

  <bb 474>:
  _37 = h_60(D)->mb.cache.ref[i_list_2699][28];
  # DEBUG s => s_62(D)
  # DEBUG x => iftmp.3_1151
  # DEBUG val => (int) _37
  goto <bb 292>;

  <bb 475>:
  _35 = b_list[i_list_2699][1];
  if (_35 != 0)
    goto <bb 474>;
  else
    goto <bb 476>;

  <bb 476>:
  pretmp_3147 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 477>:
  _903 = h_60(D)->mb.cache.ref[i_list_2699][28];
  _34 = (int) _903;
  # DEBUG s => s_62(D)
  # DEBUG x => iftmp.3_1151
  # DEBUG val => _34
  goto <bb 297>;

  <bb 478>:
  _32 = b_list[i_list_2699][1];
  if (_32 != 0)
    goto <bb 477>;
  else
    goto <bb 479>;

  <bb 479>:
  pretmp_3148 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 480>:
  _23 = h_60(D)->mb.cache.ref[i_list_2699][14];
  # DEBUG s => s_62(D)
  # DEBUG x => iftmp.3_1151
  # DEBUG val => (int) _23
  goto <bb 309>;

  <bb 481>:
  _842 = b_list[i_list_2699][1];
  if (_842 != 0)
    goto <bb 480>;
  else
    goto <bb 482>;

  <bb 482>:
  pretmp_3149 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 483>:
  _580 = h_60(D)->mb.cache.ref[i_list_2699][14];
  _508 = (int) _580;
  # DEBUG s => s_62(D)
  # DEBUG x => iftmp.3_1151
  # DEBUG val => _508
  goto <bb 314>;

  <bb 484>:
  _655 = b_list[i_list_2699][1];
  if (_655 != 0)
    goto <bb 483>;
  else
    goto <bb 485>;

  <bb 485>:
  pretmp_3150 = h_60(D)->mb.i_partition;
  goto <bb 317> (<L113>);

  <bb 486>:
  # DEBUG h => h_60(D)
  _347 = h_60(D)->pps;
  _1094 = _347->b_transform_8x8_mode;
  if (_1094 == 0)
    goto <bb 431>;
  else
    goto <bb 412>;

  <bb 487>:
  # DEBUG h => h_60(D)
  _385 = h_60(D)->pps;
  _1242 = _385->b_transform_8x8_mode;
  if (_1242 == 0)
    goto <bb 437>;
  else
    goto <bb 412>;

}


