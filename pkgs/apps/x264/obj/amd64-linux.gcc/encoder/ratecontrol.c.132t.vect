
;; Function predict_row_size_sum (predict_row_size_sum, funcdef_no=130, decl_uid=6681, cgraph_uid=130, symbol_order=173)


Analyzing loop at encoder/ratecontrol.c:873
encoder/ratecontrol.c:873:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:873:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:873:5: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:873:5: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:864
encoder/ratecontrol.c:864:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:864:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:864:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) <= y_6(D)
  bounds on difference of bases: -1 ... 2147483646
Applying pattern match.pd:49, generic-match.c:3223
  result:
    # of iterations (unsigned int) y_6(D), bounded by 2147483647
encoder/ratecontrol.c:864:5: note: Symbolic number of iterations is (unsigned int) y_6(D) + 1
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_refs ===
Creating dr for *_19
analyze_innermost: success.
	base_address: pretmp_124
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *pretmp_124
	Access function 0: {0B, +, 4}_2
encoder/ratecontrol.c:864:5: note: got vectype for stmt: _20 = *_19;
vector(4) int
encoder/ratecontrol.c:864:5: note: === vect_analyze_scalar_cycles ===
encoder/ratecontrol.c:864:5: note: Analyze phi: i_85 = PHI <0(3), i_24(6)>

encoder/ratecontrol.c:864:5: note: Access function of PHI: {0, +, 1}_2
encoder/ratecontrol.c:864:5: note: step: 1,  init: 0
encoder/ratecontrol.c:864:5: note: Detected induction.
encoder/ratecontrol.c:864:5: note: Analyze phi: bits_86 = PHI <0.0(3), bits_23(6)>

encoder/ratecontrol.c:864:5: note: Access function of PHI: {0.0, +, _21}_2
encoder/ratecontrol.c:864:5: note: step: _21,  init: 0.0
encoder/ratecontrol.c:864:5: note: step unknown.
encoder/ratecontrol.c:864:5: note: Analyze phi: bits_86 = PHI <0.0(3), bits_23(6)>

encoder/ratecontrol.c:864:5: note: detected reduction: bits_23 = _21 + bits_86;

encoder/ratecontrol.c:864:5: note: Detected reduction.
encoder/ratecontrol.c:864:5: note: === vect_pattern_recog ===
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _17
encoder/ratecontrol.c:864:5: note: def_stmt: _17 = (long unsigned int) i_85;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand i_85
encoder/ratecontrol.c:864:5: note: def_stmt: i_85 = PHI <0(3), i_24(6)>
encoder/ratecontrol.c:864:5: note: type of def: 4.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand 4
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _21
encoder/ratecontrol.c:864:5: note: def_stmt: _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _21
encoder/ratecontrol.c:864:5: note: def_stmt: _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _21
encoder/ratecontrol.c:864:5: note: def_stmt: _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_ref_accesses ===
encoder/ratecontrol.c:864:5: note: === vect_mark_stmts_to_be_vectorized ===
encoder/ratecontrol.c:864:5: note: init: phi relevant? i_85 = PHI <0(3), i_24(6)>
encoder/ratecontrol.c:864:5: note: init: phi relevant? bits_86 = PHI <0.0(3), bits_23(6)>
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG bits => bits_86
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG i => i_85
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _17 = (long unsigned int) i_85;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _18 = _17 * 4;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _19 = pretmp_124 + _18;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _20 = *_19;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? bits_23 = _21 + bits_86;
encoder/ratecontrol.c:864:5: note: vec_stmt_relevant_p: used out of loop.
encoder/ratecontrol.c:864:5: note: mark relevant 0, live 1.
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG bits => bits_23
encoder/ratecontrol.c:864:5: note: init: stmt relevant? i_24 = i_85 + 1;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG i => i_24
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG bits => bits_23
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG i => i_24
encoder/ratecontrol.c:864:5: note: init: stmt relevant? if (y_6(D) >= i_24)
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: bits_23 = _21 + bits_86;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _21
encoder/ratecontrol.c:864:5: note: def_stmt: _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: mark relevant 3, live 0.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_86
encoder/ratecontrol.c:864:5: note: def_stmt: bits_86 = PHI <0.0(3), bits_23(6)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: mark relevant 3, live 0.
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: bits_86 = PHI <0.0(3), bits_23(6)>
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand 0.0
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_23
encoder/ratecontrol.c:864:5: note: def_stmt: bits_23 = _21 + bits_86;
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: reduc-stmt defining reduc-phi in the same nest.
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _20
encoder/ratecontrol.c:864:5: note: def_stmt: _20 = *_19;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: mark relevant 3, live 0.
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: _20 = *_19;
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _20 = *_19;
  stmt_b: _20 = *_19;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_2)
  (chrec_b = {0B, +, 4}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/ratecontrol.c:864:5: note: === vect_determine_vectorization_factor ===
encoder/ratecontrol.c:864:5: note: ==> examining phi: i_85 = PHI <0(3), i_24(6)>

encoder/ratecontrol.c:864:5: note: ==> examining phi: bits_86 = PHI <0.0(3), bits_23(6)>

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: nunits = 2
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_86

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_85

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _17 = (long unsigned int) i_85;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _18 = _17 * 4;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _19 = pretmp_124 + _18;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _20 = *_19;

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  int
encoder/ratecontrol.c:864:5: note: vectype: vector(4) int
encoder/ratecontrol.c:864:5: note: nunits = 4
encoder/ratecontrol.c:864:5: note: ==> examining statement: _21 = (double) _20;

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  int
encoder/ratecontrol.c:864:5: note: vectype: vector(4) int
encoder/ratecontrol.c:864:5: note: nunits = 4
encoder/ratecontrol.c:864:5: note: ==> examining statement: bits_23 = _21 + bits_86;

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: nunits = 2
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_23

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: i_24 = i_85 + 1;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_24

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_23

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_24

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: if (y_6(D) >= i_24)

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: vectorization factor = 4
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_refs_alignment ===
encoder/ratecontrol.c:864:5: note: vect_compute_data_ref_alignment:
encoder/ratecontrol.c:864:5: note: can't force alignment of ref: *_19
encoder/ratecontrol.c:864:5: note: === vect_prune_runtime_alias_test_list ===
encoder/ratecontrol.c:864:5: note: === vect_enhance_data_refs_alignment ===
encoder/ratecontrol.c:864:5: note: Unknown misalignment, is_packed = 0
encoder/ratecontrol.c:864:5: note: vect_can_advance_ivs_p:
encoder/ratecontrol.c:864:5: note: Analyze phi: i_85 = PHI <0(3), i_24(6)>

encoder/ratecontrol.c:864:5: note: Analyze phi: bits_86 = PHI <0.0(3), bits_23(6)>

encoder/ratecontrol.c:864:5: note: reduc phi. skip.
encoder/ratecontrol.c:864:5: note: Disable peeling, max peels reached: 3
encoder/ratecontrol.c:864:5: note: Vectorizing an unaligned access.
encoder/ratecontrol.c:864:5: note: === vect_analyze_slp ===
encoder/ratecontrol.c:864:5: note: === vect_make_slp_decision ===
encoder/ratecontrol.c:864:5: note: === vect_detect_hybrid_slp ===
encoder/ratecontrol.c:864:5: note: === vect_analyze_loop_operations ===
encoder/ratecontrol.c:864:5: note: examining phi: i_85 = PHI <0(3), i_24(6)>

encoder/ratecontrol.c:864:5: note: examining phi: bits_86 = PHI <0.0(3), bits_23(6)>

encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_86
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_85
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _17 = (long unsigned int) i_85;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _18 = _17 * 4;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _19 = pretmp_124 + _18;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _20 = *_19;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand *_19
encoder/ratecontrol.c:864:5: note: not ssa-name.
encoder/ratecontrol.c:864:5: note: use not simple.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand *_19
encoder/ratecontrol.c:864:5: note: not ssa-name.
encoder/ratecontrol.c:864:5: note: use not simple.
encoder/ratecontrol.c:864:5: note: vect_model_load_cost: unaligned supported by hardware.
encoder/ratecontrol.c:864:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
encoder/ratecontrol.c:864:5: note: ==> examining statement: _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _20
encoder/ratecontrol.c:864:5: note: def_stmt: _20 = *_19;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: === vectorizable_conversion ===
encoder/ratecontrol.c:864:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
encoder/ratecontrol.c:864:5: note: ==> examining statement: bits_23 = _21 + bits_86;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _21
encoder/ratecontrol.c:864:5: note: def_stmt: _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_86
encoder/ratecontrol.c:864:5: note: def_stmt: bits_86 = PHI <0.0(3), bits_23(6)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: detected reduction: bits_23 = _21 + bits_86;

encoder/ratecontrol.c:864:5: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 2, prologue_cost = 1, epilogue_cost = 3 .
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_23
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: i_24 = i_85 + 1;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_24
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_23
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_24
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: if (y_6(D) >= i_24)
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: === vect_update_slp_costs_according_to_vf ===
encoder/ratecontrol.c:864:5: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
encoder/ratecontrol.c:864:5: note: Cost model analysis: 
  Vector inside of loop cost: 5
  Vector prologue cost: 7
  Vector epilogue cost: 9
  Scalar iteration cost: 3
  Scalar outside cost: 6
  Vector outside cost: 16
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 5
encoder/ratecontrol.c:864:5: note:   Runtime profitability threshold = 4
encoder/ratecontrol.c:864:5: note:   Static estimate profitability threshold = 4
encoder/ratecontrol.c:864:5: note: epilog loop required
encoder/ratecontrol.c:864:5: note: vect_can_advance_ivs_p:
encoder/ratecontrol.c:864:5: note: Analyze phi: i_85 = PHI <0(3), i_24(6)>

encoder/ratecontrol.c:864:5: note: Analyze phi: bits_86 = PHI <0.0(3), bits_23(6)>

encoder/ratecontrol.c:864:5: note: reduc phi. skip.
encoder/ratecontrol.c:864:5: note: loop vectorized
encoder/ratecontrol.c:864:5: note: === vec_transform_loop ===
encoder/ratecontrol.c:864:5: note: Profitability threshold is 4 loop iterations.
encoder/ratecontrol.c:864:5: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 19
basic block 19, loop depth 0
 pred:       3
 succ:      


;; Scaling loop 2 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 3
;; Scaling loop 3 with scale 0.777800, bounding iterations to 4 from guessed 13
;; guessed iterations are now 3
encoder/ratecontrol.c:864:5: note: vect_update_ivs_after_vectorizer: phi: i_85 = PHI <0(23), i_24(6)>

Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
encoder/ratecontrol.c:864:5: note: vect_update_ivs_after_vectorizer: phi: bits_86 = PHI <0.0(23), bits_23(6)>

encoder/ratecontrol.c:864:5: note: reduc phi. skip.
Setting upper bound of nb iterations for epilogue loop to 3
encoder/ratecontrol.c:864:5: note: ------>vectorizing phi: i_85 = PHI <0(27), i_24(6)>

encoder/ratecontrol.c:864:5: note: ------>vectorizing phi: bits_86 = PHI <0.0(27), bits_23(6)>

encoder/ratecontrol.c:864:5: note: multiple-types.
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG bits => bits_86

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG i => i_85

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _17 = (long unsigned int) i_85;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _18 = _17 * 4;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _19 = pretmp_124 + _18;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _20 = *_19;

encoder/ratecontrol.c:864:5: note: transform statement.
encoder/ratecontrol.c:864:5: note: transform load. ncopies = 1
encoder/ratecontrol.c:864:5: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *pretmp_124
Applying pattern match.pd:49, generic-match.c:4015
encoder/ratecontrol.c:864:5: note: created vectp_pretmp.123_119
encoder/ratecontrol.c:864:5: note: add new stmt: vect__20.124_12 = MEM[(int *)vectp_pretmp.122_123];
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _21 = (double) _20;

encoder/ratecontrol.c:864:5: note: multiple-types.
encoder/ratecontrol.c:864:5: note: transform statement.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _20
encoder/ratecontrol.c:864:5: note: def_stmt: _20 = *_19;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: transform conversion. ncopies = 1.
encoder/ratecontrol.c:864:5: note: vect_get_vec_def_for_operand: _20
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _20
encoder/ratecontrol.c:864:5: note: def_stmt: _20 = *_19;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: def =  _20
  def_stmt =  _20 = *_19;
encoder/ratecontrol.c:864:5: note: add new stmt: vect__21.125_7 = [vec_unpack_float_lo_expr] vect__20.124_12;
encoder/ratecontrol.c:864:5: note: add new stmt: vect__21.125_98 = [vec_unpack_float_hi_expr] vect__20.124_12;
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: bits_23 = _21 + bits_86;

encoder/ratecontrol.c:864:5: note: multiple-types.
encoder/ratecontrol.c:864:5: note: transform statement.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _21
encoder/ratecontrol.c:864:5: note: def_stmt: _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_86
encoder/ratecontrol.c:864:5: note: def_stmt: bits_86 = PHI <0.0(27), bits_23(6)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: detected reduction: bits_23 = _21 + bits_86;

encoder/ratecontrol.c:864:5: note: reduc op not supported by target.
encoder/ratecontrol.c:864:5: note: transform reduction.
encoder/ratecontrol.c:864:5: note: vect_get_vec_def_for_operand: _21
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _21
encoder/ratecontrol.c:864:5: note: def_stmt: _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: def =  _21
  def_stmt =  _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: add new stmt: vect_bits_23.126_102 = vect__21.125_7 + vect_bits_23.126_100;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _21
encoder/ratecontrol.c:864:5: note: def_stmt: _21 = (double) _20;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: add new stmt: vect_bits_23.126_108 = vect__21.125_98 + vect_bits_23.126_102;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand 0.0
encoder/ratecontrol.c:864:5: note: vect_get_vec_def_for_operand: bits_86
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_86
encoder/ratecontrol.c:864:5: note: def_stmt: bits_86 = PHI <0.0(27), bits_23(6)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: def =  bits_86
  def_stmt =  bits_86 = PHI <0.0(27), bits_23(6)>
encoder/ratecontrol.c:864:5: note: transform reduction: created def-use cycle: vect_bits_23.126_100 = PHI <{ 0.0, 0.0 }(27), vect_bits_23.126_108(6)>

vect_bits_23.126_108 = vect__21.125_98 + vect_bits_23.126_102;

encoder/ratecontrol.c:864:5: note: Reduce using vector shifts
encoder/ratecontrol.c:864:5: note: extract scalar result
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG bits => bits_23

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: i_24 = i_85 + 1;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG i => i_24

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG bits => bits_23

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG i => i_24

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: vectp_pretmp.122_125 = vectp_pretmp.122_123 + 16;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: if (y_6(D) >= i_24)


loop at encoder/ratecontrol.c:865: if (ivtmp_27 < bnd.119_91)

;; Scaling loop 2 with scale 0.250000, bounding iterations to 2 from guessed 3
;; guessed iterations are now 1
encoder/ratecontrol.c:864:5: note: LOOP VECTORIZED

encoder/ratecontrol.c:869:15: note: vectorized 1 loops in function.
Merging blocks 3 and 23
Merging blocks 25 and 5
predict_row_size_sum (struct x264_t * h, int y, int qp)
{
  double vect_bits_23.129;
  vector(2) double vect_bits_23.128;
  double stmp_bits_23.127;
  vector(2) double vect_bits_23.126;
  vector(2) double vect__21.125;
  vector(4) int vect__20.124;
  vector(4) int * vectp_pretmp.123;
  vector(4) int * vectp_pretmp.122;
  int tmp.121;
  unsigned int ratio_mult_vf.120;
  unsigned int bnd.119;
  unsigned int niters.118;
  struct x264_ratecontrol_t * rc;
  double pred_t;
  double D.9754;
  int i;
  double bits;
  int i;
  unsigned int _13;
  long unsigned int _17;
  long unsigned int _18;
  int * _19;
  int _20;
  double _21;
  unsigned int ivtmp_26;
  unsigned int ivtmp_27;
  long unsigned int _28;
  long unsigned int _29;
  int * _30;
  int _31;
  double _32;
  double _41;
  struct x264_frame_t * _45;
  int _46;
  int _47;
  int * _48;
  int * _49;
  int _50;
  int _51;
  int _52;
  int _53;
  int * _54;
  int * _55;
  int _56;
  int _57;
  int _58;
  double _59;
  int * _60;
  int * _61;
  int _62;
  double _63;
  double _64;
  double _65;
  double _66;
  double _67;
  double _68;
  int _70;
  double _72;
  double _73;
  double _74;
  int * _76;
  long unsigned int _79;
  long unsigned int _80;
  int _81;
  struct x264_sps_t * _82;
  unsigned int _89;
  unsigned int _90;
  unsigned int _92;
  double reciptmp_93;
  double reciptmp_94;
  struct x264_ratecontrol_t * pretmp_97;
  struct x264_frame_t * pretmp_99;
  int * pretmp_101;
  double pretmp_103;
  double pretmp_104;
  double pretmp_105;
  double _106;
  double pretmp_109;
  struct predictor_t * pretmp_110;
  double pretmp_112;
  double pretmp_114;
  double pretmp_116;
  int pretmp_117;
  struct x264_frame_t * pretmp_122;
  int * pretmp_124;

  <bb 2>:
  # DEBUG D#3 => h_5(D)
  # DEBUG y => y_6(D)
  # DEBUG h => D#3
  # DEBUG bits => 0.0
  # DEBUG i => 0
  if (y_6(D) >= 0)
    goto <bb 3>;
  else
    goto <bb 13>;

  <bb 3>:
  pretmp_122 = h_5(D)->fdec;
  pretmp_124 = pretmp_122->i_row_bits;
  _92 = (unsigned int) y_6(D);
  niters.118_107 = _92 + 1;
  _90 = niters.118_107 + 4294967292;
  _89 = _90 >> 2;
  bnd.119_91 = _89 + 1;
  ratio_mult_vf.120_88 = bnd.119_91 << 2;
  _13 = (unsigned int) y_6(D);
  if (_13 <= 3)
    goto <bb 9>;
  else
    goto <bb 4>;

  <bb 4>:
  vectp_pretmp.123_119 = pretmp_124;

  <bb 5>:
  # i_85 = PHI <0(4), i_24(12)>
  # bits_86 = PHI <0.0(4), bits_23(12)>
  # vectp_pretmp.122_123 = PHI <vectp_pretmp.123_119(4), vectp_pretmp.122_125(12)>
  # vect_bits_23.126_100 = PHI <{ 0.0, 0.0 }(4), vect_bits_23.126_108(12)>
  # ivtmp_26 = PHI <0(4), ivtmp_27(12)>
  # DEBUG bits => bits_86
  # DEBUG i => i_85
  _17 = (long unsigned int) i_85;
  _18 = _17 * 4;
  _19 = pretmp_124 + _18;
  vect__20.124_12 = MEM[(int *)vectp_pretmp.122_123];
  _20 = *_19;
  vect__21.125_7 = [vec_unpack_float_lo_expr] vect__20.124_12;
  vect__21.125_98 = [vec_unpack_float_hi_expr] vect__20.124_12;
  _21 = (double) _20;
  vect_bits_23.126_102 = vect__21.125_7 + vect_bits_23.126_100;
  vect_bits_23.126_108 = vect__21.125_98 + vect_bits_23.126_102;
  bits_23 = _21 + bits_86;
  # DEBUG bits => bits_23
  i_24 = i_85 + 1;
  # DEBUG i => i_24
  # DEBUG bits => bits_23
  # DEBUG i => i_24
  vectp_pretmp.122_125 = vectp_pretmp.122_123 + 16;
  ivtmp_27 = ivtmp_26 + 1;
  if (ivtmp_27 < bnd.119_91)
    goto <bb 12>;
  else
    goto <bb 8>;

  <bb 6>:
  # i_84 = PHI <i_16(7), i_10(9)>
  # bits_83 = PHI <bits_22(7), bits_3(9)>
  # DEBUG bits => bits_83
  # DEBUG i => i_84
  _80 = (long unsigned int) i_84;
  _79 = _80 * 4;
  _76 = pretmp_124 + _79;
  _70 = *_76;
  _67 = (double) _70;
  bits_22 = _67 + bits_83;
  # DEBUG bits => bits_22
  i_16 = i_84 + 1;
  # DEBUG i => i_16
  # DEBUG bits => bits_22
  # DEBUG i => i_16
  if (y_6(D) >= i_16)
    goto <bb 7>;
  else
    goto <bb 10>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  # i_9 = PHI <i_24(5)>
  # bits_2 = PHI <bits_23(5)>
  # vect_bits_23.126_111 = PHI <vect_bits_23.126_108(5)>
  vect_bits_23.128_113 = VEC_PERM_EXPR <vect_bits_23.126_111, { 0.0, 0.0 }, { 1, 2 }>;
  vect_bits_23.128_115 = vect_bits_23.128_113 + vect_bits_23.126_111;
  stmp_bits_23.127_118 = BIT_FIELD_REF <vect_bits_23.128_115, 64, 0>;
  vect_bits_23.129_25 = stmp_bits_23.127_118 + 0.0;
  tmp.121_120 = (int) ratio_mult_vf.120_88;
  if (ratio_mult_vf.120_88 == niters.118_107)
    goto <bb 11>;
  else
    goto <bb 9>;

  <bb 9>:
  # i_10 = PHI <tmp.121_120(8), 0(3)>
  # bits_3 = PHI <vect_bits_23.129_25(8), 0.0(3)>
  goto <bb 6>;

  <bb 10>:
  # bits_121 = PHI <bits_22(6)>

  <bb 11>:
  # bits_1 = PHI <bits_121(10), vect_bits_23.129_25(8)>
  goto <bb 13>;

  <bb 12>:
  goto <bb 5>;

  <bb 13>:
  # bits_87 = PHI <bits_1(11), 0.0(2)>
  # DEBUG y => NULL
  # DEBUG i => NULL
  # DEBUG bits => NULL
  # DEBUG bits => NULL
  i_8 = y_6(D) + 1;
  # DEBUG i => i_8
  # DEBUG bits => bits_87
  # DEBUG i => i_8
  _82 = h_5(D)->sps;
  _81 = _82->i_mb_height;
  if (i_8 < _81)
    goto <bb 14>;
  else
    goto <bb 24>;

  <bb 14>:
  pretmp_97 = h_5(D)->rc;
  pretmp_99 = h_5(D)->fdec;
  pretmp_101 = pretmp_99->i_row_satd;
  pretmp_103 = (double) qp_11(D);
  pretmp_104 = pretmp_103 - 1.2e+1;
  pretmp_105 = pretmp_104 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _106 = pow (2.0e+0, pretmp_105);
  pretmp_109 = _106 * 8.4999999999999997779553950749686919152736663818359375e-1;
  pretmp_110 = pretmp_97->row_pred;
  pretmp_112 = MEM[(double *)pretmp_110];
  pretmp_114 = MEM[(double *)pretmp_110 + 8B];
  pretmp_116 = pretmp_109 * pretmp_114;
  pretmp_117 = h_5(D)->sh.i_type;
  reciptmp_94 = 1.0e+0 / pretmp_116;
  reciptmp_93 = 1.0e+0 / pretmp_109;

  <bb 15>:
  # i_75 = PHI <i_8(14), i_15(23)>
  # bits_77 = PHI <bits_87(14), bits_14(23)>
  # DEBUG bits => bits_77
  # DEBUG i => i_75
  # DEBUG h => h_5(D)
  # DEBUG y => i_75
  # DEBUG qp => qp_11(D)
  # DEBUG D#26 => h_5(D)->rc
  # DEBUG rc => D#26
  _28 = (long unsigned int) i_75;
  _29 = _28 * 4;
  _30 = pretmp_101 + _29;
  _31 = *_30;
  _32 = (double) _31;
  # DEBUG D#25 => (double) qp_11(D)
  # DEBUG qp => D#25
  # DEBUG qp => NULL
  # DEBUG D#24 => D#26->row_pred
  # DEBUG D#4 => D#24
  # DEBUG D#4 => D#24
  # DEBUG q => NULL
  # DEBUG var => _32
  # DEBUG p => D#4
  # DEBUG p => D#4
  _41 = _32 * pretmp_112;
  pred_t_43 = reciptmp_94 * _41;
  # DEBUG q => NULL
  # DEBUG var => NULL
  # DEBUG pred_s => NULL
  # DEBUG pred_t => 0.0
  if (pretmp_117 != 2)
    goto <bb 16>;
  else
    goto <bb 21>;

  <bb 16>:
  _45 = h_5(D)->fref0[0];
  _46 = _45->i_type;
  _47 = pretmp_99->i_type;
  if (_46 == _47)
    goto <bb 17>;
  else
    goto <bb 21>;

  <bb 17>:
  _48 = _45->i_row_satd;
  _49 = _48 + _29;
  _50 = *_49;
  if (_50 > 0)
    goto <bb 18>;
  else
    goto <bb 21>;

  <bb 18>:
  _51 = _50 - _31;
  _52 = ABS_EXPR <_51>;
  _53 = _31 / 2;
  if (_52 < _53)
    goto <bb 19>;
  else
    goto <bb 21>;

  <bb 19>:
  _54 = _45->i_row_bits;
  _55 = _54 + _29;
  _56 = *_55;
  _57 = _31 * _56;
  _58 = _57 / _50;
  _59 = (double) _58;
  _60 = _45->i_row_qp;
  _61 = _60 + _29;
  _62 = *_61;
  _63 = (double) _62;
  # DEBUG qp => _63
  _64 = _63 - 1.2e+1;
  _65 = _64 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _66 = pow (2.0e+0, _65);
  _74 = _59 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  _68 = _66 * _74;
  # DEBUG qp => D#25
  # DEBUG qp => NULL
  pred_t_69 = reciptmp_93 * _68;
  # DEBUG pred_t => pred_t_69
  # DEBUG pred_t => pred_t_69
  if (pred_t_69 == 0.0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:

  <bb 21>:
  # pred_t_71 = PHI <pred_t_69(19), pred_t_43(20), pred_t_43(17), pred_t_43(18), pred_t_43(15), pred_t_43(16)>
  # DEBUG pred_t => pred_t_71
  _72 = pred_t_43 + pred_t_71;
  _73 = _72 * 5.0e-1;
  # DEBUG h => NULL
  # DEBUG y => NULL
  # DEBUG qp => NULL
  # DEBUG pred_t => NULL
  # DEBUG rc => NULL
  bits_14 = _73 + bits_77;
  # DEBUG bits => bits_14
  i_15 = i_75 + 1;
  # DEBUG i => i_15
  # DEBUG bits => bits_14
  # DEBUG i => i_15
  if (i_15 < _81)
    goto <bb 23>;
  else
    goto <bb 22>;

  <bb 22>:
  # bits_96 = PHI <bits_14(21)>
  goto <bb 24>;

  <bb 23>:
  goto <bb 15>;

  <bb 24>:
  # bits_78 = PHI <bits_96(22), bits_87(13)>
  return bits_78;

}



;; Function ac_energy_mb (ac_energy_mb, funcdef_no=115, decl_uid=6497, cgraph_uid=115, symbol_order=158)


Analyzing loop at encoder/ratecontrol.c:178
encoder/ratecontrol.c:178:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:178:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:178:5: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:178:5: note: bad loop form.
encoder/ratecontrol.c:171:21: note: vectorized 0 loops in function.
ac_energy_mb (struct x264_t * h, int mb_x, int mb_y, struct x264_frame_t * frame)
{
  int pix;
  int offset;
  int stride;
  int w;
  unsigned int i;
  unsigned int sad;
  unsigned int var;
  int (*<Tfa8>) (uint8_t *, int, uint32_t *) _1;
  int _11;
  int _13;
  int _14;
  int _16;
  int _17;
  int _18;
  int _19;
  int _21;
  int _22;
  int (*<Tfa8>) (uint8_t *, int, uint32_t *) _25;
  uint8_t * _26;
  sizetype _27;
  uint8_t * _28;
  int _30;
  unsigned int _31;
  int _36;
  uint8_t * _39;
  sizetype _40;
  unsigned int _41;
  int _42;
  uint8_t * _47;

  <bb 2>:
  # DEBUG var => 0
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG var => 0
  goto <bb 4>;

  <bb 3>:
  # var_38 = PHI <var_32(10), var_43(12)>
  # i_5 = PHI <i_33(10), i_48(12)>

  <bb 4>:
  # var_46 = PHI <var_38(3), 0(2)>
  # i_45 = PHI <i_5(3), 0(2)>
  # DEBUG i => i_45
  # DEBUG var => var_46
  if (i_45 != 0)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:

  <bb 6>:
  # w_3 = PHI <8(4), 16(5)>
  # DEBUG w => w_3
  stride_9 = frame_8(D)->i_stride[i_45];
  # DEBUG stride => stride_9
  _11 = h_10(D)->mb.b_interlaced;
  if (_11 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _13 = mb_y_12(D) & -2;
  _14 = stride_9 * _13;
  _16 = _14 + mb_x_15(D);
  _17 = w_3 * _16;
  _18 = mb_y_12(D) & 1;
  _19 = stride_9 * _18;
  offset_20 = _17 + _19;
  goto <bb 9>;

  <bb 8>:
  _21 = stride_9 * mb_y_12(D);
  _22 = mb_x_15(D) + _21;
  offset_23 = w_3 * _22;

  <bb 9>:
  # offset_4 = PHI <offset_20(7), offset_23(8)>
  # DEBUG offset => offset_4
  if (i_45 != 0)
    goto <bb 10>;
  else
    goto <bb 12>;

  <bb 10>:
  # DEBUG pix => 3
  stride_24 = stride_9 << _11;
  # DEBUG stride => stride_24
  _25 = h_10(D)->pixf.var[3];
  _26 = frame_8(D)->plane[i_45];
  _27 = (sizetype) offset_4;
  _28 = _26 + _27;
  _30 = _25 (_28, stride_24, &sad);
  _31 = (unsigned int) _30;
  var_32 = _31 + var_46;
  # DEBUG var => var_32
  i_33 = i_45 + 1;
  # DEBUG i => i_33
  # DEBUG i => i_33
  # DEBUG var => var_32
  if (i_33 != 3)
    goto <bb 3>;
  else
    goto <bb 11>;

  <bb 11>:
  # var_59 = PHI <var_32(10)>
  var_34 = MAX_EXPR <var_59, 1>;
  # DEBUG var => var_34
  x264_emms ();
  _36 = (int) var_34;
  sad ={v} {CLOBBER};
  return _36;

  <bb 12>:
  # DEBUG pix => 0
  stride_2 = stride_9 << _11;
  # DEBUG stride => stride_2
  _1 = h_10(D)->pixf.var[0];
  _39 = frame_8(D)->plane[i_45];
  _40 = (sizetype) offset_4;
  _47 = _39 + _40;
  _42 = _1 (_47, stride_2, &sad);
  _41 = (unsigned int) _42;
  var_43 = _41 + var_46;
  # DEBUG var => var_43
  i_48 = i_45 + 1;
  # DEBUG i => i_48
  # DEBUG i => i_48
  # DEBUG var => var_43
  goto <bb 3>;

}



;; Function get_qscale.isra.6 (get_qscale.isra.6, funcdef_no=155, decl_uid=9236, cgraph_uid=7, symbol_order=245)


Analyzing loop at encoder/ratecontrol.c:667
encoder/ratecontrol.c:667:26: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:667:26: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:667:26: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:667:26: note: bad loop form.
encoder/ratecontrol.c:1122:15: note: vectorized 0 loops in function.
get_qscale.isra.6 (float ISRA.71, struct x264_ratecontrol_t * ISRA.72, struct ratecontrol_entry_t * rce, double rate_factor, int frame_num)
{
  struct x264_ratecontrol_t * rcc;
  double q;
  int i;
  struct x264_zone_t * z;
  int _3;
  long unsigned int _7;
  long unsigned int _8;
  int _10;
  int _12;
  float _15;
  double _16;
  float _18;
  double _19;
  int _21;
  int _22;
  int _23;
  struct x264_zone_t * _27;
  int _28;
  int _29;
  double _30;
  double _31;
  double _32;
  double _33;
  float _35;
  double _36;
  struct x264_zone_t * pretmp_49;

  <bb 2>:
  # DEBUG D#6 s=> h
  # DEBUG h => D#6
  # DEBUG h s=> h
  # DEBUG rcc => ISRA.72_44(D)
  # DEBUG D#1 => D#6
  # DEBUG frame_num => frame_num_11(D)
  # DEBUG h => D#1
  _3 = ISRA.72_44(D)->i_zones;
  i_4 = _3 + -1;
  # DEBUG i => i_4
  # DEBUG i => i_4
  if (i_4 >= 0)
    goto <bb 3>;
  else
    goto <bb 9>;

  <bb 3>:
  pretmp_49 = ISRA.72_44(D)->zones;

  <bb 4>:
  # i_47 = PHI <i_4(3), i_13(8)>
  # DEBUG i => i_47
  _7 = (long unsigned int) i_47;
  _8 = _7 * 32;
  z_9 = pretmp_49 + _8;
  # DEBUG z => z_9
  _10 = z_9->i_start;
  if (_10 <= frame_num_11(D))
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  _12 = z_9->i_end;
  if (frame_num_11(D) <= _12)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  # z_50 = PHI <z_9(5)>
  goto <bb 9>;

  <bb 7>:
  i_13 = i_47 + -1;
  # DEBUG i => i_13
  # DEBUG i => i_13
  if (i_13 >= 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  goto <bb 4>;

  <bb 9>:
  # _27 = PHI <z_50(6), 0B(7), 0B(2)>
  # DEBUG frame_num => NULL
  # DEBUG i => NULL
  # DEBUG z => NULL
  # DEBUG zone => NULL
  _15 = 1.0e+0 - ISRA.71_45(D);
  _16 = (double) _15;
  _18 = rce_17(D)->blurred_complexity;
  _19 = (double) _18;
  q_20 = pow (_19, _16);
  # DEBUG q => q_20
  _21 = rce_17(D)->tex_bits;
  _22 = rce_17(D)->mv_bits;
  _23 = _21 + _22;
  if (_23 == 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  q_24 = ISRA.72_44(D)->last_qscale;
  # DEBUG q => q_24
  goto <bb 12>;

  <bb 11>:
  ISRA.72_44(D)->last_rceq = q_20;
  q_26 = q_20 / rate_factor_25(D);
  # DEBUG q => q_26
  ISRA.72_44(D)->last_qscale = q_26;

  <bb 12>:
  # q_37 = PHI <q_24(10), q_26(11)>
  # DEBUG q => q_37
  if (_27 != 0B)
    goto <bb 13>;
  else
    goto <bb 16>;

  <bb 13>:
  _28 = _27->b_force_qp;
  if (_28 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:
  _29 = _27->i_qp;
  _30 = (double) _29;
  # DEBUG qp => _30
  _31 = _30 - 1.2e+1;
  _32 = _31 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _33 = pow (2.0e+0, _32);
  q_34 = _33 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  # DEBUG q => NULL
  goto <bb 16>;

  <bb 15>:
  _35 = _27->f_bitrate_factor;
  _36 = (double) _35;
  q_38 = q_37 / _36;
  # DEBUG q => q_38

  <bb 16>:
  # q_39 = PHI <q_37(12), q_34(14), q_38(15)>
  # DEBUG q => q_39
  return q_39;

}



;; Function count_expected_bits.isra.9 (count_expected_bits.isra.9, funcdef_no=158, decl_uid=9311, cgraph_uid=9, symbol_order=252)


Analyzing loop at encoder/ratecontrol.c:1663
encoder/ratecontrol.c:1663:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1663:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1663:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _24
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _24 + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
encoder/ratecontrol.c:1663:5: note: Symbolic number of iterations is (unsigned int) _24
encoder/ratecontrol.c:1663:5: note: === vect_analyze_data_refs ===
Creating dr for rce_7->expected_bits
analyze_innermost: success.
	base_address: pretmp_78
	offset from base address: 0
	constant offset from base address: 24
	step: 72
	aligned to: 128
	base_object: *pretmp_78
	Access function 0: 192
	Access function 1: {0B, +, 72}_1
Creating dr for rce_7->new_qscale
analyze_innermost: success.
	base_address: pretmp_78
	offset from base address: 0
	constant offset from base address: 40
	step: 72
	aligned to: 128
	base_object: *pretmp_78
	Access function 0: 320
	Access function 1: {0B, +, 72}_1
Creating dr for MEM[(float *)rce_7 + 8B]
analyze_innermost: success.
	base_address: pretmp_78
	offset from base address: 0
	constant offset from base address: 8
	step: 72
	aligned to: 128
	base_object: MEM[(float *)pretmp_78]
	Access function 0: {8B, +, 72}_1
Creating dr for MEM[(int *)rce_7 + 12B]
analyze_innermost: success.
	base_address: pretmp_78
	offset from base address: 0
	constant offset from base address: 12
	step: 72
	aligned to: 128
	base_object: MEM[(int *)pretmp_78]
	Access function 0: {12B, +, 72}_1
Creating dr for MEM[(int *)rce_7 + 16B]
analyze_innermost: success.
	base_address: pretmp_78
	offset from base address: 0
	constant offset from base address: 16
	step: 72
	aligned to: 128
	base_object: MEM[(int *)pretmp_78]
	Access function 0: {16B, +, 72}_1
Creating dr for MEM[(int *)rce_7 + 20B]
analyze_innermost: success.
	base_address: pretmp_78
	offset from base address: 0
	constant offset from base address: 20
	step: 72
	aligned to: 128
	base_object: MEM[(int *)pretmp_78]
	Access function 0: {20B, +, 72}_1
encoder/ratecontrol.c:1663:5: note: got vectype for stmt: rce_7->expected_bits = _9;
vector(2) long unsigned int
encoder/ratecontrol.c:1663:5: note: got vectype for stmt: _10 = rce_7->new_qscale;
vector(4) float
encoder/ratecontrol.c:1663:5: note: got vectype for stmt: _12 = MEM[(float *)rce_7 + 8B];
vector(4) float
encoder/ratecontrol.c:1663:5: note: got vectype for stmt: _13 = MEM[(int *)rce_7 + 12B];
vector(4) int
encoder/ratecontrol.c:1663:5: note: got vectype for stmt: _14 = MEM[(int *)rce_7 + 16B];
vector(4) int
encoder/ratecontrol.c:1663:5: note: got vectype for stmt: _15 = MEM[(int *)rce_7 + 20B];
vector(4) int
encoder/ratecontrol.c:1663:5: note: === vect_analyze_scalar_cycles ===
encoder/ratecontrol.c:1663:5: note: Analyze phi: i_40 = PHI <0(3), i_18(6)>

encoder/ratecontrol.c:1663:5: note: Access function of PHI: {0, +, 1}_1
encoder/ratecontrol.c:1663:5: note: step: 1,  init: 0
encoder/ratecontrol.c:1663:5: note: Detected induction.
encoder/ratecontrol.c:1663:5: note: Analyze phi: expected_bits_44 = PHI <0.0(3), expected_bits_17(6)>

encoder/ratecontrol.c:1663:5: note: Access function of PHI: {0.0, +, _4 + _41}_1
encoder/ratecontrol.c:1663:5: note: step: _4 + _41,  init: 0.0
encoder/ratecontrol.c:1663:5: note: step unknown.
encoder/ratecontrol.c:1663:5: note: Analyze phi: .MEM_45 = PHI <.MEM_21(D)(3), .MEM_22(6)>

encoder/ratecontrol.c:1663:5: note: Analyze phi: expected_bits_44 = PHI <0.0(3), expected_bits_17(6)>

encoder/ratecontrol.c:1663:5: note: reduction used in loop.
encoder/ratecontrol.c:1663:5: note: Unknown def-use cycle pattern.
encoder/ratecontrol.c:1663:5: note: === vect_pattern_recog ===
encoder/ratecontrol.c:1663:5: note: vect_is_simple_use: operand _5
encoder/ratecontrol.c:1663:5: note: def_stmt: _5 = (long unsigned int) i_40;
encoder/ratecontrol.c:1663:5: note: type of def: 3.
encoder/ratecontrol.c:1663:5: note: vect_is_simple_use: operand i_40
encoder/ratecontrol.c:1663:5: note: def_stmt: i_40 = PHI <0(3), i_18(6)>
encoder/ratecontrol.c:1663:5: note: type of def: 4.
encoder/ratecontrol.c:1663:5: note: vect_is_simple_use: operand 72
encoder/ratecontrol.c:1663:5: note: vect_is_simple_use: operand _26
encoder/ratecontrol.c:1663:5: note: def_stmt: _26 = _25 + 1.000000000000000055511151231257827021181583404541015625e-1;
encoder/ratecontrol.c:1663:5: note: type of def: 3.
encoder/ratecontrol.c:1663:5: note: vect_is_simple_use: operand _34
encoder/ratecontrol.c:1663:5: note: def_stmt: _34 = (double) _13;
encoder/ratecontrol.c:1663:5: note: type of def: 3.
encoder/ratecontrol.c:1663:5: note: === vect_analyze_data_ref_accesses ===
encoder/ratecontrol.c:1663:5: note: Detected interleaving MEM[(int *)rce_7 + 12B] and MEM[(int *)rce_7 + 16B]
encoder/ratecontrol.c:1663:5: note: Detected interleaving MEM[(int *)rce_7 + 12B] and MEM[(int *)rce_7 + 20B]
encoder/ratecontrol.c:1663:5: note: not consecutive access _12 = MEM[(float *)rce_7 + 8B];

encoder/ratecontrol.c:1663:5: note: not vectorized: complicated access pattern.
encoder/ratecontrol.c:1663:5: note: bad data access.
encoder/ratecontrol.c:1658:15: note: vectorized 0 loops in function.
count_expected_bits.isra.9 (struct x264_ratecontrol_t * ISRA.83)
{
  double D.9865;
  double qscale;
  struct x264_ratecontrol_t * rcc;
  double expected_bits;
  int i;
  struct ratecontrol_entry_t * rce;
  double _4;
  long unsigned int _5;
  long unsigned int _6;
  double _8;
  long unsigned int _9;
  float _10;
  float _12;
  int _13;
  int _14;
  int _15;
  int _24;
  double _25;
  double _26;
  double _28;
  double _30;
  double _31;
  double _32;
  double _34;
  double _35;
  double iftmp.23_36;
  double _37;
  double _38;
  double _39;
  double _41;
  struct ratecontrol_entry_t * pretmp_78;

  <bb 2>:
  # DEBUG h s=> h
  # DEBUG rcc => ISRA.83_23(D)
  # DEBUG expected_bits => 0.0
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG expected_bits => 0.0
  _24 = ISRA.83_23(D)->num_entries;
  if (_24 > 0)
    goto <bb 3>;
  else
    goto <bb 7>;

  <bb 3>:
  pretmp_78 = ISRA.83_23(D)->entry;

  <bb 4>:
  # i_40 = PHI <0(3), i_18(6)>
  # expected_bits_44 = PHI <0.0(3), expected_bits_17(6)>
  # DEBUG i => NULL
  # DEBUG expected_bits => NULL
  _5 = (long unsigned int) i_40;
  _6 = _5 * 72;
  rce_7 = pretmp_78 + _6;
  # DEBUG rce => NULL
  _9 = (long unsigned int) expected_bits_44;
  rce_7->expected_bits = _9;
  _10 = rce_7->new_qscale;
  qscale_11 = (double) _10;
  _12 = MEM[(float *)rce_7 + 8B];
  # DEBUG D#8 => NULL
  _13 = MEM[(int *)rce_7 + 12B];
  # DEBUG D#8 => NULL
  _14 = MEM[(int *)rce_7 + 16B];
  # DEBUG D#8 => NULL
  _15 = MEM[(int *)rce_7 + 20B];
  # DEBUG D#8 => NULL
  # DEBUG qscale => NULL
  # DEBUG rce => NULL
  # DEBUG rce => NULL
  # DEBUG rce => NULL
  # DEBUG rce => NULL
  qscale_2 = MAX_EXPR <qscale_11, 1.000000000000000055511151231257827021181583404541015625e-1>;
  # DEBUG qscale => NULL
  _25 = (double) _14;
  _26 = _25 + 1.000000000000000055511151231257827021181583404541015625e-1;
  _28 = (double) _12;
  _30 = _28 / qscale_2;
  _31 = pow (_30, 1.100000000000000088817841970012523233890533447265625e+0);
  _32 = _26 * _31;
  _34 = (double) _13;
  iftmp.23_36 = _12 > 1.0e+0 ? _28 : 1.0e+0;
  _35 = MAX_EXPR <qscale_2, 1.0e+0>;
  _37 = iftmp.23_36 / _35;
  _38 = __builtin_sqrt (_37);
  _39 = _34 * _38;
  _4 = _32 + _39;
  _41 = (double) _15;
  _8 = _41 + expected_bits_44;
  # DEBUG qscale => NULL
  expected_bits_17 = _4 + _8;
  # DEBUG expected_bits => expected_bits_17
  i_18 = i_40 + 1;
  # DEBUG i => i_18
  # DEBUG i => i_18
  # DEBUG expected_bits => expected_bits_17
  if (i_18 < _24)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  # expected_bits_77 = PHI <expected_bits_17(4)>
  goto <bb 7>;

  <bb 6>:
  goto <bb 4>;

  <bb 7>:
  # expected_bits_16 = PHI <expected_bits_77(5), 0.0(2)>
  return expected_bits_16;

}



;; Function find_underflow.isra.8 (find_underflow.isra.8, funcdef_no=157, decl_uid=9288, cgraph_uid=8, symbol_order=251)


Analyzing loop at encoder/ratecontrol.c:1621
encoder/ratecontrol.c:1621:21: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1621:21: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1621:21: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1621:21: note: bad loop form.
encoder/ratecontrol.c:1608:12: note: vectorized 0 loops in function.
find_underflow.isra.8 (struct x264_ratecontrol_t * ISRA.81, double * fills, int * t0, int * t1, int over)
{
  double D.9898;
  double qscale;
  struct x264_ratecontrol_t * rcc;
  const double buffer_min;
  const double buffer_max;
  double fill;
  double parity;
  int end;
  double _3;
  long unsigned int _8;
  long unsigned int _9;
  sizetype _10;
  double * _12;
  double _15;
  long unsigned int _18;
  long unsigned int _19;
  struct ratecontrol_entry_t * _20;
  float _21;
  float _23;
  int _24;
  int _25;
  int _26;
  double _27;
  double _28;
  double _30;
  long unsigned int _35;
  double * _36;
  _Bool _38;
  _Bool _39;
  _Bool _40;
  _Bool _42;
  _Bool _44;
  _Bool _45;
  double _63;
  double _64;
  double _66;
  double _68;
  double _69;
  double _70;
  double _72;
  double _73;
  double iftmp.23_74;
  double _75;
  double _76;
  double _77;
  double _79;
  double _80;
  int _83;
  _Bool pretmp_134;
  _Bool pretmp_135;
  _Bool pretmp_137;
  _Bool pretmp_138;
  _Bool pretmp_140;
  _Bool pretmp_141;
  int pretmp_143;
  int pretmp_144;
  int prephitmp_145;
  struct ratecontrol_entry_t * pretmp_146;
  double pretmp_149;
  double prephitmp_150;

  <bb 2>:
  # DEBUG h s=> h
  # DEBUG rcc => ISRA.81_61(D)
  _3 = ISRA.81_61(D)->buffer_size;
  buffer_min_4 = _3 * 1.000000000000000055511151231257827021181583404541015625e-1;
  # DEBUG buffer_min => buffer_min_4
  buffer_max_5 = _3 * 9.0000000000000002220446049250313080847263336181640625e-1;
  # DEBUG buffer_max => buffer_max_5
  end_7 = *t0_6(D);
  _8 = (long unsigned int) end_7;
  _9 = _8 * 8;
  _10 = _9 + 18446744073709551608;
  _12 = fills_11(D) + _10;
  fill_13 = *_12;
  # DEBUG fill => fill_13
  if (over_14(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:

  <bb 4>:
  # parity_29 = PHI <1.0e+0(2), -1.0e+0(3)>
  # DEBUG parity => parity_29
  # DEBUG start => -1
  # DEBUG end => -1
  # DEBUG i => end_7
  # DEBUG end => -1
  # DEBUG start => -1
  # DEBUG i => end_7
  # DEBUG fill => fill_13
  _83 = ISRA.81_61(D)->num_entries;
  if (end_7 < _83)
    goto <bb 5>;
  else
    goto <bb 18>;

  <bb 5>:
  pretmp_146 = ISRA.81_61(D)->entry;

  <bb 6>:
  # end_82 = PHI <end_7(5), end_46(16)>
  # fill_78 = PHI <fill_13(5), fill_37(16)>
  # end_65 = PHI <-1(5), end_54(16)>
  # end_86 = PHI <-1(5), end_53(16)>
  # prephitmp_150 = PHI <_3(5), pretmp_149(16)>
  # DEBUG end => end_65
  # DEBUG start => end_86
  # DEBUG i => end_82
  # DEBUG fill => fill_78
  _15 = ISRA.81_61(D)->buffer_rate;
  _18 = (long unsigned int) end_82;
  _19 = _18 * 72;
  _20 = pretmp_146 + _19;
  _21 = _20->new_qscale;
  qscale_22 = (double) _21;
  _23 = MEM[(float *)_20 + 8B];
  # DEBUG D#8 => _20
  _24 = MEM[(int *)_20 + 12B];
  # DEBUG D#8 => _20
  _25 = MEM[(int *)_20 + 16B];
  # DEBUG D#8 => _20
  _26 = MEM[(int *)_20 + 20B];
  # DEBUG D#8 => _20
  # DEBUG qscale => qscale_22
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  qscale_2 = MAX_EXPR <qscale_22, 1.000000000000000055511151231257827021181583404541015625e-1>;
  # DEBUG qscale => qscale_2
  _63 = (double) _25;
  _64 = _63 + 1.000000000000000055511151231257827021181583404541015625e-1;
  _66 = (double) _23;
  _68 = _66 / qscale_2;
  _69 = pow (_68, 1.100000000000000088817841970012523233890533447265625e+0);
  _70 = _64 * _69;
  _72 = (double) _24;
  if (_23 > 1.0e+0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:

  <bb 8>:
  # iftmp.23_74 = PHI <1.0e+0(6), _66(7)>
  _73 = MAX_EXPR <qscale_2, 1.0e+0>;
  _75 = iftmp.23_74 / _73;
  _76 = __builtin_sqrt (_75);
  _77 = _72 * _76;
  _79 = (double) _26;
  _27 = _15 - _79;
  _80 = _70 + _77;
  # DEBUG qscale => NULL
  _28 = _27 - _80;
  _30 = _28 * parity_29;
  fill_32 = _30 + fill_78;
  # DEBUG fill => fill_32
  # DEBUG D#50 => ISRA.81_61(D)->buffer_size
  # DEBUG v => fill_32
  # DEBUG f_min => 0.0
  # DEBUG f_max => D#50
  if (fill_32 >= 0.0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  fill_34 = MIN_EXPR <fill_32, prephitmp_150>;

  <bb 10>:
  # fill_37 = PHI <0.0(8), fill_34(9)>
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  # DEBUG fill => NULL
  _35 = _18 * 8;
  _36 = fills_11(D) + _35;
  *_36 = fill_37;
  _38 = buffer_min_4 >= fill_37;
  _39 = end_82 == 0;
  _40 = _38 | _39;
  if (_40 != 0)
    goto <bb 11>;
  else
    goto <bb 13>;

  <bb 11>:
  if (end_65 >= 0)
    goto <bb 12>;
  else
    goto <bb 15>;

  <bb 12>:
  # end_131 = PHI <end_65(11)>
  # end_130 = PHI <end_86(11)>
  pretmp_134 = end_130 >= 0;
  pretmp_137 = end_131 >= 0;
  pretmp_140 = pretmp_134 & pretmp_137;
  pretmp_143 = (int) pretmp_140;
  goto <bb 18>;

  <bb 13>:
  _42 = buffer_max_5 <= fill_37;
  _44 = end_86 >= 0;
  _45 = _42 & _44;
  if (_45 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:

  <bb 15>:
  # end_53 = PHI <end_82(11), end_86(13), end_86(14)>
  # end_54 = PHI <end_65(11), end_65(13), end_82(14)>
  # DEBUG end => end_54
  # DEBUG start => end_53
  end_46 = end_82 + 1;
  # DEBUG i => end_46
  # DEBUG end => end_54
  # DEBUG start => end_53
  # DEBUG i => end_46
  # DEBUG fill => fill_37
  if (end_46 < _83)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  pretmp_149 = ISRA.81_61(D)->buffer_size;
  goto <bb 6>;

  <bb 17>:
  # end_133 = PHI <end_53(15)>
  # end_132 = PHI <end_54(15)>
  pretmp_135 = end_133 >= 0;
  pretmp_138 = end_132 >= 0;
  pretmp_141 = pretmp_135 & pretmp_138;
  pretmp_144 = (int) pretmp_141;

  <bb 18>:
  # end_85 = PHI <end_131(12), end_132(17), -1(4)>
  # end_87 = PHI <end_130(12), end_133(17), -1(4)>
  # prephitmp_145 = PHI <pretmp_143(12), pretmp_144(17), 0(4)>
  *t0_6(D) = end_87;
  *t1_48(D) = end_85;
  return prephitmp_145;

}



;; Function x264_adaptive_quant_frame (x264_adaptive_quant_frame, funcdef_no=116, decl_uid=6356, cgraph_uid=116, symbol_order=159)


Analyzing loop at encoder/ratecontrol.c:197
encoder/ratecontrol.c:197:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:197:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:197:5: note: ===== analyze_loop_nest_1 =====
encoder/ratecontrol.c:197:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:197:5: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:197:5: note: bad inner-loop form.
encoder/ratecontrol.c:197:5: note: not vectorized: Bad inner loop.
encoder/ratecontrol.c:197:5: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:198
encoder/ratecontrol.c:198:9: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:198:9: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:198:9: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:198:9: note: bad loop form.
encoder/ratecontrol.c:194:6: note: vectorized 0 loops in function.
x264_adaptive_quant_frame (struct x264_t * h, struct x264_frame_t * frame)
{
  float qp_adj;
  int energy;
  int mb_y;
  int mb_x;
  struct x264_sps_t * _1;
  double _2;
  struct x264_sps_t * prephitmp_5;
  int _9;
  struct x264_sps_t * _10;
  int _11;
  float _15;
  double _16;
  float _17;
  float _18;
  double _19;
  double _20;
  double _22;
  float * _24;
  int _25;
  int _26;
  int _27;
  long unsigned int _28;
  long unsigned int _29;
  float * _30;
  int _32;
  uint16_t * _33;
  long unsigned int _35;
  uint16_t * _36;
  float _37;
  double _38;
  double _39;
  double _40;
  double _41;
  double _42;
  int _43;
  short unsigned int _44;
  struct x264_sps_t * _51;
  int _52;
  struct x264_sps_t * prephitmp_53;
  int _55;

  <bb 2>:
  # DEBUG mb_y => 0
  # DEBUG mb_y => 0
  _51 = h_7(D)->sps;
  _52 = _51->i_mb_height;
  if (_52 > 0)
    goto <bb 11>;
  else
    goto <bb 13>;

  <bb 3>:

  <bb 4>:
  # mb_x_56 = PHI <0(3), mb_x_46(7)>
  # DEBUG mb_x => mb_x_56
  energy_14 = ac_energy_mb (h_7(D), mb_x_56, mb_y_57, frame_12(D));
  # DEBUG energy => energy_14
  _15 = h_7(D)->param.rc.f_aq_strength;
  _16 = (double) _15;
  _17 = (float) energy_14;
  _18 = logf (_17);
  _19 = (double) _18;
  _20 = _19 - 1.0e+1;
  _2 = _16 * 1.5e+0;
  _22 = _2 * _20;
  qp_adj_23 = (float) _22;
  # DEBUG qp_adj => qp_adj_23
  _24 = frame_12(D)->f_qp_offset;
  _25 = h_7(D)->mb.i_mb_stride;
  _26 = _25 * mb_y_57;
  _27 = _26 + mb_x_56;
  _28 = (long unsigned int) _27;
  _29 = _28 * 4;
  _30 = _24 + _29;
  *_30 = qp_adj_23;
  _32 = h_7(D)->frames.b_have_lowres;
  if (_32 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  _33 = frame_12(D)->i_inv_qscale_factor;
  _35 = _28 * 2;
  _36 = _33 + _35;
  _37 = -qp_adj_23;
  _38 = (double) _37;
  _39 = _38 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _40 = pow (2.0e+0, _39);
  _41 = _40 * 2.56e+2;
  _42 = _41 + 5.0e-1;
  _43 = (int) _42;
  _44 = (short unsigned int) _43;
  *_36 = _44;

  <bb 6>:
  mb_x_46 = mb_x_56 + 1;
  # DEBUG mb_x => mb_x_46
  # DEBUG mb_x => mb_x_46
  _10 = h_7(D)->sps;
  _11 = _10->i_mb_width;
  if (_11 > mb_x_46)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 4>;

  <bb 8>:
  # _1 = PHI <_10(6)>

  <bb 9>:
  # prephitmp_53 = PHI <_1(8), prephitmp_5(12)>
  mb_y_47 = mb_y_57 + 1;
  # DEBUG mb_y => mb_y_47
  # DEBUG mb_y => mb_y_47
  _9 = prephitmp_53->i_mb_height;
  if (_9 > mb_y_47)
    goto <bb 10>;
  else
    goto <bb 13>;

  <bb 10>:
  goto <bb 12>;

  <bb 11>:

  <bb 12>:
  # mb_y_57 = PHI <0(11), mb_y_47(10)>
  # prephitmp_5 = PHI <_51(11), prephitmp_53(10)>
  # DEBUG mb_y => mb_y_57
  # DEBUG mb_x => 0
  _55 = prephitmp_5->i_mb_width;
  if (_55 > 0)
    goto <bb 3>;
  else
    goto <bb 9>;

  <bb 13>:
  return;

}



;; Function x264_ratecontrol_new (x264_ratecontrol_new, funcdef_no=118, decl_uid=6351, cgraph_uid=118, symbol_order=161)


Analyzing loop at encoder/ratecontrol.c:544
encoder/ratecontrol.c:544:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:544:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:544:5: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:544:5: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1888
encoder/ratecontrol.c:1888:9: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1888:9: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1888:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 15
  exit condition [1, + , 1](no_overflow) < _378
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _378 + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
encoder/ratecontrol.c:1888:9: note: Symbolic number of iterations is (unsigned int) _378
encoder/ratecontrol.c:1888:9: note: === vect_analyze_data_refs ===
Creating dr for _810->new_qscale
analyze_innermost: success.
	base_address: pretmp_1763
	offset from base address: 0
	constant offset from base address: 40
	step: 72
	aligned to: 128
	base_object: *pretmp_1763
	Access function 0: 320
	Access function 1: {0B, +, 72}_15
encoder/ratecontrol.c:1888:9: note: got vectype for stmt: _811 = _810->new_qscale;
vector(4) float
encoder/ratecontrol.c:1888:9: note: === vect_analyze_scalar_cycles ===
encoder/ratecontrol.c:1888:9: note: Analyze phi: i_1334 = PHI <0(343), i_815(346)>

encoder/ratecontrol.c:1888:9: note: Access function of PHI: {0, +, 1}_15
encoder/ratecontrol.c:1888:9: note: step: 1,  init: 0
encoder/ratecontrol.c:1888:9: note: Detected induction.
encoder/ratecontrol.c:1888:9: note: Analyze phi: avgq_1331 = PHI <0.0(343), avgq_814(346)>

encoder/ratecontrol.c:1888:9: note: Access function of PHI: {0.0, +, _812}_15
encoder/ratecontrol.c:1888:9: note: step: _812,  init: 0.0
encoder/ratecontrol.c:1888:9: note: step unknown.
encoder/ratecontrol.c:1888:9: note: Analyze phi: avgq_1331 = PHI <0.0(343), avgq_814(346)>

encoder/ratecontrol.c:1888:9: note: detected reduction: avgq_814 = _812 + avgq_1331;

encoder/ratecontrol.c:1888:9: note: Detected reduction.
encoder/ratecontrol.c:1888:9: note: === vect_pattern_recog ===
encoder/ratecontrol.c:1888:9: note: vect_is_simple_use: operand _808
encoder/ratecontrol.c:1888:9: note: def_stmt: _808 = (long unsigned int) i_1334;
encoder/ratecontrol.c:1888:9: note: type of def: 3.
encoder/ratecontrol.c:1888:9: note: vect_is_simple_use: operand i_1334
encoder/ratecontrol.c:1888:9: note: def_stmt: i_1334 = PHI <0(343), i_815(346)>
encoder/ratecontrol.c:1888:9: note: type of def: 4.
encoder/ratecontrol.c:1888:9: note: vect_is_simple_use: operand 72
encoder/ratecontrol.c:1888:9: note: vect_is_simple_use: operand _812
encoder/ratecontrol.c:1888:9: note: def_stmt: _812 = (double) _811;
encoder/ratecontrol.c:1888:9: note: type of def: 3.
encoder/ratecontrol.c:1888:9: note: vect_is_simple_use: operand _812
encoder/ratecontrol.c:1888:9: note: def_stmt: _812 = (double) _811;
encoder/ratecontrol.c:1888:9: note: type of def: 3.
encoder/ratecontrol.c:1888:9: note: vect_is_simple_use: operand _812
encoder/ratecontrol.c:1888:9: note: def_stmt: _812 = (double) _811;
encoder/ratecontrol.c:1888:9: note: type of def: 3.
encoder/ratecontrol.c:1888:9: note: === vect_analyze_data_ref_accesses ===
encoder/ratecontrol.c:1888:9: note: not consecutive access _811 = _810->new_qscale;

encoder/ratecontrol.c:1888:9: note: not vectorized: complicated access pattern.
encoder/ratecontrol.c:1888:9: note: bad data access.

Analyzing loop at encoder/ratecontrol.c:1727
encoder/ratecontrol.c:1727:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1727:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1727:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 27
  exit condition [1, + , 1](no_overflow) < _741
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _741 + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
encoder/ratecontrol.c:1727:5: note: Symbolic number of iterations is (unsigned int) _741
encoder/ratecontrol.c:1727:5: note: === vect_analyze_data_refs ===
Creating dr for *_1098
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: fills_997
	offset from base address: 0
	constant offset from base address: 8
	step: 8
	aligned to: 128
	base_object: *fills_997
	Access function 0: {8B, +, 8}_27
Creating dr for _1095->expected_vbv
analyze_innermost: success.
	base_address: pretmp_1773
	offset from base address: 0
	constant offset from base address: 32
	step: 72
	aligned to: 128
	base_object: *pretmp_1773
	Access function 0: 256
	Access function 1: {0B, +, 72}_27
encoder/ratecontrol.c:1727:5: note: got vectype for stmt: _1099 = *_1098;
vector(2) double
encoder/ratecontrol.c:1727:5: note: got vectype for stmt: _1095->expected_vbv = _1100;
vector(2) double
encoder/ratecontrol.c:1727:5: note: === vect_analyze_scalar_cycles ===
encoder/ratecontrol.c:1727:5: note: Analyze phi: i_1325 = PHI <0(337), i_1101(340)>

encoder/ratecontrol.c:1727:5: note: Access function of PHI: {0, +, 1}_27
encoder/ratecontrol.c:1727:5: note: step: 1,  init: 0
encoder/ratecontrol.c:1727:5: note: Detected induction.
encoder/ratecontrol.c:1727:5: note: Analyze phi: .MEM_1261 = PHI <.MEM_1127(337), .MEM_1227(340)>

encoder/ratecontrol.c:1727:5: note: === vect_pattern_recog ===
encoder/ratecontrol.c:1727:5: note: vect_is_simple_use: operand _1093
encoder/ratecontrol.c:1727:5: note: def_stmt: _1093 = (long unsigned int) i_1325;
encoder/ratecontrol.c:1727:5: note: type of def: 3.
encoder/ratecontrol.c:1727:5: note: vect_is_simple_use: operand i_1325
encoder/ratecontrol.c:1727:5: note: def_stmt: i_1325 = PHI <0(337), i_1101(340)>
encoder/ratecontrol.c:1727:5: note: type of def: 4.
encoder/ratecontrol.c:1727:5: note: vect_is_simple_use: operand 72
encoder/ratecontrol.c:1727:5: note: vect_is_simple_use: operand _1093
encoder/ratecontrol.c:1727:5: note: def_stmt: _1093 = (long unsigned int) i_1325;
encoder/ratecontrol.c:1727:5: note: type of def: 3.
encoder/ratecontrol.c:1727:5: note: vect_is_simple_use: operand i_1325
encoder/ratecontrol.c:1727:5: note: def_stmt: i_1325 = PHI <0(337), i_1101(340)>
encoder/ratecontrol.c:1727:5: note: type of def: 4.
encoder/ratecontrol.c:1727:5: note: vect_is_simple_use: operand 8
encoder/ratecontrol.c:1727:5: note: === vect_analyze_data_ref_accesses ===
encoder/ratecontrol.c:1727:5: note: not consecutive access _1095->expected_vbv = _1100;

encoder/ratecontrol.c:1727:5: note: not vectorized: complicated access pattern.
encoder/ratecontrol.c:1727:5: note: bad data access.

Analyzing loop at encoder/ratecontrol.c:1713
encoder/ratecontrol.c:1713:24: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1713:24: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1713:24: note: not vectorized: multiple nested loops.
encoder/ratecontrol.c:1713:24: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1706
encoder/ratecontrol.c:1706:30: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1706:30: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1706:30: note: ===== analyze_loop_nest_1 =====
encoder/ratecontrol.c:1706:30: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1706:30: note: === get_loop_niters ===
Applying pattern match.pd:49, generic-match.c:3223
Analyzing # of iterations of loop 32
  exit condition [t0_61 + 1, + , 1](no_overflow) <= t1.24_1027
  bounds on difference of bases: -1 ... 4294967294
Applying pattern match.pd:442, generic-match.c:3412
Applying pattern match.pd:628, generic-match.c:1309
  result:
    # of iterations (unsigned int) t1.24_1027 - (unsigned int) t0_61, bounded by 4294967295
encoder/ratecontrol.c:1706:30: note: Symbolic number of iterations is ((unsigned int) t1.24_1027 - (unsigned int) t0_61) + 1
encoder/ratecontrol.c:1706:30: note: not vectorized: inner-loop count not invariant.
encoder/ratecontrol.c:1706:30: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1646
encoder/ratecontrol.c:1646:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1646:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1646:5: note: === get_loop_niters ===
encoder/ratecontrol.c:1646:5: note: Symbolic number of iterations is ((unsigned int) t1.24_1027 - (unsigned int) t0_61) + 1
encoder/ratecontrol.c:1646:5: note: === vect_analyze_data_refs ===
Creating dr for _1035->new_qscale
analyze_innermost: success.
	base_address: pretmp_1786 + (sizetype) ((long unsigned int) t0_61 * 72)
	offset from base address: 0
	constant offset from base address: 40
	step: 72
	aligned to: 128
	base_object: *pretmp_1786 + (sizetype) ((long unsigned int) t0_61 * 72)
	Access function 0: 320
	Access function 1: {0B, +, 72}_32
Creating dr for _1035->new_qscale
analyze_innermost: success.
	base_address: pretmp_1786 + (sizetype) ((long unsigned int) t0_61 * 72)
	offset from base address: 0
	constant offset from base address: 40
	step: 72
	aligned to: 128
	base_object: *pretmp_1786 + (sizetype) ((long unsigned int) t0_61 * 72)
	Access function 0: 320
	Access function 1: {0B, +, 72}_32
encoder/ratecontrol.c:1646:5: note: got vectype for stmt: _1036 = _1035->new_qscale;
vector(4) float
encoder/ratecontrol.c:1646:5: note: got vectype for stmt: _1035->new_qscale = _1043;
vector(4) float
encoder/ratecontrol.c:1646:5: note: === vect_analyze_scalar_cycles ===
encoder/ratecontrol.c:1646:5: note: Analyze phi: t0_1329 = PHI <t0_61(307), t0_1049(309)>

encoder/ratecontrol.c:1646:5: note: Access function of PHI: {t0_61, +, 1}_32
encoder/ratecontrol.c:1646:5: note: step: 1,  init: t0_61
encoder/ratecontrol.c:1646:5: note: Detected induction.
encoder/ratecontrol.c:1646:5: note: Analyze phi: adj_min_1240 = PHI <0(307), adj_min_1048(309)>

encoder/ratecontrol.c:1646:5: note: Access function of PHI: adj_min_1240
encoder/ratecontrol.c:1646:5: note: Analyze phi: .MEM_1315 = PHI <.MEM_1218(307), .MEM_1219(309)>

encoder/ratecontrol.c:1646:5: note: Analyze phi: adj_min_1240 = PHI <0(307), adj_min_1048(309)>

encoder/ratecontrol.c:1646:5: note: reduction: not commutative/associative: adj_min_1048 = (int) _1047;

encoder/ratecontrol.c:1646:5: note: Unknown def-use cycle pattern.
encoder/ratecontrol.c:1646:5: note: === vect_pattern_recog ===
encoder/ratecontrol.c:1646:5: note: vect_is_simple_use: operand _1033
encoder/ratecontrol.c:1646:5: note: def_stmt: _1033 = (long unsigned int) t0_1329;
encoder/ratecontrol.c:1646:5: note: type of def: 3.
encoder/ratecontrol.c:1646:5: note: vect_is_simple_use: operand t0_1329
encoder/ratecontrol.c:1646:5: note: def_stmt: t0_1329 = PHI <t0_61(307), t0_1049(309)>
encoder/ratecontrol.c:1646:5: note: type of def: 4.
encoder/ratecontrol.c:1646:5: note: vect_is_simple_use: operand 72
encoder/ratecontrol.c:1646:5: note: vect_is_simple_use: operand adjustment_1022
encoder/ratecontrol.c:1646:5: note: def_stmt: adjustment_1022 = MAX_EXPR <_1021, 9.0000000000000002220446049250313080847263336181640625e-1>;
encoder/ratecontrol.c:1646:5: note: type of def: 2.
encoder/ratecontrol.c:1646:5: note: vect_is_simple_use: operand _1047
encoder/ratecontrol.c:1646:5: note: def_stmt: _1047 = _1045 | _1046;
encoder/ratecontrol.c:1646:5: note: type of def: 3.
encoder/ratecontrol.c:1646:5: note: === vect_analyze_data_ref_accesses ===
encoder/ratecontrol.c:1646:5: note: not consecutive access _1036 = _1035->new_qscale;

encoder/ratecontrol.c:1646:5: note: not vectorized: complicated access pattern.
encoder/ratecontrol.c:1646:5: note: bad data access.

Analyzing loop at encoder/ratecontrol.c:1717
encoder/ratecontrol.c:1717:26: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1717:26: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1717:26: note: ===== analyze_loop_nest_1 =====
encoder/ratecontrol.c:1717:26: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1717:26: note: === get_loop_niters ===
Applying pattern match.pd:49, generic-match.c:3223
Analyzing # of iterations of loop 30
  exit condition [t0_1103 + 1, + , 1](no_overflow) <= t1.24_1058
  bounds on difference of bases: -1 ... 4294967294
Applying pattern match.pd:442, generic-match.c:3412
Applying pattern match.pd:628, generic-match.c:1309
  result:
    # of iterations (unsigned int) t1.24_1058 - (unsigned int) t0_1103, bounded by 4294967295
encoder/ratecontrol.c:1717:26: note: Symbolic number of iterations is ((unsigned int) t1.24_1058 - (unsigned int) t0_1103) + 1
encoder/ratecontrol.c:1717:26: note: not vectorized: inner-loop count not invariant.
encoder/ratecontrol.c:1717:26: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1646
encoder/ratecontrol.c:1646:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1646:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1646:5: note: === get_loop_niters ===
encoder/ratecontrol.c:1646:5: note: Symbolic number of iterations is ((unsigned int) t1.24_1058 - (unsigned int) t0_1103) + 1
encoder/ratecontrol.c:1646:5: note: === vect_analyze_data_refs ===
Creating dr for _1066->new_qscale
analyze_innermost: success.
	base_address: pretmp_1789 + (sizetype) ((long unsigned int) t0_1103 * 72)
	offset from base address: 0
	constant offset from base address: 40
	step: 72
	aligned to: 128
	base_object: *pretmp_1789 + (sizetype) ((long unsigned int) t0_1103 * 72)
	Access function 0: 320
	Access function 1: {0B, +, 72}_30
Creating dr for _1066->new_qscale
analyze_innermost: success.
	base_address: pretmp_1789 + (sizetype) ((long unsigned int) t0_1103 * 72)
	offset from base address: 0
	constant offset from base address: 40
	step: 72
	aligned to: 128
	base_object: *pretmp_1789 + (sizetype) ((long unsigned int) t0_1103 * 72)
	Access function 0: 320
	Access function 1: {0B, +, 72}_30
encoder/ratecontrol.c:1646:5: note: got vectype for stmt: _1067 = _1066->new_qscale;
vector(4) float
encoder/ratecontrol.c:1646:5: note: got vectype for stmt: _1066->new_qscale = _1074;
vector(4) float
encoder/ratecontrol.c:1646:5: note: === vect_analyze_scalar_cycles ===
encoder/ratecontrol.c:1646:5: note: Analyze phi: t0_1327 = PHI <t0_1103(321), t0_1080(323)>

encoder/ratecontrol.c:1646:5: note: Access function of PHI: {t0_1103, +, 1}_30
encoder/ratecontrol.c:1646:5: note: step: 1,  init: t0_1103
encoder/ratecontrol.c:1646:5: note: Detected induction.
encoder/ratecontrol.c:1646:5: note: Analyze phi: adj_max_1104 = PHI <0(321), adj_max_1079(323)>

encoder/ratecontrol.c:1646:5: note: Access function of PHI: adj_max_1104
encoder/ratecontrol.c:1646:5: note: Analyze phi: .MEM_1260 = PHI <.MEM_1223(321), .MEM_1224(323)>

encoder/ratecontrol.c:1646:5: note: Analyze phi: adj_max_1104 = PHI <0(321), adj_max_1079(323)>

encoder/ratecontrol.c:1646:5: note: reduction: not commutative/associative: adj_max_1079 = (int) _1078;

encoder/ratecontrol.c:1646:5: note: Unknown def-use cycle pattern.
encoder/ratecontrol.c:1646:5: note: === vect_pattern_recog ===
encoder/ratecontrol.c:1646:5: note: vect_is_simple_use: operand _1064
encoder/ratecontrol.c:1646:5: note: def_stmt: _1064 = (long unsigned int) t0_1327;
encoder/ratecontrol.c:1646:5: note: type of def: 3.
encoder/ratecontrol.c:1646:5: note: vect_is_simple_use: operand t0_1327
encoder/ratecontrol.c:1646:5: note: def_stmt: t0_1327 = PHI <t0_1103(321), t0_1080(323)>
encoder/ratecontrol.c:1646:5: note: type of def: 4.
encoder/ratecontrol.c:1646:5: note: vect_is_simple_use: operand 72
encoder/ratecontrol.c:1646:5: note: vect_is_simple_use: operand iftmp.16_1070
encoder/ratecontrol.c:1646:5: note: def_stmt: iftmp.16_1070 = _1011 <= qscale_orig_1068 ? iftmp.16_1069 : _1011;
encoder/ratecontrol.c:1646:5: note: type of def: 3.
encoder/ratecontrol.c:1646:5: note: vect_is_simple_use: operand _1078
encoder/ratecontrol.c:1646:5: note: def_stmt: _1078 = _1076 | _1077;
encoder/ratecontrol.c:1646:5: note: type of def: 3.
encoder/ratecontrol.c:1646:5: note: === vect_analyze_data_ref_accesses ===
encoder/ratecontrol.c:1646:5: note: not consecutive access _1067 = _1066->new_qscale;

encoder/ratecontrol.c:1646:5: note: not vectorized: complicated access pattern.
encoder/ratecontrol.c:1646:5: note: bad data access.

Analyzing loop at encoder/ratecontrol.c:1819
encoder/ratecontrol.c:1819:23: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1819:23: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1819:23: note: not vectorized: multiple nested loops.
encoder/ratecontrol.c:1819:23: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1868
encoder/ratecontrol.c:1868:40: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1868:40: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1868:40: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1868:40: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1843
encoder/ratecontrol.c:1843:13: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1843:13: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1843:13: note: ===== analyze_loop_nest_1 =====
encoder/ratecontrol.c:1843:13: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1843:13: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1843:13: note: bad inner-loop form.
encoder/ratecontrol.c:1843:13: note: not vectorized: Bad inner loop.
encoder/ratecontrol.c:1843:13: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1849
encoder/ratecontrol.c:1849:17: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1849:17: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1849:17: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1849:17: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1835
encoder/ratecontrol.c:1835:19: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1835:19: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1835:19: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1835:19: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1827
encoder/ratecontrol.c:1827:9: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1827:9: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1827:9: note: === get_loop_niters ===
encoder/ratecontrol.c:1827:9: note: not vectorized: number of iterations cannot be computed.
encoder/ratecontrol.c:1827:9: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1812
encoder/ratecontrol.c:1812:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1812:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1812:5: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1812:5: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1764
encoder/ratecontrol.c:1764:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1764:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1764:5: note: not vectorized: multiple nested loops.
encoder/ratecontrol.c:1764:5: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1787
encoder/ratecontrol.c:1787:53: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1787:53: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1787:53: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1787:53: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1775
encoder/ratecontrol.c:1775:53: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1775:53: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1775:53: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1775:53: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1747
encoder/ratecontrol.c:1747:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1747:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1747:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 26
  exit condition [1, + , 1](no_overflow) < _564
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _564 + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
encoder/ratecontrol.c:1747:5: note: Symbolic number of iterations is (unsigned int) _564
encoder/ratecontrol.c:1747:5: note: === vect_analyze_data_refs ===
Creating dr for rce_582->misc_bits
analyze_innermost: success.
	base_address: pretmp_1820
	offset from base address: 0
	constant offset from base address: 20
	step: 72
	aligned to: 128
	base_object: *pretmp_1820
	Access function 0: 160
	Access function 1: {0B, +, 72}_26
encoder/ratecontrol.c:1747:5: note: got vectype for stmt: _583 = rce_582->misc_bits;
vector(4) int
encoder/ratecontrol.c:1747:5: note: === vect_analyze_scalar_cycles ===
encoder/ratecontrol.c:1747:5: note: Analyze phi: i_1382 = PHI <0(192), i_587(194)>

encoder/ratecontrol.c:1747:5: note: Access function of PHI: {0, +, 1}_26
encoder/ratecontrol.c:1747:5: note: step: 1,  init: 0
encoder/ratecontrol.c:1747:5: note: Detected induction.
encoder/ratecontrol.c:1747:5: note: Analyze phi: all_const_bits_1404 = PHI <0(192), all_const_bits_586(194)>

encoder/ratecontrol.c:1747:5: note: Access function of PHI: {0, +, _584}_26
encoder/ratecontrol.c:1747:5: note: step: _584,  init: 0
encoder/ratecontrol.c:1747:5: note: step unknown.
encoder/ratecontrol.c:1747:5: note: Analyze phi: all_const_bits_1404 = PHI <0(192), all_const_bits_586(194)>

encoder/ratecontrol.c:1747:5: note: detected reduction: all_const_bits_586 = _584 + all_const_bits_1404;

encoder/ratecontrol.c:1747:5: note: Detected reduction.
encoder/ratecontrol.c:1747:5: note: === vect_pattern_recog ===
encoder/ratecontrol.c:1747:5: note: vect_is_simple_use: operand _580
encoder/ratecontrol.c:1747:5: note: def_stmt: _580 = (long unsigned int) i_1382;
encoder/ratecontrol.c:1747:5: note: type of def: 3.
encoder/ratecontrol.c:1747:5: note: vect_is_simple_use: operand i_1382
encoder/ratecontrol.c:1747:5: note: def_stmt: i_1382 = PHI <0(192), i_587(194)>
encoder/ratecontrol.c:1747:5: note: type of def: 4.
encoder/ratecontrol.c:1747:5: note: vect_is_simple_use: operand 72
encoder/ratecontrol.c:1747:5: note: vect_is_simple_use: operand _584
encoder/ratecontrol.c:1747:5: note: def_stmt: _584 = (long unsigned int) _583;
encoder/ratecontrol.c:1747:5: note: type of def: 3.
encoder/ratecontrol.c:1747:5: note: vect_is_simple_use: operand _584
encoder/ratecontrol.c:1747:5: note: def_stmt: _584 = (long unsigned int) _583;
encoder/ratecontrol.c:1747:5: note: type of def: 3.
encoder/ratecontrol.c:1747:5: note: vect_is_simple_use: operand _584
encoder/ratecontrol.c:1747:5: note: def_stmt: _584 = (long unsigned int) _583;
encoder/ratecontrol.c:1747:5: note: type of def: 3.
encoder/ratecontrol.c:1747:5: note: vect_is_simple_use: operand _583
encoder/ratecontrol.c:1747:5: note: def_stmt: _583 = rce_582->misc_bits;
encoder/ratecontrol.c:1747:5: note: type of def: 3.
encoder/ratecontrol.c:1747:5: note: === vect_analyze_data_ref_accesses ===
encoder/ratecontrol.c:1747:5: note: not consecutive access _583 = rce_582->misc_bits;

encoder/ratecontrol.c:1747:5: note: not vectorized: complicated access pattern.
encoder/ratecontrol.c:1747:5: note: bad data access.

Analyzing loop at encoder/ratecontrol.c:474
encoder/ratecontrol.c:474:17: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:474:17: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:474:17: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:474:17: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:454
encoder/ratecontrol.c:454:9: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:454:9: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:454:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [1, + , 1](no_overflow) < _364
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _364 + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
encoder/ratecontrol.c:454:9: note: Symbolic number of iterations is (unsigned int) _364
encoder/ratecontrol.c:454:9: note: === vect_analyze_data_refs ===
Creating dr for rce_324->pict_type
analyze_innermost: success.
	base_address: pretmp_1825
	offset from base address: 0
	constant offset from base address: 0
	step: 72
	aligned to: 128
	base_object: *pretmp_1825
	Access function 0: 0
	Access function 1: {0B, +, 72}_3
Creating dr for rce_324->new_qscale
analyze_innermost: success.
	base_address: pretmp_1825
	offset from base address: 0
	constant offset from base address: 40
	step: 72
	aligned to: 128
	base_object: *pretmp_1825
	Access function 0: 320
	Access function 1: {0B, +, 72}_3
Creating dr for rce_324->qscale
analyze_innermost: success.
	base_address: pretmp_1825
	offset from base address: 0
	constant offset from base address: 8
	step: 72
	aligned to: 128
	base_object: *pretmp_1825
	Access function 0: 64
	Access function 1: {0B, +, 72}_3
Creating dr for rce_324->misc_bits
analyze_innermost: success.
	base_address: pretmp_1825
	offset from base address: 0
	constant offset from base address: 20
	step: 72
	aligned to: 128
	base_object: *pretmp_1825
	Access function 0: 160
	Access function 1: {0B, +, 72}_3
Creating dr for rce_324->new_qp
analyze_innermost: success.
	base_address: pretmp_1825
	offset from base address: 0
	constant offset from base address: 44
	step: 72
	aligned to: 128
	base_object: *pretmp_1825
	Access function 0: 352
	Access function 1: {0B, +, 72}_3
encoder/ratecontrol.c:454:9: note: got vectype for stmt: rce_324->pict_type = 0;
vector(4) int
encoder/ratecontrol.c:454:9: note: got vectype for stmt: rce_324->new_qscale = 2.14186573028564453125e+0;
vector(4) float
encoder/ratecontrol.c:454:9: note: got vectype for stmt: rce_324->qscale = 2.14186573028564453125e+0;
vector(4) float
encoder/ratecontrol.c:454:9: note: got vectype for stmt: rce_324->misc_bits = pretmp_1831;
vector(4) int
encoder/ratecontrol.c:454:9: note: got vectype for stmt: rce_324->new_qp = 0;
vector(4) int
encoder/ratecontrol.c:454:9: note: === vect_analyze_scalar_cycles ===
encoder/ratecontrol.c:454:9: note: Analyze phi: i_1435 = PHI <0(166), i_332(168)>

encoder/ratecontrol.c:454:9: note: Access function of PHI: {0, +, 1}_3
encoder/ratecontrol.c:454:9: note: step: 1,  init: 0
encoder/ratecontrol.c:454:9: note: Detected induction.
encoder/ratecontrol.c:454:9: note: Analyze phi: .MEM_1437 = PHI <.MEM_440(166), .MEM_331(168)>

encoder/ratecontrol.c:454:9: note: === vect_pattern_recog ===
encoder/ratecontrol.c:454:9: note: vect_is_simple_use: operand _322
encoder/ratecontrol.c:454:9: note: def_stmt: _322 = (long unsigned int) i_1435;
encoder/ratecontrol.c:454:9: note: type of def: 3.
encoder/ratecontrol.c:454:9: note: vect_is_simple_use: operand i_1435
encoder/ratecontrol.c:454:9: note: def_stmt: i_1435 = PHI <0(166), i_332(168)>
encoder/ratecontrol.c:454:9: note: type of def: 4.
encoder/ratecontrol.c:454:9: note: vect_is_simple_use: operand 72
encoder/ratecontrol.c:454:9: note: === vect_analyze_data_ref_accesses ===
encoder/ratecontrol.c:454:9: note: not consecutive access rce_324->pict_type = 0;

encoder/ratecontrol.c:454:9: note: not vectorized: complicated access pattern.
encoder/ratecontrol.c:454:9: note: bad data access.

Analyzing loop at encoder/ratecontrol.c:429
encoder/ratecontrol.c:429:9: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:429:9: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:429:9: note: === get_loop_niters ===
encoder/ratecontrol.c:429:9: note: not vectorized: number of iterations cannot be computed.
encoder/ratecontrol.c:429:9: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:652
encoder/ratecontrol.c:652:9: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:652:9: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:652:9: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:652:9: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:626
encoder/ratecontrol.c:626:46: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:626:46: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:626:46: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:626:46: note: bad loop form.

Analyzing loop at /usr/include/x86_64-linux-gnu/bits/string2.h:1154
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:15: note: ===== analyze_loop_nest =====
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:15: note: === vect_analyze_loop_form ===
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:15: note: not vectorized: multiple nested loops.
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:15: note: bad loop form.

Analyzing loop at /usr/include/x86_64-linux-gnu/bits/string2.h:1154
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:15: note: ===== analyze_loop_nest =====
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:15: note: === vect_analyze_loop_form ===
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:15: note: not vectorized: multiple nested loops.
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:15: note: bad loop form.

Analyzing loop at /usr/include/x86_64-linux-gnu/bits/string2.h:1160
/usr/include/x86_64-linux-gnu/bits/string2.h:1160:19: note: ===== analyze_loop_nest =====
/usr/include/x86_64-linux-gnu/bits/string2.h:1160:19: note: === vect_analyze_loop_form ===
/usr/include/x86_64-linux-gnu/bits/string2.h:1160:19: note: not vectorized: control flow in loop.
/usr/include/x86_64-linux-gnu/bits/string2.h:1160:19: note: bad loop form.

Analyzing loop at /usr/include/x86_64-linux-gnu/bits/string2.h:1154
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:9: note: ===== analyze_loop_nest =====
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:9: note: === vect_analyze_loop_form ===
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:9: note: === get_loop_niters ===
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:9: note: not vectorized: number of iterations cannot be computed.
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:9: note: bad loop form.

Analyzing loop at /usr/include/x86_64-linux-gnu/bits/string2.h:1160
/usr/include/x86_64-linux-gnu/bits/string2.h:1160:19: note: ===== analyze_loop_nest =====
/usr/include/x86_64-linux-gnu/bits/string2.h:1160:19: note: === vect_analyze_loop_form ===
/usr/include/x86_64-linux-gnu/bits/string2.h:1160:19: note: not vectorized: control flow in loop.
/usr/include/x86_64-linux-gnu/bits/string2.h:1160:19: note: bad loop form.

Analyzing loop at /usr/include/x86_64-linux-gnu/bits/string2.h:1154
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:9: note: ===== analyze_loop_nest =====
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:9: note: === vect_analyze_loop_form ===
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:9: note: === get_loop_niters ===
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:9: note: not vectorized: number of iterations cannot be computed.
/usr/include/x86_64-linux-gnu/bits/string2.h:1154:9: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:608
encoder/ratecontrol.c:608:9: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:608:9: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:608:9: note: === get_loop_niters ===
encoder/ratecontrol.c:608:9: note: not vectorized: number of iterations cannot be computed.
encoder/ratecontrol.c:608:9: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:341
encoder/ratecontrol.c:341:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:341:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:341:5: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:341:5: note: bad loop form.
encoder/ratecontrol.c:230:5: note: vectorized 0 loops in function.
x264_ratecontrol_new (struct x264_t * h)
{
  struct x264_ratecontrol_t * rcc;
  double * fills;
  double all_available_bits;
  double adjustment;
  double prev_bits;
  int i;
  int t0;
  int t1;
  int adj_min;
  int adj_max;
  int t0;
  struct x264_ratecontrol_t * rcc;
  double qscale_orig;
  double qscale_new;
  int t0;
  struct x264_ratecontrol_t * rcc;
  double qscale_orig;
  double qscale_new;
  double D.10105;
  double qscale;
  float mask;
  double last_q;
  double ip_factor;
  const int pict_type;
  struct x264_ratecontrol_t * rcc;
  double D.10095;
  double q;
  double D.10073;
  double qscale;
  double D.10063;
  double D.10053;
  struct x264_ratecontrol_t * rcc;
  uint64_t all_const_bits;
  uint64_t all_available_bits;
  double rate_factor;
  double step;
  double step_mult;
  double qblur;
  double cplxblur;
  const int filter_size;
  double expected_bits;
  double * blurred_qscale;
  int i;
  struct ratecontrol_entry_t * rce;
  struct ratecontrol_entry_t * rce;
  double weight_sum;
  double cplx_sum;
  double weight;
  double gaussian_weight;
  int j;
  struct ratecontrol_entry_t * rcj;
  struct ratecontrol_entry_t * rcj;
  struct ratecontrol_entry_t * rce;
  int j;
  double q;
  double sum;
  int index;
  double d;
  double coeff;
  struct ratecontrol_entry_t * rce;
  double avgq;
  int D.10043;
  static const char __PRETTY_FUNCTION__[11] = "init_pass2";
  int len;
  char * saveptr;
  char * val;
  int D.10009;
  char * p;
  struct x264_ratecontrol_t * rc;
  int i;
  char * p;
  char * saveptr;
  int z$i_start;
  int z$i_end;
  int z$b_force_qp;
  float z$f_bitrate_factor;
  int D.9990;
  char * p;
  float qp;
  int e;
  char pict_type;
  int frame_number;
  struct ratecontrol_entry_t * rce;
  struct ratecontrol_entry_t * rce;
  int i;
  char * stats_in;
  char * p;
  double base_cplx;
  static const char __PRETTY_FUNCTION__[21] = "x264_ratecontrol_new";
  int i;
  _Bool _9;
  int iftmp.5_12;
  int _13;
  int iftmp.7_15;
  int iftmp.8_16;
  int iftmp.10_18;
  double _21;
  int _54;
  unsigned int _55;
  unsigned int _56;
  int _57;
  void * _59;
  int _62;
  long unsigned int _63;
  long unsigned int _64;
  int _66;
  int _67;
  int _70;
  int _72;
  int _73;
  float _75;
  float _76;
  float _77;
  double _78;
  double cstore_80;
  int _81;
  double _82;
  double _83;
  float _85;
  double _86;
  int _88;
  int _92;
  int _94;
  int _98;
  int _100;
  int _105;
  double _106;
  int _107;
  double _108;
  double _109;
  double _110;
  int _111;
  float _114;
  float _116;
  float _117;
  double _118;
  double _119;
  float _120;
  int _122;
  double _123;
  double _124;
  double _126;
  double _130;
  double _133;
  double _134;
  double _136;
  double _137;
  double _138;
  double _139;
  double iftmp.6_140;
  int _146;
  int _147;
  int _148;
  double _152;
  int _155;
  int _156;
  int _158;
  int _160;
  float _161;
  double iftmp.9_162;
  float _165;
  double _166;
  double _167;
  int _168;
  double _169;
  double _170;
  double _171;
  double _172;
  double _174;
  double _175;
  double _176;
  int _180;
  int _181;
  int _182;
  float _184;
  float _185;
  double _186;
  double _187;
  float _188;
  double _189;
  double _190;
  double _191;
  float _193;
  double _194;
  double _195;
  double _196;
  float _198;
  double _199;
  double _200;
  double _201;
  int _203;
  double _205;
  double _207;
  int _208;
  double _209;
  double _211;
  double _212;
  int _213;
  int _216;
  double _217;
  double _218;
  double _219;
  void * _223;
  void * _226;
  float _229;
  double iftmp.11_230;
  long unsigned int _239;
  long unsigned int _240;
  struct predictor_t * _241;
  int * _251;
  int _254;
  char * _255;
  int _259;
  int _265;
  int _266;
  int i.12_267;
  char * _269;
  int _270;
  int _274;
  int _275;
  int i.12_276;
  char * _278;
  int _279;
  int _283;
  int i.12_284;
  int _286;
  int _290;
  int i.12_291;
  char * _293;
  _Bool _294;
  int _295;
  const char * _300;
  int _305;
  int _307;
  unsigned int _310;
  unsigned int _311;
  int _312;
  void * _314;
  int _316;
  long unsigned int _317;
  long unsigned int _318;
  long unsigned int _322;
  long unsigned int _323;
  int _333;
  int frame_number.13_339;
  int _340;
  struct ratecontrol_entry_t * _341;
  long unsigned int _342;
  long unsigned int _343;
  char * _346;
  int * _347;
  int * _348;
  int * _349;
  int * _350;
  int * _351;
  int * _352;
  int _354;
  char pict_type.14_356;
  float qp.15_362;
  double _363;
  int _364;
  float _365;
  int _377;
  int _378;
  int _381;
  char * _382;
  long unsigned int _383;
  unsigned int _384;
  unsigned int _385;
  int _386;
  void * _388;
  char * _390;
  char * _391;
  char * _393;
  struct FILE * _395;
  struct x264_param_t * _398;
  struct FILE * _401;
  struct x264_t * _405;
  long unsigned int _406;
  long unsigned int _407;
  struct x264_ratecontrol_t * _408;
  struct x264_param_t * _411;
  struct x264_param_t * _412;
  double iftmp.16_413;
  struct x264_t * _414;
  int _415;
  double _418;
  int iftmp.3_419;
  int iftmp.3_421;
  double _435;
  double _436;
  double _437;
  double _438;
  char * _446;
  int _447;
  long unsigned int _448;
  unsigned int _449;
  unsigned int _450;
  int _451;
  char * _453;
  char _456;
  _Bool _457;
  int _458;
  int _459;
  void * _466;
  char _470;
  char _474;
  struct x264_zone_t * _476;
  long unsigned int _478;
  long unsigned int _479;
  struct x264_zone_t * _480;
  _Bool _481;
  int _483;
  long unsigned int _487;
  long unsigned int _488;
  struct x264_zone_t * _489;
  double _494;
  int _496;
  unsigned int _497;
  unsigned int _498;
  int _499;
  void * _500;
  int _501;
  int _502;
  long unsigned int _503;
  long unsigned int _504;
  struct x264_zone_t * _505;
  struct x264_zone_t * _506;
  int _507;
  struct x264_zone_t * _508;
  void * _509;
  struct x264_param_t * _510;
  struct x264_zone_t * _511;
  struct x264_param_t * _512;
  long unsigned int _516;
  long unsigned int _517;
  struct x264_zone_t * _518;
  struct x264_param_t * _519;
  struct x264_param_t * _520;
  _Bool _523;
  double _525;
  double _526;
  int * _529;
  int * _530;
  int _531;
  float * _532;
  int _533;
  int _534;
  int len.20_535;
  sizetype _536;
  char _538;
  void * _539;
  struct x264_param_t * _540;
  char _542;
  struct x264_param_t * _545;
  int _547;
  char _551;
  char _555;
  _Bool _556;
  int _562;
  double _563;
  int _564;
  double _565;
  double _566;
  double _567;
  double _568;
  double _569;
  float _571;
  float _573;
  double _575;
  int _576;
  double _579;
  long unsigned int _580;
  long unsigned int _581;
  int _583;
  long unsigned int _584;
  double _588;
  double _589;
  double _590;
  double _591;
  int _592;
  long unsigned int _595;
  long unsigned int _596;
  double powmult_598;
  int _599;
  long unsigned int _600;
  long unsigned int _601;
  int _603;
  float _604;
  float _607;
  double _608;
  double _610;
  _Bool _611;
  int _613;
  int _614;
  double _615;
  double _616;
  double _617;
  float _621;
  int _622;
  int _623;
  double _627;
  double _628;
  double powmult_629;
  double _632;
  int _636;
  long unsigned int _637;
  long unsigned int _638;
  int _645;
  float _649;
  int _650;
  int _651;
  _Bool _653;
  int iftmp.3_654;
  double _655;
  double _656;
  int _659;
  float _660;
  float _663;
  double _664;
  double _666;
  double _669;
  double _672;
  float _673;
  unsigned int _675;
  unsigned int _676;
  int _677;
  int _679;
  unsigned int _680;
  unsigned int _681;
  int _682;
  long unsigned int _686;
  long unsigned int _687;
  struct ratecontrol_entry_t * _688;
  float _689;
  struct x264_ratecontrol_t * _690;
  struct ratecontrol_entry_t * _692;
  struct ratecontrol_entry_t * _693;
  float _694;
  int _695;
  int _696;
  int _697;
  _Bool _698;
  int _702;
  double _703;
  long unsigned int _710;
  long unsigned int _711;
  double * _712;
  struct ratecontrol_entry_t * _713;
  long unsigned int _714;
  struct ratecontrol_entry_t * _715;
  float _716;
  struct x264_ratecontrol_t * _717;
  double _718;
  int _720;
  long unsigned int _723;
  long unsigned int _724;
  double * _725;
  struct ratecontrol_entry_t * _727;
  long unsigned int _728;
  struct ratecontrol_entry_t * _729;
  float _730;
  float _731;
  _Bool _733;
  double powmult_735;
  long unsigned int _738;
  long unsigned int _739;
  int _741;
  int _742;
  int _745;
  double _747;
  double _748;
  double _750;
  int _752;
  int _753;
  long unsigned int _754;
  long unsigned int _755;
  struct ratecontrol_entry_t * _756;
  int _757;
  long unsigned int _758;
  double * _759;
  double _760;
  double _762;
  int iftmp.3_765;
  long unsigned int _768;
  double * _770;
  double _771;
  long unsigned int _775;
  long unsigned int _776;
  long unsigned int _778;
  double * _779;
  double _780;
  int _781;
  float _782;
  double _785;
  float _786;
  float _788;
  int _789;
  int _790;
  int _791;
  double iftmp.16_792;
  double _796;
  int _800;
  struct x264_ratecontrol_t * _801;
  double _803;
  double _804;
  double _805;
  long unsigned int _808;
  long unsigned int _809;
  struct ratecontrol_entry_t * _810;
  float _811;
  double _812;
  double _817;
  double _818;
  double _819;
  double _820;
  double _821;
  double _822;
  int _823;
  double _824;
  double _825;
  int _826;
  double _827;
  double _828;
  double _829;
  int _830;
  float _831;
  double _832;
  int _833;
  int _834;
  double _835;
  int _836;
  int _837;
  double _838;
  int _839;
  int _840;
  char _841;
  long unsigned int _844;
  int _846;
  _Bool _853;
  double powmult_854;
  double _855;
  double _856;
  double _858;
  double _861;
  double _862;
  double _864;
  double _869;
  char * _874;
  double _875;
  double _876;
  double _878;
  double _881;
  double _882;
  double _884;
  double _889;
  _Bool _890;
  double _895;
  double _896;
  double _898;
  double _900;
  double _901;
  double _902;
  _Bool _903;
  double _904;
  double _905;
  double iftmp.23_906;
  double _907;
  double _908;
  double _909;
  _Bool _910;
  double _911;
  _Bool _914;
  int _917;
  double _919;
  double _920;
  double _921;
  double _922;
  double _923;
  double _924;
  double _925;
  _Bool _926;
  float _927;
  double _931;
  double _932;
  double _933;
  double _934;
  _Bool _936;
  int _937;
  float _938;
  double _939;
  int _942;
  double _943;
  double _945;
  double _950;
  int _951;
  float _952;
  int _953;
  float _954;
  float _955;
  double _956;
  double _958;
  double _960;
  double _961;
  double _962;
  double _963;
  double _964;
  double _965;
  double _966;
  double _967;
  double _968;
  double _969;
  double _970;
  _Bool _971;
  double _972;
  double _973;
  _Bool _974;
  double _975;
  double _977;
  double _978;
  double _979;
  _Bool _980;
  double _981;
  double _982;
  double iftmp.23_983;
  double _984;
  double _985;
  double _986;
  unsigned int _987;
  double _988;
  double _989;
  double _990;
  int _992;
  int _993;
  unsigned int _994;
  unsigned int _995;
  int _996;
  int _998;
  double _999;
  int _1000;
  double _1001;
  double _1002;
  double _1003;
  double _1004;
  int _1006;
  double _1007;
  double _1008;
  double _1009;
  double _1010;
  double _1011;
  int _1012;
  double _1013;
  double _1014;
  double _1015;
  double _1016;
  double _1017;
  double _1020;
  double _1021;
  double _1023;
  float _1024;
  double _1025;
  double _1026;
  int t1.24_1027;
  long unsigned int _1033;
  long unsigned int _1034;
  struct ratecontrol_entry_t * _1035;
  float _1036;
  double iftmp.16_1038;
  double iftmp.16_1039;
  double iftmp.16_1041;
  double iftmp.16_1042;
  float _1043;
  _Bool _1045;
  _Bool _1046;
  _Bool _1047;
  int _1052;
  double _1053;
  float _1054;
  double _1055;
  double _1056;
  double _1057;
  int t1.24_1058;
  long unsigned int _1064;
  long unsigned int _1065;
  struct ratecontrol_entry_t * _1066;
  float _1067;
  double iftmp.16_1069;
  double iftmp.16_1070;
  double iftmp.16_1072;
  double iftmp.16_1073;
  float _1074;
  _Bool _1076;
  _Bool _1077;
  _Bool _1078;
  int _1083;
  double _1087;
  int _1088;
  double _1089;
  int _1090;
  long unsigned int _1093;
  long unsigned int _1094;
  struct ratecontrol_entry_t * _1095;
  long unsigned int _1097;
  double * _1098;
  double _1099;
  double _1100;
  _Bool _1105;
  int _1111;
  int _1122;
  _Bool _1136;
  _Bool _1184;
  _Bool _1192;
  unsigned int _1205;
  double powmult_1209;
  double _1245;
  float _1247;
  char _1249;
  struct x264_t * _1265;
  int _1282;
  int _1307;
  double _1308;
  double _1309;
  double _1311;
  _Bool _1340;
  _Bool _1345;
  unsigned int ivtmp_1348;
  int _1358;
  unsigned int ivtmp_1367;
  char _1383;
  int _1385;
  _Bool _1413;
  char _1415;
  unsigned int _1426;
  char _1442;
  double _1445;
  _Bool _1447;
  int _1458;
  double reciptmp_1611;
  float reciptmp_1612;
  float reciptmp_1613;
  int frame_number.13_1617;
  _Bool _1626;
  _Bool _1629;
  int t1.24_1632;
  int _1639;
  char _1653;
  char _1662;
  int _1664;
  int frame_number.13_1666;
  int frame_number.13_1667;
  int pretmp_1689;
  int prephitmp_1690;
  int pretmp_1691;
  int pretmp_1693;
  double pretmp_1695;
  int pretmp_1696;
  double pretmp_1698;
  struct predictor_t * pretmp_1699;
  double pretmp_1704;
  double pretmp_1705;
  double _1706;
  double pretmp_1709;
  double pretmp_1710;
  double pretmp_1711;
  double _1712;
  double pretmp_1715;
  double pretmp_1716;
  double pretmp_1718;
  double _1720;
  double pretmp_1723;
  double prephitmp_1724;
  int pretmp_1725;
  int pretmp_1726;
  int prephitmp_1727;
  int prephitmp_1729;
  int pretmp_1731;
  int prephitmp_1732;
  int pretmp_1733;
  int prephitmp_1734;
  struct ratecontrol_entry_t * pretmp_1735;
  struct ratecontrol_entry_t * prephitmp_1736;
  double pretmp_1740;
  _Bool pretmp_1742;
  int pretmp_1743;
  float pretmp_1745;
  double _1746;
  double prephitmp_1748;
  int pretmp_1749;
  float pretmp_1751;
  int pretmp_1752;
  int pretmp_1753;
  double pretmp_1754;
  double pretmp_1755;
  double _1756;
  double prephitmp_1758;
  double _1760;
  double prephitmp_1762;
  struct ratecontrol_entry_t * pretmp_1763;
  double pretmp_1768;
  struct x264_ratecontrol_t * prephitmp_1770;
  struct x264_ratecontrol_t * pretmp_1771;
  struct x264_ratecontrol_t * prephitmp_1772;
  struct ratecontrol_entry_t * pretmp_1773;
  double pretmp_1777;
  struct x264_ratecontrol_t * pretmp_1781;
  struct x264_ratecontrol_t * pretmp_1782;
  struct x264_ratecontrol_t * prephitmp_1783;
  struct x264_ratecontrol_t * pretmp_1784;
  struct x264_ratecontrol_t * prephitmp_1785;
  struct ratecontrol_entry_t * pretmp_1786;
  struct ratecontrol_entry_t * pretmp_1789;
  struct ratecontrol_entry_t * pretmp_1792;
  struct ratecontrol_entry_t * prephitmp_1793;
  int pretmp_1797;
  struct x264_ratecontrol_t * pretmp_1799;
  int pretmp_1803;
  struct ratecontrol_entry_t * pretmp_1806;
  struct ratecontrol_entry_t * pretmp_1815;
  struct ratecontrol_entry_t * prephitmp_1816;
  struct ratecontrol_entry_t * pretmp_1820;
  struct ratecontrol_entry_t * pretmp_1825;
  int pretmp_1829;
  int pretmp_1831;
  struct x264_zone_t * pretmp_1834;
  struct x264_zone_t * pretmp_1838;
  unsigned int pretmp_1844;
  unsigned int pretmp_1846;
  int pretmp_1848;
  int prephitmp_1849;
  int prephitmp_1850;
  double pretmp_1851;
  double prephitmp_1852;
  int pretmp_1853;
  int prephitmp_1854;
  double pretmp_1855;
  double prephitmp_1856;
  double pretmp_1857;
  double prephitmp_1858;
  float prephitmp_1859;
  double pretmp_1860;
  double pretmp_1861;
  double pretmp_1863;
  double prephitmp_1864;
  int pretmp_1867;
  int prephitmp_1869;
  struct x264_ratecontrol_t * pretmp_1870;
  struct x264_ratecontrol_t * prephitmp_1871;

  <bb 2>:
  x264_emms ();
  _54 = h_53(D)->param.i_threads;
  _55 = (unsigned int) _54;
  _56 = _55 * 608;
  _57 = (int) _56;
  _59 = x264_malloc (_57);
  h_53(D)->rc = _59;
  # DEBUG rc => _59
  _62 = h_53(D)->param.i_threads;
  _63 = (long unsigned int) _62;
  _64 = _63 * 608;
  # DEBUG __dest => _59
  # DEBUG __ch => 0
  # DEBUG __len => _64
  __builtin_memset (_59, 0, _64);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  _66 = h_53(D)->param.rc.i_rc_method;
  if (_66 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _67 = h_53(D)->param.rc.b_stat_read;
  if (_67 == 0)
    goto <bb 381>;
  else
    goto <bb 4>;

  <bb 4>:
  MEM[(struct x264_ratecontrol_t *)_59].b_abr = 0;
  if (_66 == 2)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  goto <bb 7>;

  <bb 6>:
  _70 = h_53(D)->param.rc.b_stat_read;
  if (_70 != 0)
    goto <bb 8>;
  else
    goto <bb 5>;

  <bb 7>:

  <bb 8>:
  # iftmp.5_12 = PHI <1(6), 0(7)>
  MEM[(struct x264_ratecontrol_t *)_59].b_2pass = iftmp.5_12;
  _72 = h_53(D)->param.i_fps_num;
  if (_72 > 0)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 9>:
  _73 = h_53(D)->param.i_fps_den;
  if (_73 > 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  _75 = (float) _72;
  _76 = (float) _73;
  _77 = _75 / _76;
  _78 = (double) _77;

  <bb 11>:
  # cstore_80 = PHI <_78(10), 2.5e+1(9), 2.5e+1(8)>
  MEM[(struct x264_ratecontrol_t *)_59].fps = cstore_80;
  _81 = h_53(D)->param.rc.i_bitrate;
  _82 = (double) _81;
  _83 = _82 * 1.0e+3;
  MEM[(struct x264_ratecontrol_t *)_59].bitrate = _83;
  _85 = h_53(D)->param.rc.f_rate_tolerance;
  _86 = (double) _85;
  MEM[(struct x264_ratecontrol_t *)_59].rate_tolerance = _86;
  _88 = h_53(D)->mb.i_mb_count;
  MEM[(struct x264_ratecontrol_t *)_59].nmb = _88;
  MEM[(struct x264_ratecontrol_t *)_59].last_non_b_pict_type = -1;
  MEM[(struct x264_ratecontrol_t *)_59].cbr_decay = 1.0e+0;
  if (_66 == 1)
    goto <bb 12>;
  else
    goto <bb 14>;

  <bb 12>:
  _92 = h_53(D)->param.rc.b_stat_read;
  if (_92 != 0)
    goto <bb 13>;
  else
    goto <bb 382>;

  <bb 13>:
  x264_log (h_53(D), 0, "constant rate-factor is incompatible with 2pass.\n");
  goto <bb 370>;

  <bb 14>:
  _94 = h_53(D)->param.rc.i_vbv_buffer_size;
  if (_94 != 0)
    goto <bb 15>;
  else
    goto <bb 19>;

  <bb 15>:
  if (_66 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  x264_log (h_53(D), 1, "VBV is incompatible with constant QP, ignored.\n");
  h_53(D)->param.rc.i_vbv_max_bitrate = 0;
  h_53(D)->param.rc.i_vbv_buffer_size = 0;
  goto <bb 39>;

  <bb 17>:
  _98 = h_53(D)->param.rc.i_vbv_max_bitrate;
  if (_98 == 0)
    goto <bb 18>;
  else
    goto <bb 20>;

  <bb 18>:
  x264_log (h_53(D), 3, "VBV maxrate unspecified, assuming CBR\n");
  _100 = h_53(D)->param.rc.i_bitrate;
  h_53(D)->param.rc.i_vbv_max_bitrate = _100;
  _611 = _100 > 0;
  goto <bb 22>;

  <bb 19>:
  pretmp_1867 = h_53(D)->param.rc.i_vbv_max_bitrate;

  <bb 20>:
  # prephitmp_1869 = PHI <pretmp_1867(19), _98(17)>
  _1413 = prephitmp_1869 > 0;
  _903 = _81 > prephitmp_1869;
  _910 = _903 & _1413;
  if (_910 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  x264_log (h_53(D), 1, "max bitrate less than average bitrate, ignored.\n");
  goto <bb 39>;

  <bb 22>:
  # _1358 = PHI <prephitmp_1869(20), _100(18)>
  # _1345 = PHI <_1413(20), _611(18)>
  if (_1345 != 0)
    goto <bb 23>;
  else
    goto <bb 37>;

  <bb 23>:
  _105 = h_53(D)->param.rc.i_vbv_buffer_size;
  if (_105 > 0)
    goto <bb 24>;
  else
    goto <bb 38>;

  <bb 24>:
  _106 = (double) _105;
  _107 = _1358 * 3;
  _108 = (double) _107;
  _109 = MEM[(struct x264_ratecontrol_t *)_59].fps;
  _110 = _108 / _109;
  if (_106 < _110)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  _111 = (int) _110;
  h_53(D)->param.rc.i_vbv_buffer_size = _111;
  x264_log (h_53(D), 1, "VBV buffer size too small, using %d kbit\n", _111);
  pretmp_1853 = h_53(D)->param.rc.i_vbv_buffer_size;
  pretmp_1855 = MEM[(struct x264_ratecontrol_t *)_59].fps;
  pretmp_1857 = (double) pretmp_1853;

  <bb 26>:
  # prephitmp_1854 = PHI <_105(24), pretmp_1853(25)>
  # prephitmp_1856 = PHI <_109(24), pretmp_1855(25)>
  # prephitmp_1858 = PHI <_106(24), pretmp_1857(25)>
  _114 = h_53(D)->param.rc.f_vbv_buffer_init;
  if (_114 > 1.0e+0)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  _116 = (float) prephitmp_1854;
  _117 = _114 / _116;
  _118 = (double) _117;
  # DEBUG v => _118
  # DEBUG f_min => 0.0
  # DEBUG f_max => 1.0e+0
  iftmp.16_413 = MIN_EXPR <_118, 1.0e+0>;
  iftmp.16_792 = MAX_EXPR <iftmp.16_413, 0.0>;
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  _120 = (float) iftmp.16_792;
  h_53(D)->param.rc.f_vbv_buffer_init = _120;

  <bb 28>:
  # prephitmp_1859 = PHI <_114(26), _120(27)>
  _122 = h_53(D)->param.rc.i_vbv_max_bitrate;
  _123 = (double) _122;
  _124 = _123 * 1.0e+3;
  _126 = _124 / prephitmp_1856;
  MEM[(struct x264_ratecontrol_t *)_59].buffer_rate = _126;
  _130 = prephitmp_1858 * 1.0e+3;
  MEM[(struct x264_ratecontrol_t *)_59].buffer_size = _130;
  _133 = (double) prephitmp_1859;
  _134 = _130 * _133;
  MEM[(struct x264_ratecontrol_t *)_59].buffer_fill_final = _134;
  _136 = _126 / _130;
  _137 = _126 * prephitmp_1856;
  _138 = MEM[(struct x264_ratecontrol_t *)_59].bitrate;
  _139 = _137 / _138;
  if (_139 <= 1.5e+0)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  iftmp.6_140 = 1.5e+0 - _139;
  pretmp_1860 = _136 * 5.0e-1;
  pretmp_1861 = iftmp.6_140 * pretmp_1860;
  pretmp_1863 = 1.0e+0 - pretmp_1861;

  <bb 30>:
  # prephitmp_1864 = PHI <pretmp_1863(29), 1.0e+0(28)>
  MEM[(struct x264_ratecontrol_t *)_59].cbr_decay = prephitmp_1864;
  MEM[(struct x264_ratecontrol_t *)_59].b_vbv = 1;
  _146 = MEM[(struct x264_ratecontrol_t *)_59].b_2pass;
  if (_146 == 0)
    goto <bb 31>;
  else
    goto <bb 34>;

  <bb 31>:
  _147 = h_53(D)->param.rc.i_rc_method;
  if (_147 == 2)
    goto <bb 32>;
  else
    goto <bb 34>;

  <bb 32>:
  _148 = h_53(D)->param.rc.i_bitrate;
  if (_122 <= _148)
    goto <bb 34>;
  else
    goto <bb 33>;

  <bb 33>:

  <bb 34>:
  # iftmp.7_15 = PHI <1(32), 0(31), 0(30), 0(33)>
  MEM[(struct x264_ratecontrol_t *)_59].b_vbv_min_rate = iftmp.7_15;
  _796 = MEM[(struct x264_ratecontrol_t *)_59].rate_tolerance;
  if (_796 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 36>;
  else
    goto <bb 35>;

  <bb 35>:
  goto <bb 42>;

  <bb 36>:
  x264_log (h_53(D), 1, "bitrate tolerance too small, using .01\n");
  MEM[(struct x264_ratecontrol_t *)_59].rate_tolerance = 1.00000000000000002081668171172168513294309377670288085938e-2;
  goto <bb 40>;

  <bb 37>:
  if (_1358 != 0)
    goto <bb 38>;
  else
    goto <bb 39>;

  <bb 38>:
  x264_log (h_53(D), 1, "VBV maxrate specified, but no bufsize.\n");
  h_53(D)->param.rc.i_vbv_max_bitrate = 0;

  <bb 39>:
  _152 = MEM[(struct x264_ratecontrol_t *)_59].rate_tolerance;
  if (_152 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 36>;
  else
    goto <bb 40>;

  <bb 40>:
  _155 = MEM[(struct x264_ratecontrol_t *)_59].b_vbv;
  if (_155 != 0)
    goto <bb 35>;
  else
    goto <bb 41>;

  <bb 41>:
  _156 = h_53(D)->param.rc.i_aq_mode;
  _1184 = _156 != 0;
  _752 = (int) _1184;

  <bb 42>:
  # iftmp.8_16 = PHI <_752(41), 1(35)>
  h_53(D)->mb.b_variable_qp = iftmp.8_16;
  _158 = MEM[(struct x264_ratecontrol_t *)_59].b_abr;
  if (_158 != 0)
    goto <bb 44>;
  else
    goto <bb 43>;

  <bb 43>:
  pretmp_1689 = h_53(D)->param.rc.i_rc_method;
  goto <bb 47>;

  <bb 44>:
  MEM[(struct x264_ratecontrol_t *)_59].accum_p_norm = 1.00000000000000002081668171172168513294309377670288085938e-2;
  _160 = h_53(D)->param.rc.i_rc_method;
  if (_160 == 1)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 45>:
  _161 = h_53(D)->param.rc.f_rf_constant;
  iftmp.9_162 = (double) _161;
  pretmp_1851 = iftmp.9_162 * 1.00000000000000002081668171172168513294309377670288085938e-2;

  <bb 46>:
  # prephitmp_1852 = PHI <pretmp_1851(45), 2.399999999999999911182158029987476766109466552734375e-1(44)>
  MEM[(struct x264_ratecontrol_t *)_59].accum_p_qp = prephitmp_1852;
  _165 = h_53(D)->param.rc.f_qcompress;
  _166 = (double) _165;
  _167 = pow (7.0e+5, _166);
  _168 = h_53(D)->mb.i_mb_count;
  _169 = (double) _168;
  _170 = __builtin_sqrt (_169);
  _171 = _167 * _170;
  _172 = _171 * 1.00000000000000002081668171172168513294309377670288085938e-2;
  MEM[(struct x264_ratecontrol_t *)_59].cplxr_sum = _172;
  _174 = MEM[(struct x264_ratecontrol_t *)_59].bitrate;
  _175 = MEM[(struct x264_ratecontrol_t *)_59].fps;
  _176 = _174 / _175;
  MEM[(struct x264_ratecontrol_t *)_59].wanted_bits_window = _176;
  MEM[(struct x264_ratecontrol_t *)_59].last_non_b_pict_type = 2;

  <bb 47>:
  # prephitmp_1690 = PHI <pretmp_1689(43), _160(46)>
  if (prephitmp_1690 == 1)
    goto <bb 48>;
  else
    goto <bb 51>;

  <bb 48>:
  _180 = h_53(D)->mb.i_mb_count;
  _181 = h_53(D)->param.i_bframe;
  if (_181 != 0)
    goto <bb 50>;
  else
    goto <bb 49>;

  <bb 49>:

  <bb 50>:
  # iftmp.10_18 = PHI <120(48), 80(49)>
  _182 = iftmp.10_18 * _180;
  base_cplx_183 = (double) _182;
  # DEBUG base_cplx => base_cplx_183
  _184 = h_53(D)->param.rc.f_qcompress;
  _185 = 1.0e+0 - _184;
  _186 = (double) _185;
  _187 = pow (base_cplx_183, _186);
  _188 = h_53(D)->param.rc.f_rf_constant;
  _189 = (double) _188;
  # DEBUG qp => _189
  _209 = _189 - 1.2e+1;
  _190 = _209 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _119 = pow (2.0e+0, _190);
  _418 = _119 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  _191 = _187 / _418;
  MEM[(struct x264_ratecontrol_t *)_59].rate_factor_constant = _191;

  <bb 51>:
  _193 = h_53(D)->param.rc.f_ip_factor;
  _194 = (double) _193;
  _195 = log (_194);
  _196 = _195 * 8.656170245333779433849485940299928188323974609375e+0;
  MEM[(struct x264_ratecontrol_t *)_59].ip_offset = _196;
  _198 = h_53(D)->param.rc.f_pb_factor;
  _199 = (double) _198;
  _200 = log (_199);
  _201 = _200 * 8.656170245333779433849485940299928188323974609375e+0;
  MEM[(struct x264_ratecontrol_t *)_59].pb_offset = _201;
  _203 = h_53(D)->param.rc.i_qp_constant;
  MEM[(struct x264_ratecontrol_t *)_59].qp_constant[0] = _203;
  _205 = (double) _203;
  _211 = _205 + 5.0e-1;
  _207 = _211 - _196;
  _208 = (int) _207;
  # DEBUG v => _208
  # DEBUG i_min => 0
  # DEBUG i_max => 51
  iftmp.3_421 = MIN_EXPR <_208, 51>;
  iftmp.3_654 = MAX_EXPR <iftmp.3_421, 0>;
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  MEM[(struct x264_ratecontrol_t *)_59].qp_constant[2] = iftmp.3_654;
  _212 = _201 + _211;
  _213 = (int) _212;
  # DEBUG v => _213
  # DEBUG i_min => 0
  # DEBUG i_max => 51
  iftmp.3_419 = MIN_EXPR <_213, 51>;
  iftmp.3_765 = MAX_EXPR <iftmp.3_419, 0>;
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  MEM[(struct x264_ratecontrol_t *)_59].qp_constant[1] = iftmp.3_765;
  _216 = h_53(D)->param.rc.i_qp_step;
  _217 = (double) _216;
  _218 = _217 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _219 = pow (2.0e+0, _218);
  MEM[(struct x264_ratecontrol_t *)_59].lstep = _219;
  # DEBUG qp => 2.6e+1
  # DEBUG qp => NULL
  MEM[(struct x264_ratecontrol_t *)_59].last_qscale = 4.28373156964256818213243604986928403377532958984375e+0;
  _223 = x264_malloc (120);
  MEM[(struct x264_ratecontrol_t *)_59].pred = _223;
  _226 = x264_malloc (24);
  MEM[(struct x264_ratecontrol_t *)_59].pred_b_from_p = _226;
  # DEBUG i => 0
  # DEBUG i => 0
  pretmp_1691 = h_53(D)->param.rc.i_rc_method;
  pretmp_1693 = h_53(D)->param.rc.i_qp_min;
  pretmp_1695 = (double) pretmp_1693;
  pretmp_1696 = h_53(D)->param.rc.i_qp_max;
  pretmp_1698 = (double) pretmp_1696;
  pretmp_1699 = MEM[(struct x264_ratecontrol_t *)_59].pred;
  pretmp_1704 = pretmp_1698 - 1.2e+1;
  pretmp_1705 = pretmp_1704 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _1706 = pow (2.0e+0, pretmp_1705);
  pretmp_1709 = _1706 * 8.4999999999999997779553950749686919152736663818359375e-1;
  pretmp_1710 = pretmp_1695 - 1.2e+1;
  pretmp_1711 = pretmp_1710 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _1712 = pow (2.0e+0, pretmp_1711);
  pretmp_1715 = _1712 * 8.4999999999999997779553950749686919152736663818359375e-1;

  <bb 52>:
  # i_1418 = PHI <i_248(55), 0(51)>
  # ivtmp_1348 = PHI <ivtmp_1367(55), 5(51)>
  # DEBUG i => i_1418
  if (pretmp_1691 == 1)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  _229 = h_53(D)->param.rc.f_rf_constant;
  iftmp.11_230 = (double) _229;
  pretmp_1716 = iftmp.11_230 - 1.2e+1;
  pretmp_1718 = pretmp_1716 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _1720 = pow (2.0e+0, pretmp_1718);
  pretmp_1723 = _1720 * 8.4999999999999997779553950749686919152736663818359375e-1;

  <bb 54>:
  # prephitmp_1724 = PHI <pretmp_1723(53), 3.399999999999999911182158029987476766109466552734375e+0(52)>
  # DEBUG qp => NULL
  # DEBUG qp => NULL
  MEM[(struct x264_ratecontrol_t *)_59].last_qscale_for[i_1418] = prephitmp_1724;
  # DEBUG D#55 => h_53(D)->param.rc.i_qp_min
  # DEBUG qp => (double) D#55
  # DEBUG qp => NULL
  MEM[(struct x264_ratecontrol_t *)_59].lmin[i_1418] = pretmp_1715;
  # DEBUG D#54 => h_53(D)->param.rc.i_qp_max
  # DEBUG qp => (double) D#54
  # DEBUG qp => NULL
  MEM[(struct x264_ratecontrol_t *)_59].lmax[i_1418] = pretmp_1709;
  _239 = (long unsigned int) i_1418;
  _240 = _239 * 24;
  _241 = pretmp_1699 + _240;
  _241->coeff = 2.0e+0;
  _241->count = 1.0e+0;
  _241->decay = 5.0e-1;
  MEM[(struct x264_ratecontrol_t *)_59].row_preds[i_1418].coeff = 2.5e-1;
  MEM[(struct x264_ratecontrol_t *)_59].row_preds[i_1418].count = 1.0e+0;
  MEM[(struct x264_ratecontrol_t *)_59].row_preds[i_1418].decay = 5.0e-1;
  i_248 = i_1418 + 1;
  # DEBUG i => i_248
  # DEBUG i => i_248
  ivtmp_1367 = ivtmp_1348 - 1;
  if (ivtmp_1367 != 0)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 55>:
  goto <bb 52>;

  <bb 56>:
  MEM[(struct predictor_t *)_226] = *pretmp_1699;
  # DEBUG h => h_53(D)
  rc_445 = h_53(D)->rc;
  # DEBUG rc => rc_445
  _446 = h_53(D)->param.rc.psz_zones;
  if (_446 != 0B)
    goto <bb 58>;
  else
    goto <bb 57>;

  <bb 57>:
  pretmp_1725 = h_53(D)->param.rc.i_zones;
  goto <bb 108>;

  <bb 58>:
  _447 = h_53(D)->param.rc.i_zones;
  if (_447 == 0)
    goto <bb 59>;
  else
    goto <bb 108>;

  <bb 59>:
  _448 = strlen (_446);
  _449 = (unsigned int) _448;
  _450 = _449 + 1;
  _451 = (int) _450;
  saveptr_452 = x264_malloc (_451);
  # DEBUG psz_zones => saveptr_452
  _453 = h_53(D)->param.rc.psz_zones;
  # DEBUG __dest => saveptr_452
  # DEBUG __src => _453
  __builtin_strcpy (saveptr_452, _453);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  h_53(D)->param.rc.i_zones = 1;
  # DEBUG p => saveptr_452
  # DEBUG p => saveptr_452
  _1415 = *saveptr_452;
  if (_1415 != 0)
    goto <bb 60>;
  else
    goto <bb 64>;

  <bb 60>:

  <bb 61>:
  # _1442 = PHI <_1415(60), _456(62)>
  # saveptr_1416 = PHI <saveptr_452(60), saveptr_461(62)>
  # prephitmp_1850 = PHI <1(60), _459(62)>
  # DEBUG p => saveptr_1416
  _457 = _1442 == 47;
  _458 = (int) _457;
  _459 = _458 + prephitmp_1850;
  h_53(D)->param.rc.i_zones = _459;
  saveptr_461 = saveptr_1416 + 1;
  # DEBUG p => saveptr_461
  # DEBUG p => saveptr_461
  _456 = *saveptr_461;
  if (_456 != 0)
    goto <bb 62>;
  else
    goto <bb 63>;

  <bb 62>:
  goto <bb 61>;

  <bb 63>:
  # _1664 = PHI <_459(61)>
  pretmp_1844 = (unsigned int) _1664;
  pretmp_1846 = pretmp_1844 * 32;
  pretmp_1848 = (int) pretmp_1846;

  <bb 64>:
  # prephitmp_1849 = PHI <pretmp_1848(63), 32(59)>
  _466 = x264_malloc (prephitmp_1849);
  h_53(D)->param.rc.zones = _466;
  # DEBUG p => saveptr_452
  # DEBUG i => 0
  # DEBUG saveptr => saveptr_527(D)
  # DEBUG p => saveptr_452
  # DEBUG i => 0
  _1111 = h_53(D)->param.rc.i_zones;
  if (_1111 > 0)
    goto <bb 66>;
  else
    goto <bb 65>;

  <bb 65>:
  x264_free (saveptr_452);
  # DEBUG D#14 => {CLOBBER}
  # DEBUG saveptr => D#14
  pretmp_1726 = h_53(D)->param.rc.i_zones;
  goto <bb 108>;

  <bb 66>:
  # DEBUG saveptr => saveptr_527(D)
  # DEBUG p => saveptr_452
  # DEBUG i => 0
  # DEBUG __s => saveptr_452
  # DEBUG __sep => 47
  # DEBUG __nextp => &saveptr
  if (saveptr_452 == 0B)
    goto <bb 68>;
  else
    goto <bb 67>;

  <bb 67>:

  <bb 68>:
  # saveptr_843 = PHI <saveptr_527(D)(66), saveptr_452(67)>

  <bb 69>:
  # saveptr_887 = PHI <saveptr_843(68), saveptr_1107(107)>
  # i_1347 = PHI <0(68), i_482(107)>
  # DEBUG __s => saveptr_887
  _542 = *saveptr_887;
  if (_542 == 47)
    goto <bb 70>;
  else
    goto <bb 74>;

  <bb 70>:

  <bb 71>:
  # saveptr_1411 = PHI <saveptr_887(70), saveptr_469(73)>
  # DEBUG __s => saveptr_1411
  saveptr_469 = saveptr_1411 + 1;
  # DEBUG __s => saveptr_469
  # DEBUG __s => saveptr_469
  _470 = *saveptr_469;
  if (_470 == 47)
    goto <bb 73>;
  else
    goto <bb 72>;

  <bb 72>:
  # saveptr_1663 = PHI <saveptr_469(71)>
  # _1662 = PHI <_470(71)>
  goto <bb 74>;

  <bb 73>:
  goto <bb 71>;

  <bb 74>:
  # saveptr_1409 = PHI <saveptr_1663(72), saveptr_887(69)>
  # _1249 = PHI <_1662(72), _542(69)>
  # DEBUG __result => 0B
  if (_1249 != 0)
    goto <bb 75>;
  else
    goto <bb 122>;

  <bb 75>:
  saveptr_471 = saveptr_1409 + 1;
  # DEBUG __s => saveptr_471
  # DEBUG __result => saveptr_1409
  goto <bb 79>;

  <bb 76>:
  saveptr_473 = saveptr_472 + 1;
  # DEBUG __s => saveptr_473
  if (_474 == 47)
    goto <bb 77>;
  else
    goto <bb 78>;

  <bb 77>:
  # saveptr_1661 = PHI <saveptr_472(76)>
  # saveptr_1659 = PHI <saveptr_473(76)>
  *saveptr_1661 = 0;
  goto <bb 372>;

  <bb 78>:

  <bb 79>:
  # saveptr_472 = PHI <saveptr_471(75), saveptr_473(78)>
  # DEBUG __s => saveptr_472
  _474 = *saveptr_472;
  if (_474 != 0)
    goto <bb 76>;
  else
    goto <bb 371>;

  <bb 80>:
  _480->b_force_qp = 1;
  goto <bb 86>;

  <bb 81>:
  _532 = &_480->f_bitrate_factor;
  _533 = sscanf (saveptr_1409, "%u,%u,b=%f%n", _530, _529, _532, &len);
  if (_533 > 2)
    goto <bb 82>;
  else
    goto <bb 83>;

  <bb 82>:
  _480->b_force_qp = 0;
  goto <bb 86>;

  <bb 83>:
  _534 = sscanf (saveptr_1409, "%u,%u%n", _530, _529, &len);
  if (_534 > 1)
    goto <bb 84>;
  else
    goto <bb 85>;

  <bb 84>:
  _480->b_force_qp = 0;
  goto <bb 86>;

  <bb 85>:
  # saveptr_1622 = PHI <saveptr_1409(83)>
  x264_log (h_53(D), 0, "invalid zone: \"%s\"\n", saveptr_1622);
  goto <bb 375>;

  <bb 86>:
  len.20_535 = len;
  _536 = (sizetype) len.20_535;
  saveptr_537 = saveptr_1409 + _536;
  # DEBUG p => saveptr_537
  _538 = *saveptr_537;
  if (_538 == 0)
    goto <bb 376>;
  else
    goto <bb 87>;

  <bb 87>:
  _539 = malloc (616);
  _480->param = _539;
  _540 = &h_53(D)->param;
  # DEBUG __dest => _539
  # DEBUG __src => _540
  # DEBUG __len => 616
  __builtin_memcpy (_539, _540, 616);
  # DEBUG saveptr => saveptr_558(D)
  # DEBUG p => saveptr_537
  # DEBUG __s => saveptr_537
  # DEBUG __sep => 44
  # DEBUG __nextp => &saveptr
  if (saveptr_537 == 0B)
    goto <bb 93>;
  else
    goto <bb 92>;

  <bb 88>:
  *val_543 = 0;
  val_544 = val_543 + 1;
  # DEBUG val => val_544

  <bb 89>:
  # val_546 = PHI <0B(374), val_544(88)>
  # DEBUG val => val_546
  _545 = _480->param;
  _547 = x264_param_parse (_545, saveptr_1405, val_546);
  if (_547 != 0)
    goto <bb 91>;
  else
    goto <bb 90>;

  <bb 90>:
  goto <bb 94>;

  <bb 91>:
  # val_1655 = PHI <val_546(89)>
  # saveptr_1623 = PHI <saveptr_1405(89)>
  x264_log (h_53(D), 0, "invalid zone param: %s = %s\n", saveptr_1623, val_1655);
  goto <bb 375>;

  <bb 92>:

  <bb 93>:
  # saveptr_1283 = PHI <saveptr_558(D)(87), saveptr_537(92)>

  <bb 94>:
  # saveptr_883 = PHI <saveptr_1283(93), saveptr_1246(90)>
  # DEBUG __s => saveptr_883
  _841 = *saveptr_883;
  if (_841 == 44)
    goto <bb 95>;
  else
    goto <bb 99>;

  <bb 95>:

  <bb 96>:
  # saveptr_1248 = PHI <saveptr_883(95), saveptr_550(98)>
  # DEBUG __s => saveptr_1248
  saveptr_550 = saveptr_1248 + 1;
  # DEBUG __s => saveptr_550
  # DEBUG __s => saveptr_550
  _551 = *saveptr_550;
  if (_551 == 44)
    goto <bb 98>;
  else
    goto <bb 97>;

  <bb 97>:
  # saveptr_1654 = PHI <saveptr_550(96)>
  # _1653 = PHI <_551(96)>
  goto <bb 99>;

  <bb 98>:
  goto <bb 96>;

  <bb 99>:
  # saveptr_1405 = PHI <saveptr_1654(97), saveptr_883(94)>
  # _1383 = PHI <_1653(97), _841(94)>
  # DEBUG __result => 0B
  if (_1383 != 0)
    goto <bb 100>;
  else
    goto <bb 105>;

  <bb 100>:
  saveptr_552 = saveptr_1405 + 1;
  # DEBUG __s => saveptr_552
  # DEBUG __result => saveptr_1405
  goto <bb 104>;

  <bb 101>:
  saveptr_554 = saveptr_553 + 1;
  # DEBUG __s => saveptr_554
  if (_555 == 44)
    goto <bb 102>;
  else
    goto <bb 103>;

  <bb 102>:
  # saveptr_1652 = PHI <saveptr_553(101)>
  # saveptr_1650 = PHI <saveptr_554(101)>
  *saveptr_1652 = 0;
  goto <bb 374>;

  <bb 103>:

  <bb 104>:
  # saveptr_553 = PHI <saveptr_552(100), saveptr_554(103)>
  # DEBUG __s => saveptr_553
  _555 = *saveptr_553;
  if (_555 != 0)
    goto <bb 101>;
  else
    goto <bb 373>;

  <bb 105>:
  # DEBUG __result => 0B
  # DEBUG __s => saveptr_1405
  # DEBUG saveptr => saveptr_1405
  # DEBUG __s => NULL
  # DEBUG __sep => NULL
  # DEBUG __nextp => NULL
  # DEBUG tok => 0B
  len ={v} {CLOBBER};
  # DEBUG D#12 => {CLOBBER}
  # DEBUG saveptr => D#12
  # DEBUG h => NULL
  # DEBUG z => NULL
  # DEBUG p => NULL
  # DEBUG val => NULL
  # DEBUG saveptr => NULL
  # DEBUG len => NULL

  <bb 106>:
  # DEBUG D#12 => {CLOBBER}
  # DEBUG h => NULL
  # DEBUG z => NULL
  # DEBUG p => NULL
  # DEBUG val => NULL
  # DEBUG saveptr => NULL
  # DEBUG len => NULL
  # DEBUG p => 0B
  i_482 = i_1347 + 1;
  # DEBUG i => i_482
  # DEBUG saveptr => saveptr_1107
  # DEBUG p => 0B
  # DEBUG i => i_482
  _483 = h_53(D)->param.rc.i_zones;
  if (i_482 < _483)
    goto <bb 107>;
  else
    goto <bb 65>;

  <bb 107>:
  goto <bb 69>;

  <bb 108>:
  # prephitmp_1727 = PHI <pretmp_1725(57), _447(58), pretmp_1726(65)>
  if (prephitmp_1727 > 0)
    goto <bb 109>;
  else
    goto <bb 378>;

  <bb 109>:
  pretmp_1834 = h_53(D)->param.rc.zones;

  <bb 110>:
  # i_1339 = PHI <0(109), i_495(115)>
  # DEBUG i => i_1339
  _487 = (long unsigned int) i_1339;
  _488 = _487 * 32;
  _489 = pretmp_1834 + _488;
  z$i_start_490 = MEM[(struct x264_zone_t *)_489];
  # DEBUG z$i_start => z$i_start_490
  z$i_end_491 = MEM[(struct x264_zone_t *)_489 + 4B];
  # DEBUG z$i_end => z$i_end_491
  # DEBUG D#62 => MEM[(struct x264_zone_t *)_489 + 8B]
  # DEBUG z$b_force_qp => D#62
  # DEBUG D#61 => MEM[(struct x264_zone_t *)_489 + 16B]
  # DEBUG z$f_bitrate_factor => D#61
  _1192 = z$i_start_490 > z$i_end_491;
  _698 = z$i_start_490 < 0;
  _853 = _698 | _1192;
  if (_853 != 0)
    goto <bb 111>;
  else
    goto <bb 112>;

  <bb 111>:
  # z$i_start_1658 = PHI <z$i_start_490(110)>
  # z$i_end_1657 = PHI <z$i_end_491(110)>
  x264_log (h_53(D), 0, "invalid zone: start=%d end=%d\n", z$i_start_1658, z$i_end_1657);
  goto <bb 122>;

  <bb 112>:
  z$b_force_qp_492 = MEM[(struct x264_zone_t *)_489 + 8B];
  z$f_bitrate_factor_493 = MEM[(struct x264_zone_t *)_489 + 16B];
  _971 = z$f_bitrate_factor_493 <= 0.0;
  _974 = z$b_force_qp_492 == 0;
  _980 = _971 & _974;
  if (_980 != 0)
    goto <bb 113>;
  else
    goto <bb 114>;

  <bb 113>:
  # z$f_bitrate_factor_1656 = PHI <z$f_bitrate_factor_493(112)>
  _494 = (double) z$f_bitrate_factor_1656;
  x264_log (h_53(D), 0, "invalid zone: bitrate_factor=%f\n", _494);
  goto <bb 122>;

  <bb 114>:
  # DEBUG D#15 => {CLOBBER}
  # DEBUG z$i_start => D#15
  # DEBUG D#16 => {CLOBBER}
  # DEBUG z$i_end => D#16
  # DEBUG D#17 => {CLOBBER}
  # DEBUG z$b_force_qp => D#17
  # DEBUG D#18 => {CLOBBER}
  # DEBUG z$f_bitrate_factor => D#18
  i_495 = i_1339 + 1;
  # DEBUG i => i_495
  # DEBUG i => i_495
  if (i_495 < prephitmp_1727)
    goto <bb 115>;
  else
    goto <bb 116>;

  <bb 115>:
  goto <bb 110>;

  <bb 116>:
  _496 = prephitmp_1727 + 1;
  rc_445->i_zones = _496;
  _497 = (unsigned int) _496;
  _498 = _497 * 32;
  _499 = (int) _498;
  _500 = x264_malloc (_499);
  rc_445->zones = _500;
  _501 = rc_445->i_zones;
  _502 = _501 + -1;
  _503 = (long unsigned int) _502;
  _504 = _503 * 32;
  _505 = h_53(D)->param.rc.zones;
  _506 = _500 + 32;
  # DEBUG __dest => _506
  # DEBUG __src => _505
  # DEBUG __len => _504
  __builtin_memcpy (_506, _505, _504);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  _508 = rc_445->zones;
  _508->i_start = 0;
  _508->i_end = 2147483647;
  _508->b_force_qp = 0;
  _508->f_bitrate_factor = 1.0e+0;
  _509 = x264_malloc (616);
  _508->param = _509;
  _510 = &h_53(D)->param;
  _511 = rc_445->zones;
  _512 = _511->param;
  # DEBUG __dest => _512
  # DEBUG __src => _510
  # DEBUG __len => 616
  __builtin_memcpy (_512, _510, 616);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  # DEBUG i => 1
  # DEBUG i => 1
  _507 = rc_445->i_zones;
  if (_507 > 1)
    goto <bb 117>;
  else
    goto <bb 378>;

  <bb 117>:
  pretmp_1838 = rc_445->zones;

  <bb 118>:
  # i_1407 = PHI <1(117), i_521(121)>
  # DEBUG i => i_1407
  _516 = (long unsigned int) i_1407;
  _517 = _516 * 32;
  _518 = pretmp_1838 + _517;
  _519 = _518->param;
  if (_519 == 0B)
    goto <bb 119>;
  else
    goto <bb 120>;

  <bb 119>:
  _520 = pretmp_1838->param;
  _518->param = _520;

  <bb 120>:
  i_521 = i_1407 + 1;
  # DEBUG i => i_521
  # DEBUG i => i_521
  if (_507 > i_521)
    goto <bb 121>;
  else
    goto <bb 377>;

  <bb 121>:
  goto <bb 118>;

  <bb 122>:
  # DEBUG h => NULL
  # DEBUG z$f_bitrate_factor => NULL
  # DEBUG z$b_force_qp => NULL
  # DEBUG z$i_end => NULL
  # DEBUG z$i_start => NULL
  # DEBUG saveptr => NULL
  # DEBUG p => NULL
  # DEBUG i => NULL
  # DEBUG rc => NULL
  # DEBUG h => NULL
  # DEBUG z$f_bitrate_factor => NULL
  # DEBUG z$b_force_qp => NULL
  # DEBUG z$i_end => NULL
  # DEBUG z$i_start => NULL
  # DEBUG saveptr => NULL
  # DEBUG p => NULL
  # DEBUG i => NULL
  # DEBUG rc => NULL
  x264_log (h_53(D), 0, "failed to parse zones\n");
  goto <bb 370>;

  <bb 123>:
  _255 = h_53(D)->param.rc.psz_stat_in;
  if (_255 == 0B)
    goto <bb 124>;
  else
    goto <bb 125>;

  <bb 124>:
  __assert_fail ("h->param.rc.psz_stat_in", "encoder/ratecontrol.c", 367, &__PRETTY_FUNCTION__);

  <bb 125>:
  p_257 = x264_slurp_file (_255);
  # DEBUG stats_in => p_257
  # DEBUG stats_buf => p_257
  if (p_257 == 0B)
    goto <bb 126>;
  else
    goto <bb 127>;

  <bb 126>:
  x264_log (h_53(D), 0, "ratecontrol_init: can\'t open stats file\n");
  goto <bb 370>;

  <bb 127>:
  _259 = strncmp (p_257, "#options:", 9);
  if (_259 == 0)
    goto <bb 128>;
  else
    goto <bb 156>;

  <bb 128>:
  # DEBUG opts => p_257
  stats_in_260 = __builtin_strchr (p_257, 10);
  # DEBUG stats_in => stats_in_260
  if (stats_in_260 == 0B)
    goto <bb 155>;
  else
    goto <bb 129>;

  <bb 129>:
  *stats_in_260 = 0;
  p_262 = stats_in_260 + 1;
  # DEBUG stats_in => p_262
  p_263 = strstr (p_257, "bframes=");
  # DEBUG p => p_263
  if (p_263 != 0B)
    goto <bb 130>;
  else
    goto <bb 133>;

  <bb 130>:
  _265 = sscanf (p_263, "bframes=%d", &i);
  if (_265 != 0)
    goto <bb 131>;
  else
    goto <bb 133>;

  <bb 131>:
  _266 = h_53(D)->param.i_bframe;
  i.12_267 = i;
  if (_266 != i.12_267)
    goto <bb 132>;
  else
    goto <bb 133>;

  <bb 132>:
  x264_log (h_53(D), 0, "different number of B-frames than 1st pass (%d vs %d)\n", _266, i.12_267);
  goto <bb 155>;

  <bb 133>:
  _269 = strstr (p_257, "b_pyramid=1");
  if (_269 != 0B)
    goto <bb 134>;
  else
    goto <bb 136>;

  <bb 134>:
  _270 = h_53(D)->param.b_bframe_pyramid;
  if (_270 == 0)
    goto <bb 135>;
  else
    goto <bb 136>;

  <bb 135>:
  x264_log (h_53(D), 1, "1st pass used B-pyramid, 2nd doesn\'t\n");

  <bb 136>:
  p_272 = strstr (p_257, "keyint=");
  # DEBUG p => p_272
  if (p_272 != 0B)
    goto <bb 138>;
  else
    goto <bb 137>;

  <bb 137>:
  goto <bb 141>;

  <bb 138>:
  _274 = sscanf (p_272, "keyint=%d", &i);
  if (_274 != 0)
    goto <bb 139>;
  else
    goto <bb 137>;

  <bb 139>:
  _275 = h_53(D)->param.i_keyint_max;
  i.12_276 = i;
  if (_275 != i.12_276)
    goto <bb 140>;
  else
    goto <bb 137>;

  <bb 140>:
  x264_log (h_53(D), 1, "different keyint than 1st pass (%d vs %d)\n", _275, i.12_276);

  <bb 141>:
  _278 = strstr (p_257, "qp=0");
  if (_278 != 0B)
    goto <bb 142>;
  else
    goto <bb 144>;

  <bb 142>:
  _279 = h_53(D)->param.rc.i_rc_method;
  if (_279 == 2)
    goto <bb 143>;
  else
    goto <bb 144>;

  <bb 143>:
  x264_log (h_53(D), 1, "1st pass was lossless, bitrate prediction will be inaccurate\n");

  <bb 144>:
  p_281 = strstr (p_257, "b_adapt=");
  # DEBUG p => p_281
  if (p_281 != 0B)
    goto <bb 145>;
  else
    goto <bb 148>;

  <bb 145>:
  _283 = sscanf (p_281, "b_adapt=%d", &i);
  if (_283 != 0)
    goto <bb 146>;
  else
    goto <bb 148>;

  <bb 146>:
  i.12_284 = i;
  _987 = (unsigned int) i.12_284;
  if (_987 <= 2)
    goto <bb 147>;
  else
    goto <bb 148>;

  <bb 147>:
  h_53(D)->param.i_bframe_adaptive = i.12_284;
  goto <bb 150>;

  <bb 148>:
  _286 = h_53(D)->param.i_bframe;
  if (_286 != 0)
    goto <bb 149>;
  else
    goto <bb 150>;

  <bb 149>:
  x264_log (h_53(D), 0, "b_adapt method specified in stats file not valid\n");
  goto <bb 155>;

  <bb 150>:
  p_288 = strstr (p_257, "scenecut=");
  # DEBUG p => p_288
  if (p_288 != 0B)
    goto <bb 151>;
  else
    goto <bb 154>;

  <bb 151>:
  _290 = sscanf (p_288, "scenecut=%d", &i);
  if (_290 != 0)
    goto <bb 152>;
  else
    goto <bb 154>;

  <bb 152>:
  i.12_291 = i;
  _1426 = (unsigned int) i.12_291;
  _1205 = _1426 + 1;
  if (_1205 <= 101)
    goto <bb 153>;
  else
    goto <bb 154>;

  <bb 153>:
  h_53(D)->param.i_scenecut_threshold = i.12_291;
  _293 = strstr (p_288, "(pre)");
  _294 = _293 != 0B;
  _295 = (int) _294;
  h_53(D)->param.b_pre_scenecut = _295;
  i ={v} {CLOBBER};
  # DEBUG stats_in => p_262
  # DEBUG p => p_262
  # DEBUG i => -1
  # DEBUG p => p_262
  # DEBUG i => -1
  if (p_262 != 0B)
    goto <bb 156>;
  else
    goto <bb 161>;

  <bb 154>:
  x264_log (h_53(D), 0, "scenecut method specified in stats file not valid\n");

  <bb 155>:
  i ={v} {CLOBBER};
  goto <bb 370>;

  <bb 156>:
  # p_709 = PHI <p_262(153), p_257(127)>
  # DEBUG stats_in => p_709
  # DEBUG p => p_709
  # DEBUG i => -1

  <bb 157>:
  # i_1434 = PHI <-1(156), i_302(158)>
  # p_1443 = PHI <p_709(156), p_301(158)>
  # DEBUG p => p_1443
  # DEBUG i => i_1434
  _300 = p_1443 + 1;
  p_301 = __builtin_strchr (_300, 59);
  # DEBUG p => p_301
  i_302 = i_1434 + 1;
  # DEBUG i => i_302
  # DEBUG p => p_301
  # DEBUG i => i_302
  if (p_301 != 0B)
    goto <bb 158>;
  else
    goto <bb 159>;

  <bb 158>:
  goto <bb 157>;

  <bb 159>:
  # i_1668 = PHI <i_302(157)>
  if (i_1668 == 0)
    goto <bb 160>;
  else
    goto <bb 161>;

  <bb 160>:
  x264_log (h_53(D), 0, "empty stats file\n");
  goto <bb 370>;

  <bb 161>:
  # p_1121 = PHI <p_709(159), p_262(153)>
  # i_1344 = PHI <i_1668(159), -1(153)>
  MEM[(struct x264_ratecontrol_t *)_59].num_entries = i_1344;
  _305 = h_53(D)->param.i_frame_total;
  _733 = _305 > 0;
  _556 = _305 < i_1344;
  _523 = _556 & _733;
  if (_523 != 0)
    goto <bb 162>;
  else
    goto <bb 163>;

  <bb 162>:
  x264_log (h_53(D), 1, "2nd pass has fewer frames than 1st pass (%d vs %d)\n", _305, i_1344);
  pretmp_1733 = MEM[(struct x264_ratecontrol_t *)_59].num_entries;

  <bb 163>:
  # prephitmp_1734 = PHI <pretmp_1733(162), i_1344(161)>
  _307 = h_53(D)->param.i_frame_total;
  if (_307 > prephitmp_1734)
    goto <bb 164>;
  else
    goto <bb 165>;

  <bb 164>:
  x264_log (h_53(D), 0, "2nd pass has more frames than 1st pass (%d vs %d)\n", _307, prephitmp_1734);
  goto <bb 370>;

  <bb 165>:
  _310 = (unsigned int) prephitmp_1734;
  _311 = _310 * 72;
  _312 = (int) _311;
  _314 = x264_malloc (_312);
  MEM[(struct x264_ratecontrol_t *)_59].entry = _314;
  _316 = MEM[(struct x264_ratecontrol_t *)_59].num_entries;
  _317 = (long unsigned int) _316;
  _318 = _317 * 72;
  # DEBUG __dest => _314
  # DEBUG __ch => 0
  # DEBUG __len => _318
  __builtin_memset (_314, 0, _318);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  _364 = MEM[(struct x264_ratecontrol_t *)_59].num_entries;
  if (_364 > 0)
    goto <bb 166>;
  else
    goto <bb 190>;

  <bb 166>:
  pretmp_1825 = MEM[(struct x264_ratecontrol_t *)_59].entry;
  pretmp_1829 = MEM[(struct x264_ratecontrol_t *)_59].nmb;
  pretmp_1831 = pretmp_1829 + 10;

  <bb 167>:
  # i_1435 = PHI <0(166), i_332(168)>
  # DEBUG i => i_1435
  _322 = (long unsigned int) i_1435;
  _323 = _322 * 72;
  rce_324 = pretmp_1825 + _323;
  # DEBUG rce => rce_324
  rce_324->pict_type = 0;
  # DEBUG qp => 2.0e+1
  # DEBUG qp => NULL
  rce_324->new_qscale = 2.14186573028564453125e+0;
  rce_324->qscale = 2.14186573028564453125e+0;
  rce_324->misc_bits = pretmp_1831;
  rce_324->new_qp = 0;
  i_332 = i_1435 + 1;
  # DEBUG i => i_332
  # DEBUG i => i_332
  if (i_332 < _364)
    goto <bb 168>;
  else
    goto <bb 169>;

  <bb 168>:
  goto <bb 167>;

  <bb 169>:

  <bb 170>:
  # i_1436 = PHI <0(169), i_370(188)>
  # p_1444 = PHI <p_1121(169), p_10(188)>
  # DEBUG p => p_1444
  # DEBUG i => i_1436
  p_334 = __builtin_strchr (p_1444, 59);
  # DEBUG next => p_334
  if (p_334 != 0B)
    goto <bb 171>;
  else
    goto <bb 172>;

  <bb 171>:
  *p_334 = 0;
  p_336 = p_334 + 1;
  # DEBUG next => p_336

  <bb 172>:
  # p_10 = PHI <0B(170), p_336(171)>
  # DEBUG next => p_10
  e_338 = sscanf (p_1444, " in:%d ", &frame_number);
  # DEBUG e => e_338
  frame_number.13_339 = frame_number;
  if (frame_number.13_339 < 0)
    goto <bb 173>;
  else
    goto <bb 174>;

  <bb 173>:
  # frame_number.13_1667 = PHI <frame_number.13_339(172)>
  # i_1621 = PHI <i_1436(172)>
  goto <bb 176>;

  <bb 174>:
  _340 = MEM[(struct x264_ratecontrol_t *)_59].num_entries;
  if (frame_number.13_339 >= _340)
    goto <bb 175>;
  else
    goto <bb 177>;

  <bb 175>:
  # frame_number.13_1666 = PHI <frame_number.13_339(174)>
  # i_1620 = PHI <i_1436(174)>

  <bb 176>:
  # frame_number.13_1617 = PHI <frame_number.13_1666(175), frame_number.13_1667(173)>
  # i_1615 = PHI <i_1620(175), i_1621(173)>
  x264_log (h_53(D), 0, "bad frame number (%d) at stats line %d\n", frame_number.13_1617, i_1615);
  goto <bb 189>;

  <bb 177>:
  _341 = MEM[(struct x264_ratecontrol_t *)_59].entry;
  _342 = (long unsigned int) frame_number.13_339;
  _343 = _342 * 72;
  rce_344 = _341 + _343;
  # DEBUG rce => rce_344
  rce_344->direct_mode = 0;
  _346 = &rce_344->direct_mode;
  _347 = &rce_344->s_count;
  _348 = &rce_344->p_count;
  _349 = &rce_344->i_count;
  _350 = &rce_344->misc_bits;
  _351 = &rce_344->mv_bits;
  _352 = &rce_344->tex_bits;
  _354 = sscanf (p_1444, " in:%*d out:%*d type:%c q:%f tex:%d mv:%d misc:%d imb:%d pmb:%d smb:%d d:%c", &pict_type, &qp, _352, _351, _350, _349, _348, _347, _346);
  e_355 = e_338 + _354;
  # DEBUG e => e_355
  pict_type.14_356 = pict_type;
  switch (pict_type.14_356) <default: <L168>, case 66: <L137>, case 73: <L134>, case 80: <L136>, case 98: <L138>, case 105: <L135>>

  # i_1619 = PHI <i_1436(177)>
<L168>:
  goto <bb 186> (<L164>);

<L134>:
  rce_344->kept_as_ref = 1;

<L135>:
  rce_344->pict_type = 2;
  goto <bb 184> (<L162>);

<L136>:
  rce_344->pict_type = 0;
  goto <bb 184> (<L162>);

<L137>:
  rce_344->kept_as_ref = 1;

<L138>:
  rce_344->pict_type = 1;

<L162>:
  # DEBUG e => e_355
  if (e_355 <= 9)
    goto <bb 185>;
  else
    goto <bb 187>;

  <bb 185>:
  # e_1665 = PHI <e_355(184)>
  # i_1618 = PHI <i_1436(184)>

  # e_894 = PHI <-1(178), e_1665(185)>
  # i_1614 = PHI <i_1619(178), i_1618(185)>
<L164>:
  # DEBUG e => NULL
  x264_log (h_53(D), 0, "statistics are damaged at line %d, parser out=%d\n", i_1614, e_894);
  goto <bb 189>;

  <bb 187>:
  qp.15_362 = qp;
  _363 = (double) qp.15_362;
  # DEBUG qp => _363
  _435 = _363 - 1.2e+1;
  _436 = _435 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _437 = pow (2.0e+0, _436);
  _438 = _437 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  _365 = (float) _438;
  rce_344->qscale = _365;
  # DEBUG p => p_10
  frame_number ={v} {CLOBBER};
  pict_type ={v} {CLOBBER};
  qp ={v} {CLOBBER};
  i_370 = i_1436 + 1;
  # DEBUG i => i_370
  # DEBUG p => p_10
  # DEBUG i => i_370
  _333 = MEM[(struct x264_ratecontrol_t *)_59].num_entries;
  if (_333 > i_370)
    goto <bb 188>;
  else
    goto <bb 190>;

  <bb 188>:
  goto <bb 170>;

  <bb 189>:
  frame_number ={v} {CLOBBER};
  pict_type ={v} {CLOBBER};
  qp ={v} {CLOBBER};
  goto <bb 370>;

  <bb 190>:
  x264_free (p_257);
  _377 = h_53(D)->param.rc.i_rc_method;
  if (_377 == 2)
    goto <bb 191>;
  else
    goto <bb 380>;

  <bb 191>:
  # DEBUG h => h_53(D)
  rcc_561 = h_53(D)->rc;
  # DEBUG rcc => rcc_561
  # DEBUG all_const_bits => 0
  _562 = h_53(D)->param.rc.i_bitrate;
  _563 = (double) _562;
  _564 = rcc_561->num_entries;
  _565 = (double) _564;
  _566 = _563 * _565;
  _567 = _566 * 1.0e+3;
  _568 = rcc_561->fps;
  _569 = _567 / _568;
  all_available_bits_570 = (uint64_t) _569;
  # DEBUG all_available_bits => all_available_bits_570
  _571 = h_53(D)->param.rc.f_qblur;
  qblur_572 = (double) _571;
  # DEBUG qblur => qblur_572
  _573 = h_53(D)->param.rc.f_complexity_blur;
  cplxblur_574 = (double) _573;
  # DEBUG cplxblur => cplxblur_574
  _575 = qblur_572 * 4.0e+0;
  _576 = (int) _575;
  filter_size_577 = _576 | 1;
  # DEBUG filter_size => filter_size_577
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG all_const_bits => 0
  if (_564 > 0)
    goto <bb 192>;
  else
    goto <bb 195>;

  <bb 192>:
  pretmp_1820 = rcc_561->entry;

  <bb 193>:
  # i_1382 = PHI <0(192), i_587(194)>
  # all_const_bits_1404 = PHI <0(192), all_const_bits_586(194)>
  # DEBUG i => i_1382
  # DEBUG all_const_bits => all_const_bits_1404
  _580 = (long unsigned int) i_1382;
  _581 = _580 * 72;
  rce_582 = pretmp_1820 + _581;
  # DEBUG rce => rce_582
  _583 = rce_582->misc_bits;
  _584 = (long unsigned int) _583;
  all_const_bits_586 = _584 + all_const_bits_1404;
  # DEBUG all_const_bits => all_const_bits_586
  i_587 = i_1382 + 1;
  # DEBUG i => i_587
  # DEBUG i => i_587
  # DEBUG all_const_bits => all_const_bits_586
  if (_564 > i_587)
    goto <bb 194>;
  else
    goto <bb 383>;

  <bb 194>:
  goto <bb 193>;

  <bb 195>:
  # DEBUG i => 0
  if (_564 > 0)
    goto <bb 198>;
  else
    goto <bb 196>;

  <bb 196>:
  _675 = (unsigned int) _564;
  _676 = _675 * 8;
  _677 = (int) _676;
  blurred_qscale_678 = x264_malloc (_677);
  # DEBUG qscale => blurred_qscale_678
  if (filter_size_577 > 1)
    goto <bb 224>;
  else
    goto <bb 225>;

  <bb 197>:
  _588 = (double) all_const_bits_1649;
  _589 = _568 * _588;
  _590 = _565 * 1.0e+3;
  _591 = _589 / _590;
  _592 = (int) _591;
  x264_log (h_53(D), 0, "requested bitrate is too low. estimated minimum is %d kbps\n", _592);
  # DEBUG h => NULL
  # DEBUG avgq => NULL
  # DEBUG rce => NULL
  # DEBUG coeff => NULL
  # DEBUG d => NULL
  # DEBUG index => NULL
  # DEBUG sum => NULL
  # DEBUG q => NULL
  # DEBUG j => NULL
  # DEBUG rce => NULL
  # DEBUG rcj => NULL
  # DEBUG rcj => NULL
  # DEBUG j => NULL
  # DEBUG gaussian_weight => NULL
  # DEBUG weight => NULL
  # DEBUG cplx_sum => NULL
  # DEBUG weight_sum => NULL
  # DEBUG rce => NULL
  # DEBUG rce => NULL
  # DEBUG i => NULL
  # DEBUG blurred_qscale => NULL
  # DEBUG expected_bits => NULL
  # DEBUG filter_size => NULL
  # DEBUG cplxblur => NULL
  # DEBUG qblur => NULL
  # DEBUG step_mult => NULL
  # DEBUG step => NULL
  # DEBUG rate_factor => NULL
  # DEBUG all_available_bits => NULL
  # DEBUG all_const_bits => NULL
  # DEBUG rcc => NULL
  goto <bb 370>;

  <bb 198>:
  pretmp_1735 = rcc_561->entry;

  <bb 199>:
  # prephitmp_1736 = PHI <pretmp_1820(383), pretmp_1735(198)>
  pretmp_1740 = cplxblur_574 * 2.0e+0;
  pretmp_1742 = pretmp_1740 >= 0.0;

  <bb 200>:
  # i_1386 = PHI <0(199), i_674(223)>
  # DEBUG i => i_1386
  _595 = (long unsigned int) i_1386;
  _596 = _595 * 72;
  rce_597 = prephitmp_1736 + _596;
  # DEBUG rce => rce_597
  # DEBUG weight_sum => 0.0
  # DEBUG cplx_sum => 0.0
  # DEBUG weight => 1.0e+0
  # DEBUG j => 1
  # DEBUG j => 1
  # DEBUG weight => 1.0e+0
  # DEBUG cplx_sum => 0.0
  # DEBUG weight_sum => 0.0
  if (pretmp_1740 > 1.0e+0)
    goto <bb 201>;
  else
    goto <bb 205>;

  <bb 201>:
  _1122 = _564 - i_1386;
  if (_1122 > 1)
    goto <bb 202>;
  else
    goto <bb 205>;

  <bb 202>:
  pretmp_1743 = rcc_561->nmb;
  pretmp_1745 = (float) pretmp_1743;
  reciptmp_1613 = 1.0e+0 / pretmp_1745;

  <bb 203>:
  # j_1393 = PHI <1(202), j_631(212)>
  # weight_1394 = PHI <1.0e+0(202), weight_612(212)>
  # weight_sum_1388 = PHI <0.0(202), weight_sum_620(212)>
  # cplx_sum_1397 = PHI <0.0(202), cplx_sum_630(212)>
  # DEBUG j => j_1393
  # DEBUG weight => weight_1394
  # DEBUG cplx_sum => cplx_sum_1397
  # DEBUG weight_sum => weight_sum_1388
  _599 = i_1386 + j_1393;
  _600 = (long unsigned int) _599;
  _601 = _600 * 72;
  rcj_602 = prephitmp_1736 + _601;
  # DEBUG rcj => rcj_602
  _603 = rcj_602->i_count;
  _604 = (float) _603;
  _607 = reciptmp_1613 * _604;
  _608 = (double) _607;
  powmult_735 = _608 * _608;
  _610 = 1.0e+0 - powmult_735;
  weight_612 = _610 * weight_1394;
  # DEBUG weight => weight_612
  if (weight_612 < 1.00000000000000004792173602385929598312941379845142364502e-4)
    goto <bb 204>;
  else
    goto <bb 206>;

  <bb 204>:
  # weight_sum_1625 = PHI <weight_sum_1388(203)>
  # cplx_sum_1624 = PHI <cplx_sum_1397(203)>

  <bb 205>:
  # weight_sum_899 = PHI <weight_sum_1625(204), weight_sum_1648(209), weight_sum_1647(211), 0.0(201), 0.0(200)>
  # cplx_sum_422 = PHI <cplx_sum_1624(204), cplx_sum_1646(209), cplx_sum_1645(211), 0.0(201), 0.0(200)>
  # DEBUG j => 0
  # DEBUG weight => 1.0e+0
  # DEBUG cplx_sum => cplx_sum_422
  # DEBUG weight_sum => weight_sum_899
  _1136 = i_1386 >= 0;
  _1105 = _1136 & pretmp_1742;
  if (_1105 != 0)
    goto <bb 213>;
  else
    goto <bb 221>;

  <bb 206>:
  _613 = -j_1393;
  _614 = _613 * j_1393;
  _615 = (double) _614;
  _616 = _615 * 5.00000000000000010408340855860842566471546888351440429688e-3;
  _617 = exp (_616);
  gaussian_weight_618 = weight_612 * _617;
  # DEBUG gaussian_weight => gaussian_weight_618
  weight_sum_620 = gaussian_weight_618 + weight_sum_1388;
  # DEBUG weight_sum => weight_sum_620
  _621 = MEM[(float *)rcj_602 + 8B];
  # DEBUG D#8 => rcj_602
  _622 = MEM[(int *)rcj_602 + 12B];
  # DEBUG D#8 => rcj_602
  _623 = MEM[(int *)rcj_602 + 16B];
  # DEBUG D#8 => rcj_602
  # DEBUG D#8 => rcj_602
  # DEBUG qscale => 1.0e+0
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG qscale => 1.0e+0
  _855 = (double) _623;
  _856 = _855 + 1.000000000000000055511151231257827021181583404541015625e-1;
  _858 = (double) _621;
  _861 = pow (_858, 1.100000000000000088817841970012523233890533447265625e+0);
  _862 = _856 * _861;
  _864 = (double) _622;
  if (_621 > 1.0e+0)
    goto <bb 207>;
  else
    goto <bb 208>;

  <bb 207>:
  _1746 = __builtin_sqrt (_858);

  <bb 208>:
  # prephitmp_1748 = PHI <1.0e+0(206), _1746(207)>
  _869 = _864 * prephitmp_1748;
  # DEBUG qscale => NULL
  _627 = _862 + _869;
  _628 = gaussian_weight_618 * _627;
  cplx_sum_630 = _628 + cplx_sum_1397;
  # DEBUG cplx_sum => cplx_sum_630
  j_631 = j_1393 + 1;
  # DEBUG j => j_631
  # DEBUG j => j_631
  # DEBUG weight => weight_612
  # DEBUG cplx_sum => cplx_sum_630
  # DEBUG weight_sum => weight_sum_620
  _632 = (double) j_631;
  if (_632 < pretmp_1740)
    goto <bb 210>;
  else
    goto <bb 209>;

  <bb 209>:
  # weight_sum_1648 = PHI <weight_sum_620(208)>
  # cplx_sum_1646 = PHI <cplx_sum_630(208)>
  goto <bb 205>;

  <bb 210>:
  if (j_631 < _1122)
    goto <bb 212>;
  else
    goto <bb 211>;

  <bb 211>:
  # weight_sum_1647 = PHI <weight_sum_620(210)>
  # cplx_sum_1645 = PHI <cplx_sum_630(210)>
  goto <bb 205>;

  <bb 212>:
  goto <bb 203>;

  <bb 213>:
  pretmp_1749 = rcc_561->nmb;
  pretmp_1751 = (float) pretmp_1749;
  reciptmp_1612 = 1.0e+0 / pretmp_1751;

  <bb 214>:
  # j_1396 = PHI <0(213), j_668(220)>
  # weight_1400 = PHI <1.0e+0(213), weight_667(220)>
  # weight_sum_1399 = PHI <weight_sum_899(213), weight_sum_648(220)>
  # cplx_sum_1398 = PHI <cplx_sum_422(213), cplx_sum_658(220)>
  # prephitmp_1758 = PHI <1.0e+0(213), _1756(220)>
  # DEBUG j => j_1396
  # DEBUG weight => weight_1400
  # DEBUG cplx_sum => cplx_sum_1398
  # DEBUG weight_sum => weight_sum_1399
  _636 = i_1386 - j_1396;
  _637 = (long unsigned int) _636;
  _638 = _637 * 72;
  rcj_639 = prephitmp_1736 + _638;
  # DEBUG rcj => rcj_639
  gaussian_weight_646 = weight_1400 * prephitmp_1758;
  # DEBUG gaussian_weight => gaussian_weight_646
  weight_sum_648 = gaussian_weight_646 + weight_sum_1399;
  # DEBUG weight_sum => weight_sum_648
  _649 = MEM[(float *)rcj_639 + 8B];
  # DEBUG D#8 => rcj_639
  _650 = MEM[(int *)rcj_639 + 12B];
  # DEBUG D#8 => rcj_639
  _651 = MEM[(int *)rcj_639 + 16B];
  # DEBUG D#8 => rcj_639
  # DEBUG D#8 => rcj_639
  # DEBUG qscale => 1.0e+0
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG qscale => 1.0e+0
  _875 = (double) _651;
  _876 = _875 + 1.000000000000000055511151231257827021181583404541015625e-1;
  _878 = (double) _649;
  _881 = pow (_878, 1.100000000000000088817841970012523233890533447265625e+0);
  _882 = _876 * _881;
  _884 = (double) _650;
  if (_649 > 1.0e+0)
    goto <bb 215>;
  else
    goto <bb 216>;

  <bb 215>:
  _1760 = __builtin_sqrt (_878);

  <bb 216>:
  # prephitmp_1762 = PHI <1.0e+0(214), _1760(215)>
  _889 = _884 * prephitmp_1762;
  # DEBUG qscale => NULL
  _655 = _882 + _889;
  _656 = gaussian_weight_646 * _655;
  cplx_sum_658 = _656 + cplx_sum_1398;
  # DEBUG cplx_sum => cplx_sum_658
  _659 = rcj_639->i_count;
  _660 = (float) _659;
  _663 = reciptmp_1612 * _660;
  _664 = (double) _663;
  powmult_1209 = _664 * _664;
  _666 = 1.0e+0 - powmult_1209;
  weight_667 = _666 * weight_1400;
  # DEBUG weight => weight_667
  if (weight_667 < 1.00000000000000004792173602385929598312941379845142364502e-4)
    goto <bb 217>;
  else
    goto <bb 218>;

  <bb 217>:
  # weight_sum_1644 = PHI <weight_sum_648(216)>
  # cplx_sum_1642 = PHI <cplx_sum_658(216)>
  goto <bb 221>;

  <bb 218>:
  j_668 = j_1396 + 1;
  # DEBUG j => j_668
  # DEBUG j => j_668
  # DEBUG weight => weight_667
  # DEBUG cplx_sum => cplx_sum_658
  # DEBUG weight_sum => weight_sum_648
  _669 = (double) j_668;
  _1340 = j_668 <= i_1386;
  _936 = _669 <= pretmp_1740;
  _914 = _936 & _1340;
  if (_914 != 0)
    goto <bb 220>;
  else
    goto <bb 219>;

  <bb 219>:
  # weight_sum_1643 = PHI <weight_sum_648(218)>
  # cplx_sum_1641 = PHI <cplx_sum_658(218)>
  goto <bb 221>;

  <bb 220>:
  pretmp_1752 = -j_668;
  pretmp_1753 = j_668 * pretmp_1752;
  pretmp_1754 = (double) pretmp_1753;
  pretmp_1755 = pretmp_1754 * 5.00000000000000010408340855860842566471546888351440429688e-3;
  _1756 = exp (pretmp_1755);
  goto <bb 214>;

  <bb 221>:
  # weight_sum_671 = PHI <weight_sum_1644(217), weight_sum_1643(219), weight_sum_899(205)>
  # cplx_sum_670 = PHI <cplx_sum_1642(217), cplx_sum_1641(219), cplx_sum_422(205)>
  # DEBUG cplx_sum => cplx_sum_670
  # DEBUG weight_sum => weight_sum_671
  _672 = cplx_sum_670 / weight_sum_671;
  _673 = (float) _672;
  rce_597->blurred_complexity = _673;
  i_674 = i_1386 + 1;
  # DEBUG i => i_674
  # DEBUG i => i_674
  if (_564 > i_674)
    goto <bb 223>;
  else
    goto <bb 222>;

  <bb 222>:
  goto <bb 196>;

  <bb 223>:
  goto <bb 200>;

  <bb 224>:
  _679 = rcc_561->num_entries;
  _680 = (unsigned int) _679;
  _681 = _680 * 8;
  _682 = (int) _681;
  blurred_qscale_683 = x264_malloc (_682);
  # DEBUG blurred_qscale => blurred_qscale_683

  <bb 225>:
  # blurred_qscale_769 = PHI <blurred_qscale_678(196), blurred_qscale_683(224)>
  # DEBUG blurred_qscale => blurred_qscale_769
  # DEBUG expected_bits => 1.0e+0
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG expected_bits => 1.0e+0
  _1385 = rcc_561->num_entries;
  if (_1385 > 0)
    goto <bb 226>;
  else
    goto <bb 232>;

  <bb 226>:
  pretmp_1815 = rcc_561->entry;

  <bb 227>:
  # i_1387 = PHI <0(226), i_701(231)>
  # expected_bits_1461 = PHI <1.0e+0(226), expected_bits_700(231)>
  # prephitmp_1816 = PHI <pretmp_1815(226), _692(231)>
  # DEBUG i => i_1387
  # DEBUG expected_bits => expected_bits_1461
  _686 = (long unsigned int) i_1387;
  _687 = _686 * 72;
  _688 = prephitmp_1816 + _687;
  _689 = MEM[(float *)h_53(D) + 560B];
  # DEBUG D#7 => h_53(D)
  _690 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];
  # DEBUG D#7 => h_53(D)
  qscale_691 = get_qscale.isra.6 (_689, _690, _688, 1.0e+0, i_1387);
  _692 = rcc_561->entry;
  _693 = _692 + _687;
  _694 = MEM[(float *)_693 + 8B];
  # DEBUG D#8 => _693
  _695 = MEM[(int *)_693 + 12B];
  # DEBUG D#8 => _693
  _696 = MEM[(int *)_693 + 16B];
  # DEBUG D#8 => _693
  _697 = MEM[(int *)_693 + 20B];
  # DEBUG D#8 => _693
  # DEBUG qscale => qscale_691
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  qscale_1211 = MAX_EXPR <qscale_691, 1.000000000000000055511151231257827021181583404541015625e-1>;
  # DEBUG qscale => qscale_1211
  _895 = (double) _696;
  _896 = _895 + 1.000000000000000055511151231257827021181583404541015625e-1;
  _898 = (double) _694;
  _900 = _898 / qscale_1211;
  _901 = pow (_900, 1.100000000000000088817841970012523233890533447265625e+0);
  _902 = _896 * _901;
  _904 = (double) _695;
  if (_694 > 1.0e+0)
    goto <bb 228>;
  else
    goto <bb 229>;

  <bb 228>:

  <bb 229>:
  # iftmp.23_906 = PHI <1.0e+0(227), _898(228)>
  _905 = MAX_EXPR <qscale_1211, 1.0e+0>;
  _907 = iftmp.23_906 / _905;
  _908 = __builtin_sqrt (_907);
  _909 = _904 * _908;
  _990 = _909 + expected_bits_1461;
  _911 = (double) _697;
  _964 = _902 + _911;
  # DEBUG qscale => NULL
  expected_bits_700 = _964 + _990;
  # DEBUG expected_bits => expected_bits_700
  i_701 = i_1387 + 1;
  # DEBUG i => i_701
  # DEBUG i => i_701
  # DEBUG expected_bits => expected_bits_700
  _702 = rcc_561->num_entries;
  if (i_701 < _702)
    goto <bb 231>;
  else
    goto <bb 230>;

  <bb 230>:
  # expected_bits_1640 = PHI <expected_bits_700(229)>
  goto <bb 232>;

  <bb 231>:
  goto <bb 227>;

  <bb 232>:
  # expected_bits_1390 = PHI <expected_bits_1640(230), 1.0e+0(225)>
  _703 = (double) all_available_bits_570;
  step_mult_704 = _703 / expected_bits_1390;
  # DEBUG step_mult => step_mult_704
  # DEBUG rate_factor => 0.0
  step_705 = step_mult_704 * 1.0e+4;
  # DEBUG step => step_705
  # DEBUG step => step_705
  # DEBUG rate_factor => 0.0
  _1445 = step_mult_704 * 9.99999999999999954748111825886258685613938723690807819366e-8;
  if (step_705 > _1445)
    goto <bb 234>;
  else
    goto <bb 233>;

  <bb 233>:
  x264_free (blurred_qscale_678);
  if (filter_size_577 > 1)
    goto <bb 298>;
  else
    goto <bb 299>;

  <bb 234>:
  pretmp_1803 = filter_size_577 / -2;
  powmult_598 = qblur_572 * qblur_572;
  powmult_629 = 1.0e+0 / powmult_598;

  <bb 235>:
  # rate_factor_1389 = PHI <0.0(234), rate_factor_852(297)>
  # step_1395 = PHI <step_705(234), step_798(297)>
  # DEBUG step => step_1395
  # DEBUG rate_factor => rate_factor_1389
  # DEBUG expected_bits => 0.0
  rate_factor_708 = rate_factor_1389 + step_1395;
  # DEBUG rate_factor => rate_factor_708
  rcc_561->last_non_b_pict_type = -1;
  rcc_561->last_accum_p_norm = 1.0e+0;
  rcc_561->accum_p_norm = 0.0;
  # DEBUG i => 0
  # DEBUG i => 0
  _1458 = rcc_561->num_entries;
  if (_1458 > 0)
    goto <bb 236>;
  else
    goto <bb 240>;

  <bb 236>:

  <bb 237>:
  # i_1381 = PHI <0(236), i_719(239)>
  # DEBUG i => i_1381
  _710 = (long unsigned int) i_1381;
  _711 = _710 * 8;
  _712 = blurred_qscale_678 + _711;
  _713 = rcc_561->entry;
  _714 = _710 * 72;
  _715 = _713 + _714;
  _716 = MEM[(float *)h_53(D) + 560B];
  # DEBUG D#7 => h_53(D)
  _717 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];
  # DEBUG D#7 => h_53(D)
  _718 = get_qscale.isra.6 (_716, _717, _715, rate_factor_708, i_1381);
  *_712 = _718;
  i_719 = i_1381 + 1;
  # DEBUG i => i_719
  # DEBUG i => i_719
  _720 = rcc_561->num_entries;
  if (i_719 < _720)
    goto <bb 239>;
  else
    goto <bb 238>;

  <bb 238>:
  # _1639 = PHI <_720(237)>
  goto <bb 240>;

  <bb 239>:
  goto <bb 237>;

  <bb 240>:
  # _1282 = PHI <_1639(238), _1458(235)>
  i_721 = _1282 + -1;
  # DEBUG i => i_721
  # DEBUG i => i_721
  if (i_721 >= 0)
    goto <bb 242>;
  else
    goto <bb 241>;

  <bb 241>:
  if (filter_size_577 > 1)
    goto <bb 271>;
  else
    goto <bb 284>;

  <bb 242>:
  _727 = rcc_561->entry;
  rcc_732 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];

  <bb 243>:
  # i_1241 = PHI <i_721(242), i_734(270)>
  # DEBUG i => i_1241
  _723 = (long unsigned int) i_1241;
  _724 = _723 * 8;
  _725 = blurred_qscale_678 + _724;
  q_726 = *_725;
  _728 = _723 * 72;
  _729 = _727 + _728;
  # DEBUG D#60 => MEM[(float *)h_53(D) + 516B]
  # DEBUG D#11 => h_53(D)
  # DEBUG D#11 => h_53(D)
  # DEBUG D#63 => MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B]
  # DEBUG D#11 => h_53(D)
  # DEBUG rce => _729
  # DEBUG q => q_726
  # DEBUG h => D#11
  # DEBUG h => D#11
  # DEBUG h => D#11
  # DEBUG rcc => D#63
  pict_type_915 = _729->pict_type;
  # DEBUG pict_type => pict_type_915
  # DEBUG D#59 => D#63->last_qscale_for[0]
  # DEBUG last_p_q => D#59
  _917 = rcc_732->last_non_b_pict_type;
  # DEBUG D#58 => D#63->last_qscale_for[_917]
  # DEBUG last_non_b_q => D#58
  if (pict_type_915 == 2)
    goto <bb 244>;
  else
    goto <bb 250>;

  <bb 244>:
  _730 = MEM[(float *)h_53(D) + 516B];
  # DEBUG iq => q_726
  _919 = rcc_732->accum_p_qp;
  _920 = rcc_732->accum_p_norm;
  _921 = _919 / _920;
  # DEBUG qp => _921
  _922 = _921 - 1.2e+1;
  _923 = _922 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _924 = pow (2.0e+0, _923);
  # DEBUG qp => NULL
  # DEBUG pq => NULL
  # DEBUG D#57 => ABS_EXPR <D#60>
  # DEBUG ip_factor => (double) D#57
  if (_920 <= 0.0)
    goto <bb 384>;
  else
    goto <bb 245>;

  <bb 245>:
  _927 = ABS_EXPR <_730>;
  ip_factor_928 = (double) _927;
  if (_730 < 0.0)
    goto <bb 246>;
  else
    goto <bb 247>;

  <bb 246>:
  q_929 = q_726 / ip_factor_928;
  # DEBUG q => q_929
  goto <bb 384>;

  <bb 247>:
  _925 = _924 * 8.4999999999999997779553950749686919152736663818359375e-1;
  if (_920 >= 1.0e+0)
    goto <bb 248>;
  else
    goto <bb 249>;

  <bb 248>:
  q_930 = _925 / ip_factor_928;
  # DEBUG q => q_930
  goto <bb 384>;

  <bb 249>:
  _931 = _920 * _925;
  _932 = _931 / ip_factor_928;
  _933 = 1.0e+0 - _920;
  _934 = q_726 * _933;
  q_935 = _932 + _934;
  # DEBUG q => q_935
  goto <bb 384>;

  <bb 250>:
  if (pict_type_915 == 1)
    goto <bb 251>;
  else
    goto <bb 255>;

  <bb 251>:
  _731 = MEM[(float *)h_53(D) + 520B];
  q_918 = rcc_732->last_qscale_for[_917];
  if (_731 > 0.0)
    goto <bb 252>;
  else
    goto <bb 253>;

  <bb 252>:

  <bb 253>:
  # q_940 = PHI <q_726(251), q_918(252)>
  # DEBUG q => q_940
  _937 = _729->kept_as_ref;
  if (_937 == 0)
    goto <bb 254>;
  else
    goto <bb 385>;

  <bb 254>:
  _938 = ABS_EXPR <_731>;
  _939 = (double) _938;
  q_941 = _939 * q_940;
  # DEBUG q => q_941
  goto <bb 385>;

  <bb 255>:
  _926 = _917 == 0;
  _890 = pict_type_915 == 0;
  _481 = _890 & _926;
  if (_481 != 0)
    goto <bb 256>;
  else
    goto <bb 385>;

  <bb 256>:
  q_916 = rcc_732->last_qscale_for[0];
  _942 = _729->tex_bits;
  if (_942 == 0)
    goto <bb 257>;
  else
    goto <bb 385>;

  <bb 257>:
  goto <bb 385>;

  <bb 258>:
  _943 = rcc_732->last_accum_p_norm;
  if (_943 < 1.0e+0)
    goto <bb 387>;
  else
    goto <bb 389>;

  <bb 259>:
  last_q_944 = rcc_732->last_qscale_for[pict_type_915];
  # DEBUG last_q => last_q_944
  _945 = rcc_732->lstep;
  q_946 = last_q_944 * _945;
  # DEBUG max_qscale => q_946
  # DEBUG min_qscale => last_q_944 / _945
  if (q_515 > q_946)
    goto <bb 262>;
  else
    goto <bb 260>;

  <bb 260>:
  q_947 = last_q_944 / _945;

  <bb 261>:
  # q_1357 = PHI <q_947(260), q_477(388)>
  # q_1356 = PHI <q_515(260), q_1116(388)>
  q_897 = MAX_EXPR <q_1356, q_1357>;

  <bb 262>:
  # q_949 = PHI <q_1116(384), q_515(385), q_946(259), q_897(261)>
  # DEBUG q => q_949
  rcc_732->last_qscale_for[pict_type_915] = q_949;
  if (pict_type_915 != 1)
    goto <bb 263>;
  else
    goto <bb 267>;

  <bb 263>:
  # q_1354 = PHI <q_949(262), q_467(386), q_1116(389)>
  # DEBUG q => q_1354
  rcc_732->last_non_b_pict_type = pict_type_915;
  if (pict_type_915 == 2)
    goto <bb 264>;
  else
    goto <bb 265>;

  <bb 264>:
  _950 = rcc_732->accum_p_norm;
  rcc_732->last_accum_p_norm = _950;
  rcc_732->accum_p_norm = 0.0;
  rcc_732->accum_p_qp = 0.0;
  goto <bb 267>;

  <bb 265>:
  if (pict_type_915 == 0)
    goto <bb 266>;
  else
    goto <bb 267>;

  <bb 266>:
  _951 = _729->i_count;
  _952 = (float) _951;
  _953 = rcc_732->nmb;
  _954 = (float) _953;
  _955 = _952 / _954;
  _956 = (double) _955;
  powmult_854 = _956 * _956;
  _958 = 1.0e+0 - powmult_854;
  mask_959 = (float) _958;
  # DEBUG mask => mask_959
  _960 = (double) mask_959;
  # DEBUG qscale => q_1354
  _961 = q_1354 * 1.1764705882352941568314008691231720149517059326171875e+0;
  _962 = log (_961);
  _963 = _962 * 8.656170245333779433849485940299928188323974609375e+0;
  # DEBUG qscale => NULL
  _965 = rcc_732->accum_p_qp;
  _989 = _965 + 1.2e+1;
  _966 = _963 + _989;
  _967 = _960 * _966;
  rcc_732->accum_p_qp = _967;
  _968 = rcc_732->accum_p_norm;
  _969 = _968 + 1.0e+0;
  _970 = _960 * _969;
  rcc_732->accum_p_norm = _970;

  <bb 267>:
  # q_1352 = PHI <q_1354(265), q_1354(266), q_1354(264), q_949(262)>
  # DEBUG rce => NULL
  # DEBUG q => NULL
  # DEBUG rcc => NULL
  # DEBUG pict_type => NULL
  # DEBUG ip_factor => NULL
  # DEBUG last_q => NULL
  # DEBUG mask => NULL
  *_725 = q_1352;
  if (q_1352 < 0.0)
    goto <bb 268>;
  else
    goto <bb 269>;

  <bb 268>:
  __assert_fail ("qscale[i] >= 0", "encoder/ratecontrol.c", 1836, &__PRETTY_FUNCTION__);

  <bb 269>:
  i_734 = i_1241 + -1;
  # DEBUG i => i_734
  # DEBUG i => i_734
  if (i_734 >= 0)
    goto <bb 270>;
  else
    goto <bb 241>;

  <bb 270>:
  goto <bb 243>;

  <bb 271>:
  # DEBUG i => 0
  if (_1282 > 0)
    goto <bb 272>;
  else
    goto <bb 294>;

  <bb 272>:
  pretmp_1806 = rcc_561->entry;

  <bb 273>:
  # i_1335 = PHI <0(272), i_772(283)>
  # DEBUG i => i_1335
  _738 = (long unsigned int) i_1335;
  _739 = _738 * 72;
  rce_740 = pretmp_1806 + _739;
  # DEBUG rce => rce_740
  # DEBUG q => 0.0
  # DEBUG sum => 0.0
  # DEBUG j => 0
  # DEBUG sum => 0.0
  # DEBUG q => 0.0
  # DEBUG j => 0

  <bb 274>:
  # j_1392 = PHI <j_767(280), 0(273)>
  # q_1412 = PHI <q_848(280), 0.0(273)>
  # sum_1429 = PHI <sum_849(280), 0.0(273)>
  # DEBUG sum => sum_1429
  # DEBUG q => q_1412
  # DEBUG j => j_1392
  _742 = i_1335 + j_1392;
  index_744 = _742 + pretmp_1803;
  # DEBUG index => index_744
  # DEBUG D#56 => index_744 - i_1335
  # DEBUG d => (double) D#56
  if (qblur_572 != 0.0)
    goto <bb 275>;
  else
    goto <bb 276>;

  <bb 275>:
  _745 = index_744 - i_1335;
  d_746 = (double) _745;
  _747 = -d_746;
  _748 = d_746 * _747;
  _750 = powmult_629 * _748;
  coeff_751 = exp (_750);

  <bb 276>:
  # coeff_761 = PHI <1.0e+0(274), coeff_751(275)>
  # DEBUG coeff => coeff_761
  _9 = index_744 >= _1282;
  _1447 = index_744 < 0;
  _653 = _9 | _1447;
  if (_653 != 0)
    goto <bb 279>;
  else
    goto <bb 277>;

  <bb 277>:
  _753 = rce_740->pict_type;
  _754 = (long unsigned int) index_744;
  _755 = _754 * 72;
  _756 = pretmp_1806 + _755;
  _757 = _756->pict_type;
  if (_753 != _757)
    goto <bb 279>;
  else
    goto <bb 278>;

  <bb 278>:
  _758 = _754 * 8;
  _759 = blurred_qscale_678 + _758;
  _760 = *_759;
  _762 = _760 * coeff_761;
  q_764 = _762 + q_1412;
  # DEBUG q => q_764
  sum_766 = coeff_761 + sum_1429;
  # DEBUG sum => sum_766

  <bb 279>:
  # q_848 = PHI <q_1412(276), q_1412(277), q_764(278)>
  # sum_849 = PHI <sum_1429(276), sum_1429(277), sum_766(278)>
  # DEBUG sum => sum_849
  # DEBUG q => q_848
  j_767 = j_1392 + 1;
  # DEBUG j => j_767
  # DEBUG sum => sum_849
  # DEBUG q => q_848
  # DEBUG j => j_767
  if (filter_size_577 > j_767)
    goto <bb 280>;
  else
    goto <bb 281>;

  <bb 280>:
  goto <bb 274>;

  <bb 281>:
  # q_1634 = PHI <q_848(279)>
  # sum_1633 = PHI <sum_849(279)>
  _768 = _738 * 8;
  _770 = blurred_qscale_769 + _768;
  _771 = q_1634 / sum_1633;
  *_770 = _771;
  i_772 = i_1335 + 1;
  # DEBUG i => i_772
  # DEBUG i => i_772
  if (i_772 < _1282)
    goto <bb 283>;
  else
    goto <bb 282>;

  <bb 282>:
  goto <bb 286>;

  <bb 283>:
  goto <bb 273>;

  <bb 284>:
  # DEBUG i => 0
  # DEBUG expected_bits => 0.0
  if (_1282 > 0)
    goto <bb 285>;
  else
    goto <bb 294>;

  <bb 285>:
  pretmp_1792 = rcc_561->entry;

  <bb 286>:
  # prephitmp_1793 = PHI <pretmp_1792(285), pretmp_1806(282)>
  # DEBUG i => 0
  # DEBUG expected_bits => 0.0
  pretmp_1797 = MEM[(int *)h_53(D) + 4344B];
  pretmp_1799 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];

  <bb 287>:
  # i_1338 = PHI <0(286), i_795(293)>
  # expected_bits_1336 = PHI <0.0(286), expected_bits_794(293)>
  # DEBUG i => i_1338
  # DEBUG expected_bits => expected_bits_1336
  _775 = (long unsigned int) i_1338;
  _776 = _775 * 72;
  rce_777 = prephitmp_1793 + _776;
  # DEBUG rce => rce_777
  _778 = _775 * 8;
  _779 = blurred_qscale_769 + _778;
  _780 = *_779;
  _781 = rce_777->pict_type;
  _782 = MEM[(float *)h_53(D) + 520B];
  # DEBUG D#23 => h_53(D)
  # DEBUG D#23 => h_53(D)
  # DEBUG D#23 => h_53(D)
  _785 = clip_qscale.isra.11 (_782, pretmp_1797, pretmp_1799, _781, _780);
  _786 = (float) _785;
  rce_777->new_qscale = _786;
  if (_786 < 0.0)
    goto <bb 288>;
  else
    goto <bb 289>;

  <bb 288>:
  __assert_fail ("rce->new_qscale >= 0", "encoder/ratecontrol.c", 1870, &__PRETTY_FUNCTION__);

  <bb 289>:
  qscale_787 = (double) _786;
  _788 = MEM[(float *)rce_777 + 8B];
  # DEBUG D#8 => rce_777
  _789 = MEM[(int *)rce_777 + 12B];
  # DEBUG D#8 => rce_777
  _790 = MEM[(int *)rce_777 + 16B];
  # DEBUG D#8 => rce_777
  _791 = MEM[(int *)rce_777 + 20B];
  # DEBUG D#8 => rce_777
  # DEBUG qscale => qscale_787
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  qscale_1187 = MAX_EXPR <qscale_787, 1.000000000000000055511151231257827021181583404541015625e-1>;
  # DEBUG qscale => qscale_1187
  _972 = (double) _790;
  _973 = _972 + 1.000000000000000055511151231257827021181583404541015625e-1;
  _975 = (double) _788;
  _977 = _975 / qscale_1187;
  _978 = pow (_977, 1.100000000000000088817841970012523233890533447265625e+0);
  _979 = _973 * _978;
  _981 = (double) _789;
  if (_788 > 1.0e+0)
    goto <bb 290>;
  else
    goto <bb 291>;

  <bb 290>:

  <bb 291>:
  # iftmp.23_983 = PHI <1.0e+0(289), _975(290)>
  _982 = MAX_EXPR <qscale_1187, 1.0e+0>;
  _984 = iftmp.23_983 / _982;
  _985 = __builtin_sqrt (_984);
  _986 = _981 * _985;
  _579 = _986 + expected_bits_1336;
  _988 = (double) _791;
  _21 = _979 + _988;
  # DEBUG qscale => NULL
  expected_bits_794 = _21 + _579;
  # DEBUG expected_bits => expected_bits_794
  i_795 = i_1338 + 1;
  # DEBUG i => i_795
  # DEBUG i => i_795
  # DEBUG expected_bits => expected_bits_794
  if (i_795 < _1282)
    goto <bb 293>;
  else
    goto <bb 292>;

  <bb 292>:
  # expected_bits_1638 = PHI <expected_bits_794(291)>
  goto <bb 294>;

  <bb 293>:
  goto <bb 287>;

  <bb 294>:
  # expected_bits_1337 = PHI <expected_bits_1638(292), 0.0(284), 0.0(271)>
  if (_703 < expected_bits_1337)
    goto <bb 295>;
  else
    goto <bb 296>;

  <bb 295>:
  rate_factor_797 = rate_factor_708 - step_1395;
  # DEBUG rate_factor => rate_factor_797

  <bb 296>:
  # rate_factor_852 = PHI <rate_factor_708(294), rate_factor_797(295)>
  # DEBUG rate_factor => rate_factor_852
  step_798 = step_1395 * 5.0e-1;
  # DEBUG step => step_798
  # DEBUG step => step_798
  # DEBUG rate_factor => rate_factor_852
  if (step_798 > _1445)
    goto <bb 297>;
  else
    goto <bb 233>;

  <bb 297>:
  goto <bb 235>;

  <bb 298>:
  x264_free (blurred_qscale_769);

  <bb 299>:
  _800 = rcc_561->b_vbv;
  if (_800 != 0)
    goto <bb 300>;
  else
    goto <bb 341>;

  <bb 300>:
  # DEBUG h => h_53(D)
  rcc_991 = h_53(D)->rc;
  # DEBUG rcc => rcc_991
  _992 = rcc_991->num_entries;
  _993 = _992 + 1;
  _994 = (unsigned int) _993;
  _995 = _994 * 8;
  _996 = (int) _995;
  fills_997 = x264_malloc (_996);
  # DEBUG fills => fills_997
  _998 = h_53(D)->param.rc.i_bitrate;
  _999 = (double) _998;
  _1000 = rcc_991->num_entries;
  _1001 = (double) _1000;
  _1002 = _999 * _1001;
  _1003 = _1002 * 1.0e+3;
  _1004 = rcc_991->fps;
  all_available_bits_1005 = _1003 / _1004;
  # DEBUG all_available_bits => all_available_bits_1005
  # DEBUG expected_bits => 0.0
  # DEBUG prev_bits => 0.0
  _1006 = h_53(D)->param.rc.i_qp_min;
  _1007 = (double) _1006;
  # DEBUG qp => _1007
  _1008 = _1007 - 1.2e+1;
  _1009 = _1008 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _1010 = pow (2.0e+0, _1009);
  _1011 = _1010 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  # DEBUG qscale_min => NULL
  _1012 = h_53(D)->param.rc.i_qp_max;
  _1013 = (double) _1012;
  # DEBUG qp => _1013
  _1014 = _1013 - 1.2e+1;
  _1015 = _1014 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _1016 = pow (2.0e+0, _1015);
  _1017 = _1016 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  # DEBUG qscale_max => NULL
  # DEBUG iterations => 0
  fills_1018 = fills_997 + 8;
  # DEBUG fills => fills_1018
  # DEBUG iterations => NULL
  # DEBUG expected_bits => 0.0
  # DEBUG iterations => NULL
  # DEBUG prev_bits => 0.0
  pretmp_1768 = all_available_bits_1005 * 9.9499999999999999555910790149937383830547332763671875e-1;
  pretmp_1870 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];
  reciptmp_1611 = 1.0e+0 / all_available_bits_1005;
  goto <bb 316>;

  <bb 301>:
  # DEBUG iterations => NULL
  # DEBUG expected_bits => prev_bits_1085
  # DEBUG iterations => NULL
  # DEBUG prev_bits => prev_bits_1085
  if (prev_bits_1085 != 0.0)
    goto <bb 303>;
  else
    goto <bb 302>;

  <bb 302>:
  pretmp_1781 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];
  goto <bb 315>;

  <bb 303>:
  _1020 = reciptmp_1611 * prev_bits_1085;
  _1021 = MIN_EXPR <_1020, 9.9899999999999999911182158029987476766109466552734375e-1>;
  adjustment_1022 = MAX_EXPR <_1021, 9.0000000000000002220446049250313080847263336181640625e-1>;
  # DEBUG adjustment => adjustment_1022
  _1023 = rcc_991->buffer_size;
  _1024 = h_53(D)->param.rc.f_vbv_buffer_init;
  _1025 = (double) _1024;
  _1026 = _1023 * _1025;
  *fills_997 = _1026;
  t0 = 0;
  # DEBUG adj_min => 1
  # DEBUG adj_min => 1
  pretmp_1784 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];
  goto <bb 313>;

  <bb 304>:
  t1.24_1027 = t1;
  t0_1028 = t0;
  rcc_1029 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];
  # DEBUG D#5 => h_53(D)
  # DEBUG t0 => t0_1028
  # DEBUG t1 => t1.24_1027
  # DEBUG adjustment => adjustment_1022
  # DEBUG qscale_min => _1011
  # DEBUG qscale_max => _1017
  # DEBUG h => D#5
  # DEBUG rcc => rcc_1029
  # DEBUG adjusted => 0
  if (t0_1028 > 0)
    goto <bb 305>;
  else
    goto <bb 306>;

  <bb 305>:
  t0_1030 = t0_1028 + 1;
  # DEBUG t0 => t0_1030

  <bb 306>:
  # t0_61 = PHI <t0_1030(305), t0_1028(304)>
  # DEBUG adjusted => 0
  # DEBUG i => t0_61
  if (t0_61 <= t1.24_1027)
    goto <bb 307>;
  else
    goto <bb 390>;

  <bb 307>:
  pretmp_1786 = rcc_1029->entry;

  <bb 308>:
  # t0_1329 = PHI <t0_61(307), t0_1049(309)>
  # adj_min_1240 = PHI <0(307), adj_min_1048(309)>
  # DEBUG adjusted => NULL
  # DEBUG i => NULL
  _1033 = (long unsigned int) t0_1329;
  _1034 = _1033 * 72;
  _1035 = pretmp_1786 + _1034;
  _1036 = _1035->new_qscale;
  qscale_orig_1037 = (double) _1036;
  # DEBUG qscale_orig => NULL
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  iftmp.16_1038 = MIN_EXPR <_1017, qscale_orig_1037>;
  iftmp.16_1039 = _1011 <= qscale_orig_1037 ? iftmp.16_1038 : _1011;
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  # DEBUG qscale_orig => NULL
  qscale_new_1040 = adjustment_1022 * iftmp.16_1039;
  # DEBUG qscale_new => NULL
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  iftmp.16_1041 = MIN_EXPR <_1017, qscale_new_1040>;
  iftmp.16_1042 = _1011 <= qscale_new_1040 ? iftmp.16_1041 : _1011;
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  # DEBUG qscale_new => NULL
  _1043 = (float) iftmp.16_1042;
  _1035->new_qscale = _1043;
  _1045 = (_Bool) adj_min_1240;
  _1046 = iftmp.16_1039 != iftmp.16_1042;
  _1047 = _1045 | _1046;
  adj_min_1048 = (int) _1047;
  # DEBUG adjusted => adj_min_1048
  t0_1049 = t0_1329 + 1;
  # DEBUG i => t0_1049
  # DEBUG adjusted => adj_min_1048
  # DEBUG i => t0_1049
  if (t1.24_1027 >= t0_1049)
    goto <bb 309>;
  else
    goto <bb 310>;

  <bb 309>:
  goto <bb 308>;

  <bb 310>:
  # _1629 = PHI <_1047(308)>
  # DEBUG t0 => NULL
  # DEBUG t1 => NULL
  # DEBUG adjustment => NULL
  # DEBUG qscale_min => NULL
  # DEBUG qscale_max => NULL
  # DEBUG rcc => NULL
  # DEBUG qscale_orig => NULL
  # DEBUG qscale_new => NULL
  # DEBUG adjusted => NULL
  # DEBUG adj_min => NULL
  t0 = t1.24_1027;
  # DEBUG adj_min => adj_min_1048
  if (_1629 != 0)
    goto <bb 312>;
  else
    goto <bb 311>;

  <bb 311>:
  # rcc_1630 = PHI <rcc_1029(310)>
  goto <bb 315>;

  <bb 312>:

  <bb 313>:
  # prephitmp_1785 = PHI <rcc_1029(312), pretmp_1784(303)>
  # DEBUG adj_min => 1
  # DEBUG D#9 => h_53(D)
  _1052 = find_underflow.isra.8 (prephitmp_1785, fills_1018, &t0, &t1, 1);
  if (_1052 != 0)
    goto <bb 304>;
  else
    goto <bb 314>;

  <bb 314>:
  pretmp_1782 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];

  <bb 315>:
  # prephitmp_1783 = PHI <pretmp_1781(302), rcc_1630(311), pretmp_1782(314), rcc_1631(390)>

  <bb 316>:
  # prev_bits_1353 = PHI <prev_bits_1085(315), 0.0(300)>
  # prephitmp_1871 = PHI <prephitmp_1783(315), pretmp_1870(300)>
  _1053 = rcc_991->buffer_size;
  _1054 = h_53(D)->param.rc.f_vbv_buffer_init;
  _1055 = (double) _1054;
  _1056 = 1.0e+0 - _1055;
  _1057 = _1053 * _1056;
  *fills_997 = _1057;
  t0 = 0;
  # DEBUG adj_max => 1
  # DEBUG adj_max => 1
  goto <bb 327>;

  <bb 317>:
  t1.24_1058 = t1;
  t0_1059 = t0;
  rcc_1060 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];
  # DEBUG D#5 => h_53(D)
  # DEBUG t0 => t0_1059
  # DEBUG t1 => t1.24_1058
  # DEBUG adjustment => 1.000999999999999889865875957184471189975738525390625e+0
  # DEBUG qscale_min => _1011
  # DEBUG qscale_max => _1017
  # DEBUG h => D#5
  # DEBUG rcc => rcc_1060
  # DEBUG adjusted => 0
  if (t0_1059 > 0)
    goto <bb 318>;
  else
    goto <bb 319>;

  <bb 318>:
  t0_1061 = t0_1059 + 1;
  # DEBUG t0 => t0_1061

  <bb 319>:
  # t0_1103 = PHI <t0_1061(318), t0_1059(317)>
  # DEBUG adjusted => 0
  # DEBUG i => t0_1103
  if (t1.24_1058 >= t0_1103)
    goto <bb 321>;
  else
    goto <bb 320>;

  <bb 320>:
  # rcc_1628 = PHI <rcc_1060(319)>
  goto <bb 329>;

  <bb 321>:
  pretmp_1789 = rcc_1060->entry;

  <bb 322>:
  # t0_1327 = PHI <t0_1103(321), t0_1080(323)>
  # adj_max_1104 = PHI <0(321), adj_max_1079(323)>
  # DEBUG adjusted => NULL
  # DEBUG i => NULL
  _1064 = (long unsigned int) t0_1327;
  _1065 = _1064 * 72;
  _1066 = pretmp_1789 + _1065;
  _1067 = _1066->new_qscale;
  qscale_orig_1068 = (double) _1067;
  # DEBUG qscale_orig => NULL
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  iftmp.16_1069 = MIN_EXPR <_1017, qscale_orig_1068>;
  iftmp.16_1070 = _1011 <= qscale_orig_1068 ? iftmp.16_1069 : _1011;
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  # DEBUG qscale_orig => NULL
  qscale_new_1071 = iftmp.16_1070 * 1.000999999999999889865875957184471189975738525390625e+0;
  # DEBUG qscale_new => NULL
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  iftmp.16_1072 = MIN_EXPR <_1017, qscale_new_1071>;
  iftmp.16_1073 = _1011 <= qscale_new_1071 ? iftmp.16_1072 : _1011;
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  # DEBUG qscale_new => NULL
  _1074 = (float) iftmp.16_1073;
  _1066->new_qscale = _1074;
  _1076 = (_Bool) adj_max_1104;
  _1077 = iftmp.16_1070 != iftmp.16_1073;
  _1078 = _1076 | _1077;
  adj_max_1079 = (int) _1078;
  # DEBUG adjusted => adj_max_1079
  t0_1080 = t0_1327 + 1;
  # DEBUG i => t0_1080
  # DEBUG adjusted => adj_max_1079
  # DEBUG i => t0_1080
  if (t1.24_1058 >= t0_1080)
    goto <bb 323>;
  else
    goto <bb 324>;

  <bb 323>:
  goto <bb 322>;

  <bb 324>:
  # _1626 = PHI <_1078(322)>
  # DEBUG adj_max => adj_max_1079
  if (_1626 != 0)
    goto <bb 326>;
  else
    goto <bb 325>;

  <bb 325>:
  # rcc_1627 = PHI <rcc_1060(324)>
  goto <bb 329>;

  <bb 326>:

  <bb 327>:
  # prephitmp_1770 = PHI <rcc_1060(326), prephitmp_1871(316)>
  # DEBUG adj_max => 1
  # DEBUG D#9 => h_53(D)
  _1083 = find_underflow.isra.8 (prephitmp_1770, fills_1018, &t0, &t1, 0);
  if (_1083 != 0)
    goto <bb 317>;
  else
    goto <bb 328>;

  <bb 328>:
  pretmp_1771 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];

  <bb 329>:
  # adj_max_847 = PHI <0(325), 1(328), 0(320)>
  # prephitmp_1772 = PHI <rcc_1627(325), pretmp_1771(328), rcc_1628(320)>
  # DEBUG D#10 => h_53(D)
  prev_bits_1085 = count_expected_bits.isra.9 (prephitmp_1772);
  # DEBUG expected_bits => prev_bits_1085
  if (prev_bits_1085 < pretmp_1768)
    goto <bb 331>;
  else
    goto <bb 330>;

  <bb 330>:
  # adj_max_1636 = PHI <adj_max_847(329)>
  goto <bb 333>;

  <bb 331>:
  _1087 = prev_bits_1085 + 5.0e-1;
  _1088 = (int) _1087;
  _1089 = prev_bits_1353 + 5.0e-1;
  _1090 = (int) _1089;
  if (_1088 > _1090)
    goto <bb 301>;
  else
    goto <bb 332>;

  <bb 332>:
  # adj_max_1635 = PHI <adj_max_847(331)>

  <bb 333>:
  # adj_max_1616 = PHI <adj_max_1635(332), adj_max_1636(330)>
  if (adj_max_1616 == 0)
    goto <bb 334>;
  else
    goto <bb 335>;

  <bb 334>:
  x264_log (h_53(D), 1, "vbv-maxrate issue, qpmax or vbv-maxrate too low\n");

  <bb 335>:
  # DEBUG i => 0
  _741 = rcc_991->num_entries;
  if (_741 > 0)
    goto <bb 337>;
  else
    goto <bb 336>;

  <bb 336>:
  x264_free (fills_997);
  t0 ={v} {CLOBBER};
  t1 ={v} {CLOBBER};
  goto <bb 341>;

  <bb 337>:
  pretmp_1773 = rcc_991->entry;
  pretmp_1777 = rcc_991->buffer_size;

  <bb 338>:
  # i_1325 = PHI <0(337), i_1101(340)>
  # DEBUG i => i_1325
  _1093 = (long unsigned int) i_1325;
  _1094 = _1093 * 72;
  _1095 = pretmp_1773 + _1094;
  _1097 = _1093 * 8;
  _1098 = fills_1018 + _1097;
  _1099 = *_1098;
  _1100 = pretmp_1777 - _1099;
  _1095->expected_vbv = _1100;
  i_1101 = i_1325 + 1;
  # DEBUG i => i_1101
  # DEBUG i => i_1101
  if (_741 > i_1101)
    goto <bb 340>;
  else
    goto <bb 339>;

  <bb 339>:
  goto <bb 336>;

  <bb 340>:
  goto <bb 338>;

  <bb 341>:
  _801 = MEM[(struct x264_ratecontrol_t * *)h_53(D) + 20896B];
  # DEBUG D#10 => h_53(D)
  expected_bits_802 = count_expected_bits.isra.9 (_801);
  # DEBUG expected_bits => expected_bits_802
  _803 = expected_bits_802 / _703;
  _804 = _803 - 1.0e+0;
  _805 = ABS_EXPR <_804>;
  if (_805 > 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 342>;
  else
    goto <bb 379>;

  <bb 342>:
  # DEBUG avgq => 0.0
  # DEBUG i => 0
  _378 = rcc_561->num_entries;
  if (_378 > 0)
    goto <bb 343>;
  else
    goto <bb 347>;

  <bb 343>:
  pretmp_1763 = rcc_561->entry;

  <bb 344>:
  # i_1334 = PHI <0(343), i_815(346)>
  # avgq_1331 = PHI <0.0(343), avgq_814(346)>
  # DEBUG avgq => avgq_1331
  # DEBUG i => i_1334
  _808 = (long unsigned int) i_1334;
  _809 = _808 * 72;
  _810 = pretmp_1763 + _809;
  _811 = _810->new_qscale;
  _812 = (double) _811;
  avgq_814 = _812 + avgq_1331;
  # DEBUG avgq => avgq_814
  i_815 = i_1334 + 1;
  # DEBUG i => i_815
  # DEBUG avgq => avgq_814
  # DEBUG i => i_815
  if (_378 > i_815)
    goto <bb 346>;
  else
    goto <bb 345>;

  <bb 345>:
  # avgq_1637 = PHI <avgq_814(344)>
  goto <bb 347>;

  <bb 346>:
  goto <bb 344>;

  <bb 347>:
  # avgq_1330 = PHI <avgq_1637(345), 0.0(342)>
  _817 = (double) _378;
  _818 = avgq_1330 / _817;
  # DEBUG qscale => _818
  _819 = _818 * 1.1764705882352941568314008691231720149517059326171875e+0;
  _820 = log (_819);
  _821 = _820 * 8.656170245333779433849485940299928188323974609375e+0;
  _822 = _821 + 1.2e+1;
  # DEBUG qscale => NULL
  # DEBUG avgq => NULL
  if (_703 < expected_bits_802)
    goto <bb 349>;
  else
    goto <bb 348>;

  <bb 348>:
  _823 = rcc_561->b_vbv;
  if (_823 == 0)
    goto <bb 349>;
  else
    goto <bb 391>;

  <bb 349>:
  x264_log (h_53(D), 1, "Error: 2pass curve failed to converge\n");
  _824 = rcc_561->fps;
  _825 = expected_bits_802 * _824;
  _826 = rcc_561->num_entries;
  _827 = (double) _826;
  _828 = _827 * 1.0e+3;
  _829 = _825 / _828;
  _830 = h_53(D)->param.rc.i_bitrate;
  _831 = (float) _830;
  _832 = (double) _831;
  x264_log (h_53(D), 1, "target: %.2f kbit/s, expected: %.2f kbit/s, avg QP: %.4f\n", _832, _829, _822);
  if (_703 > expected_bits_802)
    goto <bb 350>;
  else
    goto <bb 354>;

  <bb 350>:
  _833 = h_53(D)->param.rc.i_qp_min;
  _834 = _833 + 2;
  _835 = (double) _834;
  if (_822 < _835)
    goto <bb 351>;
  else
    goto <bb 354>;

  <bb 351>:
  if (_833 > 0)
    goto <bb 352>;
  else
    goto <bb 353>;

  <bb 352>:
  x264_log (h_53(D), 1, "try reducing target bitrate or reducing qp_min (currently %d)\n", _833);
  goto <bb 380>;

  <bb 353>:
  x264_log (h_53(D), 1, "try reducing target bitrate\n");
  goto <bb 380>;

  <bb 354>:
  if (_703 < expected_bits_802)
    goto <bb 355>;
  else
    goto <bb 359>;

  <bb 355>:
  _836 = h_53(D)->param.rc.i_qp_max;
  _837 = _836 + -2;
  _838 = (double) _837;
  if (_822 > _838)
    goto <bb 356>;
  else
    goto <bb 359>;

  <bb 356>:
  if (_836 <= 50)
    goto <bb 357>;
  else
    goto <bb 358>;

  <bb 357>:
  x264_log (h_53(D), 1, "try increasing target bitrate or increasing qp_max (currently %d)\n", _836);
  goto <bb 380>;

  <bb 358>:
  x264_log (h_53(D), 1, "try increasing target bitrate\n");
  goto <bb 380>;

  <bb 359>:
  _839 = rcc_561->b_2pass;
  if (_839 == 0)
    goto <bb 361>;
  else
    goto <bb 360>;

  <bb 360>:
  _840 = rcc_561->b_vbv;
  if (_840 == 0)
    goto <bb 361>;
  else
    goto <bb 379>;

  <bb 361>:
  x264_log (h_53(D), 1, "internal error\n");
  goto <bb 380>;

  <bb 362>:
  _382 = h_53(D)->param.rc.psz_stat_out;
  _383 = strlen (_382);
  _384 = (unsigned int) _383;
  _385 = _384 + 6;
  _386 = (int) _385;
  _388 = x264_malloc (_386);
  MEM[(struct x264_ratecontrol_t *)_59].psz_stat_file_tmpname = _388;
  _390 = h_53(D)->param.rc.psz_stat_out;
  # DEBUG __dest => _388
  # DEBUG __src => _390
  __builtin_strcpy (_388, _390);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  _391 = MEM[(struct x264_ratecontrol_t *)_59].psz_stat_file_tmpname;
  # DEBUG __dest => _391
  # DEBUG __src => ".temp"
  _844 = __builtin_strlen (_391);
  _874 = _391 + _844;
  __builtin_memcpy (_874, ".temp", 6);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  _393 = MEM[(struct x264_ratecontrol_t *)_59].psz_stat_file_tmpname;
  _395 = fopen (_393, "wb");
  MEM[(struct x264_ratecontrol_t *)_59].p_stat_file_out = _395;
  if (_395 == 0B)
    goto <bb 126>;
  else
    goto <bb 363>;

  <bb 363>:
  _398 = &h_53(D)->param;
  p_400 = x264_param2string (_398, 1);
  # DEBUG p => p_400
  _401 = MEM[(struct x264_ratecontrol_t *)_59].p_stat_file_out;
  # DEBUG __stream => _401
  # DEBUG __fmt => "#options: %s\n"
  __fprintf_chk (_401, 1, "#options: %s\n", p_400);
  # DEBUG __stream => NULL
  # DEBUG __fmt => NULL
  x264_free (p_400);

  <bb 364>:
  # DEBUG i => 0
  _846 = h_53(D)->param.i_threads;
  if (_846 > 0)
    goto <bb 392>;
  else
    goto <bb 365>;

  <bb 365>:
  goto <bb 370>;

  <bb 366>:
  # DEBUG i => i_417
  _405 = h_53(D)->thread[i_417];
  _406 = (long unsigned int) i_417;
  _407 = _406 * 608;
  _408 = _59 + _407;
  _405->rc = _408;
  if (i_417 != 0)
    goto <bb 367>;
  else
    goto <bb 368>;

  <bb 367>:
  *_408 = MEM[(struct x264_ratecontrol_t *)_59];
  _411 = &h_53(D)->param;
  _412 = &_405->param;
  # DEBUG __dest => _412
  # DEBUG __src => _411
  # DEBUG __len => 616
  __builtin_memcpy (_412, _411, 616);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  _414 = h_53(D)->thread[i_417];
  _415 = h_53(D)->mb.b_variable_qp;
  _414->mb.b_variable_qp = _415;
  pretmp_1731 = h_53(D)->param.i_threads;

  <bb 368>:
  # prephitmp_1732 = PHI <prephitmp_1729(366), pretmp_1731(367)>

  <bb 369>:
  # i_1346 = PHI <i_417(368), 0(392)>
  # prephitmp_1729 = PHI <prephitmp_1732(368), _846(392)>
  i_417 = i_1346 + 1;
  # DEBUG i => i_417
  # DEBUG i => i_417
  if (i_417 < prephitmp_1729)
    goto <bb 366>;
  else
    goto <bb 365>;

  <bb 370>:
  # _13 = PHI <-1(13), -1(122), -1(126), -1(155), -1(160), -1(164), -1(189), -1(197), 0(365)>
  return _13;

  <bb 371>:
  # saveptr_1660 = PHI <saveptr_472(79)>

  <bb 372>:
  # saveptr_1107 = PHI <saveptr_1660(371), saveptr_1659(77)>
  # DEBUG __result => saveptr_1409
  # DEBUG __s => saveptr_1107
  # DEBUG saveptr => saveptr_1107
  # DEBUG __s => NULL
  # DEBUG __sep => NULL
  # DEBUG __nextp => NULL
  # DEBUG tok => saveptr_1409
  # DEBUG __result => saveptr_1409
  # DEBUG saveptr => saveptr_1107
  # DEBUG __s => NULL
  # DEBUG __sep => NULL
  # DEBUG __nextp => NULL
  # DEBUG tok => saveptr_1409
  _476 = h_53(D)->param.rc.zones;
  _478 = (long unsigned int) i_1347;
  _479 = _478 * 32;
  _480 = _476 + _479;
  # DEBUG h => h_53(D)
  # DEBUG z => _480
  # DEBUG p => saveptr_1409
  len = 0;
  _480->param = 0B;
  _480->f_bitrate_factor = 1.0e+0;
  _251 = &_480->i_qp;
  _529 = &_480->i_end;
  _530 = &_480->i_start;
  _531 = sscanf (saveptr_1409, "%u,%u,q=%u%n", _530, _529, _251, &len);
  if (_531 > 2)
    goto <bb 80>;
  else
    goto <bb 81>;

  <bb 373>:
  # saveptr_1651 = PHI <saveptr_553(104)>

  <bb 374>:
  # saveptr_1246 = PHI <saveptr_1651(373), saveptr_1650(102)>
  # DEBUG __result => saveptr_1405
  # DEBUG __s => saveptr_1246
  # DEBUG saveptr => saveptr_1246
  # DEBUG __s => NULL
  # DEBUG __sep => NULL
  # DEBUG __nextp => NULL
  # DEBUG tok => saveptr_1405
  # DEBUG __result => saveptr_1405
  # DEBUG saveptr => saveptr_1246
  # DEBUG __s => NULL
  # DEBUG __sep => NULL
  # DEBUG __nextp => NULL
  # DEBUG tok => saveptr_1405
  val_543 = __builtin_strchr (saveptr_1405, 61);
  # DEBUG val => val_543
  if (val_543 != 0B)
    goto <bb 88>;
  else
    goto <bb 89>;

  <bb 375>:
  len ={v} {CLOBBER};
  # DEBUG D#12 => {CLOBBER}
  # DEBUG saveptr => D#12
  # DEBUG h => NULL
  # DEBUG z => NULL
  # DEBUG p => NULL
  # DEBUG val => NULL
  # DEBUG saveptr => NULL
  # DEBUG len => NULL
  goto <bb 122>;

  <bb 376>:
  len ={v} {CLOBBER};
  # DEBUG D#12 => {CLOBBER}
  # DEBUG saveptr => D#12
  # DEBUG h => NULL
  # DEBUG z => NULL
  # DEBUG p => NULL
  # DEBUG val => NULL
  # DEBUG saveptr => NULL
  # DEBUG len => NULL
  goto <bb 106>;

  <bb 377>:

  <bb 378>:
  # DEBUG h => NULL
  # DEBUG z$f_bitrate_factor => NULL
  # DEBUG z$b_force_qp => NULL
  # DEBUG z$i_end => NULL
  # DEBUG z$i_start => NULL
  # DEBUG saveptr => NULL
  # DEBUG p => NULL
  # DEBUG i => NULL
  # DEBUG rc => NULL
  # DEBUG h => NULL
  # DEBUG z$f_bitrate_factor => NULL
  # DEBUG z$b_force_qp => NULL
  # DEBUG z$i_end => NULL
  # DEBUG z$i_start => NULL
  # DEBUG saveptr => NULL
  # DEBUG p => NULL
  # DEBUG i => NULL
  # DEBUG rc => NULL
  _254 = h_53(D)->param.rc.b_stat_read;
  if (_254 != 0)
    goto <bb 123>;
  else
    goto <bb 380>;

  <bb 379>:

  <bb 380>:
  # DEBUG h => NULL
  # DEBUG avgq => NULL
  # DEBUG rce => NULL
  # DEBUG coeff => NULL
  # DEBUG d => NULL
  # DEBUG index => NULL
  # DEBUG sum => NULL
  # DEBUG q => NULL
  # DEBUG j => NULL
  # DEBUG rce => NULL
  # DEBUG rcj => NULL
  # DEBUG rcj => NULL
  # DEBUG j => NULL
  # DEBUG gaussian_weight => NULL
  # DEBUG weight => NULL
  # DEBUG cplx_sum => NULL
  # DEBUG weight_sum => NULL
  # DEBUG rce => NULL
  # DEBUG rce => NULL
  # DEBUG i => NULL
  # DEBUG blurred_qscale => NULL
  # DEBUG expected_bits => NULL
  # DEBUG filter_size => NULL
  # DEBUG cplxblur => NULL
  # DEBUG qblur => NULL
  # DEBUG step_mult => NULL
  # DEBUG step => NULL
  # DEBUG rate_factor => NULL
  # DEBUG all_available_bits => NULL
  # DEBUG all_const_bits => NULL
  # DEBUG rcc => NULL
  _381 = h_53(D)->param.rc.b_stat_write;
  if (_381 != 0)
    goto <bb 362>;
  else
    goto <bb 364>;

  <bb 381>:
  MEM[(struct x264_ratecontrol_t *)_59].b_abr = 1;
  if (_66 == 2)
    goto <bb 7>;
  else
    goto <bb 5>;

  <bb 382>:
  _645 = h_53(D)->param.rc.i_vbv_buffer_size;
  if (_645 != 0)
    goto <bb 17>;
  else
    goto <bb 19>;

  <bb 383>:
  # all_const_bits_1649 = PHI <all_const_bits_586(193)>
  if (all_available_bits_570 < all_const_bits_1649)
    goto <bb 197>;
  else
    goto <bb 199>;

  <bb 384>:
  # q_1116 = PHI <q_935(249), q_930(248), q_929(246), q_726(244)>
  # DEBUG q => q_1116
  if (pict_type_915 == _917)
    goto <bb 258>;
  else
    goto <bb 262>;

  <bb 385>:
  # q_515 = PHI <q_726(256), q_726(255), q_916(257), q_941(254), q_940(253)>
  # DEBUG q => q_515
  if (pict_type_915 == _917)
    goto <bb 259>;
  else
    goto <bb 262>;

  <bb 386>:
  # DEBUG q => q_467
  rcc_732->last_qscale_for[pict_type_915] = q_467;
  goto <bb 263>;

  <bb 387>:
  last_q_1113 = rcc_732->last_qscale_for[pict_type_915];
  # DEBUG last_q => last_q_1113
  _525 = rcc_732->lstep;
  q_467 = _525 * last_q_1113;
  # DEBUG max_qscale => q_467
  # DEBUG min_qscale => last_q_1113 / _525
  if (q_467 < q_1116)
    goto <bb 386>;
  else
    goto <bb 388>;

  <bb 388>:
  q_477 = last_q_1113 / _525;
  goto <bb 261>;

  <bb 389>:
  # DEBUG q => q_1116
  rcc_732->last_qscale_for[pict_type_915] = q_1116;
  goto <bb 263>;

  <bb 390>:
  # t1.24_1632 = PHI <t1.24_1027(306)>
  # rcc_1631 = PHI <rcc_1029(306)>
  # DEBUG t0 => NULL
  # DEBUG t1 => NULL
  # DEBUG adjustment => NULL
  # DEBUG qscale_min => NULL
  # DEBUG qscale_max => NULL
  # DEBUG rcc => NULL
  # DEBUG qscale_orig => NULL
  # DEBUG qscale_new => NULL
  # DEBUG adjusted => NULL
  # DEBUG adj_min => NULL
  t0 = t1.24_1632;
  # DEBUG adj_min => 0
  goto <bb 315>;

  <bb 391>:
  _526 = rcc_561->fps;
  _1311 = _526 * expected_bits_802;
  _1309 = _817 * 1.0e+3;
  _1308 = _1311 / _1309;
  _1307 = h_53(D)->param.rc.i_bitrate;
  _1247 = (float) _1307;
  _1245 = (double) _1247;
  x264_log (h_53(D), 1, "target: %.2f kbit/s, expected: %.2f kbit/s, avg QP: %.4f\n", _1245, _1308, _822);
  if (_703 > expected_bits_802)
    goto <bb 350>;
  else
    goto <bb 359>;

  <bb 392>:
  # DEBUG i => 0
  _1265 = h_53(D)->thread[0];
  _1265->rc = _59;
  goto <bb 369>;

}



;; Function x264_ratecontrol_delete (x264_ratecontrol_delete, funcdef_no=123, decl_uid=6353, cgraph_uid=123, symbol_order=166)


Analyzing loop at encoder/ratecontrol.c:709
encoder/ratecontrol.c:709:13: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:709:13: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:709:13: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:709:13: note: bad loop form.
encoder/ratecontrol.c:686:6: note: vectorized 0 loops in function.
x264_ratecontrol_delete (struct x264_t * h)
{
  int i;
  struct x264_ratecontrol_t * rc;
  struct FILE * _11;
  int _14;
  int _15;
  char * _16;
  char * _17;
  int _19;
  char * _20;
  char * _21;
  char * _23;
  struct predictor_t * _25;
  struct predictor_t * _27;
  struct ratecontrol_entry_t * _29;
  struct x264_zone_t * _31;
  struct x264_param_t * _32;
  char * _34;
  int _35;
  long unsigned int _37;
  long unsigned int _38;
  struct x264_zone_t * _39;
  struct x264_param_t * _40;
  struct x264_param_t * _41;
  struct x264_zone_t * pretmp_49;
  struct x264_zone_t * prephitmp_51;
  int _56;
  struct x264_zone_t * prephitmp_57;
  struct x264_zone_t * pretmp_58;
  struct x264_zone_t * pretmp_59;
  struct x264_zone_t * prephitmp_60;
  struct x264_zone_t * pretmp_61;
  struct x264_zone_t * prephitmp_62;

  <bb 2>:
  rc_10 = h_9(D)->rc;
  # DEBUG rc => rc_10
  _11 = rc_10->p_stat_file_out;
  if (_11 != 0B)
    goto <bb 3>;
  else
    goto <bb 8>;

  <bb 3>:
  fclose (_11);
  _14 = h_9(D)->i_frame;
  _15 = rc_10->num_entries;
  if (_14 >= _15)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:
  goto <bb 7>;

  <bb 5>:
  _16 = h_9(D)->param.rc.psz_stat_out;
  _17 = rc_10->psz_stat_file_tmpname;
  _19 = rename (_17, _16);
  if (_19 != 0)
    goto <bb 6>;
  else
    goto <bb 4>;

  <bb 6>:
  _20 = h_9(D)->param.rc.psz_stat_out;
  _21 = rc_10->psz_stat_file_tmpname;
  x264_log (h_9(D), 0, "failed to rename \"%s\" to \"%s\"\n", _21, _20);

  <bb 7>:
  _23 = rc_10->psz_stat_file_tmpname;
  x264_free (_23);

  <bb 8>:
  _25 = rc_10->pred;
  x264_free (_25);
  _27 = rc_10->pred_b_from_p;
  x264_free (_27);
  _29 = rc_10->entry;
  x264_free (_29);
  _31 = rc_10->zones;
  if (_31 != 0B)
    goto <bb 9>;
  else
    goto <bb 20>;

  <bb 9>:
  _32 = _31->param;
  x264_free (_32);
  _34 = h_9(D)->param.rc.psz_zones;
  if (_34 != 0B)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  pretmp_58 = rc_10->zones;
  goto <bb 19>;

  <bb 11>:
  # DEBUG i => 1
  _56 = rc_10->i_zones;
  if (_56 > 1)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:
  pretmp_59 = rc_10->zones;
  goto <bb 19>;

  <bb 13>:
  pretmp_61 = rc_10->zones;

  <bb 14>:
  # i_48 = PHI <1(13), i_43(17)>
  # prephitmp_62 = PHI <pretmp_61(13), prephitmp_57(17)>
  # DEBUG i => i_48
  _37 = (long unsigned int) i_48;
  _38 = _37 * 32;
  _39 = prephitmp_62 + _38;
  _40 = _39->param;
  _41 = prephitmp_62->param;
  if (_40 != _41)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  x264_free (_40);
  pretmp_49 = rc_10->zones;

  <bb 16>:
  # prephitmp_57 = PHI <prephitmp_62(14), pretmp_49(15)>
  i_43 = i_48 + 1;
  # DEBUG i => i_43
  # DEBUG i => i_43
  _35 = rc_10->i_zones;
  if (_35 > i_43)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  goto <bb 14>;

  <bb 18>:
  # prephitmp_51 = PHI <prephitmp_57(16)>

  <bb 19>:
  # prephitmp_60 = PHI <pretmp_58(10), prephitmp_51(18), pretmp_59(12)>
  x264_free (prephitmp_60);

  <bb 20>:
  x264_free (rc_10);
  return;

}



;; Function rate_estimate_qscale (rate_estimate_qscale, funcdef_no=142, decl_uid=6468, cgraph_uid=142, symbol_order=185)


Analyzing loop at encoder/ratecontrol.c:1466
encoder/ratecontrol.c:1466:22: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1466:22: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1466:22: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1466:22: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1423
encoder/ratecontrol.c:1423:21: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1423:21: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1423:21: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1423:21: note: bad loop form.
encoder/ratecontrol.c:1349:14: note: vectorized 0 loops in function.
rate_estimate_qscale (struct x264_t * h)
{
  double D.10538;
  double qscale;
  double D.10528;
  double qscale;
  double D.10518;
  double qscale;
  int i_frame_done;
  double lmax;
  double lmin;
  double overflow;
  double wanted_bits;
  double size_constraint;
  double qmax;
  double expected_fullness;
  double expected_vbv;
  double expected_size;
  double time;
  double bits;
  struct x264_t * t;
  int i;
  int j;
  int64_t predicted_bits;
  int64_t diff;
  double abr_buffer;
  int dt1;
  int dt0;
  double lmin;
  int pict_type;
  struct ratecontrol_entry_t rce;
  struct x264_ratecontrol_t * rcc;
  float q;
  double _14;
  float _20;
  double iftmp.30_22;
  long int _42;
  long int _43;
  long int _44;
  long int _45;
  long int _46;
  int _48;
  struct ratecontrol_entry_t * _49;
  int _51;
  char _52;
  int _53;
  char _54;
  int _55;
  struct x264_frame_t * _57;
  int _58;
  unsigned int _59;
  unsigned int _60;
  _Bool _61;
  struct x264_frame_t * _62;
  int _63;
  unsigned int _64;
  unsigned int _65;
  _Bool _66;
  struct x264_frame_t * _67;
  int _68;
  int _69;
  int _70;
  int _72;
  int _73;
  double _77;
  double _78;
  double _79;
  double _80;
  double _82;
  double _84;
  double _85;
  _Bool _87;
  float _88;
  float _89;
  double _90;
  double _91;
  double _92;
  float _94;
  float _95;
  float _96;
  float _97;
  float _98;
  int _99;
  float _100;
  int _102;
  double _103;
  double _105;
  double _106;
  double _108;
  double _110;
  int _112;
  int _113;
  struct x264_frame_t * _114;
  int _115;
  double _116;
  double _117;
  struct predictor_t * _118;
  double iftmp.16_119;
  int _121;
  float _125;
  double _126;
  double _127;
  double _128;
  int _130;
  int _131;
  int _132;
  struct x264_ratecontrol_t * _133;
  long int _134;
  struct x264_t * _135;
  struct x264_ratecontrol_t * _136;
  long int _137;
  long int _138;
  long int _139;
  int _141;
  int _142;
  int _143;
  struct x264_ratecontrol_t * _145;
  int _147;
  int _149;
  double _150;
  int _152;
  long int _154;
  struct x264_frame_t * _157;
  int _158;
  int _159;
  double _160;
  double _161;
  double _162;
  double _163;
  double _164;
  double _165;
  double _167;
  int _168;
  double _169;
  double _170;
  double _171;
  double _172;
  double _173;
  long unsigned int _175;
  long int _176;
  double _179;
  double _180;
  double _181;
  double iftmp.16_182;
  double _183;
  double _184;
  int _188;
  int _190;
  double _191;
  double _193;
  double _194;
  int _195;
  double _196;
  double _198;
  double _200;
  double _201;
  double _202;
  double _203;
  double _204;
  double iftmp.16_208;
  double iftmp.16_209;
  double _210;
  double _211;
  double _212;
  double _214;
  double _215;
  double _217;
  double _223;
  double _225;
  double _228;
  int _233;
  double _236;
  int _239;
  double _241;
  double _242;
  double _244;
  double _245;
  double _247;
  double _248;
  double _250;
  double _253;
  float _254;
  int _257;
  int _263;
  struct x264_frame_t * _264;
  int _265;
  double _266;
  double _268;
  struct x264_frame_t * _270;
  int _271;
  int _272;
  int _273;
  double _276;
  double _277;
  double _278;
  double _280;
  double _282;
  double _283;
  double _284;
  double _285;
  int _287;
  double _288;
  double iftmp.30_289;
  double _291;
  double _292;
  double _293;
  double _294;
  double _295;
  double _296;
  int _298;
  int _299;
  double _300;
  double _301;
  double _302;
  double _303;
  float _305;
  float _306;
  int _308;
  double _309;
  double _310;
  double _315;
  int _317;
  float _318;
  double iftmp.31_319;
  double _320;
  float _321;
  float _322;
  double _323;
  double _324;
  double _326;
  double _327;
  double _328;
  int _333;
  int _334;
  int _338;
  double _339;
  int _342;
  double _343;
  struct predictor_t * _344;
  int _345;
  long unsigned int _346;
  long unsigned int _347;
  struct predictor_t * _348;
  double _349;
  int _352;
  double _355;
  double _356;
  double _357;
  double _358;
  float _359;
  struct x264_ratecontrol_t * _360;
  float _361;
  struct x264_ratecontrol_t * _362;
  float _363;
  int _364;
  int _365;
  int _366;
  float _367;
  int _368;
  int _369;
  int _370;
  float _371;
  int _372;
  struct x264_ratecontrol_t * _373;
  double iftmp.16_374;
  double iftmp.16_375;
  double _377;
  double _378;
  double _379;
  double _380;
  double iftmp.16_381;
  double iftmp.16_382;
  double _383;
  double _384;
  double _385;
  double _386;
  double _387;
  double _388;
  double _389;
  double _391;
  double _392;
  double _394;
  double _396;
  double _397;
  double _398;
  double _400;
  double _401;
  double iftmp.23_402;
  double _403;
  double _404;
  double _405;
  int _406;
  double _407;
  double _408;
  _Bool _411;
  double _416;
  double _417;
  double _418;
  double _421;
  double iftmp.23_422;
  double _423;
  double _424;
  double _425;
  double _428;
  double _431;
  double _432;
  double _434;
  struct x264_frame_t * _435;
  double _436;
  double _437;
  double _438;
  double _440;
  double _441;
  double iftmp.23_442;
  double _443;
  double _444;
  double _445;
  _Bool _446;
  double _447;
  double _449;
  double _450;
  int _458;
  struct x264_frame_t * _463;
  int _476;
  double iftmp.16_478;
  _Bool _480;
  double prephitmp_635;
  double prephitmp_637;
  double prephitmp_638;
  int _639;
  double prephitmp_644;
  struct x264_frame_t * pretmp_645;
  struct x264_frame_t * pretmp_646;
  int pretmp_648;
  int pretmp_649;
  int prephitmp_650;
  int prephitmp_651;
  double pretmp_652;
  double pretmp_653;
  double prephitmp_654;
  int pretmp_655;
  int prephitmp_656;
  double pretmp_657;
  double pretmp_658;
  double prephitmp_659;
  double prephitmp_660;
  double pretmp_662;
  double prephitmp_663;
  double pretmp_664;
  double prephitmp_665;

  <bb 2>:
  rcc_38 = h_37(D)->rc;
  # DEBUG rcc => rcc_38
  pict_type_39 = h_37(D)->sh.i_type;
  # DEBUG pict_type => pict_type_39
  lmin_40 = rcc_38->lmin[pict_type_39];
  # DEBUG lmin => lmin_40
  qmax_41 = rcc_38->lmax[pict_type_39];
  # DEBUG lmax => qmax_41
  _42 = h_37(D)->stat.i_slice_size[2];
  _43 = h_37(D)->stat.i_slice_size[0];
  # DEBUG D#117 => _42 + _43
  _45 = h_37(D)->stat.i_slice_size[1];
  # DEBUG D#116 => D#117 + _45
  # DEBUG D#115 => D#116 * 8
  # DEBUG total_bits => D#115
  _48 = rcc_38->b_2pass;
  if (_48 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  goto <bb 6>;

  <bb 4>:
  _49 = rcc_38->rce;
  rce = *_49;
  _51 = rce.pict_type;
  if (pict_type_39 != _51)
    goto <bb 5>;
  else
    goto <bb 3>;

  <bb 5>:
  _52 = slice_type_to_char[_51];
  _53 = (int) _52;
  _54 = slice_type_to_char[pict_type_39];
  _55 = (int) _54;
  x264_log (h_37(D), 0, "slice=%c but 2pass stats say %c\n", _55, _53);

  <bb 6>:
  if (pict_type_39 == 1)
    goto <bb 7>;
  else
    goto <bb 21>;

  <bb 7>:
  _57 = h_37(D)->fref0[0];
  _58 = _57->i_type;
  _59 = (unsigned int) _58;
  _60 = _59 + 4294967295;
  _61 = _60 <= 1;
  # DEBUG i0 => (int) _61
  _62 = h_37(D)->fref1[0];
  _63 = _62->i_type;
  _64 = (unsigned int) _63;
  _65 = _64 + 4294967295;
  _66 = _65 <= 1;
  # DEBUG i1 => (int) _66
  _67 = h_37(D)->fenc;
  _68 = _67->i_poc;
  _69 = _57->i_poc;
  # DEBUG D#114 => _68 - _69
  # DEBUG dt0 => ABS_EXPR <D#114>
  _72 = _62->i_poc;
  # DEBUG D#113 => _68 - _72
  # DEBUG dt1 => ABS_EXPR <D#113>
  q_75 = _57->f_qp_avg_rc;
  # DEBUG q0 => q_75
  q_76 = _62->f_qp_avg_rc;
  # DEBUG q1 => q_76
  if (_58 == 4)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  pretmp_662 = rcc_38->pb_offset;
  goto <bb 10>;

  <bb 9>:
  _77 = (double) q_75;
  _78 = rcc_38->pb_offset;
  _79 = _78 * 5.0e-1;
  _80 = _77 - _79;
  q_81 = (float) _80;
  # DEBUG q0 => q_81

  <bb 10>:
  # q_9 = PHI <q_75(8), q_81(9)>
  # prephitmp_663 = PHI <pretmp_662(8), _78(9)>
  # DEBUG q0 => q_9
  if (_63 == 4)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  _82 = (double) q_76;
  _84 = prephitmp_663 * 5.0e-1;
  _85 = _82 - _84;
  q_86 = (float) _85;
  # DEBUG q1 => q_86

  <bb 12>:
  # q_10 = PHI <q_76(10), q_86(11)>
  # DEBUG q1 => q_10
  _87 = _61 & _66;
  if (_87 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _88 = q_9 + q_10;
  _89 = _88 * 5.0e-1;
  _90 = (double) _89;
  _91 = rcc_38->ip_offset;
  _92 = _90 + _91;
  q_93 = (float) _92;
  # DEBUG q => q_93
  goto <bb 17>;

  <bb 14>:
  if (_60 <= 1)
    goto <bb 17>;
  else
    goto <bb 15>;

  <bb 15>:
  if (_65 <= 1)
    goto <bb 17>;
  else
    goto <bb 16>;

  <bb 16>:
  _70 = _68 - _69;
  dt0_71 = ABS_EXPR <_70>;
  _73 = _68 - _72;
  dt1_74 = ABS_EXPR <_73>;
  _94 = (float) dt1_74;
  _95 = q_9 * _94;
  _96 = (float) dt0_71;
  _97 = q_10 * _96;
  _98 = _95 + _97;
  _99 = dt0_71 + dt1_74;
  _100 = (float) _99;
  q_101 = _98 / _100;
  # DEBUG q => q_101

  <bb 17>:
  # q_1 = PHI <q_93(13), q_10(14), q_9(15), q_101(16)>
  # DEBUG q => q_1
  _102 = _67->b_kept_as_ref;
  if (_102 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  _103 = (double) q_1;
  _105 = prephitmp_663 * 5.0e-1;
  _106 = _103 + _105;
  q_107 = (float) _106;
  # DEBUG q => q_107
  goto <bb 20>;

  <bb 19>:
  _108 = (double) q_1;
  _110 = _108 + prephitmp_663;
  q_111 = (float) _110;
  # DEBUG q => q_111

  <bb 20>:
  # q_2 = PHI <q_107(18), q_111(19)>
  # DEBUG q => q_2
  _112 = h_37(D)->i_ref1;
  _113 = _112 + -1;
  _114 = h_37(D)->fref1[_113];
  _115 = _114->i_satd;
  _116 = (double) _115;
  _117 = (double) q_2;
  _118 = rcc_38->pred_b_from_p;
  _355 = MEM[(double *)_118];
  # DEBUG D#4 => _118
  _356 = MEM[(double *)_118 + 8B];
  # DEBUG D#4 => _118
  # DEBUG q => _117
  # DEBUG var => _116
  # DEBUG p => D#4
  # DEBUG p => D#4
  _303 = _116 * _355;
  _236 = _117 * _356;
  _228 = _303 / _236;
  # DEBUG q => NULL
  # DEBUG var => NULL
  rcc_38->frame_size_planned = _228;
  _121 = (int) _228;
  x264_ratecontrol_set_estimated_size (h_37(D), _121);
  rcc_38->last_satd = 0;
  # DEBUG qp => _117
  _349 = _117 - 1.2e+1;
  _339 = _349 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _327 = pow (2.0e+0, _339);
  _320 = _327 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  _125 = (float) _320;
  goto <bb 88>;

  <bb 21>:
  _44 = _42 + _43;
  _46 = _44 + _45;
  predicted_bits_47 = _46 * 8;
  _126 = rcc_38->rate_tolerance;
  _127 = rcc_38->bitrate;
  _128 = _126 * _127;
  abr_buffer_129 = _128 * 2.0e+0;
  # DEBUG abr_buffer => abr_buffer_129
  _130 = rcc_38->b_2pass;
  if (_130 != 0)
    goto <bb 22>;
  else
    goto <bb 58>;

  <bb 22>:
  # DEBUG predicted_bits => D#115
  _131 = rcc_38->b_vbv;
  if (_131 != 0)
    goto <bb 23>;
  else
    goto <bb 33>;

  <bb 23>:
  _132 = h_37(D)->param.i_threads;
  if (_132 > 1)
    goto <bb 25>;
  else
    goto <bb 24>;

  <bb 24>:
  pretmp_646 = h_37(D)->fenc;
  pretmp_649 = pretmp_646->i_frame;
  pretmp_653 = rcc_38->fps;
  goto <bb 36>;

  <bb 25>:
  _133 = h_37(D)->rc;
  _134 = (long int) _133;
  _135 = h_37(D)->thread[0];
  _136 = _135->rc;
  _137 = (long int) _136;
  _138 = _134 - _137;
  _139 = _138 /[ex] 608;
  j_140 = (int) _139;
  # DEBUG j => j_140
  # DEBUG i => 1
  # DEBUG i => 1
  # DEBUG predicted_bits => D#115

  <bb 26>:
  # predicted_bits_124 = PHI <predicted_bits_47(25), predicted_bits_11(31)>
  # i_199 = PHI <1(25), i_156(31)>
  # _458 = PHI <_132(25), _141(31)>
  # DEBUG i => i_199
  # DEBUG predicted_bits => predicted_bits_124
  _142 = j_140 + i_199;
  _143 = _142 % _458;
  t_144 = h_37(D)->thread[_143];
  # DEBUG t => t_144
  # DEBUG D#112 => t_144->rc
  # DEBUG D#111 => D#112->frame_size_planned
  # DEBUG bits => D#111
  _147 = t_144->b_thread_active;
  if (_147 == 0)
    goto <bb 30>;
  else
    goto <bb 27>;

  <bb 27>:
  _145 = t_144->rc;
  bits_146 = _145->frame_size_planned;
  _149 = x264_ratecontrol_get_estimated_size (t_144);
  _150 = (double) _149;
  if (bits_146 <= _150)
    goto <bb 28>;
  else
    goto <bb 29>;

  <bb 28>:
  _152 = x264_ratecontrol_get_estimated_size (t_144);
  bits_153 = (double) _152;

  <bb 29>:
  # bits_21 = PHI <bits_153(28), bits_146(27)>
  # DEBUG bits => bits_21
  _154 = (long int) bits_21;
  predicted_bits_155 = predicted_bits_124 + _154;
  # DEBUG predicted_bits => predicted_bits_155

  <bb 30>:
  # predicted_bits_11 = PHI <predicted_bits_124(26), predicted_bits_155(29)>
  # DEBUG predicted_bits => predicted_bits_11
  i_156 = i_199 + 1;
  # DEBUG i => i_156
  # DEBUG i => i_156
  # DEBUG predicted_bits => predicted_bits_11
  _141 = h_37(D)->param.i_threads;
  if (_141 > i_156)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  goto <bb 26>;

  <bb 32>:
  # predicted_bits_640 = PHI <predicted_bits_11(30)>
  # _639 = PHI <_141(30)>
  pretmp_645 = h_37(D)->fenc;
  pretmp_648 = pretmp_645->i_frame;
  pretmp_652 = rcc_38->fps;
  pretmp_655 = rcc_38->b_vbv;
  goto <bb 36>;

  <bb 33>:
  _157 = h_37(D)->fenc;
  _158 = _157->i_frame;
  _159 = h_37(D)->param.i_threads;
  if (_158 < _159)
    goto <bb 34>;
  else
    goto <bb 35>;

  <bb 34>:
  _160 = (double) predicted_bits_47;
  _161 = (double) _158;
  _162 = _127 * _161;
  _163 = rcc_38->fps;
  _164 = _162 / _163;
  _165 = _160 + _164;
  predicted_bits_166 = (int64_t) _165;
  # DEBUG predicted_bits => predicted_bits_166
  goto <bb 36>;

  <bb 35>:
  _167 = (double) predicted_bits_47;
  _168 = _159 + -1;
  _169 = (double) _168;
  _170 = _127 * _169;
  _171 = rcc_38->fps;
  _172 = _170 / _171;
  _173 = _167 + _172;
  predicted_bits_174 = (int64_t) _173;
  # DEBUG predicted_bits => predicted_bits_174

  <bb 36>:
  # predicted_bits_13 = PHI <predicted_bits_640(32), predicted_bits_166(34), predicted_bits_174(35), predicted_bits_47(24)>
  # prephitmp_650 = PHI <pretmp_648(32), _158(34), _158(35), pretmp_649(24)>
  # prephitmp_651 = PHI <_639(32), _159(34), _159(35), _132(24)>
  # prephitmp_654 = PHI <pretmp_652(32), _163(34), _171(35), pretmp_653(24)>
  # prephitmp_656 = PHI <pretmp_655(32), _131(34), _131(35), _131(24)>
  # DEBUG predicted_bits => predicted_bits_13
  _175 = rce.expected_bits;
  _176 = (long int) _175;
  diff_177 = predicted_bits_13 - _176;
  # DEBUG diff => diff_177
  q_178 = rce.new_qscale;
  # DEBUG q => q_178
  _179 = (double) diff_177;
  _180 = abr_buffer_129 - _179;
  _181 = _180 / abr_buffer_129;
  # DEBUG v => _181
  # DEBUG f_min => 5.0e-1
  # DEBUG f_max => 2.0e+0
  iftmp.16_208 = MIN_EXPR <_181, 2.0e+0>;
  iftmp.16_209 = MAX_EXPR <iftmp.16_208, 5.0e-1>;
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  _183 = (double) q_178;
  _184 = _183 / iftmp.16_209;
  q_185 = (float) _184;
  # DEBUG q => q_185
  _188 = prephitmp_650 + 1;
  _190 = _188 - prephitmp_651;
  _191 = (double) _190;
  if (_191 >= prephitmp_654)
    goto <bb 37>;
  else
    goto <bb 39>;

  <bb 37>:
  _193 = rcc_38->expected_bits_sum;
  if (_193 > 0.0)
    goto <bb 38>;
  else
    goto <bb 39>;

  <bb 38>:
  _194 = (double) prephitmp_650;
  _195 = rcc_38->num_entries;
  _196 = (double) _195;
  time_197 = _194 / _196;
  # DEBUG time => time_197
  _198 = time_197 * 1.0e+2;
  # DEBUG v => _198
  # DEBUG f_min => 0.0
  # DEBUG f_max => 1.0e+0
  iftmp.16_182 = MIN_EXPR <_198, 1.0e+0>;
  iftmp.16_478 = MAX_EXPR <iftmp.16_182, 0.0>;
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  # DEBUG w => NULL
  _200 = (double) q_185;
  _201 = (double) predicted_bits_47;
  _202 = _201 / _193;
  _203 = pow (_202, iftmp.16_478);
  _204 = _200 * _203;
  q_205 = (float) _204;
  # DEBUG q => q_205

  <bb 39>:
  # q_3 = PHI <q_185(36), q_185(37), q_205(38)>
  # DEBUG q => q_3
  if (prephitmp_656 != 0)
    goto <bb 41>;
  else
    goto <bb 40>;

  <bb 40>:
  pretmp_664 = (double) q_3;
  goto <bb 55>;

  <bb 41>:
  qscale_207 = (double) q_3;
  _363 = MEM[(float *)&rce + 8B];
  # DEBUG D#8 => &rce
  _364 = MEM[(int *)&rce + 12B];
  # DEBUG D#8 => &rce
  _365 = MEM[(int *)&rce + 16B];
  # DEBUG D#8 => &rce
  _366 = MEM[(int *)&rce + 20B];
  # DEBUG D#8 => &rce
  # DEBUG qscale => qscale_207
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  qscale_479 = MAX_EXPR <qscale_207, 1.000000000000000055511151231257827021181583404541015625e-1>;
  # DEBUG qscale => qscale_479
  _391 = (double) _365;
  _392 = _391 + 1.000000000000000055511151231257827021181583404541015625e-1;
  _394 = (double) _363;
  _396 = _394 / qscale_479;
  _397 = pow (_396, 1.100000000000000088817841970012523233890533447265625e+0);
  _398 = _392 * _397;
  _400 = (double) _364;
  if (_363 > 1.0e+0)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:

  <bb 43>:
  # iftmp.23_402 = PHI <1.0e+0(41), _394(42)>
  _401 = MAX_EXPR <qscale_479, 1.0e+0>;
  _403 = iftmp.23_402 / _401;
  _404 = __builtin_sqrt (_403);
  _405 = _400 * _404;
  _407 = (double) _366;
  _450 = _398 + _405;
  # DEBUG qscale => NULL
  # DEBUG expected_size => NULL
  _210 = rcc_38->buffer_fill;
  _211 = rcc_38->buffer_rate;
  _212 = _210 + _211;
  _428 = _212 - _407;
  expected_vbv_213 = _428 - _450;
  # DEBUG expected_vbv => expected_vbv_213
  _214 = rce.expected_vbv;
  _215 = rcc_38->buffer_size;
  expected_fullness_216 = _214 / _215;
  # DEBUG expected_fullness => expected_fullness_216
  # DEBUG D#110 => 2.0e+0 - expected_fullness_216
  # DEBUG D#109 => qscale_207 * D#110
  # DEBUG qmax => D#109
  size_constraint_219 = expected_fullness_216 + 1.0e+0;
  # DEBUG size_constraint => size_constraint_219
  # DEBUG qmax => MAX_EXPR <_183, D#109>
  if (expected_fullness_216 < 5.000000000000000277555756156289135105907917022705078125e-2)
    goto <bb 45>;
  else
    goto <bb 44>;

  <bb 44>:
  _217 = 2.0e+0 - expected_fullness_216;
  qmax_218 = qscale_207 * _217;
  qmax_220 = MAX_EXPR <_183, qmax_218>;

  <bb 45>:
  # qmax_16 = PHI <qmax_220(44), qmax_41(43)>
  # DEBUG qmax => qmax_16
  qmax_221 = MIN_EXPR <qmax_16, qmax_41>;
  # DEBUG qmax => qmax_221
  pretmp_657 = _214 / size_constraint_219;
  iftmp.23_422 = _363 > 1.0e+0 ? _394 : 1.0e+0;
  goto <bb 47>;

  <bb 46>:
  # prephitmp_660 = PHI <_223(49), prephitmp_659(52)>
  _225 = prephitmp_660 * 1.0500000000000000444089209850062616169452667236328125e+0;
  q_226 = (float) _225;
  # DEBUG q => q_226
  qscale_227 = (double) q_226;
  # DEBUG D#8 => &rce
  # DEBUG D#8 => &rce
  # DEBUG D#8 => &rce
  # DEBUG D#8 => &rce
  # DEBUG qscale => qscale_227
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  qscale_340 = MAX_EXPR <qscale_227, 1.000000000000000055511151231257827021181583404541015625e-1>;
  # DEBUG qscale => qscale_340
  _416 = _394 / qscale_340;
  _417 = pow (_416, 1.100000000000000088817841970012523233890533447265625e+0);
  _418 = _392 * _417;
  _421 = MAX_EXPR <qscale_340, 1.0e+0>;
  _423 = iftmp.23_422 / _421;
  _424 = __builtin_sqrt (_423);
  _425 = _400 * _424;
  _408 = _418 + _425;
  # DEBUG qscale => NULL
  # DEBUG expected_size => NULL
  expected_vbv_230 = _428 - _408;
  # DEBUG expected_vbv => expected_vbv_230

  <bb 47>:
  # q_4 = PHI <q_3(45), q_226(46)>
  # expected_vbv_15 = PHI <expected_vbv_213(45), expected_vbv_230(46)>
  # DEBUG expected_vbv => expected_vbv_15
  # DEBUG q => q_4
  if (expected_vbv_15 < pretmp_657)
    goto <bb 49>;
  else
    goto <bb 48>;

  <bb 48>:
  pretmp_658 = (double) q_4;
  goto <bb 50>;

  <bb 49>:
  _223 = (double) q_4;
  if (qmax_221 > _223)
    goto <bb 46>;
  else
    goto <bb 50>;

  <bb 50>:
  # prephitmp_659 = PHI <pretmp_658(48), _223(49)>
  if (expected_vbv_15 < 0.0)
    goto <bb 52>;
  else
    goto <bb 51>;

  <bb 51>:
  # prephitmp_638 = PHI <prephitmp_659(50)>
  goto <bb 54>;

  <bb 52>:
  if (qmax_41 > prephitmp_659)
    goto <bb 46>;
  else
    goto <bb 53>;

  <bb 53>:
  # prephitmp_637 = PHI <prephitmp_659(52)>

  <bb 54>:
  # prephitmp_635 = PHI <prephitmp_637(53), prephitmp_638(51)>
  _233 = x264_rc_analyse_slice (h_37(D));
  rcc_38->last_satd = _233;

  <bb 55>:
  # prephitmp_665 = PHI <pretmp_664(40), prephitmp_635(54)>
  # DEBUG q => NULL
  # DEBUG v => NULL
  # DEBUG f_min => lmin_40
  # DEBUG f_max => qmax_41
  if (lmin_40 <= prephitmp_665)
    goto <bb 56>;
  else
    goto <bb 57>;

  <bb 56>:
  iftmp.16_119 = MIN_EXPR <qmax_41, prephitmp_665>;

  <bb 57>:
  # iftmp.16_374 = PHI <lmin_40(55), iftmp.16_119(56)>
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  q_237 = (float) iftmp.16_374;
  # DEBUG q => q_237
  goto <bb 79>;

  <bb 58>:
  # DEBUG overflow => 1.0e+0
  _239 = x264_rc_analyse_slice (h_37(D));
  rcc_38->last_satd = _239;
  _241 = rcc_38->short_term_cplxsum;
  _242 = _241 * 5.0e-1;
  _244 = rcc_38->short_term_cplxcount;
  _245 = _244 * 5.0e-1;
  _247 = (double) _239;
  _248 = _242 + _247;
  rcc_38->short_term_cplxsum = _248;
  _250 = _245 + 1.0e+0;
  rcc_38->short_term_cplxcount = _250;
  rce.tex_bits = _239;
  _253 = _248 / _250;
  _254 = (float) _253;
  rce.blurred_complexity = _254;
  rce.mv_bits = 0;
  _257 = rcc_38->nmb;
  rce.p_count = _257;
  rce.i_count = 0;
  rce.s_count = 0;
  rce.qscale = 1.0e+0;
  rce.pict_type = pict_type_39;
  _263 = h_37(D)->param.rc.i_rc_method;
  if (_263 == 1)
    goto <bb 59>;
  else
    goto <bb 60>;

  <bb 59>:
  _264 = h_37(D)->fenc;
  _265 = _264->i_frame;
  _266 = rcc_38->rate_factor_constant;
  _359 = MEM[(float *)h_37(D) + 560B];
  # DEBUG D#7 => h_37(D)
  _360 = MEM[(struct x264_ratecontrol_t * *)h_37(D) + 20896B];
  # DEBUG D#7 => h_37(D)
  _268 = get_qscale.isra.6 (_359, _360, &rce, _266, _265);
  q_269 = (float) _268;
  # DEBUG q => q_269
  goto <bb 64>;

  <bb 60>:
  _270 = h_37(D)->fenc;
  _271 = _270->i_frame;
  _272 = _271 + 1;
  _273 = h_37(D)->param.i_threads;
  i_frame_done_274 = _272 - _273;
  # DEBUG i_frame_done => i_frame_done_274
  _276 = rcc_38->wanted_bits_window;
  _277 = rcc_38->cplxr_sum;
  _278 = _276 / _277;
  _361 = MEM[(float *)h_37(D) + 560B];
  # DEBUG D#7 => h_37(D)
  _362 = MEM[(struct x264_ratecontrol_t * *)h_37(D) + 20896B];
  # DEBUG D#7 => h_37(D)
  _280 = get_qscale.isra.6 (_361, _362, &rce, _278, _271);
  q_281 = (float) _280;
  # DEBUG q => q_281
  _282 = (double) i_frame_done_274;
  _283 = rcc_38->bitrate;
  _284 = _282 * _283;
  _285 = rcc_38->fps;
  wanted_bits_286 = _284 / _285;
  # DEBUG wanted_bits => wanted_bits_286
  if (wanted_bits_286 > 0.0)
    goto <bb 61>;
  else
    goto <bb 64>;

  <bb 61>:
  _287 = i_frame_done_274 / 25;
  _288 = (double) _287;
  if (_288 >= 1.0e+0)
    goto <bb 62>;
  else
    goto <bb 63>;

  <bb 62>:
  iftmp.30_289 = sqrt (_288);

  <bb 63>:
  # iftmp.30_22 = PHI <iftmp.30_289(62), 1.0e+0(61)>
  abr_buffer_290 = iftmp.30_22 * abr_buffer_129;
  # DEBUG abr_buffer => abr_buffer_290
  _291 = (double) predicted_bits_47;
  _292 = _291 - wanted_bits_286;
  _293 = _292 / abr_buffer_290;
  _294 = _293 + 1.0e+0;
  # DEBUG v => _294
  # DEBUG f_min => 5.0e-1
  # DEBUG f_max => 2.0e+0
  iftmp.16_375 = MIN_EXPR <_294, 2.0e+0>;
  overflow_427 = MAX_EXPR <iftmp.16_375, 5.0e-1>;
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  # DEBUG overflow => NULL
  _295 = (double) q_281;
  _296 = _295 * overflow_427;
  q_297 = (float) _296;
  # DEBUG q => q_297

  <bb 64>:
  # q_6 = PHI <q_269(59), q_281(60), q_297(63)>
  # overflow_17 = PHI <1.0e+0(59), 1.0e+0(60), overflow_427(63)>
  # DEBUG overflow => overflow_17
  # DEBUG q => q_6
  if (pict_type_39 == 2)
    goto <bb 65>;
  else
    goto <bb 68>;

  <bb 65>:
  _298 = h_37(D)->param.i_keyint_max;
  if (_298 > 1)
    goto <bb 66>;
  else
    goto <bb 68>;

  <bb 66>:
  _299 = rcc_38->last_non_b_pict_type;
  if (_299 != 2)
    goto <bb 67>;
  else
    goto <bb 68>;

  <bb 67>:
  _300 = rcc_38->accum_p_qp;
  _301 = rcc_38->accum_p_norm;
  _302 = _300 / _301;
  # DEBUG qp => _302
  _377 = _302 - 1.2e+1;
  _378 = _377 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _379 = pow (2.0e+0, _378);
  _380 = _379 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  q_304 = (float) _380;
  # DEBUG q => q_304
  _305 = h_37(D)->param.rc.f_ip_factor;
  _306 = ABS_EXPR <_305>;
  q_307 = q_304 / _306;
  # DEBUG q => q_307
  goto <bb 78>;

  <bb 68>:
  _308 = h_37(D)->i_frame;
  if (_308 > 0)
    goto <bb 69>;
  else
    goto <bb 76>;

  <bb 69>:
  _309 = rcc_38->last_qscale_for[pict_type_39];
  _310 = rcc_38->lstep;
  lmin_311 = _309 / _310;
  # DEBUG lmin => lmin_311
  lmax_312 = _309 * _310;
  # DEBUG lmax => lmax_312
  _411 = _308 > 3;
  _480 = overflow_17 > 1.100000000000000088817841970012523233890533447265625e+0;
  _446 = _411 & _480;
  if (_446 != 0)
    goto <bb 70>;
  else
    goto <bb 71>;

  <bb 70>:
  lmax_313 = _310 * lmax_312;
  # DEBUG lmax => lmax_313
  goto <bb 73>;

  <bb 71>:
  if (overflow_17 < 9.0000000000000002220446049250313080847263336181640625e-1)
    goto <bb 72>;
  else
    goto <bb 73>;

  <bb 72>:
  lmin_314 = lmin_311 / _310;
  # DEBUG lmin => lmin_314

  <bb 73>:
  # lmin_18 = PHI <lmin_311(70), lmin_311(71), lmin_314(72)>
  # lmax_19 = PHI <lmax_313(70), lmax_312(71), lmax_312(72)>
  # DEBUG lmax => lmax_19
  # DEBUG lmin => lmin_18
  _315 = (double) q_6;
  # DEBUG v => _315
  # DEBUG f_min => lmin_18
  # DEBUG f_max => lmax_19
  if (lmin_18 <= _315)
    goto <bb 74>;
  else
    goto <bb 75>;

  <bb 74>:
  iftmp.16_381 = MIN_EXPR <lmax_19, _315>;

  <bb 75>:
  # iftmp.16_382 = PHI <lmin_18(73), iftmp.16_381(74)>
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  q_316 = (float) iftmp.16_382;
  # DEBUG q => q_316
  goto <bb 78>;

  <bb 76>:
  _317 = h_37(D)->param.rc.i_rc_method;
  if (_317 == 1)
    goto <bb 77>;
  else
    goto <bb 78>;

  <bb 77>:
  _318 = h_37(D)->param.rc.f_rf_constant;
  iftmp.31_319 = (double) _318;
  # DEBUG qp => iftmp.31_319
  _383 = iftmp.31_319 - 1.2e+1;
  _384 = _383 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _385 = pow (2.0e+0, _384);
  _386 = _385 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  _321 = h_37(D)->param.rc.f_ip_factor;
  _322 = ABS_EXPR <_321>;
  _323 = (double) _322;
  _324 = _386 / _323;
  q_325 = (float) _324;
  # DEBUG q => q_325

  <bb 78>:
  # q_7 = PHI <q_307(67), q_316(75), q_6(76), q_325(77)>
  # DEBUG q => q_7
  _326 = (double) q_7;
  _371 = MEM[(float *)h_37(D) + 520B];
  # DEBUG D#23 => h_37(D)
  _372 = MEM[(int *)h_37(D) + 4344B];
  # DEBUG D#23 => h_37(D)
  _373 = MEM[(struct x264_ratecontrol_t * *)h_37(D) + 20896B];
  # DEBUG D#23 => h_37(D)
  _328 = clip_qscale.isra.11 (_371, _372, _373, pict_type_39, _326);
  q_329 = (float) _328;
  # DEBUG q => q_329

  <bb 79>:
  # q_8 = PHI <q_237(57), q_329(78)>
  # DEBUG q => q_8
  qscale_330 = (double) q_8;
  rcc_38->last_qscale = qscale_330;
  rcc_38->last_qscale_for[pict_type_39] = qscale_330;
  _333 = rcc_38->b_2pass;
  if (_333 == 0)
    goto <bb 90>;
  else
    goto <bb 80>;

  <bb 80>:
  _334 = rcc_38->b_vbv;
  if (_334 != 0)
    goto <bb 89>;
  else
    goto <bb 86>;

  <bb 81>:
  rcc_38->last_qscale_for[0] = qscale_330;
  if (_333 != 0)
    goto <bb 82>;
  else
    goto <bb 86>;

  <bb 82>:
  _338 = rcc_38->b_vbv;
  if (_338 != 0)
    goto <bb 83>;
  else
    goto <bb 86>;

  <bb 83>:
  _367 = MEM[(float *)&rce + 8B];
  # DEBUG D#8 => &rce
  _368 = MEM[(int *)&rce + 12B];
  # DEBUG D#8 => &rce
  _369 = MEM[(int *)&rce + 16B];
  # DEBUG D#8 => &rce
  _370 = MEM[(int *)&rce + 20B];
  # DEBUG D#8 => &rce
  # DEBUG qscale => qscale_330
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  qscale_452 = MAX_EXPR <qscale_330, 1.000000000000000055511151231257827021181583404541015625e-1>;
  # DEBUG qscale => qscale_452
  _431 = (double) _369;
  _432 = _431 + 1.000000000000000055511151231257827021181583404541015625e-1;
  _434 = (double) _367;
  _436 = _434 / qscale_452;
  _437 = pow (_436, 1.100000000000000088817841970012523233890533447265625e+0);
  _438 = _432 * _437;
  _440 = (double) _368;
  if (_367 > 1.0e+0)
    goto <bb 84>;
  else
    goto <bb 85>;

  <bb 84>:

  <bb 85>:
  # iftmp.23_442 = PHI <1.0e+0(83), _434(84)>
  _441 = MAX_EXPR <qscale_452, 1.0e+0>;
  _443 = iftmp.23_442 / _441;
  _444 = __builtin_sqrt (_443);
  _445 = _440 * _444;
  _447 = (double) _370;
  _14 = _438 + _447;
  _449 = _14 + _445;
  # DEBUG qscale => NULL
  rcc_38->frame_size_planned = _449;
  goto <bb 87>;

  <bb 86>:
  _342 = rcc_38->last_satd;
  _343 = (double) _342;
  _344 = rcc_38->pred;
  _345 = h_37(D)->sh.i_type;
  _346 = (long unsigned int) _345;
  _347 = _346 * 24;
  _348 = _344 + _347;
  _357 = MEM[(double *)_348];
  # DEBUG D#4 => _348
  _358 = MEM[(double *)_348 + 8B];
  # DEBUG D#4 => _348
  # DEBUG q => qscale_330
  # DEBUG var => _343
  # DEBUG p => D#4
  # DEBUG p => D#4
  _387 = _343 * _357;
  _388 = qscale_330 * _358;
  _389 = _387 / _388;
  # DEBUG q => NULL
  # DEBUG var => NULL
  rcc_38->frame_size_planned = _389;

  <bb 87>:
  # prephitmp_644 = PHI <_449(85), _389(86)>
  _352 = (int) prephitmp_644;
  x264_ratecontrol_set_estimated_size (h_37(D), _352);

  <bb 88>:
  # _20 = PHI <_125(20), q_8(87)>
  rce ={v} {CLOBBER};
  return _20;

  <bb 89>:
  _435 = h_37(D)->fenc;
  _476 = _435->i_frame;
  if (_476 == 0)
    goto <bb 81>;
  else
    goto <bb 82>;

  <bb 90>:
  _463 = h_37(D)->fenc;
  _406 = _463->i_frame;
  if (_406 == 0)
    goto <bb 81>;
  else
    goto <bb 86>;

}



;; Function x264_ratecontrol_start (x264_ratecontrol_start, funcdef_no=127, decl_uid=6365, cgraph_uid=127, symbol_order=170)


Analyzing loop at encoder/ratecontrol.c:786
encoder/ratecontrol.c:786:24: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:786:24: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:786:24: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:786:24: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:1260
encoder/ratecontrol.c:1260:9: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1260:9: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1260:9: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1260:9: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:667
encoder/ratecontrol.c:667:26: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:667:26: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:667:26: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:667:26: note: bad loop form.
encoder/ratecontrol.c:746:6: note: vectorized 0 loops in function.
x264_ratecontrol_start (struct x264_t * h, int i_force_qp)
{
  _Bool rc__bframes_lsm.476;
  int rc__bframes_lsm.475;
  struct x264_ratecontrol_t * rcc;
  int j;
  int i;
  struct x264_t * t;
  double bits;
  struct x264_ratecontrol_t * rc;
  struct x264_zone_t * z;
  int i;
  int frame;
  static const char __PRETTY_FUNCTION__[23] = "x264_ratecontrol_start";
  float q;
  struct ratecontrol_entry_t * rce;
  struct x264_ratecontrol_t * rc;
  struct x264_frame_t * _16;
  int _17;
  unsigned int _19;
  struct x264_zone_t * _20;
  struct x264_param_t * _21;
  struct x264_param_t * _22;
  int _28;
  struct x264_frame_t * _29;
  int _31;
  struct x264_ratecontrol_t * _32;
  struct ratecontrol_entry_t * _33;
  long unsigned int _34;
  long unsigned int _35;
  int _38;
  int _39;
  char _40;
  _Bool _41;
  int _42;
  char _44;
  unsigned char _45;
  unsigned char _46;
  _Bool _47;
  int _48;
  int _51;
  struct x264_sps_t * _52;
  int _53;
  long unsigned int _54;
  long unsigned int _55;
  struct x264_frame_t * _56;
  int * _57;
  int _58;
  struct predictor_t * _59;
  struct x264_frame_t * _65;
  int _66;
  unsigned int _67;
  unsigned int _68;
  int _69;
  int _71;
  int _73;
  float _75;
  double _76;
  int _77;
  int _79;
  float _81;
  double _83;
  struct x264_frame_t * _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  int _92;
  int _94;
  int _95;
  int _96;
  int _97;
  float _98;
  double _100;
  float _101;
  double _102;
  double _103;
  double _104;
  double _105;
  double _110;
  double _111;
  int _112;
  struct x264_frame_t * _113;
  float _116;
  int _121;
  int _123;
  int _126;
  long unsigned int _130;
  long unsigned int _131;
  int _133;
  int _134;
  int _136;
  double _137;
  double _138;
  double _139;
  double _140;
  double _141;
  double _142;
  double _143;
  double _144;
  int iftmp.3_145;
  double _147;
  double _148;
  double _149;
  double _150;
  double _151;
  double _152;
  double _153;
  double _154;
  double _155;
  double _156;
  double _157;
  struct x264_t * _165;
  struct x264_ratecontrol_t * _166;
  double _167;
  int _168;
  long int _169;
  long int _170;
  long int _171;
  long int _172;
  int _175;
  int _176;
  int _177;
  struct x264_ratecontrol_t * _179;
  int _181;
  int _182;
  double _183;
  int _184;
  double _186;
  double _187;
  double _190;
  double _191;
  int _192;
  int _193;
  int iftmp.3_194;
  double _203;
  int _230;
  struct x264_zone_t * _232;
  int iftmp.3_233;
  unsigned int _237;
  int pretmp_255;
  int pretmp_256;
  int prephitmp_257;
  int pretmp_258;
  int prephitmp_259;
  struct x264_frame_t * prephitmp_261;
  struct x264_frame_t * pretmp_262;
  struct x264_frame_t * prephitmp_263;
  double pretmp_266;
  double prephitmp_267;
  struct x264_zone_t * pretmp_268;
  struct x264_param_t * pretmp_270;
  struct x264_param_t * prephitmp_271;
  struct x264_frame_t * pretmp_272;
  struct x264_frame_t * pretmp_273;
  struct x264_frame_t * pretmp_274;
  struct x264_frame_t * prephitmp_275;

  <bb 2>:
  rc_15 = h_14(D)->rc;
  # DEBUG rc => rc_15
  # DEBUG rce => 0B
  _16 = h_14(D)->fenc;
  _17 = _16->i_frame;
  # DEBUG D#1 => h_14(D)
  # DEBUG frame_num => _17
  # DEBUG h => D#1
  _77 = rc_15->i_zones;
  i_18 = _77 + -1;
  # DEBUG i => i_18
  # DEBUG i => i_18
  if (i_18 >= 0)
    goto <bb 3>;
  else
    goto <bb 66>;

  <bb 3>:
  pretmp_268 = rc_15->zones;

  <bb 4>:
  # i_211 = PHI <i_18(3), i_135(7)>
  # DEBUG i => i_211
  _130 = (long unsigned int) i_211;
  _131 = _130 * 32;
  z_132 = pretmp_268 + _131;
  # DEBUG z => z_132
  _133 = z_132->i_start;
  if (_17 >= _133)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  _134 = z_132->i_end;
  if (_17 <= _134)
    goto <bb 64>;
  else
    goto <bb 6>;

  <bb 6>:
  i_135 = i_211 + -1;
  # DEBUG i => i_135
  # DEBUG i => i_135
  if (i_135 >= 0)
    goto <bb 7>;
  else
    goto <bb 66>;

  <bb 7>:
  goto <bb 4>;

  <bb 8>:
  _21 = z_252->param;
  _22 = _20->param;
  if (_21 != _22)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # prephitmp_271 = PHI <pretmp_270(65), _21(8)>
  x264_encoder_reconfig (h_14(D), prephitmp_271);

  <bb 10>:
  # _232 = PHI <0B(66), z_252(8), z_252(9)>
  rc_15->prev_zone = _232;
  rc_15->qp_force = i_force_qp_26(D);
  _28 = h_14(D)->param.rc.b_stat_read;
  if (_28 != 0)
    goto <bb 11>;
  else
    goto <bb 17>;

  <bb 11>:
  _29 = h_14(D)->fenc;
  frame_30 = _29->i_frame;
  # DEBUG frame => frame_30
  if (frame_30 < 0)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:
  _31 = rc_15->num_entries;
  if (frame_30 >= _31)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  __assert_fail ("frame >= 0 && frame < rc->num_entries", "encoder/ratecontrol.c", 764, &__PRETTY_FUNCTION__);

  <bb 14>:
  _32 = h_14(D)->rc;
  _33 = _32->entry;
  _34 = (long unsigned int) frame_30;
  _35 = _34 * 72;
  rce_36 = _33 + _35;
  _32->rce = rce_36;
  # DEBUG rce => rce_36
  _38 = h_14(D)->sh.i_type;
  if (_38 == 1)
    goto <bb 15>;
  else
    goto <bb 17>;

  <bb 15>:
  _39 = h_14(D)->param.analyse.i_direct_mv_pred;
  if (_39 == 3)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  _40 = rce_36->direct_mode;
  _41 = _40 == 115;
  _42 = (int) _41;
  h_14(D)->sh.b_direct_spatial_mv_pred = _42;
  _44 = rce_36->direct_mode;
  _45 = (unsigned char) _44;
  _46 = _45 + 141;
  _47 = _46 <= 1;
  _48 = (int) _47;
  h_14(D)->mb.b_direct_auto_read = _48;

  <bb 17>:
  # rce_1 = PHI <0B(10), rce_36(14), rce_36(15), rce_36(16)>
  # DEBUG rce => rce_1
  _51 = rc_15->b_vbv;
  if (_51 != 0)
    goto <bb 19>;
  else
    goto <bb 18>;

  <bb 18>:
  pretmp_255 = h_14(D)->sh.i_type;
  goto <bb 30>;

  <bb 19>:
  _52 = h_14(D)->sps;
  _53 = _52->i_mb_height;
  _54 = (long unsigned int) _53;
  _55 = _54 * 4;
  _56 = h_14(D)->fdec;
  _57 = _56->i_row_bits;
  # DEBUG __dest => _57
  # DEBUG __ch => 0
  # DEBUG __len => _55
  __builtin_memset (_57, 0, _55);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  _58 = h_14(D)->sh.i_type;
  _59 = &rc_15->row_preds[_58];
  rc_15->row_pred = _59;
  # DEBUG h => h_14(D)
  rcc_164 = h_14(D)->rc;
  # DEBUG rcc => rcc_164
  _165 = h_14(D)->thread[0];
  _166 = _165->rc;
  _167 = _166->buffer_fill_final;
  rcc_164->buffer_fill = _167;
  _168 = h_14(D)->param.i_threads;
  if (_168 > 1)
    goto <bb 20>;
  else
    goto <bb 30>;

  <bb 20>:
  _169 = (long int) rcc_164;
  _170 = (long int) _166;
  _171 = _169 - _170;
  _172 = _171 /[ex] 608;
  j_173 = (int) _172;
  # DEBUG j => j_173
  # DEBUG i => 1
  # DEBUG i => 1

  <bb 21>:
  # i_221 = PHI <1(20), i_197(28)>
  # _230 = PHI <_168(20), _176(28)>
  # DEBUG i => i_221
  _175 = j_173 + i_221;
  _177 = _175 % _230;
  t_178 = h_14(D)->thread[_177];
  # DEBUG t => t_178
  # DEBUG D#125 => t_178->rc
  # DEBUG D#124 => D#125->frame_size_planned
  # DEBUG bits => D#124
  _181 = t_178->b_thread_active;
  if (_181 == 0)
    goto <bb 27>;
  else
    goto <bb 22>;

  <bb 22>:
  _179 = t_178->rc;
  bits_180 = _179->frame_size_planned;
  _182 = x264_ratecontrol_get_estimated_size (t_178);
  _183 = (double) _182;
  if (bits_180 <= _183)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  _184 = x264_ratecontrol_get_estimated_size (t_178);
  bits_185 = (double) _184;

  <bb 24>:
  # bits_188 = PHI <bits_180(22), bits_185(23)>
  # DEBUG bits => bits_188
  _186 = rcc_164->buffer_fill;
  _187 = rcc_164->buffer_rate;
  _154 = _186 + _187;
  _190 = _154 - bits_188;
  _191 = rcc_164->buffer_size;
  _193 = (int) _190;
  # DEBUG v => _193
  # DEBUG i_min => 0
  # DEBUG i_max => (int) _191
  if (_193 >= 0)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  _192 = (int) _191;
  iftmp.3_194 = MIN_EXPR <_192, _193>;
  pretmp_266 = (double) iftmp.3_194;

  <bb 26>:
  # prephitmp_267 = PHI <0.0(24), pretmp_266(25)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  rcc_164->buffer_fill = prephitmp_267;

  <bb 27>:
  i_197 = i_221 + 1;
  # DEBUG i => i_197
  # DEBUG i => i_197
  _176 = h_14(D)->param.i_threads;
  if (_176 > i_197)
    goto <bb 28>;
  else
    goto <bb 29>;

  <bb 28>:
  goto <bb 21>;

  <bb 29>:
  pretmp_256 = h_14(D)->sh.i_type;

  <bb 30>:
  # prephitmp_257 = PHI <pretmp_255(18), pretmp_256(29), _58(19)>
  if (prephitmp_257 != 1)
    goto <bb 32>;
  else
    goto <bb 31>;

  <bb 31>:
  if (i_force_qp_26(D) != 0)
    goto <bb 40>;
  else
    goto <bb 41>;

  <bb 32>:
  rc_15->bframes = 0;
  _113 = h_14(D)->frames.current[0];
  if (_113 != 0B)
    goto <bb 33>;
  else
    goto <bb 31>;

  <bb 33>:
  _136 = _113->i_type;
  _19 = (unsigned int) _136;
  _237 = _19 + 4294967292;
  if (_237 <= 1)
    goto <bb 34>;
  else
    goto <bb 31>;

  <bb 34>:

  <bb 35>:
  # _123 = PHI <0(34), _69(39)>
  _69 = _123 + 1;
  _65 = h_14(D)->frames.current[_69];
  if (_65 != 0B)
    goto <bb 37>;
  else
    goto <bb 36>;

  <bb 36>:
  # rc__bframes_lsm.475_242 = PHI <_69(35)>
  rc_15->bframes = rc__bframes_lsm.475_242;
  goto <bb 31>;

  <bb 37>:
  _66 = _65->i_type;
  _67 = (unsigned int) _66;
  _68 = _67 + 4294967292;
  if (_68 <= 1)
    goto <bb 39>;
  else
    goto <bb 38>;

  <bb 38>:
  # rc__bframes_lsm.475_241 = PHI <_69(37)>
  rc_15->bframes = rc__bframes_lsm.475_241;
  goto <bb 31>;

  <bb 39>:
  goto <bb 35>;

  <bb 40>:
  _71 = i_force_qp_26(D) + -1;
  q_72 = (float) _71;
  # DEBUG q => q_72
  pretmp_272 = h_14(D)->fdec;
  goto <bb 54>;

  <bb 41>:
  _73 = rc_15->b_abr;
  if (_73 != 0)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  _75 = rate_estimate_qscale (h_14(D));
  _76 = (double) _75;
  # DEBUG qscale => _76
  _137 = _76 * 1.1764705882352941568314008691231720149517059326171875e+0;
  _138 = log (_137);
  _139 = _138 * 8.656170245333779433849485940299928188323974609375e+0;
  _140 = _139 + 1.2e+1;
  # DEBUG qscale => NULL
  q_78 = (float) _140;
  # DEBUG q => q_78
  pretmp_273 = h_14(D)->fdec;
  goto <bb 54>;

  <bb 43>:
  _79 = rc_15->b_2pass;
  if (_79 != 0)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  _81 = rate_estimate_qscale (h_14(D));
  rce_1->new_qscale = _81;
  _83 = (double) _81;
  # DEBUG qscale => _83
  _141 = _83 * 1.1764705882352941568314008691231720149517059326171875e+0;
  _142 = log (_141);
  _143 = _142 * 8.656170245333779433849485940299928188323974609375e+0;
  _144 = _143 + 1.2e+1;
  # DEBUG qscale => NULL
  q_84 = (float) _144;
  # DEBUG q => q_84
  pretmp_274 = h_14(D)->fdec;
  goto <bb 54>;

  <bb 45>:
  if (prephitmp_257 == 1)
    goto <bb 46>;
  else
    goto <bb 48>;

  <bb 46>:
  _85 = h_14(D)->fdec;
  _86 = _85->b_kept_as_ref;
  if (_86 != 0)
    goto <bb 47>;
  else
    goto <bb 49>;

  <bb 47>:
  _87 = rc_15->qp_constant[1];
  _88 = rc_15->qp_constant[0];
  _89 = _87 + _88;
  _90 = _89 / 2;
  q_91 = (float) _90;
  # DEBUG q => q_91
  goto <bb 50>;

  <bb 48>:
  pretmp_262 = h_14(D)->fdec;

  <bb 49>:
  # prephitmp_263 = PHI <pretmp_262(48), _85(46)>
  _92 = rc_15->qp_constant[prephitmp_257];
  q_93 = (float) _92;
  # DEBUG q => q_93

  <bb 50>:
  # q_2 = PHI <q_91(47), q_93(49)>
  # prephitmp_261 = PHI <_85(47), prephitmp_263(49)>
  # DEBUG q => q_2
  if (_232 != 0B)
    goto <bb 51>;
  else
    goto <bb 54>;

  <bb 51>:
  _94 = _232->b_force_qp;
  if (_94 != 0)
    goto <bb 52>;
  else
    goto <bb 53>;

  <bb 52>:
  _95 = _232->i_qp;
  _96 = rc_15->qp_constant[0];
  _97 = _95 - _96;
  _98 = (float) _97;
  q_99 = q_2 + _98;
  # DEBUG q => q_99
  goto <bb 54>;

  <bb 53>:
  _100 = (double) q_2;
  _101 = _232->f_bitrate_factor;
  _102 = (double) _101;
  _103 = log (_102);
  _104 = _103 * 8.656170245333779433849485940299928188323974609375e+0;
  _105 = _100 - _104;
  q_106 = (float) _105;
  # DEBUG q => q_106

  <bb 54>:
  # q_3 = PHI <q_72(40), q_78(42), q_84(44), q_2(50), q_99(52), q_106(53)>
  # prephitmp_275 = PHI <pretmp_272(40), pretmp_273(42), pretmp_274(44), prephitmp_261(50), prephitmp_261(52), prephitmp_261(53)>
  # DEBUG q => q_3
  rc_15->qpa_aq = 0.0;
  rc_15->qpa_rc = 0.0;
  _110 = (double) q_3;
  _111 = _110 + 5.0e-1;
  _112 = (int) _111;
  # DEBUG v => _112
  # DEBUG i_min => 0
  # DEBUG i_max => 51
  iftmp.3_145 = MIN_EXPR <_112, 51>;
  iftmp.3_233 = MAX_EXPR <iftmp.3_145, 0>;
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  rc_15->qp = iftmp.3_233;
  rc_15->qpm = iftmp.3_233;
  _116 = (float) iftmp.3_233;
  prephitmp_275->f_qp_avg_aq = _116;
  prephitmp_275->f_qp_avg_rc = _116;
  rc_15->f_qpm = q_3;
  if (rce_1 != 0B)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 55>:
  rce_1->new_qp = iftmp.3_233;

  <bb 56>:
  _121 = h_14(D)->param.i_threads;
  if (_121 > 1)
    goto <bb 58>;
  else
    goto <bb 57>;

  <bb 57>:
  pretmp_258 = MEM[(int *)h_14(D) + 4344B];
  goto <bb 61>;

  <bb 58>:
  _126 = MEM[(int *)h_14(D) + 4344B];
  # DEBUG D#2 => h_14(D)
  rc_127 = MEM[(struct x264_ratecontrol_t * *)h_14(D) + 20896B];
  # DEBUG D#2 => h_14(D)
  # DEBUG qp => _116
  # DEBUG h => D#2
  # DEBUG h => D#2
  # DEBUG rc => rc_127
  _147 = rc_127->accum_p_qp;
  _148 = _147 * 9.499999999999999555910790149937383830547332763671875e-1;
  rc_127->accum_p_qp = _148;
  _149 = rc_127->accum_p_norm;
  _150 = _149 * 9.499999999999999555910790149937383830547332763671875e-1;
  _151 = _150 + 1.0e+0;
  rc_127->accum_p_norm = _151;
  if (_126 == 2)
    goto <bb 59>;
  else
    goto <bb 60>;

  <bb 59>:
  _152 = (double) _116;
  _153 = rc_127->ip_offset;
  _203 = _148 + _153;
  _155 = _152 + _203;
  rc_127->accum_p_qp = _155;
  goto <bb 61>;

  <bb 60>:
  _156 = (double) _116;
  _157 = _148 + _156;
  rc_127->accum_p_qp = _157;

  <bb 61>:
  # prephitmp_259 = PHI <pretmp_258(57), _126(60), _126(59)>
  if (prephitmp_259 != 1)
    goto <bb 62>;
  else
    goto <bb 63>;

  <bb 62>:
  rc_15->last_non_b_pict_type = prephitmp_259;

  <bb 63>:
  return;

  <bb 64>:
  # z_252 = PHI <z_132(5)>
  # DEBUG frame_num => NULL
  # DEBUG i => NULL
  # DEBUG z => NULL
  # DEBUG zone => NULL
  x264_emms ();
  # DEBUG frame_num => NULL
  # DEBUG i => NULL
  # DEBUG z => NULL
  # DEBUG zone => NULL
  _20 = rc_15->prev_zone;
  if (_20 == 0B)
    goto <bb 65>;
  else
    goto <bb 8>;

  <bb 65>:
  pretmp_270 = z_252->param;
  goto <bb 9>;

  <bb 66>:
  # DEBUG frame_num => NULL
  # DEBUG i => NULL
  # DEBUG z => NULL
  # DEBUG zone => NULL
  x264_emms ();
  goto <bb 10>;

}



;; Function x264_ratecontrol_mb (x264_ratecontrol_mb, funcdef_no=131, decl_uid=6371, cgraph_uid=131, symbol_order=174)


Analyzing loop at encoder/ratecontrol.c:864
encoder/ratecontrol.c:864:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:864:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:864:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [1, + , 1](no_overflow) <= y_16
  bounds on difference of bases: -1 ... 2147483646
Applying pattern match.pd:49, generic-match.c:3223
  result:
    # of iterations (unsigned int) y_16, bounded by 2147483647
encoder/ratecontrol.c:864:5: note: Symbolic number of iterations is (unsigned int) y_16 + 1
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_refs ===
Creating dr for *_58
analyze_innermost: success.
	base_address: _19
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *_19
	Access function 0: {0B, +, 4}_4
encoder/ratecontrol.c:864:5: note: got vectype for stmt: _152 = *_58;
vector(4) int
encoder/ratecontrol.c:864:5: note: === vect_analyze_scalar_cycles ===
encoder/ratecontrol.c:864:5: note: Analyze phi: i_212 = PHI <0(14), i_164(16)>

encoder/ratecontrol.c:864:5: note: Access function of PHI: {0, +, 1}_4
encoder/ratecontrol.c:864:5: note: step: 1,  init: 0
encoder/ratecontrol.c:864:5: note: Detected induction.
encoder/ratecontrol.c:864:5: note: Analyze phi: bits_215 = PHI <0.0(14), bits_163(16)>

encoder/ratecontrol.c:864:5: note: Access function of PHI: {0.0, +, _161}_4
encoder/ratecontrol.c:864:5: note: step: _161,  init: 0.0
encoder/ratecontrol.c:864:5: note: step unknown.
encoder/ratecontrol.c:864:5: note: Analyze phi: bits_215 = PHI <0.0(14), bits_163(16)>

encoder/ratecontrol.c:864:5: note: detected reduction: bits_163 = _161 + bits_215;

encoder/ratecontrol.c:864:5: note: Detected reduction.
encoder/ratecontrol.c:864:5: note: === vect_pattern_recog ===
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _85
encoder/ratecontrol.c:864:5: note: def_stmt: _85 = (long unsigned int) i_212;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand i_212
encoder/ratecontrol.c:864:5: note: def_stmt: i_212 = PHI <0(14), i_164(16)>
encoder/ratecontrol.c:864:5: note: type of def: 4.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand 4
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _161
encoder/ratecontrol.c:864:5: note: def_stmt: _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _161
encoder/ratecontrol.c:864:5: note: def_stmt: _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _161
encoder/ratecontrol.c:864:5: note: def_stmt: _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_ref_accesses ===
encoder/ratecontrol.c:864:5: note: === vect_mark_stmts_to_be_vectorized ===
encoder/ratecontrol.c:864:5: note: init: phi relevant? i_212 = PHI <0(14), i_164(16)>
encoder/ratecontrol.c:864:5: note: init: phi relevant? bits_215 = PHI <0.0(14), bits_163(16)>
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG bits => bits_215
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG i => i_212
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _85 = (long unsigned int) i_212;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _71 = _85 * 4;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _58 = _19 + _71;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _152 = *_58;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? bits_163 = _161 + bits_215;
encoder/ratecontrol.c:864:5: note: vec_stmt_relevant_p: used out of loop.
encoder/ratecontrol.c:864:5: note: mark relevant 0, live 1.
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG bits => bits_163
encoder/ratecontrol.c:864:5: note: init: stmt relevant? i_164 = i_212 + 1;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG i => i_164
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG bits => bits_163
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG i => i_164
encoder/ratecontrol.c:864:5: note: init: stmt relevant? if (y_16 >= i_164)
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: bits_163 = _161 + bits_215;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _161
encoder/ratecontrol.c:864:5: note: def_stmt: _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: mark relevant 3, live 0.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_215
encoder/ratecontrol.c:864:5: note: def_stmt: bits_215 = PHI <0.0(14), bits_163(16)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: mark relevant 3, live 0.
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: bits_215 = PHI <0.0(14), bits_163(16)>
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand 0.0
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_163
encoder/ratecontrol.c:864:5: note: def_stmt: bits_163 = _161 + bits_215;
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: reduc-stmt defining reduc-phi in the same nest.
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _152
encoder/ratecontrol.c:864:5: note: def_stmt: _152 = *_58;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: mark relevant 3, live 0.
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: _152 = *_58;
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _152 = *_58;
  stmt_b: _152 = *_58;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_4)
  (chrec_b = {0B, +, 4}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/ratecontrol.c:864:5: note: === vect_determine_vectorization_factor ===
encoder/ratecontrol.c:864:5: note: ==> examining phi: i_212 = PHI <0(14), i_164(16)>

encoder/ratecontrol.c:864:5: note: ==> examining phi: bits_215 = PHI <0.0(14), bits_163(16)>

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: nunits = 2
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_215

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_212

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _85 = (long unsigned int) i_212;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _71 = _85 * 4;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _58 = _19 + _71;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _152 = *_58;

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  int
encoder/ratecontrol.c:864:5: note: vectype: vector(4) int
encoder/ratecontrol.c:864:5: note: nunits = 4
encoder/ratecontrol.c:864:5: note: ==> examining statement: _161 = (double) _152;

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  int
encoder/ratecontrol.c:864:5: note: vectype: vector(4) int
encoder/ratecontrol.c:864:5: note: nunits = 4
encoder/ratecontrol.c:864:5: note: ==> examining statement: bits_163 = _161 + bits_215;

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: nunits = 2
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_163

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: i_164 = i_212 + 1;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_164

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_163

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_164

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: if (y_16 >= i_164)

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: vectorization factor = 4
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_refs_alignment ===
encoder/ratecontrol.c:864:5: note: vect_compute_data_ref_alignment:
encoder/ratecontrol.c:864:5: note: can't force alignment of ref: *_58
encoder/ratecontrol.c:864:5: note: === vect_prune_runtime_alias_test_list ===
encoder/ratecontrol.c:864:5: note: === vect_enhance_data_refs_alignment ===
encoder/ratecontrol.c:864:5: note: Unknown misalignment, is_packed = 0
encoder/ratecontrol.c:864:5: note: vect_can_advance_ivs_p:
encoder/ratecontrol.c:864:5: note: Analyze phi: i_212 = PHI <0(14), i_164(16)>

encoder/ratecontrol.c:864:5: note: Analyze phi: bits_215 = PHI <0.0(14), bits_163(16)>

encoder/ratecontrol.c:864:5: note: reduc phi. skip.
encoder/ratecontrol.c:864:5: note: Disable peeling, max peels reached: 3
encoder/ratecontrol.c:864:5: note: Vectorizing an unaligned access.
encoder/ratecontrol.c:864:5: note: === vect_analyze_slp ===
encoder/ratecontrol.c:864:5: note: === vect_make_slp_decision ===
encoder/ratecontrol.c:864:5: note: === vect_detect_hybrid_slp ===
encoder/ratecontrol.c:864:5: note: === vect_analyze_loop_operations ===
encoder/ratecontrol.c:864:5: note: examining phi: i_212 = PHI <0(14), i_164(16)>

encoder/ratecontrol.c:864:5: note: examining phi: bits_215 = PHI <0.0(14), bits_163(16)>

encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_215
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_212
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _85 = (long unsigned int) i_212;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _71 = _85 * 4;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _58 = _19 + _71;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _152 = *_58;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand *_58
encoder/ratecontrol.c:864:5: note: not ssa-name.
encoder/ratecontrol.c:864:5: note: use not simple.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand *_58
encoder/ratecontrol.c:864:5: note: not ssa-name.
encoder/ratecontrol.c:864:5: note: use not simple.
encoder/ratecontrol.c:864:5: note: vect_model_load_cost: unaligned supported by hardware.
encoder/ratecontrol.c:864:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
encoder/ratecontrol.c:864:5: note: ==> examining statement: _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _152
encoder/ratecontrol.c:864:5: note: def_stmt: _152 = *_58;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: === vectorizable_conversion ===
encoder/ratecontrol.c:864:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
encoder/ratecontrol.c:864:5: note: ==> examining statement: bits_163 = _161 + bits_215;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _161
encoder/ratecontrol.c:864:5: note: def_stmt: _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_215
encoder/ratecontrol.c:864:5: note: def_stmt: bits_215 = PHI <0.0(14), bits_163(16)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: detected reduction: bits_163 = _161 + bits_215;

encoder/ratecontrol.c:864:5: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 2, prologue_cost = 1, epilogue_cost = 3 .
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_163
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: i_164 = i_212 + 1;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_164
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_163
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_164
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: if (y_16 >= i_164)
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: === vect_update_slp_costs_according_to_vf ===
encoder/ratecontrol.c:864:5: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
encoder/ratecontrol.c:864:5: note: Cost model analysis: 
  Vector inside of loop cost: 5
  Vector prologue cost: 7
  Vector epilogue cost: 9
  Scalar iteration cost: 3
  Scalar outside cost: 6
  Vector outside cost: 16
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 5
encoder/ratecontrol.c:864:5: note:   Runtime profitability threshold = 4
encoder/ratecontrol.c:864:5: note:   Static estimate profitability threshold = 4
encoder/ratecontrol.c:864:5: note: epilog loop required
encoder/ratecontrol.c:864:5: note: vect_can_advance_ivs_p:
encoder/ratecontrol.c:864:5: note: Analyze phi: i_212 = PHI <0(14), i_164(16)>

encoder/ratecontrol.c:864:5: note: Analyze phi: bits_215 = PHI <0.0(14), bits_163(16)>

encoder/ratecontrol.c:864:5: note: reduc phi. skip.
encoder/ratecontrol.c:864:5: note: loop vectorized
encoder/ratecontrol.c:864:5: note: === vec_transform_loop ===
encoder/ratecontrol.c:864:5: note: Profitability threshold is 4 loop iterations.
encoder/ratecontrol.c:864:5: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 64
basic block 64, loop depth 0
 pred:       14
 succ:      


;; Scaling loop 4 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 3
;; Scaling loop 6 with scale 0.777800, bounding iterations to 4 from guessed 13
;; guessed iterations are now 4
encoder/ratecontrol.c:864:5: note: vect_update_ivs_after_vectorizer: phi: i_212 = PHI <0(68), i_164(16)>

Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
encoder/ratecontrol.c:864:5: note: vect_update_ivs_after_vectorizer: phi: bits_215 = PHI <0.0(68), bits_163(16)>

encoder/ratecontrol.c:864:5: note: reduc phi. skip.
Setting upper bound of nb iterations for epilogue loop to 3
encoder/ratecontrol.c:864:5: note: ------>vectorizing phi: i_212 = PHI <0(72), i_164(16)>

encoder/ratecontrol.c:864:5: note: ------>vectorizing phi: bits_215 = PHI <0.0(72), bits_163(16)>

encoder/ratecontrol.c:864:5: note: multiple-types.
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG bits => bits_215

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG i => i_212

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _85 = (long unsigned int) i_212;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _71 = _85 * 4;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _58 = _19 + _71;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _152 = *_58;

encoder/ratecontrol.c:864:5: note: transform statement.
encoder/ratecontrol.c:864:5: note: transform load. ncopies = 1
encoder/ratecontrol.c:864:5: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *_19
Applying pattern match.pd:49, generic-match.c:4015
encoder/ratecontrol.c:864:5: note: created vectp.505_1
encoder/ratecontrol.c:864:5: note: add new stmt: vect__152.506_246 = MEM[(int *)vectp.504_248];
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _161 = (double) _152;

encoder/ratecontrol.c:864:5: note: multiple-types.
encoder/ratecontrol.c:864:5: note: transform statement.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _152
encoder/ratecontrol.c:864:5: note: def_stmt: _152 = *_58;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: transform conversion. ncopies = 1.
encoder/ratecontrol.c:864:5: note: vect_get_vec_def_for_operand: _152
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _152
encoder/ratecontrol.c:864:5: note: def_stmt: _152 = *_58;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: def =  _152
  def_stmt =  _152 = *_58;
encoder/ratecontrol.c:864:5: note: add new stmt: vect__161.507_241 = [vec_unpack_float_lo_expr] vect__152.506_246;
encoder/ratecontrol.c:864:5: note: add new stmt: vect__161.507_240 = [vec_unpack_float_hi_expr] vect__152.506_246;
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: bits_163 = _161 + bits_215;

encoder/ratecontrol.c:864:5: note: multiple-types.
encoder/ratecontrol.c:864:5: note: transform statement.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _161
encoder/ratecontrol.c:864:5: note: def_stmt: _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_215
encoder/ratecontrol.c:864:5: note: def_stmt: bits_215 = PHI <0.0(72), bits_163(16)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: detected reduction: bits_163 = _161 + bits_215;

encoder/ratecontrol.c:864:5: note: reduc op not supported by target.
encoder/ratecontrol.c:864:5: note: transform reduction.
encoder/ratecontrol.c:864:5: note: vect_get_vec_def_for_operand: _161
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _161
encoder/ratecontrol.c:864:5: note: def_stmt: _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: def =  _161
  def_stmt =  _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: add new stmt: vect_bits_163.508_98 = vect__161.507_241 + vect_bits_163.508_239;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _161
encoder/ratecontrol.c:864:5: note: def_stmt: _161 = (double) _152;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: add new stmt: vect_bits_163.508_99 = vect__161.507_240 + vect_bits_163.508_98;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand 0.0
encoder/ratecontrol.c:864:5: note: vect_get_vec_def_for_operand: bits_215
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_215
encoder/ratecontrol.c:864:5: note: def_stmt: bits_215 = PHI <0.0(72), bits_163(16)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: def =  bits_215
  def_stmt =  bits_215 = PHI <0.0(72), bits_163(16)>
encoder/ratecontrol.c:864:5: note: transform reduction: created def-use cycle: vect_bits_163.508_239 = PHI <{ 0.0, 0.0 }(72), vect_bits_163.508_99(16)>

vect_bits_163.508_99 = vect__161.507_240 + vect_bits_163.508_98;

encoder/ratecontrol.c:864:5: note: Reduce using vector shifts
encoder/ratecontrol.c:864:5: note: extract scalar result
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG bits => bits_163

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: i_164 = i_212 + 1;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG i => i_164

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG bits => bits_163

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG i => i_164

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: vectp.504_247 = vectp.504_248 + 16;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: if (y_16 >= i_164)


loop at encoder/ratecontrol.c:865: if (ivtmp_249 < bnd.501_223)

;; Scaling loop 4 with scale 0.250000, bounding iterations to 2 from guessed 3
;; guessed iterations are now 1
encoder/ratecontrol.c:864:5: note: LOOP VECTORIZED


Analyzing loop at encoder/ratecontrol.c:958
encoder/ratecontrol.c:958:28: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:958:28: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:958:28: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:958:28: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:952
encoder/ratecontrol.c:952:25: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:952:25: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:952:25: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:952:25: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:941
encoder/ratecontrol.c:941:27: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:941:27: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:941:27: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:941:27: note: bad loop form.

Analyzing loop at encoder/ratecontrol.c:864
encoder/ratecontrol.c:864:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:864:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:864:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [1, + , 1](no_overflow) <= y_16
  bounds on difference of bases: -1 ... 2147483646
Applying pattern match.pd:49, generic-match.c:3223
  result:
    # of iterations (unsigned int) y_16, bounded by 2147483647
encoder/ratecontrol.c:864:5: note: Symbolic number of iterations is (unsigned int) y_16 + 1
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_refs ===
Creating dr for *_172
analyze_innermost: success.
	base_address: _19
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 128
	base_object: *_19
	Access function 0: {0B, +, 4}_5
encoder/ratecontrol.c:864:5: note: got vectype for stmt: _173 = *_172;
vector(4) int
encoder/ratecontrol.c:864:5: note: === vect_analyze_scalar_cycles ===
encoder/ratecontrol.c:864:5: note: Analyze phi: i_217 = PHI <0(25), i_177(28)>

encoder/ratecontrol.c:864:5: note: Access function of PHI: {0, +, 1}_5
encoder/ratecontrol.c:864:5: note: step: 1,  init: 0
encoder/ratecontrol.c:864:5: note: Detected induction.
encoder/ratecontrol.c:864:5: note: Analyze phi: bits_218 = PHI <0.0(25), bits_176(28)>

encoder/ratecontrol.c:864:5: note: Access function of PHI: {0.0, +, _174}_5
encoder/ratecontrol.c:864:5: note: step: _174,  init: 0.0
encoder/ratecontrol.c:864:5: note: step unknown.
encoder/ratecontrol.c:864:5: note: Analyze phi: bits_218 = PHI <0.0(25), bits_176(28)>

encoder/ratecontrol.c:864:5: note: detected reduction: bits_176 = _174 + bits_218;

encoder/ratecontrol.c:864:5: note: Detected reduction.
encoder/ratecontrol.c:864:5: note: === vect_pattern_recog ===
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _170
encoder/ratecontrol.c:864:5: note: def_stmt: _170 = (long unsigned int) i_217;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand i_217
encoder/ratecontrol.c:864:5: note: def_stmt: i_217 = PHI <0(25), i_177(28)>
encoder/ratecontrol.c:864:5: note: type of def: 4.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand 4
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _174
encoder/ratecontrol.c:864:5: note: def_stmt: _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _174
encoder/ratecontrol.c:864:5: note: def_stmt: _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _174
encoder/ratecontrol.c:864:5: note: def_stmt: _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_ref_accesses ===
encoder/ratecontrol.c:864:5: note: === vect_mark_stmts_to_be_vectorized ===
encoder/ratecontrol.c:864:5: note: init: phi relevant? i_217 = PHI <0(25), i_177(28)>
encoder/ratecontrol.c:864:5: note: init: phi relevant? bits_218 = PHI <0.0(25), bits_176(28)>
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG bits => bits_218
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG i => i_217
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _170 = (long unsigned int) i_217;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _171 = _170 * 4;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _172 = _19 + _171;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _173 = *_172;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? bits_176 = _174 + bits_218;
encoder/ratecontrol.c:864:5: note: vec_stmt_relevant_p: used out of loop.
encoder/ratecontrol.c:864:5: note: mark relevant 0, live 1.
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG bits => bits_176
encoder/ratecontrol.c:864:5: note: init: stmt relevant? i_177 = i_217 + 1;
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG i => i_177
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG bits => bits_176
encoder/ratecontrol.c:864:5: note: init: stmt relevant? # DEBUG i => i_177
encoder/ratecontrol.c:864:5: note: init: stmt relevant? if (y_16 >= i_177)
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: bits_176 = _174 + bits_218;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _174
encoder/ratecontrol.c:864:5: note: def_stmt: _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: mark relevant 3, live 0.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_218
encoder/ratecontrol.c:864:5: note: def_stmt: bits_218 = PHI <0.0(25), bits_176(28)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: mark relevant 3, live 0.
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: bits_218 = PHI <0.0(25), bits_176(28)>
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand 0.0
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_176
encoder/ratecontrol.c:864:5: note: def_stmt: bits_176 = _174 + bits_218;
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: reduc-stmt defining reduc-phi in the same nest.
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _173
encoder/ratecontrol.c:864:5: note: def_stmt: _173 = *_172;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: mark relevant 3, live 0.
encoder/ratecontrol.c:864:5: note: worklist: examine stmt: _173 = *_172;
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _173 = *_172;
  stmt_b: _173 = *_172;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_5)
  (chrec_b = {0B, +, 4}_5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
encoder/ratecontrol.c:864:5: note: === vect_determine_vectorization_factor ===
encoder/ratecontrol.c:864:5: note: ==> examining phi: i_217 = PHI <0(25), i_177(28)>

encoder/ratecontrol.c:864:5: note: ==> examining phi: bits_218 = PHI <0.0(25), bits_176(28)>

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: nunits = 2
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_218

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_217

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _170 = (long unsigned int) i_217;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _171 = _170 * 4;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _172 = _19 + _171;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _173 = *_172;

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  int
encoder/ratecontrol.c:864:5: note: vectype: vector(4) int
encoder/ratecontrol.c:864:5: note: nunits = 4
encoder/ratecontrol.c:864:5: note: ==> examining statement: _174 = (double) _173;

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  int
encoder/ratecontrol.c:864:5: note: vectype: vector(4) int
encoder/ratecontrol.c:864:5: note: nunits = 4
encoder/ratecontrol.c:864:5: note: ==> examining statement: bits_176 = _174 + bits_218;

encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: get vectype for scalar type:  double
encoder/ratecontrol.c:864:5: note: vectype: vector(2) double
encoder/ratecontrol.c:864:5: note: nunits = 2
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_176

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: i_177 = i_217 + 1;

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_177

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_176

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_177

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: ==> examining statement: if (y_16 >= i_177)

encoder/ratecontrol.c:864:5: note: skip.
encoder/ratecontrol.c:864:5: note: vectorization factor = 4
encoder/ratecontrol.c:864:5: note: === vect_analyze_data_refs_alignment ===
encoder/ratecontrol.c:864:5: note: vect_compute_data_ref_alignment:
encoder/ratecontrol.c:864:5: note: can't force alignment of ref: *_172
encoder/ratecontrol.c:864:5: note: === vect_prune_runtime_alias_test_list ===
encoder/ratecontrol.c:864:5: note: === vect_enhance_data_refs_alignment ===
encoder/ratecontrol.c:864:5: note: Unknown misalignment, is_packed = 0
encoder/ratecontrol.c:864:5: note: vect_can_advance_ivs_p:
encoder/ratecontrol.c:864:5: note: Analyze phi: i_217 = PHI <0(25), i_177(28)>

encoder/ratecontrol.c:864:5: note: Analyze phi: bits_218 = PHI <0.0(25), bits_176(28)>

encoder/ratecontrol.c:864:5: note: reduc phi. skip.
encoder/ratecontrol.c:864:5: note: Disable peeling, max peels reached: 3
encoder/ratecontrol.c:864:5: note: Vectorizing an unaligned access.
encoder/ratecontrol.c:864:5: note: === vect_analyze_slp ===
encoder/ratecontrol.c:864:5: note: === vect_make_slp_decision ===
encoder/ratecontrol.c:864:5: note: === vect_detect_hybrid_slp ===
encoder/ratecontrol.c:864:5: note: === vect_analyze_loop_operations ===
encoder/ratecontrol.c:864:5: note: examining phi: i_217 = PHI <0(25), i_177(28)>

encoder/ratecontrol.c:864:5: note: examining phi: bits_218 = PHI <0.0(25), bits_176(28)>

encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_218
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_217
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _170 = (long unsigned int) i_217;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _171 = _170 * 4;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _172 = _19 + _171;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: _173 = *_172;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand *_172
encoder/ratecontrol.c:864:5: note: not ssa-name.
encoder/ratecontrol.c:864:5: note: use not simple.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand *_172
encoder/ratecontrol.c:864:5: note: not ssa-name.
encoder/ratecontrol.c:864:5: note: use not simple.
encoder/ratecontrol.c:864:5: note: vect_model_load_cost: unaligned supported by hardware.
encoder/ratecontrol.c:864:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
encoder/ratecontrol.c:864:5: note: ==> examining statement: _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _173
encoder/ratecontrol.c:864:5: note: def_stmt: _173 = *_172;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: === vectorizable_conversion ===
encoder/ratecontrol.c:864:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
encoder/ratecontrol.c:864:5: note: ==> examining statement: bits_176 = _174 + bits_218;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _174
encoder/ratecontrol.c:864:5: note: def_stmt: _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_218
encoder/ratecontrol.c:864:5: note: def_stmt: bits_218 = PHI <0.0(25), bits_176(28)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: detected reduction: bits_176 = _174 + bits_218;

encoder/ratecontrol.c:864:5: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 2, prologue_cost = 1, epilogue_cost = 3 .
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_176
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: i_177 = i_217 + 1;
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_177
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG bits => bits_176
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: # DEBUG i => i_177
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: ==> examining statement: if (y_16 >= i_177)
encoder/ratecontrol.c:864:5: note: irrelevant.
encoder/ratecontrol.c:864:5: note: === vect_update_slp_costs_according_to_vf ===
encoder/ratecontrol.c:864:5: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
encoder/ratecontrol.c:864:5: note: Cost model analysis: 
  Vector inside of loop cost: 5
  Vector prologue cost: 7
  Vector epilogue cost: 9
  Scalar iteration cost: 3
  Scalar outside cost: 6
  Vector outside cost: 16
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 5
encoder/ratecontrol.c:864:5: note:   Runtime profitability threshold = 4
encoder/ratecontrol.c:864:5: note:   Static estimate profitability threshold = 4
encoder/ratecontrol.c:864:5: note: epilog loop required
encoder/ratecontrol.c:864:5: note: vect_can_advance_ivs_p:
encoder/ratecontrol.c:864:5: note: Analyze phi: i_217 = PHI <0(25), i_177(28)>

encoder/ratecontrol.c:864:5: note: Analyze phi: bits_218 = PHI <0.0(25), bits_176(28)>

encoder/ratecontrol.c:864:5: note: reduc phi. skip.
encoder/ratecontrol.c:864:5: note: loop vectorized
encoder/ratecontrol.c:864:5: note: === vec_transform_loop ===
encoder/ratecontrol.c:864:5: note: Profitability threshold is 4 loop iterations.
encoder/ratecontrol.c:864:5: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 73
basic block 73, loop depth 0
 pred:       25
 succ:      


;; Scaling loop 5 with scale 0.666600, bounding iterations to 4 from guessed 16
;; guessed iterations are now 4
;; Scaling loop 7 with scale 0.777800, bounding iterations to 4 from guessed 14
;; guessed iterations are now 3
encoder/ratecontrol.c:864:5: note: vect_update_ivs_after_vectorizer: phi: i_217 = PHI <0(77), i_177(28)>

Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
encoder/ratecontrol.c:864:5: note: vect_update_ivs_after_vectorizer: phi: bits_218 = PHI <0.0(77), bits_176(28)>

encoder/ratecontrol.c:864:5: note: reduc phi. skip.
Setting upper bound of nb iterations for epilogue loop to 3
encoder/ratecontrol.c:864:5: note: ------>vectorizing phi: i_217 = PHI <0(81), i_177(28)>

encoder/ratecontrol.c:864:5: note: ------>vectorizing phi: bits_218 = PHI <0.0(81), bits_176(28)>

encoder/ratecontrol.c:864:5: note: multiple-types.
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG bits => bits_218

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG i => i_217

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _170 = (long unsigned int) i_217;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _171 = _170 * 4;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _172 = _19 + _171;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _173 = *_172;

encoder/ratecontrol.c:864:5: note: transform statement.
encoder/ratecontrol.c:864:5: note: transform load. ncopies = 1
encoder/ratecontrol.c:864:5: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *_19
Applying pattern match.pd:49, generic-match.c:4015
encoder/ratecontrol.c:864:5: note: created vectp.517_273
encoder/ratecontrol.c:864:5: note: add new stmt: vect__173.518_276 = MEM[(int *)vectp.516_274];
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: _174 = (double) _173;

encoder/ratecontrol.c:864:5: note: multiple-types.
encoder/ratecontrol.c:864:5: note: transform statement.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _173
encoder/ratecontrol.c:864:5: note: def_stmt: _173 = *_172;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: transform conversion. ncopies = 1.
encoder/ratecontrol.c:864:5: note: vect_get_vec_def_for_operand: _173
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _173
encoder/ratecontrol.c:864:5: note: def_stmt: _173 = *_172;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: def =  _173
  def_stmt =  _173 = *_172;
encoder/ratecontrol.c:864:5: note: add new stmt: vect__174.519_277 = [vec_unpack_float_lo_expr] vect__173.518_276;
encoder/ratecontrol.c:864:5: note: add new stmt: vect__174.519_278 = [vec_unpack_float_hi_expr] vect__173.518_276;
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: bits_176 = _174 + bits_218;

encoder/ratecontrol.c:864:5: note: multiple-types.
encoder/ratecontrol.c:864:5: note: transform statement.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _174
encoder/ratecontrol.c:864:5: note: def_stmt: _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_218
encoder/ratecontrol.c:864:5: note: def_stmt: bits_218 = PHI <0.0(81), bits_176(28)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: detected reduction: bits_176 = _174 + bits_218;

encoder/ratecontrol.c:864:5: note: reduc op not supported by target.
encoder/ratecontrol.c:864:5: note: transform reduction.
encoder/ratecontrol.c:864:5: note: vect_get_vec_def_for_operand: _174
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _174
encoder/ratecontrol.c:864:5: note: def_stmt: _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: def =  _174
  def_stmt =  _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: add new stmt: vect_bits_176.520_280 = vect__174.519_277 + vect_bits_176.520_279;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand _174
encoder/ratecontrol.c:864:5: note: def_stmt: _174 = (double) _173;
encoder/ratecontrol.c:864:5: note: type of def: 3.
encoder/ratecontrol.c:864:5: note: add new stmt: vect_bits_176.520_281 = vect__174.519_278 + vect_bits_176.520_280;
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand 0.0
encoder/ratecontrol.c:864:5: note: vect_get_vec_def_for_operand: bits_218
encoder/ratecontrol.c:864:5: note: vect_is_simple_use: operand bits_218
encoder/ratecontrol.c:864:5: note: def_stmt: bits_218 = PHI <0.0(81), bits_176(28)>
encoder/ratecontrol.c:864:5: note: type of def: 5.
encoder/ratecontrol.c:864:5: note: def =  bits_218
  def_stmt =  bits_218 = PHI <0.0(81), bits_176(28)>
encoder/ratecontrol.c:864:5: note: transform reduction: created def-use cycle: vect_bits_176.520_279 = PHI <{ 0.0, 0.0 }(81), vect_bits_176.520_281(28)>

vect_bits_176.520_281 = vect__174.519_278 + vect_bits_176.520_280;

encoder/ratecontrol.c:864:5: note: Reduce using vector shifts
encoder/ratecontrol.c:864:5: note: extract scalar result
encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG bits => bits_176

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: i_177 = i_217 + 1;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG i => i_177

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG bits => bits_176

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: # DEBUG i => i_177

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: vectp.516_275 = vectp.516_274 + 16;

encoder/ratecontrol.c:864:5: note: ------>vectorizing statement: if (y_16 >= i_177)


loop at encoder/ratecontrol.c:865: if (ivtmp_288 < bnd.513_252)

;; Scaling loop 5 with scale 0.250000, bounding iterations to 2 from guessed 4
;; guessed iterations are now 1
encoder/ratecontrol.c:864:5: note: LOOP VECTORIZED

encoder/ratecontrol.c:879:6: note: vectorized 2 loops in function.
Merging blocks 14 and 68
Merging blocks 25 and 77
Merging blocks 70 and 17
Merging blocks 79 and 27
x264_ratecontrol_mb (struct x264_t * h, int bits)
{
  double vect_bits_176.523;
  vector(2) double vect_bits_176.522;
  double stmp_bits_176.521;
  vector(2) double vect_bits_176.520;
  vector(2) double vect__174.519;
  vector(4) int vect__173.518;
  vector(4) int * vectp.517;
  vector(4) int * vectp.516;
  int tmp.515;
  unsigned int ratio_mult_vf.514;
  unsigned int bnd.513;
  unsigned int niters.512;
  double vect_bits_163.511;
  vector(2) double vect_bits_163.510;
  double stmp_bits_163.509;
  vector(2) double vect_bits_163.508;
  vector(2) double vect__161.507;
  vector(4) int vect__152.506;
  vector(4) int * vectp.505;
  vector(4) int * vectp.504;
  int tmp.503;
  unsigned int ratio_mult_vf.502;
  unsigned int bnd.501;
  unsigned int niters.500;
  double bits;
  int i;
  double bits;
  int i;
  float headroom;
  float rc_tol;
  float buffer_left_planned;
  int i_qp_min;
  int i_qp_max;
  int b1;
  int prev_row_qp;
  int avg_qp;
  int i_estimated;
  const int y;
  struct x264_ratecontrol_t * rc;
  double iftmp.32_6;
  double iftmp.33_7;
  struct x264_frame_t * _18;
  int * _19;
  long unsigned int _20;
  long unsigned int _21;
  _Bool _22;
  int * _24;
  int _25;
  int _27;
  float _29;
  float _30;
  float _31;
  float _33;
  int _34;
  float _35;
  float _36;
  int _38;
  struct x264_sps_t * _39;
  int _40;
  int _41;
  int _42;
  double _43;
  int * _44;
  int * _46;
  int _47;
  int _49;
  int _50;
  double _51;
  int * _52;
  int * _53;
  int _54;
  double _55;
  int _56;
  double _57;
  int * _58;
  struct predictor_t * _59;
  double _60;
  _Bool _61;
  int _62;
  int _63;
  int _65;
  _Bool _68;
  long unsigned int _71;
  double _72;
  int _74;
  int _75;
  int _76;
  int _78;
  int _79;
  double _81;
  double _82;
  double _83;
  long unsigned int _85;
  double _86;
  double _87;
  double _88;
  double _89;
  int _93;
  int _94;
  double _97;
  int _100;
  unsigned int _102;
  double _103;
  double _105;
  double _106;
  double _108;
  double _109;
  int _111;
  double _113;
  double _115;
  int _116;
  double _117;
  double _119;
  double _120;
  double _121;
  double _122;
  int _123;
  double _125;
  int _128;
  int _129;
  struct x264_frame_t * _130;
  int * _131;
  sizetype _132;
  sizetype _133;
  int * _134;
  int _135;
  struct x264_frame_t * _136;
  int * _137;
  int * _138;
  int _139;
  double iftmp.32_140;
  double iftmp.32_141;
  double _142;
  struct x264_frame_t * _143;
  int _144;
  double _145;
  double _146;
  int _148;
  int _149;
  int _150;
  int _152;
  struct x264_ratecontrol_t * _155;
  double _156;
  unsigned int ivtmp_158;
  float _159;
  double _161;
  int _162;
  double _165;
  double _166;
  int * _167;
  long unsigned int _169;
  long unsigned int _170;
  long unsigned int _171;
  int * _172;
  int _173;
  double _174;
  long unsigned int _175;
  double _180;
  double _181;
  double _182;
  double _183;
  double _184;
  double _185;
  double _186;
  double _187;
  double _188;
  double _189;
  double _194;
  double _199;
  int _200;
  int _208;
  int _209;
  int _211;
  int _213;
  int _214;
  unsigned int _216;
  int _221;
  unsigned int _222;
  unsigned int _224;
  int pretmp_229;
  int pretmp_230;
  int pretmp_231;
  int prephitmp_232;
  double pretmp_233;
  double pretmp_234;
  int pretmp_235;
  int prephitmp_236;
  int prephitmp_237;
  double pretmp_238;
  int pretmp_242;
  int prephitmp_243;
  double pretmp_244;
  double prephitmp_245;
  unsigned int ivtmp_249;
  unsigned int _251;
  unsigned int _253;
  unsigned int _254;
  long unsigned int _258;
  long unsigned int _259;
  int * _260;
  int _261;
  double _262;
  unsigned int _265;
  unsigned int ivtmp_287;
  unsigned int ivtmp_288;

  <bb 2>:
  rc_15 = h_14(D)->rc;
  # DEBUG rc => rc_15
  y_16 = h_14(D)->mb.i_mb_y;
  # DEBUG y => y_16
  x264_emms ();
  _18 = h_14(D)->fdec;
  _19 = _18->i_row_bits;
  _20 = (long unsigned int) y_16;
  _21 = _20 * 4;
  _24 = _19 + _21;
  _25 = *_24;
  _27 = _25 + bits_26(D);
  *_24 = _27;
  _29 = rc_15->qpa_rc;
  _30 = rc_15->f_qpm;
  _31 = _29 + _30;
  rc_15->qpa_rc = _31;
  _33 = rc_15->qpa_aq;
  _34 = h_14(D)->mb.i_qp;
  _35 = (float) _34;
  _36 = _33 + _35;
  rc_15->qpa_aq = _36;
  _38 = h_14(D)->mb.i_mb_x;
  _39 = h_14(D)->sps;
  _40 = _39->i_mb_width;
  _41 = _40 + -1;
  if (_38 != _41)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  goto <bb 75>;

  <bb 4>:
  _42 = rc_15->b_vbv;
  if (_42 == 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  _44 = _18->i_row_qp;
  _46 = _44 + _21;
  _47 = rc_15->qpm;
  *_46 = _47;
  _49 = h_14(D)->sh.i_type;
  if (_49 == 1)
    goto <bb 6>;
  else
    goto <bb 26>;

  <bb 6>:
  _128 = _39->i_mb_height;
  _129 = _128 + -1;
  if (y_16 < _129)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  pretmp_230 = rc_15->qpm;
  goto <bb 74>;

  <bb 8>:
  _130 = h_14(D)->fref0[0];
  _131 = _130->i_row_qp;
  _132 = _20 + 1;
  _133 = _132 * 4;
  _134 = _131 + _133;
  _135 = *_134;
  _136 = h_14(D)->fref1[0];
  _137 = _136->i_row_qp;
  _138 = _137 + _133;
  _139 = *_138;
  if (_135 > _139)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  iftmp.32_140 = (double) _135;
  goto <bb 11>;

  <bb 10>:
  iftmp.32_141 = (double) _139;

  <bb 11>:
  # iftmp.32_6 = PHI <iftmp.32_140(9), iftmp.32_141(10)>
  _142 = rc_15->pb_offset;
  _143 = h_14(D)->fenc;
  _144 = _143->i_type;
  if (_144 == 4)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:

  <bb 13>:
  # iftmp.33_7 = PHI <5.0e-1(11), 1.0e+0(12)>
  _145 = iftmp.33_7 * _142;
  _146 = iftmp.32_6 + _145;
  avg_qp_147 = (int) _146;
  # DEBUG avg_qp => avg_qp_147
  _148 = rc_15->qp;
  _149 = MAX_EXPR <avg_qp_147, _148>;
  _150 = MIN_EXPR <_149, 51>;
  rc_15->qpm = _150;
  # DEBUG D#3 => h_14(D)
  # DEBUG y => y_16
  # DEBUG h => D#3
  # DEBUG bits => 0.0
  # DEBUG i => 0
  if (y_16 >= 0)
    goto <bb 14>;
  else
    goto <bb 24>;

  <bb 14>:
  _216 = (unsigned int) y_16;
  niters.500_225 = _216 + 1;
  _222 = niters.500_225 + 4294967292;
  _224 = _222 >> 2;
  bnd.501_223 = _224 + 1;
  ratio_mult_vf.502_227 = bnd.501_223 << 2;
  _102 = (unsigned int) y_16;
  if (_102 <= 3)
    goto <bb 20>;
  else
    goto <bb 15>;

  <bb 15>:
  vectp.505_1 = _19;

  <bb 16>:
  # i_212 = PHI <0(15), i_164(21)>
  # bits_215 = PHI <0.0(15), bits_163(21)>
  # vectp.504_248 = PHI <vectp.505_1(15), vectp.504_247(21)>
  # vect_bits_163.508_239 = PHI <{ 0.0, 0.0 }(15), vect_bits_163.508_99(21)>
  # ivtmp_158 = PHI <0(15), ivtmp_249(21)>
  # DEBUG bits => bits_215
  # DEBUG i => i_212
  _85 = (long unsigned int) i_212;
  _71 = _85 * 4;
  _58 = _19 + _71;
  vect__152.506_246 = MEM[(int *)vectp.504_248];
  _152 = *_58;
  vect__161.507_241 = [vec_unpack_float_lo_expr] vect__152.506_246;
  vect__161.507_240 = [vec_unpack_float_hi_expr] vect__152.506_246;
  _161 = (double) _152;
  vect_bits_163.508_98 = vect__161.507_241 + vect_bits_163.508_239;
  vect_bits_163.508_99 = vect__161.507_240 + vect_bits_163.508_98;
  bits_163 = _161 + bits_215;
  # DEBUG bits => bits_163
  i_164 = i_212 + 1;
  # DEBUG i => i_164
  # DEBUG bits => bits_163
  # DEBUG i => i_164
  vectp.504_247 = vectp.504_248 + 16;
  ivtmp_249 = ivtmp_158 + 1;
  if (ivtmp_249 < bnd.501_223)
    goto <bb 21>;
  else
    goto <bb 19>;

  <bb 17>:
  # i_226 = PHI <i_107(18), i_96(20)>
  # bits_179 = PHI <bits_110(18), bits_10(20)>
  # DEBUG bits => bits_179
  # DEBUG i => i_226
  _175 = (long unsigned int) i_226;
  _169 = _175 * 4;
  _167 = _19 + _169;
  _162 = *_167;
  _115 = (double) _162;
  bits_110 = _115 + bits_179;
  # DEBUG bits => bits_110
  i_107 = i_226 + 1;
  # DEBUG i => i_107
  # DEBUG bits => bits_110
  # DEBUG i => i_107
  if (y_16 >= i_107)
    goto <bb 18>;
  else
    goto <bb 22>;

  <bb 18>:
  goto <bb 17>;

  <bb 19>:
  # i_23 = PHI <i_164(16)>
  # bits_9 = PHI <bits_163(16)>
  # vect_bits_163.508_70 = PHI <vect_bits_163.508_99(16)>
  vect_bits_163.510_202 = VEC_PERM_EXPR <vect_bits_163.508_70, { 0.0, 0.0 }, { 1, 2 }>;
  vect_bits_163.510_118 = vect_bits_163.510_202 + vect_bits_163.508_70;
  stmp_bits_163.509_153 = BIT_FIELD_REF <vect_bits_163.510_118, 64, 0>;
  vect_bits_163.511_154 = stmp_bits_163.509_153 + 0.0;
  tmp.503_2 = (int) ratio_mult_vf.502_227;
  if (niters.500_225 == ratio_mult_vf.502_227)
    goto <bb 23>;
  else
    goto <bb 20>;

  <bb 20>:
  # i_96 = PHI <tmp.503_2(19), 0(14)>
  # bits_10 = PHI <vect_bits_163.511_154(19), 0.0(14)>
  goto <bb 17>;

  <bb 21>:
  goto <bb 16>;

  <bb 22>:
  # bits_3 = PHI <bits_110(17)>

  <bb 23>:
  # bits_8 = PHI <bits_3(22), vect_bits_163.511_154(19)>
  pretmp_242 = (int) bits_8;
  pretmp_244 = (double) pretmp_242;

  <bb 24>:
  # prephitmp_243 = PHI <pretmp_242(23), 0(13)>
  # prephitmp_245 = PHI <pretmp_244(23), 0.0(13)>
  # DEBUG y => NULL
  # DEBUG i => NULL
  # DEBUG bits => NULL
  # DEBUG i_estimated => NULL
  _155 = h_14(D)->rc;
  _156 = _155->frame_size_planned;
  if (_156 < prephitmp_245)
    goto <bb 25>;
  else
    goto <bb 74>;

  <bb 25>:
  x264_ratecontrol_set_estimated_size (h_14(D), prephitmp_243);
  pretmp_231 = rc_15->qpm;
  goto <bb 74>;

  <bb 26>:
  # DEBUG D#140 => *_24
  # DEBUG D#139 => (double) D#140
  _52 = _18->i_row_satd;
  _53 = _52 + _21;
  _54 = *_53;
  _55 = (double) _54;
  _56 = rc_15->qpm;
  _57 = (double) _56;
  # DEBUG qp => _57
  _60 = _57 - 1.2e+1;
  _165 = _60 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _166 = pow (2.0e+0, _165);
  # DEBUG qp => NULL
  # DEBUG D#138 => rc_15->row_pred
  # DEBUG p => D#138
  # DEBUG q => NULL
  # DEBUG var => _55
  # DEBUG bits => D#139
  if (_55 < 1.0e+1)
    goto <bb 28>;
  else
    goto <bb 27>;

  <bb 27>:
  _50 = *_24;
  _59 = rc_15->row_pred;
  # DEBUG p => D#138
  # DEBUG q => _166 * 8.4999999999999997779553950749686919152736663818359375e-1
  # DEBUG var => _55
  # DEBUG bits => D#139
  _180 = _59->count;
  _181 = _59->decay;
  _182 = _180 * _181;
  _183 = _59->coeff;
  _184 = _181 * _183;
  _185 = _182 + 1.0e+0;
  _59->count = _185;
  _51 = (double) _50;
  _119 = _51 * 8.4999999999999997779553950749686919152736663818359375e-1;
  _186 = _119 * _166;
  _187 = _186 / _55;
  _188 = _184 + _187;
  _59->coeff = _188;

  <bb 28>:
  # DEBUG p => NULL
  # DEBUG q => NULL
  # DEBUG var => NULL
  # DEBUG bits => NULL
  _62 = _39->i_mb_height;
  _63 = _62 + -1;
  if (y_16 < _63)
    goto <bb 29>;
  else
    goto <bb 74>;

  <bb 29>:
  _65 = h_14(D)->stat.i_slice_count[_49];
  if (_65 > 0)
    goto <bb 30>;
  else
    goto <bb 74>;

  <bb 30>:
  # DEBUG prev_row_qp => _47
  _72 = predict_row_size_sum (h_14(D), y_16, _56);
  # DEBUG D#137 => (int) _72
  # DEBUG b0 => D#137
  # DEBUG b1 => D#137
  # DEBUG D#136 => h_14(D)->param.rc.i_qp_max
  # DEBUG D#135 => h_14(D)->param.rc.i_qp_step
  # DEBUG D#134 => _47 + D#135
  # DEBUG i_qp_max => MIN_EXPR <D#136, D#134>
  # DEBUG D#133 => h_14(D)->param.rc.i_qp_min
  # DEBUG D#132 => _47 - D#135
  # DEBUG i_qp_min => MAX_EXPR <D#133, D#132>
  # DEBUG D#131 => rc_15->buffer_fill
  _82 = rc_15->frame_size_planned;
  # DEBUG D#130 => D#131 - _82
  # DEBUG buffer_left_planned => (float) D#130
  # DEBUG rc_tol => 1.0e+0
  # DEBUG headroom => 0.0
  # DEBUG D#3 => h_14(D)
  # DEBUG y => y_16
  # DEBUG h => D#3
  # DEBUG bits => 0.0
  # DEBUG i => 0
  if (y_16 >= 0)
    goto <bb 31>;
  else
    goto <bb 41>;

  <bb 31>:
  _251 = (unsigned int) y_16;
  niters.512_250 = _251 + 1;
  _253 = niters.512_250 + 4294967292;
  _254 = _253 >> 2;
  bnd.513_252 = _254 + 1;
  ratio_mult_vf.514_255 = bnd.513_252 << 2;
  _265 = (unsigned int) y_16;
  if (_265 <= 3)
    goto <bb 37>;
  else
    goto <bb 32>;

  <bb 32>:
  vectp.517_273 = _19;

  <bb 33>:
  # i_217 = PHI <0(32), i_177(40)>
  # bits_218 = PHI <0.0(32), bits_176(40)>
  # vectp.516_274 = PHI <vectp.517_273(32), vectp.516_275(40)>
  # vect_bits_176.520_279 = PHI <{ 0.0, 0.0 }(32), vect_bits_176.520_281(40)>
  # ivtmp_287 = PHI <0(32), ivtmp_288(40)>
  # DEBUG bits => bits_218
  # DEBUG i => i_217
  _170 = (long unsigned int) i_217;
  _171 = _170 * 4;
  _172 = _19 + _171;
  vect__173.518_276 = MEM[(int *)vectp.516_274];
  _173 = *_172;
  vect__174.519_277 = [vec_unpack_float_lo_expr] vect__173.518_276;
  vect__174.519_278 = [vec_unpack_float_hi_expr] vect__173.518_276;
  _174 = (double) _173;
  vect_bits_176.520_280 = vect__174.519_277 + vect_bits_176.520_279;
  vect_bits_176.520_281 = vect__174.519_278 + vect_bits_176.520_280;
  bits_176 = _174 + bits_218;
  # DEBUG bits => bits_176
  i_177 = i_217 + 1;
  # DEBUG i => i_177
  # DEBUG bits => bits_176
  # DEBUG i => i_177
  vectp.516_275 = vectp.516_274 + 16;
  ivtmp_288 = ivtmp_287 + 1;
  if (ivtmp_288 < bnd.513_252)
    goto <bb 40>;
  else
    goto <bb 36>;

  <bb 34>:
  # i_256 = PHI <i_264(35), i_266(37)>
  # bits_257 = PHI <bits_263(35), bits_268(37)>
  # DEBUG bits => bits_257
  # DEBUG i => i_256
  _258 = (long unsigned int) i_256;
  _259 = _258 * 4;
  _260 = _19 + _259;
  _261 = *_260;
  _262 = (double) _261;
  bits_263 = _262 + bits_257;
  # DEBUG bits => bits_263
  i_264 = i_256 + 1;
  # DEBUG i => i_264
  # DEBUG bits => bits_263
  # DEBUG i => i_264
  if (y_16 >= i_264)
    goto <bb 35>;
  else
    goto <bb 38>;

  <bb 35>:
  goto <bb 34>;

  <bb 36>:
  # i_267 = PHI <i_177(33)>
  # bits_269 = PHI <bits_176(33)>
  # vect_bits_176.520_282 = PHI <vect_bits_176.520_281(33)>
  vect_bits_176.522_283 = VEC_PERM_EXPR <vect_bits_176.520_282, { 0.0, 0.0 }, { 1, 2 }>;
  vect_bits_176.522_284 = vect_bits_176.522_283 + vect_bits_176.520_282;
  stmp_bits_176.521_285 = BIT_FIELD_REF <vect_bits_176.522_284, 64, 0>;
  vect_bits_176.523_286 = stmp_bits_176.521_285 + 0.0;
  tmp.515_272 = (int) ratio_mult_vf.514_255;
  if (niters.512_250 == ratio_mult_vf.514_255)
    goto <bb 39>;
  else
    goto <bb 37>;

  <bb 37>:
  # i_266 = PHI <tmp.515_272(36), 0(31)>
  # bits_268 = PHI <vect_bits_176.523_286(36), 0.0(31)>
  goto <bb 34>;

  <bb 38>:
  # bits_271 = PHI <bits_263(34)>

  <bb 39>:
  # bits_270 = PHI <bits_271(38), vect_bits_176.523_286(36)>
  goto <bb 41>;

  <bb 40>:
  goto <bb 33>;

  <bb 41>:
  # bits_219 = PHI <bits_270(39), 0.0(30)>
  # DEBUG y => NULL
  # DEBUG i => NULL
  # DEBUG bits => NULL
  _86 = _82 * 5.000000000000000277555756156289135105907917022705078125e-2;
  if (_86 > bits_219)
    goto <bb 3>;
  else
    goto <bb 42>;

  <bb 42>:
  _81 = rc_15->buffer_fill;
  _83 = _81 - _82;
  buffer_left_planned_84 = (float) _83;
  _87 = (double) buffer_left_planned_84;
  _88 = rc_15->buffer_size;
  _89 = _87 / _88;
  headroom_90 = (float) _89;
  # DEBUG headroom => headroom_90
  if (_49 != 2)
    goto <bb 43>;
  else
    goto <bb 44>;

  <bb 43>:
  headroom_91 = headroom_90 * 5.0e-1;
  # DEBUG headroom => headroom_91

  <bb 44>:
  # headroom_5 = PHI <headroom_90(42), headroom_91(43)>
  _75 = h_14(D)->param.rc.i_qp_step;
  _78 = h_14(D)->param.rc.i_qp_min;
  _79 = _47 - _75;
  i_qp_min_80 = MAX_EXPR <_78, _79>;
  # DEBUG headroom => headroom_5
  rc_tol_92 = headroom_5 + 1.0e+0;
  # DEBUG rc_tol => rc_tol_92
  _93 = rc_15->b_vbv_min_rate;
  if (_93 == 0)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 45>:
  _94 = h_14(D)->sh.i_qp;
  i_qp_min_95 = MAX_EXPR <i_qp_min_80, _94>;
  # DEBUG i_qp_min => i_qp_min_95

  <bb 46>:
  # i_qp_min_45 = PHI <i_qp_min_95(45), i_qp_min_80(44)>
  b1_73 = (int) _72;
  _74 = h_14(D)->param.rc.i_qp_max;
  _76 = _47 + _75;
  i_qp_max_77 = MIN_EXPR <_74, _76>;
  # DEBUG i_qp_min => i_qp_min_45
  # DEBUG b1 => D#137
  if (_56 < i_qp_max_77)
    goto <bb 52>;
  else
    goto <bb 50>;

  <bb 47>:
  _100 = _211 + 1;
  rc_15->qpm = _100;
  _103 = predict_row_size_sum (h_14(D), y_16, _100);
  b1_104 = (int) _103;
  # DEBUG b1 => b1_104
  # DEBUG i_qp_min => i_qp_min_45
  # DEBUG b1 => b1_104
  if (i_qp_max_77 > _100)
    goto <bb 49>;
  else
    goto <bb 48>;

  <bb 48>:
  # _221 = PHI <_100(47)>
  # b1_220 = PHI <b1_104(47)>
  goto <bb 50>;

  <bb 49>:
  goto <bb 53>;

  <bb 50>:
  # b1_4 = PHI <b1_220(48), b1_198(55), b1_73(46)>
  # prephitmp_236 = PHI <_221(48), pretmp_235(55), _56(46)>
  # DEBUG b1 => b1_4
  if (_74 > prephitmp_236)
    goto <bb 51>;
  else
    goto <bb 59>;

  <bb 51>:
  _194 = (double) b1_4;
  _199 = _81 - _194;
  _43 = _88 * 5.00000000000000010408340855860842566471546888351440429688e-3;
  if (_43 > _199)
    goto <bb 56>;
  else
    goto <bb 59>;

  <bb 52>:
  pretmp_233 = (double) rc_tol_92;
  pretmp_234 = _82 * pretmp_233;
  _106 = _87 * 5.0e-1;

  <bb 53>:
  # b1_192 = PHI <b1_73(52), b1_104(49)>
  # _211 = PHI <_56(52), _100(49)>
  # DEBUG i_qp_min => i_qp_min_45
  # DEBUG b1 => b1_192
  _97 = (double) b1_192;
  if (_97 > pretmp_234)
    goto <bb 47>;
  else
    goto <bb 54>;

  <bb 54>:
  _105 = _81 - _97;
  if (_105 < _106)
    goto <bb 47>;
  else
    goto <bb 55>;

  <bb 55>:
  # b1_198 = PHI <b1_192(54)>
  pretmp_235 = rc_15->qpm;
  goto <bb 50>;

  <bb 56>:

  <bb 57>:
  # _213 = PHI <prephitmp_236(56), _111(64)>
  # DEBUG b1 => b1_4
  _111 = _213 + 1;
  rc_15->qpm = _111;
  _113 = predict_row_size_sum (h_14(D), y_16, _111);
  b1_114 = (int) _113;
  # DEBUG b1 => b1_114
  # DEBUG b1 => b1_114
  if (_74 > _111)
    goto <bb 62>;
  else
    goto <bb 58>;

  <bb 58>:
  # _209 = PHI <_111(57)>
  # b1_207 = PHI <b1_114(57)>

  <bb 59>:
  # b1_66 = PHI <b1_207(58), b1_206(63), b1_4(50), b1_4(51)>
  # prephitmp_237 = PHI <_209(58), _208(63), prephitmp_236(50), prephitmp_236(51)>
  # DEBUG b1 => b1_66
  if (i_qp_min_45 < prephitmp_237)
    goto <bb 60>;
  else
    goto <bb 73>;

  <bb 60>:
  _200 = *_44;
  if (_200 < prephitmp_237)
    goto <bb 61>;
  else
    goto <bb 73>;

  <bb 61>:
  pretmp_238 = _82 * 8.000000000000000444089209850062616169452667236328125e-1;
  goto <bb 70>;

  <bb 62>:
  _108 = (double) b1_114;
  _109 = _81 - _108;
  if (_43 > _109)
    goto <bb 64>;
  else
    goto <bb 63>;

  <bb 63>:
  # _208 = PHI <_111(62)>
  # b1_206 = PHI <b1_114(62)>
  goto <bb 59>;

  <bb 64>:
  goto <bb 57>;

  <bb 65>:
  _123 = _214 + -1;
  rc_15->qpm = _123;
  _125 = predict_row_size_sum (h_14(D), y_16, _123);
  b1_126 = (int) _125;
  # DEBUG b1 => b1_126
  # DEBUG b1 => b1_126
  if (i_qp_min_45 < _123)
    goto <bb 67>;
  else
    goto <bb 66>;

  <bb 66>:
  # b1_205 = PHI <b1_126(65)>
  goto <bb 73>;

  <bb 67>:
  _116 = *_44;
  if (_116 < _123)
    goto <bb 69>;
  else
    goto <bb 68>;

  <bb 68>:
  # b1_204 = PHI <b1_126(67)>
  goto <bb 73>;

  <bb 69>:

  <bb 70>:
  # b1_197 = PHI <b1_66(61), b1_126(69)>
  # _214 = PHI <prephitmp_237(61), _123(69)>
  # DEBUG b1 => b1_197
  _117 = (double) b1_197;
  _68 = _47 >= _214;
  _61 = _117 < pretmp_238;
  _22 = _61 & _68;
  if (_22 != 0)
    goto <bb 65>;
  else
    goto <bb 71>;

  <bb 71>:
  _120 = rc_15->buffer_rate;
  _189 = _81 + _120;
  _121 = _189 - _88;
  _122 = _121 * 1.100000000000000088817841970012523233890533447265625e+0;
  if (_117 < _122)
    goto <bb 65>;
  else
    goto <bb 72>;

  <bb 72>:
  # b1_193 = PHI <b1_197(71)>

  <bb 73>:
  # b1_168 = PHI <b1_205(66), b1_204(68), b1_193(72), b1_66(59), b1_66(60)>
  x264_ratecontrol_set_estimated_size (h_14(D), b1_168);
  pretmp_229 = rc_15->qpm;

  <bb 74>:
  # prephitmp_232 = PHI <_150(24), _56(28), _56(29), pretmp_229(73), pretmp_230(7), pretmp_231(25)>
  _159 = (float) prephitmp_232;
  rc_15->f_qpm = _159;

  <bb 75>:
  return;

}



;; Function x264_ratecontrol_slice_type (x264_ratecontrol_slice_type, funcdef_no=133, decl_uid=6368, cgraph_uid=133, symbol_order=176)


Analyzing loop at encoder/ratecontrol.c:1000
encoder/ratecontrol.c:1000:13: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1000:13: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1000:13: note: not vectorized: control flow in loop.
encoder/ratecontrol.c:1000:13: note: bad loop form.
encoder/ratecontrol.c:977:5: note: vectorized 0 loops in function.
x264_ratecontrol_slice_type (struct x264_t * h, int frame_num)
{
  int i;
  struct x264_ratecontrol_t * rc;
  int iftmp.3_2;
  int _3;
  int _4;
  int _12;
  int _13;
  int _15;
  double _16;
  double _17;
  double _18;
  double _19;
  int iftmp.34_20;
  double _24;
  float _25;
  float _26;
  double _27;
  double _28;
  double _29;
  double _30;
  int _31;
  double _32;
  double _34;
  float _35;
  float _36;
  double _37;
  double _40;
  int _41;
  int iftmp.3_42;
  int _45;
  int _47;
  struct x264_t * _50;
  struct x264_ratecontrol_t * _51;
  int _59;
  struct ratecontrol_entry_t * _62;
  long unsigned int _63;
  long unsigned int _64;
  struct ratecontrol_entry_t * _65;
  int _66;
  int _67;
  int _68;
  int iftmp.3_69;
  double _71;
  double _72;
  double _73;
  int iftmp.3_80;
  int iftmp.3_94;
  int pretmp_141;
  int prephitmp_142;
  double pretmp_143;
  double pretmp_145;
  double pretmp_147;
  double _149;
  double pretmp_152;
  double prephitmp_153;
  double pretmp_154;
  double pretmp_156;
  double pretmp_158;
  double _160;
  double pretmp_163;
  double prephitmp_164;

  <bb 2>:
  # DEBUG D#165 => h_10(D)->rc
  # DEBUG rc => D#165
  _12 = h_10(D)->param.rc.b_stat_read;
  if (_12 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  goto <bb 24> (<L25>);

  <bb 4>:
  rc_11 = h_10(D)->rc;
  _13 = rc_11->num_entries;
  if (_13 <= frame_num_14(D))
    goto <bb 5>;
  else
    goto <bb 19>;

  <bb 5>:
  _15 = h_10(D)->stat.i_slice_count[0];
  if (_15 != 0)
    goto <bb 6>;
  else
    goto <bb 25>;

  <bb 6>:
  _16 = h_10(D)->stat.f_slice_qp[0];
  _17 = (double) _15;
  _18 = _16 / _17;
  _19 = _18 + 1.0e+0;
  iftmp.34_20 = (int) _19;
  h_10(D)->param.rc.i_qp_constant = iftmp.34_20;
  # DEBUG v => iftmp.34_20
  # DEBUG i_min => 0
  # DEBUG i_max => 51
  if (iftmp.34_20 >= 0)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  pretmp_154 = (double) iftmp.34_20;
  pretmp_156 = pretmp_154 - 1.2e+1;
  pretmp_158 = pretmp_156 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _160 = pow (2.0e+0, pretmp_158);
  pretmp_163 = _160 * 8.4999999999999997779553950749686919152736663818359375e-1;
  goto <bb 10>;

  <bb 8>:
  pretmp_141 = MIN_EXPR <iftmp.34_20, 51>;
  pretmp_143 = (double) iftmp.34_20;
  pretmp_145 = pretmp_143 - 1.2e+1;
  pretmp_147 = pretmp_145 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _149 = pow (2.0e+0, pretmp_147);
  pretmp_152 = _149 * 8.4999999999999997779553950749686919152736663818359375e-1;

  <bb 9>:
  # prephitmp_142 = PHI <pretmp_141(8), 24(25)>
  # prephitmp_153 = PHI <pretmp_152(8), 3.399999999999999911182158029987476766109466552734375e+0(25)>
  # DEBUG v => NULL
  # DEBUG i_min => 0
  # DEBUG i_max => 51

  <bb 10>:
  # iftmp.3_80 = PHI <0(7), prephitmp_142(9)>
  # prephitmp_164 = PHI <pretmp_163(7), prephitmp_153(9)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  rc_11->qp_constant[0] = iftmp.3_80;
  # DEBUG D#164 => NULL
  # DEBUG qp => D#164
  # DEBUG qp => NULL
  _25 = h_10(D)->param.rc.f_ip_factor;
  _26 = ABS_EXPR <_25>;
  _27 = (double) _26;
  _28 = prephitmp_164 / _27;
  # DEBUG qscale => _28
  _71 = _28 * 1.1764705882352941568314008691231720149517059326171875e+0;
  _72 = log (_71);
  _73 = _72 * 8.656170245333779433849485940299928188323974609375e+0;
  # DEBUG qscale => NULL
  _30 = _73 + 1.25e+1;
  _31 = (int) _30;
  # DEBUG v => _31
  # DEBUG i_min => 0
  # DEBUG i_max => 51
  iftmp.3_69 = MIN_EXPR <_31, 51>;
  iftmp.3_2 = MAX_EXPR <iftmp.3_69, 0>;
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  rc_11->qp_constant[2] = iftmp.3_2;
  # DEBUG qp => D#164
  # DEBUG qp => NULL
  _35 = h_10(D)->param.rc.f_pb_factor;
  _36 = ABS_EXPR <_35>;
  _37 = (double) _36;
  _24 = _37 * 1.1764705882352941568314008691231720149517059326171875e+0;
  # DEBUG qscale => _37 * D#163
  _34 = _24 * prephitmp_164;
  _32 = log (_34);
  _29 = _32 * 8.656170245333779433849485940299928188323974609375e+0;
  # DEBUG qscale => NULL
  _40 = _29 + 1.25e+1;
  _41 = (int) _40;
  # DEBUG v => _41
  # DEBUG i_min => 0
  # DEBUG i_max => 51
  iftmp.3_42 = MIN_EXPR <_41, 51>;
  iftmp.3_94 = MAX_EXPR <iftmp.3_42, 0>;
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  rc_11->qp_constant[1] = iftmp.3_94;
  x264_log (h_10(D), 0, "2nd pass has more frames than 1st pass (%d)\n", _13);
  _45 = h_10(D)->param.rc.i_qp_constant;
  x264_log (h_10(D), 0, "continuing anyway, at constant QP=%d\n", _45);
  _47 = h_10(D)->param.i_bframe_adaptive;
  if (_47 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  x264_log (h_10(D), 0, "disabling adaptive B-frames\n");

  <bb 12>:
  # DEBUG i => 0
  _4 = h_10(D)->param.i_threads;
  if (_4 > 0)
    goto <bb 13>;
  else
    goto <bb 3>;

  <bb 13>:

  <bb 14>:
  # i_90 = PHI <0(13), i_61(18)>
  # DEBUG i => i_90
  _50 = h_10(D)->thread[i_90];
  _51 = _50->rc;
  _51->b_abr = 0;
  _51->b_2pass = 0;
  _50->param.rc.i_rc_method = 0;
  _50->param.rc.b_stat_read = 0;
  _50->param.i_bframe_adaptive = 0;
  _50->param.b_pre_scenecut = 0;
  _50->param.i_scenecut_threshold = -1;
  _59 = _50->param.i_bframe;
  if (_59 > 1)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _50->param.i_bframe = 1;

  <bb 16>:
  i_61 = i_90 + 1;
  # DEBUG i => i_61
  # DEBUG i => i_61
  if (_4 > i_61)
    goto <bb 18>;
  else
    goto <bb 17>;

  <bb 17>:
  goto <bb 3>;

  <bb 18>:
  goto <bb 14>;

  <bb 19>:
  _62 = rc_11->entry;
  _63 = (long unsigned int) frame_num_14(D);
  _64 = _63 * 72;
  _65 = _62 + _64;
  _66 = _65->pict_type;
  switch (_66) <default: <L25>, case 1: <L17>, case 2: <L13>>

<L13>:
  _67 = _65->kept_as_ref;
  if (_67 != 0)
    goto <bb 24> (<L25>);
  else
    goto <bb 21>;

  <bb 21>:
  goto <bb 24> (<L25>);

<L17>:
  _68 = _65->kept_as_ref;
  if (_68 != 0)
    goto <bb 24> (<L25>);
  else
    goto <bb 23>;

  <bb 23>:

  # _3 = PHI <1(20), 2(21), 5(23), 3(19), 0(3), 4(22)>
<L25>:
  return _3;

  <bb 25>:
  h_10(D)->param.rc.i_qp_constant = 24;
  # DEBUG v => 24
  # DEBUG i_min => 0
  # DEBUG i_max => 51
  goto <bb 9>;

}



;; Function x264_ratecontrol_end (x264_ratecontrol_end, funcdef_no=134, decl_uid=6376, cgraph_uid=134, symbol_order=177)


Analyzing loop at encoder/ratecontrol.c:1045
encoder/ratecontrol.c:1045:5: note: ===== analyze_loop_nest =====
encoder/ratecontrol.c:1045:5: note: === vect_analyze_loop_form ===
encoder/ratecontrol.c:1045:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [9, + , 4294967295] != 0
  bounds on difference of bases: -9 ... -9
  result:
    # of iterations 9, bounded by 9
encoder/ratecontrol.c:1045:5: note: === vect_analyze_data_refs ===
Creating dr for *_32
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: h_11(D)
	offset from base address: 0
	constant offset from base address: 20944
	step: 4
	aligned to: 128
	base_object: MEM[(const int *)h_11(D)]
	Access function 0: {20944B, +, 4}_1
Creating dr for h_11(D)->stat.frame.i_mb_count_p
analyze_innermost: success.
	base_address: h_11(D)
	offset from base address: 0
	constant offset from base address: 20996
	step: 0
	aligned to: 128
	base_object: *h_11(D)
	Access function 0: 736
	Access function 1: 0
	Access function 2: 167232
encoder/ratecontrol.c:1045:5: note: got vectype for stmt: _33 = *_32;
const vector(4) int
encoder/ratecontrol.c:1045:5: note: got vectype for stmt: h_11(D)->stat.frame.i_mb_count_p = _34;
vector(4) int
encoder/ratecontrol.c:1045:5: note: === vect_analyze_scalar_cycles ===
encoder/ratecontrol.c:1045:5: note: Analyze phi: i_281 = PHI <i_36(4), 7(2)>

encoder/ratecontrol.c:1045:5: note: Access function of PHI: {7, +, 1}_1
encoder/ratecontrol.c:1045:5: note: step: 1,  init: 7
encoder/ratecontrol.c:1045:5: note: Detected induction.
encoder/ratecontrol.c:1045:5: note: Analyze phi: .MEM_282 = PHI <.MEM_35(4), .MEM_28(2)>

encoder/ratecontrol.c:1045:5: note: Analyze phi: prephitmp_267 = PHI <_34(4), _27(2)>

encoder/ratecontrol.c:1045:5: note: Access function of PHI: {_27, +, _33}_1
encoder/ratecontrol.c:1045:5: note: step: _33,  init: _27
encoder/ratecontrol.c:1045:5: note: step unknown.
encoder/ratecontrol.c:1045:5: note: Analyze phi: ivtmp_3 = PHI <ivtmp_2(4), 10(2)>

encoder/ratecontrol.c:1045:5: note: Access function of PHI: {10, +, 4294967295}_1
encoder/ratecontrol.c:1045:5: note: step: 4294967295,  init: 10
encoder/ratecontrol.c:1045:5: note: Detected induction.
encoder/ratecontrol.c:1045:5: note: Analyze phi: prephitmp_267 = PHI <_34(4), _27(2)>

encoder/ratecontrol.c:1045:5: note: reduction used in loop.
encoder/ratecontrol.c:1045:5: note: Unknown def-use cycle pattern.
encoder/ratecontrol.c:1045:5: note: === vect_pattern_recog ===
encoder/ratecontrol.c:1045:5: note: vect_is_simple_use: operand _30
encoder/ratecontrol.c:1045:5: note: def_stmt: _30 = (long unsigned int) i_281;
encoder/ratecontrol.c:1045:5: note: type of def: 3.
encoder/ratecontrol.c:1045:5: note: vect_is_simple_use: operand i_281
encoder/ratecontrol.c:1045:5: note: def_stmt: i_281 = PHI <i_36(4), 7(2)>
encoder/ratecontrol.c:1045:5: note: type of def: 4.
encoder/ratecontrol.c:1045:5: note: vect_is_simple_use: operand 4
encoder/ratecontrol.c:1045:5: note: === vect_analyze_data_ref_accesses ===
encoder/ratecontrol.c:1045:5: note: not vectorized: complicated access pattern.
encoder/ratecontrol.c:1045:5: note: bad data access.
encoder/ratecontrol.c:1034:6: note: vectorized 0 loops in function.
x264_ratecontrol_end (struct x264_t * h, int bits)
{
  struct x264_ratecontrol_t * rcc;
  struct x264_ratecontrol_t * rct;
  double D.10759;
  double qscale;
  struct x264_ratecontrol_t * rc;
  char c_direct;
  int dir_avg;
  int dir_frame;
  char c_type;
  int i;
  const int * mbs;
  struct x264_ratecontrol_t * rc;
  unsigned int ivtmp_2;
  unsigned int ivtmp_3;
  double _4;
  int _15;
  int _16;
  int _17;
  int _19;
  int _20;
  int _21;
  int _22;
  int _23;
  int _25;
  int _26;
  int _27;
  long unsigned int _30;
  long unsigned int _31;
  const int * _32;
  int _33;
  int _34;
  struct x264_frame_t * _37;
  float _38;
  int _39;
  float _40;
  float _41;
  float _44;
  float _45;
  int _48;
  int _49;
  struct x264_frame_t * _50;
  int _51;
  struct x264_frame_t * _52;
  int _53;
  int _54;
  int _55;
  int _57;
  int _58;
  int _60;
  int _63;
  int _64;
  int _65;
  double _66;
  int _68;
  int _70;
  struct FILE * _71;
  double _72;
  int _73;
  int _74;
  double _76;
  float _77;
  double _78;
  double _79;
  double _80;
  double _81;
  double _82;
  double _83;
  double _84;
  double _86;
  float _87;
  double _88;
  double _90;
  double _91;
  float _92;
  float _93;
  double _94;
  double _95;
  double _96;
  double _97;
  double _98;
  double cstore_99;
  double _101;
  double _102;
  double _104;
  double _105;
  double _106;
  double _107;
  double _108;
  double _110;
  int _112;
  float _113;
  double _114;
  int _115;
  struct ratecontrol_entry_t * _116;
  int _117;
  double _118;
  double _119;
  double _120;
  double _122;
  double _123;
  int _125;
  int _126;
  int _127;
  int _128;
  struct x264_frame_t * _130;
  int _131;
  unsigned int _132;
  unsigned int _133;
  int _134;
  int _135;
  double _136;
  int _137;
  int _138;
  struct x264_frame_t * _139;
  int _140;
  double _141;
  float _142;
  double _143;
  struct predictor_t * _144;
  double _145;
  double _147;
  float _149;
  int _150;
  int _151;
  int _152;
  double _153;
  double _154;
  double _155;
  double _156;
  double _157;
  double _158;
  double _159;
  double _160;
  double _161;
  double _162;
  double _163;
  double _164;
  double _165;
  double _166;
  double _167;
  double _168;
  double _170;
  double _171;
  double _172;
  double _182;
  double _183;
  double _185;
  double _187;
  double _188;
  double _189;
  double _191;
  double _192;
  double iftmp.23_193;
  double _194;
  double _195;
  double _196;
  double _198;
  double _199;
  double _201;
  double _202;
  double _203;
  double _204;
  double _205;
  double _206;
  double _207;
  double _208;
  double _209;
  struct x264_t * _210;
  int _212;
  double _214;
  double _215;
  float _216;
  double _217;
  double _218;
  double _219;
  double _220;
  double _221;
  struct predictor_t * _222;
  int _223;
  long unsigned int _224;
  long unsigned int _225;
  struct predictor_t * _226;
  int _227;
  double _228;
  double _229;
  double _230;
  double _231;
  double _232;
  double _233;
  double _234;
  double iftmp.16_235;
  double iftmp.16_236;
  double _237;
  double _238;
  double _239;
  double _240;
  double _241;
  double _242;
  double _243;
  double _244;
  int pretmp_248;
  double _249;
  double _254;
  int prephitmp_260;
  struct x264_frame_t * prephitmp_261;
  struct x264_ratecontrol_t * prephitmp_262;
  int prephitmp_267;
  int prephitmp_268;
  int prephitmp_269;
  struct x264_frame_t * pretmp_270;
  struct x264_ratecontrol_t * pretmp_271;
  struct x264_ratecontrol_t * pretmp_272;
  int _275;
  double _279;
  double _280;

  <bb 2>:
  rc_12 = h_11(D)->rc;
  # DEBUG rc => rc_12
  mbs_13 = &h_11(D)->stat.frame.i_mb_count;
  # DEBUG mbs => mbs_13
  x264_emms ();
  _15 = MEM[(const int *)h_11(D) + 20940B];
  _16 = MEM[(const int *)h_11(D) + 20988B];
  _17 = _15 + _16;
  h_11(D)->stat.frame.i_mb_count_skip = _17;
  _19 = MEM[(const int *)h_11(D) + 20924B];
  _20 = MEM[(const int *)h_11(D) + 20920B];
  _21 = _19 + _20;
  _22 = MEM[(const int *)h_11(D) + 20916B];
  _23 = _21 + _22;
  h_11(D)->stat.frame.i_mb_count_i = _23;
  _25 = MEM[(const int *)h_11(D) + 20932B];
  _26 = MEM[(const int *)h_11(D) + 20936B];
  _27 = _25 + _26;
  h_11(D)->stat.frame.i_mb_count_p = _27;
  # DEBUG i => 7
  # DEBUG i => 7

  <bb 3>:
  # i_281 = PHI <i_36(4), 7(2)>
  # prephitmp_267 = PHI <_34(4), _27(2)>
  # ivtmp_3 = PHI <ivtmp_2(4), 10(2)>
  # DEBUG i => i_281
  _30 = (long unsigned int) i_281;
  _31 = _30 * 4;
  _32 = mbs_13 + _31;
  _33 = *_32;
  _34 = _33 + prephitmp_267;
  h_11(D)->stat.frame.i_mb_count_p = _34;
  i_36 = i_281 + 1;
  # DEBUG i => i_36
  # DEBUG i => i_36
  ivtmp_2 = ivtmp_3 - 1;
  if (ivtmp_2 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # _275 = PHI <_34(3)>
  _37 = h_11(D)->fdec;
  _38 = rc_12->qpa_rc;
  _39 = h_11(D)->mb.i_mb_count;
  _40 = (float) _39;
  _41 = _38 / _40;
  rc_12->qpa_rc = _41;
  _37->f_qp_avg_rc = _41;
  _44 = rc_12->qpa_aq;
  _45 = _44 / _40;
  rc_12->qpa_aq = _45;
  _37->f_qp_avg_aq = _45;
  _48 = h_11(D)->param.rc.b_stat_write;
  if (_48 != 0)
    goto <bb 6>;
  else
    goto <bb 20>;

  <bb 6>:
  _49 = h_11(D)->sh.i_type;
  if (_49 == 2)
    goto <bb 7>;
  else
    goto <bb 9>;

  <bb 7>:
  _50 = h_11(D)->fenc;
  _51 = _50->i_poc;
  if (_51 == 0)
    goto <bb 13>;
  else
    goto <bb 8>;

  <bb 8>:
  goto <bb 13>;

  <bb 9>:
  if (_49 != 0)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  pretmp_270 = h_11(D)->fenc;
  goto <bb 13>;

  <bb 11>:
  _52 = h_11(D)->fenc;
  _53 = _52->b_kept_as_ref;
  if (_53 != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:

  <bb 13>:
  # prephitmp_261 = PHI <_50(8), pretmp_270(10), _52(12), _52(11), _50(7)>
  # prephitmp_260 = PHI <105(8), 80(10), 98(12), 66(11), 73(7)>
  # DEBUG c_type => NULL
  _54 = h_11(D)->stat.frame.i_direct_score[1];
  _55 = h_11(D)->stat.frame.i_direct_score[0];
  # DEBUG dir_frame => _54 - _55
  _57 = h_11(D)->stat.i_direct_score[1];
  _58 = h_11(D)->stat.i_direct_score[0];
  # DEBUG dir_avg => _57 - _58
  _60 = h_11(D)->mb.b_direct_auto_write;
  if (_60 != 0)
    goto <bb 14>;
  else
    goto <bb 19>;

  <bb 14>:
  dir_frame_56 = _54 - _55;
  if (dir_frame_56 <= 0)
    goto <bb 15>;
  else
    goto <bb 19>;

  <bb 15>:
  if (dir_frame_56 == 0)
    goto <bb 16>;
  else
    goto <bb 19>;

  <bb 16>:
  dir_avg_59 = _57 - _58;
  if (dir_avg_59 <= 0)
    goto <bb 17>;
  else
    goto <bb 19>;

  <bb 17>:
  if (dir_avg_59 != 0)
    goto <bb 19>;
  else
    goto <bb 18>;

  <bb 18>:

  <bb 19>:
  # prephitmp_269 = PHI <115(16), 45(13), 116(17), 45(18), 115(14), 116(15)>
  # DEBUG c_direct => NULL
  _63 = h_11(D)->stat.frame.i_misc_bits;
  _64 = h_11(D)->stat.frame.i_mv_bits;
  _65 = h_11(D)->stat.frame.i_tex_bits;
  _66 = (double) _41;
  _68 = h_11(D)->i_frame;
  _70 = prephitmp_261->i_frame;
  _71 = rc_12->p_stat_file_out;
  # DEBUG __stream => _71
  # DEBUG __fmt => "in:%d out:%d type:%c q:%.2f tex:%d mv:%d misc:%d imb:%d pmb:%d smb:%d d:%c;\n"
  __fprintf_chk (_71, 1, "in:%d out:%d type:%c q:%.2f tex:%d mv:%d misc:%d imb:%d pmb:%d smb:%d d:%c;\n", _70, _68, prephitmp_260, _66, _65, _64, _63, _23, _275, _17, prephitmp_269);
  pretmp_248 = h_11(D)->mb.i_mb_count;

  <bb 20>:
  # prephitmp_268 = PHI <_39(5), pretmp_248(19)>
  _73 = rc_12->b_abr;
  if (_73 != 0)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  pretmp_272 = MEM[(struct x264_ratecontrol_t * *)h_11(D) + 20896B];
  goto <bb 30>;

  <bb 22>:
  _74 = h_11(D)->sh.i_type;
  if (_74 != 1)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  _76 = (double) bits_75(D);
  _77 = rc_12->qpa_rc;
  _78 = (double) _77;
  # DEBUG qp => _78
  _72 = _78 - 1.2e+1;
  _120 = _72 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _119 = pow (2.0e+0, _120);
  _155 = _76 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  _80 = _119 * _155;
  _81 = rc_12->last_rceq;
  _82 = _80 / _81;
  _83 = rc_12->cplxr_sum;
  _84 = _82 + _83;
  goto <bb 25>;

  <bb 24>:
  _86 = (double) bits_75(D);
  _87 = rc_12->qpa_rc;
  _88 = (double) _87;
  # DEBUG qp => _88
  _79 = _88 - 1.2e+1;
  _153 = _79 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _154 = pow (2.0e+0, _153);
  _163 = _86 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  _90 = _154 * _163;
  _91 = rc_12->last_rceq;
  _92 = h_11(D)->param.rc.f_pb_factor;
  _93 = ABS_EXPR <_92>;
  _94 = (double) _93;
  _95 = _91 * _94;
  _96 = _90 / _95;
  _97 = rc_12->cplxr_sum;
  _98 = _96 + _97;

  <bb 25>:
  # cstore_99 = PHI <_84(23), _98(24)>
  _101 = rc_12->cbr_decay;
  _102 = cstore_99 * _101;
  rc_12->cplxr_sum = _102;
  _104 = rc_12->wanted_bits_window;
  _105 = rc_12->bitrate;
  _106 = rc_12->fps;
  _107 = _105 / _106;
  _108 = _104 + _107;
  _110 = _101 * _108;
  rc_12->wanted_bits_window = _110;
  _112 = h_11(D)->param.i_threads;
  if (_112 == 1)
    goto <bb 27>;
  else
    goto <bb 26>;

  <bb 26>:
  pretmp_271 = MEM[(struct x264_ratecontrol_t * *)h_11(D) + 20896B];
  goto <bb 30>;

  <bb 27>:
  _113 = rc_12->qpa_rc;
  # DEBUG D#2 => h_11(D)
  rc_148 = MEM[(struct x264_ratecontrol_t * *)h_11(D) + 20896B];
  # DEBUG D#2 => h_11(D)
  # DEBUG qp => _113
  # DEBUG h => D#2
  # DEBUG h => D#2
  # DEBUG rc => rc_148
  _156 = rc_148->accum_p_qp;
  _157 = _156 * 9.499999999999999555910790149937383830547332763671875e-1;
  rc_148->accum_p_qp = _157;
  _158 = rc_148->accum_p_norm;
  _159 = _158 * 9.499999999999999555910790149937383830547332763671875e-1;
  _160 = _159 + 1.0e+0;
  rc_148->accum_p_norm = _160;
  if (_74 == 2)
    goto <bb 28>;
  else
    goto <bb 29>;

  <bb 28>:
  _161 = (double) _113;
  _162 = rc_148->ip_offset;
  _199 = _157 + _161;
  _164 = _162 + _199;
  rc_148->accum_p_qp = _164;
  goto <bb 30>;

  <bb 29>:
  _165 = (double) _113;
  _166 = _157 + _165;
  rc_148->accum_p_qp = _166;

  <bb 30>:
  # prephitmp_262 = PHI <pretmp_272(21), pretmp_271(26), rc_148(29), rc_148(28)>
  _115 = rc_12->b_2pass;
  if (_115 != 0)
    goto <bb 31>;
  else
    goto <bb 34>;

  <bb 31>:
  _116 = rc_12->rce;
  _117 = _116->new_qp;
  _118 = (double) _117;
  # DEBUG qp => _118
  _114 = _118 - 1.2e+1;
  _167 = _114 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _168 = pow (2.0e+0, _167);
  qscale_169 = _168 * 8.4999999999999997779553950749686919152736663818359375e-1;
  # DEBUG qp => NULL
  _149 = MEM[(float *)_116 + 8B];
  # DEBUG D#8 => _116
  _150 = MEM[(int *)_116 + 12B];
  # DEBUG D#8 => _116
  _151 = MEM[(int *)_116 + 16B];
  # DEBUG D#8 => _116
  _152 = MEM[(int *)_116 + 20B];
  # DEBUG D#8 => _116
  # DEBUG qscale => qscale_169
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  # DEBUG rce => D#8
  qscale_1 = MAX_EXPR <qscale_169, 1.000000000000000055511151231257827021181583404541015625e-1>;
  # DEBUG qscale => qscale_1
  _182 = (double) _151;
  _183 = _182 + 1.000000000000000055511151231257827021181583404541015625e-1;
  _185 = (double) _149;
  _187 = _185 / qscale_1;
  _188 = pow (_187, 1.100000000000000088817841970012523233890533447265625e+0);
  _189 = _183 * _188;
  _191 = (double) _150;
  if (_149 > 1.0e+0)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:

  <bb 33>:
  # iftmp.23_193 = PHI <1.0e+0(31), _185(32)>
  _192 = MAX_EXPR <qscale_1, 1.0e+0>;
  _194 = iftmp.23_193 / _192;
  _195 = __builtin_sqrt (_194);
  _196 = _191 * _195;
  _249 = _189 + _196;
  _198 = (double) _152;
  # DEBUG qscale => NULL
  _122 = rc_12->expected_bits_sum;
  _172 = _122 + _198;
  _123 = _172 + _249;
  rc_12->expected_bits_sum = _123;

  <bb 34>:
  _125 = h_11(D)->mb.b_variable_qp;
  if (_125 != 0)
    goto <bb 36>;
  else
    goto <bb 35>;

  <bb 35>:
  goto <bb 42>;

  <bb 36>:
  _126 = h_11(D)->sh.i_type;
  if (_126 == 1)
    goto <bb 37>;
  else
    goto <bb 35>;

  <bb 37>:
  _127 = rc_12->bframe_bits;
  _128 = bits_75(D) + _127;
  rc_12->bframe_bits = _128;
  _130 = h_11(D)->frames.current[0];
  if (_130 == 0B)
    goto <bb 39>;
  else
    goto <bb 38>;

  <bb 38>:
  _131 = _130->i_type;
  _132 = (unsigned int) _131;
  _133 = _132 + 4294967292;
  if (_133 > 1)
    goto <bb 39>;
  else
    goto <bb 35>;

  <bb 39>:
  # DEBUG D#180 => rc_12->bframes
  # DEBUG D#179 => _128 / D#180
  # DEBUG D#178 => (double) D#179
  _137 = h_11(D)->i_ref1;
  _138 = _137 + -1;
  _139 = h_11(D)->fref1[_138];
  _140 = _139->i_satd;
  _141 = (double) _140;
  _142 = rc_12->qpa_rc;
  _143 = (double) _142;
  # DEBUG qp => _143
  _145 = _143 - 1.2e+1;
  _170 = _145 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _171 = pow (2.0e+0, _170);
  # DEBUG qp => NULL
  # DEBUG D#177 => rc_12->pred_b_from_p
  # DEBUG p => D#177
  # DEBUG q => NULL
  # DEBUG var => _141
  # DEBUG bits => D#178
  if (_141 < 1.0e+1)
    goto <bb 41>;
  else
    goto <bb 40>;

  <bb 40>:
  _134 = rc_12->bframes;
  _144 = rc_12->pred_b_from_p;
  # DEBUG p => D#177
  # DEBUG q => _171 * 8.4999999999999997779553950749686919152736663818359375e-1
  # DEBUG var => _141
  # DEBUG bits => D#178
  _201 = _144->count;
  _202 = _144->decay;
  _203 = _201 * _202;
  _204 = _144->coeff;
  _205 = _202 * _204;
  _206 = _203 + 1.0e+0;
  _144->count = _206;
  _135 = _128 / _134;
  _136 = (double) _135;
  _221 = _136 * 8.4999999999999997779553950749686919152736663818359375e-1;
  _207 = _171 * _221;
  _208 = _207 / _141;
  _209 = _205 + _208;
  _144->coeff = _209;

  <bb 41>:
  # DEBUG p => NULL
  # DEBUG q => NULL
  # DEBUG var => NULL
  # DEBUG bits => NULL
  rc_12->bframe_bits = 0;

  <bb 42>:
  # DEBUG h => h_11(D)
  # DEBUG bits => bits_75(D)
  # DEBUG D#169 => h_11(D)->rc
  # DEBUG rcc => D#169
  _210 = h_11(D)->thread[0];
  rct_211 = _210->rc;
  # DEBUG rct => rct_211
  _212 = prephitmp_262->last_satd;
  if (_212 >= prephitmp_268)
    goto <bb 43>;
  else
    goto <bb 45>;

  <bb 43>:
  # DEBUG D#176 => (double) bits_75(D)
  _215 = (double) _212;
  _216 = prephitmp_262->qpa_rc;
  _217 = (double) _216;
  # DEBUG qp => _217
  _218 = _217 - 1.2e+1;
  _219 = _218 * 1.666666666666666574148081281236954964697360992431640625e-1;
  _220 = pow (2.0e+0, _219);
  # DEBUG qp => NULL
  # DEBUG D#175 => rct_211->pred
  # DEBUG D#174 => h_11(D)->sh.i_type
  # DEBUG D#173 => (long unsigned int) D#174
  # DEBUG D#172 => D#173 * 24
  # DEBUG D#171 => D#175 + D#172
  # DEBUG p => D#171
  # DEBUG q => NULL
  # DEBUG var => _215
  # DEBUG bits => D#176
  if (_215 < 1.0e+1)
    goto <bb 45>;
  else
    goto <bb 44>;

  <bb 44>:
  _222 = rct_211->pred;
  _223 = h_11(D)->sh.i_type;
  _224 = (long unsigned int) _223;
  _225 = _224 * 24;
  _226 = _222 + _225;
  # DEBUG p => D#171
  # DEBUG q => _220 * 8.4999999999999997779553950749686919152736663818359375e-1
  # DEBUG var => _215
  # DEBUG bits => D#176
  _147 = _226->count;
  _237 = _226->decay;
  _238 = _147 * _237;
  _239 = _226->coeff;
  _240 = _237 * _239;
  _241 = _238 + 1.0e+0;
  _226->count = _241;
  _214 = (double) bits_75(D);
  _231 = _214 * 8.4999999999999997779553950749686919152736663818359375e-1;
  _242 = _220 * _231;
  _243 = _242 / _215;
  _244 = _240 + _243;
  _226->coeff = _244;

  <bb 45>:
  _227 = prephitmp_262->b_vbv;
  if (_227 == 0)
    goto <bb 51>;
  else
    goto <bb 46>;

  <bb 46>:
  _228 = rct_211->buffer_fill_final;
  _229 = rct_211->buffer_rate;
  _230 = (double) bits_75(D);
  _254 = _228 + _229;
  _232 = _254 - _230;
  rct_211->buffer_fill_final = _232;
  if (_232 < 0.0)
    goto <bb 47>;
  else
    goto <bb 52>;

  <bb 47>:
  x264_log (h_11(D), 1, "VBV underflow (%.0f bits)\n", _232);
  # DEBUG D#170 => rct_211->buffer_size
  _234 = rct_211->buffer_fill_final;
  # DEBUG v => _234
  # DEBUG f_min => 0.0
  # DEBUG f_max => D#170
  if (_234 >= 0.0)
    goto <bb 48>;
  else
    goto <bb 50>;

  <bb 48>:
  _233 = rct_211->buffer_size;

  <bb 49>:
  # _4 = PHI <_233(48), _280(52)>
  # _279 = PHI <_234(48), _232(52)>
  # DEBUG v => _279
  # DEBUG f_min => 0.0
  # DEBUG f_max => _4
  iftmp.16_235 = MIN_EXPR <_4, _279>;

  <bb 50>:
  # iftmp.16_236 = PHI <0.0(47), iftmp.16_235(49)>
  # DEBUG v => NULL
  # DEBUG f_min => NULL
  # DEBUG f_max => NULL
  rct_211->buffer_fill_final = iftmp.16_236;

  <bb 51>:
  # DEBUG h => NULL
  # DEBUG bits => NULL
  # DEBUG rct => NULL
  # DEBUG rcc => NULL
  return;

  <bb 52>:
  _280 = rct_211->buffer_size;
  # DEBUG v => _232
  # DEBUG f_min => 0.0
  # DEBUG f_max => _280
  goto <bb 49>;

}


