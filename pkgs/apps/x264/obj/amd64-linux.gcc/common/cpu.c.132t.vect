
;; Function x264_cpu_detect (x264_cpu_detect, funcdef_no=124, decl_uid=6143, cgraph_uid=124, symbol_order=168)


Analyzing loop at common/cpu.c:175
common/cpu.c:175:13: note: ===== analyze_loop_nest =====
common/cpu.c:175:13: note: === vect_analyze_loop_form ===
common/cpu.c:175:13: note: not vectorized: multiple nested loops.
common/cpu.c:175:13: note: bad loop form.

Analyzing loop at common/cpu.c:165
common/cpu.c:165:17: note: ===== analyze_loop_nest =====
common/cpu.c:165:17: note: === vect_analyze_loop_form ===
common/cpu.c:165:17: note: ===== analyze_loop_nest_1 =====
common/cpu.c:165:17: note: === vect_analyze_loop_form ===
common/cpu.c:165:17: note: not vectorized: control flow in loop.
common/cpu.c:165:17: note: bad inner-loop form.
common/cpu.c:165:17: note: not vectorized: Bad inner loop.
common/cpu.c:165:17: note: bad loop form.

Analyzing loop at common/cpu.c:167
common/cpu.c:167:30: note: ===== analyze_loop_nest =====
common/cpu.c:167:30: note: === vect_analyze_loop_form ===
common/cpu.c:167:30: note: not vectorized: control flow in loop.
common/cpu.c:167:30: note: bad loop form.
common/cpu.c:66:10: note: vectorized 0 loops in function.
x264_cpu_detect ()
{
  int j;
  int i;
  int max;
  uint32_t buf[4];
  static const char cache64_ids[22] = {34, 35, 37, 41, 44, 70, 71, 73, 96, 102, 103, 104, 120, 121, 122, 123, 124, 124, 127, -122, -121, 0};
  static const char cache32_ids[12] = {10, 12, 65, 66, 67, 68, 69, -126, -125, -124, -123, 0};
  int model;
  static const char __PRETTY_FUNCTION__[16] = "x264_cpu_detect";
  int cache;
  uint32_t vendor[4];
  uint32_t edx;
  uint32_t ecx;
  uint32_t ebx;
  uint32_t eax;
  uint32_t cpu;
  unsigned int ivtmp_15;
  _Bool _19;
  _Bool _22;
  uint32_t _23;
  signed int _27;
  _Bool _32;
  unsigned int eax.0_41;
  unsigned int edx.1_43;
  unsigned int _44;
  unsigned int _45;
  _Bool _46;
  unsigned int _47;
  unsigned int ecx.2_49;
  unsigned int _50;
  unsigned int _52;
  unsigned int _54;
  unsigned int _56;
  unsigned int _58;
  unsigned int _60;
  unsigned int eax.0_63;
  int iftmp.3_64;
  unsigned int edx.1_66;
  unsigned int _67;
  unsigned int _69;
  unsigned int ecx.2_70;
  unsigned int _71;
  int iftmp.5_75;
  unsigned int eax.0_77;
  unsigned int _78;
  unsigned int _79;
  unsigned int _80;
  unsigned int _81;
  unsigned int _82;
  unsigned int _83;
  unsigned int _84;
  unsigned int _85;
  unsigned int _86;
  unsigned int _87;
  _Bool _89;
  unsigned int pretmp_90;
  unsigned int _93;
  int iftmp.7_95;
  int iftmp.8_96;
  unsigned int _97;
  unsigned int ebx.9_99;
  unsigned int _100;
  unsigned int _101;
  _Bool _103;
  _Bool _104;
  _Bool _105;
  unsigned int ecx.2_107;
  int ecx.10_108;
  unsigned int _111;
  int _112;
  unsigned int _114;
  unsigned int prephitmp_119;
  int _126;
  int _127;
  char * _128;
  int _138;
  int _139;
  char * _140;
  unsigned int _143;
  struct _IO_FILE * stderr.13_150;
  unsigned int prephitmp_159;
  _Bool _160;
  unsigned int _170;
  unsigned int _171;
  unsigned int ivtmp_172;

  <bb 2>:
  # DEBUG cpu => 0
  vendor = {};
  x264_cpu_cpuid (0, &eax, &vendor, &MEM[(void *)&vendor + 8B], &MEM[(void *)&vendor + 4B]);
  eax.0_41 = eax;
  if (eax.0_41 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  goto <bb 60>;

  <bb 4>:
  x264_cpu_cpuid (1, &eax, &ebx, &ecx, &edx);
  edx.1_43 = edx;
  _44 = edx.1_43 & 8388608;
  if (_44 != 0)
    goto <bb 5>;
  else
    goto <bb 3>;

  <bb 5>:
  # DEBUG cpu => 8
  _45 = edx.1_43 & 33554432;
  if (_45 != 0)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:

  <bb 7>:
  # cpu_1 = PHI <8(6), 56(5)>
  # DEBUG cpu => cpu_1
  _47 = edx.1_43 & 67108864;
  if (_47 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  cpu_48 = cpu_1 | 64;
  # DEBUG cpu => cpu_48

  <bb 9>:
  # cpu_2 = PHI <cpu_1(7), cpu_48(8)>
  # DEBUG cpu => cpu_2
  ecx.2_49 = ecx;
  _50 = ecx.2_49 & 1;
  if (_50 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  cpu_51 = cpu_2 | 512;
  # DEBUG cpu => cpu_51

  <bb 11>:
  # cpu_3 = PHI <cpu_2(9), cpu_51(10)>
  # DEBUG cpu => cpu_3
  _52 = ecx.2_49 & 512;
  if (_52 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  cpu_53 = cpu_3 | 1024;
  # DEBUG cpu => cpu_53

  <bb 13>:
  # cpu_4 = PHI <cpu_3(11), cpu_53(12)>
  # DEBUG cpu => cpu_4
  _54 = ecx.2_49 & 524288;
  if (_54 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:
  cpu_55 = cpu_4 | 8192;
  # DEBUG cpu => cpu_55

  <bb 15>:
  # cpu_5 = PHI <cpu_4(13), cpu_55(14)>
  # DEBUG cpu => cpu_5
  _56 = ecx.2_49 & 1048576;
  if (_56 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  cpu_57 = cpu_5 | 16384;
  # DEBUG cpu => cpu_57

  <bb 17>:
  # cpu_6 = PHI <cpu_5(15), cpu_57(16)>
  # DEBUG cpu => cpu_6
  _58 = cpu_6 & 1024;
  if (_58 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  cpu_59 = cpu_6 | 256;
  # DEBUG cpu => cpu_59

  <bb 19>:
  # cpu_7 = PHI <cpu_6(17), cpu_59(18)>
  # DEBUG cpu => cpu_7
  _60 = cpu_7 & 8192;
  if (_60 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  cpu_61 = cpu_7 | 2048;
  # DEBUG cpu => cpu_61

  <bb 21>:
  # cpu_8 = PHI <cpu_7(19), cpu_61(20)>
  # DEBUG cpu => cpu_8
  x264_cpu_cpuid (2147483648, &eax, &ebx, &ecx, &edx);
  eax.0_63 = eax;
  # DEBUG max_extended_cap => (int) eax.0_63
  # DEBUG __s2_len => 12
  iftmp.3_64 = __builtin_strcmp (&vendor, "AuthenticAMD");
  _22 = eax.0_63 > 2147483648;
  _19 = iftmp.3_64 == 0;
  _46 = _19 & _22;
  if (_46 != 0)
    goto <bb 22>;
  else
    goto <bb 28>;

  <bb 22>:
  x264_cpu_cpuid (2147483649, &eax, &ebx, &ecx, &edx);
  edx.1_66 = edx;
  _67 = edx.1_66 & 4194304;
  if (_67 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  cpu_68 = cpu_8 | 16;
  # DEBUG cpu => cpu_68

  <bb 24>:
  # cpu_9 = PHI <cpu_8(22), cpu_68(23)>
  # DEBUG cpu => cpu_9
  _69 = cpu_9 & 64;
  if (_69 != 0)
    goto <bb 25>;
  else
    goto <bb 28>;

  <bb 25>:
  ecx.2_70 = ecx;
  _71 = ecx.2_70 & 64;
  if (_71 != 0)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  # DEBUG cpu => cpu_9 | 256
  cpu_72 = cpu_9 | 33024;
  # DEBUG cpu => cpu_72
  x264_cpu_mask_misalign_sse ();
  goto <bb 28>;

  <bb 27>:
  cpu_74 = cpu_9 | 128;
  # DEBUG cpu => cpu_74

  <bb 28>:
  # cpu_10 = PHI <cpu_74(27), cpu_8(21), cpu_9(24), cpu_72(26)>
  # DEBUG cpu => cpu_10
  # DEBUG __s2_len => 12
  iftmp.5_75 = __builtin_strcmp (&vendor, "GenuineIntel");
  if (iftmp.5_75 == 0)
    goto <bb 29>;
  else
    goto <bb 34>;

  <bb 29>:
  x264_cpu_cpuid (1, &eax, &ebx, &ecx, &edx);
  eax.0_77 = eax;
  _78 = eax.0_77 >> 8;
  _79 = _78 & 15;
  _80 = eax.0_77 >> 20;
  _81 = _80 & 255;
  _82 = _79 + _81;
  # DEBUG family => (int) _82
  # DEBUG D#6 => eax.0_77 >> 4
  # DEBUG D#5 => D#6 & 15
  # DEBUG D#4 => eax.0_77 >> 12
  # DEBUG D#3 => D#4 & 240
  # DEBUG D#2 => D#5 + D#3
  # DEBUG model => (int) D#2
  # DEBUG D#1 => (int) eax.0_77
  # DEBUG stepping => D#1 & 15
  if (_82 == 6)
    goto <bb 30>;
  else
    goto <bb 33>;

  <bb 30>:
  _85 = eax.0_77 >> 12;
  _86 = _85 & 240;
  _83 = eax.0_77 >> 4;
  _84 = _83 & 15;
  _87 = _84 + _86;
  _89 = _87 == 9;
  _170 = _87 + 4294967283;
  _32 = _170 <= 1;
  _160 = _32 | _89;
  if (_160 != 0)
    goto <bb 31>;
  else
    goto <bb 33>;

  <bb 31>:
  cpu_92 = cpu_10 & 4294966719;
  # DEBUG cpu => cpu_92
  _93 = cpu_10 & 9216;
  if (_93 != 0)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  __assert_fail ("!(cpu&(X264_CPU_SSSE3|X264_CPU_SSE4))", "common/cpu.c", 140, &__PRETTY_FUNCTION__);

  <bb 33>:
  # cpu_11 = PHI <cpu_92(31), cpu_10(29), cpu_10(30)>
  # DEBUG cpu => cpu_11
  # DEBUG __s2_len => 12
  iftmp.7_95 = __builtin_strcmp (&vendor, "GenuineIntel");
  if (iftmp.7_95 == 0)
    goto <bb 35>;
  else
    goto <bb 34>;

  <bb 34>:
  # cpu_30 = PHI <cpu_11(33), cpu_10(28)>
  # DEBUG cpu => cpu_30
  # DEBUG __s2_len => 12
  # DEBUG __s2_len => 12
  iftmp.8_96 = __builtin_strcmp (&vendor, "CyrixInstead");
  if (iftmp.8_96 == 0)
    goto <bb 35>;
  else
    goto <bb 60>;

  <bb 35>:
  # cpu_24 = PHI <cpu_11(33), cpu_30(34)>
  _97 = cpu_24 & 16384;
  if (_97 == 0)
    goto <bb 36>;
  else
    goto <bb 60>;

  <bb 36>:
  x264_cpu_cpuid (1, &eax, &ebx, &ecx, &edx);
  ebx.9_99 = ebx;
  _100 = ebx.9_99 & 65280;
  _101 = _100 >> 5;
  cache_102 = (int) _101;
  # DEBUG cache => cache_102
  _103 = cache_102 == 0;
  _104 = eax.0_63 > 2147483653;
  _105 = _103 & _104;
  if (_105 != 0)
    goto <bb 37>;
  else
    goto <bb 38>;

  <bb 37>:
  x264_cpu_cpuid (2147483654, &eax, &ebx, &ecx, &edx);
  ecx.2_107 = ecx;
  ecx.10_108 = (int) ecx.2_107;
  cache_109 = ecx.10_108 & 255;
  # DEBUG cache => cache_109

  <bb 38>:
  # cache_13 = PHI <cache_102(36), cache_109(37)>
  # DEBUG cache => cache_13
  if (cache_13 == 0)
    goto <bb 39>;
  else
    goto <bb 55>;

  <bb 39>:

  <bb 40>:
  # cache_14 = PHI <0(39), cache_194(53)>
  # i_21 = PHI <0(39), i_146(53)>
  # DEBUG i => i_21
  # DEBUG cache => cache_14
  x264_cpu_cpuid (2, &buf, &MEM[(void *)&buf + 4B], &MEM[(void *)&buf + 8B], &MEM[(void *)&buf + 12B]);
  _111 = buf[0];
  _112 = (int) _111;
  max_113 = _112 & 255;
  # DEBUG max => max_113
  _114 = _111 & 4294967040;
  buf[0] = _114;
  # DEBUG j => 0
  # DEBUG j => 0
  # DEBUG cache => cache_14

  <bb 41>:
  # cache_200 = PHI <cache_18(51), cache_14(40)>
  # j_199 = PHI <j_145(51), 0(40)>
  # prephitmp_159 = PHI <pretmp_90(51), _114(40)>
  # ivtmp_172 = PHI <ivtmp_15(51), 4(40)>
  # DEBUG j => j_199
  # DEBUG cache => cache_200
  # DEBUG cache => cache_200
  _27 = (signed int) prephitmp_159;
  if (_27 > 0)
    goto <bb 42>;
  else
    goto <bb 50>;

  <bb 42>:

  <bb 43>:
  # cache_175 = PHI <cache_200(42), cache_16(49)>
  # _171 = PHI <prephitmp_159(42), _143(49)>
  # prephitmp_119 = PHI <prephitmp_159(42), _143(49)>
  # DEBUG cache => cache_175
  # DEBUG cache => cache_175
  _126 = (int) _171;
  _127 = _126 & 255;
  _128 = __builtin_strchr (&cache32_ids, _127);
  if (_128 != 0B)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:

  <bb 45>:
  # cache_121 = PHI <32(44), cache_175(43)>
  # DEBUG cache => cache_121
  _138 = (int) prephitmp_119;
  _139 = _138 & 255;
  _140 = __builtin_strchr (&cache64_ids, _139);
  if (_140 != 0B)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:

  <bb 47>:
  # cache_16 = PHI <cache_121(45), 64(46)>
  # DEBUG cache => cache_16
  _143 = prephitmp_119 >> 8;
  buf[j_199] = _143;
  # DEBUG cache => cache_16
  if (_143 != 0)
    goto <bb 49>;
  else
    goto <bb 48>;

  <bb 48>:
  # cache_130 = PHI <cache_16(47)>
  goto <bb 50>;

  <bb 49>:
  goto <bb 43>;

  <bb 50>:
  # cache_18 = PHI <cache_200(41), cache_130(48)>
  # DEBUG cache => cache_18
  j_145 = j_199 + 1;
  # DEBUG j => j_145
  # DEBUG j => j_145
  # DEBUG cache => cache_18
  ivtmp_15 = ivtmp_172 - 1;
  if (ivtmp_15 != 0)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 51>:
  pretmp_90 = buf[j_145];
  goto <bb 41>;

  <bb 52>:
  # cache_194 = PHI <cache_18(50)>
  i_146 = i_21 + 1;
  # DEBUG i => i_146
  if (max_113 > i_146)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  goto <bb 40>;

  <bb 54>:
  # cache_123 = PHI <cache_194(52)>
  buf ={v} {CLOBBER};

  <bb 55>:
  # cache_20 = PHI <cache_13(38), cache_123(54)>
  # DEBUG cache => cache_20
  if (cache_20 == 32)
    goto <bb 56>;
  else
    goto <bb 57>;

  <bb 56>:
  cpu_148 = cpu_24 | 1;
  # DEBUG cpu => cpu_148
  goto <bb 60>;

  <bb 57>:
  if (cache_20 == 64)
    goto <bb 58>;
  else
    goto <bb 59>;

  <bb 58>:
  cpu_149 = cpu_24 | 2;
  # DEBUG cpu => cpu_149
  goto <bb 60>;

  <bb 59>:
  stderr.13_150 = stderr;
  # DEBUG __stream => stderr.13_150
  # DEBUG __fmt => "x264 [warning]: unable to determine cacheline size\n"
  __builtin_fwrite ("x264 [warning]: unable to determine cacheline size\n", 1, 51, stderr.13_150);

  <bb 60>:
  # _23 = PHI <0(3), cpu_148(56), cpu_24(35), cpu_30(34), cpu_24(59), cpu_149(58)>
  eax ={v} {CLOBBER};
  ebx ={v} {CLOBBER};
  ecx ={v} {CLOBBER};
  edx ={v} {CLOBBER};
  vendor ={v} {CLOBBER};
  return _23;

}



;; Function x264_cpu_num_processors (x264_cpu_num_processors, funcdef_no=125, decl_uid=6145, cgraph_uid=125, symbol_order=169)


Analyzing loop at common/cpu.c:286
common/cpu.c:286:5: note: ===== analyze_loop_nest =====
common/cpu.c:286:5: note: === vect_analyze_loop_form ===
common/cpu.c:286:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [127, + , 4294967295] != 0
  bounds on difference of bases: -127 ... -127
  result:
    # of iterations 127, bounded by 127
common/cpu.c:286:5: note: === vect_analyze_data_refs ===
Creating dr for *_8
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_8
Creating dr for *_8
analyze_innermost: success.
	base_address: &p_aff + _7
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 128
	base_object: *_8
common/cpu.c:286:5: note: got vectype for stmt: _9 = *_8;
vector(16) unsigned char
Applying pattern match.pd:49, generic-match.c:3223
common/cpu.c:286:5: note: not vectorized: not suitable for gather load _9 = *_8;

common/cpu.c:286:5: note: bad data references.
common/cpu.c:272:5: note: vectorized 0 loops in function.
x264_cpu_num_processors ()
{
  struct cpu_set_t p_aff;
  int np;
  unsigned int bit;
  unsigned int _6;
  sizetype _7;
  uint8_t * _8;
  unsigned char _9;
  int _10;
  unsigned int _11;
  int _12;
  int _13;
  unsigned int ivtmp_26;
  unsigned int ivtmp_27;

  <bb 2>:
  # DEBUG __dest => &p_aff
  # DEBUG __ch => 0
  # DEBUG __len => 128
  __builtin_memset (&p_aff, 0, 128);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  sched_getaffinity (0, 128, &p_aff);
  # DEBUG np => 0
  # DEBUG bit => 0
  # DEBUG np => 0
  # DEBUG bit => 0

  <bb 3>:
  # bit_20 = PHI <bit_15(4), 0(2)>
  # np_21 = PHI <np_14(4), 0(2)>
  # ivtmp_27 = PHI <ivtmp_26(4), 128(2)>
  # DEBUG np => np_21
  # DEBUG bit => bit_20
  _6 = bit_20 >> 3;
  _7 = (sizetype) _6;
  _8 = &p_aff + _7;
  _9 = *_8;
  _10 = (int) _9;
  _11 = bit_20 & 7;
  _12 = _10 >> _11;
  _13 = _12 & 1;
  np_14 = _13 + np_21;
  # DEBUG np => np_14
  bit_15 = bit_20 + 1;
  # DEBUG bit => bit_15
  # DEBUG np => np_14
  # DEBUG bit => bit_15
  ivtmp_26 = ivtmp_27 - 1;
  if (ivtmp_26 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # np_28 = PHI <np_14(3)>
  p_aff ={v} {CLOBBER};
  return np_28;

}


