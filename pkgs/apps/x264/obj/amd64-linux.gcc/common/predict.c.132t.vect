
;; Function predict_16x16_dc (predict_16x16_dc, funcdef_no=115, decl_uid=5762, cgraph_uid=115, symbol_order=158)


Analyzing loop at common/predict.c:64
common/predict.c:64:5: note: ===== analyze_loop_nest =====
common/predict.c:64:5: note: === vect_analyze_loop_form ===
common/predict.c:64:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/predict.c:64:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_37]
analyze_innermost: success.
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_9(D)]
	Access function 0: {0B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_37 + 4B]
analyze_innermost: success.
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_9(D)]
	Access function 0: {4B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_37 + 8B]
analyze_innermost: success.
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_9(D)]
	Access function 0: {8B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_37 + 12B]
analyze_innermost: success.
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: 12
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_9(D)]
	Access function 0: {12B, +, 32}_2
common/predict.c:64:5: note: got vectype for stmt: MEM[(uint32_t *)src_37] = dc_24;
vector(4) unsigned int
common/predict.c:64:5: note: got vectype for stmt: MEM[(uint32_t *)src_37 + 4B] = dc_24;
vector(4) unsigned int
common/predict.c:64:5: note: got vectype for stmt: MEM[(uint32_t *)src_37 + 8B] = dc_24;
vector(4) unsigned int
common/predict.c:64:5: note: got vectype for stmt: MEM[(uint32_t *)src_37 + 12B] = dc_24;
vector(4) unsigned int
common/predict.c:64:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:64:5: note: Analyze phi: src_37 = PHI <src_29(7), src_9(D)(5)>

common/predict.c:64:5: note: Access function of PHI: {src_9(D), +, 32}_2
common/predict.c:64:5: note: step: 32,  init: src_9(D)
common/predict.c:64:5: note: Detected induction.
common/predict.c:64:5: note: Analyze phi: i_40 = PHI <i_30(7), 0(5)>

common/predict.c:64:5: note: Access function of PHI: {0, +, 1}_2
common/predict.c:64:5: note: step: 1,  init: 0
common/predict.c:64:5: note: Detected induction.
common/predict.c:64:5: note: Analyze phi: .MEM_41 = PHI <.MEM_28(7), .MEM_11(D)(5)>

common/predict.c:64:5: note: Analyze phi: ivtmp_54 = PHI <ivtmp_53(7), 16(5)>

common/predict.c:64:5: note: Access function of PHI: {16, +, 4294967295}_2
common/predict.c:64:5: note: step: 4294967295,  init: 16
common/predict.c:64:5: note: Detected induction.
common/predict.c:64:5: note: === vect_pattern_recog ===
common/predict.c:64:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:64:5: note: Detected interleaving MEM[(uint32_t *)src_37] and MEM[(uint32_t *)src_37 + 4B]
common/predict.c:64:5: note: Detected interleaving MEM[(uint32_t *)src_37] and MEM[(uint32_t *)src_37 + 8B]
common/predict.c:64:5: note: Detected interleaving MEM[(uint32_t *)src_37] and MEM[(uint32_t *)src_37 + 12B]
common/predict.c:64:5: note: interleaved store with gaps
common/predict.c:64:5: note: not vectorized: complicated access pattern.
common/predict.c:64:5: note: bad data access.

Analyzing loop at common/predict.c:57
common/predict.c:57:5: note: ===== analyze_loop_nest =====
common/predict.c:57:5: note: === vect_analyze_loop_form ===
common/predict.c:57:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/predict.c:57:5: note: === vect_analyze_data_refs ===
Creating dr for *_10
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: -1(OVF)
	step: 32
	aligned to: 128
	base_object: *src_9(D)
	Access function 0: {-1B, +, 32}_1
Creating dr for *_17
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: -32(OVF)
	step: 1
	aligned to: 128
	base_object: *src_9(D)
	Access function 0: {-32B, +, 1}_1
common/predict.c:57:5: note: got vectype for stmt: _12 = *_10;
vector(16) unsigned char
common/predict.c:57:5: note: got vectype for stmt: _18 = *_17;
vector(16) unsigned char
common/predict.c:57:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:57:5: note: Analyze phi: dc_38 = PHI <dc_20(4), 0(2)>

common/predict.c:57:5: note: Access function of PHI: {0, +, _31}_1
common/predict.c:57:5: note: step: _31,  init: 0
common/predict.c:57:5: note: step unknown.
common/predict.c:57:5: note: Analyze phi: i_39 = PHI <i_21(4), 0(2)>

common/predict.c:57:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:57:5: note: step: 1,  init: 0
common/predict.c:57:5: note: Detected induction.
common/predict.c:57:5: note: Analyze phi: ivtmp_52 = PHI <ivtmp_51(4), 16(2)>

common/predict.c:57:5: note: Access function of PHI: {16, +, 4294967295}_1
common/predict.c:57:5: note: step: 4294967295,  init: 16
common/predict.c:57:5: note: Detected induction.
common/predict.c:57:5: note: Analyze phi: dc_38 = PHI <dc_20(4), 0(2)>

common/predict.c:57:5: note: detected reduction: dc_20 = _31 + dc_38;

common/predict.c:57:5: note: Detected reduction.
common/predict.c:57:5: note: === vect_pattern_recog ===
common/predict.c:57:5: note: vect_is_simple_use: operand i_39
common/predict.c:57:5: note: def_stmt: i_39 = PHI <i_21(4), 0(2)>
common/predict.c:57:5: note: type of def: 4.
common/predict.c:57:5: note: vect_is_simple_use: operand _31
common/predict.c:57:5: note: def_stmt: _31 = _13 + _19;
common/predict.c:57:5: note: type of def: 3.
common/predict.c:57:5: note: vect_is_simple_use: operand _31
common/predict.c:57:5: note: def_stmt: _31 = _13 + _19;
common/predict.c:57:5: note: type of def: 3.
common/predict.c:57:5: note: vect_is_simple_use: operand _31
common/predict.c:57:5: note: def_stmt: _31 = _13 + _19;
common/predict.c:57:5: note: type of def: 3.
common/predict.c:57:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:57:5: note: Detected single element interleaving *_10 step 32
common/predict.c:57:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:57:5: note: === vect_mark_stmts_to_be_vectorized ===
common/predict.c:57:5: note: init: phi relevant? dc_38 = PHI <dc_20(4), 0(2)>
common/predict.c:57:5: note: init: phi relevant? i_39 = PHI <i_21(4), 0(2)>
common/predict.c:57:5: note: init: phi relevant? ivtmp_52 = PHI <ivtmp_51(4), 16(2)>
common/predict.c:57:5: note: init: stmt relevant? # DEBUG i => i_39
common/predict.c:57:5: note: init: stmt relevant? # DEBUG dc => dc_38
common/predict.c:57:5: note: init: stmt relevant? _6 = i_39 * 32;
common/predict.c:57:5: note: init: stmt relevant? _7 = _6 + -1;
common/predict.c:57:5: note: init: stmt relevant? _8 = (sizetype) _7;
common/predict.c:57:5: note: init: stmt relevant? _10 = src_9(D) + _8;
common/predict.c:57:5: note: init: stmt relevant? _12 = *_10;
common/predict.c:57:5: note: init: stmt relevant? _13 = (unsigned int) _12;
common/predict.c:57:5: note: init: stmt relevant? # DEBUG dc => dc_38 + _13
common/predict.c:57:5: note: init: stmt relevant? _15 = (sizetype) i_39;
common/predict.c:57:5: note: init: stmt relevant? _16 = _15 + 18446744073709551584;
common/predict.c:57:5: note: init: stmt relevant? _17 = src_9(D) + _16;
common/predict.c:57:5: note: init: stmt relevant? _18 = *_17;
common/predict.c:57:5: note: init: stmt relevant? _19 = (unsigned int) _18;
common/predict.c:57:5: note: init: stmt relevant? _31 = _13 + _19;
common/predict.c:57:5: note: init: stmt relevant? dc_20 = _31 + dc_38;
common/predict.c:57:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:57:5: note: mark relevant 0, live 1.
common/predict.c:57:5: note: init: stmt relevant? # DEBUG dc => dc_20
common/predict.c:57:5: note: init: stmt relevant? i_21 = i_39 + 1;
common/predict.c:57:5: note: init: stmt relevant? # DEBUG i => i_21
common/predict.c:57:5: note: init: stmt relevant? # DEBUG i => i_21
common/predict.c:57:5: note: init: stmt relevant? # DEBUG dc => dc_20
common/predict.c:57:5: note: init: stmt relevant? ivtmp_51 = ivtmp_52 - 1;
common/predict.c:57:5: note: init: stmt relevant? if (ivtmp_51 != 0)
common/predict.c:57:5: note: worklist: examine stmt: dc_20 = _31 + dc_38;
common/predict.c:57:5: note: vect_is_simple_use: operand _31
common/predict.c:57:5: note: def_stmt: _31 = _13 + _19;
common/predict.c:57:5: note: type of def: 3.
common/predict.c:57:5: note: mark relevant 3, live 0.
common/predict.c:57:5: note: vect_is_simple_use: operand dc_38
common/predict.c:57:5: note: def_stmt: dc_38 = PHI <dc_20(4), 0(2)>
common/predict.c:57:5: note: type of def: 5.
common/predict.c:57:5: note: mark relevant 3, live 0.
common/predict.c:57:5: note: worklist: examine stmt: dc_38 = PHI <dc_20(4), 0(2)>
common/predict.c:57:5: note: vect_is_simple_use: operand dc_20
common/predict.c:57:5: note: def_stmt: dc_20 = _31 + dc_38;
common/predict.c:57:5: note: type of def: 5.
common/predict.c:57:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:57:5: note: vect_is_simple_use: operand 0
common/predict.c:57:5: note: worklist: examine stmt: _31 = _13 + _19;
common/predict.c:57:5: note: vect_is_simple_use: operand _13
common/predict.c:57:5: note: def_stmt: _13 = (unsigned int) _12;
common/predict.c:57:5: note: type of def: 3.
common/predict.c:57:5: note: mark relevant 3, live 0.
common/predict.c:57:5: note: vect_is_simple_use: operand _19
common/predict.c:57:5: note: def_stmt: _19 = (unsigned int) _18;
common/predict.c:57:5: note: type of def: 3.
common/predict.c:57:5: note: mark relevant 3, live 0.
common/predict.c:57:5: note: worklist: examine stmt: _19 = (unsigned int) _18;
common/predict.c:57:5: note: vect_is_simple_use: operand _18
common/predict.c:57:5: note: def_stmt: _18 = *_17;
common/predict.c:57:5: note: type of def: 3.
common/predict.c:57:5: note: mark relevant 3, live 0.
common/predict.c:57:5: note: worklist: examine stmt: _18 = *_17;
common/predict.c:57:5: note: worklist: examine stmt: _13 = (unsigned int) _12;
common/predict.c:57:5: note: vect_is_simple_use: operand _12
common/predict.c:57:5: note: def_stmt: _12 = *_10;
common/predict.c:57:5: note: type of def: 3.
common/predict.c:57:5: note: mark relevant 3, live 0.
common/predict.c:57:5: note: worklist: examine stmt: _12 = *_10;
common/predict.c:57:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _12 = *_10;
  stmt_b: _18 = *_17;
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 32}_1)
  (chrec_b = {-32B, +, 1}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _12 = *_10;
  stmt_b: _12 = *_10;
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 32}_1)
  (chrec_b = {-1B, +, 32}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _18 = *_17;
  stmt_b: _18 = *_17;
(analyze_overlapping_iterations 
  (chrec_a = {-32B, +, 1}_1)
  (chrec_b = {-32B, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/predict.c:57:5: note: === vect_determine_vectorization_factor ===
common/predict.c:57:5: note: ==> examining phi: dc_38 = PHI <dc_20(4), 0(2)>

common/predict.c:57:5: note: get vectype for scalar type:  uint32_t
common/predict.c:57:5: note: vectype: vector(4) unsigned int
common/predict.c:57:5: note: nunits = 4
common/predict.c:57:5: note: ==> examining phi: i_39 = PHI <i_21(4), 0(2)>

common/predict.c:57:5: note: ==> examining phi: ivtmp_52 = PHI <ivtmp_51(4), 16(2)>

common/predict.c:57:5: note: ==> examining statement: # DEBUG i => i_39

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: # DEBUG dc => dc_38

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: _6 = i_39 * 32;

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: _7 = _6 + -1;

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: _8 = (sizetype) _7;

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: _10 = src_9(D) + _8;

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: _12 = *_10;

common/predict.c:57:5: note: get vectype for scalar type:  unsigned char
common/predict.c:57:5: note: vectype: vector(16) unsigned char
common/predict.c:57:5: note: nunits = 16
common/predict.c:57:5: note: ==> examining statement: _13 = (unsigned int) _12;

common/predict.c:57:5: note: get vectype for scalar type:  unsigned int
common/predict.c:57:5: note: vectype: vector(4) unsigned int
common/predict.c:57:5: note: get vectype for scalar type:  unsigned char
common/predict.c:57:5: note: vectype: vector(16) unsigned char
common/predict.c:57:5: note: nunits = 16
common/predict.c:57:5: note: ==> examining statement: # DEBUG dc => dc_38 + _13

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: _15 = (sizetype) i_39;

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: _16 = _15 + 18446744073709551584;

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: _17 = src_9(D) + _16;

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: _18 = *_17;

common/predict.c:57:5: note: get vectype for scalar type:  unsigned char
common/predict.c:57:5: note: vectype: vector(16) unsigned char
common/predict.c:57:5: note: nunits = 16
common/predict.c:57:5: note: ==> examining statement: _19 = (unsigned int) _18;

common/predict.c:57:5: note: get vectype for scalar type:  unsigned int
common/predict.c:57:5: note: vectype: vector(4) unsigned int
common/predict.c:57:5: note: get vectype for scalar type:  unsigned char
common/predict.c:57:5: note: vectype: vector(16) unsigned char
common/predict.c:57:5: note: nunits = 16
common/predict.c:57:5: note: ==> examining statement: _31 = _13 + _19;

common/predict.c:57:5: note: get vectype for scalar type:  unsigned int
common/predict.c:57:5: note: vectype: vector(4) unsigned int
common/predict.c:57:5: note: get vectype for scalar type:  unsigned int
common/predict.c:57:5: note: vectype: vector(4) unsigned int
common/predict.c:57:5: note: nunits = 4
common/predict.c:57:5: note: ==> examining statement: dc_20 = _31 + dc_38;

common/predict.c:57:5: note: get vectype for scalar type:  uint32_t
common/predict.c:57:5: note: vectype: vector(4) unsigned int
common/predict.c:57:5: note: get vectype for scalar type:  uint32_t
common/predict.c:57:5: note: vectype: vector(4) unsigned int
common/predict.c:57:5: note: nunits = 4
common/predict.c:57:5: note: ==> examining statement: # DEBUG dc => dc_20

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: i_21 = i_39 + 1;

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: # DEBUG i => i_21

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: # DEBUG i => i_21

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: # DEBUG dc => dc_20

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: ivtmp_51 = ivtmp_52 - 1;

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: ==> examining statement: if (ivtmp_51 != 0)

common/predict.c:57:5: note: skip.
common/predict.c:57:5: note: vectorization factor = 16
common/predict.c:57:5: note: === vect_analyze_data_refs_alignment ===
common/predict.c:57:5: note: vect_compute_data_ref_alignment:
common/predict.c:57:5: note: can't force alignment of ref: *_10
common/predict.c:57:5: note: vect_compute_data_ref_alignment:
common/predict.c:57:5: note: can't force alignment of ref: *_17
common/predict.c:57:5: note: === vect_prune_runtime_alias_test_list ===
common/predict.c:57:5: note: === vect_enhance_data_refs_alignment ===
common/predict.c:57:5: note: vector alignment may not be reachable
common/predict.c:57:5: note: vect_can_advance_ivs_p:
common/predict.c:57:5: note: Analyze phi: dc_38 = PHI <dc_20(4), 0(2)>

common/predict.c:57:5: note: reduc phi. skip.
common/predict.c:57:5: note: Analyze phi: i_39 = PHI <i_21(4), 0(2)>

common/predict.c:57:5: note: Analyze phi: ivtmp_52 = PHI <ivtmp_51(4), 16(2)>

common/predict.c:57:5: note: Vectorizing an unaligned access.
common/predict.c:57:5: note: Vectorizing an unaligned access.
common/predict.c:57:5: note: === vect_analyze_slp ===
common/predict.c:57:5: note: === vect_make_slp_decision ===
common/predict.c:57:5: note: === vect_detect_hybrid_slp ===
common/predict.c:57:5: note: === vect_analyze_loop_operations ===
common/predict.c:57:5: note: examining phi: dc_38 = PHI <dc_20(4), 0(2)>

common/predict.c:57:5: note: examining phi: i_39 = PHI <i_21(4), 0(2)>

common/predict.c:57:5: note: examining phi: ivtmp_52 = PHI <ivtmp_51(4), 16(2)>

common/predict.c:57:5: note: ==> examining statement: # DEBUG i => i_39
common/predict.c:57:5: note: irrelevant.
common/predict.c:57:5: note: ==> examining statement: # DEBUG dc => dc_38
common/predict.c:57:5: note: irrelevant.
common/predict.c:57:5: note: ==> examining statement: _6 = i_39 * 32;
common/predict.c:57:5: note: irrelevant.
common/predict.c:57:5: note: ==> examining statement: _7 = _6 + -1;
common/predict.c:57:5: note: irrelevant.
common/predict.c:57:5: note: ==> examining statement: _8 = (sizetype) _7;
common/predict.c:57:5: note: irrelevant.
common/predict.c:57:5: note: ==> examining statement: _10 = src_9(D) + _8;
common/predict.c:57:5: note: irrelevant.
common/predict.c:57:5: note: ==> examining statement: _12 = *_10;
common/predict.c:57:5: note: vect_is_simple_use: operand *_10
common/predict.c:57:5: note: not ssa-name.
common/predict.c:57:5: note: use not simple.
common/predict.c:57:5: note: vect_is_simple_use: operand *_10
common/predict.c:57:5: note: not ssa-name.
common/predict.c:57:5: note: use not simple.
common/predict.c:57:5: note: single-element interleaving not supported for not adjacent vector loads
common/predict.c:57:5: note: not vectorized: relevant stmt not supported: _12 = *_10;
common/predict.c:57:5: note: bad operation or unsupported loop bound.
common/predict.c:52:13: note: vectorized 0 loops in function.
predict_16x16_dc (uint8_t * src)
{
  int i;
  uint32_t dc;
  int _6;
  int _7;
  sizetype _8;
  uint8_t * _10;
  unsigned char _12;
  unsigned int _13;
  sizetype _15;
  sizetype _16;
  uint8_t * _17;
  unsigned char _18;
  unsigned int _19;
  unsigned int _22;
  unsigned int _23;
  unsigned int _31;
  unsigned int ivtmp_51;
  unsigned int ivtmp_52;
  unsigned int ivtmp_53;
  unsigned int ivtmp_54;

  <bb 2>:
  # DEBUG dc => 0
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG dc => 0

  <bb 3>:
  # dc_38 = PHI <dc_20(4), 0(2)>
  # i_39 = PHI <i_21(4), 0(2)>
  # ivtmp_52 = PHI <ivtmp_51(4), 16(2)>
  # DEBUG i => i_39
  # DEBUG dc => dc_38
  _6 = i_39 * 32;
  _7 = _6 + -1;
  _8 = (sizetype) _7;
  _10 = src_9(D) + _8;
  _12 = *_10;
  _13 = (unsigned int) _12;
  # DEBUG dc => dc_38 + _13
  _15 = (sizetype) i_39;
  _16 = _15 + 18446744073709551584;
  _17 = src_9(D) + _16;
  _18 = *_17;
  _19 = (unsigned int) _18;
  _31 = _13 + _19;
  dc_20 = _31 + dc_38;
  # DEBUG dc => dc_20
  i_21 = i_39 + 1;
  # DEBUG i => i_21
  # DEBUG i => i_21
  # DEBUG dc => dc_20
  ivtmp_51 = ivtmp_52 - 1;
  if (ivtmp_51 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # dc_55 = PHI <dc_20(3)>
  _22 = dc_55 + 16;
  _23 = _22 >> 5;
  dc_24 = _23 * 16843009;
  # DEBUG dc => dc_24
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG src => src_9(D)

  <bb 6>:
  # src_37 = PHI <src_29(7), src_9(D)(5)>
  # i_40 = PHI <i_30(7), 0(5)>
  # ivtmp_54 = PHI <ivtmp_53(7), 16(5)>
  # DEBUG i => i_40
  # DEBUG src => src_37
  # DEBUG p => src_37
  # DEBUG p => src_37 + 4
  MEM[(uint32_t *)src_37] = dc_24;
  # DEBUG D#1 => &MEM[(void *)src_37 + 8B]
  # DEBUG p => D#1
  MEM[(uint32_t *)src_37 + 4B] = dc_24;
  # DEBUG D#2 => &MEM[(void *)src_37 + 12B]
  # DEBUG p => D#2
  MEM[(uint32_t *)src_37 + 8B] = dc_24;
  # DEBUG p => D#2 + 4
  MEM[(uint32_t *)src_37 + 12B] = dc_24;
  src_29 = src_37 + 32;
  # DEBUG src => src_29
  i_30 = i_40 + 1;
  # DEBUG i => i_30
  # DEBUG i => i_30
  # DEBUG src => src_29
  ivtmp_53 = ivtmp_54 - 1;
  if (ivtmp_53 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  return;

}



;; Function predict_16x16_dc_left (predict_16x16_dc_left, funcdef_no=116, decl_uid=5774, cgraph_uid=116, symbol_order=159)


Analyzing loop at common/predict.c:77
common/predict.c:77:5: note: ===== analyze_loop_nest =====
common/predict.c:77:5: note: === vect_analyze_loop_form ===
common/predict.c:77:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/predict.c:77:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_31]
analyze_innermost: success.
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_9(D)]
	Access function 0: {0B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_31 + 4B]
analyze_innermost: success.
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_9(D)]
	Access function 0: {4B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_31 + 8B]
analyze_innermost: success.
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_9(D)]
	Access function 0: {8B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_31 + 12B]
analyze_innermost: success.
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: 12
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_9(D)]
	Access function 0: {12B, +, 32}_2
common/predict.c:77:5: note: got vectype for stmt: MEM[(uint32_t *)src_31] = dc_18;
vector(4) unsigned int
common/predict.c:77:5: note: got vectype for stmt: MEM[(uint32_t *)src_31 + 4B] = dc_18;
vector(4) unsigned int
common/predict.c:77:5: note: got vectype for stmt: MEM[(uint32_t *)src_31 + 8B] = dc_18;
vector(4) unsigned int
common/predict.c:77:5: note: got vectype for stmt: MEM[(uint32_t *)src_31 + 12B] = dc_18;
vector(4) unsigned int
common/predict.c:77:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:77:5: note: Analyze phi: src_31 = PHI <src_23(7), src_9(D)(5)>

common/predict.c:77:5: note: Access function of PHI: {src_9(D), +, 32}_2
common/predict.c:77:5: note: step: 32,  init: src_9(D)
common/predict.c:77:5: note: Detected induction.
common/predict.c:77:5: note: Analyze phi: i_34 = PHI <i_24(7), 0(5)>

common/predict.c:77:5: note: Access function of PHI: {0, +, 1}_2
common/predict.c:77:5: note: step: 1,  init: 0
common/predict.c:77:5: note: Detected induction.
common/predict.c:77:5: note: Analyze phi: .MEM_35 = PHI <.MEM_22(7), .MEM_11(D)(5)>

common/predict.c:77:5: note: Analyze phi: ivtmp_38 = PHI <ivtmp_37(7), 16(5)>

common/predict.c:77:5: note: Access function of PHI: {16, +, 4294967295}_2
common/predict.c:77:5: note: step: 4294967295,  init: 16
common/predict.c:77:5: note: Detected induction.
common/predict.c:77:5: note: === vect_pattern_recog ===
common/predict.c:77:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:77:5: note: Detected interleaving MEM[(uint32_t *)src_31] and MEM[(uint32_t *)src_31 + 4B]
common/predict.c:77:5: note: Detected interleaving MEM[(uint32_t *)src_31] and MEM[(uint32_t *)src_31 + 8B]
common/predict.c:77:5: note: Detected interleaving MEM[(uint32_t *)src_31] and MEM[(uint32_t *)src_31 + 12B]
common/predict.c:77:5: note: interleaved store with gaps
common/predict.c:77:5: note: not vectorized: complicated access pattern.
common/predict.c:77:5: note: bad data access.

Analyzing loop at common/predict.c:71
common/predict.c:71:5: note: ===== analyze_loop_nest =====
common/predict.c:71:5: note: === vect_analyze_loop_form ===
common/predict.c:71:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/predict.c:71:5: note: === vect_analyze_data_refs ===
Creating dr for *_10
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: -1(OVF)
	step: 32
	aligned to: 128
	base_object: *src_9(D)
	Access function 0: {-1B, +, 32}_1
common/predict.c:71:5: note: got vectype for stmt: _12 = *_10;
vector(16) unsigned char
common/predict.c:71:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:71:5: note: Analyze phi: dc_32 = PHI <dc_14(4), 0(2)>

common/predict.c:71:5: note: Access function of PHI: {0, +, _13}_1
common/predict.c:71:5: note: step: _13,  init: 0
common/predict.c:71:5: note: step unknown.
common/predict.c:71:5: note: Analyze phi: i_33 = PHI <i_15(4), 0(2)>

common/predict.c:71:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:71:5: note: step: 1,  init: 0
common/predict.c:71:5: note: Detected induction.
common/predict.c:71:5: note: Analyze phi: ivtmp_36 = PHI <ivtmp_30(4), 16(2)>

common/predict.c:71:5: note: Access function of PHI: {16, +, 4294967295}_1
common/predict.c:71:5: note: step: 4294967295,  init: 16
common/predict.c:71:5: note: Detected induction.
common/predict.c:71:5: note: Analyze phi: dc_32 = PHI <dc_14(4), 0(2)>

common/predict.c:71:5: note: detected reduction: dc_14 = _13 + dc_32;

common/predict.c:71:5: note: Detected reduction.
common/predict.c:71:5: note: === vect_pattern_recog ===
common/predict.c:71:5: note: vect_is_simple_use: operand i_33
common/predict.c:71:5: note: def_stmt: i_33 = PHI <i_15(4), 0(2)>
common/predict.c:71:5: note: type of def: 4.
common/predict.c:71:5: note: vect_is_simple_use: operand _13
common/predict.c:71:5: note: def_stmt: _13 = (unsigned int) _12;
common/predict.c:71:5: note: type of def: 3.
common/predict.c:71:5: note: vect_is_simple_use: operand _12
common/predict.c:71:5: note: def_stmt: _12 = *_10;
common/predict.c:71:5: note: type of def: 3.
common/predict.c:71:5: note: vect_recog_widen_sum_pattern: detected: patt_29 = _12 w+ dc_32;

common/predict.c:71:5: note: vect_is_simple_use: operand _13
common/predict.c:71:5: note: def_stmt: _13 = (unsigned int) _12;
common/predict.c:71:5: note: type of def: 3.
common/predict.c:71:5: note: vect_is_simple_use: operand _12
common/predict.c:71:5: note: def_stmt: _12 = *_10;
common/predict.c:71:5: note: type of def: 3.
common/predict.c:71:5: note: vect_is_simple_use: operand _13
common/predict.c:71:5: note: def_stmt: _13 = (unsigned int) _12;
common/predict.c:71:5: note: type of def: 3.
common/predict.c:71:5: note: vect_is_simple_use: operand _12
common/predict.c:71:5: note: def_stmt: _12 = *_10;
common/predict.c:71:5: note: type of def: 3.
common/predict.c:71:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:71:5: note: Detected single element interleaving *_10 step 32
common/predict.c:71:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:71:5: note: === vect_mark_stmts_to_be_vectorized ===
common/predict.c:71:5: note: init: phi relevant? dc_32 = PHI <dc_14(4), 0(2)>
common/predict.c:71:5: note: init: phi relevant? i_33 = PHI <i_15(4), 0(2)>
common/predict.c:71:5: note: init: phi relevant? ivtmp_36 = PHI <ivtmp_30(4), 16(2)>
common/predict.c:71:5: note: init: stmt relevant? # DEBUG i => i_33
common/predict.c:71:5: note: init: stmt relevant? # DEBUG dc => dc_32
common/predict.c:71:5: note: init: stmt relevant? _6 = i_33 * 32;
common/predict.c:71:5: note: init: stmt relevant? _7 = _6 + -1;
common/predict.c:71:5: note: init: stmt relevant? _8 = (sizetype) _7;
common/predict.c:71:5: note: init: stmt relevant? _10 = src_9(D) + _8;
common/predict.c:71:5: note: init: stmt relevant? _12 = *_10;
common/predict.c:71:5: note: init: stmt relevant? _13 = (unsigned int) _12;
common/predict.c:71:5: note: init: stmt relevant? dc_14 = _13 + dc_32;
common/predict.c:71:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:71:5: note: mark relevant 0, live 1.
common/predict.c:71:5: note: init: stmt relevant? # DEBUG dc => dc_14
common/predict.c:71:5: note: init: stmt relevant? i_15 = i_33 + 1;
common/predict.c:71:5: note: init: stmt relevant? # DEBUG i => i_15
common/predict.c:71:5: note: init: stmt relevant? # DEBUG i => i_15
common/predict.c:71:5: note: init: stmt relevant? # DEBUG dc => dc_14
common/predict.c:71:5: note: init: stmt relevant? ivtmp_30 = ivtmp_36 - 1;
common/predict.c:71:5: note: init: stmt relevant? if (ivtmp_30 != 0)
common/predict.c:71:5: note: worklist: examine stmt: dc_14 = _13 + dc_32;
common/predict.c:71:5: note: vect_is_simple_use: operand _13
common/predict.c:71:5: note: def_stmt: _13 = (unsigned int) _12;
common/predict.c:71:5: note: type of def: 3.
common/predict.c:71:5: note: mark relevant 3, live 0.
common/predict.c:71:5: note: vect_is_simple_use: operand dc_32
common/predict.c:71:5: note: def_stmt: dc_32 = PHI <dc_14(4), 0(2)>
common/predict.c:71:5: note: type of def: 5.
common/predict.c:71:5: note: mark relevant 3, live 0.
common/predict.c:71:5: note: worklist: examine stmt: dc_32 = PHI <dc_14(4), 0(2)>
common/predict.c:71:5: note: vect_is_simple_use: operand dc_14
common/predict.c:71:5: note: def_stmt: dc_14 = _13 + dc_32;
common/predict.c:71:5: note: type of def: 5.
common/predict.c:71:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:71:5: note: vect_is_simple_use: operand 0
common/predict.c:71:5: note: worklist: examine stmt: _13 = (unsigned int) _12;
common/predict.c:71:5: note: vect_is_simple_use: operand _12
common/predict.c:71:5: note: def_stmt: _12 = *_10;
common/predict.c:71:5: note: type of def: 3.
common/predict.c:71:5: note: mark relevant 3, live 0.
common/predict.c:71:5: note: worklist: examine stmt: _12 = *_10;
common/predict.c:71:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _12 = *_10;
  stmt_b: _12 = *_10;
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 32}_1)
  (chrec_b = {-1B, +, 32}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/predict.c:71:5: note: === vect_determine_vectorization_factor ===
common/predict.c:71:5: note: ==> examining phi: dc_32 = PHI <dc_14(4), 0(2)>

common/predict.c:71:5: note: get vectype for scalar type:  uint32_t
common/predict.c:71:5: note: vectype: vector(4) unsigned int
common/predict.c:71:5: note: nunits = 4
common/predict.c:71:5: note: ==> examining phi: i_33 = PHI <i_15(4), 0(2)>

common/predict.c:71:5: note: ==> examining phi: ivtmp_36 = PHI <ivtmp_30(4), 16(2)>

common/predict.c:71:5: note: ==> examining statement: # DEBUG i => i_33

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: # DEBUG dc => dc_32

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: _6 = i_33 * 32;

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: _7 = _6 + -1;

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: _8 = (sizetype) _7;

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: _10 = src_9(D) + _8;

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: _12 = *_10;

common/predict.c:71:5: note: get vectype for scalar type:  unsigned char
common/predict.c:71:5: note: vectype: vector(16) unsigned char
common/predict.c:71:5: note: nunits = 16
common/predict.c:71:5: note: ==> examining statement: _13 = (unsigned int) _12;

common/predict.c:71:5: note: get vectype for scalar type:  unsigned int
common/predict.c:71:5: note: vectype: vector(4) unsigned int
common/predict.c:71:5: note: get vectype for scalar type:  unsigned char
common/predict.c:71:5: note: vectype: vector(16) unsigned char
common/predict.c:71:5: note: nunits = 16
common/predict.c:71:5: note: ==> examining statement: dc_14 = _13 + dc_32;

common/predict.c:71:5: note: get vectype for scalar type:  uint32_t
common/predict.c:71:5: note: vectype: vector(4) unsigned int
common/predict.c:71:5: note: get vectype for scalar type:  uint32_t
common/predict.c:71:5: note: vectype: vector(4) unsigned int
common/predict.c:71:5: note: nunits = 4
common/predict.c:71:5: note: ==> examining statement: # DEBUG dc => dc_14

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: i_15 = i_33 + 1;

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: # DEBUG i => i_15

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: # DEBUG i => i_15

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: # DEBUG dc => dc_14

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: ivtmp_30 = ivtmp_36 - 1;

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: ==> examining statement: if (ivtmp_30 != 0)

common/predict.c:71:5: note: skip.
common/predict.c:71:5: note: vectorization factor = 16
common/predict.c:71:5: note: === vect_analyze_data_refs_alignment ===
common/predict.c:71:5: note: vect_compute_data_ref_alignment:
common/predict.c:71:5: note: can't force alignment of ref: *_10
common/predict.c:71:5: note: === vect_prune_runtime_alias_test_list ===
common/predict.c:71:5: note: === vect_enhance_data_refs_alignment ===
common/predict.c:71:5: note: vector alignment may not be reachable
common/predict.c:71:5: note: vect_can_advance_ivs_p:
common/predict.c:71:5: note: Analyze phi: dc_32 = PHI <dc_14(4), 0(2)>

common/predict.c:71:5: note: reduc phi. skip.
common/predict.c:71:5: note: Analyze phi: i_33 = PHI <i_15(4), 0(2)>

common/predict.c:71:5: note: Analyze phi: ivtmp_36 = PHI <ivtmp_30(4), 16(2)>

common/predict.c:71:5: note: Vectorizing an unaligned access.
common/predict.c:71:5: note: === vect_analyze_slp ===
common/predict.c:71:5: note: === vect_make_slp_decision ===
common/predict.c:71:5: note: === vect_detect_hybrid_slp ===
common/predict.c:71:5: note: === vect_analyze_loop_operations ===
common/predict.c:71:5: note: examining phi: dc_32 = PHI <dc_14(4), 0(2)>

common/predict.c:71:5: note: examining phi: i_33 = PHI <i_15(4), 0(2)>

common/predict.c:71:5: note: examining phi: ivtmp_36 = PHI <ivtmp_30(4), 16(2)>

common/predict.c:71:5: note: ==> examining statement: # DEBUG i => i_33
common/predict.c:71:5: note: irrelevant.
common/predict.c:71:5: note: ==> examining statement: # DEBUG dc => dc_32
common/predict.c:71:5: note: irrelevant.
common/predict.c:71:5: note: ==> examining statement: _6 = i_33 * 32;
common/predict.c:71:5: note: irrelevant.
common/predict.c:71:5: note: ==> examining statement: _7 = _6 + -1;
common/predict.c:71:5: note: irrelevant.
common/predict.c:71:5: note: ==> examining statement: _8 = (sizetype) _7;
common/predict.c:71:5: note: irrelevant.
common/predict.c:71:5: note: ==> examining statement: _10 = src_9(D) + _8;
common/predict.c:71:5: note: irrelevant.
common/predict.c:71:5: note: ==> examining statement: _12 = *_10;
common/predict.c:71:5: note: vect_is_simple_use: operand *_10
common/predict.c:71:5: note: not ssa-name.
common/predict.c:71:5: note: use not simple.
common/predict.c:71:5: note: vect_is_simple_use: operand *_10
common/predict.c:71:5: note: not ssa-name.
common/predict.c:71:5: note: use not simple.
common/predict.c:71:5: note: single-element interleaving not supported for not adjacent vector loads
common/predict.c:71:5: note: not vectorized: relevant stmt not supported: _12 = *_10;
common/predict.c:71:5: note: bad operation or unsupported loop bound.
common/predict.c:66:13: note: vectorized 0 loops in function.
predict_16x16_dc_left (uint8_t * src)
{
  int i;
  uint32_t dc;
  int _6;
  int _7;
  sizetype _8;
  uint8_t * _10;
  unsigned char _12;
  unsigned int _13;
  unsigned int _16;
  unsigned int _17;
  unsigned int patt_29;
  unsigned int ivtmp_30;
  unsigned int ivtmp_36;
  unsigned int ivtmp_37;
  unsigned int ivtmp_38;

  <bb 2>:
  # DEBUG dc => 0
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG dc => 0

  <bb 3>:
  # dc_32 = PHI <dc_14(4), 0(2)>
  # i_33 = PHI <i_15(4), 0(2)>
  # ivtmp_36 = PHI <ivtmp_30(4), 16(2)>
  # DEBUG i => i_33
  # DEBUG dc => dc_32
  _6 = i_33 * 32;
  _7 = _6 + -1;
  _8 = (sizetype) _7;
  _10 = src_9(D) + _8;
  _12 = *_10;
  _13 = (unsigned int) _12;
  dc_14 = _13 + dc_32;
  # DEBUG dc => dc_14
  i_15 = i_33 + 1;
  # DEBUG i => i_15
  # DEBUG i => i_15
  # DEBUG dc => dc_14
  ivtmp_30 = ivtmp_36 - 1;
  if (ivtmp_30 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # dc_39 = PHI <dc_14(3)>
  _16 = dc_39 + 8;
  _17 = _16 >> 4;
  dc_18 = _17 * 16843009;
  # DEBUG dc => dc_18
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG src => src_9(D)

  <bb 6>:
  # src_31 = PHI <src_23(7), src_9(D)(5)>
  # i_34 = PHI <i_24(7), 0(5)>
  # ivtmp_38 = PHI <ivtmp_37(7), 16(5)>
  # DEBUG i => i_34
  # DEBUG src => src_31
  # DEBUG p => src_31
  # DEBUG p => src_31 + 4
  MEM[(uint32_t *)src_31] = dc_18;
  # DEBUG D#3 => &MEM[(void *)src_31 + 8B]
  # DEBUG p => D#3
  MEM[(uint32_t *)src_31 + 4B] = dc_18;
  # DEBUG D#4 => &MEM[(void *)src_31 + 12B]
  # DEBUG p => D#4
  MEM[(uint32_t *)src_31 + 8B] = dc_18;
  # DEBUG p => D#4 + 4
  MEM[(uint32_t *)src_31 + 12B] = dc_18;
  src_23 = src_31 + 32;
  # DEBUG src => src_23
  i_24 = i_34 + 1;
  # DEBUG i => i_24
  # DEBUG i => i_24
  # DEBUG src => src_23
  ivtmp_37 = ivtmp_38 - 1;
  if (ivtmp_37 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  return;

}



;; Function predict_16x16_dc_top (predict_16x16_dc_top, funcdef_no=117, decl_uid=5786, cgraph_uid=117, symbol_order=160)


Analyzing loop at common/predict.c:90
common/predict.c:90:5: note: ===== analyze_loop_nest =====
common/predict.c:90:5: note: === vect_analyze_loop_form ===
common/predict.c:90:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/predict.c:90:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_30]
analyze_innermost: success.
	base_address: src_8(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_8(D)]
	Access function 0: {0B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_30 + 4B]
analyze_innermost: success.
	base_address: src_8(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_8(D)]
	Access function 0: {4B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_30 + 8B]
analyze_innermost: success.
	base_address: src_8(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_8(D)]
	Access function 0: {8B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_30 + 12B]
analyze_innermost: success.
	base_address: src_8(D)
	offset from base address: 0
	constant offset from base address: 12
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_8(D)]
	Access function 0: {12B, +, 32}_2
common/predict.c:90:5: note: got vectype for stmt: MEM[(uint32_t *)src_30] = dc_17;
vector(4) unsigned int
common/predict.c:90:5: note: got vectype for stmt: MEM[(uint32_t *)src_30 + 4B] = dc_17;
vector(4) unsigned int
common/predict.c:90:5: note: got vectype for stmt: MEM[(uint32_t *)src_30 + 8B] = dc_17;
vector(4) unsigned int
common/predict.c:90:5: note: got vectype for stmt: MEM[(uint32_t *)src_30 + 12B] = dc_17;
vector(4) unsigned int
common/predict.c:90:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:90:5: note: Analyze phi: src_30 = PHI <src_22(7), src_8(D)(5)>

common/predict.c:90:5: note: Access function of PHI: {src_8(D), +, 32}_2
common/predict.c:90:5: note: step: 32,  init: src_8(D)
common/predict.c:90:5: note: Detected induction.
common/predict.c:90:5: note: Analyze phi: i_33 = PHI <i_23(7), 0(5)>

common/predict.c:90:5: note: Access function of PHI: {0, +, 1}_2
common/predict.c:90:5: note: step: 1,  init: 0
common/predict.c:90:5: note: Detected induction.
common/predict.c:90:5: note: Analyze phi: .MEM_34 = PHI <.MEM_21(7), .MEM_10(D)(5)>

common/predict.c:90:5: note: Analyze phi: ivtmp_36 = PHI <ivtmp_35(7), 16(5)>

common/predict.c:90:5: note: Access function of PHI: {16, +, 4294967295}_2
common/predict.c:90:5: note: step: 4294967295,  init: 16
common/predict.c:90:5: note: Detected induction.
common/predict.c:90:5: note: === vect_pattern_recog ===
common/predict.c:90:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:90:5: note: Detected interleaving MEM[(uint32_t *)src_30] and MEM[(uint32_t *)src_30 + 4B]
common/predict.c:90:5: note: Detected interleaving MEM[(uint32_t *)src_30] and MEM[(uint32_t *)src_30 + 8B]
common/predict.c:90:5: note: Detected interleaving MEM[(uint32_t *)src_30] and MEM[(uint32_t *)src_30 + 12B]
common/predict.c:90:5: note: interleaved store with gaps
common/predict.c:90:5: note: not vectorized: complicated access pattern.
common/predict.c:90:5: note: bad data access.

Analyzing loop at common/predict.c:84
common/predict.c:84:5: note: ===== analyze_loop_nest =====
common/predict.c:84:5: note: === vect_analyze_loop_form ===
common/predict.c:84:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/predict.c:84:5: note: === vect_analyze_data_refs ===
Creating dr for *_9
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_8(D)
	offset from base address: 0
	constant offset from base address: -32(OVF)
	step: 1
	aligned to: 128
	base_object: *src_8(D)
	Access function 0: {-32B, +, 1}_1
common/predict.c:84:5: note: got vectype for stmt: _11 = *_9;
vector(16) unsigned char
common/predict.c:84:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:84:5: note: Analyze phi: dc_31 = PHI <dc_13(4), 0(2)>

common/predict.c:84:5: note: Access function of PHI: {0, +, _12}_1
common/predict.c:84:5: note: step: _12,  init: 0
common/predict.c:84:5: note: step unknown.
common/predict.c:84:5: note: Analyze phi: i_32 = PHI <i_14(4), 0(2)>

common/predict.c:84:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:84:5: note: step: 1,  init: 0
common/predict.c:84:5: note: Detected induction.
common/predict.c:84:5: note: Analyze phi: ivtmp_29 = PHI <ivtmp_28(4), 16(2)>

common/predict.c:84:5: note: Access function of PHI: {16, +, 4294967295}_1
common/predict.c:84:5: note: step: 4294967295,  init: 16
common/predict.c:84:5: note: Detected induction.
common/predict.c:84:5: note: Analyze phi: dc_31 = PHI <dc_13(4), 0(2)>

common/predict.c:84:5: note: detected reduction: dc_13 = _12 + dc_31;

common/predict.c:84:5: note: Detected reduction.
common/predict.c:84:5: note: === vect_pattern_recog ===
common/predict.c:84:5: note: vect_is_simple_use: operand _12
common/predict.c:84:5: note: def_stmt: _12 = (unsigned int) _11;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: vect_is_simple_use: operand _11
common/predict.c:84:5: note: def_stmt: _11 = *_9;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: vect_recog_widen_sum_pattern: detected: patt_27 = _11 w+ dc_31;

common/predict.c:84:5: note: vect_is_simple_use: operand _12
common/predict.c:84:5: note: def_stmt: _12 = (unsigned int) _11;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: vect_is_simple_use: operand _11
common/predict.c:84:5: note: def_stmt: _11 = *_9;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: vect_is_simple_use: operand _12
common/predict.c:84:5: note: def_stmt: _12 = (unsigned int) _11;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: vect_is_simple_use: operand _11
common/predict.c:84:5: note: def_stmt: _11 = *_9;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:84:5: note: === vect_mark_stmts_to_be_vectorized ===
common/predict.c:84:5: note: init: phi relevant? dc_31 = PHI <dc_13(4), 0(2)>
common/predict.c:84:5: note: init: phi relevant? i_32 = PHI <i_14(4), 0(2)>
common/predict.c:84:5: note: init: phi relevant? ivtmp_29 = PHI <ivtmp_28(4), 16(2)>
common/predict.c:84:5: note: init: stmt relevant? # DEBUG i => i_32
common/predict.c:84:5: note: init: stmt relevant? # DEBUG dc => dc_31
common/predict.c:84:5: note: init: stmt relevant? _6 = (sizetype) i_32;
common/predict.c:84:5: note: init: stmt relevant? _7 = _6 + 18446744073709551584;
common/predict.c:84:5: note: init: stmt relevant? _9 = src_8(D) + _7;
common/predict.c:84:5: note: init: stmt relevant? _11 = *_9;
common/predict.c:84:5: note: init: stmt relevant? _12 = (unsigned int) _11;
common/predict.c:84:5: note: init: stmt relevant? dc_13 = _12 + dc_31;
common/predict.c:84:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:84:5: note: mark relevant 0, live 1.
common/predict.c:84:5: note: init: stmt relevant? # DEBUG dc => dc_13
common/predict.c:84:5: note: init: stmt relevant? i_14 = i_32 + 1;
common/predict.c:84:5: note: init: stmt relevant? # DEBUG i => i_14
common/predict.c:84:5: note: init: stmt relevant? # DEBUG i => i_14
common/predict.c:84:5: note: init: stmt relevant? # DEBUG dc => dc_13
common/predict.c:84:5: note: init: stmt relevant? ivtmp_28 = ivtmp_29 - 1;
common/predict.c:84:5: note: init: stmt relevant? if (ivtmp_28 != 0)
common/predict.c:84:5: note: worklist: examine stmt: dc_13 = _12 + dc_31;
common/predict.c:84:5: note: vect_is_simple_use: operand _12
common/predict.c:84:5: note: def_stmt: _12 = (unsigned int) _11;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: mark relevant 3, live 0.
common/predict.c:84:5: note: vect_is_simple_use: operand dc_31
common/predict.c:84:5: note: def_stmt: dc_31 = PHI <dc_13(4), 0(2)>
common/predict.c:84:5: note: type of def: 5.
common/predict.c:84:5: note: mark relevant 3, live 0.
common/predict.c:84:5: note: worklist: examine stmt: dc_31 = PHI <dc_13(4), 0(2)>
common/predict.c:84:5: note: vect_is_simple_use: operand dc_13
common/predict.c:84:5: note: def_stmt: dc_13 = _12 + dc_31;
common/predict.c:84:5: note: type of def: 5.
common/predict.c:84:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:84:5: note: vect_is_simple_use: operand 0
common/predict.c:84:5: note: worklist: examine stmt: _12 = (unsigned int) _11;
common/predict.c:84:5: note: vect_is_simple_use: operand _11
common/predict.c:84:5: note: def_stmt: _11 = *_9;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: mark relevant 3, live 0.
common/predict.c:84:5: note: worklist: examine stmt: _11 = *_9;
common/predict.c:84:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _11 = *_9;
  stmt_b: _11 = *_9;
(analyze_overlapping_iterations 
  (chrec_a = {-32B, +, 1}_1)
  (chrec_b = {-32B, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/predict.c:84:5: note: === vect_determine_vectorization_factor ===
common/predict.c:84:5: note: ==> examining phi: dc_31 = PHI <dc_13(4), 0(2)>

common/predict.c:84:5: note: get vectype for scalar type:  uint32_t
common/predict.c:84:5: note: vectype: vector(4) unsigned int
common/predict.c:84:5: note: nunits = 4
common/predict.c:84:5: note: ==> examining phi: i_32 = PHI <i_14(4), 0(2)>

common/predict.c:84:5: note: ==> examining phi: ivtmp_29 = PHI <ivtmp_28(4), 16(2)>

common/predict.c:84:5: note: ==> examining statement: # DEBUG i => i_32

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: ==> examining statement: # DEBUG dc => dc_31

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: ==> examining statement: _6 = (sizetype) i_32;

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: ==> examining statement: _7 = _6 + 18446744073709551584;

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: ==> examining statement: _9 = src_8(D) + _7;

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: ==> examining statement: _11 = *_9;

common/predict.c:84:5: note: get vectype for scalar type:  unsigned char
common/predict.c:84:5: note: vectype: vector(16) unsigned char
common/predict.c:84:5: note: nunits = 16
common/predict.c:84:5: note: ==> examining statement: _12 = (unsigned int) _11;

common/predict.c:84:5: note: get vectype for scalar type:  unsigned int
common/predict.c:84:5: note: vectype: vector(4) unsigned int
common/predict.c:84:5: note: get vectype for scalar type:  unsigned char
common/predict.c:84:5: note: vectype: vector(16) unsigned char
common/predict.c:84:5: note: nunits = 16
common/predict.c:84:5: note: ==> examining statement: dc_13 = _12 + dc_31;

common/predict.c:84:5: note: get vectype for scalar type:  uint32_t
common/predict.c:84:5: note: vectype: vector(4) unsigned int
common/predict.c:84:5: note: get vectype for scalar type:  uint32_t
common/predict.c:84:5: note: vectype: vector(4) unsigned int
common/predict.c:84:5: note: nunits = 4
common/predict.c:84:5: note: ==> examining statement: # DEBUG dc => dc_13

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: ==> examining statement: i_14 = i_32 + 1;

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: ==> examining statement: # DEBUG i => i_14

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: ==> examining statement: # DEBUG i => i_14

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: ==> examining statement: # DEBUG dc => dc_13

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: ==> examining statement: ivtmp_28 = ivtmp_29 - 1;

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: ==> examining statement: if (ivtmp_28 != 0)

common/predict.c:84:5: note: skip.
common/predict.c:84:5: note: vectorization factor = 16
common/predict.c:84:5: note: === vect_analyze_data_refs_alignment ===
common/predict.c:84:5: note: vect_compute_data_ref_alignment:
common/predict.c:84:5: note: can't force alignment of ref: *_9
common/predict.c:84:5: note: === vect_prune_runtime_alias_test_list ===
common/predict.c:84:5: note: === vect_enhance_data_refs_alignment ===
common/predict.c:84:5: note: Unknown misalignment, is_packed = 0
common/predict.c:84:5: note: vect_can_advance_ivs_p:
common/predict.c:84:5: note: Analyze phi: dc_31 = PHI <dc_13(4), 0(2)>

common/predict.c:84:5: note: reduc phi. skip.
common/predict.c:84:5: note: Analyze phi: i_32 = PHI <i_14(4), 0(2)>

common/predict.c:84:5: note: Analyze phi: ivtmp_29 = PHI <ivtmp_28(4), 16(2)>

common/predict.c:84:5: note: Vectorizing an unaligned access.
common/predict.c:84:5: note: === vect_analyze_slp ===
common/predict.c:84:5: note: === vect_make_slp_decision ===
common/predict.c:84:5: note: === vect_detect_hybrid_slp ===
common/predict.c:84:5: note: === vect_analyze_loop_operations ===
common/predict.c:84:5: note: examining phi: dc_31 = PHI <dc_13(4), 0(2)>

common/predict.c:84:5: note: examining phi: i_32 = PHI <i_14(4), 0(2)>

common/predict.c:84:5: note: examining phi: ivtmp_29 = PHI <ivtmp_28(4), 16(2)>

common/predict.c:84:5: note: ==> examining statement: # DEBUG i => i_32
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: ==> examining statement: # DEBUG dc => dc_31
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: ==> examining statement: _6 = (sizetype) i_32;
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: ==> examining statement: _7 = _6 + 18446744073709551584;
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: ==> examining statement: _9 = src_8(D) + _7;
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: ==> examining statement: _11 = *_9;
common/predict.c:84:5: note: vect_is_simple_use: operand *_9
common/predict.c:84:5: note: not ssa-name.
common/predict.c:84:5: note: use not simple.
common/predict.c:84:5: note: vect_is_simple_use: operand *_9
common/predict.c:84:5: note: not ssa-name.
common/predict.c:84:5: note: use not simple.
common/predict.c:84:5: note: vect_model_load_cost: unaligned supported by hardware.
common/predict.c:84:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/predict.c:84:5: note: ==> examining statement: _12 = (unsigned int) _11;
common/predict.c:84:5: note: vect_is_simple_use: operand _11
common/predict.c:84:5: note: def_stmt: _11 = *_9;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: === vectorizable_conversion ===
common/predict.c:84:5: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/predict.c:84:5: note: ==> examining statement: dc_13 = _12 + dc_31;
common/predict.c:84:5: note: vect_is_simple_use: operand _12
common/predict.c:84:5: note: def_stmt: _12 = (unsigned int) _11;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: vect_is_simple_use: operand dc_31
common/predict.c:84:5: note: def_stmt: dc_31 = PHI <dc_13(4), 0(2)>
common/predict.c:84:5: note: type of def: 5.
common/predict.c:84:5: note: detected reduction: dc_13 = _12 + dc_31;

common/predict.c:84:5: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 4, prologue_cost = 1, epilogue_cost = 5 .
common/predict.c:84:5: note: ==> examining statement: # DEBUG dc => dc_13
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: ==> examining statement: i_14 = i_32 + 1;
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: ==> examining statement: # DEBUG i => i_14
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: ==> examining statement: # DEBUG i => i_14
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: ==> examining statement: # DEBUG dc => dc_13
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: ==> examining statement: ivtmp_28 = ivtmp_29 - 1;
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: ==> examining statement: if (ivtmp_28 != 0)
common/predict.c:84:5: note: irrelevant.
common/predict.c:84:5: note: vectorization_factor = 16, niters = 16
common/predict.c:84:5: note: === vect_update_slp_costs_according_to_vf ===
common/predict.c:84:5: note: Cost model analysis: 
  Vector inside of loop cost: 12
  Vector prologue cost: 1
  Vector epilogue cost: 5
  Scalar iteration cost: 3
  Scalar outside cost: 0
  Vector outside cost: 6
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 3
common/predict.c:84:5: note:   Runtime profitability threshold = 15
common/predict.c:84:5: note:   Static estimate profitability threshold = 15
common/predict.c:84:5: note: loop vectorized
common/predict.c:84:5: note: === vec_transform_loop ===
common/predict.c:84:5: note: ------>vectorizing phi: dc_31 = PHI <dc_13(4), 0(9)>

common/predict.c:84:5: note: multiple-types.
common/predict.c:84:5: note: ------>vectorizing phi: i_32 = PHI <i_14(4), 0(9)>

common/predict.c:84:5: note: ------>vectorizing phi: ivtmp_29 = PHI <ivtmp_28(4), 16(9)>

common/predict.c:84:5: note: ------>vectorizing statement: # DEBUG i => i_32

common/predict.c:84:5: note: ------>vectorizing statement: # DEBUG dc => dc_31

common/predict.c:84:5: note: ------>vectorizing statement: _6 = (sizetype) i_32;

common/predict.c:84:5: note: ------>vectorizing statement: _7 = _6 + 18446744073709551584;

common/predict.c:84:5: note: ------>vectorizing statement: _9 = src_8(D) + _7;

common/predict.c:84:5: note: ------>vectorizing statement: _11 = *_9;

common/predict.c:84:5: note: transform statement.
common/predict.c:84:5: note: transform load. ncopies = 1
common/predict.c:84:5: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_8(D)
common/predict.c:84:5: note: created vectp_src.105_26
common/predict.c:84:5: note: add new stmt: vect__11.106_5 = MEM[(uint8_t *)vectp_src.104_25];
common/predict.c:84:5: note: ------>vectorizing statement: _12 = (unsigned int) _11;

common/predict.c:84:5: note: multiple-types.
common/predict.c:84:5: note: transform statement.
common/predict.c:84:5: note: vect_is_simple_use: operand _11
common/predict.c:84:5: note: def_stmt: _11 = *_9;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: transform conversion. ncopies = 1.
common/predict.c:84:5: note: vect_get_vec_def_for_operand: _11
common/predict.c:84:5: note: vect_is_simple_use: operand _11
common/predict.c:84:5: note: def_stmt: _11 = *_9;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: def =  _11
  def_stmt =  _11 = *_9;
common/predict.c:84:5: note: add new stmt: vect__12.108_4 = [vec_unpack_lo_expr] vect__11.106_5;
common/predict.c:84:5: note: add new stmt: vect__12.108_3 = [vec_unpack_hi_expr] vect__11.106_5;
common/predict.c:84:5: note: add new stmt: vect__12.107_2 = [vec_unpack_lo_expr] vect__12.108_4;
common/predict.c:84:5: note: add new stmt: vect__12.107_1 = [vec_unpack_hi_expr] vect__12.108_4;
common/predict.c:84:5: note: add new stmt: vect__12.107_41 = [vec_unpack_lo_expr] vect__12.108_3;
common/predict.c:84:5: note: add new stmt: vect__12.107_40 = [vec_unpack_hi_expr] vect__12.108_3;
common/predict.c:84:5: note: ------>vectorizing statement: dc_13 = _12 + dc_31;

common/predict.c:84:5: note: multiple-types.
common/predict.c:84:5: note: transform statement.
common/predict.c:84:5: note: vect_is_simple_use: operand _12
common/predict.c:84:5: note: def_stmt: _12 = (unsigned int) _11;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: vect_is_simple_use: operand dc_31
common/predict.c:84:5: note: def_stmt: dc_31 = PHI <dc_13(4), 0(9)>
common/predict.c:84:5: note: type of def: 5.
common/predict.c:84:5: note: detected reduction: dc_13 = _12 + dc_31;

common/predict.c:84:5: note: reduc op not supported by target.
common/predict.c:84:5: note: transform reduction.
common/predict.c:84:5: note: vect_get_vec_def_for_operand: _12
common/predict.c:84:5: note: vect_is_simple_use: operand _12
common/predict.c:84:5: note: def_stmt: _12 = (unsigned int) _11;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: def =  _12
  def_stmt =  _12 = (unsigned int) _11;
common/predict.c:84:5: note: add new stmt: vect_dc_13.109_38 = vect__12.107_2 + vect_dc_13.109_39;
common/predict.c:84:5: note: vect_is_simple_use: operand _12
common/predict.c:84:5: note: def_stmt: _12 = (unsigned int) _11;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: add new stmt: vect_dc_13.109_42 = vect__12.107_1 + vect_dc_13.109_38;
common/predict.c:84:5: note: vect_is_simple_use: operand _12
common/predict.c:84:5: note: def_stmt: _12 = (unsigned int) _11;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: add new stmt: vect_dc_13.109_43 = vect__12.107_41 + vect_dc_13.109_42;
common/predict.c:84:5: note: vect_is_simple_use: operand _12
common/predict.c:84:5: note: def_stmt: _12 = (unsigned int) _11;
common/predict.c:84:5: note: type of def: 3.
common/predict.c:84:5: note: add new stmt: vect_dc_13.109_44 = vect__12.107_40 + vect_dc_13.109_43;
common/predict.c:84:5: note: vect_is_simple_use: operand 0
common/predict.c:84:5: note: vect_get_vec_def_for_operand: dc_31
common/predict.c:84:5: note: vect_is_simple_use: operand dc_31
common/predict.c:84:5: note: def_stmt: dc_31 = PHI <dc_13(4), 0(9)>
common/predict.c:84:5: note: type of def: 5.
common/predict.c:84:5: note: def =  dc_31
  def_stmt =  dc_31 = PHI <dc_13(4), 0(9)>
common/predict.c:84:5: note: transform reduction: created def-use cycle: vect_dc_13.109_39 = PHI <vect_dc_13.109_44(4), { 0, 0, 0, 0 }(9)>

vect_dc_13.109_44 = vect__12.107_40 + vect_dc_13.109_43;

common/predict.c:84:5: note: Reduce using vector shifts
common/predict.c:84:5: note: extract scalar result
common/predict.c:84:5: note: ------>vectorizing statement: # DEBUG dc => dc_13

common/predict.c:84:5: note: ------>vectorizing statement: i_14 = i_32 + 1;

common/predict.c:84:5: note: ------>vectorizing statement: # DEBUG i => i_14

common/predict.c:84:5: note: ------>vectorizing statement: # DEBUG i => i_14

common/predict.c:84:5: note: ------>vectorizing statement: # DEBUG dc => dc_13

common/predict.c:84:5: note: ------>vectorizing statement: ivtmp_28 = ivtmp_29 - 1;

common/predict.c:84:5: note: ------>vectorizing statement: vectp_src.104_24 = vectp_src.104_25 + 16;

common/predict.c:84:5: note: ------>vectorizing statement: if (ivtmp_28 != 0)


loop at common/predict.c:86: if (ivtmp_53 < 1)

;; Scaling loop 1 with scale 0.062500, bounding iterations to 1 from guessed 16
;; guessed iterations are now 1
common/predict.c:84:5: note: LOOP VECTORIZED

common/predict.c:79:13: note: vectorized 1 loops in function.
Merging blocks 2 and 9
predict_16x16_dc_top (uint8_t * src)
{
  uint32_t vect_dc_13.112;
  vector(4) unsigned int vect_dc_13.111;
  uint32_t stmp_dc_13.110;
  vector(4) unsigned int vect_dc_13.109;
  vector(8) short unsigned int vect__12.108;
  vector(4) unsigned int vect__12.107;
  vector(16) unsigned char vect__11.106;
  vector(16) unsigned char * vectp_src.105;
  vector(16) unsigned char * vectp_src.104;
  int i;
  uint32_t dc;
  sizetype _6;
  sizetype _7;
  uint8_t * _9;
  unsigned char _11;
  unsigned int _12;
  unsigned int _15;
  unsigned int _16;
  unsigned int patt_27;
  unsigned int ivtmp_28;
  unsigned int ivtmp_29;
  unsigned int ivtmp_35;
  unsigned int ivtmp_36;
  unsigned int ivtmp_52;
  unsigned int ivtmp_53;

  <bb 2>:
  # DEBUG dc => 0
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG dc => 0
  vectp_src.105_26 = src_8(D) + 18446744073709551584;

  <bb 3>:
  # dc_31 = PHI <dc_13(4), 0(2)>
  # i_32 = PHI <i_14(4), 0(2)>
  # ivtmp_29 = PHI <ivtmp_28(4), 16(2)>
  # vectp_src.104_25 = PHI <vectp_src.104_24(4), vectp_src.105_26(2)>
  # vect_dc_13.109_39 = PHI <vect_dc_13.109_44(4), { 0, 0, 0, 0 }(2)>
  # ivtmp_52 = PHI <ivtmp_53(4), 0(2)>
  # DEBUG i => i_32
  # DEBUG dc => dc_31
  _6 = (sizetype) i_32;
  _7 = _6 + 18446744073709551584;
  _9 = src_8(D) + _7;
  vect__11.106_5 = MEM[(uint8_t *)vectp_src.104_25];
  _11 = *_9;
  vect__12.108_4 = [vec_unpack_lo_expr] vect__11.106_5;
  vect__12.108_3 = [vec_unpack_hi_expr] vect__11.106_5;
  vect__12.107_2 = [vec_unpack_lo_expr] vect__12.108_4;
  vect__12.107_1 = [vec_unpack_hi_expr] vect__12.108_4;
  vect__12.107_41 = [vec_unpack_lo_expr] vect__12.108_3;
  vect__12.107_40 = [vec_unpack_hi_expr] vect__12.108_3;
  _12 = (unsigned int) _11;
  vect_dc_13.109_38 = vect__12.107_2 + vect_dc_13.109_39;
  vect_dc_13.109_42 = vect__12.107_1 + vect_dc_13.109_38;
  vect_dc_13.109_43 = vect__12.107_41 + vect_dc_13.109_42;
  vect_dc_13.109_44 = vect__12.107_40 + vect_dc_13.109_43;
  dc_13 = _12 + dc_31;
  # DEBUG dc => dc_13
  i_14 = i_32 + 1;
  # DEBUG i => i_14
  # DEBUG i => i_14
  # DEBUG dc => dc_13
  ivtmp_28 = ivtmp_29 - 1;
  vectp_src.104_24 = vectp_src.104_25 + 16;
  ivtmp_53 = ivtmp_52 + 1;
  if (ivtmp_53 < 1)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # dc_37 = PHI <dc_13(3)>
  # vect_dc_13.109_45 = PHI <vect_dc_13.109_44(3)>
  vect_dc_13.111_46 = VEC_PERM_EXPR <vect_dc_13.109_45, { 0, 0, 0, 0 }, { 2, 3, 4, 5 }>;
  vect_dc_13.111_47 = vect_dc_13.111_46 + vect_dc_13.109_45;
  vect_dc_13.111_48 = VEC_PERM_EXPR <vect_dc_13.111_47, { 0, 0, 0, 0 }, { 1, 2, 3, 4 }>;
  vect_dc_13.111_49 = vect_dc_13.111_48 + vect_dc_13.111_47;
  stmp_dc_13.110_50 = BIT_FIELD_REF <vect_dc_13.111_49, 32, 0>;
  vect_dc_13.112_51 = stmp_dc_13.110_50 + 0;
  _15 = vect_dc_13.112_51 + 8;
  _16 = _15 >> 4;
  dc_17 = _16 * 16843009;
  # DEBUG dc => dc_17
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG src => src_8(D)

  <bb 6>:
  # src_30 = PHI <src_22(7), src_8(D)(5)>
  # i_33 = PHI <i_23(7), 0(5)>
  # ivtmp_36 = PHI <ivtmp_35(7), 16(5)>
  # DEBUG i => i_33
  # DEBUG src => src_30
  # DEBUG p => src_30
  # DEBUG p => src_30 + 4
  MEM[(uint32_t *)src_30] = dc_17;
  # DEBUG D#5 => &MEM[(void *)src_30 + 8B]
  # DEBUG p => D#5
  MEM[(uint32_t *)src_30 + 4B] = dc_17;
  # DEBUG D#6 => &MEM[(void *)src_30 + 12B]
  # DEBUG p => D#6
  MEM[(uint32_t *)src_30 + 8B] = dc_17;
  # DEBUG p => D#6 + 4
  MEM[(uint32_t *)src_30 + 12B] = dc_17;
  src_22 = src_30 + 32;
  # DEBUG src => src_22
  i_23 = i_33 + 1;
  # DEBUG i => i_23
  # DEBUG i => i_23
  # DEBUG src => src_22
  ivtmp_35 = ivtmp_36 - 1;
  if (ivtmp_35 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  return;

}



;; Function predict_16x16_dc_128 (predict_16x16_dc_128, funcdef_no=118, decl_uid=5798, cgraph_uid=118, symbol_order=161)


Analyzing loop at common/predict.c:95
common/predict.c:95:5: note: ===== analyze_loop_nest =====
common/predict.c:95:5: note: === vect_analyze_loop_form ===
common/predict.c:95:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/predict.c:95:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_15]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {0B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_15 + 4B]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {4B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_15 + 8B]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {8B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_15 + 12B]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 12
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {12B, +, 32}_1
common/predict.c:95:5: note: got vectype for stmt: MEM[(uint32_t *)src_15] = 2155905152;
vector(4) unsigned int
common/predict.c:95:5: note: got vectype for stmt: MEM[(uint32_t *)src_15 + 4B] = 2155905152;
vector(4) unsigned int
common/predict.c:95:5: note: got vectype for stmt: MEM[(uint32_t *)src_15 + 8B] = 2155905152;
vector(4) unsigned int
common/predict.c:95:5: note: got vectype for stmt: MEM[(uint32_t *)src_15 + 12B] = 2155905152;
vector(4) unsigned int
common/predict.c:95:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:95:5: note: Analyze phi: src_15 = PHI <src_10(4), src_4(D)(2)>

common/predict.c:95:5: note: Access function of PHI: {src_4(D), +, 32}_1
common/predict.c:95:5: note: step: 32,  init: src_4(D)
common/predict.c:95:5: note: Detected induction.
common/predict.c:95:5: note: Analyze phi: i_16 = PHI <i_11(4), 0(2)>

common/predict.c:95:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:95:5: note: step: 1,  init: 0
common/predict.c:95:5: note: Detected induction.
common/predict.c:95:5: note: Analyze phi: .MEM_17 = PHI <.MEM_9(4), .MEM_5(D)(2)>

common/predict.c:95:5: note: Analyze phi: ivtmp_2 = PHI <ivtmp_1(4), 16(2)>

common/predict.c:95:5: note: Access function of PHI: {16, +, 4294967295}_1
common/predict.c:95:5: note: step: 4294967295,  init: 16
common/predict.c:95:5: note: Detected induction.
common/predict.c:95:5: note: === vect_pattern_recog ===
common/predict.c:95:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:95:5: note: Detected interleaving MEM[(uint32_t *)src_15] and MEM[(uint32_t *)src_15 + 4B]
common/predict.c:95:5: note: Detected interleaving MEM[(uint32_t *)src_15] and MEM[(uint32_t *)src_15 + 8B]
common/predict.c:95:5: note: Detected interleaving MEM[(uint32_t *)src_15] and MEM[(uint32_t *)src_15 + 12B]
common/predict.c:95:5: note: interleaved store with gaps
common/predict.c:95:5: note: not vectorized: complicated access pattern.
common/predict.c:95:5: note: bad data access.
common/predict.c:92:13: note: vectorized 0 loops in function.
predict_16x16_dc_128 (uint8_t * src)
{
  int i;
  unsigned int ivtmp_1;
  unsigned int ivtmp_2;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG src => src_4(D)

  <bb 3>:
  # src_15 = PHI <src_10(4), src_4(D)(2)>
  # i_16 = PHI <i_11(4), 0(2)>
  # ivtmp_2 = PHI <ivtmp_1(4), 16(2)>
  # DEBUG i => i_16
  # DEBUG src => src_15
  # DEBUG p => src_15
  # DEBUG p => src_15 + 4
  MEM[(uint32_t *)src_15] = 2155905152;
  # DEBUG D#7 => &MEM[(void *)src_15 + 8B]
  # DEBUG p => D#7
  MEM[(uint32_t *)src_15 + 4B] = 2155905152;
  # DEBUG D#8 => &MEM[(void *)src_15 + 12B]
  # DEBUG p => D#8
  MEM[(uint32_t *)src_15 + 8B] = 2155905152;
  # DEBUG p => D#8 + 4
  MEM[(uint32_t *)src_15 + 12B] = 2155905152;
  src_10 = src_15 + 32;
  # DEBUG src => src_10
  i_11 = i_16 + 1;
  # DEBUG i => i_11
  # DEBUG i => i_11
  # DEBUG src => src_10
  ivtmp_1 = ivtmp_2 - 1;
  if (ivtmp_1 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function predict_16x16_h (predict_16x16_h, funcdef_no=119, decl_uid=5806, cgraph_uid=119, symbol_order=162)


Analyzing loop at common/predict.c:101
common/predict.c:101:5: note: ===== analyze_loop_nest =====
common/predict.c:101:5: note: === vect_analyze_loop_form ===
common/predict.c:101:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/predict.c:101:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint8_t *)src_19 + -1B]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: -1(OVF)
	step: 32
	aligned to: 128
	base_object: *src_4(D)
	Access function 0: {-1B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_19]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {0B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_19 + 4B]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {4B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_19 + 8B]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {8B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_19 + 12B]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 12
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {12B, +, 32}_1
common/predict.c:101:5: note: got vectype for stmt: _6 = MEM[(uint8_t *)src_19 + -1B];
vector(16) unsigned char
common/predict.c:101:5: note: got vectype for stmt: MEM[(uint32_t *)src_19] = v_9;
vector(4) unsigned int
common/predict.c:101:5: note: got vectype for stmt: MEM[(uint32_t *)src_19 + 4B] = v_9;
vector(4) unsigned int
common/predict.c:101:5: note: got vectype for stmt: MEM[(uint32_t *)src_19 + 8B] = v_9;
vector(4) unsigned int
common/predict.c:101:5: note: got vectype for stmt: MEM[(uint32_t *)src_19 + 12B] = v_9;
vector(4) unsigned int
common/predict.c:101:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:101:5: note: Analyze phi: src_19 = PHI <src_14(4), src_4(D)(2)>

common/predict.c:101:5: note: Access function of PHI: {src_4(D), +, 32}_1
common/predict.c:101:5: note: step: 32,  init: src_4(D)
common/predict.c:101:5: note: Detected induction.
common/predict.c:101:5: note: Analyze phi: i_20 = PHI <i_15(4), 0(2)>

common/predict.c:101:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:101:5: note: step: 1,  init: 0
common/predict.c:101:5: note: Detected induction.
common/predict.c:101:5: note: Analyze phi: .MEM_21 = PHI <.MEM_13(4), .MEM_5(D)(2)>

common/predict.c:101:5: note: Analyze phi: ivtmp_18 = PHI <ivtmp_17(4), 16(2)>

common/predict.c:101:5: note: Access function of PHI: {16, +, 4294967295}_1
common/predict.c:101:5: note: step: 4294967295,  init: 16
common/predict.c:101:5: note: Detected induction.
common/predict.c:101:5: note: === vect_pattern_recog ===
common/predict.c:101:5: note: vect_is_simple_use: operand _7
common/predict.c:101:5: note: def_stmt: _7 = (int) _6;
common/predict.c:101:5: note: type of def: 3.
common/predict.c:101:5: note: vect_is_simple_use: operand _6
common/predict.c:101:5: note: def_stmt: _6 = MEM[(uint8_t *)src_19 + -1B];
common/predict.c:101:5: note: type of def: 3.
common/predict.c:101:5: note: vect_is_simple_use: operand 16843009
common/predict.c:101:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:101:5: note: Detected interleaving MEM[(uint32_t *)src_19] and MEM[(uint32_t *)src_19 + 4B]
common/predict.c:101:5: note: Detected interleaving MEM[(uint32_t *)src_19] and MEM[(uint32_t *)src_19 + 8B]
common/predict.c:101:5: note: Detected interleaving MEM[(uint32_t *)src_19] and MEM[(uint32_t *)src_19 + 12B]
common/predict.c:101:5: note: Detected single element interleaving MEM[(uint8_t *)src_19 + -1B] step 32
common/predict.c:101:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:101:5: note: interleaved store with gaps
common/predict.c:101:5: note: not vectorized: complicated access pattern.
common/predict.c:101:5: note: bad data access.
common/predict.c:97:13: note: vectorized 0 loops in function.
predict_16x16_h (uint8_t * src)
{
  const uint32_t v;
  int i;
  unsigned char _6;
  int _7;
  int _8;
  unsigned int ivtmp_17;
  unsigned int ivtmp_18;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG src => src_4(D)

  <bb 3>:
  # src_19 = PHI <src_14(4), src_4(D)(2)>
  # i_20 = PHI <i_15(4), 0(2)>
  # ivtmp_18 = PHI <ivtmp_17(4), 16(2)>
  # DEBUG i => i_20
  # DEBUG src => src_19
  _6 = MEM[(uint8_t *)src_19 + -1B];
  _7 = (int) _6;
  _8 = _7 * 16843009;
  v_9 = (const uint32_t) _8;
  # DEBUG v => v_9
  # DEBUG p => src_19
  # DEBUG p => src_19 + 4
  MEM[(uint32_t *)src_19] = v_9;
  # DEBUG D#9 => &MEM[(void *)src_19 + 8B]
  # DEBUG p => D#9
  MEM[(uint32_t *)src_19 + 4B] = v_9;
  # DEBUG D#10 => &MEM[(void *)src_19 + 12B]
  # DEBUG p => D#10
  MEM[(uint32_t *)src_19 + 8B] = v_9;
  # DEBUG p => D#10 + 4
  MEM[(uint32_t *)src_19 + 12B] = v_9;
  src_14 = src_19 + 32;
  # DEBUG src => src_14
  i_15 = i_20 + 1;
  # DEBUG i => i_15
  # DEBUG i => i_15
  # DEBUG src => src_14
  ivtmp_17 = ivtmp_18 - 1;
  if (ivtmp_17 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function predict_16x16_v (predict_16x16_v, funcdef_no=120, decl_uid=5815, cgraph_uid=120, symbol_order=163)


Analyzing loop at common/predict.c:123
common/predict.c:123:5: note: ===== analyze_loop_nest =====
common/predict.c:123:5: note: === vect_analyze_loop_form ===
common/predict.c:123:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/predict.c:123:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_19]
analyze_innermost: success.
	base_address: src_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_5(D)]
	Access function 0: {0B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_19 + 4B]
analyze_innermost: success.
	base_address: src_5(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_5(D)]
	Access function 0: {4B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_19 + 8B]
analyze_innermost: success.
	base_address: src_5(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_5(D)]
	Access function 0: {8B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_19 + 12B]
analyze_innermost: success.
	base_address: src_5(D)
	offset from base address: 0
	constant offset from base address: 12
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_5(D)]
	Access function 0: {12B, +, 32}_1
common/predict.c:123:5: note: got vectype for stmt: MEM[(uint32_t *)src_19] = v0_6;
vector(4) unsigned int
common/predict.c:123:5: note: got vectype for stmt: MEM[(uint32_t *)src_19 + 4B] = v1_7;
vector(4) unsigned int
common/predict.c:123:5: note: got vectype for stmt: MEM[(uint32_t *)src_19 + 8B] = v2_8;
vector(4) unsigned int
common/predict.c:123:5: note: got vectype for stmt: MEM[(uint32_t *)src_19 + 12B] = v3_9;
vector(4) unsigned int
common/predict.c:123:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:123:5: note: Analyze phi: src_19 = PHI <src_14(4), src_5(D)(2)>

common/predict.c:123:5: note: Access function of PHI: {src_5(D), +, 32}_1
common/predict.c:123:5: note: step: 32,  init: src_5(D)
common/predict.c:123:5: note: Detected induction.
common/predict.c:123:5: note: Analyze phi: i_20 = PHI <i_15(4), 0(2)>

common/predict.c:123:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:123:5: note: step: 1,  init: 0
common/predict.c:123:5: note: Detected induction.
common/predict.c:123:5: note: Analyze phi: .MEM_21 = PHI <.MEM_13(4), .MEM_4(D)(2)>

common/predict.c:123:5: note: Analyze phi: ivtmp_2 = PHI <ivtmp_1(4), 16(2)>

common/predict.c:123:5: note: Access function of PHI: {16, +, 4294967295}_1
common/predict.c:123:5: note: step: 4294967295,  init: 16
common/predict.c:123:5: note: Detected induction.
common/predict.c:123:5: note: === vect_pattern_recog ===
common/predict.c:123:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:123:5: note: Detected interleaving MEM[(uint32_t *)src_19] and MEM[(uint32_t *)src_19 + 4B]
common/predict.c:123:5: note: Detected interleaving MEM[(uint32_t *)src_19] and MEM[(uint32_t *)src_19 + 8B]
common/predict.c:123:5: note: Detected interleaving MEM[(uint32_t *)src_19] and MEM[(uint32_t *)src_19 + 12B]
common/predict.c:123:5: note: interleaved store with gaps
common/predict.c:123:5: note: not vectorized: complicated access pattern.
common/predict.c:123:5: note: bad data access.
common/predict.c:115:13: note: vectorized 0 loops in function.
predict_16x16_v (uint8_t * src)
{
  int i;
  uint32_t v3;
  uint32_t v2;
  uint32_t v1;
  uint32_t v0;
  unsigned int ivtmp_1;
  unsigned int ivtmp_2;

  <bb 2>:
  v0_6 = MEM[(uint32_t *)src_5(D) + -32B];
  # DEBUG v0 => v0_6
  v1_7 = MEM[(uint32_t *)src_5(D) + -28B];
  # DEBUG v1 => v1_7
  v2_8 = MEM[(uint32_t *)src_5(D) + -24B];
  # DEBUG v2 => v2_8
  v3_9 = MEM[(uint32_t *)src_5(D) + -20B];
  # DEBUG v3 => v3_9
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG src => src_5(D)

  <bb 3>:
  # src_19 = PHI <src_14(4), src_5(D)(2)>
  # i_20 = PHI <i_15(4), 0(2)>
  # ivtmp_2 = PHI <ivtmp_1(4), 16(2)>
  # DEBUG i => i_20
  # DEBUG src => src_19
  # DEBUG p => src_19
  # DEBUG p => src_19 + 4
  MEM[(uint32_t *)src_19] = v0_6;
  # DEBUG D#11 => &MEM[(void *)src_19 + 8B]
  # DEBUG p => D#11
  MEM[(uint32_t *)src_19 + 4B] = v1_7;
  # DEBUG D#12 => &MEM[(void *)src_19 + 12B]
  # DEBUG p => D#12
  MEM[(uint32_t *)src_19 + 8B] = v2_8;
  # DEBUG p => D#12 + 4
  MEM[(uint32_t *)src_19 + 12B] = v3_9;
  src_14 = src_19 + 32;
  # DEBUG src => src_14
  i_15 = i_20 + 1;
  # DEBUG i => i_15
  # DEBUG i => i_15
  # DEBUG src => src_14
  ivtmp_1 = ivtmp_2 - 1;
  if (ivtmp_1 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function predict_16x16_p (predict_16x16_p, funcdef_no=121, decl_uid=5827, cgraph_uid=121, symbol_order=164)


Analyzing loop at common/predict.c:154
common/predict.c:154:5: note: ===== analyze_loop_nest =====
common/predict.c:154:5: note: === vect_analyze_loop_form ===
common/predict.c:154:5: note: ===== analyze_loop_nest_1 =====
common/predict.c:154:5: note: === vect_analyze_loop_form ===
common/predict.c:154:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/predict.c:154:5: note: Considering outer-loop vectorization.
common/predict.c:154:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/predict.c:154:5: note: === vect_analyze_data_refs ===
Creating dr for *_64
analyze_innermost: success.
	base_address: src_29
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *src_15(D)
	Access function 0: {{0B, +, 32}_2, +, 1}_3
Applying pattern match.pd:49, generic-match.c:4015
common/predict.c:154:5: note: analyze in outer-loop: *src_29
common/predict.c:154:5: note: 	outer base_address: src_15(D)
	outer offset from base address: 0
	outer constant offset from base address: 0
	outer step: 32
	outer aligned to: 128
common/predict.c:154:5: note: got vectype for stmt: *_64 = iftmp.15_77;
vector(16) unsigned char
common/predict.c:154:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:154:5: note: Analyze phi: src_29 = PHI <src_70(9), src_15(D)(5)>

common/predict.c:154:5: note: Access function of PHI: {src_15(D), +, 32}_2
common/predict.c:154:5: note: step: 32,  init: src_15(D)
common/predict.c:154:5: note: Detected induction.
common/predict.c:154:5: note: Analyze phi: y_78 = PHI <y_72(9), 0(5)>

common/predict.c:154:5: note: Access function of PHI: {0, +, 1}_2
common/predict.c:154:5: note: step: 1,  init: 0
common/predict.c:154:5: note: Detected induction.
common/predict.c:154:5: note: Analyze phi: pix_94 = PHI <pix_71(9), pix_62(5)>

common/predict.c:154:5: note: Access function of PHI: {pix_62, +, c_57}_2
common/predict.c:154:5: note: step: c_57,  init: pix_62
common/predict.c:154:5: note: Detected induction.
common/predict.c:154:5: note: Analyze phi: .MEM_97 = PHI <.MEM_67(9), .MEM_17(D)(5)>

common/predict.c:154:5: note: Analyze phi: ivtmp_149 = PHI <ivtmp_148(9), 16(5)>

common/predict.c:154:5: note: Access function of PHI: {16, +, 4294967295}_2
common/predict.c:154:5: note: step: 4294967295,  init: 16
common/predict.c:154:5: note: Detected induction.
common/predict.c:154:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:154:5: note: Analyze phi: x_30 = PHI <x_69(6), 0(10)>

common/predict.c:154:5: note: Access function of PHI: {0, +, 1}_3
common/predict.c:154:5: note: step: 1,  init: 0
common/predict.c:154:5: note: Detected induction.
common/predict.c:154:5: note: Analyze phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:154:5: note: Access function of PHI: {pix_94, +, b_54}_3
common/predict.c:154:5: note: step: b_54,  init: pix_94
common/predict.c:154:5: note: Analyze phi: .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>

common/predict.c:154:5: note: Analyze phi: ivtmp_151 = PHI <ivtmp_150(6), 16(10)>

common/predict.c:154:5: note: Access function of PHI: {16, +, 4294967295}_3
common/predict.c:154:5: note: step: 4294967295,  init: 16
common/predict.c:154:5: note: Detected induction.
common/predict.c:154:5: note: Analyze phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:154:5: note: reduction used in loop.
common/predict.c:154:5: note: Unknown def-use cycle pattern.
common/predict.c:154:5: note: === vect_pattern_recog ===
common/predict.c:154:5: note: vect_is_simple_use: operand _73
common/predict.c:154:5: note: def_stmt: _73 = -_65;
common/predict.c:154:5: note: type of def: 3.
common/predict.c:154:5: note: vect_is_simple_use: operand iftmp.15_75
common/predict.c:154:5: note: def_stmt: iftmp.15_75 = (unsigned char) _74;
common/predict.c:154:5: note: type of def: 3.
common/predict.c:154:5: note: vect_is_simple_use: operand _74
common/predict.c:154:5: note: def_stmt: _74 = _73 >> 31;
common/predict.c:154:5: note: type of def: 3.
common/predict.c:154:5: note: vect_is_simple_use: operand iftmp.15_76
common/predict.c:154:5: note: def_stmt: iftmp.15_76 = (unsigned char) _65;
common/predict.c:154:5: note: type of def: 3.
common/predict.c:154:5: note: vect_is_simple_use: operand _65
common/predict.c:154:5: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:154:5: note: type of def: 3.
common/predict.c:154:5: note: vect_recog_mixed_size_cond_pattern: detected:
common/predict.c:154:5: note: pattern recognized: patt_144 = (unsigned char) patt_145;
common/predict.c:154:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:154:5: note: grouped access in outer loop.
common/predict.c:154:5: note: not vectorized: complicated access pattern.
common/predict.c:154:5: note: bad data access.

Analyzing loop at common/predict.c:157
common/predict.c:157:9: note: ===== analyze_loop_nest =====
common/predict.c:157:9: note: === vect_analyze_loop_form ===
common/predict.c:157:9: note: === get_loop_niters ===
common/predict.c:157:9: note: === vect_analyze_data_refs ===
Creating dr for *_64
analyze_innermost: success.
	base_address: src_29
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *src_29
	Access function 0: {0B, +, 1}_3
common/predict.c:157:9: note: got vectype for stmt: *_64 = iftmp.15_77;
vector(16) unsigned char
common/predict.c:157:9: note: === vect_analyze_scalar_cycles ===
common/predict.c:157:9: note: Analyze phi: x_30 = PHI <x_69(6), 0(10)>

common/predict.c:157:9: note: Access function of PHI: {0, +, 1}_3
common/predict.c:157:9: note: step: 1,  init: 0
common/predict.c:157:9: note: Detected induction.
common/predict.c:157:9: note: Analyze phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:157:9: note: Access function of PHI: {pix_94, +, b_54}_3
common/predict.c:157:9: note: step: b_54,  init: pix_94
common/predict.c:157:9: note: Detected induction.
common/predict.c:157:9: note: Analyze phi: .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>

common/predict.c:157:9: note: Analyze phi: ivtmp_151 = PHI <ivtmp_150(6), 16(10)>

common/predict.c:157:9: note: Access function of PHI: {16, +, 4294967295}_3
common/predict.c:157:9: note: step: 4294967295,  init: 16
common/predict.c:157:9: note: Detected induction.
common/predict.c:157:9: note: === vect_pattern_recog ===
common/predict.c:157:9: note: vect_is_simple_use: operand _73
common/predict.c:157:9: note: def_stmt: _73 = -_65;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand iftmp.15_75
common/predict.c:157:9: note: def_stmt: iftmp.15_75 = (unsigned char) _74;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand _74
common/predict.c:157:9: note: def_stmt: _74 = _73 >> 31;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand iftmp.15_76
common/predict.c:157:9: note: def_stmt: iftmp.15_76 = (unsigned char) _65;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_recog_mixed_size_cond_pattern: detected:
common/predict.c:157:9: note: pattern recognized: patt_143 = (unsigned char) patt_144;
common/predict.c:157:9: note: === vect_analyze_data_ref_accesses ===
common/predict.c:157:9: note: === vect_mark_stmts_to_be_vectorized ===
common/predict.c:157:9: note: init: phi relevant? x_30 = PHI <x_69(6), 0(10)>
common/predict.c:157:9: note: init: phi relevant? pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:157:9: note: init: phi relevant? .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>
common/predict.c:157:9: note: init: phi relevant? ivtmp_151 = PHI <ivtmp_150(6), 16(10)>
common/predict.c:157:9: note: init: stmt relevant? # DEBUG pix => NULL
common/predict.c:157:9: note: init: stmt relevant? # DEBUG x => NULL
common/predict.c:157:9: note: init: stmt relevant? _63 = (sizetype) x_30;
common/predict.c:157:9: note: init: stmt relevant? _64 = src_29 + _63;
common/predict.c:157:9: note: init: stmt relevant? _65 = pix_95 >> 5;
common/predict.c:157:9: note: init: stmt relevant? # DEBUG x => NULL
common/predict.c:157:9: note: init: stmt relevant? _66 = _65 & -256;
common/predict.c:157:9: note: init: stmt relevant? _73 = -_65;
common/predict.c:157:9: note: init: stmt relevant? _74 = _73 >> 31;
common/predict.c:157:9: note: init: stmt relevant? iftmp.15_75 = (unsigned char) _74;
common/predict.c:157:9: note: init: stmt relevant? iftmp.15_76 = (unsigned char) _65;
common/predict.c:157:9: note: init: stmt relevant? iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
common/predict.c:157:9: note: init: stmt relevant? # DEBUG x => NULL
common/predict.c:157:9: note: init: stmt relevant? *_64 = iftmp.15_77;
common/predict.c:157:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: init: stmt relevant? pix_68 = b_54 + pix_95;
common/predict.c:157:9: note: init: stmt relevant? # DEBUG pix => pix_68
common/predict.c:157:9: note: init: stmt relevant? x_69 = x_30 + 1;
common/predict.c:157:9: note: init: stmt relevant? # DEBUG x => x_69
common/predict.c:157:9: note: init: stmt relevant? # DEBUG pix => pix_68
common/predict.c:157:9: note: init: stmt relevant? # DEBUG x => x_69
common/predict.c:157:9: note: init: stmt relevant? ivtmp_150 = ivtmp_151 - 1;
common/predict.c:157:9: note: init: stmt relevant? if (ivtmp_150 != 0)
common/predict.c:157:9: note: worklist: examine stmt: *_64 = iftmp.15_77;
common/predict.c:157:9: note: vect_is_simple_use: operand iftmp.15_77
common/predict.c:157:9: note: def_stmt: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: last stmt in pattern. don't mark relevant/live.
common/predict.c:157:9: note: worklist: examine stmt: patt_143 = (unsigned char) patt_144;
common/predict.c:157:9: note: vect_is_simple_use: operand patt_144
common/predict.c:157:9: note: def_stmt: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: worklist: examine stmt: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:157:9: note: vect_is_simple_use: operand _66
common/predict.c:157:9: note: def_stmt: _66 = _65 & -256;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: vect_is_simple_use: operand 0
common/predict.c:157:9: note: vect_is_simple_use: operand _74
common/predict.c:157:9: note: def_stmt: _74 = _73 >> 31;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: worklist: examine stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: vect_is_simple_use: operand pix_95
common/predict.c:157:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:157:9: note: type of def: 4.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: worklist: examine stmt: pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:157:9: note: vect_is_simple_use: operand pix_68
common/predict.c:157:9: note: def_stmt: pix_68 = b_54 + pix_95;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: vect_is_simple_use: operand pix_94
common/predict.c:157:9: note: def_stmt: pix_94 = PHI <pix_71(9), pix_62(5)>
common/predict.c:157:9: note: type of def: 2.
common/predict.c:157:9: note: def_stmt is out of loop.
common/predict.c:157:9: note: worklist: examine stmt: pix_68 = b_54 + pix_95;
common/predict.c:157:9: note: vect_is_simple_use: operand b_54
common/predict.c:157:9: note: def_stmt: b_54 = _53 >> 6;
common/predict.c:157:9: note: type of def: 2.
common/predict.c:157:9: note: def_stmt is out of loop.
common/predict.c:157:9: note: vect_is_simple_use: operand pix_95
common/predict.c:157:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:157:9: note: type of def: 4.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: already marked relevant/live.
common/predict.c:157:9: note: worklist: examine stmt: _74 = _73 >> 31;
common/predict.c:157:9: note: vect_is_simple_use: operand _73
common/predict.c:157:9: note: def_stmt: _73 = -_65;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: worklist: examine stmt: _73 = -_65;
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: already marked relevant/live.
common/predict.c:157:9: note: worklist: examine stmt: _66 = _65 & -256;
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: mark relevant 4, live 0.
common/predict.c:157:9: note: already marked relevant/live.
common/predict.c:157:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: *_64 = iftmp.15_77;
  stmt_b: *_64 = iftmp.15_77;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_3)
  (chrec_b = {0B, +, 1}_3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/predict.c:157:9: note: === vect_determine_vectorization_factor ===
common/predict.c:157:9: note: ==> examining phi: x_30 = PHI <x_69(6), 0(10)>

common/predict.c:157:9: note: ==> examining phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: nunits = 4
common/predict.c:157:9: note: ==> examining phi: .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>

common/predict.c:157:9: note: ==> examining phi: ivtmp_151 = PHI <ivtmp_150(6), 16(10)>

common/predict.c:157:9: note: ==> examining statement: # DEBUG pix => NULL

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: # DEBUG x => NULL

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: _63 = (sizetype) x_30;

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: _64 = src_29 + _63;

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: _65 = pix_95 >> 5;

common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: nunits = 4
common/predict.c:157:9: note: ==> examining statement: # DEBUG x => NULL

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: _66 = _65 & -256;

common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: nunits = 4
common/predict.c:157:9: note: ==> examining statement: _73 = -_65;

common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: nunits = 4
common/predict.c:157:9: note: ==> examining statement: _74 = _73 >> 31;

common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: nunits = 4
common/predict.c:157:9: note: ==> examining statement: iftmp.15_75 = (unsigned char) _74;

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: iftmp.15_76 = (unsigned char) _65;

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;

common/predict.c:157:9: note: ==> examining pattern statement: patt_143 = (unsigned char) patt_144;

common/predict.c:157:9: note: ==> examining pattern def stmt: patt_144 = _66 != 0 ? _74 : _65;

common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: nunits = 4
common/predict.c:157:9: note: ==> examining statement: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;

common/predict.c:157:9: note: ==> examining pattern statement: patt_143 = (unsigned char) patt_144;

common/predict.c:157:9: note: get vectype for scalar type:  unsigned char
common/predict.c:157:9: note: vectype: vector(16) unsigned char
common/predict.c:157:9: note: nunits = 16
common/predict.c:157:9: note: ==> examining statement: # DEBUG x => NULL

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: *_64 = iftmp.15_77;

common/predict.c:157:9: note: get vectype for scalar type:  uint8_t
common/predict.c:157:9: note: vectype: vector(16) unsigned char
common/predict.c:157:9: note: nunits = 16
common/predict.c:157:9: note: ==> examining statement: pix_68 = b_54 + pix_95;

common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: get vectype for scalar type:  int
common/predict.c:157:9: note: vectype: vector(4) int
common/predict.c:157:9: note: nunits = 4
common/predict.c:157:9: note: ==> examining statement: # DEBUG pix => pix_68

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: x_69 = x_30 + 1;

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: # DEBUG x => x_69

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: # DEBUG pix => pix_68

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: # DEBUG x => x_69

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: ivtmp_150 = ivtmp_151 - 1;

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: ==> examining statement: if (ivtmp_150 != 0)

common/predict.c:157:9: note: skip.
common/predict.c:157:9: note: vectorization factor = 16
common/predict.c:157:9: note: === vect_analyze_data_refs_alignment ===
common/predict.c:157:9: note: vect_compute_data_ref_alignment:
common/predict.c:157:9: note: can't force alignment of ref: *_64
common/predict.c:157:9: note: === vect_prune_runtime_alias_test_list ===
common/predict.c:157:9: note: === vect_enhance_data_refs_alignment ===
common/predict.c:157:9: note: Unknown misalignment, is_packed = 0
common/predict.c:157:9: note: vect_can_advance_ivs_p:
common/predict.c:157:9: note: Analyze phi: x_30 = PHI <x_69(6), 0(10)>

common/predict.c:157:9: note: Analyze phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:157:9: note: Analyze phi: .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>

common/predict.c:157:9: note: virtual phi. skip.
common/predict.c:157:9: note: Analyze phi: ivtmp_151 = PHI <ivtmp_150(6), 16(10)>

common/predict.c:157:9: note: Vectorizing an unaligned access.
common/predict.c:157:9: note: === vect_analyze_slp ===
common/predict.c:157:9: note: === vect_make_slp_decision ===
common/predict.c:157:9: note: === vect_detect_hybrid_slp ===
common/predict.c:157:9: note: === vect_analyze_loop_operations ===
common/predict.c:157:9: note: examining phi: x_30 = PHI <x_69(6), 0(10)>

common/predict.c:157:9: note: examining phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:157:9: note: === vectorizable_induction ===
common/predict.c:157:9: note: vect_model_induction_cost: inside_cost = 4, prologue_cost = 2 .
common/predict.c:157:9: note: examining phi: .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>

common/predict.c:157:9: note: examining phi: ivtmp_151 = PHI <ivtmp_150(6), 16(10)>

common/predict.c:157:9: note: ==> examining statement: # DEBUG pix => NULL
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: # DEBUG x => NULL
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: _63 = (sizetype) x_30;
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: _64 = src_29 + _63;
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: _65 = pix_95 >> 5;
common/predict.c:157:9: note: vect_is_simple_use: operand pix_95
common/predict.c:157:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:157:9: note: type of def: 4.
common/predict.c:157:9: note: vect_is_simple_use: operand 5
common/predict.c:157:9: note: vector/scalar shift/rotate found.
common/predict.c:157:9: note: === vectorizable_shift ===
common/predict.c:157:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/predict.c:157:9: note: ==> examining statement: # DEBUG x => NULL
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: _66 = _65 & -256;
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand -256
common/predict.c:157:9: note: === vectorizable_operation ===
common/predict.c:157:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/predict.c:157:9: note: ==> examining statement: _73 = -_65;
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: === vectorizable_operation ===
common/predict.c:157:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/predict.c:157:9: note: ==> examining statement: _74 = _73 >> 31;
common/predict.c:157:9: note: vect_is_simple_use: operand _73
common/predict.c:157:9: note: def_stmt: _73 = -_65;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand 31
common/predict.c:157:9: note: vector/scalar shift/rotate found.
common/predict.c:157:9: note: === vectorizable_shift ===
common/predict.c:157:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/predict.c:157:9: note: ==> examining statement: iftmp.15_75 = (unsigned char) _74;
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: iftmp.15_76 = (unsigned char) _65;
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
common/predict.c:157:9: note: ==> examining pattern statement: patt_143 = (unsigned char) patt_144;
common/predict.c:157:9: note: ==> examining pattern def statement: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:157:9: note: ==> examining statement: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:157:9: note: vect_is_simple_use: operand _66 != 0
common/predict.c:157:9: note: not ssa-name.
common/predict.c:157:9: note: use not simple.
common/predict.c:157:9: note: vect_is_simple_use: operand _66
common/predict.c:157:9: note: def_stmt: _66 = _65 & -256;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand _74
common/predict.c:157:9: note: def_stmt: _74 = _73 >> 31;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand patt_144
common/predict.c:157:9: note: def_stmt: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: === vectorizable_conversion ===
common/predict.c:157:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/predict.c:157:9: note: ==> examining statement: # DEBUG x => NULL
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: *_64 = iftmp.15_77;
common/predict.c:157:9: note: vect_is_simple_use: operand iftmp.15_77
common/predict.c:157:9: note: def_stmt: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_model_store_cost: unaligned supported by hardware.
common/predict.c:157:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/predict.c:157:9: note: ==> examining statement: pix_68 = b_54 + pix_95;
common/predict.c:157:9: note: vect_is_simple_use: operand b_54
common/predict.c:157:9: note: def_stmt: b_54 = _53 >> 6;
common/predict.c:157:9: note: type of def: 2.
common/predict.c:157:9: note: vect_is_simple_use: operand pix_95
common/predict.c:157:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:157:9: note: type of def: 4.
common/predict.c:157:9: note: === vectorizable_operation ===
common/predict.c:157:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/predict.c:157:9: note: ==> examining statement: # DEBUG pix => pix_68
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: x_69 = x_30 + 1;
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: # DEBUG x => x_69
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: # DEBUG pix => pix_68
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: # DEBUG x => x_69
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: ivtmp_150 = ivtmp_151 - 1;
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: ==> examining statement: if (ivtmp_150 != 0)
common/predict.c:157:9: note: irrelevant.
common/predict.c:157:9: note: vectorization_factor = 16, niters = 16
common/predict.c:157:9: note: === vect_update_slp_costs_according_to_vf ===
common/predict.c:157:9: note: Cost model analysis: 
  Vector inside of loop cost: 29
  Vector prologue cost: 6
  Vector epilogue cost: 0
  Scalar iteration cost: 7
  Scalar outside cost: 0
  Vector outside cost: 6
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 2
common/predict.c:157:9: note:   Runtime profitability threshold = 15
common/predict.c:157:9: note:   Static estimate profitability threshold = 15
common/predict.c:157:9: note: loop vectorized
common/predict.c:157:9: note: === vec_transform_loop ===
common/predict.c:157:9: note: ------>vectorizing phi: x_30 = PHI <x_69(6), 0(12)>

common/predict.c:157:9: note: ------>vectorizing phi: pix_95 = PHI <pix_68(6), pix_94(12)>

common/predict.c:157:9: note: multiple-types.
common/predict.c:157:9: note: transform phi.
common/predict.c:157:9: note: transform induction phi.
common/predict.c:157:9: note: created new init_stmt: stmp_var_.121_142 = b_54 + pix_94;

common/predict.c:157:9: note: created new init_stmt: stmp_var_.121_141 = b_54 + stmp_var_.121_142;

common/predict.c:157:9: note: created new init_stmt: stmp_var_.121_140 = b_54 + stmp_var_.121_141;

common/predict.c:157:9: note: created new init_stmt: vect_cst_.122_139 = {pix_94, stmp_var_.121_142, stmp_var_.121_141, stmp_var_.121_140};
common/predict.c:157:9: note: created new init_stmt: vect_cst_.123_138 = b_54 * 16;
common/predict.c:157:9: note: created new init_stmt: vect_cst_.124_137 = {vect_cst_.123_138, vect_cst_.123_138, vect_cst_.123_138, vect_cst_.123_138};
common/predict.c:157:9: note: created new init_stmt: vect_cst_.126_134 = b_54 * 4;
common/predict.c:157:9: note: created new init_stmt: vect_cst_.127_133 = {vect_cst_.126_134, vect_cst_.126_134, vect_cst_.126_134, vect_cst_.126_134};
common/predict.c:157:9: note: transform induction: created def-use cycle: vect_vec_iv_.125_136 = PHI <vect_vec_iv_.125_135(6), vect_cst_.122_139(12)>

vect_vec_iv_.125_130 = vect_vec_iv_.125_131 + vect_cst_.127_133;

common/predict.c:157:9: note: ------>vectorizing phi: .MEM_96 = PHI <.MEM_67(6), .MEM_97(12)>

common/predict.c:157:9: note: ------>vectorizing phi: ivtmp_151 = PHI <ivtmp_150(6), 16(12)>

common/predict.c:157:9: note: ------>vectorizing phi: vect_vec_iv_.125_136 = PHI <vect_vec_iv_.125_135(6), vect_cst_.122_139(12)>

common/predict.c:157:9: note: ------>vectorizing statement: vect_vec_iv_.125_135 = vect_vec_iv_.125_136 + vect_cst_.124_137;

common/predict.c:157:9: note: ------>vectorizing statement: vect_vec_iv_.125_132 = vect_vec_iv_.125_136 + vect_cst_.127_133;

common/predict.c:157:9: note: ------>vectorizing statement: vect_vec_iv_.125_131 = vect_vec_iv_.125_132 + vect_cst_.127_133;

common/predict.c:157:9: note: ------>vectorizing statement: vect_vec_iv_.125_130 = vect_vec_iv_.125_131 + vect_cst_.127_133;

common/predict.c:157:9: note: ------>vectorizing statement: # DEBUG pix => NULL

common/predict.c:157:9: note: ------>vectorizing statement: # DEBUG x => NULL

common/predict.c:157:9: note: ------>vectorizing statement: _63 = (sizetype) x_30;

common/predict.c:157:9: note: ------>vectorizing statement: _64 = src_29 + _63;

common/predict.c:157:9: note: ------>vectorizing statement: _65 = pix_95 >> 5;

common/predict.c:157:9: note: multiple-types.
common/predict.c:157:9: note: transform statement.
common/predict.c:157:9: note: vect_is_simple_use: operand pix_95
common/predict.c:157:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(12)>
common/predict.c:157:9: note: type of def: 4.
common/predict.c:157:9: note: vect_is_simple_use: operand 5
common/predict.c:157:9: note: vector/scalar shift/rotate found.
common/predict.c:157:9: note: transform binary/unary operation.
common/predict.c:157:9: note: operand 1 using scalar mode.
common/predict.c:157:9: note: vect_get_vec_def_for_operand: pix_95
common/predict.c:157:9: note: vect_is_simple_use: operand pix_95
common/predict.c:157:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(12)>
common/predict.c:157:9: note: type of def: 4.
common/predict.c:157:9: note: def =  pix_95
  def_stmt =  pix_95 = PHI <pix_68(6), pix_94(12)>
common/predict.c:157:9: note: add new stmt: vect__65.128_129 = vect_vec_iv_.125_136 >> 5;
common/predict.c:157:9: note: add new stmt: vect__65.128_128 = vect_vec_iv_.125_132 >> 5;
common/predict.c:157:9: note: add new stmt: vect__65.128_127 = vect_vec_iv_.125_131 >> 5;
common/predict.c:157:9: note: add new stmt: vect__65.128_126 = vect_vec_iv_.125_130 >> 5;
common/predict.c:157:9: note: ------>vectorizing statement: # DEBUG x => NULL

common/predict.c:157:9: note: ------>vectorizing statement: _66 = _65 & -256;

common/predict.c:157:9: note: multiple-types.
common/predict.c:157:9: note: transform statement.
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand -256
common/predict.c:157:9: note: transform binary/unary operation.
common/predict.c:157:9: note: vect_get_vec_def_for_operand: _65
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: def =  _65
  def_stmt =  _65 = pix_95 >> 5;
common/predict.c:157:9: note: vect_get_vec_def_for_operand: -256
common/predict.c:157:9: note: vect_is_simple_use: operand -256
common/predict.c:157:9: note: Create vector_cst. nunits = 4
common/predict.c:157:9: note: created new init_stmt: vect_cst_.130_125 = { -256, -256, -256, -256 };
common/predict.c:157:9: note: add new stmt: vect__66.129_124 = vect__65.128_129 & vect_cst_.130_125;
common/predict.c:157:9: note: add new stmt: vect__66.129_123 = vect__65.128_128 & vect_cst_.130_125;
common/predict.c:157:9: note: add new stmt: vect__66.129_122 = vect__65.128_127 & vect_cst_.130_125;
common/predict.c:157:9: note: add new stmt: vect__66.129_121 = vect__65.128_126 & vect_cst_.130_125;
common/predict.c:157:9: note: ------>vectorizing statement: _73 = -_65;

common/predict.c:157:9: note: multiple-types.
common/predict.c:157:9: note: transform statement.
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: transform binary/unary operation.
common/predict.c:157:9: note: vect_get_vec_def_for_operand: _65
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: def =  _65
  def_stmt =  _65 = pix_95 >> 5;
common/predict.c:157:9: note: add new stmt: vect__73.131_120 = -vect__65.128_129;
common/predict.c:157:9: note: add new stmt: vect__73.131_119 = -vect__65.128_128;
common/predict.c:157:9: note: add new stmt: vect__73.131_118 = -vect__65.128_127;
common/predict.c:157:9: note: add new stmt: vect__73.131_117 = -vect__65.128_126;
common/predict.c:157:9: note: ------>vectorizing statement: _74 = _73 >> 31;

common/predict.c:157:9: note: multiple-types.
common/predict.c:157:9: note: transform statement.
common/predict.c:157:9: note: vect_is_simple_use: operand _73
common/predict.c:157:9: note: def_stmt: _73 = -_65;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand 31
common/predict.c:157:9: note: vector/scalar shift/rotate found.
common/predict.c:157:9: note: transform binary/unary operation.
common/predict.c:157:9: note: operand 1 using scalar mode.
common/predict.c:157:9: note: vect_get_vec_def_for_operand: _73
common/predict.c:157:9: note: vect_is_simple_use: operand _73
common/predict.c:157:9: note: def_stmt: _73 = -_65;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: def =  _73
  def_stmt =  _73 = -_65;
common/predict.c:157:9: note: add new stmt: vect__74.132_116 = vect__73.131_120 >> 31;
common/predict.c:157:9: note: add new stmt: vect__74.132_115 = vect__73.131_119 >> 31;
common/predict.c:157:9: note: add new stmt: vect__74.132_114 = vect__73.131_118 >> 31;
common/predict.c:157:9: note: add new stmt: vect__74.132_113 = vect__73.131_117 >> 31;
common/predict.c:157:9: note: ------>vectorizing statement: iftmp.15_75 = (unsigned char) _74;

common/predict.c:157:9: note: ------>vectorizing statement: iftmp.15_76 = (unsigned char) _65;

common/predict.c:157:9: note: ------>vectorizing statement: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;

common/predict.c:157:9: note: ==> vectorizing pattern def stmt: patt_144 = _66 != 0 ? _74 : _65;

common/predict.c:157:9: note: multiple-types.
common/predict.c:157:9: note: transform statement.
common/predict.c:157:9: note: vect_is_simple_use: operand _66
common/predict.c:157:9: note: def_stmt: _66 = _65 & -256;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand _74
common/predict.c:157:9: note: def_stmt: _74 = _73 >> 31;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_get_vec_def_for_operand: _66
common/predict.c:157:9: note: vect_is_simple_use: operand _66
common/predict.c:157:9: note: def_stmt: _66 = _65 & -256;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: def =  _66
  def_stmt =  _66 = _65 & -256;
common/predict.c:157:9: note: vect_is_simple_use: operand _66
common/predict.c:157:9: note: def_stmt: _66 = _65 & -256;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_get_vec_def_for_operand: 0
common/predict.c:157:9: note: vect_is_simple_use: operand 0
common/predict.c:157:9: note: Create vector_cst. nunits = 4
common/predict.c:157:9: note: created new init_stmt: vect_cst_.134_112 = { 0, 0, 0, 0 };
common/predict.c:157:9: note: vect_is_simple_use: operand 0
common/predict.c:157:9: note: vect_get_vec_def_for_operand: _74
common/predict.c:157:9: note: vect_is_simple_use: operand _74
common/predict.c:157:9: note: def_stmt: _74 = _73 >> 31;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: def =  _74
  def_stmt =  _74 = _73 >> 31;
common/predict.c:157:9: note: vect_is_simple_use: operand _74
common/predict.c:157:9: note: def_stmt: _74 = _73 >> 31;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: vect_get_vec_def_for_operand: _65
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: def =  _65
  def_stmt =  _65 = pix_95 >> 5;
common/predict.c:157:9: note: vect_is_simple_use: operand _65
common/predict.c:157:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: add new stmt: vect_patt_144.133_111 = VEC_COND_EXPR <vect__66.129_124 != vect_cst_.134_112, vect__74.132_116, vect__65.128_129>;
common/predict.c:157:9: note: add new stmt: vect_patt_144.133_110 = VEC_COND_EXPR <vect__66.129_123 != vect_cst_.134_112, vect__74.132_115, vect__65.128_128>;
common/predict.c:157:9: note: add new stmt: vect_patt_144.133_109 = VEC_COND_EXPR <vect__66.129_122 != vect_cst_.134_112, vect__74.132_114, vect__65.128_127>;
common/predict.c:157:9: note: add new stmt: vect_patt_144.133_108 = VEC_COND_EXPR <vect__66.129_121 != vect_cst_.134_112, vect__74.132_113, vect__65.128_126>;
common/predict.c:157:9: note: ------>vectorizing statement: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;

common/predict.c:157:9: note: transform statement.
common/predict.c:157:9: note: vect_is_simple_use: operand patt_144
common/predict.c:157:9: note: def_stmt: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: transform conversion. ncopies = 1.
common/predict.c:157:9: note: vect_get_vec_def_for_operand: patt_144
common/predict.c:157:9: note: vect_is_simple_use: operand patt_144
common/predict.c:157:9: note: def_stmt: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: def =  patt_144
  def_stmt =  patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:157:9: note: add new stmt: vect_patt_143.136_107 = VEC_PACK_TRUNC_EXPR <vect_patt_144.133_111, vect_patt_144.133_110>;
common/predict.c:157:9: note: add new stmt: vect_patt_143.136_106 = VEC_PACK_TRUNC_EXPR <vect_patt_144.133_109, vect_patt_144.133_108>;
common/predict.c:157:9: note: add new stmt: vect_patt_143.135_105 = VEC_PACK_TRUNC_EXPR <vect_patt_143.136_107, vect_patt_143.136_106>;
common/predict.c:157:9: note: ------>vectorizing statement: # DEBUG x => NULL

common/predict.c:157:9: note: ------>vectorizing statement: *_64 = iftmp.15_77;

common/predict.c:157:9: note: transform statement.
common/predict.c:157:9: note: vect_is_simple_use: operand iftmp.15_77
common/predict.c:157:9: note: def_stmt: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: transform store. ncopies = 1
common/predict.c:157:9: note: vect_get_vec_def_for_operand: iftmp.15_77
common/predict.c:157:9: note: vect_is_simple_use: operand iftmp.15_77
common/predict.c:157:9: note: def_stmt: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
common/predict.c:157:9: note: type of def: 3.
common/predict.c:157:9: note: def =  iftmp.15_77
  def_stmt =  iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
common/predict.c:157:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_29
Applying pattern match.pd:49, generic-match.c:4015
common/predict.c:157:9: note: created vectp_src.138_104
common/predict.c:157:9: note: add new stmt: MEM[(uint8_t *)vectp_src.137_103] = vect_patt_143.135_105;
common/predict.c:157:9: note: ------>vectorizing statement: pix_68 = b_54 + pix_95;

common/predict.c:157:9: note: multiple-types.
common/predict.c:157:9: note: transform statement.
common/predict.c:157:9: note: vect_is_simple_use: operand b_54
common/predict.c:157:9: note: def_stmt: b_54 = _53 >> 6;
common/predict.c:157:9: note: type of def: 2.
common/predict.c:157:9: note: vect_is_simple_use: operand pix_95
common/predict.c:157:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(12)>
common/predict.c:157:9: note: type of def: 4.
common/predict.c:157:9: note: transform binary/unary operation.
common/predict.c:157:9: note: vect_get_vec_def_for_operand: b_54
common/predict.c:157:9: note: vect_is_simple_use: operand b_54
common/predict.c:157:9: note: def_stmt: b_54 = _53 >> 6;
common/predict.c:157:9: note: type of def: 2.
common/predict.c:157:9: note: def =  b_54
  def_stmt =  b_54 = _53 >> 6;
common/predict.c:157:9: note: Create vector_inv.
common/predict.c:157:9: note: created new init_stmt: vect_cst_.140_67 = {b_54, b_54, b_54, b_54};
common/predict.c:157:9: note: vect_get_vec_def_for_operand: pix_95
common/predict.c:157:9: note: vect_is_simple_use: operand pix_95
common/predict.c:157:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(12)>
common/predict.c:157:9: note: type of def: 4.
common/predict.c:157:9: note: def =  pix_95
  def_stmt =  pix_95 = PHI <pix_68(6), pix_94(12)>
common/predict.c:157:9: note: add new stmt: vect_pix_68.139_100 = vect_cst_.140_67 + vect_vec_iv_.125_136;
common/predict.c:157:9: note: add new stmt: vect_pix_68.139_99 = vect_cst_.140_67 + vect_vec_iv_.125_132;
common/predict.c:157:9: note: add new stmt: vect_pix_68.139_98 = vect_cst_.140_67 + vect_vec_iv_.125_131;
common/predict.c:157:9: note: add new stmt: vect_pix_68.139_90 = vect_cst_.140_67 + vect_vec_iv_.125_130;
common/predict.c:157:9: note: ------>vectorizing statement: # DEBUG pix => pix_68

common/predict.c:157:9: note: ------>vectorizing statement: x_69 = x_30 + 1;

common/predict.c:157:9: note: ------>vectorizing statement: # DEBUG x => x_69

common/predict.c:157:9: note: ------>vectorizing statement: # DEBUG pix => pix_68

common/predict.c:157:9: note: ------>vectorizing statement: # DEBUG x => x_69

common/predict.c:157:9: note: ------>vectorizing statement: ivtmp_150 = ivtmp_151 - 1;

common/predict.c:157:9: note: ------>vectorizing statement: vectp_src.137_102 = vectp_src.137_103 + 16;

common/predict.c:157:9: note: ------>vectorizing statement: if (ivtmp_150 != 0)


loop at common/predict.c:159: if (ivtmp_88 < 1)

;; Scaling loop 3 with scale 0.062500, bounding iterations to 1 from guessed 16
;; guessed iterations are now 1
common/predict.c:157:9: note: LOOP VECTORIZED


Analyzing loop at common/predict.c:142
common/predict.c:142:5: note: ===== analyze_loop_nest =====
common/predict.c:142:5: note: === vect_analyze_loop_form ===
common/predict.c:142:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:142:5: note: === vect_analyze_data_refs ===
Creating dr for *_16
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_15(D)
	offset from base address: 0
	constant offset from base address: -24(OVF)
	step: 1
	aligned to: 128
	base_object: *src_15(D)
	Access function 0: {-24B, +, 1}_1
Creating dr for *_23
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_15(D)
	offset from base address: 0
	constant offset from base address: -26(OVF)
	step: -1(OVF)
	aligned to: 128
	base_object: *src_15(D)
	Access function 0: {-26B, +, 18446744073709551615}_1
Creating dr for *_34
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_15(D)
	offset from base address: 0
	constant offset from base address: 255
	step: 32
	aligned to: 128
	base_object: *src_15(D)
	Access function 0: {255B, +, 32}_1
Creating dr for *_40
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_15(D)
	offset from base address: 0
	constant offset from base address: 191
	step: -32(OVF)
	aligned to: 128
	base_object: *src_15(D)
	Access function 0: {191B, +, 18446744073709551584}_1
common/predict.c:142:5: note: got vectype for stmt: _18 = *_16;
vector(16) unsigned char
common/predict.c:142:5: note: got vectype for stmt: _24 = *_23;
vector(16) unsigned char
common/predict.c:142:5: note: got vectype for stmt: _35 = *_34;
vector(16) unsigned char
common/predict.c:142:5: note: got vectype for stmt: _41 = *_40;
vector(16) unsigned char
common/predict.c:142:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:142:5: note: Analyze phi: i_91 = PHI <i_11(4), 0(2)>

common/predict.c:142:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:142:5: note: step: 1,  init: 0
common/predict.c:142:5: note: Detected induction.
common/predict.c:142:5: note: Analyze phi: H_92 = PHI <H_28(4), 0(2)>

common/predict.c:142:5: note: Access function of PHI: {0, +, _27}_1
common/predict.c:142:5: note: step: _27,  init: 0
common/predict.c:142:5: note: step unknown.
common/predict.c:142:5: note: Analyze phi: V_93 = PHI <V_45(4), 0(2)>

common/predict.c:142:5: note: Access function of PHI: {0, +, _44}_1
common/predict.c:142:5: note: step: _44,  init: 0
common/predict.c:142:5: note: step unknown.
common/predict.c:142:5: note: Analyze phi: ivtmp_147 = PHI <ivtmp_146(4), 8(2)>

common/predict.c:142:5: note: Access function of PHI: {8, +, 4294967295}_1
common/predict.c:142:5: note: step: 4294967295,  init: 8
common/predict.c:142:5: note: Detected induction.
common/predict.c:142:5: note: Analyze phi: V_93 = PHI <V_45(4), 0(2)>

common/predict.c:142:5: note: detected reduction: V_45 = _44 + V_93;

common/predict.c:142:5: note: Detected reduction.
common/predict.c:142:5: note: Analyze phi: H_92 = PHI <H_28(4), 0(2)>

common/predict.c:142:5: note: detected reduction: H_28 = _27 + H_92;

common/predict.c:142:5: note: Detected reduction.
common/predict.c:142:5: note: === vect_pattern_recog ===
common/predict.c:142:5: note: vect_is_simple_use: operand i_11
common/predict.c:142:5: note: def_stmt: i_11 = i_91 + 1;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand _27
common/predict.c:142:5: note: def_stmt: _27 = i_11 * _26;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand _27
common/predict.c:142:5: note: def_stmt: _27 = i_11 * _26;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand i_11
common/predict.c:142:5: note: def_stmt: i_11 = i_91 + 1;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand _27
common/predict.c:142:5: note: def_stmt: _27 = i_11 * _26;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand _12
common/predict.c:142:5: note: def_stmt: _12 = i_91 + 8;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand _20
common/predict.c:142:5: note: def_stmt: _20 = 6 - i_91;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand i_11
common/predict.c:142:5: note: def_stmt: i_11 = i_91 + 1;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand _44
common/predict.c:142:5: note: def_stmt: _44 = i_11 * _43;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand _44
common/predict.c:142:5: note: def_stmt: _44 = i_11 * _43;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand i_11
common/predict.c:142:5: note: def_stmt: i_11 = i_91 + 1;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand _44
common/predict.c:142:5: note: def_stmt: _44 = i_11 * _43;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:142:5: note: Detected single element interleaving *_34 step 32
common/predict.c:142:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:142:5: note: Detected single element interleaving *_40 step -32(OVF)
common/predict.c:142:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:142:5: note: === vect_mark_stmts_to_be_vectorized ===
common/predict.c:142:5: note: init: phi relevant? i_91 = PHI <i_11(4), 0(2)>
common/predict.c:142:5: note: init: phi relevant? H_92 = PHI <H_28(4), 0(2)>
common/predict.c:142:5: note: init: phi relevant? V_93 = PHI <V_45(4), 0(2)>
common/predict.c:142:5: note: init: phi relevant? ivtmp_147 = PHI <ivtmp_146(4), 8(2)>
common/predict.c:142:5: note: init: stmt relevant? # DEBUG V => V_93
common/predict.c:142:5: note: init: stmt relevant? # DEBUG H => H_92
common/predict.c:142:5: note: init: stmt relevant? # DEBUG i => i_91
common/predict.c:142:5: note: init: stmt relevant? i_11 = i_91 + 1;
common/predict.c:142:5: note: init: stmt relevant? _12 = i_91 + 8;
common/predict.c:142:5: note: init: stmt relevant? _13 = (sizetype) _12;
common/predict.c:142:5: note: init: stmt relevant? _14 = _13 + 18446744073709551584;
common/predict.c:142:5: note: init: stmt relevant? _16 = src_15(D) + _14;
common/predict.c:142:5: note: init: stmt relevant? _18 = *_16;
common/predict.c:142:5: note: init: stmt relevant? _19 = (int) _18;
common/predict.c:142:5: note: init: stmt relevant? _20 = 6 - i_91;
common/predict.c:142:5: note: init: stmt relevant? _21 = (sizetype) _20;
common/predict.c:142:5: note: init: stmt relevant? _22 = _21 + 18446744073709551584;
common/predict.c:142:5: note: init: stmt relevant? _23 = src_15(D) + _22;
common/predict.c:142:5: note: init: stmt relevant? _24 = *_23;
common/predict.c:142:5: note: init: stmt relevant? _25 = (int) _24;
common/predict.c:142:5: note: init: stmt relevant? _26 = _19 - _25;
common/predict.c:142:5: note: init: stmt relevant? _27 = i_11 * _26;
common/predict.c:142:5: note: init: stmt relevant? H_28 = _27 + H_92;
common/predict.c:142:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:142:5: note: mark relevant 0, live 1.
common/predict.c:142:5: note: init: stmt relevant? # DEBUG H => H_28
common/predict.c:142:5: note: init: stmt relevant? _31 = _12 * 32;
common/predict.c:142:5: note: init: stmt relevant? _32 = _31 + -1;
common/predict.c:142:5: note: init: stmt relevant? _33 = (sizetype) _32;
common/predict.c:142:5: note: init: stmt relevant? _34 = src_15(D) + _33;
common/predict.c:142:5: note: init: stmt relevant? _35 = *_34;
common/predict.c:142:5: note: init: stmt relevant? _36 = (int) _35;
common/predict.c:142:5: note: init: stmt relevant? _37 = _20 * 32;
common/predict.c:142:5: note: init: stmt relevant? _38 = _37 + -1;
common/predict.c:142:5: note: init: stmt relevant? _39 = (sizetype) _38;
common/predict.c:142:5: note: init: stmt relevant? _40 = src_15(D) + _39;
common/predict.c:142:5: note: init: stmt relevant? _41 = *_40;
common/predict.c:142:5: note: init: stmt relevant? _42 = (int) _41;
common/predict.c:142:5: note: init: stmt relevant? _43 = _36 - _42;
common/predict.c:142:5: note: init: stmt relevant? _44 = i_11 * _43;
common/predict.c:142:5: note: init: stmt relevant? V_45 = _44 + V_93;
common/predict.c:142:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:142:5: note: mark relevant 0, live 1.
common/predict.c:142:5: note: init: stmt relevant? # DEBUG V => V_45
common/predict.c:142:5: note: init: stmt relevant? # DEBUG i => i_11
common/predict.c:142:5: note: init: stmt relevant? # DEBUG V => V_45
common/predict.c:142:5: note: init: stmt relevant? # DEBUG H => H_28
common/predict.c:142:5: note: init: stmt relevant? # DEBUG i => i_11
common/predict.c:142:5: note: init: stmt relevant? ivtmp_146 = ivtmp_147 - 1;
common/predict.c:142:5: note: init: stmt relevant? if (ivtmp_146 != 0)
common/predict.c:142:5: note: worklist: examine stmt: V_45 = _44 + V_93;
common/predict.c:142:5: note: vect_is_simple_use: operand _44
common/predict.c:142:5: note: def_stmt: _44 = i_11 * _43;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: vect_is_simple_use: operand V_93
common/predict.c:142:5: note: def_stmt: V_93 = PHI <V_45(4), 0(2)>
common/predict.c:142:5: note: type of def: 5.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: worklist: examine stmt: V_93 = PHI <V_45(4), 0(2)>
common/predict.c:142:5: note: vect_is_simple_use: operand V_45
common/predict.c:142:5: note: def_stmt: V_45 = _44 + V_93;
common/predict.c:142:5: note: type of def: 5.
common/predict.c:142:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:142:5: note: vect_is_simple_use: operand 0
common/predict.c:142:5: note: worklist: examine stmt: _44 = i_11 * _43;
common/predict.c:142:5: note: vect_is_simple_use: operand i_11
common/predict.c:142:5: note: def_stmt: i_11 = i_91 + 1;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: vect_is_simple_use: operand _43
common/predict.c:142:5: note: def_stmt: _43 = _36 - _42;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: worklist: examine stmt: _43 = _36 - _42;
common/predict.c:142:5: note: vect_is_simple_use: operand _36
common/predict.c:142:5: note: def_stmt: _36 = (int) _35;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: vect_is_simple_use: operand _42
common/predict.c:142:5: note: def_stmt: _42 = (int) _41;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: worklist: examine stmt: _42 = (int) _41;
common/predict.c:142:5: note: vect_is_simple_use: operand _41
common/predict.c:142:5: note: def_stmt: _41 = *_40;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: worklist: examine stmt: _41 = *_40;
common/predict.c:142:5: note: worklist: examine stmt: _36 = (int) _35;
common/predict.c:142:5: note: vect_is_simple_use: operand _35
common/predict.c:142:5: note: def_stmt: _35 = *_34;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: worklist: examine stmt: _35 = *_34;
common/predict.c:142:5: note: worklist: examine stmt: i_11 = i_91 + 1;
common/predict.c:142:5: note: vect_is_simple_use: operand i_91
common/predict.c:142:5: note: def_stmt: i_91 = PHI <i_11(4), 0(2)>
common/predict.c:142:5: note: type of def: 4.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: worklist: examine stmt: i_91 = PHI <i_11(4), 0(2)>
common/predict.c:142:5: note: vect_is_simple_use: operand i_11
common/predict.c:142:5: note: def_stmt: i_11 = i_91 + 1;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: already marked relevant/live.
common/predict.c:142:5: note: vect_is_simple_use: operand 0
common/predict.c:142:5: note: worklist: examine stmt: H_28 = _27 + H_92;
common/predict.c:142:5: note: vect_is_simple_use: operand _27
common/predict.c:142:5: note: def_stmt: _27 = i_11 * _26;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: vect_is_simple_use: operand H_92
common/predict.c:142:5: note: def_stmt: H_92 = PHI <H_28(4), 0(2)>
common/predict.c:142:5: note: type of def: 5.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: worklist: examine stmt: H_92 = PHI <H_28(4), 0(2)>
common/predict.c:142:5: note: vect_is_simple_use: operand H_28
common/predict.c:142:5: note: def_stmt: H_28 = _27 + H_92;
common/predict.c:142:5: note: type of def: 5.
common/predict.c:142:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:142:5: note: vect_is_simple_use: operand 0
common/predict.c:142:5: note: worklist: examine stmt: _27 = i_11 * _26;
common/predict.c:142:5: note: vect_is_simple_use: operand i_11
common/predict.c:142:5: note: def_stmt: i_11 = i_91 + 1;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: already marked relevant/live.
common/predict.c:142:5: note: vect_is_simple_use: operand _26
common/predict.c:142:5: note: def_stmt: _26 = _19 - _25;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: worklist: examine stmt: _26 = _19 - _25;
common/predict.c:142:5: note: vect_is_simple_use: operand _19
common/predict.c:142:5: note: def_stmt: _19 = (int) _18;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: vect_is_simple_use: operand _25
common/predict.c:142:5: note: def_stmt: _25 = (int) _24;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: worklist: examine stmt: _25 = (int) _24;
common/predict.c:142:5: note: vect_is_simple_use: operand _24
common/predict.c:142:5: note: def_stmt: _24 = *_23;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: worklist: examine stmt: _24 = *_23;
common/predict.c:142:5: note: worklist: examine stmt: _19 = (int) _18;
common/predict.c:142:5: note: vect_is_simple_use: operand _18
common/predict.c:142:5: note: def_stmt: _18 = *_16;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: mark relevant 3, live 0.
common/predict.c:142:5: note: worklist: examine stmt: _18 = *_16;
common/predict.c:142:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _18 = *_16;
  stmt_b: _24 = *_23;
(analyze_overlapping_iterations 
  (chrec_a = {-24B, +, 1}_1)
  (chrec_b = {-26B, +, 18446744073709551615}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
affine-affine test failed: unimplemented.
  (overlaps_a = not known)
  (overlaps_b = not known))
)
  (overlap_iterations_a = not known)
  (overlap_iterations_b = not known))
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _18 = *_16;
  stmt_b: _35 = *_34;
(analyze_overlapping_iterations 
  (chrec_a = {-24B, +, 1}_1)
  (chrec_b = {255B, +, 32}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _18 = *_16;
  stmt_b: _41 = *_40;
(analyze_overlapping_iterations 
  (chrec_a = {-24B, +, 1}_1)
  (chrec_b = {191B, +, 18446744073709551584}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
affine-affine test failed: unimplemented.
  (overlaps_a = not known)
  (overlaps_b = not known))
)
  (overlap_iterations_a = not known)
  (overlap_iterations_b = not known))
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: _35 = *_34;
(analyze_overlapping_iterations 
  (chrec_a = {-26B, +, 18446744073709551615}_1)
  (chrec_b = {255B, +, 32}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
affine-affine test failed: unimplemented.
  (overlaps_a = not known)
  (overlaps_b = not known))
)
  (overlap_iterations_a = not known)
  (overlap_iterations_b = not known))
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: _41 = *_40;
(analyze_overlapping_iterations 
  (chrec_a = {-26B, +, 18446744073709551615}_1)
  (chrec_b = {191B, +, 18446744073709551584}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [7 + 32 * x_1])
  (overlaps_b = [7 + 1 * x_1]))
)
  (overlap_iterations_a = [7 + 32 * x_1])
  (overlap_iterations_b = [7 + 1 * x_1]))
(Dependence relation cannot be represented by distance vector.) 
)
(compute_affine_dependence
  stmt_a: _35 = *_34;
  stmt_b: _41 = *_40;
(analyze_overlapping_iterations 
  (chrec_a = {255B, +, 32}_1)
  (chrec_b = {191B, +, 18446744073709551584}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
affine-affine test failed: unimplemented.
  (overlaps_a = not known)
  (overlaps_b = not known))
)
  (overlap_iterations_a = not known)
  (overlap_iterations_b = not known))
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _18 = *_16;
  stmt_b: _18 = *_16;
(analyze_overlapping_iterations 
  (chrec_a = {-24B, +, 1}_1)
  (chrec_b = {-24B, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: _24 = *_23;
(analyze_overlapping_iterations 
  (chrec_a = {-26B, +, 18446744073709551615}_1)
  (chrec_b = {-26B, +, 18446744073709551615}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _35 = *_34;
  stmt_b: _35 = *_34;
(analyze_overlapping_iterations 
  (chrec_a = {255B, +, 32}_1)
  (chrec_b = {255B, +, 32}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _41 = *_40;
(analyze_overlapping_iterations 
  (chrec_a = {191B, +, 18446744073709551584}_1)
  (chrec_b = {191B, +, 18446744073709551584}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/predict.c:142:5: note: === vect_determine_vectorization_factor ===
common/predict.c:142:5: note: ==> examining phi: i_91 = PHI <i_11(4), 0(2)>

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: nunits = 4
common/predict.c:142:5: note: ==> examining phi: H_92 = PHI <H_28(4), 0(2)>

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: nunits = 4
common/predict.c:142:5: note: ==> examining phi: V_93 = PHI <V_45(4), 0(2)>

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: nunits = 4
common/predict.c:142:5: note: ==> examining phi: ivtmp_147 = PHI <ivtmp_146(4), 8(2)>

common/predict.c:142:5: note: ==> examining statement: # DEBUG V => V_93

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: # DEBUG H => H_92

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: # DEBUG i => i_91

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: i_11 = i_91 + 1;

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: nunits = 4
common/predict.c:142:5: note: ==> examining statement: _12 = i_91 + 8;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _13 = (sizetype) _12;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _14 = _13 + 18446744073709551584;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _16 = src_15(D) + _14;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _18 = *_16;

common/predict.c:142:5: note: get vectype for scalar type:  unsigned char
common/predict.c:142:5: note: vectype: vector(16) unsigned char
common/predict.c:142:5: note: nunits = 16
common/predict.c:142:5: note: ==> examining statement: _19 = (int) _18;

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: get vectype for scalar type:  unsigned char
common/predict.c:142:5: note: vectype: vector(16) unsigned char
common/predict.c:142:5: note: nunits = 16
common/predict.c:142:5: note: ==> examining statement: _20 = 6 - i_91;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _21 = (sizetype) _20;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _22 = _21 + 18446744073709551584;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _23 = src_15(D) + _22;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _24 = *_23;

common/predict.c:142:5: note: get vectype for scalar type:  unsigned char
common/predict.c:142:5: note: vectype: vector(16) unsigned char
common/predict.c:142:5: note: nunits = 16
common/predict.c:142:5: note: ==> examining statement: _25 = (int) _24;

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: get vectype for scalar type:  unsigned char
common/predict.c:142:5: note: vectype: vector(16) unsigned char
common/predict.c:142:5: note: nunits = 16
common/predict.c:142:5: note: ==> examining statement: _26 = _19 - _25;

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: nunits = 4
common/predict.c:142:5: note: ==> examining statement: _27 = i_11 * _26;

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: nunits = 4
common/predict.c:142:5: note: ==> examining statement: H_28 = _27 + H_92;

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: nunits = 4
common/predict.c:142:5: note: ==> examining statement: # DEBUG H => H_28

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _31 = _12 * 32;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _32 = _31 + -1;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _33 = (sizetype) _32;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _34 = src_15(D) + _33;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _35 = *_34;

common/predict.c:142:5: note: get vectype for scalar type:  unsigned char
common/predict.c:142:5: note: vectype: vector(16) unsigned char
common/predict.c:142:5: note: nunits = 16
common/predict.c:142:5: note: ==> examining statement: _36 = (int) _35;

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: get vectype for scalar type:  unsigned char
common/predict.c:142:5: note: vectype: vector(16) unsigned char
common/predict.c:142:5: note: nunits = 16
common/predict.c:142:5: note: ==> examining statement: _37 = _20 * 32;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _38 = _37 + -1;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _39 = (sizetype) _38;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _40 = src_15(D) + _39;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: _41 = *_40;

common/predict.c:142:5: note: get vectype for scalar type:  unsigned char
common/predict.c:142:5: note: vectype: vector(16) unsigned char
common/predict.c:142:5: note: nunits = 16
common/predict.c:142:5: note: ==> examining statement: _42 = (int) _41;

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: get vectype for scalar type:  unsigned char
common/predict.c:142:5: note: vectype: vector(16) unsigned char
common/predict.c:142:5: note: nunits = 16
common/predict.c:142:5: note: ==> examining statement: _43 = _36 - _42;

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: nunits = 4
common/predict.c:142:5: note: ==> examining statement: _44 = i_11 * _43;

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: nunits = 4
common/predict.c:142:5: note: ==> examining statement: V_45 = _44 + V_93;

common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: get vectype for scalar type:  int
common/predict.c:142:5: note: vectype: vector(4) int
common/predict.c:142:5: note: nunits = 4
common/predict.c:142:5: note: ==> examining statement: # DEBUG V => V_45

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: # DEBUG i => i_11

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: # DEBUG V => V_45

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: # DEBUG H => H_28

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: # DEBUG i => i_11

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: ivtmp_146 = ivtmp_147 - 1;

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: ==> examining statement: if (ivtmp_146 != 0)

common/predict.c:142:5: note: skip.
common/predict.c:142:5: note: vectorization factor = 16
common/predict.c:142:5: note: === vect_analyze_data_refs_alignment ===
common/predict.c:142:5: note: vect_compute_data_ref_alignment:
common/predict.c:142:5: note: can't force alignment of ref: *_16
common/predict.c:142:5: note: vect_compute_data_ref_alignment:
common/predict.c:142:5: note: can't force alignment of ref: *_23
common/predict.c:142:5: note: vect_compute_data_ref_alignment:
common/predict.c:142:5: note: can't force alignment of ref: *_34
common/predict.c:142:5: note: vect_compute_data_ref_alignment:
common/predict.c:142:5: note: can't force alignment of ref: *_40
common/predict.c:142:5: note: === vect_prune_runtime_alias_test_list ===
common/predict.c:142:5: note: === vect_enhance_data_refs_alignment ===
common/predict.c:142:5: note: Unknown misalignment, is_packed = 0
common/predict.c:142:5: note: Unknown misalignment, is_packed = 0
common/predict.c:142:5: note: vector alignment may not be reachable
common/predict.c:142:5: note: vect_can_advance_ivs_p:
common/predict.c:142:5: note: Analyze phi: i_91 = PHI <i_11(4), 0(2)>

common/predict.c:142:5: note: Analyze phi: H_92 = PHI <H_28(4), 0(2)>

common/predict.c:142:5: note: reduc phi. skip.
common/predict.c:142:5: note: Analyze phi: V_93 = PHI <V_45(4), 0(2)>

common/predict.c:142:5: note: reduc phi. skip.
common/predict.c:142:5: note: Analyze phi: ivtmp_147 = PHI <ivtmp_146(4), 8(2)>

common/predict.c:142:5: note: Vectorizing an unaligned access.
common/predict.c:142:5: note: Vectorizing an unaligned access.
common/predict.c:142:5: note: Vectorizing an unaligned access.
common/predict.c:142:5: note: Vectorizing an unaligned access.
common/predict.c:142:5: note: === vect_analyze_slp ===
common/predict.c:142:5: note: Build SLP for V_45 = _44 + V_93;

common/predict.c:142:5: note: Build SLP for H_28 = _27 + H_92;

common/predict.c:142:5: note: vect_is_simple_use: operand _44
common/predict.c:142:5: note: def_stmt: _44 = i_11 * _43;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand V_93
common/predict.c:142:5: note: def_stmt: V_93 = PHI <V_45(4), 0(2)>
common/predict.c:142:5: note: type of def: 5.
common/predict.c:142:5: note: vect_is_simple_use: operand _27
common/predict.c:142:5: note: def_stmt: _27 = i_11 * _26;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand H_92
common/predict.c:142:5: note: def_stmt: H_92 = PHI <H_28(4), 0(2)>
common/predict.c:142:5: note: type of def: 5.
common/predict.c:142:5: note: Build SLP for _44 = i_11 * _43;

common/predict.c:142:5: note: Build SLP for _27 = i_11 * _26;

common/predict.c:142:5: note: vect_is_simple_use: operand i_11
common/predict.c:142:5: note: def_stmt: i_11 = i_91 + 1;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand _43
common/predict.c:142:5: note: def_stmt: _43 = _36 - _42;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand i_11
common/predict.c:142:5: note: def_stmt: i_11 = i_91 + 1;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: vect_is_simple_use: operand _26
common/predict.c:142:5: note: def_stmt: _26 = _19 - _25;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: Build SLP for i_11 = i_91 + 1;

common/predict.c:142:5: note: Build SLP for i_11 = i_91 + 1;

common/predict.c:142:5: note: vect_is_simple_use: operand i_91
common/predict.c:142:5: note: def_stmt: i_91 = PHI <i_11(4), 0(2)>
common/predict.c:142:5: note: type of def: 4.
common/predict.c:142:5: note: Build SLP failed: illegal type of def i_91
common/predict.c:142:5: note: === vect_make_slp_decision ===
common/predict.c:142:5: note: === vect_detect_hybrid_slp ===
common/predict.c:142:5: note: === vect_analyze_loop_operations ===
common/predict.c:142:5: note: examining phi: i_91 = PHI <i_11(4), 0(2)>

common/predict.c:142:5: note: === vectorizable_induction ===
common/predict.c:142:5: note: vect_model_induction_cost: inside_cost = 4, prologue_cost = 2 .
common/predict.c:142:5: note: examining phi: H_92 = PHI <H_28(4), 0(2)>

common/predict.c:142:5: note: examining phi: V_93 = PHI <V_45(4), 0(2)>

common/predict.c:142:5: note: examining phi: ivtmp_147 = PHI <ivtmp_146(4), 8(2)>

common/predict.c:142:5: note: ==> examining statement: # DEBUG V => V_93
common/predict.c:142:5: note: irrelevant.
common/predict.c:142:5: note: ==> examining statement: # DEBUG H => H_92
common/predict.c:142:5: note: irrelevant.
common/predict.c:142:5: note: ==> examining statement: # DEBUG i => i_91
common/predict.c:142:5: note: irrelevant.
common/predict.c:142:5: note: ==> examining statement: i_11 = i_91 + 1;
common/predict.c:142:5: note: vect_is_simple_use: operand i_91
common/predict.c:142:5: note: def_stmt: i_91 = PHI <i_11(4), 0(2)>
common/predict.c:142:5: note: type of def: 4.
common/predict.c:142:5: note: vect_is_simple_use: operand 1
common/predict.c:142:5: note: === vectorizable_operation ===
common/predict.c:142:5: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/predict.c:142:5: note: ==> examining statement: _12 = i_91 + 8;
common/predict.c:142:5: note: irrelevant.
common/predict.c:142:5: note: ==> examining statement: _13 = (sizetype) _12;
common/predict.c:142:5: note: irrelevant.
common/predict.c:142:5: note: ==> examining statement: _14 = _13 + 18446744073709551584;
common/predict.c:142:5: note: irrelevant.
common/predict.c:142:5: note: ==> examining statement: _16 = src_15(D) + _14;
common/predict.c:142:5: note: irrelevant.
common/predict.c:142:5: note: ==> examining statement: _18 = *_16;
common/predict.c:142:5: note: vect_is_simple_use: operand *_16
common/predict.c:142:5: note: not ssa-name.
common/predict.c:142:5: note: use not simple.
common/predict.c:142:5: note: vect_is_simple_use: operand *_16
common/predict.c:142:5: note: not ssa-name.
common/predict.c:142:5: note: use not simple.
common/predict.c:142:5: note: vect_model_load_cost: unaligned supported by hardware.
common/predict.c:142:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/predict.c:142:5: note: ==> examining statement: _19 = (int) _18;
common/predict.c:142:5: note: vect_is_simple_use: operand _18
common/predict.c:142:5: note: def_stmt: _18 = *_16;
common/predict.c:142:5: note: type of def: 3.
common/predict.c:142:5: note: === vectorizable_conversion ===
common/predict.c:142:5: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/predict.c:142:5: note: ==> examining statement: _20 = 6 - i_91;
common/predict.c:142:5: note: irrelevant.
common/predict.c:142:5: note: ==> examining statement: _21 = (sizetype) _20;
common/predict.c:142:5: note: irrelevant.
common/predict.c:142:5: note: ==> examining statement: _22 = _21 + 18446744073709551584;
common/predict.c:142:5: note: irrelevant.
common/predict.c:142:5: note: ==> examining statement: _23 = src_15(D) + _22;
common/predict.c:142:5: note: irrelevant.
common/predict.c:142:5: note: ==> examining statement: _24 = *_23;
common/predict.c:142:5: note: vect_is_simple_use: operand *_23
common/predict.c:142:5: note: not ssa-name.
common/predict.c:142:5: note: use not simple.
common/predict.c:142:5: note: vect_is_simple_use: operand *_23
common/predict.c:142:5: note: not ssa-name.
common/predict.c:142:5: note: use not simple.
common/predict.c:142:5: note: negative step and reversing not supported.
common/predict.c:142:5: note: not vectorized: relevant stmt not supported: _24 = *_23;
common/predict.c:142:5: note: bad operation or unsupported loop bound.
common/predict.c:133:13: note: vectorized 1 loops in function.
Merging blocks 10 and 12
predict_16x16_p (uint8_t * src)
{
  vector(4) int vect_cst_.140;
  vector(4) int vect_pix_68.139;
  vector(16) unsigned char * vectp_src.138;
  vector(16) unsigned char * vectp_src.137;
  vector(8) short int vect_patt_143.136;
  vector(16) unsigned char vect_patt_143.135;
  vector(4) int vect_cst_.134;
  vector(4) int vect_patt_144.133;
  vector(4) int vect__74.132;
  vector(4) int vect__73.131;
  vector(4) int vect_cst_.130;
  vector(4) int vect__66.129;
  vector(4) int vect__65.128;
  vector(4) int vect_cst_.127;
  int vect_cst_.126;
  vector(4) int vect_vec_iv_.125;
  vector(4) int vect_cst_.124;
  int vect_cst_.123;
  vector(4) int vect_cst_.122;
  int stmp_var_.121;
  int pix;
  int V;
  int H;
  int c;
  int b;
  int a;
  int i;
  int y;
  int x;
  int _12;
  sizetype _13;
  sizetype _14;
  uint8_t * _16;
  unsigned char _18;
  int _19;
  int _20;
  sizetype _21;
  sizetype _22;
  uint8_t * _23;
  unsigned char _24;
  int _25;
  int _26;
  int _27;
  int _31;
  int _32;
  sizetype _33;
  uint8_t * _34;
  unsigned char _35;
  int _36;
  int _37;
  int _38;
  sizetype _39;
  uint8_t * _40;
  unsigned char _41;
  int _42;
  int _43;
  int _44;
  unsigned char _46;
  int _47;
  unsigned char _48;
  int _49;
  int _50;
  int _52;
  int _53;
  int _55;
  int _56;
  int _58;
  int _59;
  int _60;
  int _61;
  sizetype _63;
  uint8_t * _64;
  int _65;
  int _66;
  int _73;
  int _74;
  unsigned char iftmp.15_75;
  unsigned char iftmp.15_76;
  unsigned char iftmp.15_77;
  unsigned int ivtmp_88;
  unsigned int ivtmp_89;
  int patt_144;
  int patt_145;
  unsigned int ivtmp_146;
  unsigned int ivtmp_147;
  unsigned int ivtmp_148;
  unsigned int ivtmp_149;
  unsigned int ivtmp_150;
  unsigned int ivtmp_151;

  <bb 2>:
  # DEBUG H => 0
  # DEBUG V => 0
  # DEBUG i => 0
  # DEBUG V => 0
  # DEBUG H => 0
  # DEBUG i => 0

  <bb 3>:
  # i_91 = PHI <i_11(4), 0(2)>
  # H_92 = PHI <H_28(4), 0(2)>
  # V_93 = PHI <V_45(4), 0(2)>
  # ivtmp_147 = PHI <ivtmp_146(4), 8(2)>
  # DEBUG V => V_93
  # DEBUG H => H_92
  # DEBUG i => i_91
  i_11 = i_91 + 1;
  _12 = i_91 + 8;
  _13 = (sizetype) _12;
  _14 = _13 + 18446744073709551584;
  _16 = src_15(D) + _14;
  _18 = *_16;
  _19 = (int) _18;
  _20 = 6 - i_91;
  _21 = (sizetype) _20;
  _22 = _21 + 18446744073709551584;
  _23 = src_15(D) + _22;
  _24 = *_23;
  _25 = (int) _24;
  _26 = _19 - _25;
  _27 = i_11 * _26;
  H_28 = _27 + H_92;
  # DEBUG H => H_28
  _31 = _12 * 32;
  _32 = _31 + -1;
  _33 = (sizetype) _32;
  _34 = src_15(D) + _33;
  _35 = *_34;
  _36 = (int) _35;
  _37 = _20 * 32;
  _38 = _37 + -1;
  _39 = (sizetype) _38;
  _40 = src_15(D) + _39;
  _41 = *_40;
  _42 = (int) _41;
  _43 = _36 - _42;
  _44 = i_11 * _43;
  V_45 = _44 + V_93;
  # DEBUG V => V_45
  # DEBUG i => i_11
  # DEBUG V => V_45
  # DEBUG H => H_28
  # DEBUG i => i_11
  ivtmp_146 = ivtmp_147 - 1;
  if (ivtmp_146 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # H_153 = PHI <H_28(3)>
  # V_152 = PHI <V_45(3)>
  _46 = MEM[(uint8_t *)src_15(D) + 479B];
  _47 = (int) _46;
  _48 = MEM[(uint8_t *)src_15(D) + -17B];
  _49 = (int) _48;
  _50 = _47 + _49;
  a_51 = _50 * 16;
  # DEBUG a => a_51
  _52 = H_153 * 5;
  _53 = _52 + 32;
  b_54 = _53 >> 6;
  # DEBUG b => b_54
  _55 = V_152 * 5;
  _56 = _55 + 32;
  c_57 = _56 >> 6;
  # DEBUG c => c_57
  _58 = b_54 * -7;
  _59 = a_51 + _58;
  _60 = c_57 * -7;
  _61 = _59 + _60;
  pix_62 = _61 + 16;
  # DEBUG i00 => pix_62
  # DEBUG y => 0
  # DEBUG i00 => pix_62
  # DEBUG y => 0
  # DEBUG src => src_15(D)
  goto <bb 10>;

  <bb 6>:

  <bb 7>:
  # x_30 = PHI <x_69(6), 0(10)>
  # pix_95 = PHI <pix_68(6), pix_94(10)>
  # ivtmp_151 = PHI <ivtmp_150(6), 16(10)>
  # vect_vec_iv_.125_136 = PHI <vect_vec_iv_.125_135(6), vect_cst_.122_139(10)>
  # vectp_src.137_103 = PHI <vectp_src.137_102(6), vectp_src.138_104(10)>
  # ivtmp_89 = PHI <ivtmp_88(6), 0(10)>
  vect_vec_iv_.125_135 = vect_vec_iv_.125_136 + vect_cst_.124_137;
  vect_vec_iv_.125_132 = vect_vec_iv_.125_136 + vect_cst_.127_133;
  vect_vec_iv_.125_131 = vect_vec_iv_.125_132 + vect_cst_.127_133;
  vect_vec_iv_.125_130 = vect_vec_iv_.125_131 + vect_cst_.127_133;
  # DEBUG pix => NULL
  # DEBUG x => NULL
  _63 = (sizetype) x_30;
  _64 = src_29 + _63;
  vect__65.128_129 = vect_vec_iv_.125_136 >> 5;
  vect__65.128_128 = vect_vec_iv_.125_132 >> 5;
  vect__65.128_127 = vect_vec_iv_.125_131 >> 5;
  vect__65.128_126 = vect_vec_iv_.125_130 >> 5;
  _65 = pix_95 >> 5;
  # DEBUG x => NULL
  vect__66.129_124 = vect__65.128_129 & vect_cst_.130_125;
  vect__66.129_123 = vect__65.128_128 & vect_cst_.130_125;
  vect__66.129_122 = vect__65.128_127 & vect_cst_.130_125;
  vect__66.129_121 = vect__65.128_126 & vect_cst_.130_125;
  _66 = _65 & -256;
  vect__73.131_120 = -vect__65.128_129;
  vect__73.131_119 = -vect__65.128_128;
  vect__73.131_118 = -vect__65.128_127;
  vect__73.131_117 = -vect__65.128_126;
  _73 = -_65;
  vect__74.132_116 = vect__73.131_120 >> 31;
  vect__74.132_115 = vect__73.131_119 >> 31;
  vect__74.132_114 = vect__73.131_118 >> 31;
  vect__74.132_113 = vect__73.131_117 >> 31;
  _74 = _73 >> 31;
  iftmp.15_75 = (unsigned char) _74;
  iftmp.15_76 = (unsigned char) _65;
  vect_patt_144.133_111 = VEC_COND_EXPR <vect__66.129_124 != vect_cst_.134_112, vect__74.132_116, vect__65.128_129>;
  vect_patt_144.133_110 = VEC_COND_EXPR <vect__66.129_123 != vect_cst_.134_112, vect__74.132_115, vect__65.128_128>;
  vect_patt_144.133_109 = VEC_COND_EXPR <vect__66.129_122 != vect_cst_.134_112, vect__74.132_114, vect__65.128_127>;
  vect_patt_144.133_108 = VEC_COND_EXPR <vect__66.129_121 != vect_cst_.134_112, vect__74.132_113, vect__65.128_126>;
  vect_patt_143.136_107 = VEC_PACK_TRUNC_EXPR <vect_patt_144.133_111, vect_patt_144.133_110>;
  vect_patt_143.136_106 = VEC_PACK_TRUNC_EXPR <vect_patt_144.133_109, vect_patt_144.133_108>;
  vect_patt_143.135_105 = VEC_PACK_TRUNC_EXPR <vect_patt_143.136_107, vect_patt_143.136_106>;
  iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
  # DEBUG x => NULL
  MEM[(uint8_t *)vectp_src.137_103] = vect_patt_143.135_105;
  vect_pix_68.139_100 = vect_cst_.140_67 + vect_vec_iv_.125_136;
  vect_pix_68.139_99 = vect_cst_.140_67 + vect_vec_iv_.125_132;
  vect_pix_68.139_98 = vect_cst_.140_67 + vect_vec_iv_.125_131;
  vect_pix_68.139_90 = vect_cst_.140_67 + vect_vec_iv_.125_130;
  pix_68 = b_54 + pix_95;
  # DEBUG pix => pix_68
  x_69 = x_30 + 1;
  # DEBUG x => x_69
  # DEBUG pix => pix_68
  # DEBUG x => x_69
  ivtmp_150 = ivtmp_151 - 1;
  vectp_src.137_102 = vectp_src.137_103 + 16;
  ivtmp_88 = ivtmp_89 + 1;
  if (ivtmp_88 < 1)
    goto <bb 6>;
  else
    goto <bb 8>;

  <bb 8>:
  src_70 = src_29 + 32;
  # DEBUG src => src_70
  pix_71 = c_57 + pix_94;
  # DEBUG i00 => pix_71
  y_72 = y_78 + 1;
  # DEBUG y => y_72
  # DEBUG i00 => pix_71
  # DEBUG y => y_72
  # DEBUG src => src_70
  ivtmp_148 = ivtmp_149 - 1;
  if (ivtmp_148 != 0)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 9>:

  <bb 10>:
  # src_29 = PHI <src_70(9), src_15(D)(5)>
  # y_78 = PHI <y_72(9), 0(5)>
  # pix_94 = PHI <pix_71(9), pix_62(5)>
  # ivtmp_149 = PHI <ivtmp_148(9), 16(5)>
  # DEBUG i00 => pix_94
  # DEBUG y => y_78
  # DEBUG src => src_29
  # DEBUG pix => pix_94
  # DEBUG x => 0
  stmp_var_.121_142 = b_54 + pix_94;
  stmp_var_.121_141 = b_54 + stmp_var_.121_142;
  stmp_var_.121_140 = b_54 + stmp_var_.121_141;
  vect_cst_.122_139 = {pix_94, stmp_var_.121_142, stmp_var_.121_141, stmp_var_.121_140};
  vect_cst_.123_138 = b_54 * 16;
  vect_cst_.124_137 = {vect_cst_.123_138, vect_cst_.123_138, vect_cst_.123_138, vect_cst_.123_138};
  vect_cst_.126_134 = b_54 * 4;
  vect_cst_.127_133 = {vect_cst_.126_134, vect_cst_.126_134, vect_cst_.126_134, vect_cst_.126_134};
  vect_cst_.130_125 = { -256, -256, -256, -256 };
  vect_cst_.134_112 = { 0, 0, 0, 0 };
  vectp_src.138_104 = src_29;
  vect_cst_.140_67 = {b_54, b_54, b_54, b_54};
  goto <bb 7>;

  <bb 11>:
  return;

}



;; Function predict_8x8c_dc_128 (predict_8x8c_dc_128, funcdef_no=122, decl_uid=5849, cgraph_uid=122, symbol_order=165)


Analyzing loop at common/predict.c:176
common/predict.c:176:5: note: ===== analyze_loop_nest =====
common/predict.c:176:5: note: === vect_analyze_loop_form ===
common/predict.c:176:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:176:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_13]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {0B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_13 + 4B]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {4B, +, 32}_1
common/predict.c:176:5: note: got vectype for stmt: MEM[(uint32_t *)src_13] = 2155905152;
vector(4) unsigned int
common/predict.c:176:5: note: got vectype for stmt: MEM[(uint32_t *)src_13 + 4B] = 2155905152;
vector(4) unsigned int
common/predict.c:176:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:176:5: note: Analyze phi: src_13 = PHI <src_8(4), src_4(D)(2)>

common/predict.c:176:5: note: Access function of PHI: {src_4(D), +, 32}_1
common/predict.c:176:5: note: step: 32,  init: src_4(D)
common/predict.c:176:5: note: Detected induction.
common/predict.c:176:5: note: Analyze phi: y_14 = PHI <y_9(4), 0(2)>

common/predict.c:176:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:176:5: note: step: 1,  init: 0
common/predict.c:176:5: note: Detected induction.
common/predict.c:176:5: note: Analyze phi: .MEM_15 = PHI <.MEM_7(4), .MEM_5(D)(2)>

common/predict.c:176:5: note: Analyze phi: ivtmp_2 = PHI <ivtmp_1(4), 8(2)>

common/predict.c:176:5: note: Access function of PHI: {8, +, 4294967295}_1
common/predict.c:176:5: note: step: 4294967295,  init: 8
common/predict.c:176:5: note: Detected induction.
common/predict.c:176:5: note: === vect_pattern_recog ===
common/predict.c:176:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:176:5: note: Detected interleaving MEM[(uint32_t *)src_13] and MEM[(uint32_t *)src_13 + 4B]
common/predict.c:176:5: note: interleaved store with gaps
common/predict.c:176:5: note: not vectorized: complicated access pattern.
common/predict.c:176:5: note: bad data access.
common/predict.c:172:13: note: vectorized 0 loops in function.
predict_8x8c_dc_128 (uint8_t * src)
{
  int y;
  unsigned int ivtmp_1;
  unsigned int ivtmp_2;

  <bb 2>:
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src => src_4(D)

  <bb 3>:
  # src_13 = PHI <src_8(4), src_4(D)(2)>
  # y_14 = PHI <y_9(4), 0(2)>
  # ivtmp_2 = PHI <ivtmp_1(4), 8(2)>
  # DEBUG y => y_14
  # DEBUG src => src_13
  # DEBUG p => src_13
  # DEBUG D#13 => src_13 + 4
  # DEBUG p => D#13
  MEM[(uint32_t *)src_13] = 2155905152;
  # DEBUG p => D#13 + 4
  MEM[(uint32_t *)src_13 + 4B] = 2155905152;
  src_8 = src_13 + 32;
  # DEBUG src => src_8
  y_9 = y_14 + 1;
  # DEBUG y => y_9
  # DEBUG y => y_9
  # DEBUG src => src_8
  ivtmp_1 = ivtmp_2 - 1;
  if (ivtmp_1 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function predict_8x8c_dc_left (predict_8x8c_dc_left, funcdef_no=123, decl_uid=5857, cgraph_uid=123, symbol_order=166)


Analyzing loop at common/predict.c:204
common/predict.c:204:5: note: ===== analyze_loop_nest =====
common/predict.c:204:5: note: === vect_analyze_loop_form ===
common/predict.c:204:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/predict.c:204:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_57]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_13(D)
	offset from base address: 0
	constant offset from base address: 128
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_13(D)]
	Access function 0: {128B, +, 32}_3
Creating dr for MEM[(uint32_t *)src_57 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_13(D)
	offset from base address: 0
	constant offset from base address: 132
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_13(D)]
	Access function 0: {132B, +, 32}_3
common/predict.c:204:5: note: got vectype for stmt: MEM[(uint32_t *)src_57] = dc1_33;
vector(4) unsigned int
common/predict.c:204:5: note: got vectype for stmt: MEM[(uint32_t *)src_57 + 4B] = dc1_33;
vector(4) unsigned int
common/predict.c:204:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:204:5: note: Analyze phi: src_57 = PHI <src_72(8), src_42(10)>

common/predict.c:204:5: note: Access function of PHI: {src_72, +, 32}_3
common/predict.c:204:5: note: step: 32,  init: src_72
common/predict.c:204:5: note: Detected induction.
common/predict.c:204:5: note: Analyze phi: y_60 = PHI <0(8), y_43(10)>

common/predict.c:204:5: note: Access function of PHI: {0, +, 1}_3
common/predict.c:204:5: note: step: 1,  init: 0
common/predict.c:204:5: note: Detected induction.
common/predict.c:204:5: note: Analyze phi: .MEM_64 = PHI <.MEM_36(8), .MEM_41(10)>

common/predict.c:204:5: note: Analyze phi: ivtmp_71 = PHI <4(8), ivtmp_70(10)>

common/predict.c:204:5: note: Access function of PHI: {4, +, 4294967295}_3
common/predict.c:204:5: note: step: 4294967295,  init: 4
common/predict.c:204:5: note: Detected induction.
common/predict.c:204:5: note: === vect_pattern_recog ===
common/predict.c:204:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:204:5: note: Detected interleaving MEM[(uint32_t *)src_57] and MEM[(uint32_t *)src_57 + 4B]
common/predict.c:204:5: note: interleaved store with gaps
common/predict.c:204:5: note: not vectorized: complicated access pattern.
common/predict.c:204:5: note: bad data access.

Analyzing loop at common/predict.c:197
common/predict.c:197:5: note: ===== analyze_loop_nest =====
common/predict.c:197:5: note: === vect_analyze_loop_form ===
common/predict.c:197:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/predict.c:197:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_56]
analyze_innermost: success.
	base_address: src_13(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_13(D)]
	Access function 0: {0B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_56 + 4B]
analyze_innermost: success.
	base_address: src_13(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_13(D)]
	Access function 0: {4B, +, 32}_2
common/predict.c:197:5: note: got vectype for stmt: MEM[(uint32_t *)src_56] = dc0_30;
vector(4) unsigned int
common/predict.c:197:5: note: got vectype for stmt: MEM[(uint32_t *)src_56 + 4B] = dc0_30;
vector(4) unsigned int
common/predict.c:197:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:197:5: note: Analyze phi: src_56 = PHI <src_37(7), src_13(D)(5)>

common/predict.c:197:5: note: Access function of PHI: {src_13(D), +, 32}_2
common/predict.c:197:5: note: step: 32,  init: src_13(D)
common/predict.c:197:5: note: Detected induction.
common/predict.c:197:5: note: Analyze phi: y_59 = PHI <y_38(7), 0(5)>

common/predict.c:197:5: note: Access function of PHI: {0, +, 1}_2
common/predict.c:197:5: note: step: 1,  init: 0
common/predict.c:197:5: note: Detected induction.
common/predict.c:197:5: note: Analyze phi: .MEM_63 = PHI <.MEM_36(7), .MEM_15(D)(5)>

common/predict.c:197:5: note: Analyze phi: ivtmp_69 = PHI <ivtmp_68(7), 4(5)>

common/predict.c:197:5: note: Access function of PHI: {4, +, 4294967295}_2
common/predict.c:197:5: note: step: 4294967295,  init: 4
common/predict.c:197:5: note: Detected induction.
common/predict.c:197:5: note: === vect_pattern_recog ===
common/predict.c:197:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:197:5: note: Detected interleaving MEM[(uint32_t *)src_56] and MEM[(uint32_t *)src_56 + 4B]
common/predict.c:197:5: note: interleaved store with gaps
common/predict.c:197:5: note: not vectorized: complicated access pattern.
common/predict.c:197:5: note: bad data access.

Analyzing loop at common/predict.c:189
common/predict.c:189:5: note: ===== analyze_loop_nest =====
common/predict.c:189:5: note: === vect_analyze_loop_form ===
common/predict.c:189:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/predict.c:189:5: note: === vect_analyze_data_refs ===
Creating dr for *_14
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_13(D)
	offset from base address: 0
	constant offset from base address: -1(OVF)
	step: 32
	aligned to: 128
	base_object: *src_13(D)
	Access function 0: {-1B, +, 32}_1
Creating dr for *_23
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_13(D)
	offset from base address: 0
	constant offset from base address: 127
	step: 32
	aligned to: 128
	base_object: *src_13(D)
	Access function 0: {127B, +, 32}_1
common/predict.c:189:5: note: got vectype for stmt: _16 = *_14;
vector(16) unsigned char
common/predict.c:189:5: note: got vectype for stmt: _24 = *_23;
vector(16) unsigned char
common/predict.c:189:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:189:5: note: Analyze phi: y_58 = PHI <y_27(4), 0(2)>

common/predict.c:189:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:189:5: note: step: 1,  init: 0
common/predict.c:189:5: note: Detected induction.
common/predict.c:189:5: note: Analyze phi: dc0_61 = PHI <dc0_18(4), 0(2)>

common/predict.c:189:5: note: Access function of PHI: {0, +, _17}_1
common/predict.c:189:5: note: step: _17,  init: 0
common/predict.c:189:5: note: step unknown.
common/predict.c:189:5: note: Analyze phi: dc1_62 = PHI <dc1_26(4), 0(2)>

common/predict.c:189:5: note: Access function of PHI: {0, +, _25}_1
common/predict.c:189:5: note: step: _25,  init: 0
common/predict.c:189:5: note: step unknown.
common/predict.c:189:5: note: Analyze phi: ivtmp_67 = PHI <ivtmp_66(4), 4(2)>

common/predict.c:189:5: note: Access function of PHI: {4, +, 4294967295}_1
common/predict.c:189:5: note: step: 4294967295,  init: 4
common/predict.c:189:5: note: Detected induction.
common/predict.c:189:5: note: Analyze phi: dc1_62 = PHI <dc1_26(4), 0(2)>

common/predict.c:189:5: note: detected reduction: dc1_26 = _25 + dc1_62;

common/predict.c:189:5: note: Detected reduction.
common/predict.c:189:5: note: Analyze phi: dc0_61 = PHI <dc0_18(4), 0(2)>

common/predict.c:189:5: note: detected reduction: dc0_18 = _17 + dc0_61;

common/predict.c:189:5: note: Detected reduction.
common/predict.c:189:5: note: === vect_pattern_recog ===
common/predict.c:189:5: note: vect_is_simple_use: operand y_58
common/predict.c:189:5: note: def_stmt: y_58 = PHI <y_27(4), 0(2)>
common/predict.c:189:5: note: type of def: 4.
common/predict.c:189:5: note: vect_is_simple_use: operand _17
common/predict.c:189:5: note: def_stmt: _17 = (unsigned int) _16;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand _16
common/predict.c:189:5: note: def_stmt: _16 = *_14;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_recog_widen_sum_pattern: detected: patt_65 = _16 w+ dc0_61;

common/predict.c:189:5: note: vect_is_simple_use: operand _17
common/predict.c:189:5: note: def_stmt: _17 = (unsigned int) _16;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand _16
common/predict.c:189:5: note: def_stmt: _16 = *_14;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand _17
common/predict.c:189:5: note: def_stmt: _17 = (unsigned int) _16;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand _16
common/predict.c:189:5: note: def_stmt: _16 = *_14;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand _19
common/predict.c:189:5: note: def_stmt: _19 = y_58 + 4;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand _25
common/predict.c:189:5: note: def_stmt: _25 = (unsigned int) _24;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand _24
common/predict.c:189:5: note: def_stmt: _24 = *_23;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_recog_widen_sum_pattern: detected: patt_55 = _24 w+ dc1_62;

common/predict.c:189:5: note: vect_is_simple_use: operand _25
common/predict.c:189:5: note: def_stmt: _25 = (unsigned int) _24;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand _24
common/predict.c:189:5: note: def_stmt: _24 = *_23;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand _25
common/predict.c:189:5: note: def_stmt: _25 = (unsigned int) _24;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand _24
common/predict.c:189:5: note: def_stmt: _24 = *_23;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:189:5: note: Detected single element interleaving *_14 step 32
common/predict.c:189:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:189:5: note: Detected single element interleaving *_23 step 32
common/predict.c:189:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:189:5: note: === vect_mark_stmts_to_be_vectorized ===
common/predict.c:189:5: note: init: phi relevant? y_58 = PHI <y_27(4), 0(2)>
common/predict.c:189:5: note: init: phi relevant? dc0_61 = PHI <dc0_18(4), 0(2)>
common/predict.c:189:5: note: init: phi relevant? dc1_62 = PHI <dc1_26(4), 0(2)>
common/predict.c:189:5: note: init: phi relevant? ivtmp_67 = PHI <ivtmp_66(4), 4(2)>
common/predict.c:189:5: note: init: stmt relevant? # DEBUG dc1 => dc1_62
common/predict.c:189:5: note: init: stmt relevant? # DEBUG dc0 => dc0_61
common/predict.c:189:5: note: init: stmt relevant? # DEBUG y => y_58
common/predict.c:189:5: note: init: stmt relevant? _10 = y_58 * 32;
common/predict.c:189:5: note: init: stmt relevant? _11 = (sizetype) _10;
common/predict.c:189:5: note: init: stmt relevant? _12 = _11 + 18446744073709551615;
common/predict.c:189:5: note: init: stmt relevant? _14 = src_13(D) + _12;
common/predict.c:189:5: note: init: stmt relevant? _16 = *_14;
common/predict.c:189:5: note: init: stmt relevant? _17 = (unsigned int) _16;
common/predict.c:189:5: note: init: stmt relevant? dc0_18 = _17 + dc0_61;
common/predict.c:189:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:189:5: note: mark relevant 0, live 1.
common/predict.c:189:5: note: init: stmt relevant? # DEBUG dc0 => dc0_18
common/predict.c:189:5: note: init: stmt relevant? _19 = y_58 + 4;
common/predict.c:189:5: note: init: stmt relevant? _20 = _19 * 32;
common/predict.c:189:5: note: init: stmt relevant? _21 = (sizetype) _20;
common/predict.c:189:5: note: init: stmt relevant? _22 = _21 + 18446744073709551615;
common/predict.c:189:5: note: init: stmt relevant? _23 = src_13(D) + _22;
common/predict.c:189:5: note: init: stmt relevant? _24 = *_23;
common/predict.c:189:5: note: init: stmt relevant? _25 = (unsigned int) _24;
common/predict.c:189:5: note: init: stmt relevant? dc1_26 = _25 + dc1_62;
common/predict.c:189:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:189:5: note: mark relevant 0, live 1.
common/predict.c:189:5: note: init: stmt relevant? # DEBUG dc1 => dc1_26
common/predict.c:189:5: note: init: stmt relevant? y_27 = y_58 + 1;
common/predict.c:189:5: note: init: stmt relevant? # DEBUG y => y_27
common/predict.c:189:5: note: init: stmt relevant? # DEBUG dc1 => dc1_26
common/predict.c:189:5: note: init: stmt relevant? # DEBUG dc0 => dc0_18
common/predict.c:189:5: note: init: stmt relevant? # DEBUG y => y_27
common/predict.c:189:5: note: init: stmt relevant? ivtmp_66 = ivtmp_67 - 1;
common/predict.c:189:5: note: init: stmt relevant? if (ivtmp_66 != 0)
common/predict.c:189:5: note: worklist: examine stmt: dc1_26 = _25 + dc1_62;
common/predict.c:189:5: note: vect_is_simple_use: operand _25
common/predict.c:189:5: note: def_stmt: _25 = (unsigned int) _24;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: mark relevant 3, live 0.
common/predict.c:189:5: note: vect_is_simple_use: operand dc1_62
common/predict.c:189:5: note: def_stmt: dc1_62 = PHI <dc1_26(4), 0(2)>
common/predict.c:189:5: note: type of def: 5.
common/predict.c:189:5: note: mark relevant 3, live 0.
common/predict.c:189:5: note: worklist: examine stmt: dc1_62 = PHI <dc1_26(4), 0(2)>
common/predict.c:189:5: note: vect_is_simple_use: operand dc1_26
common/predict.c:189:5: note: def_stmt: dc1_26 = _25 + dc1_62;
common/predict.c:189:5: note: type of def: 5.
common/predict.c:189:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:189:5: note: vect_is_simple_use: operand 0
common/predict.c:189:5: note: worklist: examine stmt: _25 = (unsigned int) _24;
common/predict.c:189:5: note: vect_is_simple_use: operand _24
common/predict.c:189:5: note: def_stmt: _24 = *_23;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: mark relevant 3, live 0.
common/predict.c:189:5: note: worklist: examine stmt: _24 = *_23;
common/predict.c:189:5: note: worklist: examine stmt: dc0_18 = _17 + dc0_61;
common/predict.c:189:5: note: vect_is_simple_use: operand _17
common/predict.c:189:5: note: def_stmt: _17 = (unsigned int) _16;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: mark relevant 3, live 0.
common/predict.c:189:5: note: vect_is_simple_use: operand dc0_61
common/predict.c:189:5: note: def_stmt: dc0_61 = PHI <dc0_18(4), 0(2)>
common/predict.c:189:5: note: type of def: 5.
common/predict.c:189:5: note: mark relevant 3, live 0.
common/predict.c:189:5: note: worklist: examine stmt: dc0_61 = PHI <dc0_18(4), 0(2)>
common/predict.c:189:5: note: vect_is_simple_use: operand dc0_18
common/predict.c:189:5: note: def_stmt: dc0_18 = _17 + dc0_61;
common/predict.c:189:5: note: type of def: 5.
common/predict.c:189:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:189:5: note: vect_is_simple_use: operand 0
common/predict.c:189:5: note: worklist: examine stmt: _17 = (unsigned int) _16;
common/predict.c:189:5: note: vect_is_simple_use: operand _16
common/predict.c:189:5: note: def_stmt: _16 = *_14;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: mark relevant 3, live 0.
common/predict.c:189:5: note: worklist: examine stmt: _16 = *_14;
common/predict.c:189:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _16 = *_14;
  stmt_b: _24 = *_23;
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 32}_1)
  (chrec_b = {127B, +, 32}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_14;
  stmt_b: _16 = *_14;
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 32}_1)
  (chrec_b = {-1B, +, 32}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: _24 = *_23;
(analyze_overlapping_iterations 
  (chrec_a = {127B, +, 32}_1)
  (chrec_b = {127B, +, 32}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/predict.c:189:5: note: === vect_determine_vectorization_factor ===
common/predict.c:189:5: note: ==> examining phi: y_58 = PHI <y_27(4), 0(2)>

common/predict.c:189:5: note: ==> examining phi: dc0_61 = PHI <dc0_18(4), 0(2)>

common/predict.c:189:5: note: get vectype for scalar type:  uint32_t
common/predict.c:189:5: note: vectype: vector(4) unsigned int
common/predict.c:189:5: note: nunits = 4
common/predict.c:189:5: note: ==> examining phi: dc1_62 = PHI <dc1_26(4), 0(2)>

common/predict.c:189:5: note: get vectype for scalar type:  uint32_t
common/predict.c:189:5: note: vectype: vector(4) unsigned int
common/predict.c:189:5: note: nunits = 4
common/predict.c:189:5: note: ==> examining phi: ivtmp_67 = PHI <ivtmp_66(4), 4(2)>

common/predict.c:189:5: note: ==> examining statement: # DEBUG dc1 => dc1_62

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: # DEBUG dc0 => dc0_61

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: # DEBUG y => y_58

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: _10 = y_58 * 32;

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: _11 = (sizetype) _10;

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: _12 = _11 + 18446744073709551615;

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: _14 = src_13(D) + _12;

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: _16 = *_14;

common/predict.c:189:5: note: get vectype for scalar type:  unsigned char
common/predict.c:189:5: note: vectype: vector(16) unsigned char
common/predict.c:189:5: note: nunits = 16
common/predict.c:189:5: note: ==> examining statement: _17 = (unsigned int) _16;

common/predict.c:189:5: note: get vectype for scalar type:  unsigned int
common/predict.c:189:5: note: vectype: vector(4) unsigned int
common/predict.c:189:5: note: get vectype for scalar type:  unsigned char
common/predict.c:189:5: note: vectype: vector(16) unsigned char
common/predict.c:189:5: note: nunits = 16
common/predict.c:189:5: note: ==> examining statement: dc0_18 = _17 + dc0_61;

common/predict.c:189:5: note: get vectype for scalar type:  uint32_t
common/predict.c:189:5: note: vectype: vector(4) unsigned int
common/predict.c:189:5: note: get vectype for scalar type:  uint32_t
common/predict.c:189:5: note: vectype: vector(4) unsigned int
common/predict.c:189:5: note: nunits = 4
common/predict.c:189:5: note: ==> examining statement: # DEBUG dc0 => dc0_18

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: _19 = y_58 + 4;

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: _20 = _19 * 32;

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: _21 = (sizetype) _20;

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: _22 = _21 + 18446744073709551615;

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: _23 = src_13(D) + _22;

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: _24 = *_23;

common/predict.c:189:5: note: get vectype for scalar type:  unsigned char
common/predict.c:189:5: note: vectype: vector(16) unsigned char
common/predict.c:189:5: note: nunits = 16
common/predict.c:189:5: note: ==> examining statement: _25 = (unsigned int) _24;

common/predict.c:189:5: note: get vectype for scalar type:  unsigned int
common/predict.c:189:5: note: vectype: vector(4) unsigned int
common/predict.c:189:5: note: get vectype for scalar type:  unsigned char
common/predict.c:189:5: note: vectype: vector(16) unsigned char
common/predict.c:189:5: note: nunits = 16
common/predict.c:189:5: note: ==> examining statement: dc1_26 = _25 + dc1_62;

common/predict.c:189:5: note: get vectype for scalar type:  uint32_t
common/predict.c:189:5: note: vectype: vector(4) unsigned int
common/predict.c:189:5: note: get vectype for scalar type:  uint32_t
common/predict.c:189:5: note: vectype: vector(4) unsigned int
common/predict.c:189:5: note: nunits = 4
common/predict.c:189:5: note: ==> examining statement: # DEBUG dc1 => dc1_26

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: y_27 = y_58 + 1;

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: # DEBUG y => y_27

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: # DEBUG dc1 => dc1_26

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: # DEBUG dc0 => dc0_18

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: # DEBUG y => y_27

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: ivtmp_66 = ivtmp_67 - 1;

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: ==> examining statement: if (ivtmp_66 != 0)

common/predict.c:189:5: note: skip.
common/predict.c:189:5: note: vectorization factor = 16
common/predict.c:189:5: note: === vect_analyze_data_refs_alignment ===
common/predict.c:189:5: note: vect_compute_data_ref_alignment:
common/predict.c:189:5: note: can't force alignment of ref: *_14
common/predict.c:189:5: note: vect_compute_data_ref_alignment:
common/predict.c:189:5: note: can't force alignment of ref: *_23
common/predict.c:189:5: note: === vect_prune_runtime_alias_test_list ===
common/predict.c:189:5: note: === vect_enhance_data_refs_alignment ===
common/predict.c:189:5: note: vector alignment may not be reachable
common/predict.c:189:5: note: vect_can_advance_ivs_p:
common/predict.c:189:5: note: Analyze phi: y_58 = PHI <y_27(4), 0(2)>

common/predict.c:189:5: note: Analyze phi: dc0_61 = PHI <dc0_18(4), 0(2)>

common/predict.c:189:5: note: reduc phi. skip.
common/predict.c:189:5: note: Analyze phi: dc1_62 = PHI <dc1_26(4), 0(2)>

common/predict.c:189:5: note: reduc phi. skip.
common/predict.c:189:5: note: Analyze phi: ivtmp_67 = PHI <ivtmp_66(4), 4(2)>

common/predict.c:189:5: note: Vectorizing an unaligned access.
common/predict.c:189:5: note: Vectorizing an unaligned access.
common/predict.c:189:5: note: === vect_analyze_slp ===
common/predict.c:189:5: note: Build SLP for dc1_26 = _25 + dc1_62;

common/predict.c:189:5: note: Build SLP for dc0_18 = _17 + dc0_61;

common/predict.c:189:5: note: vect_is_simple_use: operand _25
common/predict.c:189:5: note: def_stmt: _25 = (unsigned int) _24;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand dc1_62
common/predict.c:189:5: note: def_stmt: dc1_62 = PHI <dc1_26(4), 0(2)>
common/predict.c:189:5: note: type of def: 5.
common/predict.c:189:5: note: vect_is_simple_use: operand _17
common/predict.c:189:5: note: def_stmt: _17 = (unsigned int) _16;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand dc0_61
common/predict.c:189:5: note: def_stmt: dc0_61 = PHI <dc0_18(4), 0(2)>
common/predict.c:189:5: note: type of def: 5.
common/predict.c:189:5: note: Build SLP for _25 = (unsigned int) _24;

common/predict.c:189:5: note: Build SLP for _17 = (unsigned int) _16;

common/predict.c:189:5: note: vect_is_simple_use: operand _24
common/predict.c:189:5: note: def_stmt: _24 = *_23;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: vect_is_simple_use: operand _16
common/predict.c:189:5: note: def_stmt: _16 = *_14;
common/predict.c:189:5: note: type of def: 3.
common/predict.c:189:5: note: Build SLP for _24 = *_23;

common/predict.c:189:5: note: Build SLP failed: grouped loads have gaps _24 = *_23;

common/predict.c:189:5: note: === vect_make_slp_decision ===
common/predict.c:189:5: note: === vect_detect_hybrid_slp ===
common/predict.c:189:5: note: === vect_analyze_loop_operations ===
common/predict.c:189:5: note: examining phi: y_58 = PHI <y_27(4), 0(2)>

common/predict.c:189:5: note: examining phi: dc0_61 = PHI <dc0_18(4), 0(2)>

common/predict.c:189:5: note: examining phi: dc1_62 = PHI <dc1_26(4), 0(2)>

common/predict.c:189:5: note: examining phi: ivtmp_67 = PHI <ivtmp_66(4), 4(2)>

common/predict.c:189:5: note: ==> examining statement: # DEBUG dc1 => dc1_62
common/predict.c:189:5: note: irrelevant.
common/predict.c:189:5: note: ==> examining statement: # DEBUG dc0 => dc0_61
common/predict.c:189:5: note: irrelevant.
common/predict.c:189:5: note: ==> examining statement: # DEBUG y => y_58
common/predict.c:189:5: note: irrelevant.
common/predict.c:189:5: note: ==> examining statement: _10 = y_58 * 32;
common/predict.c:189:5: note: irrelevant.
common/predict.c:189:5: note: ==> examining statement: _11 = (sizetype) _10;
common/predict.c:189:5: note: irrelevant.
common/predict.c:189:5: note: ==> examining statement: _12 = _11 + 18446744073709551615;
common/predict.c:189:5: note: irrelevant.
common/predict.c:189:5: note: ==> examining statement: _14 = src_13(D) + _12;
common/predict.c:189:5: note: irrelevant.
common/predict.c:189:5: note: ==> examining statement: _16 = *_14;
common/predict.c:189:5: note: vect_is_simple_use: operand *_14
common/predict.c:189:5: note: not ssa-name.
common/predict.c:189:5: note: use not simple.
common/predict.c:189:5: note: vect_is_simple_use: operand *_14
common/predict.c:189:5: note: not ssa-name.
common/predict.c:189:5: note: use not simple.
common/predict.c:189:5: note: single-element interleaving not supported for not adjacent vector loads
common/predict.c:189:5: note: not vectorized: relevant stmt not supported: _16 = *_14;
common/predict.c:189:5: note: bad operation or unsupported loop bound.
common/predict.c:184:13: note: vectorized 0 loops in function.
predict_8x8c_dc_left (uint8_t * src)
{
  uint32_t dc1;
  uint32_t dc0;
  int y;
  int _10;
  sizetype _11;
  sizetype _12;
  uint8_t * _14;
  unsigned char _16;
  unsigned int _17;
  int _19;
  int _20;
  sizetype _21;
  sizetype _22;
  uint8_t * _23;
  unsigned char _24;
  unsigned int _25;
  unsigned int _28;
  unsigned int _29;
  unsigned int _31;
  unsigned int _32;
  unsigned int patt_55;
  unsigned int patt_65;
  unsigned int ivtmp_66;
  unsigned int ivtmp_67;
  unsigned int ivtmp_68;
  unsigned int ivtmp_69;
  unsigned int ivtmp_70;
  unsigned int ivtmp_71;

  <bb 2>:
  # DEBUG dc0 => 0
  # DEBUG dc1 => 0
  # DEBUG y => 0
  # DEBUG dc1 => 0
  # DEBUG dc0 => 0
  # DEBUG y => 0

  <bb 3>:
  # y_58 = PHI <y_27(4), 0(2)>
  # dc0_61 = PHI <dc0_18(4), 0(2)>
  # dc1_62 = PHI <dc1_26(4), 0(2)>
  # ivtmp_67 = PHI <ivtmp_66(4), 4(2)>
  # DEBUG dc1 => dc1_62
  # DEBUG dc0 => dc0_61
  # DEBUG y => y_58
  _10 = y_58 * 32;
  _11 = (sizetype) _10;
  _12 = _11 + 18446744073709551615;
  _14 = src_13(D) + _12;
  _16 = *_14;
  _17 = (unsigned int) _16;
  dc0_18 = _17 + dc0_61;
  # DEBUG dc0 => dc0_18
  _19 = y_58 + 4;
  _20 = _19 * 32;
  _21 = (sizetype) _20;
  _22 = _21 + 18446744073709551615;
  _23 = src_13(D) + _22;
  _24 = *_23;
  _25 = (unsigned int) _24;
  dc1_26 = _25 + dc1_62;
  # DEBUG dc1 => dc1_26
  y_27 = y_58 + 1;
  # DEBUG y => y_27
  # DEBUG dc1 => dc1_26
  # DEBUG dc0 => dc0_18
  # DEBUG y => y_27
  ivtmp_66 = ivtmp_67 - 1;
  if (ivtmp_66 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # dc0_74 = PHI <dc0_18(3)>
  # dc1_73 = PHI <dc1_26(3)>
  _28 = dc0_74 + 2;
  _29 = _28 >> 2;
  dc0_30 = _29 * 16843009;
  # DEBUG dc0 => dc0_30
  _31 = dc1_73 + 2;
  _32 = _31 >> 2;
  dc1_33 = _32 * 16843009;
  # DEBUG dc1 => dc1_33
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src => src_13(D)

  <bb 6>:
  # src_56 = PHI <src_37(7), src_13(D)(5)>
  # y_59 = PHI <y_38(7), 0(5)>
  # ivtmp_69 = PHI <ivtmp_68(7), 4(5)>
  # DEBUG y => y_59
  # DEBUG src => src_56
  # DEBUG p => src_56
  # DEBUG D#15 => src_56 + 4
  # DEBUG p => D#15
  MEM[(uint32_t *)src_56] = dc0_30;
  # DEBUG p => D#15 + 4
  MEM[(uint32_t *)src_56 + 4B] = dc0_30;
  src_37 = src_56 + 32;
  # DEBUG src => src_37
  y_38 = y_59 + 1;
  # DEBUG y => y_38
  # DEBUG y => y_38
  # DEBUG src => src_37
  ivtmp_68 = ivtmp_69 - 1;
  if (ivtmp_68 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  src_72 = src_13(D) + 128;

  <bb 9>:
  # src_57 = PHI <src_72(8), src_42(10)>
  # y_60 = PHI <0(8), y_43(10)>
  # ivtmp_71 = PHI <4(8), ivtmp_70(10)>
  # DEBUG y => y_60
  # DEBUG src => src_57
  # DEBUG p => src_57
  # DEBUG D#14 => src_57 + 4
  # DEBUG p => D#14
  MEM[(uint32_t *)src_57] = dc1_33;
  # DEBUG p => D#14 + 4
  MEM[(uint32_t *)src_57 + 4B] = dc1_33;
  src_42 = src_57 + 32;
  # DEBUG src => src_42
  y_43 = y_60 + 1;
  # DEBUG y => y_43
  # DEBUG y => y_43
  # DEBUG src => src_42
  ivtmp_70 = ivtmp_71 - 1;
  if (ivtmp_70 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  goto <bb 9>;

  <bb 11>:
  return;

}



;; Function predict_8x8c_dc_top (predict_8x8c_dc_top, funcdef_no=124, decl_uid=5874, cgraph_uid=124, symbol_order=167)


Analyzing loop at common/predict.c:226
common/predict.c:226:5: note: ===== analyze_loop_nest =====
common/predict.c:226:5: note: === vect_analyze_loop_form ===
common/predict.c:226:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:226:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_41]
analyze_innermost: success.
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_9(D)]
	Access function 0: {0B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_41 + 4B]
analyze_innermost: success.
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_9(D)]
	Access function 0: {4B, +, 32}_2
common/predict.c:226:5: note: got vectype for stmt: MEM[(uint32_t *)src_41] = dc0_25;
vector(4) unsigned int
common/predict.c:226:5: note: got vectype for stmt: MEM[(uint32_t *)src_41 + 4B] = dc1_28;
vector(4) unsigned int
common/predict.c:226:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:226:5: note: Analyze phi: src_41 = PHI <src_31(7), src_9(D)(5)>

common/predict.c:226:5: note: Access function of PHI: {src_9(D), +, 32}_2
common/predict.c:226:5: note: step: 32,  init: src_9(D)
common/predict.c:226:5: note: Detected induction.
common/predict.c:226:5: note: Analyze phi: y_42 = PHI <y_32(7), 0(5)>

common/predict.c:226:5: note: Access function of PHI: {0, +, 1}_2
common/predict.c:226:5: note: step: 1,  init: 0
common/predict.c:226:5: note: Detected induction.
common/predict.c:226:5: note: Analyze phi: .MEM_46 = PHI <.MEM_30(7), .MEM_11(D)(5)>

common/predict.c:226:5: note: Analyze phi: ivtmp_59 = PHI <ivtmp_58(7), 8(5)>

common/predict.c:226:5: note: Access function of PHI: {8, +, 4294967295}_2
common/predict.c:226:5: note: step: 4294967295,  init: 8
common/predict.c:226:5: note: Detected induction.
common/predict.c:226:5: note: === vect_pattern_recog ===
common/predict.c:226:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:226:5: note: Detected interleaving MEM[(uint32_t *)src_41] and MEM[(uint32_t *)src_41 + 4B]
common/predict.c:226:5: note: interleaved store with gaps
common/predict.c:226:5: note: not vectorized: complicated access pattern.
common/predict.c:226:5: note: bad data access.

Analyzing loop at common/predict.c:218
common/predict.c:218:5: note: ===== analyze_loop_nest =====
common/predict.c:218:5: note: === vect_analyze_loop_form ===
common/predict.c:218:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/predict.c:218:5: note: === vect_analyze_data_refs ===
Creating dr for *_10
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: -32(OVF)
	step: 1
	aligned to: 128
	base_object: *src_9(D)
	Access function 0: {-32B, +, 1}_1
Creating dr for *_18
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_9(D)
	offset from base address: 0
	constant offset from base address: -28(OVF)
	step: 1
	aligned to: 128
	base_object: *src_9(D)
	Access function 0: {-28B, +, 1}_1
common/predict.c:218:5: note: got vectype for stmt: _12 = *_10;
vector(16) unsigned char
common/predict.c:218:5: note: got vectype for stmt: _19 = *_18;
vector(16) unsigned char
common/predict.c:218:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:218:5: note: Analyze phi: x_43 = PHI <x_22(4), 0(2)>

common/predict.c:218:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:218:5: note: step: 1,  init: 0
common/predict.c:218:5: note: Detected induction.
common/predict.c:218:5: note: Analyze phi: dc0_44 = PHI <dc0_14(4), 0(2)>

common/predict.c:218:5: note: Access function of PHI: {0, +, _13}_1
common/predict.c:218:5: note: step: _13,  init: 0
common/predict.c:218:5: note: step unknown.
common/predict.c:218:5: note: Analyze phi: dc1_45 = PHI <dc1_21(4), 0(2)>

common/predict.c:218:5: note: Access function of PHI: {0, +, _20}_1
common/predict.c:218:5: note: step: _20,  init: 0
common/predict.c:218:5: note: step unknown.
common/predict.c:218:5: note: Analyze phi: ivtmp_57 = PHI <ivtmp_56(4), 4(2)>

common/predict.c:218:5: note: Access function of PHI: {4, +, 4294967295}_1
common/predict.c:218:5: note: step: 4294967295,  init: 4
common/predict.c:218:5: note: Detected induction.
common/predict.c:218:5: note: Analyze phi: dc1_45 = PHI <dc1_21(4), 0(2)>

common/predict.c:218:5: note: detected reduction: dc1_21 = _20 + dc1_45;

common/predict.c:218:5: note: Detected reduction.
common/predict.c:218:5: note: Analyze phi: dc0_44 = PHI <dc0_14(4), 0(2)>

common/predict.c:218:5: note: detected reduction: dc0_14 = _13 + dc0_44;

common/predict.c:218:5: note: Detected reduction.
common/predict.c:218:5: note: === vect_pattern_recog ===
common/predict.c:218:5: note: vect_is_simple_use: operand _13
common/predict.c:218:5: note: def_stmt: _13 = (unsigned int) _12;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand _12
common/predict.c:218:5: note: def_stmt: _12 = *_10;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_recog_widen_sum_pattern: detected: patt_55 = _12 w+ dc0_44;

common/predict.c:218:5: note: vect_is_simple_use: operand _13
common/predict.c:218:5: note: def_stmt: _13 = (unsigned int) _12;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand _12
common/predict.c:218:5: note: def_stmt: _12 = *_10;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand _13
common/predict.c:218:5: note: def_stmt: _13 = (unsigned int) _12;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand _12
common/predict.c:218:5: note: def_stmt: _12 = *_10;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand _20
common/predict.c:218:5: note: def_stmt: _20 = (unsigned int) _19;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand _19
common/predict.c:218:5: note: def_stmt: _19 = *_18;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_recog_widen_sum_pattern: detected: patt_54 = _19 w+ dc1_45;

common/predict.c:218:5: note: vect_is_simple_use: operand _20
common/predict.c:218:5: note: def_stmt: _20 = (unsigned int) _19;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand _19
common/predict.c:218:5: note: def_stmt: _19 = *_18;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand _20
common/predict.c:218:5: note: def_stmt: _20 = (unsigned int) _19;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand _19
common/predict.c:218:5: note: def_stmt: _19 = *_18;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:218:5: note: === vect_mark_stmts_to_be_vectorized ===
common/predict.c:218:5: note: init: phi relevant? x_43 = PHI <x_22(4), 0(2)>
common/predict.c:218:5: note: init: phi relevant? dc0_44 = PHI <dc0_14(4), 0(2)>
common/predict.c:218:5: note: init: phi relevant? dc1_45 = PHI <dc1_21(4), 0(2)>
common/predict.c:218:5: note: init: phi relevant? ivtmp_57 = PHI <ivtmp_56(4), 4(2)>
common/predict.c:218:5: note: init: stmt relevant? # DEBUG dc1 => dc1_45
common/predict.c:218:5: note: init: stmt relevant? # DEBUG dc0 => dc0_44
common/predict.c:218:5: note: init: stmt relevant? # DEBUG x => x_43
common/predict.c:218:5: note: init: stmt relevant? _7 = (sizetype) x_43;
common/predict.c:218:5: note: init: stmt relevant? _8 = _7 + 18446744073709551584;
common/predict.c:218:5: note: init: stmt relevant? _10 = src_9(D) + _8;
common/predict.c:218:5: note: init: stmt relevant? _12 = *_10;
common/predict.c:218:5: note: init: stmt relevant? _13 = (unsigned int) _12;
common/predict.c:218:5: note: init: stmt relevant? dc0_14 = _13 + dc0_44;
common/predict.c:218:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:218:5: note: mark relevant 0, live 1.
common/predict.c:218:5: note: init: stmt relevant? # DEBUG dc0 => dc0_14
common/predict.c:218:5: note: init: stmt relevant? _15 = x_43 + 4;
common/predict.c:218:5: note: init: stmt relevant? _16 = (sizetype) _15;
common/predict.c:218:5: note: init: stmt relevant? _17 = _16 + 18446744073709551584;
common/predict.c:218:5: note: init: stmt relevant? _18 = src_9(D) + _17;
common/predict.c:218:5: note: init: stmt relevant? _19 = *_18;
common/predict.c:218:5: note: init: stmt relevant? _20 = (unsigned int) _19;
common/predict.c:218:5: note: init: stmt relevant? dc1_21 = _20 + dc1_45;
common/predict.c:218:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:218:5: note: mark relevant 0, live 1.
common/predict.c:218:5: note: init: stmt relevant? # DEBUG dc1 => dc1_21
common/predict.c:218:5: note: init: stmt relevant? x_22 = x_43 + 1;
common/predict.c:218:5: note: init: stmt relevant? # DEBUG x => x_22
common/predict.c:218:5: note: init: stmt relevant? # DEBUG dc1 => dc1_21
common/predict.c:218:5: note: init: stmt relevant? # DEBUG dc0 => dc0_14
common/predict.c:218:5: note: init: stmt relevant? # DEBUG x => x_22
common/predict.c:218:5: note: init: stmt relevant? ivtmp_56 = ivtmp_57 - 1;
common/predict.c:218:5: note: init: stmt relevant? if (ivtmp_56 != 0)
common/predict.c:218:5: note: worklist: examine stmt: dc1_21 = _20 + dc1_45;
common/predict.c:218:5: note: vect_is_simple_use: operand _20
common/predict.c:218:5: note: def_stmt: _20 = (unsigned int) _19;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: mark relevant 3, live 0.
common/predict.c:218:5: note: vect_is_simple_use: operand dc1_45
common/predict.c:218:5: note: def_stmt: dc1_45 = PHI <dc1_21(4), 0(2)>
common/predict.c:218:5: note: type of def: 5.
common/predict.c:218:5: note: mark relevant 3, live 0.
common/predict.c:218:5: note: worklist: examine stmt: dc1_45 = PHI <dc1_21(4), 0(2)>
common/predict.c:218:5: note: vect_is_simple_use: operand dc1_21
common/predict.c:218:5: note: def_stmt: dc1_21 = _20 + dc1_45;
common/predict.c:218:5: note: type of def: 5.
common/predict.c:218:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:218:5: note: vect_is_simple_use: operand 0
common/predict.c:218:5: note: worklist: examine stmt: _20 = (unsigned int) _19;
common/predict.c:218:5: note: vect_is_simple_use: operand _19
common/predict.c:218:5: note: def_stmt: _19 = *_18;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: mark relevant 3, live 0.
common/predict.c:218:5: note: worklist: examine stmt: _19 = *_18;
common/predict.c:218:5: note: worklist: examine stmt: dc0_14 = _13 + dc0_44;
common/predict.c:218:5: note: vect_is_simple_use: operand _13
common/predict.c:218:5: note: def_stmt: _13 = (unsigned int) _12;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: mark relevant 3, live 0.
common/predict.c:218:5: note: vect_is_simple_use: operand dc0_44
common/predict.c:218:5: note: def_stmt: dc0_44 = PHI <dc0_14(4), 0(2)>
common/predict.c:218:5: note: type of def: 5.
common/predict.c:218:5: note: mark relevant 3, live 0.
common/predict.c:218:5: note: worklist: examine stmt: dc0_44 = PHI <dc0_14(4), 0(2)>
common/predict.c:218:5: note: vect_is_simple_use: operand dc0_14
common/predict.c:218:5: note: def_stmt: dc0_14 = _13 + dc0_44;
common/predict.c:218:5: note: type of def: 5.
common/predict.c:218:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:218:5: note: vect_is_simple_use: operand 0
common/predict.c:218:5: note: worklist: examine stmt: _13 = (unsigned int) _12;
common/predict.c:218:5: note: vect_is_simple_use: operand _12
common/predict.c:218:5: note: def_stmt: _12 = *_10;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: mark relevant 3, live 0.
common/predict.c:218:5: note: worklist: examine stmt: _12 = *_10;
common/predict.c:218:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _12 = *_10;
  stmt_b: _19 = *_18;
(analyze_overlapping_iterations 
  (chrec_a = {-32B, +, 1}_1)
  (chrec_b = {-28B, +, 1}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _12 = *_10;
  stmt_b: _12 = *_10;
(analyze_overlapping_iterations 
  (chrec_a = {-32B, +, 1}_1)
  (chrec_b = {-32B, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _19 = *_18;
  stmt_b: _19 = *_18;
(analyze_overlapping_iterations 
  (chrec_a = {-28B, +, 1}_1)
  (chrec_b = {-28B, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/predict.c:218:5: note: === vect_determine_vectorization_factor ===
common/predict.c:218:5: note: ==> examining phi: x_43 = PHI <x_22(4), 0(2)>

common/predict.c:218:5: note: ==> examining phi: dc0_44 = PHI <dc0_14(4), 0(2)>

common/predict.c:218:5: note: get vectype for scalar type:  uint32_t
common/predict.c:218:5: note: vectype: vector(4) unsigned int
common/predict.c:218:5: note: nunits = 4
common/predict.c:218:5: note: ==> examining phi: dc1_45 = PHI <dc1_21(4), 0(2)>

common/predict.c:218:5: note: get vectype for scalar type:  uint32_t
common/predict.c:218:5: note: vectype: vector(4) unsigned int
common/predict.c:218:5: note: nunits = 4
common/predict.c:218:5: note: ==> examining phi: ivtmp_57 = PHI <ivtmp_56(4), 4(2)>

common/predict.c:218:5: note: ==> examining statement: # DEBUG dc1 => dc1_45

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: # DEBUG dc0 => dc0_44

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: # DEBUG x => x_43

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: _7 = (sizetype) x_43;

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: _8 = _7 + 18446744073709551584;

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: _10 = src_9(D) + _8;

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: _12 = *_10;

common/predict.c:218:5: note: get vectype for scalar type:  unsigned char
common/predict.c:218:5: note: vectype: vector(16) unsigned char
common/predict.c:218:5: note: nunits = 16
common/predict.c:218:5: note: ==> examining statement: _13 = (unsigned int) _12;

common/predict.c:218:5: note: get vectype for scalar type:  unsigned int
common/predict.c:218:5: note: vectype: vector(4) unsigned int
common/predict.c:218:5: note: get vectype for scalar type:  unsigned char
common/predict.c:218:5: note: vectype: vector(16) unsigned char
common/predict.c:218:5: note: nunits = 16
common/predict.c:218:5: note: ==> examining statement: dc0_14 = _13 + dc0_44;

common/predict.c:218:5: note: get vectype for scalar type:  uint32_t
common/predict.c:218:5: note: vectype: vector(4) unsigned int
common/predict.c:218:5: note: get vectype for scalar type:  uint32_t
common/predict.c:218:5: note: vectype: vector(4) unsigned int
common/predict.c:218:5: note: nunits = 4
common/predict.c:218:5: note: ==> examining statement: # DEBUG dc0 => dc0_14

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: _15 = x_43 + 4;

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: _16 = (sizetype) _15;

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: _17 = _16 + 18446744073709551584;

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: _18 = src_9(D) + _17;

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: _19 = *_18;

common/predict.c:218:5: note: get vectype for scalar type:  unsigned char
common/predict.c:218:5: note: vectype: vector(16) unsigned char
common/predict.c:218:5: note: nunits = 16
common/predict.c:218:5: note: ==> examining statement: _20 = (unsigned int) _19;

common/predict.c:218:5: note: get vectype for scalar type:  unsigned int
common/predict.c:218:5: note: vectype: vector(4) unsigned int
common/predict.c:218:5: note: get vectype for scalar type:  unsigned char
common/predict.c:218:5: note: vectype: vector(16) unsigned char
common/predict.c:218:5: note: nunits = 16
common/predict.c:218:5: note: ==> examining statement: dc1_21 = _20 + dc1_45;

common/predict.c:218:5: note: get vectype for scalar type:  uint32_t
common/predict.c:218:5: note: vectype: vector(4) unsigned int
common/predict.c:218:5: note: get vectype for scalar type:  uint32_t
common/predict.c:218:5: note: vectype: vector(4) unsigned int
common/predict.c:218:5: note: nunits = 4
common/predict.c:218:5: note: ==> examining statement: # DEBUG dc1 => dc1_21

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: x_22 = x_43 + 1;

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: # DEBUG x => x_22

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: # DEBUG dc1 => dc1_21

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: # DEBUG dc0 => dc0_14

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: # DEBUG x => x_22

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: ivtmp_56 = ivtmp_57 - 1;

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: ==> examining statement: if (ivtmp_56 != 0)

common/predict.c:218:5: note: skip.
common/predict.c:218:5: note: vectorization factor = 16
common/predict.c:218:5: note: === vect_analyze_data_refs_alignment ===
common/predict.c:218:5: note: vect_compute_data_ref_alignment:
common/predict.c:218:5: note: can't force alignment of ref: *_10
common/predict.c:218:5: note: vect_compute_data_ref_alignment:
common/predict.c:218:5: note: can't force alignment of ref: *_18
common/predict.c:218:5: note: === vect_prune_runtime_alias_test_list ===
common/predict.c:218:5: note: === vect_enhance_data_refs_alignment ===
common/predict.c:218:5: note: Unknown misalignment, is_packed = 0
common/predict.c:218:5: note: Unknown misalignment, is_packed = 0
common/predict.c:218:5: note: vect_can_advance_ivs_p:
common/predict.c:218:5: note: Analyze phi: x_43 = PHI <x_22(4), 0(2)>

common/predict.c:218:5: note: Analyze phi: dc0_44 = PHI <dc0_14(4), 0(2)>

common/predict.c:218:5: note: reduc phi. skip.
common/predict.c:218:5: note: Analyze phi: dc1_45 = PHI <dc1_21(4), 0(2)>

common/predict.c:218:5: note: reduc phi. skip.
common/predict.c:218:5: note: Analyze phi: ivtmp_57 = PHI <ivtmp_56(4), 4(2)>

common/predict.c:218:5: note: Vectorizing an unaligned access.
common/predict.c:218:5: note: Vectorizing an unaligned access.
common/predict.c:218:5: note: === vect_analyze_slp ===
common/predict.c:218:5: note: Build SLP for dc1_21 = _20 + dc1_45;

common/predict.c:218:5: note: Build SLP for dc0_14 = _13 + dc0_44;

common/predict.c:218:5: note: vect_is_simple_use: operand _20
common/predict.c:218:5: note: def_stmt: _20 = (unsigned int) _19;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand dc1_45
common/predict.c:218:5: note: def_stmt: dc1_45 = PHI <dc1_21(4), 0(2)>
common/predict.c:218:5: note: type of def: 5.
common/predict.c:218:5: note: vect_is_simple_use: operand _13
common/predict.c:218:5: note: def_stmt: _13 = (unsigned int) _12;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand dc0_44
common/predict.c:218:5: note: def_stmt: dc0_44 = PHI <dc0_14(4), 0(2)>
common/predict.c:218:5: note: type of def: 5.
common/predict.c:218:5: note: Build SLP for _20 = (unsigned int) _19;

common/predict.c:218:5: note: Build SLP for _13 = (unsigned int) _12;

common/predict.c:218:5: note: vect_is_simple_use: operand _19
common/predict.c:218:5: note: def_stmt: _19 = *_18;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand _12
common/predict.c:218:5: note: def_stmt: _12 = *_10;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: Build SLP for _19 = *_18;

common/predict.c:218:5: note: Build SLP failed: not grouped load _19 = *_18;

common/predict.c:218:5: note: === vect_make_slp_decision ===
common/predict.c:218:5: note: === vect_detect_hybrid_slp ===
common/predict.c:218:5: note: === vect_analyze_loop_operations ===
common/predict.c:218:5: note: examining phi: x_43 = PHI <x_22(4), 0(2)>

common/predict.c:218:5: note: examining phi: dc0_44 = PHI <dc0_14(4), 0(2)>

common/predict.c:218:5: note: examining phi: dc1_45 = PHI <dc1_21(4), 0(2)>

common/predict.c:218:5: note: examining phi: ivtmp_57 = PHI <ivtmp_56(4), 4(2)>

common/predict.c:218:5: note: ==> examining statement: # DEBUG dc1 => dc1_45
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: # DEBUG dc0 => dc0_44
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: # DEBUG x => x_43
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: _7 = (sizetype) x_43;
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: _8 = _7 + 18446744073709551584;
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: _10 = src_9(D) + _8;
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: _12 = *_10;
common/predict.c:218:5: note: vect_is_simple_use: operand *_10
common/predict.c:218:5: note: not ssa-name.
common/predict.c:218:5: note: use not simple.
common/predict.c:218:5: note: vect_is_simple_use: operand *_10
common/predict.c:218:5: note: not ssa-name.
common/predict.c:218:5: note: use not simple.
common/predict.c:218:5: note: vect_model_load_cost: unaligned supported by hardware.
common/predict.c:218:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/predict.c:218:5: note: ==> examining statement: _13 = (unsigned int) _12;
common/predict.c:218:5: note: vect_is_simple_use: operand _12
common/predict.c:218:5: note: def_stmt: _12 = *_10;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: === vectorizable_conversion ===
common/predict.c:218:5: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/predict.c:218:5: note: ==> examining statement: dc0_14 = _13 + dc0_44;
common/predict.c:218:5: note: vect_is_simple_use: operand _13
common/predict.c:218:5: note: def_stmt: _13 = (unsigned int) _12;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand dc0_44
common/predict.c:218:5: note: def_stmt: dc0_44 = PHI <dc0_14(4), 0(2)>
common/predict.c:218:5: note: type of def: 5.
common/predict.c:218:5: note: detected reduction: dc0_14 = _13 + dc0_44;

common/predict.c:218:5: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 4, prologue_cost = 1, epilogue_cost = 5 .
common/predict.c:218:5: note: ==> examining statement: # DEBUG dc0 => dc0_14
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: _15 = x_43 + 4;
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: _16 = (sizetype) _15;
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: _17 = _16 + 18446744073709551584;
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: _18 = src_9(D) + _17;
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: _19 = *_18;
common/predict.c:218:5: note: vect_is_simple_use: operand *_18
common/predict.c:218:5: note: not ssa-name.
common/predict.c:218:5: note: use not simple.
common/predict.c:218:5: note: vect_is_simple_use: operand *_18
common/predict.c:218:5: note: not ssa-name.
common/predict.c:218:5: note: use not simple.
common/predict.c:218:5: note: vect_model_load_cost: unaligned supported by hardware.
common/predict.c:218:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/predict.c:218:5: note: ==> examining statement: _20 = (unsigned int) _19;
common/predict.c:218:5: note: vect_is_simple_use: operand _19
common/predict.c:218:5: note: def_stmt: _19 = *_18;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: === vectorizable_conversion ===
common/predict.c:218:5: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/predict.c:218:5: note: ==> examining statement: dc1_21 = _20 + dc1_45;
common/predict.c:218:5: note: vect_is_simple_use: operand _20
common/predict.c:218:5: note: def_stmt: _20 = (unsigned int) _19;
common/predict.c:218:5: note: type of def: 3.
common/predict.c:218:5: note: vect_is_simple_use: operand dc1_45
common/predict.c:218:5: note: def_stmt: dc1_45 = PHI <dc1_21(4), 0(2)>
common/predict.c:218:5: note: type of def: 5.
common/predict.c:218:5: note: detected reduction: dc1_21 = _20 + dc1_45;

common/predict.c:218:5: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 4, prologue_cost = 1, epilogue_cost = 5 .
common/predict.c:218:5: note: ==> examining statement: # DEBUG dc1 => dc1_21
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: x_22 = x_43 + 1;
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: # DEBUG x => x_22
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: # DEBUG dc1 => dc1_21
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: # DEBUG dc0 => dc0_14
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: # DEBUG x => x_22
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: ivtmp_56 = ivtmp_57 - 1;
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: ==> examining statement: if (ivtmp_56 != 0)
common/predict.c:218:5: note: irrelevant.
common/predict.c:218:5: note: vectorization_factor = 16, niters = 4
common/predict.c:218:5: note: not vectorized: iteration count too small.
common/predict.c:218:5: note: not vectorized: iteration count smaller than vectorization factor.
common/predict.c:218:5: note: bad operation or unsupported loop bound.
common/predict.c:213:13: note: vectorized 0 loops in function.
predict_8x8c_dc_top (uint8_t * src)
{
  uint32_t dc1;
  uint32_t dc0;
  int x;
  int y;
  sizetype _7;
  sizetype _8;
  uint8_t * _10;
  unsigned char _12;
  unsigned int _13;
  int _15;
  sizetype _16;
  sizetype _17;
  uint8_t * _18;
  unsigned char _19;
  unsigned int _20;
  unsigned int _23;
  unsigned int _24;
  unsigned int _26;
  unsigned int _27;
  unsigned int patt_54;
  unsigned int patt_55;
  unsigned int ivtmp_56;
  unsigned int ivtmp_57;
  unsigned int ivtmp_58;
  unsigned int ivtmp_59;

  <bb 2>:
  # DEBUG dc0 => 0
  # DEBUG dc1 => 0
  # DEBUG x => 0
  # DEBUG dc1 => 0
  # DEBUG dc0 => 0
  # DEBUG x => 0

  <bb 3>:
  # x_43 = PHI <x_22(4), 0(2)>
  # dc0_44 = PHI <dc0_14(4), 0(2)>
  # dc1_45 = PHI <dc1_21(4), 0(2)>
  # ivtmp_57 = PHI <ivtmp_56(4), 4(2)>
  # DEBUG dc1 => dc1_45
  # DEBUG dc0 => dc0_44
  # DEBUG x => x_43
  _7 = (sizetype) x_43;
  _8 = _7 + 18446744073709551584;
  _10 = src_9(D) + _8;
  _12 = *_10;
  _13 = (unsigned int) _12;
  dc0_14 = _13 + dc0_44;
  # DEBUG dc0 => dc0_14
  _15 = x_43 + 4;
  _16 = (sizetype) _15;
  _17 = _16 + 18446744073709551584;
  _18 = src_9(D) + _17;
  _19 = *_18;
  _20 = (unsigned int) _19;
  dc1_21 = _20 + dc1_45;
  # DEBUG dc1 => dc1_21
  x_22 = x_43 + 1;
  # DEBUG x => x_22
  # DEBUG dc1 => dc1_21
  # DEBUG dc0 => dc0_14
  # DEBUG x => x_22
  ivtmp_56 = ivtmp_57 - 1;
  if (ivtmp_56 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # dc0_61 = PHI <dc0_14(3)>
  # dc1_60 = PHI <dc1_21(3)>
  _23 = dc0_61 + 2;
  _24 = _23 >> 2;
  dc0_25 = _24 * 16843009;
  # DEBUG dc0 => dc0_25
  _26 = dc1_60 + 2;
  _27 = _26 >> 2;
  dc1_28 = _27 * 16843009;
  # DEBUG dc1 => dc1_28
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src => src_9(D)

  <bb 6>:
  # src_41 = PHI <src_31(7), src_9(D)(5)>
  # y_42 = PHI <y_32(7), 0(5)>
  # ivtmp_59 = PHI <ivtmp_58(7), 8(5)>
  # DEBUG y => y_42
  # DEBUG src => src_41
  # DEBUG p => src_41
  # DEBUG D#16 => src_41 + 4
  # DEBUG p => D#16
  MEM[(uint32_t *)src_41] = dc0_25;
  # DEBUG p => D#16 + 4
  MEM[(uint32_t *)src_41 + 4B] = dc1_28;
  src_31 = src_41 + 32;
  # DEBUG src => src_31
  y_32 = y_42 + 1;
  # DEBUG y => y_32
  # DEBUG y => y_32
  # DEBUG src => src_31
  ivtmp_58 = ivtmp_59 - 1;
  if (ivtmp_58 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  return;

}



;; Function predict_8x8c_dc (predict_8x8c_dc, funcdef_no=125, decl_uid=5888, cgraph_uid=125, symbol_order=168)


Analyzing loop at common/predict.c:270
common/predict.c:270:5: note: ===== analyze_loop_nest =====
common/predict.c:270:5: note: === vect_analyze_loop_form ===
common/predict.c:270:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/predict.c:270:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_87]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_14(D)
	offset from base address: 0
	constant offset from base address: 128
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_14(D)]
	Access function 0: {128B, +, 32}_3
Creating dr for MEM[(uint32_t *)src_87 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_14(D)
	offset from base address: 0
	constant offset from base address: 132
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_14(D)]
	Access function 0: {132B, +, 32}_3
common/predict.c:270:5: note: got vectype for stmt: MEM[(uint32_t *)src_87] = dc2_55;
vector(4) unsigned int
common/predict.c:270:5: note: got vectype for stmt: MEM[(uint32_t *)src_87 + 4B] = dc3_60;
vector(4) unsigned int
common/predict.c:270:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:270:5: note: Analyze phi: src_87 = PHI <src_136(8), src_68(10)>

common/predict.c:270:5: note: Access function of PHI: {src_136, +, 32}_3
common/predict.c:270:5: note: step: 32,  init: src_136
common/predict.c:270:5: note: Detected induction.
common/predict.c:270:5: note: Analyze phi: y_89 = PHI <0(8), y_69(10)>

common/predict.c:270:5: note: Access function of PHI: {0, +, 1}_3
common/predict.c:270:5: note: step: 1,  init: 0
common/predict.c:270:5: note: Detected induction.
common/predict.c:270:5: note: Analyze phi: .MEM_96 = PHI <.MEM_63(8), .MEM_67(10)>

common/predict.c:270:5: note: Analyze phi: ivtmp_135 = PHI <4(8), ivtmp_134(10)>

common/predict.c:270:5: note: Access function of PHI: {4, +, 4294967295}_3
common/predict.c:270:5: note: step: 4294967295,  init: 4
common/predict.c:270:5: note: Detected induction.
common/predict.c:270:5: note: === vect_pattern_recog ===
common/predict.c:270:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:270:5: note: Detected interleaving MEM[(uint32_t *)src_87] and MEM[(uint32_t *)src_87 + 4B]
common/predict.c:270:5: note: interleaved store with gaps
common/predict.c:270:5: note: not vectorized: complicated access pattern.
common/predict.c:270:5: note: bad data access.

Analyzing loop at common/predict.c:262
common/predict.c:262:5: note: ===== analyze_loop_nest =====
common/predict.c:262:5: note: === vect_analyze_loop_form ===
common/predict.c:262:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/predict.c:262:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_86]
analyze_innermost: success.
	base_address: src_14(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_14(D)]
	Access function 0: {0B, +, 32}_2
Creating dr for MEM[(uint32_t *)src_86 + 4B]
analyze_innermost: success.
	base_address: src_14(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_14(D)]
	Access function 0: {4B, +, 32}_2
common/predict.c:262:5: note: got vectype for stmt: MEM[(uint32_t *)src_86] = dc0_47;
vector(4) unsigned int
common/predict.c:262:5: note: got vectype for stmt: MEM[(uint32_t *)src_86 + 4B] = dc1_51;
vector(4) unsigned int
common/predict.c:262:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:262:5: note: Analyze phi: src_86 = PHI <src_64(7), src_14(D)(5)>

common/predict.c:262:5: note: Access function of PHI: {src_14(D), +, 32}_2
common/predict.c:262:5: note: step: 32,  init: src_14(D)
common/predict.c:262:5: note: Detected induction.
common/predict.c:262:5: note: Analyze phi: y_88 = PHI <y_65(7), 0(5)>

common/predict.c:262:5: note: Access function of PHI: {0, +, 1}_2
common/predict.c:262:5: note: step: 1,  init: 0
common/predict.c:262:5: note: Detected induction.
common/predict.c:262:5: note: Analyze phi: .MEM_95 = PHI <.MEM_63(7), .MEM_16(D)(5)>

common/predict.c:262:5: note: Analyze phi: ivtmp_133 = PHI <ivtmp_132(7), 4(5)>

common/predict.c:262:5: note: Access function of PHI: {4, +, 4294967295}_2
common/predict.c:262:5: note: step: 4294967295,  init: 4
common/predict.c:262:5: note: Detected induction.
common/predict.c:262:5: note: === vect_pattern_recog ===
common/predict.c:262:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:262:5: note: Detected interleaving MEM[(uint32_t *)src_86] and MEM[(uint32_t *)src_86 + 4B]
common/predict.c:262:5: note: interleaved store with gaps
common/predict.c:262:5: note: not vectorized: complicated access pattern.
common/predict.c:262:5: note: bad data access.

Analyzing loop at common/predict.c:246
common/predict.c:246:5: note: ===== analyze_loop_nest =====
common/predict.c:246:5: note: === vect_analyze_loop_form ===
common/predict.c:246:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/predict.c:246:5: note: === vect_analyze_data_refs ===
Creating dr for *_15
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_14(D)
	offset from base address: 0
	constant offset from base address: -32(OVF)
	step: 1
	aligned to: 128
	base_object: *src_14(D)
	Access function 0: {-32B, +, 1}_1
Creating dr for *_23
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_14(D)
	offset from base address: 0
	constant offset from base address: -28(OVF)
	step: 1
	aligned to: 128
	base_object: *src_14(D)
	Access function 0: {-28B, +, 1}_1
Creating dr for *_30
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_14(D)
	offset from base address: 0
	constant offset from base address: -1(OVF)
	step: 32
	aligned to: 128
	base_object: *src_14(D)
	Access function 0: {-1B, +, 32}_1
Creating dr for *_38
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_14(D)
	offset from base address: 0
	constant offset from base address: 127
	step: 32
	aligned to: 128
	base_object: *src_14(D)
	Access function 0: {127B, +, 32}_1
common/predict.c:246:5: note: got vectype for stmt: _17 = *_15;
vector(16) unsigned char
common/predict.c:246:5: note: got vectype for stmt: _24 = *_23;
vector(16) unsigned char
common/predict.c:246:5: note: got vectype for stmt: _31 = *_30;
vector(16) unsigned char
common/predict.c:246:5: note: got vectype for stmt: _39 = *_38;
vector(16) unsigned char
common/predict.c:246:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:246:5: note: Analyze phi: s0_90 = PHI <s0_19(4), 0(2)>

common/predict.c:246:5: note: Access function of PHI: {0, +, _18}_1
common/predict.c:246:5: note: step: _18,  init: 0
common/predict.c:246:5: note: step unknown.
common/predict.c:246:5: note: Analyze phi: s1_91 = PHI <s1_26(4), 0(2)>

common/predict.c:246:5: note: Access function of PHI: {0, +, _25}_1
common/predict.c:246:5: note: step: _25,  init: 0
common/predict.c:246:5: note: step unknown.
common/predict.c:246:5: note: Analyze phi: s2_92 = PHI <s2_33(4), 0(2)>

common/predict.c:246:5: note: Access function of PHI: {0, +, _32}_1
common/predict.c:246:5: note: step: _32,  init: 0
common/predict.c:246:5: note: step unknown.
common/predict.c:246:5: note: Analyze phi: s3_93 = PHI <s3_41(4), 0(2)>

common/predict.c:246:5: note: Access function of PHI: {0, +, _40}_1
common/predict.c:246:5: note: step: _40,  init: 0
common/predict.c:246:5: note: step unknown.
common/predict.c:246:5: note: Analyze phi: i_94 = PHI <i_42(4), 0(2)>

common/predict.c:246:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:246:5: note: step: 1,  init: 0
common/predict.c:246:5: note: Detected induction.
common/predict.c:246:5: note: Analyze phi: ivtmp_131 = PHI <ivtmp_130(4), 4(2)>

common/predict.c:246:5: note: Access function of PHI: {4, +, 4294967295}_1
common/predict.c:246:5: note: step: 4294967295,  init: 4
common/predict.c:246:5: note: Detected induction.
common/predict.c:246:5: note: Analyze phi: s3_93 = PHI <s3_41(4), 0(2)>

common/predict.c:246:5: note: detected reduction: s3_41 = _40 + s3_93;

common/predict.c:246:5: note: Detected reduction.
common/predict.c:246:5: note: Analyze phi: s2_92 = PHI <s2_33(4), 0(2)>

common/predict.c:246:5: note: detected reduction: s2_33 = _32 + s2_92;

common/predict.c:246:5: note: Detected reduction.
common/predict.c:246:5: note: Analyze phi: s1_91 = PHI <s1_26(4), 0(2)>

common/predict.c:246:5: note: detected reduction: s1_26 = _25 + s1_91;

common/predict.c:246:5: note: Detected reduction.
common/predict.c:246:5: note: Analyze phi: s0_90 = PHI <s0_19(4), 0(2)>

common/predict.c:246:5: note: detected reduction: s0_19 = _18 + s0_90;

common/predict.c:246:5: note: Detected reduction.
common/predict.c:246:5: note: === vect_pattern_recog ===
common/predict.c:246:5: note: vect_is_simple_use: operand _18
common/predict.c:246:5: note: def_stmt: _18 = (int) _17;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _18
common/predict.c:246:5: note: def_stmt: _18 = (int) _17;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _18
common/predict.c:246:5: note: def_stmt: _18 = (int) _17;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _17
common/predict.c:246:5: note: def_stmt: _17 = *_15;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _25
common/predict.c:246:5: note: def_stmt: _25 = (int) _24;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _25
common/predict.c:246:5: note: def_stmt: _25 = (int) _24;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _25
common/predict.c:246:5: note: def_stmt: _25 = (int) _24;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _24
common/predict.c:246:5: note: def_stmt: _24 = *_23;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand i_94
common/predict.c:246:5: note: def_stmt: i_94 = PHI <i_42(4), 0(2)>
common/predict.c:246:5: note: type of def: 4.
common/predict.c:246:5: note: vect_is_simple_use: operand _32
common/predict.c:246:5: note: def_stmt: _32 = (int) _31;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _32
common/predict.c:246:5: note: def_stmt: _32 = (int) _31;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _32
common/predict.c:246:5: note: def_stmt: _32 = (int) _31;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _31
common/predict.c:246:5: note: def_stmt: _31 = *_30;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _20
common/predict.c:246:5: note: def_stmt: _20 = i_94 + 4;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _40
common/predict.c:246:5: note: def_stmt: _40 = (int) _39;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _40
common/predict.c:246:5: note: def_stmt: _40 = (int) _39;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _40
common/predict.c:246:5: note: def_stmt: _40 = (int) _39;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _39
common/predict.c:246:5: note: def_stmt: _39 = *_38;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:246:5: note: Detected single element interleaving *_30 step 32
common/predict.c:246:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:246:5: note: Detected single element interleaving *_38 step 32
common/predict.c:246:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:246:5: note: === vect_mark_stmts_to_be_vectorized ===
common/predict.c:246:5: note: init: phi relevant? s0_90 = PHI <s0_19(4), 0(2)>
common/predict.c:246:5: note: init: phi relevant? s1_91 = PHI <s1_26(4), 0(2)>
common/predict.c:246:5: note: init: phi relevant? s2_92 = PHI <s2_33(4), 0(2)>
common/predict.c:246:5: note: init: phi relevant? s3_93 = PHI <s3_41(4), 0(2)>
common/predict.c:246:5: note: init: phi relevant? i_94 = PHI <i_42(4), 0(2)>
common/predict.c:246:5: note: init: phi relevant? ivtmp_131 = PHI <ivtmp_130(4), 4(2)>
common/predict.c:246:5: note: init: stmt relevant? # DEBUG i => i_94
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s3 => s3_93
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s2 => s2_92
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s1 => s1_91
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s0 => s0_90
common/predict.c:246:5: note: init: stmt relevant? _12 = (sizetype) i_94;
common/predict.c:246:5: note: init: stmt relevant? _13 = _12 + 18446744073709551584;
common/predict.c:246:5: note: init: stmt relevant? _15 = src_14(D) + _13;
common/predict.c:246:5: note: init: stmt relevant? _17 = *_15;
common/predict.c:246:5: note: init: stmt relevant? _18 = (int) _17;
common/predict.c:246:5: note: init: stmt relevant? s0_19 = _18 + s0_90;
common/predict.c:246:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:246:5: note: mark relevant 0, live 1.
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s0 => s0_19
common/predict.c:246:5: note: init: stmt relevant? _20 = i_94 + 4;
common/predict.c:246:5: note: init: stmt relevant? _21 = (sizetype) _20;
common/predict.c:246:5: note: init: stmt relevant? _22 = _21 + 18446744073709551584;
common/predict.c:246:5: note: init: stmt relevant? _23 = src_14(D) + _22;
common/predict.c:246:5: note: init: stmt relevant? _24 = *_23;
common/predict.c:246:5: note: init: stmt relevant? _25 = (int) _24;
common/predict.c:246:5: note: init: stmt relevant? s1_26 = _25 + s1_91;
common/predict.c:246:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:246:5: note: mark relevant 0, live 1.
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s1 => s1_26
common/predict.c:246:5: note: init: stmt relevant? _27 = i_94 * 32;
common/predict.c:246:5: note: init: stmt relevant? _28 = _27 + -1;
common/predict.c:246:5: note: init: stmt relevant? _29 = (sizetype) _28;
common/predict.c:246:5: note: init: stmt relevant? _30 = src_14(D) + _29;
common/predict.c:246:5: note: init: stmt relevant? _31 = *_30;
common/predict.c:246:5: note: init: stmt relevant? _32 = (int) _31;
common/predict.c:246:5: note: init: stmt relevant? s2_33 = _32 + s2_92;
common/predict.c:246:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:246:5: note: mark relevant 0, live 1.
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s2 => s2_33
common/predict.c:246:5: note: init: stmt relevant? _35 = _20 * 32;
common/predict.c:246:5: note: init: stmt relevant? _36 = _35 + -1;
common/predict.c:246:5: note: init: stmt relevant? _37 = (sizetype) _36;
common/predict.c:246:5: note: init: stmt relevant? _38 = src_14(D) + _37;
common/predict.c:246:5: note: init: stmt relevant? _39 = *_38;
common/predict.c:246:5: note: init: stmt relevant? _40 = (int) _39;
common/predict.c:246:5: note: init: stmt relevant? s3_41 = _40 + s3_93;
common/predict.c:246:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:246:5: note: mark relevant 0, live 1.
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s3 => s3_41
common/predict.c:246:5: note: init: stmt relevant? i_42 = i_94 + 1;
common/predict.c:246:5: note: init: stmt relevant? # DEBUG i => i_42
common/predict.c:246:5: note: init: stmt relevant? # DEBUG i => i_42
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s3 => s3_41
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s2 => s2_33
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s1 => s1_26
common/predict.c:246:5: note: init: stmt relevant? # DEBUG s0 => s0_19
common/predict.c:246:5: note: init: stmt relevant? ivtmp_130 = ivtmp_131 - 1;
common/predict.c:246:5: note: init: stmt relevant? if (ivtmp_130 != 0)
common/predict.c:246:5: note: worklist: examine stmt: s3_41 = _40 + s3_93;
common/predict.c:246:5: note: vect_is_simple_use: operand _40
common/predict.c:246:5: note: def_stmt: _40 = (int) _39;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: vect_is_simple_use: operand s3_93
common/predict.c:246:5: note: def_stmt: s3_93 = PHI <s3_41(4), 0(2)>
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: worklist: examine stmt: s3_93 = PHI <s3_41(4), 0(2)>
common/predict.c:246:5: note: vect_is_simple_use: operand s3_41
common/predict.c:246:5: note: def_stmt: s3_41 = _40 + s3_93;
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:246:5: note: vect_is_simple_use: operand 0
common/predict.c:246:5: note: worklist: examine stmt: _40 = (int) _39;
common/predict.c:246:5: note: vect_is_simple_use: operand _39
common/predict.c:246:5: note: def_stmt: _39 = *_38;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: worklist: examine stmt: _39 = *_38;
common/predict.c:246:5: note: worklist: examine stmt: s2_33 = _32 + s2_92;
common/predict.c:246:5: note: vect_is_simple_use: operand _32
common/predict.c:246:5: note: def_stmt: _32 = (int) _31;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: vect_is_simple_use: operand s2_92
common/predict.c:246:5: note: def_stmt: s2_92 = PHI <s2_33(4), 0(2)>
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: worklist: examine stmt: s2_92 = PHI <s2_33(4), 0(2)>
common/predict.c:246:5: note: vect_is_simple_use: operand s2_33
common/predict.c:246:5: note: def_stmt: s2_33 = _32 + s2_92;
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:246:5: note: vect_is_simple_use: operand 0
common/predict.c:246:5: note: worklist: examine stmt: _32 = (int) _31;
common/predict.c:246:5: note: vect_is_simple_use: operand _31
common/predict.c:246:5: note: def_stmt: _31 = *_30;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: worklist: examine stmt: _31 = *_30;
common/predict.c:246:5: note: worklist: examine stmt: s1_26 = _25 + s1_91;
common/predict.c:246:5: note: vect_is_simple_use: operand _25
common/predict.c:246:5: note: def_stmt: _25 = (int) _24;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: vect_is_simple_use: operand s1_91
common/predict.c:246:5: note: def_stmt: s1_91 = PHI <s1_26(4), 0(2)>
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: worklist: examine stmt: s1_91 = PHI <s1_26(4), 0(2)>
common/predict.c:246:5: note: vect_is_simple_use: operand s1_26
common/predict.c:246:5: note: def_stmt: s1_26 = _25 + s1_91;
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:246:5: note: vect_is_simple_use: operand 0
common/predict.c:246:5: note: worklist: examine stmt: _25 = (int) _24;
common/predict.c:246:5: note: vect_is_simple_use: operand _24
common/predict.c:246:5: note: def_stmt: _24 = *_23;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: worklist: examine stmt: _24 = *_23;
common/predict.c:246:5: note: worklist: examine stmt: s0_19 = _18 + s0_90;
common/predict.c:246:5: note: vect_is_simple_use: operand _18
common/predict.c:246:5: note: def_stmt: _18 = (int) _17;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: vect_is_simple_use: operand s0_90
common/predict.c:246:5: note: def_stmt: s0_90 = PHI <s0_19(4), 0(2)>
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: worklist: examine stmt: s0_90 = PHI <s0_19(4), 0(2)>
common/predict.c:246:5: note: vect_is_simple_use: operand s0_19
common/predict.c:246:5: note: def_stmt: s0_19 = _18 + s0_90;
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:246:5: note: vect_is_simple_use: operand 0
common/predict.c:246:5: note: worklist: examine stmt: _18 = (int) _17;
common/predict.c:246:5: note: vect_is_simple_use: operand _17
common/predict.c:246:5: note: def_stmt: _17 = *_15;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: mark relevant 3, live 0.
common/predict.c:246:5: note: worklist: examine stmt: _17 = *_15;
common/predict.c:246:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _17 = *_15;
  stmt_b: _24 = *_23;
(analyze_overlapping_iterations 
  (chrec_a = {-32B, +, 1}_1)
  (chrec_b = {-28B, +, 1}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _17 = *_15;
  stmt_b: _31 = *_30;
(analyze_overlapping_iterations 
  (chrec_a = {-32B, +, 1}_1)
  (chrec_b = {-1B, +, 32}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _17 = *_15;
  stmt_b: _39 = *_38;
(analyze_overlapping_iterations 
  (chrec_a = {-32B, +, 1}_1)
  (chrec_b = {127B, +, 32}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: _31 = *_30;
(analyze_overlapping_iterations 
  (chrec_a = {-28B, +, 1}_1)
  (chrec_b = {-1B, +, 32}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: _39 = *_38;
(analyze_overlapping_iterations 
  (chrec_a = {-28B, +, 1}_1)
  (chrec_b = {127B, +, 32}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _31 = *_30;
  stmt_b: _39 = *_38;
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 32}_1)
  (chrec_b = {127B, +, 32}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _17 = *_15;
  stmt_b: _17 = *_15;
(analyze_overlapping_iterations 
  (chrec_a = {-32B, +, 1}_1)
  (chrec_b = {-32B, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: _24 = *_23;
(analyze_overlapping_iterations 
  (chrec_a = {-28B, +, 1}_1)
  (chrec_b = {-28B, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _31 = *_30;
  stmt_b: _31 = *_30;
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 32}_1)
  (chrec_b = {-1B, +, 32}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _39 = *_38;
  stmt_b: _39 = *_38;
(analyze_overlapping_iterations 
  (chrec_a = {127B, +, 32}_1)
  (chrec_b = {127B, +, 32}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/predict.c:246:5: note: === vect_determine_vectorization_factor ===
common/predict.c:246:5: note: ==> examining phi: s0_90 = PHI <s0_19(4), 0(2)>

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: nunits = 4
common/predict.c:246:5: note: ==> examining phi: s1_91 = PHI <s1_26(4), 0(2)>

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: nunits = 4
common/predict.c:246:5: note: ==> examining phi: s2_92 = PHI <s2_33(4), 0(2)>

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: nunits = 4
common/predict.c:246:5: note: ==> examining phi: s3_93 = PHI <s3_41(4), 0(2)>

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: nunits = 4
common/predict.c:246:5: note: ==> examining phi: i_94 = PHI <i_42(4), 0(2)>

common/predict.c:246:5: note: ==> examining phi: ivtmp_131 = PHI <ivtmp_130(4), 4(2)>

common/predict.c:246:5: note: ==> examining statement: # DEBUG i => i_94

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s3 => s3_93

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s2 => s2_92

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s1 => s1_91

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s0 => s0_90

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _12 = (sizetype) i_94;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _13 = _12 + 18446744073709551584;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _15 = src_14(D) + _13;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _17 = *_15;

common/predict.c:246:5: note: get vectype for scalar type:  unsigned char
common/predict.c:246:5: note: vectype: vector(16) unsigned char
common/predict.c:246:5: note: nunits = 16
common/predict.c:246:5: note: ==> examining statement: _18 = (int) _17;

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: get vectype for scalar type:  unsigned char
common/predict.c:246:5: note: vectype: vector(16) unsigned char
common/predict.c:246:5: note: nunits = 16
common/predict.c:246:5: note: ==> examining statement: s0_19 = _18 + s0_90;

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: nunits = 4
common/predict.c:246:5: note: ==> examining statement: # DEBUG s0 => s0_19

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _20 = i_94 + 4;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _21 = (sizetype) _20;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _22 = _21 + 18446744073709551584;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _23 = src_14(D) + _22;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _24 = *_23;

common/predict.c:246:5: note: get vectype for scalar type:  unsigned char
common/predict.c:246:5: note: vectype: vector(16) unsigned char
common/predict.c:246:5: note: nunits = 16
common/predict.c:246:5: note: ==> examining statement: _25 = (int) _24;

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: get vectype for scalar type:  unsigned char
common/predict.c:246:5: note: vectype: vector(16) unsigned char
common/predict.c:246:5: note: nunits = 16
common/predict.c:246:5: note: ==> examining statement: s1_26 = _25 + s1_91;

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: nunits = 4
common/predict.c:246:5: note: ==> examining statement: # DEBUG s1 => s1_26

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _27 = i_94 * 32;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _28 = _27 + -1;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _29 = (sizetype) _28;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _30 = src_14(D) + _29;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _31 = *_30;

common/predict.c:246:5: note: get vectype for scalar type:  unsigned char
common/predict.c:246:5: note: vectype: vector(16) unsigned char
common/predict.c:246:5: note: nunits = 16
common/predict.c:246:5: note: ==> examining statement: _32 = (int) _31;

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: get vectype for scalar type:  unsigned char
common/predict.c:246:5: note: vectype: vector(16) unsigned char
common/predict.c:246:5: note: nunits = 16
common/predict.c:246:5: note: ==> examining statement: s2_33 = _32 + s2_92;

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: nunits = 4
common/predict.c:246:5: note: ==> examining statement: # DEBUG s2 => s2_33

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _35 = _20 * 32;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _36 = _35 + -1;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _37 = (sizetype) _36;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _38 = src_14(D) + _37;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: _39 = *_38;

common/predict.c:246:5: note: get vectype for scalar type:  unsigned char
common/predict.c:246:5: note: vectype: vector(16) unsigned char
common/predict.c:246:5: note: nunits = 16
common/predict.c:246:5: note: ==> examining statement: _40 = (int) _39;

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: get vectype for scalar type:  unsigned char
common/predict.c:246:5: note: vectype: vector(16) unsigned char
common/predict.c:246:5: note: nunits = 16
common/predict.c:246:5: note: ==> examining statement: s3_41 = _40 + s3_93;

common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: get vectype for scalar type:  int
common/predict.c:246:5: note: vectype: vector(4) int
common/predict.c:246:5: note: nunits = 4
common/predict.c:246:5: note: ==> examining statement: # DEBUG s3 => s3_41

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: i_42 = i_94 + 1;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: # DEBUG i => i_42

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: # DEBUG i => i_42

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s3 => s3_41

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s2 => s2_33

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s1 => s1_26

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s0 => s0_19

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: ivtmp_130 = ivtmp_131 - 1;

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: ==> examining statement: if (ivtmp_130 != 0)

common/predict.c:246:5: note: skip.
common/predict.c:246:5: note: vectorization factor = 16
common/predict.c:246:5: note: === vect_analyze_data_refs_alignment ===
common/predict.c:246:5: note: vect_compute_data_ref_alignment:
common/predict.c:246:5: note: can't force alignment of ref: *_15
common/predict.c:246:5: note: vect_compute_data_ref_alignment:
common/predict.c:246:5: note: can't force alignment of ref: *_23
common/predict.c:246:5: note: vect_compute_data_ref_alignment:
common/predict.c:246:5: note: can't force alignment of ref: *_30
common/predict.c:246:5: note: vect_compute_data_ref_alignment:
common/predict.c:246:5: note: can't force alignment of ref: *_38
common/predict.c:246:5: note: === vect_prune_runtime_alias_test_list ===
common/predict.c:246:5: note: === vect_enhance_data_refs_alignment ===
common/predict.c:246:5: note: Unknown misalignment, is_packed = 0
common/predict.c:246:5: note: Unknown misalignment, is_packed = 0
common/predict.c:246:5: note: vector alignment may not be reachable
common/predict.c:246:5: note: vect_can_advance_ivs_p:
common/predict.c:246:5: note: Analyze phi: s0_90 = PHI <s0_19(4), 0(2)>

common/predict.c:246:5: note: reduc phi. skip.
common/predict.c:246:5: note: Analyze phi: s1_91 = PHI <s1_26(4), 0(2)>

common/predict.c:246:5: note: reduc phi. skip.
common/predict.c:246:5: note: Analyze phi: s2_92 = PHI <s2_33(4), 0(2)>

common/predict.c:246:5: note: reduc phi. skip.
common/predict.c:246:5: note: Analyze phi: s3_93 = PHI <s3_41(4), 0(2)>

common/predict.c:246:5: note: reduc phi. skip.
common/predict.c:246:5: note: Analyze phi: i_94 = PHI <i_42(4), 0(2)>

common/predict.c:246:5: note: Analyze phi: ivtmp_131 = PHI <ivtmp_130(4), 4(2)>

common/predict.c:246:5: note: Vectorizing an unaligned access.
common/predict.c:246:5: note: Vectorizing an unaligned access.
common/predict.c:246:5: note: Vectorizing an unaligned access.
common/predict.c:246:5: note: Vectorizing an unaligned access.
common/predict.c:246:5: note: === vect_analyze_slp ===
common/predict.c:246:5: note: Build SLP for s3_41 = _40 + s3_93;

common/predict.c:246:5: note: Build SLP for s2_33 = _32 + s2_92;

common/predict.c:246:5: note: Build SLP for s1_26 = _25 + s1_91;

common/predict.c:246:5: note: Build SLP for s0_19 = _18 + s0_90;

common/predict.c:246:5: note: vect_is_simple_use: operand _40
common/predict.c:246:5: note: def_stmt: _40 = (int) _39;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand s3_93
common/predict.c:246:5: note: def_stmt: s3_93 = PHI <s3_41(4), 0(2)>
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: vect_is_simple_use: operand _32
common/predict.c:246:5: note: def_stmt: _32 = (int) _31;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand s2_92
common/predict.c:246:5: note: def_stmt: s2_92 = PHI <s2_33(4), 0(2)>
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: vect_is_simple_use: operand _25
common/predict.c:246:5: note: def_stmt: _25 = (int) _24;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand s1_91
common/predict.c:246:5: note: def_stmt: s1_91 = PHI <s1_26(4), 0(2)>
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: vect_is_simple_use: operand _18
common/predict.c:246:5: note: def_stmt: _18 = (int) _17;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand s0_90
common/predict.c:246:5: note: def_stmt: s0_90 = PHI <s0_19(4), 0(2)>
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: Build SLP for _40 = (int) _39;

common/predict.c:246:5: note: Build SLP for _32 = (int) _31;

common/predict.c:246:5: note: Build SLP for _25 = (int) _24;

common/predict.c:246:5: note: Build SLP for _18 = (int) _17;

common/predict.c:246:5: note: vect_is_simple_use: operand _39
common/predict.c:246:5: note: def_stmt: _39 = *_38;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _31
common/predict.c:246:5: note: def_stmt: _31 = *_30;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _24
common/predict.c:246:5: note: def_stmt: _24 = *_23;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand _17
common/predict.c:246:5: note: def_stmt: _17 = *_15;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: Build SLP for _39 = *_38;

common/predict.c:246:5: note: Build SLP failed: grouped loads have gaps _39 = *_38;

common/predict.c:246:5: note: === vect_make_slp_decision ===
common/predict.c:246:5: note: === vect_detect_hybrid_slp ===
common/predict.c:246:5: note: === vect_analyze_loop_operations ===
common/predict.c:246:5: note: examining phi: s0_90 = PHI <s0_19(4), 0(2)>

common/predict.c:246:5: note: examining phi: s1_91 = PHI <s1_26(4), 0(2)>

common/predict.c:246:5: note: examining phi: s2_92 = PHI <s2_33(4), 0(2)>

common/predict.c:246:5: note: examining phi: s3_93 = PHI <s3_41(4), 0(2)>

common/predict.c:246:5: note: examining phi: i_94 = PHI <i_42(4), 0(2)>

common/predict.c:246:5: note: examining phi: ivtmp_131 = PHI <ivtmp_130(4), 4(2)>

common/predict.c:246:5: note: ==> examining statement: # DEBUG i => i_94
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s3 => s3_93
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s2 => s2_92
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s1 => s1_91
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: # DEBUG s0 => s0_90
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _12 = (sizetype) i_94;
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _13 = _12 + 18446744073709551584;
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _15 = src_14(D) + _13;
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _17 = *_15;
common/predict.c:246:5: note: vect_is_simple_use: operand *_15
common/predict.c:246:5: note: not ssa-name.
common/predict.c:246:5: note: use not simple.
common/predict.c:246:5: note: vect_is_simple_use: operand *_15
common/predict.c:246:5: note: not ssa-name.
common/predict.c:246:5: note: use not simple.
common/predict.c:246:5: note: vect_model_load_cost: unaligned supported by hardware.
common/predict.c:246:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/predict.c:246:5: note: ==> examining statement: _18 = (int) _17;
common/predict.c:246:5: note: vect_is_simple_use: operand _17
common/predict.c:246:5: note: def_stmt: _17 = *_15;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: === vectorizable_conversion ===
common/predict.c:246:5: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/predict.c:246:5: note: ==> examining statement: s0_19 = _18 + s0_90;
common/predict.c:246:5: note: vect_is_simple_use: operand _18
common/predict.c:246:5: note: def_stmt: _18 = (int) _17;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand s0_90
common/predict.c:246:5: note: def_stmt: s0_90 = PHI <s0_19(4), 0(2)>
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: detected reduction: s0_19 = _18 + s0_90;

common/predict.c:246:5: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 4, prologue_cost = 1, epilogue_cost = 5 .
common/predict.c:246:5: note: ==> examining statement: # DEBUG s0 => s0_19
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _20 = i_94 + 4;
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _21 = (sizetype) _20;
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _22 = _21 + 18446744073709551584;
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _23 = src_14(D) + _22;
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _24 = *_23;
common/predict.c:246:5: note: vect_is_simple_use: operand *_23
common/predict.c:246:5: note: not ssa-name.
common/predict.c:246:5: note: use not simple.
common/predict.c:246:5: note: vect_is_simple_use: operand *_23
common/predict.c:246:5: note: not ssa-name.
common/predict.c:246:5: note: use not simple.
common/predict.c:246:5: note: vect_model_load_cost: unaligned supported by hardware.
common/predict.c:246:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/predict.c:246:5: note: ==> examining statement: _25 = (int) _24;
common/predict.c:246:5: note: vect_is_simple_use: operand _24
common/predict.c:246:5: note: def_stmt: _24 = *_23;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: === vectorizable_conversion ===
common/predict.c:246:5: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/predict.c:246:5: note: ==> examining statement: s1_26 = _25 + s1_91;
common/predict.c:246:5: note: vect_is_simple_use: operand _25
common/predict.c:246:5: note: def_stmt: _25 = (int) _24;
common/predict.c:246:5: note: type of def: 3.
common/predict.c:246:5: note: vect_is_simple_use: operand s1_91
common/predict.c:246:5: note: def_stmt: s1_91 = PHI <s1_26(4), 0(2)>
common/predict.c:246:5: note: type of def: 5.
common/predict.c:246:5: note: detected reduction: s1_26 = _25 + s1_91;

common/predict.c:246:5: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 4, prologue_cost = 1, epilogue_cost = 5 .
common/predict.c:246:5: note: ==> examining statement: # DEBUG s1 => s1_26
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _27 = i_94 * 32;
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _28 = _27 + -1;
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _29 = (sizetype) _28;
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _30 = src_14(D) + _29;
common/predict.c:246:5: note: irrelevant.
common/predict.c:246:5: note: ==> examining statement: _31 = *_30;
common/predict.c:246:5: note: vect_is_simple_use: operand *_30
common/predict.c:246:5: note: not ssa-name.
common/predict.c:246:5: note: use not simple.
common/predict.c:246:5: note: vect_is_simple_use: operand *_30
common/predict.c:246:5: note: not ssa-name.
common/predict.c:246:5: note: use not simple.
common/predict.c:246:5: note: single-element interleaving not supported for not adjacent vector loads
common/predict.c:246:5: note: not vectorized: relevant stmt not supported: _31 = *_30;
common/predict.c:246:5: note: bad operation or unsupported loop bound.
common/predict.c:234:13: note: vectorized 0 loops in function.
predict_8x8c_dc (uint8_t * src)
{
  int i;
  uint32_t dc3;
  uint32_t dc2;
  uint32_t dc1;
  uint32_t dc0;
  int s3;
  int s2;
  int s1;
  int s0;
  int y;
  sizetype _12;
  sizetype _13;
  uint8_t * _15;
  unsigned char _17;
  int _18;
  int _20;
  sizetype _21;
  sizetype _22;
  uint8_t * _23;
  unsigned char _24;
  int _25;
  int _27;
  int _28;
  sizetype _29;
  uint8_t * _30;
  unsigned char _31;
  int _32;
  int _35;
  int _36;
  sizetype _37;
  uint8_t * _38;
  unsigned char _39;
  int _40;
  int _43;
  int _44;
  int _45;
  int _46;
  int _48;
  int _49;
  int _50;
  int _52;
  int _53;
  int _54;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned int ivtmp_130;
  unsigned int ivtmp_131;
  unsigned int ivtmp_132;
  unsigned int ivtmp_133;
  unsigned int ivtmp_134;
  unsigned int ivtmp_135;

  <bb 2>:
  # DEBUG s0 => 0
  # DEBUG s1 => 0
  # DEBUG s2 => 0
  # DEBUG s3 => 0
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG s3 => 0
  # DEBUG s2 => 0
  # DEBUG s1 => 0
  # DEBUG s0 => 0

  <bb 3>:
  # s0_90 = PHI <s0_19(4), 0(2)>
  # s1_91 = PHI <s1_26(4), 0(2)>
  # s2_92 = PHI <s2_33(4), 0(2)>
  # s3_93 = PHI <s3_41(4), 0(2)>
  # i_94 = PHI <i_42(4), 0(2)>
  # ivtmp_131 = PHI <ivtmp_130(4), 4(2)>
  # DEBUG i => i_94
  # DEBUG s3 => s3_93
  # DEBUG s2 => s2_92
  # DEBUG s1 => s1_91
  # DEBUG s0 => s0_90
  _12 = (sizetype) i_94;
  _13 = _12 + 18446744073709551584;
  _15 = src_14(D) + _13;
  _17 = *_15;
  _18 = (int) _17;
  s0_19 = _18 + s0_90;
  # DEBUG s0 => s0_19
  _20 = i_94 + 4;
  _21 = (sizetype) _20;
  _22 = _21 + 18446744073709551584;
  _23 = src_14(D) + _22;
  _24 = *_23;
  _25 = (int) _24;
  s1_26 = _25 + s1_91;
  # DEBUG s1 => s1_26
  _27 = i_94 * 32;
  _28 = _27 + -1;
  _29 = (sizetype) _28;
  _30 = src_14(D) + _29;
  _31 = *_30;
  _32 = (int) _31;
  s2_33 = _32 + s2_92;
  # DEBUG s2 => s2_33
  _35 = _20 * 32;
  _36 = _35 + -1;
  _37 = (sizetype) _36;
  _38 = src_14(D) + _37;
  _39 = *_38;
  _40 = (int) _39;
  s3_41 = _40 + s3_93;
  # DEBUG s3 => s3_41
  i_42 = i_94 + 1;
  # DEBUG i => i_42
  # DEBUG i => i_42
  # DEBUG s3 => s3_41
  # DEBUG s2 => s2_33
  # DEBUG s1 => s1_26
  # DEBUG s0 => s0_19
  ivtmp_130 = ivtmp_131 - 1;
  if (ivtmp_130 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # s0_140 = PHI <s0_19(3)>
  # s1_139 = PHI <s1_26(3)>
  # s2_138 = PHI <s2_33(3)>
  # s3_137 = PHI <s3_41(3)>
  _43 = s0_140 + s2_138;
  _44 = _43 + 4;
  _45 = _44 >> 3;
  _46 = _45 * 16843009;
  dc0_47 = (uint32_t) _46;
  # DEBUG dc0 => dc0_47
  _48 = s1_139 + 2;
  _49 = _48 >> 2;
  _50 = _49 * 16843009;
  dc1_51 = (uint32_t) _50;
  # DEBUG dc1 => dc1_51
  _52 = s3_137 + 2;
  _53 = _52 >> 2;
  _54 = _53 * 16843009;
  dc2_55 = (uint32_t) _54;
  # DEBUG dc2 => dc2_55
  _56 = s1_139 + s3_137;
  _57 = _56 + 4;
  _58 = _57 >> 3;
  _59 = _58 * 16843009;
  dc3_60 = (uint32_t) _59;
  # DEBUG dc3 => dc3_60
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src => src_14(D)

  <bb 6>:
  # src_86 = PHI <src_64(7), src_14(D)(5)>
  # y_88 = PHI <y_65(7), 0(5)>
  # ivtmp_133 = PHI <ivtmp_132(7), 4(5)>
  # DEBUG y => y_88
  # DEBUG src => src_86
  # DEBUG p => src_86
  # DEBUG D#18 => src_86 + 4
  # DEBUG p => D#18
  MEM[(uint32_t *)src_86] = dc0_47;
  # DEBUG p => D#18 + 4
  MEM[(uint32_t *)src_86 + 4B] = dc1_51;
  src_64 = src_86 + 32;
  # DEBUG src => src_64
  y_65 = y_88 + 1;
  # DEBUG y => y_65
  # DEBUG y => y_65
  # DEBUG src => src_64
  ivtmp_132 = ivtmp_133 - 1;
  if (ivtmp_132 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  src_136 = src_14(D) + 128;

  <bb 9>:
  # src_87 = PHI <src_136(8), src_68(10)>
  # y_89 = PHI <0(8), y_69(10)>
  # ivtmp_135 = PHI <4(8), ivtmp_134(10)>
  # DEBUG y => y_89
  # DEBUG src => src_87
  # DEBUG p => src_87
  # DEBUG D#17 => src_87 + 4
  # DEBUG p => D#17
  MEM[(uint32_t *)src_87] = dc2_55;
  # DEBUG p => D#17 + 4
  MEM[(uint32_t *)src_87 + 4B] = dc3_60;
  src_68 = src_87 + 32;
  # DEBUG src => src_68
  y_69 = y_89 + 1;
  # DEBUG y => y_69
  # DEBUG y => y_69
  # DEBUG src => src_68
  ivtmp_134 = ivtmp_135 - 1;
  if (ivtmp_134 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  goto <bb 9>;

  <bb 11>:
  return;

}



;; Function predict_8x8c_h (predict_8x8c_h, funcdef_no=126, decl_uid=5912, cgraph_uid=126, symbol_order=169)


Analyzing loop at common/predict.c:282
common/predict.c:282:5: note: ===== analyze_loop_nest =====
common/predict.c:282:5: note: === vect_analyze_loop_form ===
common/predict.c:282:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:282:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint8_t *)src_17 + -1B]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: -1(OVF)
	step: 32
	aligned to: 128
	base_object: *src_4(D)
	Access function 0: {-1B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_17]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {0B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_17 + 4B]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {4B, +, 32}_1
common/predict.c:282:5: note: got vectype for stmt: _6 = MEM[(uint8_t *)src_17 + -1B];
vector(16) unsigned char
common/predict.c:282:5: note: got vectype for stmt: MEM[(uint32_t *)src_17] = v_9;
vector(4) unsigned int
common/predict.c:282:5: note: got vectype for stmt: MEM[(uint32_t *)src_17 + 4B] = v_9;
vector(4) unsigned int
common/predict.c:282:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:282:5: note: Analyze phi: src_17 = PHI <src_12(4), src_4(D)(2)>

common/predict.c:282:5: note: Access function of PHI: {src_4(D), +, 32}_1
common/predict.c:282:5: note: step: 32,  init: src_4(D)
common/predict.c:282:5: note: Detected induction.
common/predict.c:282:5: note: Analyze phi: i_18 = PHI <i_13(4), 0(2)>

common/predict.c:282:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:282:5: note: step: 1,  init: 0
common/predict.c:282:5: note: Detected induction.
common/predict.c:282:5: note: Analyze phi: .MEM_19 = PHI <.MEM_11(4), .MEM_5(D)(2)>

common/predict.c:282:5: note: Analyze phi: ivtmp_16 = PHI <ivtmp_15(4), 8(2)>

common/predict.c:282:5: note: Access function of PHI: {8, +, 4294967295}_1
common/predict.c:282:5: note: step: 4294967295,  init: 8
common/predict.c:282:5: note: Detected induction.
common/predict.c:282:5: note: === vect_pattern_recog ===
common/predict.c:282:5: note: vect_is_simple_use: operand _7
common/predict.c:282:5: note: def_stmt: _7 = (int) _6;
common/predict.c:282:5: note: type of def: 3.
common/predict.c:282:5: note: vect_is_simple_use: operand _6
common/predict.c:282:5: note: def_stmt: _6 = MEM[(uint8_t *)src_17 + -1B];
common/predict.c:282:5: note: type of def: 3.
common/predict.c:282:5: note: vect_is_simple_use: operand 16843009
common/predict.c:282:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:282:5: note: Detected interleaving MEM[(uint32_t *)src_17] and MEM[(uint32_t *)src_17 + 4B]
common/predict.c:282:5: note: Detected single element interleaving MEM[(uint8_t *)src_17 + -1B] step 32
common/predict.c:282:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:282:5: note: interleaved store with gaps
common/predict.c:282:5: note: not vectorized: complicated access pattern.
common/predict.c:282:5: note: bad data access.
common/predict.c:278:13: note: vectorized 0 loops in function.
predict_8x8c_h (uint8_t * src)
{
  uint32_t v;
  int i;
  unsigned char _6;
  int _7;
  int _8;
  unsigned int ivtmp_15;
  unsigned int ivtmp_16;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG src => src_4(D)

  <bb 3>:
  # src_17 = PHI <src_12(4), src_4(D)(2)>
  # i_18 = PHI <i_13(4), 0(2)>
  # ivtmp_16 = PHI <ivtmp_15(4), 8(2)>
  # DEBUG i => i_18
  # DEBUG src => src_17
  _6 = MEM[(uint8_t *)src_17 + -1B];
  _7 = (int) _6;
  _8 = _7 * 16843009;
  v_9 = (uint32_t) _8;
  # DEBUG v => v_9
  # DEBUG p => src_17
  # DEBUG D#19 => src_17 + 4
  # DEBUG p => D#19
  MEM[(uint32_t *)src_17] = v_9;
  # DEBUG p => D#19 + 4
  MEM[(uint32_t *)src_17 + 4B] = v_9;
  src_12 = src_17 + 32;
  # DEBUG src => src_12
  i_13 = i_18 + 1;
  # DEBUG i => i_13
  # DEBUG i => i_13
  # DEBUG src => src_12
  ivtmp_15 = ivtmp_16 - 1;
  if (ivtmp_15 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function predict_8x8c_v (predict_8x8c_v, funcdef_no=127, decl_uid=5921, cgraph_uid=127, symbol_order=170)


Analyzing loop at common/predict.c:297
common/predict.c:297:5: note: ===== analyze_loop_nest =====
common/predict.c:297:5: note: === vect_analyze_loop_form ===
common/predict.c:297:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:297:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_15]
analyze_innermost: success.
	base_address: src_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_5(D)]
	Access function 0: {0B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_15 + 4B]
analyze_innermost: success.
	base_address: src_5(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_5(D)]
	Access function 0: {4B, +, 32}_1
common/predict.c:297:5: note: got vectype for stmt: MEM[(uint32_t *)src_15] = v0_6;
vector(4) unsigned int
common/predict.c:297:5: note: got vectype for stmt: MEM[(uint32_t *)src_15 + 4B] = v1_7;
vector(4) unsigned int
common/predict.c:297:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:297:5: note: Analyze phi: src_15 = PHI <src_10(4), src_5(D)(2)>

common/predict.c:297:5: note: Access function of PHI: {src_5(D), +, 32}_1
common/predict.c:297:5: note: step: 32,  init: src_5(D)
common/predict.c:297:5: note: Detected induction.
common/predict.c:297:5: note: Analyze phi: i_16 = PHI <i_11(4), 0(2)>

common/predict.c:297:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:297:5: note: step: 1,  init: 0
common/predict.c:297:5: note: Detected induction.
common/predict.c:297:5: note: Analyze phi: .MEM_17 = PHI <.MEM_9(4), .MEM_4(D)(2)>

common/predict.c:297:5: note: Analyze phi: ivtmp_2 = PHI <ivtmp_1(4), 8(2)>

common/predict.c:297:5: note: Access function of PHI: {8, +, 4294967295}_1
common/predict.c:297:5: note: step: 4294967295,  init: 8
common/predict.c:297:5: note: Detected induction.
common/predict.c:297:5: note: === vect_pattern_recog ===
common/predict.c:297:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:297:5: note: Detected interleaving MEM[(uint32_t *)src_15] and MEM[(uint32_t *)src_15 + 4B]
common/predict.c:297:5: note: interleaved store with gaps
common/predict.c:297:5: note: not vectorized: complicated access pattern.
common/predict.c:297:5: note: bad data access.
common/predict.c:291:13: note: vectorized 0 loops in function.
predict_8x8c_v (uint8_t * src)
{
  int i;
  uint32_t v1;
  uint32_t v0;
  unsigned int ivtmp_1;
  unsigned int ivtmp_2;

  <bb 2>:
  v0_6 = MEM[(uint32_t *)src_5(D) + -32B];
  # DEBUG v0 => v0_6
  v1_7 = MEM[(uint32_t *)src_5(D) + -28B];
  # DEBUG v1 => v1_7
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG src => src_5(D)

  <bb 3>:
  # src_15 = PHI <src_10(4), src_5(D)(2)>
  # i_16 = PHI <i_11(4), 0(2)>
  # ivtmp_2 = PHI <ivtmp_1(4), 8(2)>
  # DEBUG i => i_16
  # DEBUG src => src_15
  # DEBUG p => src_15
  # DEBUG D#20 => src_15 + 4
  # DEBUG p => D#20
  MEM[(uint32_t *)src_15] = v0_6;
  # DEBUG p => D#20 + 4
  MEM[(uint32_t *)src_15 + 4B] = v1_7;
  src_10 = src_15 + 32;
  # DEBUG src => src_10
  i_11 = i_16 + 1;
  # DEBUG i => i_11
  # DEBUG i => i_11
  # DEBUG src => src_10
  ivtmp_1 = ivtmp_2 - 1;
  if (ivtmp_1 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function predict_8x8c_p (predict_8x8c_p, funcdef_no=128, decl_uid=5931, cgraph_uid=128, symbol_order=171)


Analyzing loop at common/predict.c:325
common/predict.c:325:5: note: ===== analyze_loop_nest =====
common/predict.c:325:5: note: === vect_analyze_loop_form ===
common/predict.c:325:5: note: ===== analyze_loop_nest_1 =====
common/predict.c:325:5: note: === vect_analyze_loop_form ===
common/predict.c:325:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:325:5: note: Considering outer-loop vectorization.
common/predict.c:325:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:325:5: note: === vect_analyze_data_refs ===
Creating dr for *_64
analyze_innermost: success.
	base_address: src_29
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *src_15(D)
	Access function 0: {{0B, +, 32}_2, +, 1}_3
Applying pattern match.pd:49, generic-match.c:4015
common/predict.c:325:5: note: analyze in outer-loop: *src_29
common/predict.c:325:5: note: 	outer base_address: src_15(D)
	outer offset from base address: 0
	outer constant offset from base address: 0
	outer step: 32
	outer aligned to: 128
common/predict.c:325:5: note: got vectype for stmt: *_64 = iftmp.15_77;
vector(16) unsigned char
common/predict.c:325:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:325:5: note: Analyze phi: src_29 = PHI <src_70(9), src_15(D)(5)>

common/predict.c:325:5: note: Access function of PHI: {src_15(D), +, 32}_2
common/predict.c:325:5: note: step: 32,  init: src_15(D)
common/predict.c:325:5: note: Detected induction.
common/predict.c:325:5: note: Analyze phi: y_91 = PHI <y_72(9), 0(5)>

common/predict.c:325:5: note: Access function of PHI: {0, +, 1}_2
common/predict.c:325:5: note: step: 1,  init: 0
common/predict.c:325:5: note: Detected induction.
common/predict.c:325:5: note: Analyze phi: pix_94 = PHI <pix_71(9), pix_62(5)>

common/predict.c:325:5: note: Access function of PHI: {pix_62, +, c_57}_2
common/predict.c:325:5: note: step: c_57,  init: pix_62
common/predict.c:325:5: note: Detected induction.
common/predict.c:325:5: note: Analyze phi: .MEM_97 = PHI <.MEM_67(9), .MEM_17(D)(5)>

common/predict.c:325:5: note: Analyze phi: ivtmp_149 = PHI <ivtmp_148(9), 8(5)>

common/predict.c:325:5: note: Access function of PHI: {8, +, 4294967295}_2
common/predict.c:325:5: note: step: 4294967295,  init: 8
common/predict.c:325:5: note: Detected induction.
common/predict.c:325:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:325:5: note: Analyze phi: x_78 = PHI <x_69(6), 0(10)>

common/predict.c:325:5: note: Access function of PHI: {0, +, 1}_3
common/predict.c:325:5: note: step: 1,  init: 0
common/predict.c:325:5: note: Detected induction.
common/predict.c:325:5: note: Analyze phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:325:5: note: Access function of PHI: {pix_94, +, b_54}_3
common/predict.c:325:5: note: step: b_54,  init: pix_94
common/predict.c:325:5: note: Analyze phi: .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>

common/predict.c:325:5: note: Analyze phi: ivtmp_151 = PHI <ivtmp_150(6), 8(10)>

common/predict.c:325:5: note: Access function of PHI: {8, +, 4294967295}_3
common/predict.c:325:5: note: step: 4294967295,  init: 8
common/predict.c:325:5: note: Detected induction.
common/predict.c:325:5: note: Analyze phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:325:5: note: reduction used in loop.
common/predict.c:325:5: note: Unknown def-use cycle pattern.
common/predict.c:325:5: note: === vect_pattern_recog ===
common/predict.c:325:5: note: vect_is_simple_use: operand _73
common/predict.c:325:5: note: def_stmt: _73 = -_65;
common/predict.c:325:5: note: type of def: 3.
common/predict.c:325:5: note: vect_is_simple_use: operand iftmp.15_75
common/predict.c:325:5: note: def_stmt: iftmp.15_75 = (unsigned char) _74;
common/predict.c:325:5: note: type of def: 3.
common/predict.c:325:5: note: vect_is_simple_use: operand _74
common/predict.c:325:5: note: def_stmt: _74 = _73 >> 31;
common/predict.c:325:5: note: type of def: 3.
common/predict.c:325:5: note: vect_is_simple_use: operand iftmp.15_76
common/predict.c:325:5: note: def_stmt: iftmp.15_76 = (unsigned char) _65;
common/predict.c:325:5: note: type of def: 3.
common/predict.c:325:5: note: vect_is_simple_use: operand _65
common/predict.c:325:5: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:325:5: note: type of def: 3.
common/predict.c:325:5: note: vect_recog_mixed_size_cond_pattern: detected:
common/predict.c:325:5: note: pattern recognized: patt_144 = (unsigned char) patt_145;
common/predict.c:325:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:325:5: note: grouped access in outer loop.
common/predict.c:325:5: note: not vectorized: complicated access pattern.
common/predict.c:325:5: note: bad data access.

Analyzing loop at common/predict.c:328
common/predict.c:328:9: note: ===== analyze_loop_nest =====
common/predict.c:328:9: note: === vect_analyze_loop_form ===
common/predict.c:328:9: note: === get_loop_niters ===
common/predict.c:328:9: note: === vect_analyze_data_refs ===
Creating dr for *_64
analyze_innermost: success.
	base_address: src_29
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *src_29
	Access function 0: {0B, +, 1}_3
common/predict.c:328:9: note: got vectype for stmt: *_64 = iftmp.15_77;
vector(16) unsigned char
common/predict.c:328:9: note: === vect_analyze_scalar_cycles ===
common/predict.c:328:9: note: Analyze phi: x_78 = PHI <x_69(6), 0(10)>

common/predict.c:328:9: note: Access function of PHI: {0, +, 1}_3
common/predict.c:328:9: note: step: 1,  init: 0
common/predict.c:328:9: note: Detected induction.
common/predict.c:328:9: note: Analyze phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:328:9: note: Access function of PHI: {pix_94, +, b_54}_3
common/predict.c:328:9: note: step: b_54,  init: pix_94
common/predict.c:328:9: note: Detected induction.
common/predict.c:328:9: note: Analyze phi: .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>

common/predict.c:328:9: note: Analyze phi: ivtmp_151 = PHI <ivtmp_150(6), 8(10)>

common/predict.c:328:9: note: Access function of PHI: {8, +, 4294967295}_3
common/predict.c:328:9: note: step: 4294967295,  init: 8
common/predict.c:328:9: note: Detected induction.
common/predict.c:328:9: note: === vect_pattern_recog ===
common/predict.c:328:9: note: vect_is_simple_use: operand _73
common/predict.c:328:9: note: def_stmt: _73 = -_65;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: vect_is_simple_use: operand iftmp.15_75
common/predict.c:328:9: note: def_stmt: iftmp.15_75 = (unsigned char) _74;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: vect_is_simple_use: operand _74
common/predict.c:328:9: note: def_stmt: _74 = _73 >> 31;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: vect_is_simple_use: operand iftmp.15_76
common/predict.c:328:9: note: def_stmt: iftmp.15_76 = (unsigned char) _65;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: vect_is_simple_use: operand _65
common/predict.c:328:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: vect_recog_mixed_size_cond_pattern: detected:
common/predict.c:328:9: note: pattern recognized: patt_143 = (unsigned char) patt_144;
common/predict.c:328:9: note: === vect_analyze_data_ref_accesses ===
common/predict.c:328:9: note: === vect_mark_stmts_to_be_vectorized ===
common/predict.c:328:9: note: init: phi relevant? x_78 = PHI <x_69(6), 0(10)>
common/predict.c:328:9: note: init: phi relevant? pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:328:9: note: init: phi relevant? .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>
common/predict.c:328:9: note: init: phi relevant? ivtmp_151 = PHI <ivtmp_150(6), 8(10)>
common/predict.c:328:9: note: init: stmt relevant? # DEBUG pix => NULL
common/predict.c:328:9: note: init: stmt relevant? # DEBUG x => NULL
common/predict.c:328:9: note: init: stmt relevant? _63 = (sizetype) x_78;
common/predict.c:328:9: note: init: stmt relevant? _64 = src_29 + _63;
common/predict.c:328:9: note: init: stmt relevant? _65 = pix_95 >> 5;
common/predict.c:328:9: note: init: stmt relevant? # DEBUG x => NULL
common/predict.c:328:9: note: init: stmt relevant? _66 = _65 & -256;
common/predict.c:328:9: note: init: stmt relevant? _73 = -_65;
common/predict.c:328:9: note: init: stmt relevant? _74 = _73 >> 31;
common/predict.c:328:9: note: init: stmt relevant? iftmp.15_75 = (unsigned char) _74;
common/predict.c:328:9: note: init: stmt relevant? iftmp.15_76 = (unsigned char) _65;
common/predict.c:328:9: note: init: stmt relevant? iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
common/predict.c:328:9: note: init: stmt relevant? # DEBUG x => NULL
common/predict.c:328:9: note: init: stmt relevant? *_64 = iftmp.15_77;
common/predict.c:328:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: init: stmt relevant? pix_68 = b_54 + pix_95;
common/predict.c:328:9: note: init: stmt relevant? # DEBUG pix => pix_68
common/predict.c:328:9: note: init: stmt relevant? x_69 = x_78 + 1;
common/predict.c:328:9: note: init: stmt relevant? # DEBUG x => x_69
common/predict.c:328:9: note: init: stmt relevant? # DEBUG pix => pix_68
common/predict.c:328:9: note: init: stmt relevant? # DEBUG x => x_69
common/predict.c:328:9: note: init: stmt relevant? ivtmp_150 = ivtmp_151 - 1;
common/predict.c:328:9: note: init: stmt relevant? if (ivtmp_150 != 0)
common/predict.c:328:9: note: worklist: examine stmt: *_64 = iftmp.15_77;
common/predict.c:328:9: note: vect_is_simple_use: operand iftmp.15_77
common/predict.c:328:9: note: def_stmt: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: last stmt in pattern. don't mark relevant/live.
common/predict.c:328:9: note: worklist: examine stmt: patt_143 = (unsigned char) patt_144;
common/predict.c:328:9: note: vect_is_simple_use: operand patt_144
common/predict.c:328:9: note: def_stmt: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: worklist: examine stmt: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:328:9: note: vect_is_simple_use: operand _66
common/predict.c:328:9: note: def_stmt: _66 = _65 & -256;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: vect_is_simple_use: operand 0
common/predict.c:328:9: note: vect_is_simple_use: operand _74
common/predict.c:328:9: note: def_stmt: _74 = _73 >> 31;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: vect_is_simple_use: operand _65
common/predict.c:328:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: worklist: examine stmt: _65 = pix_95 >> 5;
common/predict.c:328:9: note: vect_is_simple_use: operand pix_95
common/predict.c:328:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:328:9: note: type of def: 4.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: worklist: examine stmt: pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:328:9: note: vect_is_simple_use: operand pix_68
common/predict.c:328:9: note: def_stmt: pix_68 = b_54 + pix_95;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: vect_is_simple_use: operand pix_94
common/predict.c:328:9: note: def_stmt: pix_94 = PHI <pix_71(9), pix_62(5)>
common/predict.c:328:9: note: type of def: 2.
common/predict.c:328:9: note: def_stmt is out of loop.
common/predict.c:328:9: note: worklist: examine stmt: pix_68 = b_54 + pix_95;
common/predict.c:328:9: note: vect_is_simple_use: operand b_54
common/predict.c:328:9: note: def_stmt: b_54 = _53 >> 5;
common/predict.c:328:9: note: type of def: 2.
common/predict.c:328:9: note: def_stmt is out of loop.
common/predict.c:328:9: note: vect_is_simple_use: operand pix_95
common/predict.c:328:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:328:9: note: type of def: 4.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: already marked relevant/live.
common/predict.c:328:9: note: worklist: examine stmt: _74 = _73 >> 31;
common/predict.c:328:9: note: vect_is_simple_use: operand _73
common/predict.c:328:9: note: def_stmt: _73 = -_65;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: worklist: examine stmt: _73 = -_65;
common/predict.c:328:9: note: vect_is_simple_use: operand _65
common/predict.c:328:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: already marked relevant/live.
common/predict.c:328:9: note: worklist: examine stmt: _66 = _65 & -256;
common/predict.c:328:9: note: vect_is_simple_use: operand _65
common/predict.c:328:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: mark relevant 4, live 0.
common/predict.c:328:9: note: already marked relevant/live.
common/predict.c:328:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: *_64 = iftmp.15_77;
  stmt_b: *_64 = iftmp.15_77;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_3)
  (chrec_b = {0B, +, 1}_3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/predict.c:328:9: note: === vect_determine_vectorization_factor ===
common/predict.c:328:9: note: ==> examining phi: x_78 = PHI <x_69(6), 0(10)>

common/predict.c:328:9: note: ==> examining phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: nunits = 4
common/predict.c:328:9: note: ==> examining phi: .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>

common/predict.c:328:9: note: ==> examining phi: ivtmp_151 = PHI <ivtmp_150(6), 8(10)>

common/predict.c:328:9: note: ==> examining statement: # DEBUG pix => NULL

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: # DEBUG x => NULL

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: _63 = (sizetype) x_78;

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: _64 = src_29 + _63;

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: _65 = pix_95 >> 5;

common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: nunits = 4
common/predict.c:328:9: note: ==> examining statement: # DEBUG x => NULL

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: _66 = _65 & -256;

common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: nunits = 4
common/predict.c:328:9: note: ==> examining statement: _73 = -_65;

common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: nunits = 4
common/predict.c:328:9: note: ==> examining statement: _74 = _73 >> 31;

common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: nunits = 4
common/predict.c:328:9: note: ==> examining statement: iftmp.15_75 = (unsigned char) _74;

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: iftmp.15_76 = (unsigned char) _65;

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;

common/predict.c:328:9: note: ==> examining pattern statement: patt_143 = (unsigned char) patt_144;

common/predict.c:328:9: note: ==> examining pattern def stmt: patt_144 = _66 != 0 ? _74 : _65;

common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: nunits = 4
common/predict.c:328:9: note: ==> examining statement: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;

common/predict.c:328:9: note: ==> examining pattern statement: patt_143 = (unsigned char) patt_144;

common/predict.c:328:9: note: get vectype for scalar type:  unsigned char
common/predict.c:328:9: note: vectype: vector(16) unsigned char
common/predict.c:328:9: note: nunits = 16
common/predict.c:328:9: note: ==> examining statement: # DEBUG x => NULL

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: *_64 = iftmp.15_77;

common/predict.c:328:9: note: get vectype for scalar type:  uint8_t
common/predict.c:328:9: note: vectype: vector(16) unsigned char
common/predict.c:328:9: note: nunits = 16
common/predict.c:328:9: note: ==> examining statement: pix_68 = b_54 + pix_95;

common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: get vectype for scalar type:  int
common/predict.c:328:9: note: vectype: vector(4) int
common/predict.c:328:9: note: nunits = 4
common/predict.c:328:9: note: ==> examining statement: # DEBUG pix => pix_68

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: x_69 = x_78 + 1;

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: # DEBUG x => x_69

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: # DEBUG pix => pix_68

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: # DEBUG x => x_69

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: ivtmp_150 = ivtmp_151 - 1;

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: ==> examining statement: if (ivtmp_150 != 0)

common/predict.c:328:9: note: skip.
common/predict.c:328:9: note: vectorization factor = 16
common/predict.c:328:9: note: === vect_analyze_data_refs_alignment ===
common/predict.c:328:9: note: vect_compute_data_ref_alignment:
common/predict.c:328:9: note: can't force alignment of ref: *_64
common/predict.c:328:9: note: === vect_prune_runtime_alias_test_list ===
common/predict.c:328:9: note: === vect_enhance_data_refs_alignment ===
common/predict.c:328:9: note: Unknown misalignment, is_packed = 0
common/predict.c:328:9: note: vect_can_advance_ivs_p:
common/predict.c:328:9: note: Analyze phi: x_78 = PHI <x_69(6), 0(10)>

common/predict.c:328:9: note: Analyze phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:328:9: note: Analyze phi: .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>

common/predict.c:328:9: note: virtual phi. skip.
common/predict.c:328:9: note: Analyze phi: ivtmp_151 = PHI <ivtmp_150(6), 8(10)>

common/predict.c:328:9: note: Vectorizing an unaligned access.
common/predict.c:328:9: note: === vect_analyze_slp ===
common/predict.c:328:9: note: === vect_make_slp_decision ===
common/predict.c:328:9: note: === vect_detect_hybrid_slp ===
common/predict.c:328:9: note: === vect_analyze_loop_operations ===
common/predict.c:328:9: note: examining phi: x_78 = PHI <x_69(6), 0(10)>

common/predict.c:328:9: note: examining phi: pix_95 = PHI <pix_68(6), pix_94(10)>

common/predict.c:328:9: note: === vectorizable_induction ===
common/predict.c:328:9: note: vect_model_induction_cost: inside_cost = 4, prologue_cost = 2 .
common/predict.c:328:9: note: examining phi: .MEM_96 = PHI <.MEM_67(6), .MEM_97(10)>

common/predict.c:328:9: note: examining phi: ivtmp_151 = PHI <ivtmp_150(6), 8(10)>

common/predict.c:328:9: note: ==> examining statement: # DEBUG pix => NULL
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: # DEBUG x => NULL
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: _63 = (sizetype) x_78;
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: _64 = src_29 + _63;
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: _65 = pix_95 >> 5;
common/predict.c:328:9: note: vect_is_simple_use: operand pix_95
common/predict.c:328:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:328:9: note: type of def: 4.
common/predict.c:328:9: note: vect_is_simple_use: operand 5
common/predict.c:328:9: note: vector/scalar shift/rotate found.
common/predict.c:328:9: note: === vectorizable_shift ===
common/predict.c:328:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/predict.c:328:9: note: ==> examining statement: # DEBUG x => NULL
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: _66 = _65 & -256;
common/predict.c:328:9: note: vect_is_simple_use: operand _65
common/predict.c:328:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: vect_is_simple_use: operand -256
common/predict.c:328:9: note: === vectorizable_operation ===
common/predict.c:328:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/predict.c:328:9: note: ==> examining statement: _73 = -_65;
common/predict.c:328:9: note: vect_is_simple_use: operand _65
common/predict.c:328:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: === vectorizable_operation ===
common/predict.c:328:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/predict.c:328:9: note: ==> examining statement: _74 = _73 >> 31;
common/predict.c:328:9: note: vect_is_simple_use: operand _73
common/predict.c:328:9: note: def_stmt: _73 = -_65;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: vect_is_simple_use: operand 31
common/predict.c:328:9: note: vector/scalar shift/rotate found.
common/predict.c:328:9: note: === vectorizable_shift ===
common/predict.c:328:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/predict.c:328:9: note: ==> examining statement: iftmp.15_75 = (unsigned char) _74;
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: iftmp.15_76 = (unsigned char) _65;
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
common/predict.c:328:9: note: ==> examining pattern statement: patt_143 = (unsigned char) patt_144;
common/predict.c:328:9: note: ==> examining pattern def statement: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:328:9: note: ==> examining statement: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:328:9: note: vect_is_simple_use: operand _66 != 0
common/predict.c:328:9: note: not ssa-name.
common/predict.c:328:9: note: use not simple.
common/predict.c:328:9: note: vect_is_simple_use: operand _66
common/predict.c:328:9: note: def_stmt: _66 = _65 & -256;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: vect_is_simple_use: operand _74
common/predict.c:328:9: note: def_stmt: _74 = _73 >> 31;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: vect_is_simple_use: operand _65
common/predict.c:328:9: note: def_stmt: _65 = pix_95 >> 5;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: vect_is_simple_use: operand patt_144
common/predict.c:328:9: note: def_stmt: patt_144 = _66 != 0 ? _74 : _65;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: === vectorizable_conversion ===
common/predict.c:328:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/predict.c:328:9: note: ==> examining statement: # DEBUG x => NULL
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: *_64 = iftmp.15_77;
common/predict.c:328:9: note: vect_is_simple_use: operand iftmp.15_77
common/predict.c:328:9: note: def_stmt: iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
common/predict.c:328:9: note: type of def: 3.
common/predict.c:328:9: note: vect_model_store_cost: unaligned supported by hardware.
common/predict.c:328:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/predict.c:328:9: note: ==> examining statement: pix_68 = b_54 + pix_95;
common/predict.c:328:9: note: vect_is_simple_use: operand b_54
common/predict.c:328:9: note: def_stmt: b_54 = _53 >> 5;
common/predict.c:328:9: note: type of def: 2.
common/predict.c:328:9: note: vect_is_simple_use: operand pix_95
common/predict.c:328:9: note: def_stmt: pix_95 = PHI <pix_68(6), pix_94(10)>
common/predict.c:328:9: note: type of def: 4.
common/predict.c:328:9: note: === vectorizable_operation ===
common/predict.c:328:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/predict.c:328:9: note: ==> examining statement: # DEBUG pix => pix_68
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: x_69 = x_78 + 1;
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: # DEBUG x => x_69
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: # DEBUG pix => pix_68
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: # DEBUG x => x_69
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: ivtmp_150 = ivtmp_151 - 1;
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: ==> examining statement: if (ivtmp_150 != 0)
common/predict.c:328:9: note: irrelevant.
common/predict.c:328:9: note: vectorization_factor = 16, niters = 8
common/predict.c:328:9: note: not vectorized: iteration count too small.
common/predict.c:328:9: note: not vectorized: iteration count smaller than vectorization factor.
common/predict.c:328:9: note: bad operation or unsupported loop bound.

Analyzing loop at common/predict.c:314
common/predict.c:314:5: note: ===== analyze_loop_nest =====
common/predict.c:314:5: note: === vect_analyze_loop_form ===
common/predict.c:314:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/predict.c:314:5: note: === vect_analyze_data_refs ===
Creating dr for *_16
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_15(D)
	offset from base address: 0
	constant offset from base address: -28(OVF)
	step: 1
	aligned to: 128
	base_object: *src_15(D)
	Access function 0: {-28B, +, 1}_1
Creating dr for *_23
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_15(D)
	offset from base address: 0
	constant offset from base address: -30(OVF)
	step: -1(OVF)
	aligned to: 128
	base_object: *src_15(D)
	Access function 0: {-30B, +, 18446744073709551615}_1
Creating dr for *_34
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_15(D)
	offset from base address: 0
	constant offset from base address: 127
	step: 32
	aligned to: 128
	base_object: *src_15(D)
	Access function 0: {127B, +, 32}_1
Creating dr for *_40
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_15(D)
	offset from base address: 0
	constant offset from base address: 63
	step: -32(OVF)
	aligned to: 128
	base_object: *src_15(D)
	Access function 0: {63B, +, 18446744073709551584}_1
common/predict.c:314:5: note: got vectype for stmt: _18 = *_16;
vector(16) unsigned char
common/predict.c:314:5: note: got vectype for stmt: _24 = *_23;
vector(16) unsigned char
common/predict.c:314:5: note: got vectype for stmt: _35 = *_34;
vector(16) unsigned char
common/predict.c:314:5: note: got vectype for stmt: _41 = *_40;
vector(16) unsigned char
common/predict.c:314:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:314:5: note: Analyze phi: i_30 = PHI <i_11(4), 0(2)>

common/predict.c:314:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:314:5: note: step: 1,  init: 0
common/predict.c:314:5: note: Detected induction.
common/predict.c:314:5: note: Analyze phi: H_92 = PHI <H_28(4), 0(2)>

common/predict.c:314:5: note: Access function of PHI: {0, +, _27}_1
common/predict.c:314:5: note: step: _27,  init: 0
common/predict.c:314:5: note: step unknown.
common/predict.c:314:5: note: Analyze phi: V_93 = PHI <V_45(4), 0(2)>

common/predict.c:314:5: note: Access function of PHI: {0, +, _44}_1
common/predict.c:314:5: note: step: _44,  init: 0
common/predict.c:314:5: note: step unknown.
common/predict.c:314:5: note: Analyze phi: ivtmp_147 = PHI <ivtmp_146(4), 4(2)>

common/predict.c:314:5: note: Access function of PHI: {4, +, 4294967295}_1
common/predict.c:314:5: note: step: 4294967295,  init: 4
common/predict.c:314:5: note: Detected induction.
common/predict.c:314:5: note: Analyze phi: V_93 = PHI <V_45(4), 0(2)>

common/predict.c:314:5: note: detected reduction: V_45 = _44 + V_93;

common/predict.c:314:5: note: Detected reduction.
common/predict.c:314:5: note: Analyze phi: H_92 = PHI <H_28(4), 0(2)>

common/predict.c:314:5: note: detected reduction: H_28 = _27 + H_92;

common/predict.c:314:5: note: Detected reduction.
common/predict.c:314:5: note: === vect_pattern_recog ===
common/predict.c:314:5: note: vect_is_simple_use: operand i_11
common/predict.c:314:5: note: def_stmt: i_11 = i_30 + 1;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand _27
common/predict.c:314:5: note: def_stmt: _27 = i_11 * _26;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand _27
common/predict.c:314:5: note: def_stmt: _27 = i_11 * _26;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand i_11
common/predict.c:314:5: note: def_stmt: i_11 = i_30 + 1;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand _27
common/predict.c:314:5: note: def_stmt: _27 = i_11 * _26;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand _12
common/predict.c:314:5: note: def_stmt: _12 = i_30 + 4;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand _20
common/predict.c:314:5: note: def_stmt: _20 = 2 - i_30;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand i_11
common/predict.c:314:5: note: def_stmt: i_11 = i_30 + 1;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand _44
common/predict.c:314:5: note: def_stmt: _44 = i_11 * _43;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand _44
common/predict.c:314:5: note: def_stmt: _44 = i_11 * _43;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand i_11
common/predict.c:314:5: note: def_stmt: i_11 = i_30 + 1;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand _44
common/predict.c:314:5: note: def_stmt: _44 = i_11 * _43;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:314:5: note: Detected single element interleaving *_34 step 32
common/predict.c:314:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:314:5: note: Detected single element interleaving *_40 step -32(OVF)
common/predict.c:314:5: note: Data access with gaps requires scalar epilogue loop
common/predict.c:314:5: note: === vect_mark_stmts_to_be_vectorized ===
common/predict.c:314:5: note: init: phi relevant? i_30 = PHI <i_11(4), 0(2)>
common/predict.c:314:5: note: init: phi relevant? H_92 = PHI <H_28(4), 0(2)>
common/predict.c:314:5: note: init: phi relevant? V_93 = PHI <V_45(4), 0(2)>
common/predict.c:314:5: note: init: phi relevant? ivtmp_147 = PHI <ivtmp_146(4), 4(2)>
common/predict.c:314:5: note: init: stmt relevant? # DEBUG V => V_93
common/predict.c:314:5: note: init: stmt relevant? # DEBUG H => H_92
common/predict.c:314:5: note: init: stmt relevant? # DEBUG i => i_30
common/predict.c:314:5: note: init: stmt relevant? i_11 = i_30 + 1;
common/predict.c:314:5: note: init: stmt relevant? _12 = i_30 + 4;
common/predict.c:314:5: note: init: stmt relevant? _13 = (sizetype) _12;
common/predict.c:314:5: note: init: stmt relevant? _14 = _13 + 18446744073709551584;
common/predict.c:314:5: note: init: stmt relevant? _16 = src_15(D) + _14;
common/predict.c:314:5: note: init: stmt relevant? _18 = *_16;
common/predict.c:314:5: note: init: stmt relevant? _19 = (int) _18;
common/predict.c:314:5: note: init: stmt relevant? _20 = 2 - i_30;
common/predict.c:314:5: note: init: stmt relevant? _21 = (sizetype) _20;
common/predict.c:314:5: note: init: stmt relevant? _22 = _21 + 18446744073709551584;
common/predict.c:314:5: note: init: stmt relevant? _23 = src_15(D) + _22;
common/predict.c:314:5: note: init: stmt relevant? _24 = *_23;
common/predict.c:314:5: note: init: stmt relevant? _25 = (int) _24;
common/predict.c:314:5: note: init: stmt relevant? _26 = _19 - _25;
common/predict.c:314:5: note: init: stmt relevant? _27 = i_11 * _26;
common/predict.c:314:5: note: init: stmt relevant? H_28 = _27 + H_92;
common/predict.c:314:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:314:5: note: mark relevant 0, live 1.
common/predict.c:314:5: note: init: stmt relevant? # DEBUG H => H_28
common/predict.c:314:5: note: init: stmt relevant? _31 = _12 * 32;
common/predict.c:314:5: note: init: stmt relevant? _32 = _31 + -1;
common/predict.c:314:5: note: init: stmt relevant? _33 = (sizetype) _32;
common/predict.c:314:5: note: init: stmt relevant? _34 = src_15(D) + _33;
common/predict.c:314:5: note: init: stmt relevant? _35 = *_34;
common/predict.c:314:5: note: init: stmt relevant? _36 = (int) _35;
common/predict.c:314:5: note: init: stmt relevant? _37 = _20 * 32;
common/predict.c:314:5: note: init: stmt relevant? _38 = _37 + -1;
common/predict.c:314:5: note: init: stmt relevant? _39 = (sizetype) _38;
common/predict.c:314:5: note: init: stmt relevant? _40 = src_15(D) + _39;
common/predict.c:314:5: note: init: stmt relevant? _41 = *_40;
common/predict.c:314:5: note: init: stmt relevant? _42 = (int) _41;
common/predict.c:314:5: note: init: stmt relevant? _43 = _36 - _42;
common/predict.c:314:5: note: init: stmt relevant? _44 = i_11 * _43;
common/predict.c:314:5: note: init: stmt relevant? V_45 = _44 + V_93;
common/predict.c:314:5: note: vec_stmt_relevant_p: used out of loop.
common/predict.c:314:5: note: mark relevant 0, live 1.
common/predict.c:314:5: note: init: stmt relevant? # DEBUG V => V_45
common/predict.c:314:5: note: init: stmt relevant? # DEBUG i => i_11
common/predict.c:314:5: note: init: stmt relevant? # DEBUG V => V_45
common/predict.c:314:5: note: init: stmt relevant? # DEBUG H => H_28
common/predict.c:314:5: note: init: stmt relevant? # DEBUG i => i_11
common/predict.c:314:5: note: init: stmt relevant? ivtmp_146 = ivtmp_147 - 1;
common/predict.c:314:5: note: init: stmt relevant? if (ivtmp_146 != 0)
common/predict.c:314:5: note: worklist: examine stmt: V_45 = _44 + V_93;
common/predict.c:314:5: note: vect_is_simple_use: operand _44
common/predict.c:314:5: note: def_stmt: _44 = i_11 * _43;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: vect_is_simple_use: operand V_93
common/predict.c:314:5: note: def_stmt: V_93 = PHI <V_45(4), 0(2)>
common/predict.c:314:5: note: type of def: 5.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: worklist: examine stmt: V_93 = PHI <V_45(4), 0(2)>
common/predict.c:314:5: note: vect_is_simple_use: operand V_45
common/predict.c:314:5: note: def_stmt: V_45 = _44 + V_93;
common/predict.c:314:5: note: type of def: 5.
common/predict.c:314:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:314:5: note: vect_is_simple_use: operand 0
common/predict.c:314:5: note: worklist: examine stmt: _44 = i_11 * _43;
common/predict.c:314:5: note: vect_is_simple_use: operand i_11
common/predict.c:314:5: note: def_stmt: i_11 = i_30 + 1;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: vect_is_simple_use: operand _43
common/predict.c:314:5: note: def_stmt: _43 = _36 - _42;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: worklist: examine stmt: _43 = _36 - _42;
common/predict.c:314:5: note: vect_is_simple_use: operand _36
common/predict.c:314:5: note: def_stmt: _36 = (int) _35;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: vect_is_simple_use: operand _42
common/predict.c:314:5: note: def_stmt: _42 = (int) _41;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: worklist: examine stmt: _42 = (int) _41;
common/predict.c:314:5: note: vect_is_simple_use: operand _41
common/predict.c:314:5: note: def_stmt: _41 = *_40;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: worklist: examine stmt: _41 = *_40;
common/predict.c:314:5: note: worklist: examine stmt: _36 = (int) _35;
common/predict.c:314:5: note: vect_is_simple_use: operand _35
common/predict.c:314:5: note: def_stmt: _35 = *_34;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: worklist: examine stmt: _35 = *_34;
common/predict.c:314:5: note: worklist: examine stmt: i_11 = i_30 + 1;
common/predict.c:314:5: note: vect_is_simple_use: operand i_30
common/predict.c:314:5: note: def_stmt: i_30 = PHI <i_11(4), 0(2)>
common/predict.c:314:5: note: type of def: 4.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: worklist: examine stmt: i_30 = PHI <i_11(4), 0(2)>
common/predict.c:314:5: note: vect_is_simple_use: operand i_11
common/predict.c:314:5: note: def_stmt: i_11 = i_30 + 1;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: already marked relevant/live.
common/predict.c:314:5: note: vect_is_simple_use: operand 0
common/predict.c:314:5: note: worklist: examine stmt: H_28 = _27 + H_92;
common/predict.c:314:5: note: vect_is_simple_use: operand _27
common/predict.c:314:5: note: def_stmt: _27 = i_11 * _26;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: vect_is_simple_use: operand H_92
common/predict.c:314:5: note: def_stmt: H_92 = PHI <H_28(4), 0(2)>
common/predict.c:314:5: note: type of def: 5.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: worklist: examine stmt: H_92 = PHI <H_28(4), 0(2)>
common/predict.c:314:5: note: vect_is_simple_use: operand H_28
common/predict.c:314:5: note: def_stmt: H_28 = _27 + H_92;
common/predict.c:314:5: note: type of def: 5.
common/predict.c:314:5: note: reduc-stmt defining reduc-phi in the same nest.
common/predict.c:314:5: note: vect_is_simple_use: operand 0
common/predict.c:314:5: note: worklist: examine stmt: _27 = i_11 * _26;
common/predict.c:314:5: note: vect_is_simple_use: operand i_11
common/predict.c:314:5: note: def_stmt: i_11 = i_30 + 1;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: already marked relevant/live.
common/predict.c:314:5: note: vect_is_simple_use: operand _26
common/predict.c:314:5: note: def_stmt: _26 = _19 - _25;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: worklist: examine stmt: _26 = _19 - _25;
common/predict.c:314:5: note: vect_is_simple_use: operand _19
common/predict.c:314:5: note: def_stmt: _19 = (int) _18;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: vect_is_simple_use: operand _25
common/predict.c:314:5: note: def_stmt: _25 = (int) _24;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: worklist: examine stmt: _25 = (int) _24;
common/predict.c:314:5: note: vect_is_simple_use: operand _24
common/predict.c:314:5: note: def_stmt: _24 = *_23;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: worklist: examine stmt: _24 = *_23;
common/predict.c:314:5: note: worklist: examine stmt: _19 = (int) _18;
common/predict.c:314:5: note: vect_is_simple_use: operand _18
common/predict.c:314:5: note: def_stmt: _18 = *_16;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: mark relevant 3, live 0.
common/predict.c:314:5: note: worklist: examine stmt: _18 = *_16;
common/predict.c:314:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _18 = *_16;
  stmt_b: _24 = *_23;
(analyze_overlapping_iterations 
  (chrec_a = {-28B, +, 1}_1)
  (chrec_b = {-30B, +, 18446744073709551615}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
affine-affine test failed: unimplemented.
  (overlaps_a = not known)
  (overlaps_b = not known))
)
  (overlap_iterations_a = not known)
  (overlap_iterations_b = not known))
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _18 = *_16;
  stmt_b: _35 = *_34;
(analyze_overlapping_iterations 
  (chrec_a = {-28B, +, 1}_1)
  (chrec_b = {127B, +, 32}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _18 = *_16;
  stmt_b: _41 = *_40;
(analyze_overlapping_iterations 
  (chrec_a = {-28B, +, 1}_1)
  (chrec_b = {63B, +, 18446744073709551584}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
affine-affine test failed: unimplemented.
  (overlaps_a = not known)
  (overlaps_b = not known))
)
  (overlap_iterations_a = not known)
  (overlap_iterations_b = not known))
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: _35 = *_34;
(analyze_overlapping_iterations 
  (chrec_a = {-30B, +, 18446744073709551615}_1)
  (chrec_b = {127B, +, 32}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
affine-affine test failed: unimplemented.
  (overlaps_a = not known)
  (overlaps_b = not known))
)
  (overlap_iterations_a = not known)
  (overlap_iterations_b = not known))
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: _41 = *_40;
(analyze_overlapping_iterations 
  (chrec_a = {-30B, +, 18446744073709551615}_1)
  (chrec_b = {63B, +, 18446744073709551584}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [3 + 32 * x_1])
  (overlaps_b = [3 + 1 * x_1]))
)
  (overlap_iterations_a = [3 + 32 * x_1])
  (overlap_iterations_b = [3 + 1 * x_1]))
(Dependence relation cannot be represented by distance vector.) 
)
(compute_affine_dependence
  stmt_a: _35 = *_34;
  stmt_b: _41 = *_40;
(analyze_overlapping_iterations 
  (chrec_a = {127B, +, 32}_1)
  (chrec_b = {63B, +, 18446744073709551584}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
affine-affine test failed: unimplemented.
  (overlaps_a = not known)
  (overlaps_b = not known))
)
  (overlap_iterations_a = not known)
  (overlap_iterations_b = not known))
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _18 = *_16;
  stmt_b: _18 = *_16;
(analyze_overlapping_iterations 
  (chrec_a = {-28B, +, 1}_1)
  (chrec_b = {-28B, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: _24 = *_23;
(analyze_overlapping_iterations 
  (chrec_a = {-30B, +, 18446744073709551615}_1)
  (chrec_b = {-30B, +, 18446744073709551615}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _35 = *_34;
  stmt_b: _35 = *_34;
(analyze_overlapping_iterations 
  (chrec_a = {127B, +, 32}_1)
  (chrec_b = {127B, +, 32}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _41 = *_40;
(analyze_overlapping_iterations 
  (chrec_a = {63B, +, 18446744073709551584}_1)
  (chrec_b = {63B, +, 18446744073709551584}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/predict.c:314:5: note: === vect_determine_vectorization_factor ===
common/predict.c:314:5: note: ==> examining phi: i_30 = PHI <i_11(4), 0(2)>

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: nunits = 4
common/predict.c:314:5: note: ==> examining phi: H_92 = PHI <H_28(4), 0(2)>

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: nunits = 4
common/predict.c:314:5: note: ==> examining phi: V_93 = PHI <V_45(4), 0(2)>

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: nunits = 4
common/predict.c:314:5: note: ==> examining phi: ivtmp_147 = PHI <ivtmp_146(4), 4(2)>

common/predict.c:314:5: note: ==> examining statement: # DEBUG V => V_93

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: # DEBUG H => H_92

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: # DEBUG i => i_30

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: i_11 = i_30 + 1;

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: nunits = 4
common/predict.c:314:5: note: ==> examining statement: _12 = i_30 + 4;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _13 = (sizetype) _12;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _14 = _13 + 18446744073709551584;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _16 = src_15(D) + _14;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _18 = *_16;

common/predict.c:314:5: note: get vectype for scalar type:  unsigned char
common/predict.c:314:5: note: vectype: vector(16) unsigned char
common/predict.c:314:5: note: nunits = 16
common/predict.c:314:5: note: ==> examining statement: _19 = (int) _18;

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: get vectype for scalar type:  unsigned char
common/predict.c:314:5: note: vectype: vector(16) unsigned char
common/predict.c:314:5: note: nunits = 16
common/predict.c:314:5: note: ==> examining statement: _20 = 2 - i_30;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _21 = (sizetype) _20;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _22 = _21 + 18446744073709551584;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _23 = src_15(D) + _22;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _24 = *_23;

common/predict.c:314:5: note: get vectype for scalar type:  unsigned char
common/predict.c:314:5: note: vectype: vector(16) unsigned char
common/predict.c:314:5: note: nunits = 16
common/predict.c:314:5: note: ==> examining statement: _25 = (int) _24;

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: get vectype for scalar type:  unsigned char
common/predict.c:314:5: note: vectype: vector(16) unsigned char
common/predict.c:314:5: note: nunits = 16
common/predict.c:314:5: note: ==> examining statement: _26 = _19 - _25;

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: nunits = 4
common/predict.c:314:5: note: ==> examining statement: _27 = i_11 * _26;

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: nunits = 4
common/predict.c:314:5: note: ==> examining statement: H_28 = _27 + H_92;

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: nunits = 4
common/predict.c:314:5: note: ==> examining statement: # DEBUG H => H_28

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _31 = _12 * 32;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _32 = _31 + -1;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _33 = (sizetype) _32;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _34 = src_15(D) + _33;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _35 = *_34;

common/predict.c:314:5: note: get vectype for scalar type:  unsigned char
common/predict.c:314:5: note: vectype: vector(16) unsigned char
common/predict.c:314:5: note: nunits = 16
common/predict.c:314:5: note: ==> examining statement: _36 = (int) _35;

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: get vectype for scalar type:  unsigned char
common/predict.c:314:5: note: vectype: vector(16) unsigned char
common/predict.c:314:5: note: nunits = 16
common/predict.c:314:5: note: ==> examining statement: _37 = _20 * 32;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _38 = _37 + -1;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _39 = (sizetype) _38;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _40 = src_15(D) + _39;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: _41 = *_40;

common/predict.c:314:5: note: get vectype for scalar type:  unsigned char
common/predict.c:314:5: note: vectype: vector(16) unsigned char
common/predict.c:314:5: note: nunits = 16
common/predict.c:314:5: note: ==> examining statement: _42 = (int) _41;

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: get vectype for scalar type:  unsigned char
common/predict.c:314:5: note: vectype: vector(16) unsigned char
common/predict.c:314:5: note: nunits = 16
common/predict.c:314:5: note: ==> examining statement: _43 = _36 - _42;

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: nunits = 4
common/predict.c:314:5: note: ==> examining statement: _44 = i_11 * _43;

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: nunits = 4
common/predict.c:314:5: note: ==> examining statement: V_45 = _44 + V_93;

common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: get vectype for scalar type:  int
common/predict.c:314:5: note: vectype: vector(4) int
common/predict.c:314:5: note: nunits = 4
common/predict.c:314:5: note: ==> examining statement: # DEBUG V => V_45

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: # DEBUG i => i_11

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: # DEBUG V => V_45

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: # DEBUG H => H_28

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: # DEBUG i => i_11

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: ivtmp_146 = ivtmp_147 - 1;

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: ==> examining statement: if (ivtmp_146 != 0)

common/predict.c:314:5: note: skip.
common/predict.c:314:5: note: vectorization factor = 16
common/predict.c:314:5: note: === vect_analyze_data_refs_alignment ===
common/predict.c:314:5: note: vect_compute_data_ref_alignment:
common/predict.c:314:5: note: can't force alignment of ref: *_16
common/predict.c:314:5: note: vect_compute_data_ref_alignment:
common/predict.c:314:5: note: can't force alignment of ref: *_23
common/predict.c:314:5: note: vect_compute_data_ref_alignment:
common/predict.c:314:5: note: can't force alignment of ref: *_34
common/predict.c:314:5: note: vect_compute_data_ref_alignment:
common/predict.c:314:5: note: can't force alignment of ref: *_40
common/predict.c:314:5: note: === vect_prune_runtime_alias_test_list ===
common/predict.c:314:5: note: === vect_enhance_data_refs_alignment ===
common/predict.c:314:5: note: Unknown misalignment, is_packed = 0
common/predict.c:314:5: note: Unknown misalignment, is_packed = 0
common/predict.c:314:5: note: vector alignment may not be reachable
common/predict.c:314:5: note: vect_can_advance_ivs_p:
common/predict.c:314:5: note: Analyze phi: i_30 = PHI <i_11(4), 0(2)>

common/predict.c:314:5: note: Analyze phi: H_92 = PHI <H_28(4), 0(2)>

common/predict.c:314:5: note: reduc phi. skip.
common/predict.c:314:5: note: Analyze phi: V_93 = PHI <V_45(4), 0(2)>

common/predict.c:314:5: note: reduc phi. skip.
common/predict.c:314:5: note: Analyze phi: ivtmp_147 = PHI <ivtmp_146(4), 4(2)>

common/predict.c:314:5: note: Vectorizing an unaligned access.
common/predict.c:314:5: note: Vectorizing an unaligned access.
common/predict.c:314:5: note: Vectorizing an unaligned access.
common/predict.c:314:5: note: Vectorizing an unaligned access.
common/predict.c:314:5: note: === vect_analyze_slp ===
common/predict.c:314:5: note: Build SLP for V_45 = _44 + V_93;

common/predict.c:314:5: note: Build SLP for H_28 = _27 + H_92;

common/predict.c:314:5: note: vect_is_simple_use: operand _44
common/predict.c:314:5: note: def_stmt: _44 = i_11 * _43;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand V_93
common/predict.c:314:5: note: def_stmt: V_93 = PHI <V_45(4), 0(2)>
common/predict.c:314:5: note: type of def: 5.
common/predict.c:314:5: note: vect_is_simple_use: operand _27
common/predict.c:314:5: note: def_stmt: _27 = i_11 * _26;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand H_92
common/predict.c:314:5: note: def_stmt: H_92 = PHI <H_28(4), 0(2)>
common/predict.c:314:5: note: type of def: 5.
common/predict.c:314:5: note: Build SLP for _44 = i_11 * _43;

common/predict.c:314:5: note: Build SLP for _27 = i_11 * _26;

common/predict.c:314:5: note: vect_is_simple_use: operand i_11
common/predict.c:314:5: note: def_stmt: i_11 = i_30 + 1;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand _43
common/predict.c:314:5: note: def_stmt: _43 = _36 - _42;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand i_11
common/predict.c:314:5: note: def_stmt: i_11 = i_30 + 1;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: vect_is_simple_use: operand _26
common/predict.c:314:5: note: def_stmt: _26 = _19 - _25;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: Build SLP for i_11 = i_30 + 1;

common/predict.c:314:5: note: Build SLP for i_11 = i_30 + 1;

common/predict.c:314:5: note: vect_is_simple_use: operand i_30
common/predict.c:314:5: note: def_stmt: i_30 = PHI <i_11(4), 0(2)>
common/predict.c:314:5: note: type of def: 4.
common/predict.c:314:5: note: Build SLP failed: illegal type of def i_30
common/predict.c:314:5: note: === vect_make_slp_decision ===
common/predict.c:314:5: note: === vect_detect_hybrid_slp ===
common/predict.c:314:5: note: === vect_analyze_loop_operations ===
common/predict.c:314:5: note: examining phi: i_30 = PHI <i_11(4), 0(2)>

common/predict.c:314:5: note: === vectorizable_induction ===
common/predict.c:314:5: note: vect_model_induction_cost: inside_cost = 4, prologue_cost = 2 .
common/predict.c:314:5: note: examining phi: H_92 = PHI <H_28(4), 0(2)>

common/predict.c:314:5: note: examining phi: V_93 = PHI <V_45(4), 0(2)>

common/predict.c:314:5: note: examining phi: ivtmp_147 = PHI <ivtmp_146(4), 4(2)>

common/predict.c:314:5: note: ==> examining statement: # DEBUG V => V_93
common/predict.c:314:5: note: irrelevant.
common/predict.c:314:5: note: ==> examining statement: # DEBUG H => H_92
common/predict.c:314:5: note: irrelevant.
common/predict.c:314:5: note: ==> examining statement: # DEBUG i => i_30
common/predict.c:314:5: note: irrelevant.
common/predict.c:314:5: note: ==> examining statement: i_11 = i_30 + 1;
common/predict.c:314:5: note: vect_is_simple_use: operand i_30
common/predict.c:314:5: note: def_stmt: i_30 = PHI <i_11(4), 0(2)>
common/predict.c:314:5: note: type of def: 4.
common/predict.c:314:5: note: vect_is_simple_use: operand 1
common/predict.c:314:5: note: === vectorizable_operation ===
common/predict.c:314:5: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/predict.c:314:5: note: ==> examining statement: _12 = i_30 + 4;
common/predict.c:314:5: note: irrelevant.
common/predict.c:314:5: note: ==> examining statement: _13 = (sizetype) _12;
common/predict.c:314:5: note: irrelevant.
common/predict.c:314:5: note: ==> examining statement: _14 = _13 + 18446744073709551584;
common/predict.c:314:5: note: irrelevant.
common/predict.c:314:5: note: ==> examining statement: _16 = src_15(D) + _14;
common/predict.c:314:5: note: irrelevant.
common/predict.c:314:5: note: ==> examining statement: _18 = *_16;
common/predict.c:314:5: note: vect_is_simple_use: operand *_16
common/predict.c:314:5: note: not ssa-name.
common/predict.c:314:5: note: use not simple.
common/predict.c:314:5: note: vect_is_simple_use: operand *_16
common/predict.c:314:5: note: not ssa-name.
common/predict.c:314:5: note: use not simple.
common/predict.c:314:5: note: vect_model_load_cost: unaligned supported by hardware.
common/predict.c:314:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/predict.c:314:5: note: ==> examining statement: _19 = (int) _18;
common/predict.c:314:5: note: vect_is_simple_use: operand _18
common/predict.c:314:5: note: def_stmt: _18 = *_16;
common/predict.c:314:5: note: type of def: 3.
common/predict.c:314:5: note: === vectorizable_conversion ===
common/predict.c:314:5: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/predict.c:314:5: note: ==> examining statement: _20 = 2 - i_30;
common/predict.c:314:5: note: irrelevant.
common/predict.c:314:5: note: ==> examining statement: _21 = (sizetype) _20;
common/predict.c:314:5: note: irrelevant.
common/predict.c:314:5: note: ==> examining statement: _22 = _21 + 18446744073709551584;
common/predict.c:314:5: note: irrelevant.
common/predict.c:314:5: note: ==> examining statement: _23 = src_15(D) + _22;
common/predict.c:314:5: note: irrelevant.
common/predict.c:314:5: note: ==> examining statement: _24 = *_23;
common/predict.c:314:5: note: vect_is_simple_use: operand *_23
common/predict.c:314:5: note: not ssa-name.
common/predict.c:314:5: note: use not simple.
common/predict.c:314:5: note: vect_is_simple_use: operand *_23
common/predict.c:314:5: note: not ssa-name.
common/predict.c:314:5: note: use not simple.
common/predict.c:314:5: note: negative step and reversing not supported.
common/predict.c:314:5: note: not vectorized: relevant stmt not supported: _24 = *_23;
common/predict.c:314:5: note: bad operation or unsupported loop bound.
common/predict.c:305:13: note: vectorized 0 loops in function.
predict_8x8c_p (uint8_t * src)
{
  int pix;
  int V;
  int H;
  int c;
  int b;
  int a;
  int y;
  int x;
  int i;
  int _12;
  sizetype _13;
  sizetype _14;
  uint8_t * _16;
  unsigned char _18;
  int _19;
  int _20;
  sizetype _21;
  sizetype _22;
  uint8_t * _23;
  unsigned char _24;
  int _25;
  int _26;
  int _27;
  int _31;
  int _32;
  sizetype _33;
  uint8_t * _34;
  unsigned char _35;
  int _36;
  int _37;
  int _38;
  sizetype _39;
  uint8_t * _40;
  unsigned char _41;
  int _42;
  int _43;
  int _44;
  unsigned char _46;
  int _47;
  unsigned char _48;
  int _49;
  int _50;
  int _52;
  int _53;
  int _55;
  int _56;
  int _58;
  int _59;
  int _60;
  int _61;
  sizetype _63;
  uint8_t * _64;
  int _65;
  int _66;
  int _73;
  int _74;
  unsigned char iftmp.15_75;
  unsigned char iftmp.15_76;
  unsigned char iftmp.15_77;
  int patt_144;
  int patt_145;
  unsigned int ivtmp_146;
  unsigned int ivtmp_147;
  unsigned int ivtmp_148;
  unsigned int ivtmp_149;
  unsigned int ivtmp_150;
  unsigned int ivtmp_151;

  <bb 2>:
  # DEBUG H => 0
  # DEBUG V => 0
  # DEBUG i => 0
  # DEBUG V => 0
  # DEBUG H => 0
  # DEBUG i => 0

  <bb 3>:
  # i_30 = PHI <i_11(4), 0(2)>
  # H_92 = PHI <H_28(4), 0(2)>
  # V_93 = PHI <V_45(4), 0(2)>
  # ivtmp_147 = PHI <ivtmp_146(4), 4(2)>
  # DEBUG V => V_93
  # DEBUG H => H_92
  # DEBUG i => i_30
  i_11 = i_30 + 1;
  _12 = i_30 + 4;
  _13 = (sizetype) _12;
  _14 = _13 + 18446744073709551584;
  _16 = src_15(D) + _14;
  _18 = *_16;
  _19 = (int) _18;
  _20 = 2 - i_30;
  _21 = (sizetype) _20;
  _22 = _21 + 18446744073709551584;
  _23 = src_15(D) + _22;
  _24 = *_23;
  _25 = (int) _24;
  _26 = _19 - _25;
  _27 = i_11 * _26;
  H_28 = _27 + H_92;
  # DEBUG H => H_28
  _31 = _12 * 32;
  _32 = _31 + -1;
  _33 = (sizetype) _32;
  _34 = src_15(D) + _33;
  _35 = *_34;
  _36 = (int) _35;
  _37 = _20 * 32;
  _38 = _37 + -1;
  _39 = (sizetype) _38;
  _40 = src_15(D) + _39;
  _41 = *_40;
  _42 = (int) _41;
  _43 = _36 - _42;
  _44 = i_11 * _43;
  V_45 = _44 + V_93;
  # DEBUG V => V_45
  # DEBUG i => i_11
  # DEBUG V => V_45
  # DEBUG H => H_28
  # DEBUG i => i_11
  ivtmp_146 = ivtmp_147 - 1;
  if (ivtmp_146 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # H_153 = PHI <H_28(3)>
  # V_152 = PHI <V_45(3)>
  _46 = MEM[(uint8_t *)src_15(D) + 223B];
  _47 = (int) _46;
  _48 = MEM[(uint8_t *)src_15(D) + -25B];
  _49 = (int) _48;
  _50 = _47 + _49;
  a_51 = _50 * 16;
  # DEBUG a => a_51
  _52 = H_153 * 17;
  _53 = _52 + 16;
  b_54 = _53 >> 5;
  # DEBUG b => b_54
  _55 = V_152 * 17;
  _56 = _55 + 16;
  c_57 = _56 >> 5;
  # DEBUG c => c_57
  _58 = b_54 * -3;
  _59 = a_51 + _58;
  _60 = c_57 * -3;
  _61 = _59 + _60;
  pix_62 = _61 + 16;
  # DEBUG i00 => pix_62
  # DEBUG y => 0
  # DEBUG i00 => pix_62
  # DEBUG y => 0
  # DEBUG src => src_15(D)
  goto <bb 10>;

  <bb 6>:

  <bb 7>:
  # x_78 = PHI <x_69(6), 0(10)>
  # pix_95 = PHI <pix_68(6), pix_94(10)>
  # ivtmp_151 = PHI <ivtmp_150(6), 8(10)>
  # DEBUG pix => NULL
  # DEBUG x => NULL
  _63 = (sizetype) x_78;
  _64 = src_29 + _63;
  _65 = pix_95 >> 5;
  # DEBUG x => NULL
  _66 = _65 & -256;
  _73 = -_65;
  _74 = _73 >> 31;
  iftmp.15_75 = (unsigned char) _74;
  iftmp.15_76 = (unsigned char) _65;
  iftmp.15_77 = _66 != 0 ? iftmp.15_75 : iftmp.15_76;
  # DEBUG x => NULL
  *_64 = iftmp.15_77;
  pix_68 = b_54 + pix_95;
  # DEBUG pix => pix_68
  x_69 = x_78 + 1;
  # DEBUG x => x_69
  # DEBUG pix => pix_68
  # DEBUG x => x_69
  ivtmp_150 = ivtmp_151 - 1;
  if (ivtmp_150 != 0)
    goto <bb 6>;
  else
    goto <bb 8>;

  <bb 8>:
  src_70 = src_29 + 32;
  # DEBUG src => src_70
  pix_71 = c_57 + pix_94;
  # DEBUG i00 => pix_71
  y_72 = y_91 + 1;
  # DEBUG y => y_72
  # DEBUG i00 => pix_71
  # DEBUG y => y_72
  # DEBUG src => src_70
  ivtmp_148 = ivtmp_149 - 1;
  if (ivtmp_148 != 0)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 9>:

  <bb 10>:
  # src_29 = PHI <src_70(9), src_15(D)(5)>
  # y_91 = PHI <y_72(9), 0(5)>
  # pix_94 = PHI <pix_71(9), pix_62(5)>
  # ivtmp_149 = PHI <ivtmp_148(9), 8(5)>
  # DEBUG i00 => pix_94
  # DEBUG y => y_91
  # DEBUG src => src_29
  # DEBUG pix => pix_94
  # DEBUG x => 0
  goto <bb 7>;

  <bb 11>:
  return;

}



;; Function predict_8x8_dc_128 (predict_8x8_dc_128, funcdef_no=142, decl_uid=6048, cgraph_uid=142, symbol_order=185)


Analyzing loop at common/predict.c:569
common/predict.c:569:5: note: ===== analyze_loop_nest =====
common/predict.c:569:5: note: === vect_analyze_loop_form ===
common/predict.c:569:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:569:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_13 + 4B]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {4B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_13]
analyze_innermost: success.
	base_address: src_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_4(D)]
	Access function 0: {0B, +, 32}_1
common/predict.c:569:5: note: got vectype for stmt: MEM[(uint32_t *)src_13 + 4B] = 2155905152;
vector(4) unsigned int
common/predict.c:569:5: note: got vectype for stmt: MEM[(uint32_t *)src_13] = 2155905152;
vector(4) unsigned int
common/predict.c:569:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:569:5: note: Analyze phi: src_13 = PHI <src_8(4), src_4(D)(2)>

common/predict.c:569:5: note: Access function of PHI: {src_4(D), +, 32}_1
common/predict.c:569:5: note: step: 32,  init: src_4(D)
common/predict.c:569:5: note: Detected induction.
common/predict.c:569:5: note: Analyze phi: y_14 = PHI <y_9(4), 0(2)>

common/predict.c:569:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:569:5: note: step: 1,  init: 0
common/predict.c:569:5: note: Detected induction.
common/predict.c:569:5: note: Analyze phi: .MEM_15 = PHI <.MEM_7(4), .MEM_5(D)(2)>

common/predict.c:569:5: note: Analyze phi: ivtmp_2 = PHI <ivtmp_1(4), 8(2)>

common/predict.c:569:5: note: Access function of PHI: {8, +, 4294967295}_1
common/predict.c:569:5: note: step: 4294967295,  init: 8
common/predict.c:569:5: note: Detected induction.
common/predict.c:569:5: note: === vect_pattern_recog ===
common/predict.c:569:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:569:5: note: Detected interleaving MEM[(uint32_t *)src_13] and MEM[(uint32_t *)src_13 + 4B]
common/predict.c:569:5: note: interleaved store with gaps
common/predict.c:569:5: note: not vectorized: complicated access pattern.
common/predict.c:569:5: note: bad data access.
common/predict.c:567:13: note: vectorized 0 loops in function.
predict_8x8_dc_128 (uint8_t * src, uint8_t * edge)
{
  int y;
  unsigned int ivtmp_1;
  unsigned int ivtmp_2;

  <bb 2>:
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src => src_4(D)

  <bb 3>:
  # src_13 = PHI <src_8(4), src_4(D)(2)>
  # y_14 = PHI <y_9(4), 0(2)>
  # ivtmp_2 = PHI <ivtmp_1(4), 8(2)>
  # DEBUG y => y_14
  # DEBUG src => src_13
  MEM[(uint32_t *)src_13 + 4B] = 2155905152;
  MEM[(uint32_t *)src_13] = 2155905152;
  src_8 = src_13 + 32;
  # DEBUG src => src_8
  y_9 = y_14 + 1;
  # DEBUG y => y_9
  # DEBUG y => y_9
  # DEBUG src => src_8
  ivtmp_1 = ivtmp_2 - 1;
  if (ivtmp_1 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function predict_8x8_dc_left (predict_8x8_dc_left, funcdef_no=143, decl_uid=6056, cgraph_uid=143, symbol_order=186)


Analyzing loop at common/predict.c:575
common/predict.c:575:5: note: ===== analyze_loop_nest =====
common/predict.c:575:5: note: === vect_analyze_loop_form ===
common/predict.c:575:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:575:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_41 + 4B]
analyze_innermost: success.
	base_address: src_33(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_33(D)]
	Access function 0: {4B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_41]
analyze_innermost: success.
	base_address: src_33(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_33(D)]
	Access function 0: {0B, +, 32}_1
common/predict.c:575:5: note: got vectype for stmt: MEM[(uint32_t *)src_41 + 4B] = dc_32;
vector(4) unsigned int
common/predict.c:575:5: note: got vectype for stmt: MEM[(uint32_t *)src_41] = dc_32;
vector(4) unsigned int
common/predict.c:575:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:575:5: note: Analyze phi: src_41 = PHI <src_36(4), src_33(D)(2)>

common/predict.c:575:5: note: Access function of PHI: {src_33(D), +, 32}_1
common/predict.c:575:5: note: step: 32,  init: src_33(D)
common/predict.c:575:5: note: Detected induction.
common/predict.c:575:5: note: Analyze phi: y_42 = PHI <y_37(4), 0(2)>

common/predict.c:575:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:575:5: note: step: 1,  init: 0
common/predict.c:575:5: note: Detected induction.
common/predict.c:575:5: note: Analyze phi: .MEM_43 = PHI <.MEM_35(4), .MEM_5(D)(2)>

common/predict.c:575:5: note: Analyze phi: ivtmp_2 = PHI <ivtmp_1(4), 8(2)>

common/predict.c:575:5: note: Access function of PHI: {8, +, 4294967295}_1
common/predict.c:575:5: note: step: 4294967295,  init: 8
common/predict.c:575:5: note: Detected induction.
common/predict.c:575:5: note: === vect_pattern_recog ===
common/predict.c:575:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:575:5: note: Detected interleaving MEM[(uint32_t *)src_41] and MEM[(uint32_t *)src_41 + 4B]
common/predict.c:575:5: note: interleaved store with gaps
common/predict.c:575:5: note: not vectorized: complicated access pattern.
common/predict.c:575:5: note: bad data access.
common/predict.c:571:13: note: vectorized 0 loops in function.
predict_8x8_dc_left (uint8_t * src, uint8_t * edge)
{
  int y;
  const uint32_t dc;
  const int l7;
  const int l6;
  const int l5;
  const int l4;
  const int l3;
  const int l2;
  const int l1;
  const int l0;
  unsigned int ivtmp_1;
  unsigned int ivtmp_2;
  unsigned char _6;
  unsigned char _8;
  unsigned char _10;
  unsigned char _12;
  unsigned char _14;
  unsigned char _16;
  unsigned char _18;
  unsigned char _20;
  int _22;
  int _23;
  int _24;
  int _25;
  int _26;
  int _27;
  int _28;
  int _29;
  int _30;
  int _31;

  <bb 2>:
  _6 = MEM[(uint8_t *)edge_4(D) + 14B];
  l0_7 = (const int) _6;
  # DEBUG l0 => l0_7
  _8 = MEM[(uint8_t *)edge_4(D) + 13B];
  l1_9 = (const int) _8;
  # DEBUG l1 => l1_9
  _10 = MEM[(uint8_t *)edge_4(D) + 12B];
  l2_11 = (const int) _10;
  # DEBUG l2 => l2_11
  _12 = MEM[(uint8_t *)edge_4(D) + 11B];
  l3_13 = (const int) _12;
  # DEBUG l3 => l3_13
  _14 = MEM[(uint8_t *)edge_4(D) + 10B];
  l4_15 = (const int) _14;
  # DEBUG l4 => l4_15
  _16 = MEM[(uint8_t *)edge_4(D) + 9B];
  l5_17 = (const int) _16;
  # DEBUG l5 => l5_17
  _18 = MEM[(uint8_t *)edge_4(D) + 8B];
  l6_19 = (const int) _18;
  # DEBUG l6 => l6_19
  _20 = MEM[(uint8_t *)edge_4(D) + 7B];
  l7_21 = (const int) _20;
  # DEBUG l7 => l7_21
  _22 = l0_7 + l1_9;
  _23 = l2_11 + _22;
  _24 = l3_13 + _23;
  _25 = l4_15 + _24;
  _26 = l5_17 + _25;
  _27 = l6_19 + _26;
  _28 = l7_21 + _27;
  _29 = _28 + 4;
  _30 = _29 >> 3;
  _31 = _30 * 16843009;
  dc_32 = (const uint32_t) _31;
  # DEBUG dc => dc_32
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src => src_33(D)

  <bb 3>:
  # src_41 = PHI <src_36(4), src_33(D)(2)>
  # y_42 = PHI <y_37(4), 0(2)>
  # ivtmp_2 = PHI <ivtmp_1(4), 8(2)>
  # DEBUG y => y_42
  # DEBUG src => src_41
  MEM[(uint32_t *)src_41 + 4B] = dc_32;
  MEM[(uint32_t *)src_41] = dc_32;
  src_36 = src_41 + 32;
  # DEBUG src => src_36
  y_37 = y_42 + 1;
  # DEBUG y => y_37
  # DEBUG y => y_37
  # DEBUG src => src_36
  ivtmp_1 = ivtmp_2 - 1;
  if (ivtmp_1 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function predict_8x8_dc_top (predict_8x8_dc_top, funcdef_no=144, decl_uid=6073, cgraph_uid=144, symbol_order=187)


Analyzing loop at common/predict.c:581
common/predict.c:581:5: note: ===== analyze_loop_nest =====
common/predict.c:581:5: note: === vect_analyze_loop_form ===
common/predict.c:581:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:581:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_41 + 4B]
analyze_innermost: success.
	base_address: src_33(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_33(D)]
	Access function 0: {4B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_41]
analyze_innermost: success.
	base_address: src_33(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_33(D)]
	Access function 0: {0B, +, 32}_1
common/predict.c:581:5: note: got vectype for stmt: MEM[(uint32_t *)src_41 + 4B] = dc_32;
vector(4) unsigned int
common/predict.c:581:5: note: got vectype for stmt: MEM[(uint32_t *)src_41] = dc_32;
vector(4) unsigned int
common/predict.c:581:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:581:5: note: Analyze phi: src_41 = PHI <src_36(4), src_33(D)(2)>

common/predict.c:581:5: note: Access function of PHI: {src_33(D), +, 32}_1
common/predict.c:581:5: note: step: 32,  init: src_33(D)
common/predict.c:581:5: note: Detected induction.
common/predict.c:581:5: note: Analyze phi: y_42 = PHI <y_37(4), 0(2)>

common/predict.c:581:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:581:5: note: step: 1,  init: 0
common/predict.c:581:5: note: Detected induction.
common/predict.c:581:5: note: Analyze phi: .MEM_43 = PHI <.MEM_35(4), .MEM_5(D)(2)>

common/predict.c:581:5: note: Analyze phi: ivtmp_2 = PHI <ivtmp_1(4), 8(2)>

common/predict.c:581:5: note: Access function of PHI: {8, +, 4294967295}_1
common/predict.c:581:5: note: step: 4294967295,  init: 8
common/predict.c:581:5: note: Detected induction.
common/predict.c:581:5: note: === vect_pattern_recog ===
common/predict.c:581:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:581:5: note: Detected interleaving MEM[(uint32_t *)src_41] and MEM[(uint32_t *)src_41 + 4B]
common/predict.c:581:5: note: interleaved store with gaps
common/predict.c:581:5: note: not vectorized: complicated access pattern.
common/predict.c:581:5: note: bad data access.
common/predict.c:577:13: note: vectorized 0 loops in function.
predict_8x8_dc_top (uint8_t * src, uint8_t * edge)
{
  int y;
  const uint32_t dc;
  const int t7;
  const int t6;
  const int t5;
  const int t4;
  const int t3;
  const int t2;
  const int t1;
  const int t0;
  unsigned int ivtmp_1;
  unsigned int ivtmp_2;
  unsigned char _6;
  unsigned char _8;
  unsigned char _10;
  unsigned char _12;
  unsigned char _14;
  unsigned char _16;
  unsigned char _18;
  unsigned char _20;
  int _22;
  int _23;
  int _24;
  int _25;
  int _26;
  int _27;
  int _28;
  int _29;
  int _30;
  int _31;

  <bb 2>:
  _6 = MEM[(uint8_t *)edge_4(D) + 16B];
  t0_7 = (const int) _6;
  # DEBUG t0 => t0_7
  _8 = MEM[(uint8_t *)edge_4(D) + 17B];
  t1_9 = (const int) _8;
  # DEBUG t1 => t1_9
  _10 = MEM[(uint8_t *)edge_4(D) + 18B];
  t2_11 = (const int) _10;
  # DEBUG t2 => t2_11
  _12 = MEM[(uint8_t *)edge_4(D) + 19B];
  t3_13 = (const int) _12;
  # DEBUG t3 => t3_13
  _14 = MEM[(uint8_t *)edge_4(D) + 20B];
  t4_15 = (const int) _14;
  # DEBUG t4 => t4_15
  _16 = MEM[(uint8_t *)edge_4(D) + 21B];
  t5_17 = (const int) _16;
  # DEBUG t5 => t5_17
  _18 = MEM[(uint8_t *)edge_4(D) + 22B];
  t6_19 = (const int) _18;
  # DEBUG t6 => t6_19
  _20 = MEM[(uint8_t *)edge_4(D) + 23B];
  t7_21 = (const int) _20;
  # DEBUG t7 => t7_21
  _22 = t0_7 + t1_9;
  _23 = t2_11 + _22;
  _24 = t3_13 + _23;
  _25 = t4_15 + _24;
  _26 = t5_17 + _25;
  _27 = t6_19 + _26;
  _28 = t7_21 + _27;
  _29 = _28 + 4;
  _30 = _29 >> 3;
  _31 = _30 * 16843009;
  dc_32 = (const uint32_t) _31;
  # DEBUG dc => dc_32
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src => src_33(D)

  <bb 3>:
  # src_41 = PHI <src_36(4), src_33(D)(2)>
  # y_42 = PHI <y_37(4), 0(2)>
  # ivtmp_2 = PHI <ivtmp_1(4), 8(2)>
  # DEBUG y => y_42
  # DEBUG src => src_41
  MEM[(uint32_t *)src_41 + 4B] = dc_32;
  MEM[(uint32_t *)src_41] = dc_32;
  src_36 = src_41 + 32;
  # DEBUG src => src_36
  y_37 = y_42 + 1;
  # DEBUG y => y_37
  # DEBUG y => y_37
  # DEBUG src => src_36
  ivtmp_1 = ivtmp_2 - 1;
  if (ivtmp_1 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function predict_8x8_dc (predict_8x8_dc, funcdef_no=145, decl_uid=6090, cgraph_uid=145, symbol_order=188)


Analyzing loop at common/predict.c:589
common/predict.c:589:5: note: ===== analyze_loop_nest =====
common/predict.c:589:5: note: === vect_analyze_loop_form ===
common/predict.c:589:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:589:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(uint32_t *)src_65 + 4B]
analyze_innermost: success.
	base_address: src_57(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_57(D)]
	Access function 0: {4B, +, 32}_1
Creating dr for MEM[(uint32_t *)src_65]
analyze_innermost: success.
	base_address: src_57(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint32_t *)src_57(D)]
	Access function 0: {0B, +, 32}_1
common/predict.c:589:5: note: got vectype for stmt: MEM[(uint32_t *)src_65 + 4B] = dc_56;
vector(4) unsigned int
common/predict.c:589:5: note: got vectype for stmt: MEM[(uint32_t *)src_65] = dc_56;
vector(4) unsigned int
common/predict.c:589:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:589:5: note: Analyze phi: src_65 = PHI <src_60(4), src_57(D)(2)>

common/predict.c:589:5: note: Access function of PHI: {src_57(D), +, 32}_1
common/predict.c:589:5: note: step: 32,  init: src_57(D)
common/predict.c:589:5: note: Detected induction.
common/predict.c:589:5: note: Analyze phi: y_66 = PHI <y_61(4), 0(2)>

common/predict.c:589:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:589:5: note: step: 1,  init: 0
common/predict.c:589:5: note: Detected induction.
common/predict.c:589:5: note: Analyze phi: .MEM_67 = PHI <.MEM_59(4), .MEM_5(D)(2)>

common/predict.c:589:5: note: Analyze phi: ivtmp_2 = PHI <ivtmp_1(4), 8(2)>

common/predict.c:589:5: note: Access function of PHI: {8, +, 4294967295}_1
common/predict.c:589:5: note: step: 4294967295,  init: 8
common/predict.c:589:5: note: Detected induction.
common/predict.c:589:5: note: === vect_pattern_recog ===
common/predict.c:589:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:589:5: note: Detected interleaving MEM[(uint32_t *)src_65] and MEM[(uint32_t *)src_65 + 4B]
common/predict.c:589:5: note: interleaved store with gaps
common/predict.c:589:5: note: not vectorized: complicated access pattern.
common/predict.c:589:5: note: bad data access.
common/predict.c:583:13: note: vectorized 0 loops in function.
predict_8x8_dc (uint8_t * src, uint8_t * edge)
{
  int y;
  const uint32_t dc;
  const int t7;
  const int t6;
  const int t5;
  const int t4;
  const int t3;
  const int t2;
  const int t1;
  const int t0;
  const int l7;
  const int l6;
  const int l5;
  const int l4;
  const int l3;
  const int l2;
  const int l1;
  const int l0;
  unsigned int ivtmp_1;
  unsigned int ivtmp_2;
  unsigned char _6;
  unsigned char _8;
  unsigned char _10;
  unsigned char _12;
  unsigned char _14;
  unsigned char _16;
  unsigned char _18;
  unsigned char _20;
  unsigned char _22;
  unsigned char _24;
  unsigned char _26;
  unsigned char _28;
  unsigned char _30;
  unsigned char _32;
  unsigned char _34;
  unsigned char _36;
  int _38;
  int _39;
  int _40;
  int _41;
  int _42;
  int _43;
  int _44;
  int _45;
  int _46;
  int _47;
  int _48;
  int _49;
  int _50;
  int _51;
  int _52;
  int _53;
  int _54;
  int _55;

  <bb 2>:
  _6 = MEM[(uint8_t *)edge_4(D) + 14B];
  l0_7 = (const int) _6;
  # DEBUG l0 => l0_7
  _8 = MEM[(uint8_t *)edge_4(D) + 13B];
  l1_9 = (const int) _8;
  # DEBUG l1 => l1_9
  _10 = MEM[(uint8_t *)edge_4(D) + 12B];
  l2_11 = (const int) _10;
  # DEBUG l2 => l2_11
  _12 = MEM[(uint8_t *)edge_4(D) + 11B];
  l3_13 = (const int) _12;
  # DEBUG l3 => l3_13
  _14 = MEM[(uint8_t *)edge_4(D) + 10B];
  l4_15 = (const int) _14;
  # DEBUG l4 => l4_15
  _16 = MEM[(uint8_t *)edge_4(D) + 9B];
  l5_17 = (const int) _16;
  # DEBUG l5 => l5_17
  _18 = MEM[(uint8_t *)edge_4(D) + 8B];
  l6_19 = (const int) _18;
  # DEBUG l6 => l6_19
  _20 = MEM[(uint8_t *)edge_4(D) + 7B];
  l7_21 = (const int) _20;
  # DEBUG l7 => l7_21
  _22 = MEM[(uint8_t *)edge_4(D) + 16B];
  t0_23 = (const int) _22;
  # DEBUG t0 => t0_23
  _24 = MEM[(uint8_t *)edge_4(D) + 17B];
  t1_25 = (const int) _24;
  # DEBUG t1 => t1_25
  _26 = MEM[(uint8_t *)edge_4(D) + 18B];
  t2_27 = (const int) _26;
  # DEBUG t2 => t2_27
  _28 = MEM[(uint8_t *)edge_4(D) + 19B];
  t3_29 = (const int) _28;
  # DEBUG t3 => t3_29
  _30 = MEM[(uint8_t *)edge_4(D) + 20B];
  t4_31 = (const int) _30;
  # DEBUG t4 => t4_31
  _32 = MEM[(uint8_t *)edge_4(D) + 21B];
  t5_33 = (const int) _32;
  # DEBUG t5 => t5_33
  _34 = MEM[(uint8_t *)edge_4(D) + 22B];
  t6_35 = (const int) _34;
  # DEBUG t6 => t6_35
  _36 = MEM[(uint8_t *)edge_4(D) + 23B];
  t7_37 = (const int) _36;
  # DEBUG t7 => t7_37
  _38 = l0_7 + l1_9;
  _39 = l2_11 + _38;
  _40 = l3_13 + _39;
  _41 = l4_15 + _40;
  _42 = l5_17 + _41;
  _43 = l6_19 + _42;
  _44 = l7_21 + _43;
  _45 = t0_23 + _44;
  _46 = t1_25 + _45;
  _47 = t2_27 + _46;
  _48 = t3_29 + _47;
  _49 = t4_31 + _48;
  _50 = t5_33 + _49;
  _51 = t6_35 + _50;
  _52 = t7_37 + _51;
  _53 = _52 + 8;
  _54 = _53 >> 4;
  _55 = _54 * 16843009;
  dc_56 = (const uint32_t) _55;
  # DEBUG dc => dc_56
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src => src_57(D)

  <bb 3>:
  # src_65 = PHI <src_60(4), src_57(D)(2)>
  # y_66 = PHI <y_61(4), 0(2)>
  # ivtmp_2 = PHI <ivtmp_1(4), 8(2)>
  # DEBUG y => y_66
  # DEBUG src => src_65
  MEM[(uint32_t *)src_65 + 4B] = dc_56;
  MEM[(uint32_t *)src_65] = dc_56;
  src_60 = src_65 + 32;
  # DEBUG src => src_60
  y_61 = y_66 + 1;
  # DEBUG y => y_61
  # DEBUG y => y_61
  # DEBUG src => src_60
  ivtmp_1 = ivtmp_2 - 1;
  if (ivtmp_1 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function predict_8x8_v (predict_8x8_v, funcdef_no=147, decl_uid=6127, cgraph_uid=147, symbol_order=190)


Analyzing loop at common/predict.c:603
common/predict.c:603:5: note: ===== analyze_loop_nest =====
common/predict.c:603:5: note: === vect_analyze_loop_form ===
common/predict.c:603:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/predict.c:603:5: note: === vect_analyze_data_refs ===
Creating dr for *_9
analyze_innermost: success.
	base_address: src_8(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: MEM[(uint64_t *)src_8(D)]
	Access function 0: {0B, +, 32}_1
common/predict.c:603:5: note: got vectype for stmt: *_9 = top_5;
vector(2) long unsigned int
common/predict.c:603:5: note: === vect_analyze_scalar_cycles ===
common/predict.c:603:5: note: Analyze phi: y_14 = PHI <y_11(4), 0(2)>

common/predict.c:603:5: note: Access function of PHI: {0, +, 1}_1
common/predict.c:603:5: note: step: 1,  init: 0
common/predict.c:603:5: note: Detected induction.
common/predict.c:603:5: note: Analyze phi: .MEM_15 = PHI <.MEM_10(4), .MEM_3(D)(2)>

common/predict.c:603:5: note: Analyze phi: ivtmp_12 = PHI <ivtmp_1(4), 8(2)>

common/predict.c:603:5: note: Access function of PHI: {8, +, 4294967295}_1
common/predict.c:603:5: note: step: 4294967295,  init: 8
common/predict.c:603:5: note: Detected induction.
common/predict.c:603:5: note: === vect_pattern_recog ===
common/predict.c:603:5: note: vect_is_simple_use: operand y_14
common/predict.c:603:5: note: def_stmt: y_14 = PHI <y_11(4), 0(2)>
common/predict.c:603:5: note: type of def: 4.
common/predict.c:603:5: note: === vect_analyze_data_ref_accesses ===
common/predict.c:603:5: note: not consecutive access *_9 = top_5;

common/predict.c:603:5: note: not vectorized: complicated access pattern.
common/predict.c:603:5: note: bad data access.
common/predict.c:599:13: note: vectorized 0 loops in function.
predict_8x8_v (uint8_t * src, uint8_t * edge)
{
  int y;
  const uint64_t top;
  unsigned int ivtmp_1;
  int _6;
  sizetype _7;
  uint64_t * _9;
  unsigned int ivtmp_12;

  <bb 2>:
  top_5 = MEM[(uint64_t *)edge_4(D) + 16B];
  # DEBUG top => top_5
  # DEBUG y => 0
  # DEBUG y => 0

  <bb 3>:
  # y_14 = PHI <y_11(4), 0(2)>
  # ivtmp_12 = PHI <ivtmp_1(4), 8(2)>
  # DEBUG y => y_14
  _6 = y_14 * 32;
  _7 = (sizetype) _6;
  _9 = src_8(D) + _7;
  *_9 = top_5;
  y_11 = y_14 + 1;
  # DEBUG y => y_11
  # DEBUG y => y_11
  ivtmp_1 = ivtmp_12 - 1;
  if (ivtmp_1 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}


