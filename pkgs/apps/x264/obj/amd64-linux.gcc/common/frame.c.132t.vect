
;; Function deblock_h_luma_c (deblock_h_luma_c, funcdef_no=128, decl_uid=5977, cgraph_uid=128, symbol_order=174)


Analyzing loop at common/frame.c:421
common/frame.c:421:5: note: ===== analyze_loop_nest =====
common/frame.c:421:5: note: === vect_analyze_loop_form ===
common/frame.c:421:5: note: ===== analyze_loop_nest_1 =====
common/frame.c:421:5: note: === vect_analyze_loop_form ===
common/frame.c:421:5: note: not vectorized: control flow in loop.
common/frame.c:421:5: note: bad inner-loop form.
common/frame.c:421:5: note: not vectorized: Bad inner loop.
common/frame.c:421:5: note: bad loop form.

Analyzing loop at common/frame.c:428
common/frame.c:428:9: note: ===== analyze_loop_nest =====
common/frame.c:428:9: note: === vect_analyze_loop_form ===
common/frame.c:428:9: note: not vectorized: control flow in loop.
common/frame.c:428:9: note: bad loop form.
common/frame.c:464:13: note: vectorized 0 loops in function.
deblock_h_luma_c (uint8_t * pix, int stride, int alpha, int beta, int8_t * tc0)
{
  int i;
  int d;
  const int p2;
  const int p1;
  const int p0;
  const int q0;
  const int q1;
  const int q2;
  int tc;
  uint8_t * pix;
  sizetype _9;
  int8_t * _10;
  signed char _11;
  int _12;
  sizetype _13;
  unsigned char _20;
  unsigned char _25;
  unsigned char _30;
  unsigned char _32;
  unsigned char _36;
  unsigned char _41;
  int _43;
  int _44;
  int _45;
  int _46;
  int _47;
  int _48;
  signed char _49;
  int _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  int iftmp.16_60;
  int iftmp.16_61;
  unsigned char _62;
  unsigned char _63;
  int _65;
  int _66;
  signed char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  int iftmp.16_76;
  int iftmp.16_77;
  unsigned char _78;
  unsigned char _79;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int iftmp.16_90;
  int iftmp.16_91;
  int _92;
  int _93;
  int _94;
  int _95;
  unsigned char iftmp.17_96;
  unsigned char iftmp.17_97;
  unsigned char iftmp.17_98;
  int _99;
  int _100;
  int _101;
  int _102;
  unsigned char iftmp.17_103;
  unsigned char iftmp.17_104;
  unsigned char iftmp.17_105;
  unsigned int ivtmp_126;
  unsigned int ivtmp_131;
  unsigned int ivtmp_132;
  unsigned int ivtmp_133;
  sizetype _134;
  unsigned int _135;
  unsigned int _136;
  sizetype pretmp_138;

  <bb 2>:
  # DEBUG pix => pix_2(D)
  # DEBUG xstride => 1
  # DEBUG ystride => stride_3(D)
  # DEBUG alpha => alpha_4(D)
  # DEBUG beta => beta_5(D)
  # DEBUG tc0 => tc0_6(D)
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG pix => pix_2(D)
  _136 = (unsigned int) stride_3(D);
  _135 = _136 * 4;
  _12 = (int) _135;
  _13 = (sizetype) _12;

  <bb 3>:
  # i_130 = PHI <i_110(30), 0(2)>
  # pix_128 = PHI <pix_113(30), pix_2(D)(2)>
  # ivtmp_131 = PHI <ivtmp_126(30), 4(2)>
  # DEBUG i => i_130
  # DEBUG pix => pix_128
  _9 = (sizetype) i_130;
  _10 = tc0_6(D) + _9;
  _11 = *_10;
  if (_11 < 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  pix_15 = pix_128 + _13;
  # DEBUG pix => pix_15
  goto <bb 29>;

  <bb 5>:
  pretmp_138 = (sizetype) stride_3(D);

  <bb 6>:
  # pix_129 = PHI <pix_128(5), pix_107(27)>
  # d_34 = PHI <0(5), d_109(27)>
  # ivtmp_133 = PHI <4(5), ivtmp_132(27)>
  # DEBUG d => d_34
  # DEBUG pix => pix_129
  # DEBUG D#9 => MEM[(uint8_t *)pix_129 + -3B]
  # DEBUG p2 => (const int) D#9
  # DEBUG D#8 => MEM[(uint8_t *)pix_129 + -2B]
  # DEBUG p1 => (const int) D#8
  _30 = MEM[(uint8_t *)pix_129 + -1B];
  p0_31 = (const int) _30;
  # DEBUG p0 => p0_31
  _32 = *pix_129;
  q0_33 = (const int) _32;
  # DEBUG q0 => q0_33
  # DEBUG D#7 => MEM[(uint8_t *)pix_129 + 1B]
  # DEBUG q1 => (const int) D#7
  # DEBUG D#6 => MEM[(uint8_t *)pix_129 + 2B]
  # DEBUG q2 => (const int) D#6
  _43 = p0_31 - q0_33;
  _44 = ABS_EXPR <_43>;
  if (alpha_4(D) > _44)
    goto <bb 7>;
  else
    goto <bb 26>;

  <bb 7>:
  _25 = MEM[(uint8_t *)pix_129 + -2B];
  p1_26 = (const int) _25;
  _45 = p1_26 - p0_31;
  _46 = ABS_EXPR <_45>;
  if (beta_5(D) > _46)
    goto <bb 8>;
  else
    goto <bb 26>;

  <bb 8>:
  _36 = MEM[(uint8_t *)pix_129 + 1B];
  q1_37 = (const int) _36;
  _47 = q1_37 - q0_33;
  _48 = ABS_EXPR <_47>;
  if (beta_5(D) > _48)
    goto <bb 9>;
  else
    goto <bb 26>;

  <bb 9>:
  _20 = MEM[(uint8_t *)pix_129 + -3B];
  p2_21 = (const int) _20;
  _41 = MEM[(uint8_t *)pix_129 + 2B];
  _49 = *_10;
  tc_50 = (int) _49;
  # DEBUG tc => tc_50
  _51 = p2_21 - p0_31;
  _52 = ABS_EXPR <_51>;
  if (beta_5(D) > _52)
    goto <bb 10>;
  else
    goto <bb 13>;

  <bb 10>:
  _53 = -tc_50;
  _54 = p0_31 + q0_33;
  _55 = _54 + 1;
  _56 = _55 >> 1;
  _57 = p2_21 + _56;
  _58 = _57 >> 1;
  _59 = _58 - p1_26;
  # DEBUG v => _59
  # DEBUG i_min => _53
  # DEBUG i_max => tc_50
  if (_53 <= _59)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  iftmp.16_60 = MIN_EXPR <tc_50, _59>;

  <bb 12>:
  # iftmp.16_61 = PHI <_53(10), iftmp.16_60(11)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  _62 = (unsigned char) iftmp.16_61;
  _63 = _25 + _62;
  MEM[(uint8_t *)pix_129 + -2B] = _63;
  tc_64 = tc_50 + 1;
  # DEBUG tc => tc_64

  <bb 13>:
  # tc_80 = PHI <tc_50(9), tc_64(12)>
  q2_42 = (const int) _41;
  # DEBUG tc => tc_80
  _65 = q2_42 - q0_33;
  _66 = ABS_EXPR <_65>;
  if (beta_5(D) > _66)
    goto <bb 14>;
  else
    goto <bb 17>;

  <bb 14>:
  _67 = *_10;
  _68 = (int) _67;
  _69 = -_68;
  _70 = p0_31 + q0_33;
  _71 = _70 + 1;
  _72 = _71 >> 1;
  _73 = q2_42 + _72;
  _74 = _73 >> 1;
  _75 = _74 - q1_37;
  # DEBUG v => _75
  # DEBUG i_min => _69
  # DEBUG i_max => _68
  if (_69 <= _75)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  iftmp.16_76 = MIN_EXPR <_68, _75>;

  <bb 16>:
  # iftmp.16_77 = PHI <_69(14), iftmp.16_76(15)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  _78 = (unsigned char) iftmp.16_77;
  _79 = _36 + _78;
  MEM[(uint8_t *)pix_129 + 1B] = _79;
  tc_81 = tc_80 + 1;
  # DEBUG tc => tc_81

  <bb 17>:
  # tc_82 = PHI <tc_80(13), tc_81(16)>
  # DEBUG tc => tc_82
  _83 = -tc_82;
  _84 = q0_33 - p0_31;
  _85 = _84 << 2;
  _86 = p1_26 - q1_37;
  _87 = _85 + _86;
  _88 = _87 + 4;
  _89 = _88 >> 3;
  # DEBUG v => _89
  # DEBUG i_min => _83
  # DEBUG i_max => tc_82
  if (_83 <= _89)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  iftmp.16_90 = MIN_EXPR <tc_82, _89>;

  <bb 19>:
  # iftmp.16_91 = PHI <_83(17), iftmp.16_90(18)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  # DEBUG delta => NULL
  _92 = p0_31 + iftmp.16_91;
  # DEBUG x => _92
  _93 = _92 & -256;
  if (_93 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  _94 = -_92;
  _95 = _94 >> 31;
  iftmp.17_96 = (unsigned char) _95;
  goto <bb 22>;

  <bb 21>:
  iftmp.17_97 = (unsigned char) _92;

  <bb 22>:
  # iftmp.17_98 = PHI <iftmp.17_96(20), iftmp.17_97(21)>
  # DEBUG x => NULL
  MEM[(uint8_t *)pix_129 + -1B] = iftmp.17_98;
  _99 = q0_33 - iftmp.16_91;
  # DEBUG x => _99
  _100 = _99 & -256;
  if (_100 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  _101 = -_99;
  _102 = _101 >> 31;
  iftmp.17_103 = (unsigned char) _102;
  goto <bb 25>;

  <bb 24>:
  iftmp.17_104 = (unsigned char) _99;

  <bb 25>:
  # iftmp.17_105 = PHI <iftmp.17_103(23), iftmp.17_104(24)>
  # DEBUG x => NULL
  *pix_129 = iftmp.17_105;

  <bb 26>:
  pix_107 = pix_129 + pretmp_138;
  # DEBUG pix => pix_107
  d_109 = d_34 + 1;
  # DEBUG d => d_109
  # DEBUG d => d_109
  # DEBUG pix => pix_107
  ivtmp_132 = ivtmp_133 - 1;
  if (ivtmp_132 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  goto <bb 6>;

  <bb 28>:
  _134 = pretmp_138 * 4;
  pix_137 = pix_128 + _134;

  <bb 29>:
  # pix_113 = PHI <pix_15(4), pix_137(28)>
  # DEBUG pix => pix_113
  i_110 = i_130 + 1;
  # DEBUG i => i_110
  # DEBUG i => i_110
  # DEBUG pix => pix_113
  ivtmp_126 = ivtmp_131 - 1;
  if (ivtmp_126 != 0)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  goto <bb 3>;

  <bb 31>:
  # DEBUG pix => NULL
  # DEBUG xstride => NULL
  # DEBUG ystride => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  # DEBUG tc0 => NULL
  # DEBUG tc => NULL
  # DEBUG q2 => NULL
  # DEBUG q1 => NULL
  # DEBUG q0 => NULL
  # DEBUG p0 => NULL
  # DEBUG p1 => NULL
  # DEBUG p2 => NULL
  # DEBUG d => NULL
  # DEBUG i => NULL
  return;

}



;; Function deblock_h_chroma_c (deblock_h_chroma_c, funcdef_no=131, decl_uid=6014, cgraph_uid=131, symbol_order=177)


Analyzing loop at common/frame.c:472
common/frame.c:472:5: note: ===== analyze_loop_nest =====
common/frame.c:472:5: note: === vect_analyze_loop_form ===
common/frame.c:472:5: note: ===== analyze_loop_nest_1 =====
common/frame.c:472:5: note: === vect_analyze_loop_form ===
common/frame.c:472:5: note: not vectorized: control flow in loop.
common/frame.c:472:5: note: bad inner-loop form.
common/frame.c:472:5: note: not vectorized: Bad inner loop.
common/frame.c:472:5: note: bad loop form.

Analyzing loop at common/frame.c:480
common/frame.c:480:9: note: ===== analyze_loop_nest =====
common/frame.c:480:9: note: === vect_analyze_loop_form ===
common/frame.c:480:9: note: not vectorized: control flow in loop.
common/frame.c:480:9: note: bad loop form.
common/frame.c:501:13: note: vectorized 0 loops in function.
deblock_h_chroma_c (uint8_t * pix, int stride, int alpha, int beta, int8_t * tc0)
{
  int i;
  int d;
  const int tc;
  const int p1;
  const int p0;
  const int q0;
  const int q1;
  uint8_t * pix;
  sizetype _9;
  int8_t * _10;
  signed char _11;
  int _13;
  sizetype _14;
  unsigned char _21;
  unsigned char _26;
  unsigned char _28;
  unsigned char _32;
  int _34;
  int _35;
  int _36;
  int _37;
  int _38;
  int _39;
  int _40;
  int _41;
  int _42;
  int _43;
  int _44;
  int _45;
  int _46;
  int iftmp.16_47;
  int iftmp.16_48;
  int _49;
  int _50;
  int _51;
  int _52;
  unsigned char iftmp.17_53;
  unsigned char iftmp.17_54;
  unsigned char iftmp.17_55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.17_60;
  unsigned char iftmp.17_61;
  unsigned char iftmp.17_62;
  unsigned int ivtmp_80;
  unsigned int ivtmp_81;
  unsigned int ivtmp_82;
  unsigned int ivtmp_84;
  sizetype _85;
  unsigned int _86;
  unsigned int _87;
  sizetype pretmp_91;

  <bb 2>:
  # DEBUG pix => pix_2(D)
  # DEBUG xstride => 1
  # DEBUG ystride => stride_3(D)
  # DEBUG alpha => alpha_4(D)
  # DEBUG beta => beta_5(D)
  # DEBUG tc0 => tc0_6(D)
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG pix => pix_2(D)
  _87 = (unsigned int) stride_3(D);
  _86 = _87 * 2;
  _13 = (int) _86;
  _14 = (sizetype) _13;

  <bb 3>:
  # i_76 = PHI <i_67(22), 0(2)>
  # pix_24 = PHI <pix_70(22), pix_2(D)(2)>
  # ivtmp_81 = PHI <ivtmp_80(22), 4(2)>
  # DEBUG i => i_76
  # DEBUG pix => pix_24
  _9 = (sizetype) i_76;
  _10 = tc0_6(D) + _9;
  _11 = *_10;
  tc_12 = (const int) _11;
  # DEBUG tc => tc_12
  if (tc_12 <= 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  pix_16 = pix_24 + _14;
  # DEBUG pix => pix_16
  goto <bb 21>;

  <bb 5>:
  pretmp_91 = (sizetype) stride_3(D);

  <bb 6>:
  # pix_30 = PHI <pix_24(5), pix_64(19)>
  # d_31 = PHI <0(5), d_66(19)>
  # ivtmp_84 = PHI <2(5), ivtmp_82(19)>
  # DEBUG d => d_31
  # DEBUG pix => pix_30
  # DEBUG D#14 => MEM[(uint8_t *)pix_30 + -2B]
  # DEBUG p1 => (const int) D#14
  _26 = MEM[(uint8_t *)pix_30 + -1B];
  p0_27 = (const int) _26;
  # DEBUG p0 => p0_27
  _28 = *pix_30;
  q0_29 = (const int) _28;
  # DEBUG q0 => q0_29
  # DEBUG D#13 => MEM[(uint8_t *)pix_30 + 1B]
  # DEBUG q1 => (const int) D#13
  _34 = p0_27 - q0_29;
  _35 = ABS_EXPR <_34>;
  if (alpha_4(D) > _35)
    goto <bb 7>;
  else
    goto <bb 18>;

  <bb 7>:
  _21 = MEM[(uint8_t *)pix_30 + -2B];
  p1_22 = (const int) _21;
  _36 = p1_22 - p0_27;
  _37 = ABS_EXPR <_36>;
  if (beta_5(D) > _37)
    goto <bb 8>;
  else
    goto <bb 18>;

  <bb 8>:
  _32 = MEM[(uint8_t *)pix_30 + 1B];
  q1_33 = (const int) _32;
  _38 = q1_33 - q0_29;
  _39 = ABS_EXPR <_38>;
  if (beta_5(D) > _39)
    goto <bb 9>;
  else
    goto <bb 18>;

  <bb 9>:
  _40 = -tc_12;
  _41 = q0_29 - p0_27;
  _42 = _41 << 2;
  _43 = p1_22 - q1_33;
  _44 = _42 + _43;
  _45 = _44 + 4;
  _46 = _45 >> 3;
  # DEBUG v => _46
  # DEBUG i_min => _40
  # DEBUG i_max => tc_12
  if (_40 <= _46)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  iftmp.16_47 = MIN_EXPR <tc_12, _46>;

  <bb 11>:
  # iftmp.16_48 = PHI <_40(9), iftmp.16_47(10)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  # DEBUG delta => NULL
  _49 = p0_27 + iftmp.16_48;
  # DEBUG x => _49
  _50 = _49 & -256;
  if (_50 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  _51 = -_49;
  _52 = _51 >> 31;
  iftmp.17_53 = (unsigned char) _52;
  goto <bb 14>;

  <bb 13>:
  iftmp.17_54 = (unsigned char) _49;

  <bb 14>:
  # iftmp.17_55 = PHI <iftmp.17_53(12), iftmp.17_54(13)>
  # DEBUG x => NULL
  MEM[(uint8_t *)pix_30 + -1B] = iftmp.17_55;
  _56 = q0_29 - iftmp.16_48;
  # DEBUG x => _56
  _57 = _56 & -256;
  if (_57 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.17_60 = (unsigned char) _59;
  goto <bb 17>;

  <bb 16>:
  iftmp.17_61 = (unsigned char) _56;

  <bb 17>:
  # iftmp.17_62 = PHI <iftmp.17_60(15), iftmp.17_61(16)>
  # DEBUG x => NULL
  *pix_30 = iftmp.17_62;

  <bb 18>:
  pix_64 = pix_30 + pretmp_91;
  # DEBUG pix => pix_64
  d_66 = d_31 + 1;
  # DEBUG d => d_66
  # DEBUG d => d_66
  # DEBUG pix => pix_64
  ivtmp_82 = ivtmp_84 - 1;
  if (ivtmp_82 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:
  goto <bb 6>;

  <bb 20>:
  _85 = pretmp_91 + pretmp_91;
  pix_88 = pix_24 + _85;

  <bb 21>:
  # pix_70 = PHI <pix_16(4), pix_88(20)>
  # DEBUG pix => pix_70
  i_67 = i_76 + 1;
  # DEBUG i => i_67
  # DEBUG i => i_67
  # DEBUG pix => pix_70
  ivtmp_80 = ivtmp_81 - 1;
  if (ivtmp_80 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  goto <bb 3>;

  <bb 23>:
  # DEBUG pix => NULL
  # DEBUG xstride => NULL
  # DEBUG ystride => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  # DEBUG tc0 => NULL
  # DEBUG q1 => NULL
  # DEBUG q0 => NULL
  # DEBUG p0 => NULL
  # DEBUG p1 => NULL
  # DEBUG tc => NULL
  # DEBUG d => NULL
  # DEBUG i => NULL
  return;

}



;; Function deblock_v_luma_intra_c (deblock_v_luma_intra_c, funcdef_no=133, decl_uid=6039, cgraph_uid=133, symbol_order=179)


Analyzing loop at common/frame.c:509
common/frame.c:509:5: note: ===== analyze_loop_nest =====
common/frame.c:509:5: note: === vect_analyze_loop_form ===
common/frame.c:509:5: note: not vectorized: control flow in loop.
common/frame.c:509:5: note: bad loop form.
common/frame.c:550:13: note: vectorized 0 loops in function.
deblock_v_luma_intra_c (uint8_t * pix, int stride, int alpha, int beta)
{
  int d;
  const int p2;
  const int p1;
  const int p0;
  const int q0;
  const int q1;
  const int q2;
  const int p3;
  const int q3;
  uint8_t * pix;
  uint8_t * _10;
  unsigned char _11;
  uint8_t * _15;
  unsigned char _16;
  uint8_t * _20;
  unsigned char _21;
  unsigned char _23;
  uint8_t * _26;
  unsigned char _27;
  uint8_t * _31;
  unsigned char _32;
  int _34;
  int _35;
  int _36;
  int _37;
  int _38;
  int _39;
  int _40;
  int _41;
  int _42;
  int _43;
  int _44;
  sizetype _45;
  uint8_t * _46;
  unsigned char _47;
  int _49;
  int _50;
  int _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  unsigned char _58;
  int _59;
  int _60;
  int _61;
  int _62;
  int _63;
  unsigned char _64;
  int _65;
  int _66;
  int _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  unsigned char _73;
  int _74;
  int _75;
  int _76;
  int _77;
  int _78;
  unsigned char _79;
  int _80;
  int _81;
  int _82;
  sizetype _83;
  uint8_t * _84;
  unsigned char _85;
  int _87;
  int _88;
  int _89;
  int _90;
  int _91;
  int _92;
  int _93;
  int _94;
  int _95;
  unsigned char _96;
  int _97;
  int _98;
  int _99;
  int _100;
  int _101;
  unsigned char _102;
  int _103;
  int _104;
  int _105;
  int _106;
  int _107;
  int _108;
  int _109;
  int _110;
  unsigned char _111;
  int _112;
  int _113;
  int _114;
  int _115;
  int _116;
  unsigned char _117;
  int _118;
  int _119;
  int _120;
  int _121;
  int _122;
  unsigned char _123;
  int _124;
  int _125;
  int _126;
  int _127;
  int _128;
  unsigned char _129;
  unsigned int ivtmp_165;
  unsigned int ivtmp_166;
  unsigned int _167;
  unsigned int _168;
  unsigned int _169;
  unsigned int _170;
  unsigned int _171;
  unsigned int _172;
  int pretmp_173;
  sizetype pretmp_174;
  int pretmp_175;
  sizetype pretmp_176;
  int pretmp_177;
  sizetype pretmp_178;
  sizetype pretmp_179;
  int pretmp_180;
  sizetype pretmp_181;

  <bb 2>:
  # DEBUG pix => pix_2(D)
  # DEBUG xstride => stride_3(D)
  # DEBUG ystride => 1
  # DEBUG alpha => alpha_4(D)
  # DEBUG beta => beta_5(D)
  # DEBUG d => 0
  # DEBUG d => 0
  # DEBUG pix => pix_2(D)
  pretmp_173 = stride_3(D) * -3;
  pretmp_174 = (sizetype) pretmp_173;
  pretmp_175 = stride_3(D) * -2;
  pretmp_176 = (sizetype) pretmp_175;
  pretmp_177 = -stride_3(D);
  pretmp_178 = (sizetype) pretmp_177;
  pretmp_179 = (sizetype) stride_3(D);
  pretmp_180 = stride_3(D) * 2;
  pretmp_181 = (sizetype) pretmp_180;
  _40 = alpha_4(D) >> 2;
  _172 = (unsigned int) _40;
  _171 = _172 + 1;
  _41 = (int) _171;
  _170 = (unsigned int) stride_3(D);
  _169 = _170 * 4294967292;
  _44 = (int) _169;
  _45 = (sizetype) _44;
  _168 = (unsigned int) stride_3(D);
  _167 = _168 * 3;
  _82 = (int) _167;
  _83 = (sizetype) _82;

  <bb 3>:
  # pix_146 = PHI <pix_131(15), pix_2(D)(2)>
  # d_148 = PHI <d_133(15), 0(2)>
  # ivtmp_166 = PHI <ivtmp_165(15), 16(2)>
  # DEBUG d => d_148
  # DEBUG pix => pix_146
  # DEBUG D#27 => pix_146 + pretmp_174
  # DEBUG D#26 => *D#27
  # DEBUG p2 => (const int) D#26
  # DEBUG D#25 => pix_146 + pretmp_176
  # DEBUG D#24 => *D#25
  # DEBUG p1 => (const int) D#24
  _20 = pix_146 + pretmp_178;
  _21 = *_20;
  p0_22 = (const int) _21;
  # DEBUG p0 => p0_22
  _23 = *pix_146;
  q0_24 = (const int) _23;
  # DEBUG q0 => q0_24
  # DEBUG D#23 => pix_146 + pretmp_179
  # DEBUG D#22 => *D#23
  # DEBUG q1 => (const int) D#22
  # DEBUG D#21 => pix_146 + pretmp_181
  # DEBUG D#20 => *D#21
  # DEBUG q2 => (const int) D#20
  _34 = p0_22 - q0_24;
  _35 = ABS_EXPR <_34>;
  if (alpha_4(D) > _35)
    goto <bb 4>;
  else
    goto <bb 14>;

  <bb 4>:
  _15 = pix_146 + pretmp_176;
  _16 = *_15;
  p1_17 = (const int) _16;
  _36 = p1_17 - p0_22;
  _37 = ABS_EXPR <_36>;
  if (beta_5(D) > _37)
    goto <bb 5>;
  else
    goto <bb 14>;

  <bb 5>:
  _26 = pix_146 + pretmp_179;
  _27 = *_26;
  q1_28 = (const int) _27;
  _38 = q1_28 - q0_24;
  _39 = ABS_EXPR <_38>;
  if (beta_5(D) > _39)
    goto <bb 6>;
  else
    goto <bb 14>;

  <bb 6>:
  if (_35 <= _41)
    goto <bb 7>;
  else
    goto <bb 13>;

  <bb 7>:
  _10 = pix_146 + pretmp_174;
  _11 = *_10;
  p2_12 = (const int) _11;
  _31 = pix_146 + pretmp_181;
  _32 = *_31;
  _42 = p2_12 - p0_22;
  _43 = ABS_EXPR <_42>;
  if (beta_5(D) > _43)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _46 = pix_146 + _45;
  _47 = *_46;
  p3_48 = (const int) _47;
  # DEBUG p3 => p3_48
  _49 = p1_17 * 2;
  _50 = p2_12 + _49;
  _51 = p0_22 * 2;
  _52 = _50 + _51;
  _53 = q0_24 * 2;
  _54 = _52 + _53;
  _55 = q1_28 + _54;
  _56 = _55 + 4;
  _57 = _56 >> 3;
  _58 = (unsigned char) _57;
  *_20 = _58;
  _59 = p2_12 + p1_17;
  _60 = p0_22 + _59;
  _61 = q0_24 + _60;
  _62 = _61 + 2;
  _63 = _62 >> 2;
  _64 = (unsigned char) _63;
  *_15 = _64;
  _65 = p3_48 * 2;
  _66 = p2_12 * 3;
  _67 = _65 + _66;
  _68 = p1_17 + _67;
  _69 = p0_22 + _68;
  _70 = q0_24 + _69;
  _71 = _70 + 4;
  _72 = _71 >> 3;
  _73 = (unsigned char) _72;
  *_10 = _73;
  goto <bb 10>;

  <bb 9>:
  _74 = p1_17 * 2;
  _75 = p0_22 + _74;
  _76 = q1_28 + _75;
  _77 = _76 + 2;
  _78 = _77 >> 2;
  _79 = (unsigned char) _78;
  *_20 = _79;

  <bb 10>:
  q2_33 = (const int) _32;
  _80 = q2_33 - q0_24;
  _81 = ABS_EXPR <_80>;
  if (beta_5(D) > _81)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  _84 = pix_146 + _83;
  _85 = *_84;
  q3_86 = (const int) _85;
  # DEBUG q3 => q3_86
  _87 = p0_22 * 2;
  _88 = p1_17 + _87;
  _89 = q0_24 * 2;
  _90 = _88 + _89;
  _91 = q1_28 * 2;
  _92 = _90 + _91;
  _93 = q2_33 + _92;
  _94 = _93 + 4;
  _95 = _94 >> 3;
  _96 = (unsigned char) _95;
  *pix_146 = _96;
  _97 = p0_22 + q0_24;
  _98 = q1_28 + _97;
  _99 = q2_33 + _98;
  _100 = _99 + 2;
  _101 = _100 >> 2;
  _102 = (unsigned char) _101;
  *_26 = _102;
  _103 = q3_86 * 2;
  _104 = q2_33 * 3;
  _105 = _103 + _104;
  _106 = q1_28 + _105;
  _107 = q0_24 + _106;
  _108 = p0_22 + _107;
  _109 = _108 + 4;
  _110 = _109 >> 3;
  _111 = (unsigned char) _110;
  *_31 = _111;
  goto <bb 14>;

  <bb 12>:
  _112 = q1_28 * 2;
  _113 = q0_24 + _112;
  _114 = p1_17 + _113;
  _115 = _114 + 2;
  _116 = _115 >> 2;
  _117 = (unsigned char) _116;
  *pix_146 = _117;
  goto <bb 14>;

  <bb 13>:
  _118 = p1_17 * 2;
  _119 = p0_22 + _118;
  _120 = q1_28 + _119;
  _121 = _120 + 2;
  _122 = _121 >> 2;
  _123 = (unsigned char) _122;
  *_20 = _123;
  _124 = q1_28 * 2;
  _125 = q0_24 + _124;
  _126 = p1_17 + _125;
  _127 = _126 + 2;
  _128 = _127 >> 2;
  _129 = (unsigned char) _128;
  *pix_146 = _129;

  <bb 14>:
  pix_131 = pix_146 + 1;
  # DEBUG pix => pix_131
  d_133 = d_148 + 1;
  # DEBUG d => d_133
  # DEBUG d => d_133
  # DEBUG pix => pix_131
  ivtmp_165 = ivtmp_166 - 1;
  if (ivtmp_165 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  goto <bb 3>;

  <bb 16>:
  # DEBUG pix => NULL
  # DEBUG xstride => NULL
  # DEBUG ystride => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  # DEBUG q3 => NULL
  # DEBUG p3 => NULL
  # DEBUG q2 => NULL
  # DEBUG q1 => NULL
  # DEBUG q0 => NULL
  # DEBUG p0 => NULL
  # DEBUG p1 => NULL
  # DEBUG p2 => NULL
  # DEBUG d => NULL
  return;

}



;; Function deblock_h_chroma_intra_c (deblock_h_chroma_intra_c, funcdef_no=137, decl_uid=6072, cgraph_uid=137, symbol_order=183)


Analyzing loop at common/frame.c:562
common/frame.c:562:5: note: ===== analyze_loop_nest =====
common/frame.c:562:5: note: === vect_analyze_loop_form ===
common/frame.c:562:5: note: not vectorized: control flow in loop.
common/frame.c:562:5: note: bad loop form.
common/frame.c:581:13: note: vectorized 0 loops in function.
deblock_h_chroma_intra_c (uint8_t * pix, int stride, int alpha, int beta)
{
  int d;
  const int p1;
  const int p0;
  const int q0;
  const int q1;
  uint8_t * pix;
  unsigned char _11;
  unsigned char _16;
  unsigned char _18;
  unsigned char _22;
  int _24;
  int _25;
  int _26;
  int _27;
  int _28;
  int _29;
  int _30;
  int _31;
  int _32;
  int _33;
  int _34;
  unsigned char _35;
  int _36;
  int _37;
  int _38;
  int _39;
  int _40;
  unsigned char _41;
  unsigned int ivtmp_53;
  unsigned int ivtmp_54;
  sizetype pretmp_55;

  <bb 2>:
  # DEBUG pix => pix_2(D)
  # DEBUG xstride => 1
  # DEBUG ystride => stride_3(D)
  # DEBUG alpha => alpha_4(D)
  # DEBUG beta => beta_5(D)
  # DEBUG d => 0
  # DEBUG d => 0
  # DEBUG pix => pix_2(D)
  pretmp_55 = (sizetype) stride_3(D);

  <bb 3>:
  # pix_8 = PHI <pix_43(8), pix_2(D)(2)>
  # d_13 = PHI <d_45(8), 0(2)>
  # ivtmp_54 = PHI <ivtmp_53(8), 8(2)>
  # DEBUG d => d_13
  # DEBUG pix => pix_8
  # DEBUG D#30 => MEM[(uint8_t *)pix_8 + -2B]
  # DEBUG p1 => (const int) D#30
  _16 = MEM[(uint8_t *)pix_8 + -1B];
  p0_17 = (const int) _16;
  # DEBUG p0 => p0_17
  _18 = *pix_8;
  q0_19 = (const int) _18;
  # DEBUG q0 => q0_19
  # DEBUG D#29 => MEM[(uint8_t *)pix_8 + 1B]
  # DEBUG q1 => (const int) D#29
  _24 = p0_17 - q0_19;
  _25 = ABS_EXPR <_24>;
  if (alpha_4(D) > _25)
    goto <bb 4>;
  else
    goto <bb 7>;

  <bb 4>:
  _11 = MEM[(uint8_t *)pix_8 + -2B];
  p1_12 = (const int) _11;
  _26 = p1_12 - p0_17;
  _27 = ABS_EXPR <_26>;
  if (beta_5(D) > _27)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  _22 = MEM[(uint8_t *)pix_8 + 1B];
  q1_23 = (const int) _22;
  _28 = q1_23 - q0_19;
  _29 = ABS_EXPR <_28>;
  if (beta_5(D) > _29)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  _30 = p1_12 * 2;
  _31 = p0_17 + _30;
  _32 = q1_23 + _31;
  _33 = _32 + 2;
  _34 = _33 >> 2;
  _35 = (unsigned char) _34;
  MEM[(uint8_t *)pix_8 + -1B] = _35;
  _36 = q1_23 * 2;
  _37 = q0_19 + _36;
  _38 = p1_12 + _37;
  _39 = _38 + 2;
  _40 = _39 >> 2;
  _41 = (unsigned char) _40;
  *pix_8 = _41;

  <bb 7>:
  pix_43 = pix_8 + pretmp_55;
  # DEBUG pix => pix_43
  d_45 = d_13 + 1;
  # DEBUG d => d_45
  # DEBUG d => d_45
  # DEBUG pix => pix_43
  ivtmp_53 = ivtmp_54 - 1;
  if (ivtmp_53 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  goto <bb 3>;

  <bb 9>:
  # DEBUG pix => NULL
  # DEBUG xstride => NULL
  # DEBUG ystride => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  # DEBUG q1 => NULL
  # DEBUG q0 => NULL
  # DEBUG p0 => NULL
  # DEBUG p1 => NULL
  # DEBUG d => NULL
  return;

}



;; Function plane_expand_border (plane_expand_border, funcdef_no=118, decl_uid=5833, cgraph_uid=118, symbol_order=161)


Analyzing loop at common/frame.c:233
common/frame.c:233:5: note: ===== analyze_loop_nest =====
common/frame.c:233:5: note: === vect_analyze_loop_form ===
split exit edge.
common/frame.c:233:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [1, + , 1](no_overflow) < i_padv_38(D)
  bounds on difference of bases: -2147483649 ... 2147483646
  result:
    zero if i_padv_38(D) <= 0
    # of iterations (unsigned int) i_padv_38(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:233:5: note: Symbolic number of iterations is (unsigned int) MAX_EXPR <i_padv_38(D), 1>
common/frame.c:233:5: note: === vect_analyze_data_refs ===
common/frame.c:233:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:233:5: note: bad data references.

Analyzing loop at common/frame.c:229
common/frame.c:229:5: note: ===== analyze_loop_nest =====
common/frame.c:229:5: note: === vect_analyze_loop_form ===
common/frame.c:229:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) < i_padv_38(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) i_padv_38(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:229:5: note: Symbolic number of iterations is (unsigned int) i_padv_38(D)
common/frame.c:229:5: note: === vect_analyze_data_refs ===
common/frame.c:229:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:229:5: note: bad data references.

Analyzing loop at common/frame.c:220
common/frame.c:220:5: note: ===== analyze_loop_nest =====
common/frame.c:220:5: note: === vect_analyze_loop_form ===
split exit edge.
common/frame.c:220:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < i_height_10(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) i_height_10(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:220:5: note: Symbolic number of iterations is (unsigned int) i_height_10(D)
common/frame.c:220:5: note: === vect_analyze_data_refs ===
Creating dr for *_17
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) i_stride_13(D)
	aligned to: 128
	base_object: *pix_16(D)
	Access function 0: {0B, +, (sizetype) i_stride_13(D)}_1
common/frame.c:220:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:220:5: note: bad data references.
common/frame.c:216:13: note: vectorized 0 loops in function.
plane_expand_border (uint8_t * pix, int i_stride, int i_width, int i_height, int i_padh, int i_padv, int b_pad_top, int b_pad_bottom)
{
  int y;
  int _14;
  sizetype _15;
  uint8_t * _17;
  unsigned char _18;
  int _19;
  sizetype _23;
  uint8_t * _24;
  sizetype _29;
  sizetype _30;
  uint8_t * _31;
  unsigned char _32;
  int _33;
  uint8_t * _34;
  int _45;
  int _46;
  sizetype _47;
  sizetype _48;
  uint8_t * _49;
  int _63;
  int _64;
  sizetype _65;
  sizetype _66;
  uint8_t * _67;
  int pretmp_96;
  sizetype pretmp_98;
  sizetype prephitmp_99;
  int pretmp_100;
  int pretmp_102;
  long unsigned int pretmp_104;
  long unsigned int prephitmp_105;
  int pretmp_106;
  int pretmp_107;
  sizetype pretmp_108;
  sizetype pretmp_109;
  uint8_t * pretmp_110;
  int pretmp_112;
  sizetype pretmp_113;
  int pretmp_114;
  int pretmp_115;
  long unsigned int pretmp_116;
  uint8_t * pretmp_117;
  long unsigned int pretmp_120;
  int pretmp_123;
  sizetype pretmp_124;
  sizetype pretmp_125;

  <bb 2>:
  # DEBUG y => 0
  # DEBUG y => 0
  if (i_height_10(D) > 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  if (b_pad_top_37(D) != 0)
    goto <bb 7>;
  else
    goto <bb 11>;

  <bb 4>:
  pretmp_120 = (long unsigned int) i_padh_11(D);
  pretmp_123 = -i_padh_11(D);
  pretmp_124 = (sizetype) pretmp_123;
  pretmp_125 = (sizetype) i_width_27(D);

  <bb 5>:
  # y_78 = PHI <0(4), y_36(6)>
  # DEBUG y => y_78
  # DEBUG D#47 => (long unsigned int) i_padh_11(D)
  _14 = i_stride_13(D) * y_78;
  _15 = (sizetype) _14;
  _17 = pix_16(D) + _15;
  _18 = *_17;
  _19 = (int) _18;
  _23 = _15 + pretmp_124;
  _24 = pix_16(D) + _23;
  # DEBUG __dest => _24
  # DEBUG __ch => _19
  # DEBUG __len => D#47
  __builtin_memset (_24, _19, pretmp_120);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  _29 = _15 + pretmp_125;
  _30 = _29 + 18446744073709551615;
  _31 = pix_16(D) + _30;
  _32 = *_31;
  _33 = (int) _32;
  _34 = pix_16(D) + _29;
  # DEBUG __dest => _34
  # DEBUG __ch => _33
  # DEBUG __len => D#47
  __builtin_memset (_34, _33, pretmp_120);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  y_36 = y_78 + 1;
  # DEBUG y => y_36
  # DEBUG y => y_36
  if (i_height_10(D) > y_36)
    goto <bb 6>;
  else
    goto <bb 20>;

  <bb 20>:
  goto <bb 3>;

  <bb 6>:
  goto <bb 5>;

  <bb 7>:
  # DEBUG y => 0
  if (i_padv_38(D) > 0)
    goto <bb 8>;
  else
    goto <bb 11>;

  <bb 8>:
  pretmp_112 = -i_padh_11(D);
  pretmp_113 = (sizetype) pretmp_112;
  pretmp_114 = i_padh_11(D) * 2;
  pretmp_115 = i_width_27(D) + pretmp_114;
  pretmp_116 = (long unsigned int) pretmp_115;
  pretmp_117 = pix_16(D) + pretmp_113;

  <bb 9>:
  # y_80 = PHI <0(8), y_51(10)>
  # DEBUG y => y_80
  # DEBUG D#46 => i_padh_11(D) * 2
  # DEBUG D#45 => i_width_27(D) + D#46
  # DEBUG D#44 => -i_padh_11(D)
  # DEBUG D#43 => (sizetype) D#44
  _45 = ~y_80;
  _46 = i_stride_13(D) * _45;
  _47 = (sizetype) _46;
  _48 = _47 + pretmp_113;
  _49 = pix_16(D) + _48;
  # DEBUG __dest => _49
  # DEBUG __src => pix_16(D) + D#43
  # DEBUG __len => (long unsigned int) D#45
  __builtin_memcpy (_49, pretmp_117, pretmp_116);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  y_51 = y_80 + 1;
  # DEBUG y => y_51
  # DEBUG y => y_51
  if (i_padv_38(D) > y_51)
    goto <bb 10>;
  else
    goto <bb 18>;

  <bb 10>:
  goto <bb 9>;

  <bb 11>:
  if (b_pad_bottom_52(D) != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:
  return;

  <bb 13>:
  # DEBUG y => 0
  if (i_padv_38(D) > 0)
    goto <bb 14>;
  else
    goto <bb 12>;

  <bb 14>:
  pretmp_96 = -i_padh_11(D);
  pretmp_98 = (sizetype) pretmp_96;
  pretmp_100 = i_padh_11(D) * 2;
  pretmp_102 = i_width_27(D) + pretmp_100;
  pretmp_104 = (long unsigned int) pretmp_102;

  <bb 15>:
  # prephitmp_99 = PHI <pretmp_98(14), pretmp_113(18)>
  # prephitmp_105 = PHI <pretmp_104(14), pretmp_116(18)>
  # DEBUG y => 0
  pretmp_106 = i_height_10(D) + -1;
  pretmp_107 = i_stride_13(D) * pretmp_106;
  pretmp_108 = (sizetype) pretmp_107;
  pretmp_109 = prephitmp_99 + pretmp_108;
  pretmp_110 = pix_16(D) + pretmp_109;

  <bb 16>:
  # y_77 = PHI <0(15), y_69(17)>
  # DEBUG y => y_77
  # DEBUG D#42 => i_padh_11(D) * 2
  # DEBUG D#41 => i_width_27(D) + D#42
  # DEBUG D#40 => -i_padh_11(D)
  # DEBUG D#39 => (sizetype) D#40
  # DEBUG D#38 => i_height_10(D) + -1
  # DEBUG D#37 => i_stride_13(D) * D#38
  # DEBUG D#36 => (sizetype) D#37
  # DEBUG D#35 => D#39 + D#36
  _63 = i_height_10(D) + y_77;
  _64 = i_stride_13(D) * _63;
  _65 = (sizetype) _64;
  _66 = _65 + prephitmp_99;
  _67 = pix_16(D) + _66;
  # DEBUG __dest => _67
  # DEBUG __src => pix_16(D) + D#35
  # DEBUG __len => (long unsigned int) D#41
  __builtin_memcpy (_67, pretmp_110, prephitmp_105);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  y_69 = y_77 + 1;
  # DEBUG y => y_69
  # DEBUG y => y_69
  if (i_padv_38(D) > y_69)
    goto <bb 17>;
  else
    goto <bb 19>;

  <bb 19>:
  goto <bb 12>;

  <bb 17>:
  goto <bb 16>;

  <bb 18>:
  if (b_pad_bottom_52(D) != 0)
    goto <bb 15>;
  else
    goto <bb 12>;

}



;; Function munge_cavlc_nnz_row (munge_cavlc_nnz_row, funcdef_no=123, decl_uid=5909, cgraph_uid=123, symbol_order=166)


Analyzing loop at common/frame.c:339
common/frame.c:339:5: note: ===== analyze_loop_nest =====
common/frame.c:339:5: note: === vect_analyze_loop_form ===
common/frame.c:339:5: note: not vectorized: control flow in loop.
common/frame.c:339:5: note: bad loop form.
common/frame.c:334:13: note: vectorized 0 loops in function.
munge_cavlc_nnz_row (struct x264_t * h, int mb_y, uint8_t[16] * buf)
{
  int nnz;
  int x;
  uint32_t[6] * src;
  int iftmp.11_2;
  int iftmp.12_3;
  int iftmp.13_4;
  int iftmp.14_5;
  uint8_t[24] * _10;
  struct x264_sps_t * _11;
  int _12;
  int _14;
  long unsigned int _15;
  long unsigned int _16;
  int8_t * _18;
  sizetype _19;
  struct x264_sps_t * _20;
  int _21;
  long unsigned int _22;
  long unsigned int _23;
  uint32_t[6] * _24;
  long unsigned int _25;
  uint8_t[16] * _27;
  int8_t * _29;
  signed char _30;
  unsigned int _31;
  unsigned int _32;
  unsigned int _33;
  int _35;
  int _36;
  int _37;
  unsigned int _38;
  unsigned int _41;
  unsigned int _42;
  unsigned int _43;
  int _45;
  int _46;
  int _47;
  unsigned int _48;
  long unsigned int _53;
  __int128 unsigned _54;

  <bb 2>:
  _10 = h_9(D)->mb.non_zero_count;
  _11 = h_9(D)->sps;
  _12 = _11->i_mb_width;
  _14 = _12 * mb_y_13(D);
  _15 = (long unsigned int) _14;
  _16 = _15 * 24;
  # DEBUG src => _10 + _16
  _18 = h_9(D)->mb.mb_transform_size;
  # DEBUG transform => _18 + _15
  # DEBUG x => 0
  # DEBUG x => 0
  if (_12 > 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # x_61 = PHI <0(4), x_51(16)>
  # DEBUG x => x_61
  _22 = (long unsigned int) x_61;
  _23 = _22 * 24;
  _53 = _16 + _23;
  _24 = _10 + _53;
  _25 = _22 * 16;
  _27 = buf_26(D) + _25;
  # DEBUG __dest => _27
  # DEBUG __src => _24
  # DEBUG __len => 16
  _54 = MEM[(char * {ref-all})_24];
  MEM[(char * {ref-all})_27] = _54;
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  _19 = _15 + _22;
  _29 = _18 + _19;
  _30 = *_29;
  if (_30 != 0)
    goto <bb 6>;
  else
    goto <bb 15>;

  <bb 6>:
  _31 = *_24[0];
  _32 = *_24[1];
  _33 = _31 | _32;
  nnz_34 = (int) _33;
  # DEBUG nnz => nnz_34
  _35 = nnz_34 & 65535;
  if (_35 != 0)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:

  <bb 8>:
  # iftmp.11_2 = PHI <257(6), 0(7)>
  _36 = nnz_34 >> 16;
  if (_36 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:

  <bb 10>:
  # iftmp.12_3 = PHI <16842752(9), 0(8)>
  _37 = iftmp.11_2 + iftmp.12_3;
  _38 = (unsigned int) _37;
  *_24[1] = _38;
  *_24[0] = _38;
  _41 = *_24[2];
  _42 = *_24[3];
  _43 = _41 | _42;
  nnz_44 = (int) _43;
  # DEBUG nnz => nnz_44
  _45 = nnz_44 & 65535;
  if (_45 != 0)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:

  <bb 12>:
  # iftmp.13_4 = PHI <257(10), 0(11)>
  _46 = nnz_44 >> 16;
  if (_46 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:

  <bb 14>:
  # iftmp.14_5 = PHI <16842752(13), 0(12)>
  _47 = iftmp.13_4 + iftmp.14_5;
  _48 = (unsigned int) _47;
  *_24[3] = _48;
  *_24[2] = _48;

  <bb 15>:
  x_51 = x_61 + 1;
  # DEBUG x => x_51
  # DEBUG x => x_51
  _20 = h_9(D)->sps;
  _21 = _20->i_mb_width;
  if (_21 > x_51)
    goto <bb 16>;
  else
    goto <bb 3>;

  <bb 16>:
  goto <bb 5>;

}



;; Function restore_cavlc_nnz_row (restore_cavlc_nnz_row, funcdef_no=124, decl_uid=5921, cgraph_uid=124, symbol_order=167)


Analyzing loop at common/frame.c:356
common/frame.c:356:5: note: ===== analyze_loop_nest =====
common/frame.c:356:5: note: === vect_analyze_loop_form ===
split exit edge.
common/frame.c:356:5: note: === get_loop_niters ===
common/frame.c:356:5: note: not vectorized: number of iterations cannot be computed.
common/frame.c:356:5: note: bad loop form.
common/frame.c:352:13: note: vectorized 0 loops in function.
restore_cavlc_nnz_row (struct x264_t * h, int mb_y, uint8_t[16] * buf)
{
  int x;
  uint8_t[24] * _5;
  struct x264_sps_t * _6;
  int _7;
  int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  struct x264_sps_t * _13;
  int _14;
  long unsigned int _15;
  long unsigned int _16;
  uint8_t[16] * _18;
  long unsigned int _19;
  uint8_t[24] * _20;
  __int128 unsigned _24;

  <bb 2>:
  _5 = h_4(D)->mb.non_zero_count;
  _6 = h_4(D)->sps;
  _7 = _6->i_mb_width;
  _9 = _7 * mb_y_8(D);
  _10 = (long unsigned int) _9;
  _11 = _10 * 24;
  # DEBUG dst => _5 + _11
  # DEBUG x => 0
  # DEBUG x => 0
  if (_7 > 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # x_28 = PHI <0(4), x_22(6)>
  # DEBUG x => x_28
  _15 = (long unsigned int) x_28;
  _16 = _15 * 16;
  _18 = buf_17(D) + _16;
  _19 = _15 * 24;
  _12 = _11 + _19;
  _20 = _5 + _12;
  # DEBUG __dest => _20
  # DEBUG __src => _18
  # DEBUG __len => 16
  _24 = MEM[(char * {ref-all})_18];
  MEM[(char * {ref-all})_20] = _24;
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  x_22 = x_28 + 1;
  # DEBUG x => x_22
  # DEBUG x => x_22
  _13 = h_4(D)->sps;
  _14 = _13->i_mb_width;
  if (_14 > x_22)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 3>;

  <bb 6>:
  goto <bb 5>;

}



;; Function deblock_v_chroma_intra_c (deblock_v_chroma_intra_c, funcdef_no=136, decl_uid=6066, cgraph_uid=136, symbol_order=182)


Analyzing loop at common/frame.c:562
common/frame.c:562:5: note: ===== analyze_loop_nest =====
common/frame.c:562:5: note: === vect_analyze_loop_form ===
common/frame.c:562:5: note: not vectorized: control flow in loop.
common/frame.c:562:5: note: bad loop form.
common/frame.c:577:13: note: vectorized 0 loops in function.
deblock_v_chroma_intra_c (uint8_t * pix, int stride, int alpha, int beta)
{
  int d;
  const int p1;
  const int p0;
  const int q0;
  const int q1;
  uint8_t * pix;
  uint8_t * _10;
  unsigned char _11;
  uint8_t * _15;
  unsigned char _16;
  unsigned char _18;
  uint8_t * _21;
  unsigned char _22;
  int _24;
  int _25;
  int _26;
  int _27;
  int _28;
  int _29;
  int _30;
  int _31;
  int _32;
  int _33;
  int _34;
  unsigned char _35;
  int _36;
  int _37;
  int _38;
  int _39;
  int _40;
  unsigned char _41;
  unsigned int ivtmp_66;
  unsigned int ivtmp_67;
  int pretmp_68;
  sizetype pretmp_69;
  int pretmp_70;
  sizetype pretmp_71;
  sizetype pretmp_72;

  <bb 2>:
  # DEBUG pix => pix_2(D)
  # DEBUG xstride => stride_3(D)
  # DEBUG ystride => 1
  # DEBUG alpha => alpha_4(D)
  # DEBUG beta => beta_5(D)
  # DEBUG d => 0
  # DEBUG d => 0
  # DEBUG pix => pix_2(D)
  pretmp_68 = stride_3(D) * -2;
  pretmp_69 = (sizetype) pretmp_68;
  pretmp_70 = -stride_3(D);
  pretmp_71 = (sizetype) pretmp_70;
  pretmp_72 = (sizetype) stride_3(D);

  <bb 3>:
  # pix_51 = PHI <pix_43(8), pix_2(D)(2)>
  # d_52 = PHI <d_45(8), 0(2)>
  # ivtmp_67 = PHI <ivtmp_66(8), 8(2)>
  # DEBUG d => d_52
  # DEBUG pix => pix_51
  # DEBUG D#62 => pix_51 + pretmp_69
  # DEBUG D#61 => *D#62
  # DEBUG p1 => (const int) D#61
  _15 = pix_51 + pretmp_71;
  _16 = *_15;
  p0_17 = (const int) _16;
  # DEBUG p0 => p0_17
  _18 = *pix_51;
  q0_19 = (const int) _18;
  # DEBUG q0 => q0_19
  # DEBUG D#60 => pix_51 + pretmp_72
  # DEBUG D#59 => *D#60
  # DEBUG q1 => (const int) D#59
  _24 = p0_17 - q0_19;
  _25 = ABS_EXPR <_24>;
  if (alpha_4(D) > _25)
    goto <bb 4>;
  else
    goto <bb 7>;

  <bb 4>:
  _10 = pix_51 + pretmp_69;
  _11 = *_10;
  p1_12 = (const int) _11;
  _26 = p1_12 - p0_17;
  _27 = ABS_EXPR <_26>;
  if (beta_5(D) > _27)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  _21 = pix_51 + pretmp_72;
  _22 = *_21;
  q1_23 = (const int) _22;
  _28 = q1_23 - q0_19;
  _29 = ABS_EXPR <_28>;
  if (beta_5(D) > _29)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  _30 = p1_12 * 2;
  _31 = p0_17 + _30;
  _32 = q1_23 + _31;
  _33 = _32 + 2;
  _34 = _33 >> 2;
  _35 = (unsigned char) _34;
  *_15 = _35;
  _36 = q1_23 * 2;
  _37 = q0_19 + _36;
  _38 = p1_12 + _37;
  _39 = _38 + 2;
  _40 = _39 >> 2;
  _41 = (unsigned char) _40;
  *pix_51 = _41;

  <bb 7>:
  pix_43 = pix_51 + 1;
  # DEBUG pix => pix_43
  d_45 = d_52 + 1;
  # DEBUG d => d_45
  # DEBUG d => d_45
  # DEBUG pix => pix_43
  ivtmp_66 = ivtmp_67 - 1;
  if (ivtmp_66 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  goto <bb 3>;

  <bb 9>:
  # DEBUG pix => NULL
  # DEBUG xstride => NULL
  # DEBUG ystride => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  # DEBUG q1 => NULL
  # DEBUG q0 => NULL
  # DEBUG p0 => NULL
  # DEBUG p1 => NULL
  # DEBUG d => NULL
  return;

}



;; Function deblock_v_chroma_c (deblock_v_chroma_c, funcdef_no=130, decl_uid=6007, cgraph_uid=130, symbol_order=176)


Analyzing loop at common/frame.c:472
common/frame.c:472:5: note: ===== analyze_loop_nest =====
common/frame.c:472:5: note: === vect_analyze_loop_form ===
common/frame.c:472:5: note: ===== analyze_loop_nest_1 =====
common/frame.c:472:5: note: === vect_analyze_loop_form ===
common/frame.c:472:5: note: not vectorized: control flow in loop.
common/frame.c:472:5: note: bad inner-loop form.
common/frame.c:472:5: note: not vectorized: Bad inner loop.
common/frame.c:472:5: note: bad loop form.

Analyzing loop at common/frame.c:480
common/frame.c:480:9: note: ===== analyze_loop_nest =====
common/frame.c:480:9: note: === vect_analyze_loop_form ===
common/frame.c:480:9: note: not vectorized: control flow in loop.
common/frame.c:480:9: note: bad loop form.
common/frame.c:497:13: note: vectorized 0 loops in function.
deblock_v_chroma_c (uint8_t * pix, int stride, int alpha, int beta, int8_t * tc0)
{
  int i;
  int d;
  const int tc;
  const int p1;
  const int p0;
  const int q0;
  const int q1;
  uint8_t * pix;
  sizetype _9;
  int8_t * _10;
  signed char _11;
  uint8_t * _20;
  unsigned char _21;
  uint8_t * _25;
  unsigned char _26;
  unsigned char _28;
  uint8_t * _31;
  unsigned char _32;
  int _34;
  int _35;
  int _36;
  int _37;
  int _38;
  int _39;
  int _40;
  int _41;
  int _42;
  int _43;
  int _44;
  int _45;
  int _46;
  int iftmp.16_47;
  int iftmp.16_48;
  int _49;
  int _50;
  int _51;
  int _52;
  unsigned char iftmp.17_53;
  unsigned char iftmp.17_54;
  unsigned char iftmp.17_55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.17_60;
  unsigned char iftmp.17_61;
  unsigned char iftmp.17_62;
  unsigned int ivtmp_93;
  unsigned int ivtmp_94;
  unsigned int ivtmp_95;
  unsigned int ivtmp_96;
  unsigned int _97;
  unsigned int _98;
  int pretmp_102;
  sizetype pretmp_103;
  int pretmp_104;
  sizetype pretmp_105;
  sizetype pretmp_106;

  <bb 2>:
  # DEBUG pix => pix_2(D)
  # DEBUG xstride => stride_3(D)
  # DEBUG ystride => 1
  # DEBUG alpha => alpha_4(D)
  # DEBUG beta => beta_5(D)
  # DEBUG tc0 => tc0_6(D)
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG pix => pix_2(D)
  _98 = (unsigned int) stride_3(D);
  _97 = _98 * 4294967294;
  pretmp_102 = (int) _97;
  pretmp_103 = (sizetype) pretmp_102;

  <bb 3>:
  # i_81 = PHI <i_67(22), 0(2)>
  # pix_79 = PHI <pix_70(22), pix_2(D)(2)>
  # ivtmp_94 = PHI <ivtmp_93(22), 4(2)>
  # DEBUG i => i_81
  # DEBUG pix => pix_79
  _9 = (sizetype) i_81;
  _10 = tc0_6(D) + _9;
  _11 = *_10;
  tc_12 = (const int) _11;
  # DEBUG tc => tc_12
  if (tc_12 <= 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  pix_16 = pix_79 + 2;
  # DEBUG pix => pix_16
  goto <bb 21>;

  <bb 5>:
  # DEBUG D#76 => (sizetype) pretmp_102
  pretmp_104 = -stride_3(D);
  pretmp_105 = (sizetype) pretmp_104;
  pretmp_106 = (sizetype) stride_3(D);

  <bb 6>:
  # pix_80 = PHI <pix_79(5), pix_64(19)>
  # d_69 = PHI <0(5), d_66(19)>
  # ivtmp_96 = PHI <2(5), ivtmp_95(19)>
  # DEBUG d => d_69
  # DEBUG pix => pix_80
  # DEBUG D#75 => pix_80 + D#76
  # DEBUG D#74 => *D#75
  # DEBUG p1 => (const int) D#74
  _25 = pix_80 + pretmp_105;
  _26 = *_25;
  p0_27 = (const int) _26;
  # DEBUG p0 => p0_27
  _28 = *pix_80;
  q0_29 = (const int) _28;
  # DEBUG q0 => q0_29
  # DEBUG D#73 => pix_80 + pretmp_106
  # DEBUG D#72 => *D#73
  # DEBUG q1 => (const int) D#72
  _34 = p0_27 - q0_29;
  _35 = ABS_EXPR <_34>;
  if (alpha_4(D) > _35)
    goto <bb 7>;
  else
    goto <bb 18>;

  <bb 7>:
  _20 = pix_80 + pretmp_103;
  _21 = *_20;
  p1_22 = (const int) _21;
  _36 = p1_22 - p0_27;
  _37 = ABS_EXPR <_36>;
  if (beta_5(D) > _37)
    goto <bb 8>;
  else
    goto <bb 18>;

  <bb 8>:
  _31 = pix_80 + pretmp_106;
  _32 = *_31;
  q1_33 = (const int) _32;
  _38 = q1_33 - q0_29;
  _39 = ABS_EXPR <_38>;
  if (beta_5(D) > _39)
    goto <bb 9>;
  else
    goto <bb 18>;

  <bb 9>:
  _40 = -tc_12;
  _41 = q0_29 - p0_27;
  _42 = _41 << 2;
  _43 = p1_22 - q1_33;
  _44 = _42 + _43;
  _45 = _44 + 4;
  _46 = _45 >> 3;
  # DEBUG v => _46
  # DEBUG i_min => _40
  # DEBUG i_max => tc_12
  if (_40 <= _46)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  iftmp.16_47 = MIN_EXPR <tc_12, _46>;

  <bb 11>:
  # iftmp.16_48 = PHI <_40(9), iftmp.16_47(10)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  # DEBUG delta => NULL
  _49 = p0_27 + iftmp.16_48;
  # DEBUG x => _49
  _50 = _49 & -256;
  if (_50 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  _51 = -_49;
  _52 = _51 >> 31;
  iftmp.17_53 = (unsigned char) _52;
  goto <bb 14>;

  <bb 13>:
  iftmp.17_54 = (unsigned char) _49;

  <bb 14>:
  # iftmp.17_55 = PHI <iftmp.17_53(12), iftmp.17_54(13)>
  # DEBUG x => NULL
  *_25 = iftmp.17_55;
  _56 = q0_29 - iftmp.16_48;
  # DEBUG x => _56
  _57 = _56 & -256;
  if (_57 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.17_60 = (unsigned char) _59;
  goto <bb 17>;

  <bb 16>:
  iftmp.17_61 = (unsigned char) _56;

  <bb 17>:
  # iftmp.17_62 = PHI <iftmp.17_60(15), iftmp.17_61(16)>
  # DEBUG x => NULL
  *pix_80 = iftmp.17_62;

  <bb 18>:
  pix_64 = pix_80 + 1;
  # DEBUG pix => pix_64
  d_66 = d_69 + 1;
  # DEBUG d => d_66
  # DEBUG d => d_66
  # DEBUG pix => pix_64
  ivtmp_95 = ivtmp_96 - 1;
  if (ivtmp_95 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:
  goto <bb 6>;

  <bb 20>:
  pix_99 = pix_79 + 2;

  <bb 21>:
  # pix_70 = PHI <pix_16(4), pix_99(20)>
  # DEBUG pix => pix_70
  i_67 = i_81 + 1;
  # DEBUG i => i_67
  # DEBUG i => i_67
  # DEBUG pix => pix_70
  ivtmp_93 = ivtmp_94 - 1;
  if (ivtmp_93 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  goto <bb 3>;

  <bb 23>:
  # DEBUG pix => NULL
  # DEBUG xstride => NULL
  # DEBUG ystride => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  # DEBUG tc0 => NULL
  # DEBUG q1 => NULL
  # DEBUG q0 => NULL
  # DEBUG p0 => NULL
  # DEBUG p1 => NULL
  # DEBUG tc => NULL
  # DEBUG d => NULL
  # DEBUG i => NULL
  return;

}



;; Function deblock_v_luma_c (deblock_v_luma_c, funcdef_no=127, decl_uid=5970, cgraph_uid=127, symbol_order=173)


Analyzing loop at common/frame.c:421
common/frame.c:421:5: note: ===== analyze_loop_nest =====
common/frame.c:421:5: note: === vect_analyze_loop_form ===
common/frame.c:421:5: note: ===== analyze_loop_nest_1 =====
common/frame.c:421:5: note: === vect_analyze_loop_form ===
common/frame.c:421:5: note: not vectorized: control flow in loop.
common/frame.c:421:5: note: bad inner-loop form.
common/frame.c:421:5: note: not vectorized: Bad inner loop.
common/frame.c:421:5: note: bad loop form.

Analyzing loop at common/frame.c:428
common/frame.c:428:9: note: ===== analyze_loop_nest =====
common/frame.c:428:9: note: === vect_analyze_loop_form ===
common/frame.c:428:9: note: not vectorized: control flow in loop.
common/frame.c:428:9: note: bad loop form.
common/frame.c:460:13: note: vectorized 0 loops in function.
deblock_v_luma_c (uint8_t * pix, int stride, int alpha, int beta, int8_t * tc0)
{
  int i;
  int d;
  const int p2;
  const int p1;
  const int p0;
  const int q0;
  const int q1;
  const int q2;
  int tc;
  uint8_t * pix;
  sizetype _9;
  int8_t * _10;
  signed char _11;
  uint8_t * _19;
  unsigned char _20;
  uint8_t * _24;
  unsigned char _25;
  uint8_t * _29;
  unsigned char _30;
  unsigned char _32;
  uint8_t * _35;
  unsigned char _36;
  uint8_t * _40;
  unsigned char _41;
  int _43;
  int _44;
  int _45;
  int _46;
  int _47;
  int _48;
  signed char _49;
  int _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  int iftmp.16_60;
  int iftmp.16_61;
  unsigned char _62;
  unsigned char _63;
  int _65;
  int _66;
  signed char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  int iftmp.16_76;
  int iftmp.16_77;
  unsigned char _78;
  unsigned char _79;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int iftmp.16_90;
  int iftmp.16_91;
  int _92;
  int _93;
  int _94;
  int _95;
  unsigned char iftmp.17_96;
  unsigned char iftmp.17_97;
  unsigned char iftmp.17_98;
  int _99;
  int _100;
  int _101;
  int _102;
  unsigned char iftmp.17_103;
  unsigned char iftmp.17_104;
  unsigned char iftmp.17_105;
  unsigned int ivtmp_146;
  unsigned int ivtmp_147;
  unsigned int ivtmp_148;
  unsigned int ivtmp_149;
  unsigned int _150;
  unsigned int _151;
  unsigned int _152;
  unsigned int _153;
  unsigned int _154;
  unsigned int _155;
  int pretmp_159;
  sizetype pretmp_160;
  int pretmp_161;
  sizetype pretmp_162;
  int pretmp_163;
  sizetype pretmp_164;
  sizetype pretmp_165;
  int pretmp_166;
  sizetype pretmp_167;

  <bb 2>:
  # DEBUG pix => pix_2(D)
  # DEBUG xstride => stride_3(D)
  # DEBUG ystride => 1
  # DEBUG alpha => alpha_4(D)
  # DEBUG beta => beta_5(D)
  # DEBUG tc0 => tc0_6(D)
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG pix => pix_2(D)
  _155 = (unsigned int) stride_3(D);
  _154 = _155 * 4294967293;
  pretmp_159 = (int) _154;
  pretmp_160 = (sizetype) pretmp_159;
  _153 = (unsigned int) stride_3(D);
  _152 = _153 * 4294967294;
  pretmp_161 = (int) _152;
  pretmp_162 = (sizetype) pretmp_161;
  _151 = (unsigned int) stride_3(D);
  _150 = _151 * 2;
  pretmp_166 = (int) _150;
  pretmp_167 = (sizetype) pretmp_166;

  <bb 3>:
  # i_139 = PHI <i_110(30), 0(2)>
  # pix_137 = PHI <pix_113(30), pix_2(D)(2)>
  # ivtmp_147 = PHI <ivtmp_146(30), 4(2)>
  # DEBUG i => i_139
  # DEBUG pix => pix_137
  _9 = (sizetype) i_139;
  _10 = tc0_6(D) + _9;
  _11 = *_10;
  if (_11 < 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  pix_15 = pix_137 + 4;
  # DEBUG pix => pix_15
  goto <bb 29>;

  <bb 5>:
  # DEBUG D#93 => (sizetype) pretmp_159
  # DEBUG D#94 => (sizetype) pretmp_161
  pretmp_163 = -stride_3(D);
  pretmp_164 = (sizetype) pretmp_163;
  pretmp_165 = (sizetype) stride_3(D);
  # DEBUG D#95 => (sizetype) pretmp_166

  <bb 6>:
  # pix_138 = PHI <pix_137(5), pix_107(27)>
  # d_136 = PHI <0(5), d_109(27)>
  # ivtmp_149 = PHI <4(5), ivtmp_148(27)>
  # DEBUG d => d_136
  # DEBUG pix => pix_138
  # DEBUG D#92 => pix_138 + D#93
  # DEBUG D#91 => *D#92
  # DEBUG p2 => (const int) D#91
  # DEBUG D#90 => pix_138 + D#94
  # DEBUG D#89 => *D#90
  # DEBUG p1 => (const int) D#89
  _29 = pix_138 + pretmp_164;
  _30 = *_29;
  p0_31 = (const int) _30;
  # DEBUG p0 => p0_31
  _32 = *pix_138;
  q0_33 = (const int) _32;
  # DEBUG q0 => q0_33
  # DEBUG D#88 => pix_138 + pretmp_165
  # DEBUG D#87 => *D#88
  # DEBUG q1 => (const int) D#87
  # DEBUG D#86 => pix_138 + D#95
  # DEBUG D#85 => *D#86
  # DEBUG q2 => (const int) D#85
  _43 = p0_31 - q0_33;
  _44 = ABS_EXPR <_43>;
  if (alpha_4(D) > _44)
    goto <bb 7>;
  else
    goto <bb 26>;

  <bb 7>:
  _24 = pix_138 + pretmp_162;
  _25 = *_24;
  p1_26 = (const int) _25;
  _45 = p1_26 - p0_31;
  _46 = ABS_EXPR <_45>;
  if (beta_5(D) > _46)
    goto <bb 8>;
  else
    goto <bb 26>;

  <bb 8>:
  _35 = pix_138 + pretmp_165;
  _36 = *_35;
  q1_37 = (const int) _36;
  _47 = q1_37 - q0_33;
  _48 = ABS_EXPR <_47>;
  if (beta_5(D) > _48)
    goto <bb 9>;
  else
    goto <bb 26>;

  <bb 9>:
  _19 = pix_138 + pretmp_160;
  _20 = *_19;
  p2_21 = (const int) _20;
  _40 = pix_138 + pretmp_167;
  _41 = *_40;
  _49 = *_10;
  tc_50 = (int) _49;
  # DEBUG tc => tc_50
  _51 = p2_21 - p0_31;
  _52 = ABS_EXPR <_51>;
  if (beta_5(D) > _52)
    goto <bb 10>;
  else
    goto <bb 13>;

  <bb 10>:
  _53 = -tc_50;
  _54 = p0_31 + q0_33;
  _55 = _54 + 1;
  _56 = _55 >> 1;
  _57 = p2_21 + _56;
  _58 = _57 >> 1;
  _59 = _58 - p1_26;
  # DEBUG v => _59
  # DEBUG i_min => _53
  # DEBUG i_max => tc_50
  if (_53 <= _59)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  iftmp.16_60 = MIN_EXPR <tc_50, _59>;

  <bb 12>:
  # iftmp.16_61 = PHI <_53(10), iftmp.16_60(11)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  _62 = (unsigned char) iftmp.16_61;
  _63 = _25 + _62;
  *_24 = _63;
  tc_64 = tc_50 + 1;
  # DEBUG tc => tc_64

  <bb 13>:
  # tc_80 = PHI <tc_50(9), tc_64(12)>
  q2_42 = (const int) _41;
  # DEBUG tc => tc_80
  _65 = q2_42 - q0_33;
  _66 = ABS_EXPR <_65>;
  if (beta_5(D) > _66)
    goto <bb 14>;
  else
    goto <bb 17>;

  <bb 14>:
  _67 = *_10;
  _68 = (int) _67;
  _69 = -_68;
  _70 = p0_31 + q0_33;
  _71 = _70 + 1;
  _72 = _71 >> 1;
  _73 = q2_42 + _72;
  _74 = _73 >> 1;
  _75 = _74 - q1_37;
  # DEBUG v => _75
  # DEBUG i_min => _69
  # DEBUG i_max => _68
  if (_69 <= _75)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  iftmp.16_76 = MIN_EXPR <_68, _75>;

  <bb 16>:
  # iftmp.16_77 = PHI <_69(14), iftmp.16_76(15)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  _78 = (unsigned char) iftmp.16_77;
  _79 = _36 + _78;
  *_35 = _79;
  tc_81 = tc_80 + 1;
  # DEBUG tc => tc_81

  <bb 17>:
  # tc_82 = PHI <tc_80(13), tc_81(16)>
  # DEBUG tc => tc_82
  _83 = -tc_82;
  _84 = q0_33 - p0_31;
  _85 = _84 << 2;
  _86 = p1_26 - q1_37;
  _87 = _85 + _86;
  _88 = _87 + 4;
  _89 = _88 >> 3;
  # DEBUG v => _89
  # DEBUG i_min => _83
  # DEBUG i_max => tc_82
  if (_83 <= _89)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  iftmp.16_90 = MIN_EXPR <tc_82, _89>;

  <bb 19>:
  # iftmp.16_91 = PHI <_83(17), iftmp.16_90(18)>
  # DEBUG v => NULL
  # DEBUG i_min => NULL
  # DEBUG i_max => NULL
  # DEBUG delta => NULL
  _92 = p0_31 + iftmp.16_91;
  # DEBUG x => _92
  _93 = _92 & -256;
  if (_93 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  _94 = -_92;
  _95 = _94 >> 31;
  iftmp.17_96 = (unsigned char) _95;
  goto <bb 22>;

  <bb 21>:
  iftmp.17_97 = (unsigned char) _92;

  <bb 22>:
  # iftmp.17_98 = PHI <iftmp.17_96(20), iftmp.17_97(21)>
  # DEBUG x => NULL
  *_29 = iftmp.17_98;
  _99 = q0_33 - iftmp.16_91;
  # DEBUG x => _99
  _100 = _99 & -256;
  if (_100 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  _101 = -_99;
  _102 = _101 >> 31;
  iftmp.17_103 = (unsigned char) _102;
  goto <bb 25>;

  <bb 24>:
  iftmp.17_104 = (unsigned char) _99;

  <bb 25>:
  # iftmp.17_105 = PHI <iftmp.17_103(23), iftmp.17_104(24)>
  # DEBUG x => NULL
  *pix_138 = iftmp.17_105;

  <bb 26>:
  pix_107 = pix_138 + 1;
  # DEBUG pix => pix_107
  d_109 = d_136 + 1;
  # DEBUG d => d_109
  # DEBUG d => d_109
  # DEBUG pix => pix_107
  ivtmp_148 = ivtmp_149 - 1;
  if (ivtmp_148 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  goto <bb 6>;

  <bb 28>:
  pix_156 = pix_137 + 4;

  <bb 29>:
  # pix_113 = PHI <pix_15(4), pix_156(28)>
  # DEBUG pix => pix_113
  i_110 = i_139 + 1;
  # DEBUG i => i_110
  # DEBUG i => i_110
  # DEBUG pix => pix_113
  ivtmp_146 = ivtmp_147 - 1;
  if (ivtmp_146 != 0)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  goto <bb 3>;

  <bb 31>:
  # DEBUG pix => NULL
  # DEBUG xstride => NULL
  # DEBUG ystride => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  # DEBUG tc0 => NULL
  # DEBUG tc => NULL
  # DEBUG q2 => NULL
  # DEBUG q1 => NULL
  # DEBUG q0 => NULL
  # DEBUG p0 => NULL
  # DEBUG p1 => NULL
  # DEBUG p2 => NULL
  # DEBUG d => NULL
  # DEBUG i => NULL
  return;

}



;; Function deblock_h_luma_intra_c (deblock_h_luma_intra_c, funcdef_no=134, decl_uid=6045, cgraph_uid=134, symbol_order=180)


Analyzing loop at common/frame.c:509
common/frame.c:509:5: note: ===== analyze_loop_nest =====
common/frame.c:509:5: note: === vect_analyze_loop_form ===
common/frame.c:509:5: note: not vectorized: control flow in loop.
common/frame.c:509:5: note: bad loop form.
common/frame.c:554:13: note: vectorized 0 loops in function.
deblock_h_luma_intra_c (uint8_t * pix, int stride, int alpha, int beta)
{
  int d;
  const int p2;
  const int p1;
  const int p0;
  const int q0;
  const int q1;
  const int q2;
  const int p3;
  const int q3;
  uint8_t * pix;
  unsigned char _11;
  unsigned char _16;
  unsigned char _21;
  unsigned char _23;
  unsigned char _27;
  unsigned char _32;
  int _34;
  int _35;
  int _36;
  int _37;
  int _38;
  int _39;
  int _40;
  int _41;
  int _42;
  int _43;
  unsigned int ivtmp_45;
  unsigned char _47;
  int _49;
  int _50;
  int _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  unsigned char _58;
  int _59;
  int _60;
  int _61;
  int _62;
  int _63;
  unsigned char _64;
  int _65;
  int _66;
  int _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  unsigned char _73;
  int _74;
  int _75;
  int _76;
  int _77;
  int _78;
  unsigned char _79;
  int _80;
  int _81;
  sizetype pretmp_82;
  unsigned int ivtmp_84;
  unsigned char _85;
  int _87;
  int _88;
  int _89;
  int _90;
  int _91;
  int _92;
  int _93;
  int _94;
  int _95;
  unsigned char _96;
  int _97;
  int _98;
  int _99;
  int _100;
  int _101;
  unsigned char _102;
  int _103;
  int _104;
  int _105;
  int _106;
  int _107;
  int _108;
  int _109;
  int _110;
  unsigned char _111;
  int _112;
  int _113;
  int _114;
  int _115;
  int _116;
  unsigned char _117;
  int _118;
  int _119;
  int _120;
  int _121;
  int _122;
  unsigned char _123;
  int _124;
  int _125;
  int _126;
  int _127;
  int _128;
  unsigned char _129;
  unsigned int _132;
  unsigned int _135;
  unsigned char cstore_139;

  <bb 2>:
  # DEBUG pix => pix_2(D)
  # DEBUG xstride => 1
  # DEBUG ystride => stride_3(D)
  # DEBUG alpha => alpha_4(D)
  # DEBUG beta => beta_5(D)
  # DEBUG d => 0
  # DEBUG d => 0
  # DEBUG pix => pix_2(D)
  pretmp_82 = (sizetype) stride_3(D);
  _40 = alpha_4(D) >> 2;
  _135 = (unsigned int) _40;
  _132 = _135 + 1;
  _41 = (int) _132;

  <bb 3>:
  # pix_7 = PHI <pix_131(15), pix_2(D)(2)>
  # d_19 = PHI <d_133(15), 0(2)>
  # ivtmp_84 = PHI <ivtmp_45(15), 16(2)>
  # DEBUG d => d_19
  # DEBUG pix => pix_7
  # DEBUG D#105 => MEM[(uint8_t *)pix_7 + -3B]
  # DEBUG p2 => (const int) D#105
  # DEBUG D#104 => MEM[(uint8_t *)pix_7 + -2B]
  # DEBUG p1 => (const int) D#104
  _21 = MEM[(uint8_t *)pix_7 + -1B];
  p0_22 = (const int) _21;
  # DEBUG p0 => p0_22
  _23 = *pix_7;
  q0_24 = (const int) _23;
  # DEBUG q0 => q0_24
  # DEBUG D#103 => MEM[(uint8_t *)pix_7 + 1B]
  # DEBUG q1 => (const int) D#103
  # DEBUG D#102 => MEM[(uint8_t *)pix_7 + 2B]
  # DEBUG q2 => (const int) D#102
  _34 = p0_22 - q0_24;
  _35 = ABS_EXPR <_34>;
  if (alpha_4(D) > _35)
    goto <bb 4>;
  else
    goto <bb 14>;

  <bb 4>:
  _16 = MEM[(uint8_t *)pix_7 + -2B];
  p1_17 = (const int) _16;
  _36 = p1_17 - p0_22;
  _37 = ABS_EXPR <_36>;
  if (beta_5(D) > _37)
    goto <bb 5>;
  else
    goto <bb 14>;

  <bb 5>:
  _27 = MEM[(uint8_t *)pix_7 + 1B];
  q1_28 = (const int) _27;
  _38 = q1_28 - q0_24;
  _39 = ABS_EXPR <_38>;
  if (beta_5(D) > _39)
    goto <bb 6>;
  else
    goto <bb 14>;

  <bb 6>:
  if (_35 <= _41)
    goto <bb 7>;
  else
    goto <bb 13>;

  <bb 7>:
  _11 = MEM[(uint8_t *)pix_7 + -3B];
  p2_12 = (const int) _11;
  _32 = MEM[(uint8_t *)pix_7 + 2B];
  _42 = p2_12 - p0_22;
  _43 = ABS_EXPR <_42>;
  if (beta_5(D) > _43)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _47 = MEM[(uint8_t *)pix_7 + -4B];
  p3_48 = (const int) _47;
  # DEBUG p3 => p3_48
  _49 = p1_17 * 2;
  _50 = p2_12 + _49;
  _51 = p0_22 * 2;
  _52 = _50 + _51;
  _53 = q0_24 * 2;
  _54 = _52 + _53;
  _55 = q1_28 + _54;
  _56 = _55 + 4;
  _57 = _56 >> 3;
  _58 = (unsigned char) _57;
  _59 = p2_12 + p1_17;
  _60 = p0_22 + _59;
  _61 = q0_24 + _60;
  _62 = _61 + 2;
  _63 = _62 >> 2;
  _64 = (unsigned char) _63;
  MEM[(uint8_t *)pix_7 + -2B] = _64;
  _65 = p3_48 * 2;
  _66 = p2_12 * 3;
  _67 = _65 + _66;
  _68 = p1_17 + _67;
  _69 = p0_22 + _68;
  _70 = q0_24 + _69;
  _71 = _70 + 4;
  _72 = _71 >> 3;
  _73 = (unsigned char) _72;
  MEM[(uint8_t *)pix_7 + -3B] = _73;
  goto <bb 10>;

  <bb 9>:
  _74 = p1_17 * 2;
  _75 = p0_22 + _74;
  _76 = q1_28 + _75;
  _77 = _76 + 2;
  _78 = _77 >> 2;
  _79 = (unsigned char) _78;

  <bb 10>:
  # cstore_139 = PHI <_58(8), _79(9)>
  q2_33 = (const int) _32;
  MEM[(uint8_t *)pix_7 + -1B] = cstore_139;
  _80 = q2_33 - q0_24;
  _81 = ABS_EXPR <_80>;
  if (beta_5(D) > _81)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  _85 = MEM[(uint8_t *)pix_7 + 3B];
  q3_86 = (const int) _85;
  # DEBUG q3 => q3_86
  _87 = p0_22 * 2;
  _88 = p1_17 + _87;
  _89 = q0_24 * 2;
  _90 = _88 + _89;
  _91 = q1_28 * 2;
  _92 = _90 + _91;
  _93 = q2_33 + _92;
  _94 = _93 + 4;
  _95 = _94 >> 3;
  _96 = (unsigned char) _95;
  *pix_7 = _96;
  _97 = p0_22 + q0_24;
  _98 = q1_28 + _97;
  _99 = q2_33 + _98;
  _100 = _99 + 2;
  _101 = _100 >> 2;
  _102 = (unsigned char) _101;
  MEM[(uint8_t *)pix_7 + 1B] = _102;
  _103 = q3_86 * 2;
  _104 = q2_33 * 3;
  _105 = _103 + _104;
  _106 = q1_28 + _105;
  _107 = q0_24 + _106;
  _108 = p0_22 + _107;
  _109 = _108 + 4;
  _110 = _109 >> 3;
  _111 = (unsigned char) _110;
  MEM[(uint8_t *)pix_7 + 2B] = _111;
  goto <bb 14>;

  <bb 12>:
  _112 = q1_28 * 2;
  _113 = q0_24 + _112;
  _114 = p1_17 + _113;
  _115 = _114 + 2;
  _116 = _115 >> 2;
  _117 = (unsigned char) _116;
  *pix_7 = _117;
  goto <bb 14>;

  <bb 13>:
  _118 = p1_17 * 2;
  _119 = p0_22 + _118;
  _120 = q1_28 + _119;
  _121 = _120 + 2;
  _122 = _121 >> 2;
  _123 = (unsigned char) _122;
  MEM[(uint8_t *)pix_7 + -1B] = _123;
  _124 = q1_28 * 2;
  _125 = q0_24 + _124;
  _126 = p1_17 + _125;
  _127 = _126 + 2;
  _128 = _127 >> 2;
  _129 = (unsigned char) _128;
  *pix_7 = _129;

  <bb 14>:
  pix_131 = pix_7 + pretmp_82;
  # DEBUG pix => pix_131
  d_133 = d_19 + 1;
  # DEBUG d => d_133
  # DEBUG d => d_133
  # DEBUG pix => pix_131
  ivtmp_45 = ivtmp_84 - 1;
  if (ivtmp_45 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  goto <bb 3>;

  <bb 16>:
  # DEBUG pix => NULL
  # DEBUG xstride => NULL
  # DEBUG ystride => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  # DEBUG q3 => NULL
  # DEBUG p3 => NULL
  # DEBUG q2 => NULL
  # DEBUG q1 => NULL
  # DEBUG q0 => NULL
  # DEBUG p0 => NULL
  # DEBUG p1 => NULL
  # DEBUG p2 => NULL
  # DEBUG d => NULL
  return;

}



;; Function x264_frame_delete (x264_frame_delete, funcdef_no=116, decl_uid=4895, cgraph_uid=116, symbol_order=159)


Analyzing loop at common/frame.c:162
common/frame.c:162:5: note: ===== analyze_loop_nest =====
common/frame.c:162:5: note: === vect_analyze_loop_form ===
common/frame.c:162:5: note: ===== analyze_loop_nest_1 =====
common/frame.c:162:5: note: === vect_analyze_loop_form ===
common/frame.c:162:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [16, + , 4294967295] != 0
  bounds on difference of bases: -16 ... -16
  result:
    # of iterations 16, bounded by 16
common/frame.c:162:5: note: Considering outer-loop vectorization.
common/frame.c:162:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [1, + , 4294967295] != 0
  bounds on difference of bases: -1 ... -1
  result:
    # of iterations 1, bounded by 1
common/frame.c:162:5: note: === vect_analyze_data_refs ===
Creating dr for frame_15(D)->lowres_mvs[j_79][i_63]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_15(D)
	offset from base address: (ssizetype) ((sizetype) j_79 * 136)
	constant offset from base address: 280
	step: 8
	aligned to: 8
	base_object: *frame_15(D)
	Access function 0: {0, +, 1}_5
	Access function 1: {0, +, 1}_4
	Access function 2: 2240
common/frame.c:162:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:162:5: note: bad data references.

Analyzing loop at common/frame.c:163
common/frame.c:163:9: note: ===== analyze_loop_nest =====
common/frame.c:163:9: note: === vect_analyze_loop_form ===
common/frame.c:163:9: note: === get_loop_niters ===
common/frame.c:163:9: note: === vect_analyze_data_refs ===
Creating dr for frame_15(D)->lowres_mvs[j_79][i_63]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_15(D)
	offset from base address: (ssizetype) ((sizetype) j_79 * 136)
	constant offset from base address: 280
	step: 8
	aligned to: 8
	base_object: *frame_15(D)
	Access function 0: {0, +, 1}_5
	Access function 1: j_79
	Access function 2: 2240
common/frame.c:163:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:163:9: note: bad data references.

Analyzing loop at common/frame.c:159
common/frame.c:159:5: note: ===== analyze_loop_nest =====
common/frame.c:159:5: note: === vect_analyze_loop_form ===
common/frame.c:159:5: note: ===== analyze_loop_nest_1 =====
common/frame.c:159:5: note: === vect_analyze_loop_form ===
common/frame.c:159:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 6
  exit condition [17, + , 4294967295] != 0
  bounds on difference of bases: -17 ... -17
  result:
    # of iterations 17, bounded by 17
common/frame.c:159:5: note: Considering outer-loop vectorization.
common/frame.c:159:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [17, + , 4294967295] != 0
  bounds on difference of bases: -17 ... -17
  result:
    # of iterations 17, bounded by 17
common/frame.c:159:5: note: === vect_analyze_data_refs ===
Creating dr for frame_15(D)->i_row_satds[i_27][j_78]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_15(D)
	offset from base address: (ssizetype) ((sizetype) i_27 * 144)
	constant offset from base address: 3712
	step: 8
	aligned to: 16
	base_object: *frame_15(D)
	Access function 0: {0, +, 1}_6
	Access function 1: {0, +, 1}_3
	Access function 2: 29696
common/frame.c:159:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:159:5: note: bad data references.

Analyzing loop at common/frame.c:160
common/frame.c:160:9: note: ===== analyze_loop_nest =====
common/frame.c:160:9: note: === vect_analyze_loop_form ===
common/frame.c:160:9: note: === get_loop_niters ===
common/frame.c:160:9: note: === vect_analyze_data_refs ===
Creating dr for frame_15(D)->i_row_satds[i_27][j_78]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_15(D)
	offset from base address: (ssizetype) ((sizetype) i_27 * 144)
	constant offset from base address: 3712
	step: 8
	aligned to: 16
	base_object: *frame_15(D)
	Access function 0: {0, +, 1}_6
	Access function 1: i_27
	Access function 2: 29696
common/frame.c:160:9: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:160:9: note: bad data references.

Analyzing loop at common/frame.c:157
common/frame.c:157:5: note: ===== analyze_loop_nest =====
common/frame.c:157:5: note: === vect_analyze_loop_form ===
common/frame.c:157:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/frame.c:157:5: note: === vect_analyze_data_refs ===
Creating dr for frame_15(D)->buffer_lowres[i_22]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_15(D)
	offset from base address: 0
	constant offset from base address: 224
	step: 8
	aligned to: 128
	base_object: *frame_15(D)
	Access function 0: {0, +, 1}_2
	Access function 1: 1792
common/frame.c:157:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:157:5: note: bad data references.

Analyzing loop at common/frame.c:155
common/frame.c:155:5: note: ===== analyze_loop_nest =====
common/frame.c:155:5: note: === vect_analyze_loop_form ===
common/frame.c:155:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/frame.c:155:5: note: === vect_analyze_data_refs ===
Creating dr for frame_15(D)->buffer[i_62]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_15(D)
	offset from base address: 0
	constant offset from base address: 192
	step: 8
	aligned to: 128
	base_object: *frame_15(D)
	Access function 0: {0, +, 1}_1
	Access function 1: 1536
common/frame.c:155:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:155:5: note: bad data references.
common/frame.c:152:6: note: vectorized 0 loops in function.
x264_frame_delete (struct x264_frame_t * frame)
{
  int j;
  int i;
  unsigned int ivtmp_1;
  unsigned int ivtmp_2;
  unsigned int ivtmp_3;
  unsigned int ivtmp_4;
  unsigned int ivtmp_5;
  unsigned int ivtmp_6;
  uint8_t * _16;
  uint8_t * _19;
  int * _23;
  int16_t[2] * _28;
  int * _30;
  float * _34;
  uint16_t * _36;
  uint16_t * _38;
  int * _40;
  int * _42;
  int8_t * _44;
  int16_t[2] * _46;
  int16_t[2] * _48;
  int8_t * _50;
  int8_t * _52;
  union pthread_mutex_t * _54;
  union pthread_cond_t * _56;
  unsigned int ivtmp_67;
  unsigned int ivtmp_68;
  unsigned int ivtmp_72;
  unsigned int ivtmp_73;
  unsigned int ivtmp_74;
  unsigned int ivtmp_76;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 3>:
  # i_62 = PHI <i_18(4), 0(2)>
  # ivtmp_1 = PHI <ivtmp_76(4), 4(2)>
  # DEBUG i => i_62
  _16 = frame_15(D)->buffer[i_62];
  x264_free (_16);
  i_18 = i_62 + 1;
  # DEBUG i => i_18
  # DEBUG i => i_18
  ivtmp_76 = ivtmp_1 - 1;
  if (ivtmp_76 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:

  <bb 6>:
  # i_22 = PHI <0(5), i_21(8)>
  # ivtmp_5 = PHI <4(5), ivtmp_2(8)>
  # DEBUG i => i_22
  _19 = frame_15(D)->buffer_lowres[i_22];
  x264_free (_19);
  i_21 = i_22 + 1;
  # DEBUG i => i_21
  # DEBUG i => i_21
  ivtmp_2 = ivtmp_5 - 1;
  if (ivtmp_2 != 0)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 14>;

  <bb 8>:
  goto <bb 6>;

  <bb 9>:

  <bb 10>:
  # j_78 = PHI <j_25(9), 0(14)>
  # ivtmp_6 = PHI <ivtmp_4(9), 18(14)>
  # DEBUG j => j_78
  _23 = frame_15(D)->i_row_satds[i_27][j_78];
  x264_free (_23);
  j_25 = j_78 + 1;
  # DEBUG j => j_25
  # DEBUG j => j_25
  ivtmp_4 = ivtmp_6 - 1;
  if (ivtmp_4 != 0)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 11>:
  i_26 = i_27 + 1;
  # DEBUG i => i_26
  # DEBUG i => i_26
  ivtmp_3 = ivtmp_68 - 1;
  if (ivtmp_3 != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:
  goto <bb 19>;

  <bb 13>:

  <bb 14>:
  # i_27 = PHI <0(7), i_26(13)>
  # ivtmp_68 = PHI <18(7), ivtmp_3(13)>
  # DEBUG i => i_27
  # DEBUG j => 0
  goto <bb 10>;

  <bb 15>:

  <bb 16>:
  # i_63 = PHI <i_32(15), 0(19)>
  # ivtmp_74 = PHI <ivtmp_73(15), 17(19)>
  # DEBUG i => i_63
  _28 = frame_15(D)->lowres_mvs[j_79][i_63];
  x264_free (_28);
  _30 = frame_15(D)->lowres_mv_costs[j_79][i_63];
  x264_free (_30);
  i_32 = i_63 + 1;
  # DEBUG i => i_32
  # DEBUG i => i_32
  ivtmp_73 = ivtmp_74 - 1;
  if (ivtmp_73 != 0)
    goto <bb 15>;
  else
    goto <bb 17>;

  <bb 17>:
  j_33 = j_79 + 1;
  # DEBUG j => j_33
  # DEBUG j => j_33
  ivtmp_67 = ivtmp_72 - 1;
  if (ivtmp_67 != 0)
    goto <bb 18>;
  else
    goto <bb 20>;

  <bb 18>:

  <bb 19>:
  # j_79 = PHI <0(12), j_33(18)>
  # ivtmp_72 = PHI <2(12), ivtmp_67(18)>
  # DEBUG j => j_79
  # DEBUG i => 0
  goto <bb 16>;

  <bb 20>:
  _34 = frame_15(D)->f_qp_offset;
  x264_free (_34);
  _36 = frame_15(D)->i_inv_qscale_factor;
  x264_free (_36);
  _38 = frame_15(D)->i_intra_cost;
  x264_free (_38);
  _40 = frame_15(D)->i_row_bits;
  x264_free (_40);
  _42 = frame_15(D)->i_row_qp;
  x264_free (_42);
  _44 = frame_15(D)->mb_type;
  x264_free (_44);
  _46 = frame_15(D)->mv[0];
  x264_free (_46);
  _48 = frame_15(D)->mv[1];
  x264_free (_48);
  _50 = frame_15(D)->ref[0];
  x264_free (_50);
  _52 = frame_15(D)->ref[1];
  x264_free (_52);
  _54 = &frame_15(D)->mutex;
  pthread_mutex_destroy (_54);
  _56 = &frame_15(D)->cv;
  pthread_cond_destroy (_56);
  x264_free (frame_15(D));
  return;

}



;; Function x264_frame_new (x264_frame_new, funcdef_no=115, decl_uid=4893, cgraph_uid=115, symbol_order=158)


Analyzing loop at common/frame.c:132
common/frame.c:132:9: note: ===== analyze_loop_nest =====
common/frame.c:132:9: note: === vect_analyze_loop_form ===
common/frame.c:132:9: note: ===== analyze_loop_nest_1 =====
common/frame.c:132:9: note: === vect_analyze_loop_form ===
common/frame.c:132:9: note: not vectorized: control flow in loop.
common/frame.c:132:9: note: bad inner-loop form.
common/frame.c:132:9: note: not vectorized: Bad inner loop.
common/frame.c:132:9: note: bad loop form.

Analyzing loop at common/frame.c:133
common/frame.c:133:13: note: ===== analyze_loop_nest =====
common/frame.c:133:13: note: === vect_analyze_loop_form ===
common/frame.c:133:13: note: not vectorized: control flow in loop.
common/frame.c:133:13: note: bad loop form.

Analyzing loop at common/frame.c:91
common/frame.c:91:13: note: ===== analyze_loop_nest =====
common/frame.c:91:13: note: === vect_analyze_loop_form ===
common/frame.c:91:13: note: ===== analyze_loop_nest_1 =====
common/frame.c:91:13: note: === vect_analyze_loop_form ===
common/frame.c:91:13: note: not vectorized: control flow in loop.
common/frame.c:91:13: note: bad inner-loop form.
common/frame.c:91:13: note: not vectorized: Bad inner loop.
common/frame.c:91:13: note: bad loop form.

Analyzing loop at common/frame.c:93
common/frame.c:93:17: note: ===== analyze_loop_nest =====
common/frame.c:93:17: note: === vect_analyze_loop_form ===
common/frame.c:93:17: note: not vectorized: control flow in loop.
common/frame.c:93:17: note: bad loop form.

Analyzing loop at common/frame.c:87
common/frame.c:87:9: note: ===== analyze_loop_nest =====
common/frame.c:87:9: note: === vect_analyze_loop_form ===
common/frame.c:87:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/frame.c:87:9: note: === vect_analyze_data_refs ===
Creating dr for frame_29->lowres[i_311]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_29
	offset from base address: 0
	constant offset from base address: 152
	step: 8
	aligned to: 128
	base_object: *frame_29
	Access function 0: {0, +, 1}_4
	Access function 1: 1216
common/frame.c:87:9: note: got vectype for stmt: frame_29->lowres[i_311] = _138;
vector(2) long unsigned int
common/frame.c:87:9: note: === vect_analyze_scalar_cycles ===
common/frame.c:87:9: note: Analyze phi: i_311 = PHI <0(24), i_140(26)>

common/frame.c:87:9: note: Access function of PHI: {0, +, 1}_4
common/frame.c:87:9: note: step: 1,  init: 0
common/frame.c:87:9: note: Detected induction.
common/frame.c:87:9: note: Analyze phi: .MEM_310 = PHI <.MEM_130(24), .MEM_139(26)>

common/frame.c:87:9: note: Analyze phi: ivtmp_24 = PHI <4(24), ivtmp_281(26)>

common/frame.c:87:9: note: Access function of PHI: {4, +, 4294967295}_4
common/frame.c:87:9: note: step: 4294967295,  init: 4
common/frame.c:87:9: note: Detected induction.
common/frame.c:87:9: note: === vect_pattern_recog ===
common/frame.c:87:9: note: vect_is_simple_use: operand luma_plane_size_126
common/frame.c:87:9: note: def_stmt: luma_plane_size_126 = _120 * _125;
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: === vect_analyze_data_ref_accesses ===
common/frame.c:87:9: note: === vect_mark_stmts_to_be_vectorized ===
common/frame.c:87:9: note: init: phi relevant? i_311 = PHI <0(24), i_140(26)>
common/frame.c:87:9: note: init: phi relevant? .MEM_310 = PHI <.MEM_130(24), .MEM_139(26)>
common/frame.c:87:9: note: init: phi relevant? ivtmp_24 = PHI <4(24), ivtmp_281(26)>
common/frame.c:87:9: note: init: stmt relevant? # DEBUG i => i_311
common/frame.c:87:9: note: init: stmt relevant? _134 = luma_plane_size_126 * i_311;
common/frame.c:87:9: note: init: stmt relevant? _135 = (sizetype) _134;
common/frame.c:87:9: note: init: stmt relevant? _137 = _135 + pretmp_291;
common/frame.c:87:9: note: init: stmt relevant? _138 = _129 + _137;
common/frame.c:87:9: note: init: stmt relevant? frame_29->lowres[i_311] = _138;
common/frame.c:87:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/frame.c:87:9: note: mark relevant 4, live 0.
common/frame.c:87:9: note: init: stmt relevant? i_140 = i_311 + 1;
common/frame.c:87:9: note: init: stmt relevant? # DEBUG i => i_140
common/frame.c:87:9: note: init: stmt relevant? # DEBUG i => i_140
common/frame.c:87:9: note: init: stmt relevant? ivtmp_281 = ivtmp_24 - 1;
common/frame.c:87:9: note: init: stmt relevant? if (ivtmp_281 != 0)
common/frame.c:87:9: note: worklist: examine stmt: frame_29->lowres[i_311] = _138;
common/frame.c:87:9: note: vect_is_simple_use: operand _138
common/frame.c:87:9: note: def_stmt: _138 = _129 + _137;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: mark relevant 4, live 0.
common/frame.c:87:9: note: worklist: examine stmt: _138 = _129 + _137;
common/frame.c:87:9: note: vect_is_simple_use: operand _129
common/frame.c:87:9: note: def_stmt: _129 = x264_malloc (_127);
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: def_stmt is out of loop.
common/frame.c:87:9: note: vect_is_simple_use: operand _137
common/frame.c:87:9: note: def_stmt: _137 = _135 + pretmp_291;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: mark relevant 4, live 0.
common/frame.c:87:9: note: worklist: examine stmt: _137 = _135 + pretmp_291;
common/frame.c:87:9: note: vect_is_simple_use: operand _135
common/frame.c:87:9: note: def_stmt: _135 = (sizetype) _134;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: mark relevant 4, live 0.
common/frame.c:87:9: note: vect_is_simple_use: operand pretmp_291
common/frame.c:87:9: note: def_stmt: pretmp_291 = pretmp_308 + 32;
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: def_stmt is out of loop.
common/frame.c:87:9: note: worklist: examine stmt: _135 = (sizetype) _134;
common/frame.c:87:9: note: vect_is_simple_use: operand _134
common/frame.c:87:9: note: def_stmt: _134 = luma_plane_size_126 * i_311;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: mark relevant 4, live 0.
common/frame.c:87:9: note: worklist: examine stmt: _134 = luma_plane_size_126 * i_311;
common/frame.c:87:9: note: vect_is_simple_use: operand luma_plane_size_126
common/frame.c:87:9: note: def_stmt: luma_plane_size_126 = _120 * _125;
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: def_stmt is out of loop.
common/frame.c:87:9: note: vect_is_simple_use: operand i_311
common/frame.c:87:9: note: def_stmt: i_311 = PHI <0(24), i_140(26)>
common/frame.c:87:9: note: type of def: 4.
common/frame.c:87:9: note: mark relevant 4, live 0.
common/frame.c:87:9: note: worklist: examine stmt: i_311 = PHI <0(24), i_140(26)>
common/frame.c:87:9: note: vect_is_simple_use: operand 0
common/frame.c:87:9: note: vect_is_simple_use: operand i_140
common/frame.c:87:9: note: def_stmt: i_140 = i_311 + 1;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: mark relevant 4, live 0.
common/frame.c:87:9: note: worklist: examine stmt: i_140 = i_311 + 1;
common/frame.c:87:9: note: vect_is_simple_use: operand i_311
common/frame.c:87:9: note: def_stmt: i_311 = PHI <0(24), i_140(26)>
common/frame.c:87:9: note: type of def: 4.
common/frame.c:87:9: note: mark relevant 4, live 0.
common/frame.c:87:9: note: already marked relevant/live.
common/frame.c:87:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: frame_29->lowres[i_311] = _138;
  stmt_b: frame_29->lowres[i_311] = _138;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_4)
  (chrec_b = {0, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 1216)
  (chrec_b = 1216)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/frame.c:87:9: note: === vect_determine_vectorization_factor ===
common/frame.c:87:9: note: ==> examining phi: i_311 = PHI <0(24), i_140(26)>

common/frame.c:87:9: note: get vectype for scalar type:  int
common/frame.c:87:9: note: vectype: vector(4) int
common/frame.c:87:9: note: nunits = 4
common/frame.c:87:9: note: ==> examining phi: .MEM_310 = PHI <.MEM_130(24), .MEM_139(26)>

common/frame.c:87:9: note: ==> examining phi: ivtmp_24 = PHI <4(24), ivtmp_281(26)>

common/frame.c:87:9: note: ==> examining statement: # DEBUG i => i_311

common/frame.c:87:9: note: skip.
common/frame.c:87:9: note: ==> examining statement: _134 = luma_plane_size_126 * i_311;

common/frame.c:87:9: note: get vectype for scalar type:  int
common/frame.c:87:9: note: vectype: vector(4) int
common/frame.c:87:9: note: get vectype for scalar type:  int
common/frame.c:87:9: note: vectype: vector(4) int
common/frame.c:87:9: note: nunits = 4
common/frame.c:87:9: note: ==> examining statement: _135 = (sizetype) _134;

common/frame.c:87:9: note: get vectype for scalar type:  sizetype
common/frame.c:87:9: note: vectype: vector(2) sizetype
common/frame.c:87:9: note: get vectype for scalar type:  int
common/frame.c:87:9: note: vectype: vector(4) int
common/frame.c:87:9: note: nunits = 4
common/frame.c:87:9: note: ==> examining statement: _137 = _135 + pretmp_291;

common/frame.c:87:9: note: get vectype for scalar type:  sizetype
common/frame.c:87:9: note: vectype: vector(2) sizetype
common/frame.c:87:9: note: get vectype for scalar type:  sizetype
common/frame.c:87:9: note: vectype: vector(2) sizetype
common/frame.c:87:9: note: nunits = 2
common/frame.c:87:9: note: ==> examining statement: _138 = _129 + _137;

common/frame.c:87:9: note: get vectype for scalar type:  uint8_t *
common/frame.c:87:9: note: vectype: vector(2) long unsigned int
common/frame.c:87:9: note: get vectype for scalar type:  void *
common/frame.c:87:9: note: vectype: vector(2) long unsigned int
common/frame.c:87:9: note: nunits = 2
common/frame.c:87:9: note: ==> examining statement: frame_29->lowres[i_311] = _138;

common/frame.c:87:9: note: get vectype for scalar type:  uint8_t *
common/frame.c:87:9: note: vectype: vector(2) long unsigned int
common/frame.c:87:9: note: nunits = 2
common/frame.c:87:9: note: ==> examining statement: i_140 = i_311 + 1;

common/frame.c:87:9: note: get vectype for scalar type:  int
common/frame.c:87:9: note: vectype: vector(4) int
common/frame.c:87:9: note: get vectype for scalar type:  int
common/frame.c:87:9: note: vectype: vector(4) int
common/frame.c:87:9: note: nunits = 4
common/frame.c:87:9: note: ==> examining statement: # DEBUG i => i_140

common/frame.c:87:9: note: skip.
common/frame.c:87:9: note: ==> examining statement: # DEBUG i => i_140

common/frame.c:87:9: note: skip.
common/frame.c:87:9: note: ==> examining statement: ivtmp_281 = ivtmp_24 - 1;

common/frame.c:87:9: note: skip.
common/frame.c:87:9: note: ==> examining statement: if (ivtmp_281 != 0)

common/frame.c:87:9: note: skip.
common/frame.c:87:9: note: vectorization factor = 4
common/frame.c:87:9: note: === vect_analyze_data_refs_alignment ===
common/frame.c:87:9: note: vect_compute_data_ref_alignment:
common/frame.c:87:9: note: can't force alignment of ref: frame_29->lowres[i_311]
common/frame.c:87:9: note: === vect_prune_runtime_alias_test_list ===
common/frame.c:87:9: note: === vect_enhance_data_refs_alignment ===
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:87:9: note: Unknown misalignment, is_packed = 0
common/frame.c:87:9: note: vect_can_advance_ivs_p:
common/frame.c:87:9: note: Analyze phi: i_311 = PHI <0(24), i_140(26)>

common/frame.c:87:9: note: Analyze phi: .MEM_310 = PHI <.MEM_130(24), .MEM_139(26)>

common/frame.c:87:9: note: virtual phi. skip.
common/frame.c:87:9: note: Analyze phi: ivtmp_24 = PHI <4(24), ivtmp_281(26)>

Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:87:9: note: Vectorizing an unaligned access.
common/frame.c:87:9: note: === vect_analyze_slp ===
common/frame.c:87:9: note: === vect_make_slp_decision ===
common/frame.c:87:9: note: === vect_detect_hybrid_slp ===
common/frame.c:87:9: note: === vect_analyze_loop_operations ===
common/frame.c:87:9: note: examining phi: i_311 = PHI <0(24), i_140(26)>

common/frame.c:87:9: note: === vectorizable_induction ===
common/frame.c:87:9: note: vect_model_induction_cost: inside_cost = 1, prologue_cost = 2 .
common/frame.c:87:9: note: examining phi: .MEM_310 = PHI <.MEM_130(24), .MEM_139(26)>

common/frame.c:87:9: note: examining phi: ivtmp_24 = PHI <4(24), ivtmp_281(26)>

common/frame.c:87:9: note: ==> examining statement: # DEBUG i => i_311
common/frame.c:87:9: note: irrelevant.
common/frame.c:87:9: note: ==> examining statement: _134 = luma_plane_size_126 * i_311;
common/frame.c:87:9: note: vect_is_simple_use: operand luma_plane_size_126
common/frame.c:87:9: note: def_stmt: luma_plane_size_126 = _120 * _125;
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: vect_is_simple_use: operand i_311
common/frame.c:87:9: note: def_stmt: i_311 = PHI <0(24), i_140(26)>
common/frame.c:87:9: note: type of def: 4.
common/frame.c:87:9: note: === vectorizable_operation ===
common/frame.c:87:9: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
common/frame.c:87:9: note: ==> examining statement: _135 = (sizetype) _134;
common/frame.c:87:9: note: vect_is_simple_use: operand _134
common/frame.c:87:9: note: def_stmt: _134 = luma_plane_size_126 * i_311;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: === vectorizable_conversion ===
common/frame.c:87:9: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/frame.c:87:9: note: ==> examining statement: _137 = _135 + pretmp_291;
common/frame.c:87:9: note: vect_is_simple_use: operand _135
common/frame.c:87:9: note: def_stmt: _135 = (sizetype) _134;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: vect_is_simple_use: operand pretmp_291
common/frame.c:87:9: note: def_stmt: pretmp_291 = pretmp_308 + 32;
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: === vectorizable_operation ===
common/frame.c:87:9: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 1 .
common/frame.c:87:9: note: ==> examining statement: _138 = _129 + _137;
common/frame.c:87:9: note: vect_is_simple_use: operand _129
common/frame.c:87:9: note: def_stmt: _129 = x264_malloc (_127);
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: vect_is_simple_use: operand _137
common/frame.c:87:9: note: def_stmt: _137 = _135 + pretmp_291;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: === vectorizable_operation ===
common/frame.c:87:9: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 1 .
common/frame.c:87:9: note: ==> examining statement: frame_29->lowres[i_311] = _138;
common/frame.c:87:9: note: vect_is_simple_use: operand _138
common/frame.c:87:9: note: def_stmt: _138 = _129 + _137;
common/frame.c:87:9: note: type of def: 3.
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:87:9: note: vect_model_store_cost: unaligned supported by hardware.
common/frame.c:87:9: note: vect_model_store_cost: inside_cost = 4, prologue_cost = 0 .
common/frame.c:87:9: note: ==> examining statement: i_140 = i_311 + 1;
common/frame.c:87:9: note: vect_is_simple_use: operand i_311
common/frame.c:87:9: note: def_stmt: i_311 = PHI <0(24), i_140(26)>
common/frame.c:87:9: note: type of def: 4.
common/frame.c:87:9: note: vect_is_simple_use: operand 1
common/frame.c:87:9: note: === vectorizable_operation ===
common/frame.c:87:9: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
common/frame.c:87:9: note: ==> examining statement: # DEBUG i => i_140
common/frame.c:87:9: note: irrelevant.
common/frame.c:87:9: note: ==> examining statement: # DEBUG i => i_140
common/frame.c:87:9: note: irrelevant.
common/frame.c:87:9: note: ==> examining statement: ivtmp_281 = ivtmp_24 - 1;
common/frame.c:87:9: note: irrelevant.
common/frame.c:87:9: note: ==> examining statement: if (ivtmp_281 != 0)
common/frame.c:87:9: note: irrelevant.
common/frame.c:87:9: note: vectorization_factor = 4, niters = 4
common/frame.c:87:9: note: === vect_update_slp_costs_according_to_vf ===
common/frame.c:87:9: note: Cost model analysis: 
  Vector inside of loop cost: 13
  Vector prologue cost: 6
  Vector epilogue cost: 0
  Scalar iteration cost: 6
  Scalar outside cost: 0
  Vector outside cost: 6
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 3
common/frame.c:87:9: note:   Runtime profitability threshold = 3
common/frame.c:87:9: note:   Static estimate profitability threshold = 3
common/frame.c:87:9: note: loop vectorized
common/frame.c:87:9: note: === vec_transform_loop ===
common/frame.c:87:9: note: ------>vectorizing phi: i_311 = PHI <0(67), i_140(26)>

common/frame.c:87:9: note: transform phi.
common/frame.c:87:9: note: transform induction phi.
common/frame.c:87:9: note: created new init_stmt: vect_cst_.289_22 = { 0, 1, 2, 3 };
common/frame.c:87:9: note: created new init_stmt: vect_cst_.290_16 = { 4, 4, 4, 4 };
common/frame.c:87:9: note: transform induction: created def-use cycle: vect_vec_iv_.291_8 = PHI <vect_cst_.289_22(67), vect_vec_iv_.291_6(26)>

vect_vec_iv_.291_6 = vect_vec_iv_.291_8 + vect_cst_.290_16;

common/frame.c:87:9: note: ------>vectorizing phi: .MEM_310 = PHI <.MEM_130(67), .MEM_139(26)>

common/frame.c:87:9: note: ------>vectorizing phi: ivtmp_24 = PHI <4(67), ivtmp_281(26)>

common/frame.c:87:9: note: ------>vectorizing phi: vect_vec_iv_.291_8 = PHI <vect_cst_.289_22(67), vect_vec_iv_.291_6(26)>

common/frame.c:87:9: note: ------>vectorizing statement: vect_vec_iv_.291_6 = vect_vec_iv_.291_8 + vect_cst_.290_16;

common/frame.c:87:9: note: ------>vectorizing statement: # DEBUG i => i_311

common/frame.c:87:9: note: ------>vectorizing statement: _134 = luma_plane_size_126 * i_311;

common/frame.c:87:9: note: transform statement.
common/frame.c:87:9: note: vect_is_simple_use: operand luma_plane_size_126
common/frame.c:87:9: note: def_stmt: luma_plane_size_126 = _120 * _125;
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: vect_is_simple_use: operand i_311
common/frame.c:87:9: note: def_stmt: i_311 = PHI <0(67), i_140(26)>
common/frame.c:87:9: note: type of def: 4.
common/frame.c:87:9: note: transform binary/unary operation.
common/frame.c:87:9: note: vect_get_vec_def_for_operand: luma_plane_size_126
common/frame.c:87:9: note: vect_is_simple_use: operand luma_plane_size_126
common/frame.c:87:9: note: def_stmt: luma_plane_size_126 = _120 * _125;
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: def =  luma_plane_size_126
  def_stmt =  luma_plane_size_126 = _120 * _125;
common/frame.c:87:9: note: Create vector_inv.
common/frame.c:87:9: note: created new init_stmt: vect_cst_.293_4 = {luma_plane_size_126, luma_plane_size_126, luma_plane_size_126, luma_plane_size_126};
common/frame.c:87:9: note: vect_get_vec_def_for_operand: i_311
common/frame.c:87:9: note: vect_is_simple_use: operand i_311
common/frame.c:87:9: note: def_stmt: i_311 = PHI <0(67), i_140(26)>
common/frame.c:87:9: note: type of def: 4.
common/frame.c:87:9: note: def =  i_311
  def_stmt =  i_311 = PHI <0(67), i_140(26)>
common/frame.c:87:9: note: add new stmt: vect__134.292_2 = vect_cst_.293_4 * vect_vec_iv_.291_8;
common/frame.c:87:9: note: ------>vectorizing statement: _135 = (sizetype) _134;

common/frame.c:87:9: note: multiple-types.
common/frame.c:87:9: note: transform statement.
common/frame.c:87:9: note: vect_is_simple_use: operand _134
common/frame.c:87:9: note: def_stmt: _134 = luma_plane_size_126 * i_311;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: transform conversion. ncopies = 1.
common/frame.c:87:9: note: vect_get_vec_def_for_operand: _134
common/frame.c:87:9: note: vect_is_simple_use: operand _134
common/frame.c:87:9: note: def_stmt: _134 = luma_plane_size_126 * i_311;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: def =  _134
  def_stmt =  _134 = luma_plane_size_126 * i_311;
common/frame.c:87:9: note: add new stmt: vect__135.294_1 = [vec_unpack_lo_expr] vect__134.292_2;
common/frame.c:87:9: note: add new stmt: vect__135.294_261 = [vec_unpack_hi_expr] vect__134.292_2;
common/frame.c:87:9: note: ------>vectorizing statement: _137 = _135 + pretmp_291;

common/frame.c:87:9: note: multiple-types.
common/frame.c:87:9: note: transform statement.
common/frame.c:87:9: note: vect_is_simple_use: operand _135
common/frame.c:87:9: note: def_stmt: _135 = (sizetype) _134;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: vect_is_simple_use: operand pretmp_291
common/frame.c:87:9: note: def_stmt: pretmp_291 = pretmp_308 + 32;
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: transform binary/unary operation.
common/frame.c:87:9: note: vect_get_vec_def_for_operand: _135
common/frame.c:87:9: note: vect_is_simple_use: operand _135
common/frame.c:87:9: note: def_stmt: _135 = (sizetype) _134;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: def =  _135
  def_stmt =  _135 = (sizetype) _134;
common/frame.c:87:9: note: vect_get_vec_def_for_operand: pretmp_291
common/frame.c:87:9: note: vect_is_simple_use: operand pretmp_291
common/frame.c:87:9: note: def_stmt: pretmp_291 = pretmp_308 + 32;
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: def =  pretmp_291
  def_stmt =  pretmp_291 = pretmp_308 + 32;
common/frame.c:87:9: note: Create vector_inv.
common/frame.c:87:9: note: created new init_stmt: vect_cst_.296_262 = {pretmp_291, pretmp_291};
common/frame.c:87:9: note: add new stmt: vect__137.295_243 = vect__135.294_1 + vect_cst_.296_262;
common/frame.c:87:9: note: add new stmt: vect__137.295_267 = vect__135.294_261 + vect_cst_.296_262;
common/frame.c:87:9: note: ------>vectorizing statement: _138 = _129 + _137;

common/frame.c:87:9: note: multiple-types.
common/frame.c:87:9: note: transform statement.
common/frame.c:87:9: note: vect_is_simple_use: operand _129
common/frame.c:87:9: note: def_stmt: _129 = x264_malloc (_127);
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: vect_is_simple_use: operand _137
common/frame.c:87:9: note: def_stmt: _137 = _135 + pretmp_291;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: transform binary/unary operation.
common/frame.c:87:9: note: vect_get_vec_def_for_operand: _129
common/frame.c:87:9: note: vect_is_simple_use: operand _129
common/frame.c:87:9: note: def_stmt: _129 = x264_malloc (_127);
common/frame.c:87:9: note: type of def: 2.
common/frame.c:87:9: note: def =  _129
  def_stmt =  _129 = x264_malloc (_127);
common/frame.c:87:9: note: Create vector_inv.
common/frame.c:87:9: note: created new init_stmt: _268 = (long unsigned int) _129;
common/frame.c:87:9: note: created new init_stmt: vect_cst_.298_221 = {_268, _268};
common/frame.c:87:9: note: vect_get_vec_def_for_operand: _137
common/frame.c:87:9: note: vect_is_simple_use: operand _137
common/frame.c:87:9: note: def_stmt: _137 = _135 + pretmp_291;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: def =  _137
  def_stmt =  _137 = _135 + pretmp_291;
common/frame.c:87:9: note: add new stmt: vect__138.297_222 = vect_cst_.298_221 + vect__137.295_243;
common/frame.c:87:9: note: add new stmt: vect__138.297_269 = vect_cst_.298_221 + vect__137.295_267;
common/frame.c:87:9: note: ------>vectorizing statement: frame_29->lowres[i_311] = _138;

common/frame.c:87:9: note: multiple-types.
common/frame.c:87:9: note: transform statement.
common/frame.c:87:9: note: vect_is_simple_use: operand _138
common/frame.c:87:9: note: def_stmt: _138 = _129 + _137;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: transform store. ncopies = 2
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:87:9: note: vect_get_vec_def_for_operand: _138
common/frame.c:87:9: note: vect_is_simple_use: operand _138
common/frame.c:87:9: note: def_stmt: _138 = _129 + _137;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: def =  _138
  def_stmt =  _138 = _129 + _137;
common/frame.c:87:9: note: create vector_type-pointer variable to type: vector(2) long unsigned int  vectorizing a record based array ref: *frame_29
common/frame.c:87:9: note: created vectp_frame.300_270
common/frame.c:87:9: note: add new stmt: MEM[(uint8_t * *)vectp_frame.299_271] = vect__138.297_222;
common/frame.c:87:9: note: vect_is_simple_use: operand vect__138.297_222
common/frame.c:87:9: note: def_stmt: vect__138.297_222 = vect_cst_.298_221 + vect__137.295_243;
common/frame.c:87:9: note: type of def: 3.
common/frame.c:87:9: note: add new stmt: vectp_frame.299_165 = vectp_frame.299_271 + 16;
common/frame.c:87:9: note: add new stmt: MEM[(uint8_t * *)vectp_frame.299_165] = vect__138.297_269;
common/frame.c:87:9: note: ------>vectorizing statement: i_140 = i_311 + 1;

common/frame.c:87:9: note: transform statement.
common/frame.c:87:9: note: vect_is_simple_use: operand i_311
common/frame.c:87:9: note: def_stmt: i_311 = PHI <0(67), i_140(26)>
common/frame.c:87:9: note: type of def: 4.
common/frame.c:87:9: note: vect_is_simple_use: operand 1
common/frame.c:87:9: note: transform binary/unary operation.
common/frame.c:87:9: note: vect_get_vec_def_for_operand: i_311
common/frame.c:87:9: note: vect_is_simple_use: operand i_311
common/frame.c:87:9: note: def_stmt: i_311 = PHI <0(67), i_140(26)>
common/frame.c:87:9: note: type of def: 4.
common/frame.c:87:9: note: def =  i_311
  def_stmt =  i_311 = PHI <0(67), i_140(26)>
common/frame.c:87:9: note: vect_get_vec_def_for_operand: 1
common/frame.c:87:9: note: vect_is_simple_use: operand 1
common/frame.c:87:9: note: Create vector_cst. nunits = 4
common/frame.c:87:9: note: created new init_stmt: vect_cst_.302_139 = { 1, 1, 1, 1 };
common/frame.c:87:9: note: add new stmt: vect_i_140.301_168 = vect_vec_iv_.291_8 + vect_cst_.302_139;
common/frame.c:87:9: note: ------>vectorizing statement: # DEBUG i => i_140

common/frame.c:87:9: note: ------>vectorizing statement: # DEBUG i => i_140

common/frame.c:87:9: note: ------>vectorizing statement: ivtmp_281 = ivtmp_24 - 1;

common/frame.c:87:9: note: ------>vectorizing statement: vectp_frame.299_272 = vectp_frame.299_165 + 16;

common/frame.c:87:9: note: ------>vectorizing statement: if (ivtmp_281 != 0)


loop at common/frame.c:88: if (ivtmp_103 < 1)

;; Scaling loop 4 with scale 0.250000, bounding iterations to 1 from guessed 4
;; guessed iterations are now 1
common/frame.c:87:9: note: LOOP VECTORIZED


Analyzing loop at common/frame.c:68
common/frame.c:68:9: note: ===== analyze_loop_nest =====
common/frame.c:68:9: note: === vect_analyze_loop_form ===
common/frame.c:68:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/frame.c:68:9: note: === vect_analyze_data_refs ===
Creating dr for frame_29->filtered[i_288]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_29
	offset from base address: 0
	constant offset from base address: 120
	step: 8
	aligned to: 128
	base_object: *frame_29
	Access function 0: {0, +, 1}_3
	Access function 1: 960
common/frame.c:68:9: note: got vectype for stmt: frame_29->filtered[i_288] = _98;
vector(2) long unsigned int
common/frame.c:68:9: note: === vect_analyze_scalar_cycles ===
common/frame.c:68:9: note: Analyze phi: i_288 = PHI <0(16), i_100(18)>

common/frame.c:68:9: note: Access function of PHI: {0, +, 1}_3
common/frame.c:68:9: note: step: 1,  init: 0
common/frame.c:68:9: note: Detected induction.
common/frame.c:68:9: note: Analyze phi: .MEM_285 = PHI <.MEM_90(16), .MEM_99(18)>

common/frame.c:68:9: note: Analyze phi: ivtmp_96 = PHI <4(16), ivtmp_277(18)>

common/frame.c:68:9: note: Access function of PHI: {4, +, 4294967295}_3
common/frame.c:68:9: note: step: 4294967295,  init: 4
common/frame.c:68:9: note: Detected induction.
common/frame.c:68:9: note: === vect_pattern_recog ===
common/frame.c:68:9: note: vect_is_simple_use: operand luma_plane_size_71
common/frame.c:68:9: note: def_stmt: luma_plane_size_71 = _67 * _70;
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: === vect_analyze_data_ref_accesses ===
common/frame.c:68:9: note: === vect_mark_stmts_to_be_vectorized ===
common/frame.c:68:9: note: init: phi relevant? i_288 = PHI <0(16), i_100(18)>
common/frame.c:68:9: note: init: phi relevant? .MEM_285 = PHI <.MEM_90(16), .MEM_99(18)>
common/frame.c:68:9: note: init: phi relevant? ivtmp_96 = PHI <4(16), ivtmp_277(18)>
common/frame.c:68:9: note: init: stmt relevant? # DEBUG i => i_288
common/frame.c:68:9: note: init: stmt relevant? _91 = luma_plane_size_71 * i_288;
common/frame.c:68:9: note: init: stmt relevant? _92 = (sizetype) _91;
common/frame.c:68:9: note: init: stmt relevant? _97 = _92 + pretmp_318;
common/frame.c:68:9: note: init: stmt relevant? _98 = _89 + _97;
common/frame.c:68:9: note: init: stmt relevant? frame_29->filtered[i_288] = _98;
common/frame.c:68:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/frame.c:68:9: note: mark relevant 4, live 0.
common/frame.c:68:9: note: init: stmt relevant? i_100 = i_288 + 1;
common/frame.c:68:9: note: init: stmt relevant? # DEBUG i => i_100
common/frame.c:68:9: note: init: stmt relevant? # DEBUG i => i_100
common/frame.c:68:9: note: init: stmt relevant? ivtmp_277 = ivtmp_96 - 1;
common/frame.c:68:9: note: init: stmt relevant? if (ivtmp_277 != 0)
common/frame.c:68:9: note: worklist: examine stmt: frame_29->filtered[i_288] = _98;
common/frame.c:68:9: note: vect_is_simple_use: operand _98
common/frame.c:68:9: note: def_stmt: _98 = _89 + _97;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: mark relevant 4, live 0.
common/frame.c:68:9: note: worklist: examine stmt: _98 = _89 + _97;
common/frame.c:68:9: note: vect_is_simple_use: operand _89
common/frame.c:68:9: note: def_stmt: _89 = x264_malloc (_87);
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: def_stmt is out of loop.
common/frame.c:68:9: note: vect_is_simple_use: operand _97
common/frame.c:68:9: note: def_stmt: _97 = _92 + pretmp_318;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: mark relevant 4, live 0.
common/frame.c:68:9: note: worklist: examine stmt: _97 = _92 + pretmp_318;
common/frame.c:68:9: note: vect_is_simple_use: operand _92
common/frame.c:68:9: note: def_stmt: _92 = (sizetype) _91;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: mark relevant 4, live 0.
common/frame.c:68:9: note: vect_is_simple_use: operand pretmp_318
common/frame.c:68:9: note: def_stmt: pretmp_318 = pretmp_316 + 32;
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: def_stmt is out of loop.
common/frame.c:68:9: note: worklist: examine stmt: _92 = (sizetype) _91;
common/frame.c:68:9: note: vect_is_simple_use: operand _91
common/frame.c:68:9: note: def_stmt: _91 = luma_plane_size_71 * i_288;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: mark relevant 4, live 0.
common/frame.c:68:9: note: worklist: examine stmt: _91 = luma_plane_size_71 * i_288;
common/frame.c:68:9: note: vect_is_simple_use: operand luma_plane_size_71
common/frame.c:68:9: note: def_stmt: luma_plane_size_71 = _67 * _70;
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: def_stmt is out of loop.
common/frame.c:68:9: note: vect_is_simple_use: operand i_288
common/frame.c:68:9: note: def_stmt: i_288 = PHI <0(16), i_100(18)>
common/frame.c:68:9: note: type of def: 4.
common/frame.c:68:9: note: mark relevant 4, live 0.
common/frame.c:68:9: note: worklist: examine stmt: i_288 = PHI <0(16), i_100(18)>
common/frame.c:68:9: note: vect_is_simple_use: operand 0
common/frame.c:68:9: note: vect_is_simple_use: operand i_100
common/frame.c:68:9: note: def_stmt: i_100 = i_288 + 1;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: mark relevant 4, live 0.
common/frame.c:68:9: note: worklist: examine stmt: i_100 = i_288 + 1;
common/frame.c:68:9: note: vect_is_simple_use: operand i_288
common/frame.c:68:9: note: def_stmt: i_288 = PHI <0(16), i_100(18)>
common/frame.c:68:9: note: type of def: 4.
common/frame.c:68:9: note: mark relevant 4, live 0.
common/frame.c:68:9: note: already marked relevant/live.
common/frame.c:68:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: frame_29->filtered[i_288] = _98;
  stmt_b: frame_29->filtered[i_288] = _98;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_3)
  (chrec_b = {0, +, 1}_3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 960)
  (chrec_b = 960)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/frame.c:68:9: note: === vect_determine_vectorization_factor ===
common/frame.c:68:9: note: ==> examining phi: i_288 = PHI <0(16), i_100(18)>

common/frame.c:68:9: note: get vectype for scalar type:  int
common/frame.c:68:9: note: vectype: vector(4) int
common/frame.c:68:9: note: nunits = 4
common/frame.c:68:9: note: ==> examining phi: .MEM_285 = PHI <.MEM_90(16), .MEM_99(18)>

common/frame.c:68:9: note: ==> examining phi: ivtmp_96 = PHI <4(16), ivtmp_277(18)>

common/frame.c:68:9: note: ==> examining statement: # DEBUG i => i_288

common/frame.c:68:9: note: skip.
common/frame.c:68:9: note: ==> examining statement: _91 = luma_plane_size_71 * i_288;

common/frame.c:68:9: note: get vectype for scalar type:  int
common/frame.c:68:9: note: vectype: vector(4) int
common/frame.c:68:9: note: get vectype for scalar type:  int
common/frame.c:68:9: note: vectype: vector(4) int
common/frame.c:68:9: note: nunits = 4
common/frame.c:68:9: note: ==> examining statement: _92 = (sizetype) _91;

common/frame.c:68:9: note: get vectype for scalar type:  sizetype
common/frame.c:68:9: note: vectype: vector(2) sizetype
common/frame.c:68:9: note: get vectype for scalar type:  int
common/frame.c:68:9: note: vectype: vector(4) int
common/frame.c:68:9: note: nunits = 4
common/frame.c:68:9: note: ==> examining statement: _97 = _92 + pretmp_318;

common/frame.c:68:9: note: get vectype for scalar type:  sizetype
common/frame.c:68:9: note: vectype: vector(2) sizetype
common/frame.c:68:9: note: get vectype for scalar type:  sizetype
common/frame.c:68:9: note: vectype: vector(2) sizetype
common/frame.c:68:9: note: nunits = 2
common/frame.c:68:9: note: ==> examining statement: _98 = _89 + _97;

common/frame.c:68:9: note: get vectype for scalar type:  uint8_t *
common/frame.c:68:9: note: vectype: vector(2) long unsigned int
common/frame.c:68:9: note: get vectype for scalar type:  void *
common/frame.c:68:9: note: vectype: vector(2) long unsigned int
common/frame.c:68:9: note: nunits = 2
common/frame.c:68:9: note: ==> examining statement: frame_29->filtered[i_288] = _98;

common/frame.c:68:9: note: get vectype for scalar type:  uint8_t *
common/frame.c:68:9: note: vectype: vector(2) long unsigned int
common/frame.c:68:9: note: nunits = 2
common/frame.c:68:9: note: ==> examining statement: i_100 = i_288 + 1;

common/frame.c:68:9: note: get vectype for scalar type:  int
common/frame.c:68:9: note: vectype: vector(4) int
common/frame.c:68:9: note: get vectype for scalar type:  int
common/frame.c:68:9: note: vectype: vector(4) int
common/frame.c:68:9: note: nunits = 4
common/frame.c:68:9: note: ==> examining statement: # DEBUG i => i_100

common/frame.c:68:9: note: skip.
common/frame.c:68:9: note: ==> examining statement: # DEBUG i => i_100

common/frame.c:68:9: note: skip.
common/frame.c:68:9: note: ==> examining statement: ivtmp_277 = ivtmp_96 - 1;

common/frame.c:68:9: note: skip.
common/frame.c:68:9: note: ==> examining statement: if (ivtmp_277 != 0)

common/frame.c:68:9: note: skip.
common/frame.c:68:9: note: vectorization factor = 4
common/frame.c:68:9: note: === vect_analyze_data_refs_alignment ===
common/frame.c:68:9: note: vect_compute_data_ref_alignment:
common/frame.c:68:9: note: can't force alignment of ref: frame_29->filtered[i_288]
common/frame.c:68:9: note: === vect_prune_runtime_alias_test_list ===
common/frame.c:68:9: note: === vect_enhance_data_refs_alignment ===
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:68:9: note: Unknown misalignment, is_packed = 0
common/frame.c:68:9: note: vect_can_advance_ivs_p:
common/frame.c:68:9: note: Analyze phi: i_288 = PHI <0(16), i_100(18)>

common/frame.c:68:9: note: Analyze phi: .MEM_285 = PHI <.MEM_90(16), .MEM_99(18)>

common/frame.c:68:9: note: virtual phi. skip.
common/frame.c:68:9: note: Analyze phi: ivtmp_96 = PHI <4(16), ivtmp_277(18)>

Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:68:9: note: Vectorizing an unaligned access.
common/frame.c:68:9: note: === vect_analyze_slp ===
common/frame.c:68:9: note: === vect_make_slp_decision ===
common/frame.c:68:9: note: === vect_detect_hybrid_slp ===
common/frame.c:68:9: note: === vect_analyze_loop_operations ===
common/frame.c:68:9: note: examining phi: i_288 = PHI <0(16), i_100(18)>

common/frame.c:68:9: note: === vectorizable_induction ===
common/frame.c:68:9: note: vect_model_induction_cost: inside_cost = 1, prologue_cost = 2 .
common/frame.c:68:9: note: examining phi: .MEM_285 = PHI <.MEM_90(16), .MEM_99(18)>

common/frame.c:68:9: note: examining phi: ivtmp_96 = PHI <4(16), ivtmp_277(18)>

common/frame.c:68:9: note: ==> examining statement: # DEBUG i => i_288
common/frame.c:68:9: note: irrelevant.
common/frame.c:68:9: note: ==> examining statement: _91 = luma_plane_size_71 * i_288;
common/frame.c:68:9: note: vect_is_simple_use: operand luma_plane_size_71
common/frame.c:68:9: note: def_stmt: luma_plane_size_71 = _67 * _70;
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: vect_is_simple_use: operand i_288
common/frame.c:68:9: note: def_stmt: i_288 = PHI <0(16), i_100(18)>
common/frame.c:68:9: note: type of def: 4.
common/frame.c:68:9: note: === vectorizable_operation ===
common/frame.c:68:9: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
common/frame.c:68:9: note: ==> examining statement: _92 = (sizetype) _91;
common/frame.c:68:9: note: vect_is_simple_use: operand _91
common/frame.c:68:9: note: def_stmt: _91 = luma_plane_size_71 * i_288;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: === vectorizable_conversion ===
common/frame.c:68:9: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/frame.c:68:9: note: ==> examining statement: _97 = _92 + pretmp_318;
common/frame.c:68:9: note: vect_is_simple_use: operand _92
common/frame.c:68:9: note: def_stmt: _92 = (sizetype) _91;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: vect_is_simple_use: operand pretmp_318
common/frame.c:68:9: note: def_stmt: pretmp_318 = pretmp_316 + 32;
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: === vectorizable_operation ===
common/frame.c:68:9: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 1 .
common/frame.c:68:9: note: ==> examining statement: _98 = _89 + _97;
common/frame.c:68:9: note: vect_is_simple_use: operand _89
common/frame.c:68:9: note: def_stmt: _89 = x264_malloc (_87);
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: vect_is_simple_use: operand _97
common/frame.c:68:9: note: def_stmt: _97 = _92 + pretmp_318;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: === vectorizable_operation ===
common/frame.c:68:9: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 1 .
common/frame.c:68:9: note: ==> examining statement: frame_29->filtered[i_288] = _98;
common/frame.c:68:9: note: vect_is_simple_use: operand _98
common/frame.c:68:9: note: def_stmt: _98 = _89 + _97;
common/frame.c:68:9: note: type of def: 3.
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:68:9: note: vect_model_store_cost: unaligned supported by hardware.
common/frame.c:68:9: note: vect_model_store_cost: inside_cost = 4, prologue_cost = 0 .
common/frame.c:68:9: note: ==> examining statement: i_100 = i_288 + 1;
common/frame.c:68:9: note: vect_is_simple_use: operand i_288
common/frame.c:68:9: note: def_stmt: i_288 = PHI <0(16), i_100(18)>
common/frame.c:68:9: note: type of def: 4.
common/frame.c:68:9: note: vect_is_simple_use: operand 1
common/frame.c:68:9: note: === vectorizable_operation ===
common/frame.c:68:9: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 1 .
common/frame.c:68:9: note: ==> examining statement: # DEBUG i => i_100
common/frame.c:68:9: note: irrelevant.
common/frame.c:68:9: note: ==> examining statement: # DEBUG i => i_100
common/frame.c:68:9: note: irrelevant.
common/frame.c:68:9: note: ==> examining statement: ivtmp_277 = ivtmp_96 - 1;
common/frame.c:68:9: note: irrelevant.
common/frame.c:68:9: note: ==> examining statement: if (ivtmp_277 != 0)
common/frame.c:68:9: note: irrelevant.
common/frame.c:68:9: note: vectorization_factor = 4, niters = 4
common/frame.c:68:9: note: === vect_update_slp_costs_according_to_vf ===
common/frame.c:68:9: note: Cost model analysis: 
  Vector inside of loop cost: 13
  Vector prologue cost: 6
  Vector epilogue cost: 0
  Scalar iteration cost: 6
  Scalar outside cost: 0
  Vector outside cost: 6
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 3
common/frame.c:68:9: note:   Runtime profitability threshold = 3
common/frame.c:68:9: note:   Static estimate profitability threshold = 3
common/frame.c:68:9: note: loop vectorized
common/frame.c:68:9: note: === vec_transform_loop ===
common/frame.c:68:9: note: ------>vectorizing phi: i_288 = PHI <0(68), i_100(18)>

common/frame.c:68:9: note: transform phi.
common/frame.c:68:9: note: transform induction phi.
common/frame.c:68:9: note: created new init_stmt: vect_cst_.304_317 = { 0, 1, 2, 3 };
common/frame.c:68:9: note: created new init_stmt: vect_cst_.305_307 = { 4, 4, 4, 4 };
common/frame.c:68:9: note: transform induction: created def-use cycle: vect_vec_iv_.306_306 = PHI <vect_cst_.304_317(68), vect_vec_iv_.306_303(18)>

vect_vec_iv_.306_303 = vect_vec_iv_.306_306 + vect_cst_.305_307;

common/frame.c:68:9: note: ------>vectorizing phi: .MEM_285 = PHI <.MEM_90(68), .MEM_99(18)>

common/frame.c:68:9: note: ------>vectorizing phi: ivtmp_96 = PHI <4(68), ivtmp_277(18)>

common/frame.c:68:9: note: ------>vectorizing phi: vect_vec_iv_.306_306 = PHI <vect_cst_.304_317(68), vect_vec_iv_.306_303(18)>

common/frame.c:68:9: note: ------>vectorizing statement: vect_vec_iv_.306_303 = vect_vec_iv_.306_306 + vect_cst_.305_307;

common/frame.c:68:9: note: ------>vectorizing statement: # DEBUG i => i_288

common/frame.c:68:9: note: ------>vectorizing statement: _91 = luma_plane_size_71 * i_288;

common/frame.c:68:9: note: transform statement.
common/frame.c:68:9: note: vect_is_simple_use: operand luma_plane_size_71
common/frame.c:68:9: note: def_stmt: luma_plane_size_71 = _67 * _70;
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: vect_is_simple_use: operand i_288
common/frame.c:68:9: note: def_stmt: i_288 = PHI <0(68), i_100(18)>
common/frame.c:68:9: note: type of def: 4.
common/frame.c:68:9: note: transform binary/unary operation.
common/frame.c:68:9: note: vect_get_vec_def_for_operand: luma_plane_size_71
common/frame.c:68:9: note: vect_is_simple_use: operand luma_plane_size_71
common/frame.c:68:9: note: def_stmt: luma_plane_size_71 = _67 * _70;
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: def =  luma_plane_size_71
  def_stmt =  luma_plane_size_71 = _67 * _70;
common/frame.c:68:9: note: Create vector_inv.
common/frame.c:68:9: note: created new init_stmt: vect_cst_.308_292 = {luma_plane_size_71, luma_plane_size_71, luma_plane_size_71, luma_plane_size_71};
common/frame.c:68:9: note: vect_get_vec_def_for_operand: i_288
common/frame.c:68:9: note: vect_is_simple_use: operand i_288
common/frame.c:68:9: note: def_stmt: i_288 = PHI <0(68), i_100(18)>
common/frame.c:68:9: note: type of def: 4.
common/frame.c:68:9: note: def =  i_288
  def_stmt =  i_288 = PHI <0(68), i_100(18)>
common/frame.c:68:9: note: add new stmt: vect__91.307_283 = vect_cst_.308_292 * vect_vec_iv_.306_306;
common/frame.c:68:9: note: ------>vectorizing statement: _92 = (sizetype) _91;

common/frame.c:68:9: note: multiple-types.
common/frame.c:68:9: note: transform statement.
common/frame.c:68:9: note: vect_is_simple_use: operand _91
common/frame.c:68:9: note: def_stmt: _91 = luma_plane_size_71 * i_288;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: transform conversion. ncopies = 1.
common/frame.c:68:9: note: vect_get_vec_def_for_operand: _91
common/frame.c:68:9: note: vect_is_simple_use: operand _91
common/frame.c:68:9: note: def_stmt: _91 = luma_plane_size_71 * i_288;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: def =  _91
  def_stmt =  _91 = luma_plane_size_71 * i_288;
common/frame.c:68:9: note: add new stmt: vect__92.309_276 = [vec_unpack_lo_expr] vect__91.307_283;
common/frame.c:68:9: note: add new stmt: vect__92.309_10 = [vec_unpack_hi_expr] vect__91.307_283;
common/frame.c:68:9: note: ------>vectorizing statement: _97 = _92 + pretmp_318;

common/frame.c:68:9: note: multiple-types.
common/frame.c:68:9: note: transform statement.
common/frame.c:68:9: note: vect_is_simple_use: operand _92
common/frame.c:68:9: note: def_stmt: _92 = (sizetype) _91;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: vect_is_simple_use: operand pretmp_318
common/frame.c:68:9: note: def_stmt: pretmp_318 = pretmp_316 + 32;
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: transform binary/unary operation.
common/frame.c:68:9: note: vect_get_vec_def_for_operand: _92
common/frame.c:68:9: note: vect_is_simple_use: operand _92
common/frame.c:68:9: note: def_stmt: _92 = (sizetype) _91;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: def =  _92
  def_stmt =  _92 = (sizetype) _91;
common/frame.c:68:9: note: vect_get_vec_def_for_operand: pretmp_318
common/frame.c:68:9: note: vect_is_simple_use: operand pretmp_318
common/frame.c:68:9: note: def_stmt: pretmp_318 = pretmp_316 + 32;
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: def =  pretmp_318
  def_stmt =  pretmp_318 = pretmp_316 + 32;
common/frame.c:68:9: note: Create vector_inv.
common/frame.c:68:9: note: created new init_stmt: vect_cst_.311_3 = {pretmp_318, pretmp_318};
common/frame.c:68:9: note: add new stmt: vect__97.310_72 = vect__92.309_276 + vect_cst_.311_3;
common/frame.c:68:9: note: add new stmt: vect__97.310_314 = vect__92.309_10 + vect_cst_.311_3;
common/frame.c:68:9: note: ------>vectorizing statement: _98 = _89 + _97;

common/frame.c:68:9: note: multiple-types.
common/frame.c:68:9: note: transform statement.
common/frame.c:68:9: note: vect_is_simple_use: operand _89
common/frame.c:68:9: note: def_stmt: _89 = x264_malloc (_87);
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: vect_is_simple_use: operand _97
common/frame.c:68:9: note: def_stmt: _97 = _92 + pretmp_318;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: transform binary/unary operation.
common/frame.c:68:9: note: vect_get_vec_def_for_operand: _89
common/frame.c:68:9: note: vect_is_simple_use: operand _89
common/frame.c:68:9: note: def_stmt: _89 = x264_malloc (_87);
common/frame.c:68:9: note: type of def: 2.
common/frame.c:68:9: note: def =  _89
  def_stmt =  _89 = x264_malloc (_87);
common/frame.c:68:9: note: Create vector_inv.
common/frame.c:68:9: note: created new init_stmt: _93 = (long unsigned int) _89;
common/frame.c:68:9: note: created new init_stmt: vect_cst_.313_94 = {_93, _93};
common/frame.c:68:9: note: vect_get_vec_def_for_operand: _97
common/frame.c:68:9: note: vect_is_simple_use: operand _97
common/frame.c:68:9: note: def_stmt: _97 = _92 + pretmp_318;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: def =  _97
  def_stmt =  _97 = _92 + pretmp_318;
common/frame.c:68:9: note: add new stmt: vect__98.312_95 = vect_cst_.313_94 + vect__97.310_72;
common/frame.c:68:9: note: add new stmt: vect__98.312_136 = vect_cst_.313_94 + vect__97.310_314;
common/frame.c:68:9: note: ------>vectorizing statement: frame_29->filtered[i_288] = _98;

common/frame.c:68:9: note: multiple-types.
common/frame.c:68:9: note: transform statement.
common/frame.c:68:9: note: vect_is_simple_use: operand _98
common/frame.c:68:9: note: def_stmt: _98 = _89 + _97;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: transform store. ncopies = 2
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:68:9: note: vect_get_vec_def_for_operand: _98
common/frame.c:68:9: note: vect_is_simple_use: operand _98
common/frame.c:68:9: note: def_stmt: _98 = _89 + _97;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: def =  _98
  def_stmt =  _98 = _89 + _97;
common/frame.c:68:9: note: create vector_type-pointer variable to type: vector(2) long unsigned int  vectorizing a record based array ref: *frame_29
common/frame.c:68:9: note: created vectp_frame.315_300
common/frame.c:68:9: note: add new stmt: MEM[(uint8_t * *)vectp_frame.314_131] = vect__98.312_95;
common/frame.c:68:9: note: vect_is_simple_use: operand vect__98.312_95
common/frame.c:68:9: note: def_stmt: vect__98.312_95 = vect_cst_.313_94 + vect__97.310_72;
common/frame.c:68:9: note: type of def: 3.
common/frame.c:68:9: note: add new stmt: vectp_frame.314_312 = vectp_frame.314_131 + 16;
common/frame.c:68:9: note: add new stmt: MEM[(uint8_t * *)vectp_frame.314_312] = vect__98.312_136;
common/frame.c:68:9: note: ------>vectorizing statement: i_100 = i_288 + 1;

common/frame.c:68:9: note: transform statement.
common/frame.c:68:9: note: vect_is_simple_use: operand i_288
common/frame.c:68:9: note: def_stmt: i_288 = PHI <0(68), i_100(18)>
common/frame.c:68:9: note: type of def: 4.
common/frame.c:68:9: note: vect_is_simple_use: operand 1
common/frame.c:68:9: note: transform binary/unary operation.
common/frame.c:68:9: note: vect_get_vec_def_for_operand: i_288
common/frame.c:68:9: note: vect_is_simple_use: operand i_288
common/frame.c:68:9: note: def_stmt: i_288 = PHI <0(68), i_100(18)>
common/frame.c:68:9: note: type of def: 4.
common/frame.c:68:9: note: def =  i_288
  def_stmt =  i_288 = PHI <0(68), i_100(18)>
common/frame.c:68:9: note: vect_get_vec_def_for_operand: 1
common/frame.c:68:9: note: vect_is_simple_use: operand 1
common/frame.c:68:9: note: Create vector_cst. nunits = 4
common/frame.c:68:9: note: created new init_stmt: vect_cst_.317_99 = { 1, 1, 1, 1 };
common/frame.c:68:9: note: add new stmt: vect_i_100.316_141 = vect_vec_iv_.306_306 + vect_cst_.317_99;
common/frame.c:68:9: note: ------>vectorizing statement: # DEBUG i => i_100

common/frame.c:68:9: note: ------>vectorizing statement: # DEBUG i => i_100

common/frame.c:68:9: note: ------>vectorizing statement: ivtmp_277 = ivtmp_96 - 1;

common/frame.c:68:9: note: ------>vectorizing statement: vectp_frame.314_132 = vectp_frame.314_312 + 16;

common/frame.c:68:9: note: ------>vectorizing statement: if (ivtmp_277 != 0)


loop at common/frame.c:69: if (ivtmp_235 < 1)

;; Scaling loop 3 with scale 0.250000, bounding iterations to 1 from guessed 3
;; guessed iterations are now 1
common/frame.c:68:9: note: LOOP VECTORIZED


Analyzing loop at common/frame.c:60
common/frame.c:60:9: note: ===== analyze_loop_nest =====
common/frame.c:60:9: note: === vect_analyze_loop_form ===
common/frame.c:60:9: note: not vectorized: control flow in loop.
common/frame.c:60:9: note: bad loop form.

Analyzing loop at common/frame.c:50
common/frame.c:50:5: note: ===== analyze_loop_nest =====
common/frame.c:50:5: note: === vect_analyze_loop_form ===
common/frame.c:50:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [2, + , 4294967295] != 0
  bounds on difference of bases: -2 ... -2
  result:
    # of iterations 2, bounded by 2
common/frame.c:50:5: note: === vect_analyze_data_refs ===
Creating dr for frame_29->i_stride[i_299]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_29
	offset from base address: 0
	constant offset from base address: 48
	step: 4
	aligned to: 128
	base_object: *frame_29
	Access function 0: {0, +, 1}_1
	Access function 1: 384
Creating dr for frame_29->i_width[i_299]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_29
	offset from base address: 0
	constant offset from base address: 60
	step: 4
	aligned to: 128
	base_object: *frame_29
	Access function 0: {0, +, 1}_1
	Access function 1: 480
Creating dr for frame_29->i_lines[i_299]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_29
	offset from base address: 0
	constant offset from base address: 72
	step: 4
	aligned to: 128
	base_object: *frame_29
	Access function 0: {0, +, 1}_1
	Access function 1: 576
common/frame.c:50:5: note: got vectype for stmt: frame_29->i_stride[i_299] = _58;
vector(4) int
common/frame.c:50:5: note: got vectype for stmt: frame_29->i_width[i_299] = _61;
vector(4) int
common/frame.c:50:5: note: got vectype for stmt: frame_29->i_lines[i_299] = _64;
vector(4) int
common/frame.c:50:5: note: === vect_analyze_scalar_cycles ===
common/frame.c:50:5: note: Analyze phi: i_299 = PHI <i_66(8), 0(6)>

common/frame.c:50:5: note: Access function of PHI: {0, +, 1}_1
common/frame.c:50:5: note: step: 1,  init: 0
common/frame.c:50:5: note: Detected induction.
common/frame.c:50:5: note: Analyze phi: .MEM_294 = PHI <.MEM_65(8), .MEM_55(6)>

common/frame.c:50:5: note: Analyze phi: ivtmp_25 = PHI <ivtmp_23(8), 3(6)>

common/frame.c:50:5: note: Access function of PHI: {3, +, 4294967295}_1
common/frame.c:50:5: note: step: 4294967295,  init: 3
common/frame.c:50:5: note: Detected induction.
common/frame.c:50:5: note: === vect_pattern_recog ===
common/frame.c:50:5: note: vect_is_simple_use: operand _56
common/frame.c:50:5: note: def_stmt: _56 = i_299 != 0;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: vect_recog_bool_pattern: detected:
common/frame.c:50:5: note: pattern recognized: patt_319 = (int) patt_236;
common/frame.c:50:5: note: additional pattern stmt: patt_236 = i_299 != 0 ? 1 : 0;
common/frame.c:50:5: note: === vect_analyze_data_ref_accesses ===
common/frame.c:50:5: note: === vect_mark_stmts_to_be_vectorized ===
common/frame.c:50:5: note: init: phi relevant? i_299 = PHI <i_66(8), 0(6)>
common/frame.c:50:5: note: init: phi relevant? .MEM_294 = PHI <.MEM_65(8), .MEM_55(6)>
common/frame.c:50:5: note: init: phi relevant? ivtmp_25 = PHI <ivtmp_23(8), 3(6)>
common/frame.c:50:5: note: init: stmt relevant? # DEBUG i => i_299
common/frame.c:50:5: note: init: stmt relevant? _56 = i_299 != 0;
common/frame.c:50:5: note: init: stmt relevant? _57 = (int) _56;
common/frame.c:50:5: note: init: stmt relevant? _58 = i_stride_46 >> _57;
common/frame.c:50:5: note: init: stmt relevant? frame_29->i_stride[i_299] = _58;
common/frame.c:50:5: note: vec_stmt_relevant_p: stmt has vdefs.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: init: stmt relevant? _61 = i_width_41 >> _57;
common/frame.c:50:5: note: init: stmt relevant? frame_29->i_width[i_299] = _61;
common/frame.c:50:5: note: vec_stmt_relevant_p: stmt has vdefs.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: init: stmt relevant? _64 = i_lines_54 >> _57;
common/frame.c:50:5: note: init: stmt relevant? frame_29->i_lines[i_299] = _64;
common/frame.c:50:5: note: vec_stmt_relevant_p: stmt has vdefs.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: init: stmt relevant? i_66 = i_299 + 1;
common/frame.c:50:5: note: init: stmt relevant? # DEBUG i => i_66
common/frame.c:50:5: note: init: stmt relevant? # DEBUG i => i_66
common/frame.c:50:5: note: init: stmt relevant? ivtmp_23 = ivtmp_25 - 1;
common/frame.c:50:5: note: init: stmt relevant? if (ivtmp_23 != 0)
common/frame.c:50:5: note: worklist: examine stmt: frame_29->i_lines[i_299] = _64;
common/frame.c:50:5: note: vect_is_simple_use: operand _64
common/frame.c:50:5: note: def_stmt: _64 = i_lines_54 >> _57;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: worklist: examine stmt: _64 = i_lines_54 >> _57;
common/frame.c:50:5: note: vect_is_simple_use: operand i_lines_54
common/frame.c:50:5: note: def_stmt: i_lines_54 = _51 & _53;
common/frame.c:50:5: note: type of def: 2.
common/frame.c:50:5: note: def_stmt is out of loop.
common/frame.c:50:5: note: vect_is_simple_use: operand _57
common/frame.c:50:5: note: def_stmt: _57 = (int) _56;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: last stmt in pattern. don't mark relevant/live.
common/frame.c:50:5: note: worklist: examine stmt: patt_319 = (int) patt_236;
common/frame.c:50:5: note: vect_is_simple_use: operand patt_236
common/frame.c:50:5: note: def_stmt: patt_236 = i_299 != 0 ? 1 : 0;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: worklist: examine stmt: patt_236 = i_299 != 0 ? 1 : 0;
common/frame.c:50:5: note: vect_is_simple_use: operand i_299
common/frame.c:50:5: note: def_stmt: i_299 = PHI <i_66(8), 0(6)>
common/frame.c:50:5: note: type of def: 4.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: vect_is_simple_use: operand 0
common/frame.c:50:5: note: vect_is_simple_use: operand 1
common/frame.c:50:5: note: vect_is_simple_use: operand 0
common/frame.c:50:5: note: worklist: examine stmt: i_299 = PHI <i_66(8), 0(6)>
common/frame.c:50:5: note: vect_is_simple_use: operand i_66
common/frame.c:50:5: note: def_stmt: i_66 = i_299 + 1;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: vect_is_simple_use: operand 0
common/frame.c:50:5: note: worklist: examine stmt: i_66 = i_299 + 1;
common/frame.c:50:5: note: vect_is_simple_use: operand i_299
common/frame.c:50:5: note: def_stmt: i_299 = PHI <i_66(8), 0(6)>
common/frame.c:50:5: note: type of def: 4.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: already marked relevant/live.
common/frame.c:50:5: note: worklist: examine stmt: frame_29->i_width[i_299] = _61;
common/frame.c:50:5: note: vect_is_simple_use: operand _61
common/frame.c:50:5: note: def_stmt: _61 = i_width_41 >> _57;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: worklist: examine stmt: _61 = i_width_41 >> _57;
common/frame.c:50:5: note: vect_is_simple_use: operand i_width_41
common/frame.c:50:5: note: def_stmt: i_width_41 = _40 & -16;
common/frame.c:50:5: note: type of def: 2.
common/frame.c:50:5: note: def_stmt is out of loop.
common/frame.c:50:5: note: vect_is_simple_use: operand _57
common/frame.c:50:5: note: def_stmt: _57 = (int) _56;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: last stmt in pattern. don't mark relevant/live.
common/frame.c:50:5: note: already marked relevant/live.
common/frame.c:50:5: note: worklist: examine stmt: frame_29->i_stride[i_299] = _58;
common/frame.c:50:5: note: vect_is_simple_use: operand _58
common/frame.c:50:5: note: def_stmt: _58 = i_stride_46 >> _57;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: worklist: examine stmt: _58 = i_stride_46 >> _57;
common/frame.c:50:5: note: vect_is_simple_use: operand i_stride_46
common/frame.c:50:5: note: def_stmt: i_stride_46 = _44 & _45;
common/frame.c:50:5: note: type of def: 2.
common/frame.c:50:5: note: def_stmt is out of loop.
common/frame.c:50:5: note: vect_is_simple_use: operand _57
common/frame.c:50:5: note: def_stmt: _57 = (int) _56;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: mark relevant 4, live 0.
common/frame.c:50:5: note: last stmt in pattern. don't mark relevant/live.
common/frame.c:50:5: note: already marked relevant/live.
common/frame.c:50:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: frame_29->i_stride[i_299] = _58;
  stmt_b: frame_29->i_width[i_299] = _61;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 384)
  (chrec_b = 480)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: frame_29->i_stride[i_299] = _58;
  stmt_b: frame_29->i_lines[i_299] = _64;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 384)
  (chrec_b = 576)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: frame_29->i_width[i_299] = _61;
  stmt_b: frame_29->i_lines[i_299] = _64;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 480)
  (chrec_b = 576)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: frame_29->i_stride[i_299] = _58;
  stmt_b: frame_29->i_stride[i_299] = _58;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 384)
  (chrec_b = 384)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: frame_29->i_width[i_299] = _61;
  stmt_b: frame_29->i_width[i_299] = _61;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 480)
  (chrec_b = 480)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: frame_29->i_lines[i_299] = _64;
  stmt_b: frame_29->i_lines[i_299] = _64;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = 576)
  (chrec_b = 576)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/frame.c:50:5: note: === vect_determine_vectorization_factor ===
common/frame.c:50:5: note: ==> examining phi: i_299 = PHI <i_66(8), 0(6)>

common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: nunits = 4
common/frame.c:50:5: note: ==> examining phi: .MEM_294 = PHI <.MEM_65(8), .MEM_55(6)>

common/frame.c:50:5: note: ==> examining phi: ivtmp_25 = PHI <ivtmp_23(8), 3(6)>

common/frame.c:50:5: note: ==> examining statement: # DEBUG i => i_299

common/frame.c:50:5: note: skip.
common/frame.c:50:5: note: ==> examining statement: _56 = i_299 != 0;

common/frame.c:50:5: note: ==> examining pattern statement: patt_236 = i_299 != 0 ? 1 : 0;

common/frame.c:50:5: note: get vectype for scalar type:  unsigned int
common/frame.c:50:5: note: vectype: vector(4) unsigned int
common/frame.c:50:5: note: get vectype for scalar type:  unsigned int
common/frame.c:50:5: note: vectype: vector(4) unsigned int
common/frame.c:50:5: note: nunits = 4
common/frame.c:50:5: note: ==> examining statement: _57 = (int) _56;

common/frame.c:50:5: note: ==> examining pattern statement: patt_319 = (int) patt_236;

common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: nunits = 4
common/frame.c:50:5: note: ==> examining statement: _58 = i_stride_46 >> _57;

common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: nunits = 4
common/frame.c:50:5: note: ==> examining statement: frame_29->i_stride[i_299] = _58;

common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: nunits = 4
common/frame.c:50:5: note: ==> examining statement: _61 = i_width_41 >> _57;

common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: nunits = 4
common/frame.c:50:5: note: ==> examining statement: frame_29->i_width[i_299] = _61;

common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: nunits = 4
common/frame.c:50:5: note: ==> examining statement: _64 = i_lines_54 >> _57;

common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: nunits = 4
common/frame.c:50:5: note: ==> examining statement: frame_29->i_lines[i_299] = _64;

common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: nunits = 4
common/frame.c:50:5: note: ==> examining statement: i_66 = i_299 + 1;

common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: get vectype for scalar type:  int
common/frame.c:50:5: note: vectype: vector(4) int
common/frame.c:50:5: note: nunits = 4
common/frame.c:50:5: note: ==> examining statement: # DEBUG i => i_66

common/frame.c:50:5: note: skip.
common/frame.c:50:5: note: ==> examining statement: # DEBUG i => i_66

common/frame.c:50:5: note: skip.
common/frame.c:50:5: note: ==> examining statement: ivtmp_23 = ivtmp_25 - 1;

common/frame.c:50:5: note: skip.
common/frame.c:50:5: note: ==> examining statement: if (ivtmp_23 != 0)

common/frame.c:50:5: note: skip.
common/frame.c:50:5: note: vectorization factor = 4
common/frame.c:50:5: note: === vect_analyze_data_refs_alignment ===
common/frame.c:50:5: note: vect_compute_data_ref_alignment:
common/frame.c:50:5: note: can't force alignment of ref: frame_29->i_stride[i_299]
common/frame.c:50:5: note: vect_compute_data_ref_alignment:
common/frame.c:50:5: note: can't force alignment of ref: frame_29->i_width[i_299]
common/frame.c:50:5: note: vect_compute_data_ref_alignment:
common/frame.c:50:5: note: can't force alignment of ref: frame_29->i_lines[i_299]
common/frame.c:50:5: note: === vect_prune_runtime_alias_test_list ===
common/frame.c:50:5: note: === vect_enhance_data_refs_alignment ===
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:50:5: note: Unknown misalignment, is_packed = 0
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:50:5: note: Unknown misalignment, is_packed = 0
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:50:5: note: Unknown misalignment, is_packed = 0
common/frame.c:50:5: note: vect_can_advance_ivs_p:
common/frame.c:50:5: note: Analyze phi: i_299 = PHI <i_66(8), 0(6)>

common/frame.c:50:5: note: Analyze phi: .MEM_294 = PHI <.MEM_65(8), .MEM_55(6)>

common/frame.c:50:5: note: virtual phi. skip.
common/frame.c:50:5: note: Analyze phi: ivtmp_25 = PHI <ivtmp_23(8), 3(6)>

Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:50:5: note: Vectorizing an unaligned access.
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:50:5: note: Vectorizing an unaligned access.
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:50:5: note: Vectorizing an unaligned access.
common/frame.c:50:5: note: === vect_analyze_slp ===
common/frame.c:50:5: note: === vect_make_slp_decision ===
common/frame.c:50:5: note: === vect_detect_hybrid_slp ===
common/frame.c:50:5: note: === vect_analyze_loop_operations ===
common/frame.c:50:5: note: examining phi: i_299 = PHI <i_66(8), 0(6)>

common/frame.c:50:5: note: === vectorizable_induction ===
common/frame.c:50:5: note: vect_model_induction_cost: inside_cost = 1, prologue_cost = 2 .
common/frame.c:50:5: note: examining phi: .MEM_294 = PHI <.MEM_65(8), .MEM_55(6)>

common/frame.c:50:5: note: examining phi: ivtmp_25 = PHI <ivtmp_23(8), 3(6)>

common/frame.c:50:5: note: ==> examining statement: # DEBUG i => i_299
common/frame.c:50:5: note: irrelevant.
common/frame.c:50:5: note: ==> examining statement: _56 = i_299 != 0;
common/frame.c:50:5: note: ==> examining pattern statement: patt_236 = i_299 != 0 ? 1 : 0;
common/frame.c:50:5: note: vect_is_simple_use: operand i_299 != 0
common/frame.c:50:5: note: not ssa-name.
common/frame.c:50:5: note: use not simple.
common/frame.c:50:5: note: vect_is_simple_use: operand i_299
common/frame.c:50:5: note: def_stmt: i_299 = PHI <i_66(8), 0(6)>
common/frame.c:50:5: note: type of def: 4.
common/frame.c:50:5: note: ==> examining statement: _57 = (int) _56;
common/frame.c:50:5: note: ==> examining pattern statement: patt_319 = (int) patt_236;
common/frame.c:50:5: note: vect_is_simple_use: operand patt_236
common/frame.c:50:5: note: def_stmt: patt_236 = i_299 != 0 ? 1 : 0;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: vect_is_simple_use: operand patt_236
common/frame.c:50:5: note: def_stmt: patt_236 = i_299 != 0 ? 1 : 0;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: no optab.
common/frame.c:50:5: note: vect_is_simple_use: operand patt_236
common/frame.c:50:5: note: def_stmt: patt_236 = i_299 != 0 ? 1 : 0;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: === vectorizable_assignment ===
common/frame.c:50:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
common/frame.c:50:5: note: ==> examining statement: _58 = i_stride_46 >> _57;
common/frame.c:50:5: note: vect_is_simple_use: operand i_stride_46
common/frame.c:50:5: note: def_stmt: i_stride_46 = _44 & _45;
common/frame.c:50:5: note: type of def: 2.
common/frame.c:50:5: note: vect_is_simple_use: operand _57
common/frame.c:50:5: note: def_stmt: _57 = (int) _56;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: vector/vector shift/rotate found.
common/frame.c:50:5: note: op not supported by target.
common/frame.c:50:5: note: vect_is_simple_use: operand i_stride_46
common/frame.c:50:5: note: def_stmt: i_stride_46 = _44 & _45;
common/frame.c:50:5: note: type of def: 2.
common/frame.c:50:5: note: vect_is_simple_use: operand _57
common/frame.c:50:5: note: def_stmt: _57 = (int) _56;
common/frame.c:50:5: note: type of def: 3.
common/frame.c:50:5: note: not vectorized: relevant stmt not supported: _58 = i_stride_46 >> _57;
common/frame.c:50:5: note: bad operation or unsupported loop bound.
common/frame.c:29:15: note: vectorized 2 loops in function.
Merging blocks 16 and 68
Merging blocks 24 and 67
x264_frame_new (struct x264_t * h)
{
  vector(4) int vect_cst_.317;
  vector(4) int vect_i_100.316;
  vector(2) long unsigned int * vectp_frame.315;
  vector(2) long unsigned int * {ref-all} vectp_frame.314;
  vector(2) long unsigned int vect_cst_.313;
  vector(2) long unsigned int vect__98.312;
  vector(2) sizetype vect_cst_.311;
  vector(2) sizetype vect__97.310;
  vector(2) sizetype vect__92.309;
  vector(4) int vect_cst_.308;
  vector(4) int vect__91.307;
  vector(4) int vect_vec_iv_.306;
  vector(4) int vect_cst_.305;
  vector(4) int vect_cst_.304;
  int stmp_var_.303;
  vector(4) int vect_cst_.302;
  vector(4) int vect_i_140.301;
  vector(2) long unsigned int * vectp_frame.300;
  vector(2) long unsigned int * {ref-all} vectp_frame.299;
  vector(2) long unsigned int vect_cst_.298;
  vector(2) long unsigned int vect__138.297;
  vector(2) sizetype vect_cst_.296;
  vector(2) sizetype vect__137.295;
  vector(2) sizetype vect__135.294;
  vector(4) int vect_cst_.293;
  vector(4) int vect__134.292;
  vector(4) int vect_vec_iv_.291;
  vector(4) int vect_cst_.290;
  vector(4) int vect_cst_.289;
  int stmp_var_.288;
  int align;
  int luma_plane_size;
  int i_padv;
  int i_lines;
  int i_width;
  int i_stride;
  int i_mb_count;
  int j;
  int i;
  struct x264_frame_t * frame;
  int pretmp_5;
  int prephitmp_7;
  struct x264_frame_t * _11;
  int prephitmp_17;
  int pretmp_18;
  unsigned int ivtmp_19;
  unsigned int ivtmp_23;
  unsigned int ivtmp_24;
  unsigned int ivtmp_25;
  int _32;
  unsigned int _34;
  unsigned int _35;
  unsigned int _36;
  int _37;
  int _39;
  int _40;
  int _42;
  int _43;
  int _44;
  int _45;
  int _47;
  int _48;
  int _49;
  int _50;
  int _51;
  int _53;
  _Bool _56;
  int _57;
  int _58;
  int _60;
  int _61;
  int _63;
  int _64;
  int _67;
  int _68;
  int _69;
  int _70;
  void * _74;
  int _77;
  int _78;
  int _79;
  int _80;
  sizetype _81;
  uint8_t * _82;
  int _86;
  int _87;
  void * _89;
  int _91;
  sizetype _92;
  long unsigned int _93;
  unsigned int ivtmp_96;
  sizetype _97;
  uint8_t * _98;
  uint8_t * _101;
  unsigned int ivtmp_103;
  void * _105;
  int _107;
  int _108;
  sizetype _109;
  sizetype _110;
  uint8_t * _111;
  unsigned int ivtmp_113;
  int _114;
  int _115;
  int _116;
  int _118;
  int _119;
  int _120;
  int _122;
  int _123;
  int _125;
  int _127;
  void * _129;
  int _134;
  sizetype _135;
  sizetype _137;
  uint8_t * _138;
  _Bool _142;
  int _143;
  int _144;
  int _145;
  unsigned int _146;
  unsigned int _147;
  int _148;
  void * _150;
  int _152;
  int _153;
  long unsigned int _154;
  long unsigned int _155;
  int _157;
  unsigned int _158;
  unsigned int _159;
  int _160;
  void * _162;
  int _169;
  int _170;
  int _171;
  int _172;
  int _173;
  int _174;
  unsigned int _175;
  unsigned int _176;
  int _177;
  void * _179;
  int _181;
  int _182;
  sizetype _183;
  sizetype _184;
  sizetype _185;
  uint16_t * _186;
  void * _197;
  unsigned int i_mb_count.2_199;
  unsigned int _200;
  int _201;
  void * _203;
  int _205;
  void * _207;
  unsigned int _209;
  int _210;
  void * _212;
  int _214;
  void * _216;
  void * _219;
  int _225;
  unsigned int _226;
  unsigned int _227;
  int _228;
  void * _230;
  void * _233;
  unsigned int ivtmp_235;
  int _237;
  int _238;
  void * _240;
  int _245;
  int _246;
  unsigned int _247;
  unsigned int _248;
  int _249;
  void * _251;
  int _253;
  int _254;
  unsigned int _255;
  unsigned int _256;
  int _257;
  void * _259;
  union pthread_mutex_t * _263;
  union pthread_cond_t * _265;
  long unsigned int _268;
  unsigned int ivtmp_277;
  int pretmp_278;
  unsigned int ivtmp_279;
  int prephitmp_280;
  unsigned int ivtmp_281;
  int pretmp_282;
  int pretmp_284;
  int _289;
  int prephitmp_290;
  sizetype pretmp_291;
  unsigned int ivtmp_301;
  int prephitmp_302;
  sizetype pretmp_308;
  int pretmp_313;
  int pretmp_315;
  sizetype pretmp_316;
  sizetype pretmp_318;

  <bb 2>:
  frame_29 = x264_malloc (6456);
  # DEBUG frame => frame_29
  i_mb_count_31 = h_30(D)->mb.i_mb_count;
  # DEBUG i_mb_count => i_mb_count_31
  _32 = h_30(D)->param.b_interlaced;
  i_padv_33 = 32 << _32;
  # DEBUG i_padv => i_padv_33
  _34 = h_30(D)->param.cpu;
  _35 = _34 & 2;
  if (_35 == 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 3>:
  _36 = _34 & 1;
  if (_36 != 0)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:

  <bb 5>:
  # align_9 = PHI <16(4), 64(2), 32(3)>
  # DEBUG align => align_9
  if (frame_29 == 0B)
    goto <bb 66>;
  else
    goto <bb 6>;

  <bb 6>:
  # DEBUG __dest => frame_29
  # DEBUG __ch => 0
  # DEBUG __len => 6456
  __builtin_memset (frame_29, 0, 6456);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  _39 = h_30(D)->param.i_width;
  _40 = _39 + 15;
  i_width_41 = _40 & -16;
  # DEBUG i_width => i_width_41
  _42 = i_width_41 + 64;
  _43 = align_9 + -1;
  _44 = _42 + _43;
  _45 = -align_9;
  i_stride_46 = _44 & _45;
  # DEBUG i_stride => i_stride_46
  _47 = h_30(D)->param.i_height;
  _48 = h_30(D)->param.b_interlaced;
  _49 = 16 << _48;
  _50 = _49 + -1;
  _51 = _47 + _50;
  _53 = -_49;
  i_lines_54 = _51 & _53;
  # DEBUG i_lines => i_lines_54
  frame_29->i_plane = 3;
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 7>:
  # i_299 = PHI <i_66(8), 0(6)>
  # ivtmp_25 = PHI <ivtmp_23(8), 3(6)>
  # DEBUG i => i_299
  _56 = i_299 != 0;
  _57 = (int) _56;
  _58 = i_stride_46 >> _57;
  frame_29->i_stride[i_299] = _58;
  _61 = i_width_41 >> _57;
  frame_29->i_width[i_299] = _61;
  _64 = i_lines_54 >> _57;
  frame_29->i_lines[i_299] = _64;
  i_66 = i_299 + 1;
  # DEBUG i => i_66
  # DEBUG i => i_66
  ivtmp_23 = ivtmp_25 - 1;
  if (ivtmp_23 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  goto <bb 7>;

  <bb 9>:
  _67 = frame_29->i_stride[0];
  _68 = frame_29->i_lines[0];
  _69 = i_padv_33 * 2;
  _70 = _68 + _69;
  luma_plane_size_71 = _67 * _70;
  # DEBUG luma_plane_size => luma_plane_size_71
  # DEBUG i => 1
  # DEBUG i => 1
  pretmp_18 = luma_plane_size_71 / 4;

  <bb 10>:
  # i_304 = PHI <i_84(13), 1(9)>
  # ivtmp_301 = PHI <ivtmp_19(13), 2(9)>
  # DEBUG i => i_304
  _74 = x264_malloc (pretmp_18);
  frame_29->buffer[i_304] = _74;
  if (_74 == 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  x264_log (h_30(D), 0, "malloc failed\n");
  # DEBUG fail => NULL
  x264_frame_delete (frame_29);
  goto <bb 66>;

  <bb 12>:
  _77 = frame_29->i_stride[i_304];
  _78 = i_padv_33 * _77;
  _79 = _78 + 32;
  _80 = _79 / 2;
  _81 = (sizetype) _80;
  _82 = _74 + _81;
  frame_29->plane[i_304] = _82;
  i_84 = i_304 + 1;
  # DEBUG i => i_84
  # DEBUG i => i_84
  ivtmp_19 = ivtmp_301 - 1;
  if (ivtmp_19 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  goto <bb 10>;

  <bb 14>:
  _86 = h_30(D)->param.analyse.i_subpel_refine;
  if (_86 != 0)
    goto <bb 15>;
  else
    goto <bb 20>;

  <bb 15>:
  _87 = luma_plane_size_71 * 4;
  _89 = x264_malloc (_87);
  frame_29->buffer[0] = _89;
  if (_89 == 0B)
    goto <bb 11>;
  else
    goto <bb 16>;

  <bb 16>:
  pretmp_313 = frame_29->i_stride[0];
  pretmp_315 = i_padv_33 * pretmp_313;
  pretmp_316 = (sizetype) pretmp_315;
  pretmp_318 = pretmp_316 + 32;
  vect_cst_.304_317 = { 0, 1, 2, 3 };
  vect_cst_.305_307 = { 4, 4, 4, 4 };
  vect_cst_.308_292 = {luma_plane_size_71, luma_plane_size_71, luma_plane_size_71, luma_plane_size_71};
  vect_cst_.311_3 = {pretmp_318, pretmp_318};
  _93 = (long unsigned int) _89;
  vect_cst_.313_94 = {_93, _93};
  vectp_frame.315_300 = frame_29 + 120;
  vect_cst_.317_99 = { 1, 1, 1, 1 };

  <bb 17>:
  # i_288 = PHI <0(16), i_100(18)>
  # ivtmp_96 = PHI <4(16), ivtmp_277(18)>
  # vect_vec_iv_.306_306 = PHI <vect_cst_.304_317(16), vect_vec_iv_.306_303(18)>
  # vectp_frame.314_131 = PHI <vectp_frame.315_300(16), vectp_frame.314_132(18)>
  # ivtmp_279 = PHI <0(16), ivtmp_235(18)>
  vect_vec_iv_.306_303 = vect_vec_iv_.306_306 + vect_cst_.305_307;
  # DEBUG i => i_288
  vect__91.307_283 = vect_cst_.308_292 * vect_vec_iv_.306_306;
  _91 = luma_plane_size_71 * i_288;
  vect__92.309_276 = [vec_unpack_lo_expr] vect__91.307_283;
  vect__92.309_10 = [vec_unpack_hi_expr] vect__91.307_283;
  _92 = (sizetype) _91;
  vect__97.310_72 = vect__92.309_276 + vect_cst_.311_3;
  vect__97.310_314 = vect__92.309_10 + vect_cst_.311_3;
  _97 = _92 + pretmp_318;
  vect__98.312_95 = vect_cst_.313_94 + vect__97.310_72;
  vect__98.312_136 = vect_cst_.313_94 + vect__97.310_314;
  _98 = _89 + _97;
  MEM[(uint8_t * *)vectp_frame.314_131] = vect__98.312_95;
  vectp_frame.314_312 = vectp_frame.314_131 + 16;
  MEM[(uint8_t * *)vectp_frame.314_312] = vect__98.312_136;
  vect_i_100.316_141 = vect_vec_iv_.306_306 + vect_cst_.317_99;
  i_100 = i_288 + 1;
  # DEBUG i => i_100
  # DEBUG i => i_100
  ivtmp_277 = ivtmp_96 - 1;
  vectp_frame.314_132 = vectp_frame.314_312 + 16;
  ivtmp_235 = ivtmp_279 + 1;
  if (ivtmp_235 < 1)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  goto <bb 17>;

  <bb 19>:
  _101 = frame_29->filtered[0];
  frame_29->plane[0] = _101;
  goto <bb 22>;

  <bb 20>:
  _105 = x264_malloc (luma_plane_size_71);
  frame_29->buffer[0] = _105;
  if (_105 == 0B)
    goto <bb 11>;
  else
    goto <bb 21>;

  <bb 21>:
  _107 = frame_29->i_stride[0];
  _108 = i_padv_33 * _107;
  _109 = (sizetype) _108;
  _110 = _109 + 32;
  _111 = _105 + _110;
  frame_29->plane[0] = _111;

  <bb 22>:
  _114 = h_30(D)->frames.b_have_lowres;
  if (_114 != 0)
    goto <bb 23>;
  else
    goto <bb 37>;

  <bb 23>:
  _115 = frame_29->i_width[0];
  _116 = _115 / 2;
  frame_29->i_width_lowres = _116;
  _118 = _116 + 64;
  _119 = _43 + _118;
  _120 = _45 & _119;
  frame_29->i_stride_lowres = _120;
  _122 = frame_29->i_lines[0];
  _123 = _122 / 2;
  frame_29->i_lines_lowres = _123;
  _125 = _69 + _123;
  luma_plane_size_126 = _120 * _125;
  # DEBUG luma_plane_size => luma_plane_size_126
  _127 = luma_plane_size_126 * 4;
  _129 = x264_malloc (_127);
  frame_29->buffer_lowres[0] = _129;
  if (_129 == 0B)
    goto <bb 11>;
  else
    goto <bb 24>;

  <bb 24>:
  pretmp_278 = frame_29->i_stride_lowres;
  pretmp_284 = i_padv_33 * pretmp_278;
  pretmp_308 = (sizetype) pretmp_284;
  pretmp_291 = pretmp_308 + 32;
  vect_cst_.289_22 = { 0, 1, 2, 3 };
  vect_cst_.290_16 = { 4, 4, 4, 4 };
  vect_cst_.293_4 = {luma_plane_size_126, luma_plane_size_126, luma_plane_size_126, luma_plane_size_126};
  vect_cst_.296_262 = {pretmp_291, pretmp_291};
  _268 = (long unsigned int) _129;
  vect_cst_.298_221 = {_268, _268};
  vectp_frame.300_270 = frame_29 + 152;
  vect_cst_.302_139 = { 1, 1, 1, 1 };

  <bb 25>:
  # i_311 = PHI <0(24), i_140(26)>
  # ivtmp_24 = PHI <4(24), ivtmp_281(26)>
  # vect_vec_iv_.291_8 = PHI <vect_cst_.289_22(24), vect_vec_iv_.291_6(26)>
  # vectp_frame.299_271 = PHI <vectp_frame.300_270(24), vectp_frame.299_272(26)>
  # ivtmp_113 = PHI <0(24), ivtmp_103(26)>
  vect_vec_iv_.291_6 = vect_vec_iv_.291_8 + vect_cst_.290_16;
  # DEBUG i => i_311
  vect__134.292_2 = vect_cst_.293_4 * vect_vec_iv_.291_8;
  _134 = luma_plane_size_126 * i_311;
  vect__135.294_1 = [vec_unpack_lo_expr] vect__134.292_2;
  vect__135.294_261 = [vec_unpack_hi_expr] vect__134.292_2;
  _135 = (sizetype) _134;
  vect__137.295_243 = vect__135.294_1 + vect_cst_.296_262;
  vect__137.295_267 = vect__135.294_261 + vect_cst_.296_262;
  _137 = _135 + pretmp_291;
  vect__138.297_222 = vect_cst_.298_221 + vect__137.295_243;
  vect__138.297_269 = vect_cst_.298_221 + vect__137.295_267;
  _138 = _129 + _137;
  MEM[(uint8_t * *)vectp_frame.299_271] = vect__138.297_222;
  vectp_frame.299_165 = vectp_frame.299_271 + 16;
  MEM[(uint8_t * *)vectp_frame.299_165] = vect__138.297_269;
  vect_i_140.301_168 = vect_vec_iv_.291_8 + vect_cst_.302_139;
  i_140 = i_311 + 1;
  # DEBUG i => i_140
  # DEBUG i => i_140
  ivtmp_281 = ivtmp_24 - 1;
  vectp_frame.299_272 = vectp_frame.299_165 + 16;
  ivtmp_103 = ivtmp_113 + 1;
  if (ivtmp_103 < 1)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  goto <bb 25>;

  <bb 27>:
  pretmp_282 = h_30(D)->param.i_bframe;
  goto <bb 36>;

  <bb 28>:

  <bb 29>:
  # i_52 = PHI <0(28), i_164(32)>
  # DEBUG i => i_52
  _145 = h_30(D)->mb.i_mb_count;
  _146 = (unsigned int) _145;
  _147 = _146 * 4;
  _148 = (int) _147;
  _150 = x264_malloc (_148);
  frame_29->lowres_mvs[j_13][i_52] = _150;
  if (_150 == 0B)
    goto <bb 11>;
  else
    goto <bb 30>;

  <bb 30>:
  _152 = h_30(D)->mb.i_mb_count;
  _153 = _152 * 2;
  _154 = (long unsigned int) _153;
  _155 = _154 * 2;
  # DEBUG __dest => _150
  # DEBUG __ch => 0
  # DEBUG __len => _155
  __builtin_memset (_150, 0, _155);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  _157 = h_30(D)->mb.i_mb_count;
  _158 = (unsigned int) _157;
  _159 = _158 * 4;
  _160 = (int) _159;
  _162 = x264_malloc (_160);
  frame_29->lowres_mv_costs[j_13][i_52] = _162;
  if (_162 == 0B)
    goto <bb 11>;
  else
    goto <bb 31>;

  <bb 31>:
  i_164 = i_52 + 1;
  # DEBUG i => i_164
  # DEBUG i => i_164
  _144 = h_30(D)->param.i_bframe;
  if (_144 >= i_164)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  goto <bb 29>;

  <bb 33>:
  # _63 = PHI <_144(31)>

  <bb 34>:
  # prephitmp_302 = PHI <_63(33), prephitmp_290(36)>
  j_167 = j_13 + 1;
  # DEBUG j => j_167
  # DEBUG j => j_167
  _142 = prephitmp_302 != 0;
  _143 = (int) _142;
  if (_143 >= j_167)
    goto <bb 35>;
  else
    goto <bb 37>;

  <bb 35>:

  <bb 36>:
  # j_13 = PHI <0(27), j_167(35)>
  # prephitmp_290 = PHI <pretmp_282(27), prephitmp_302(35)>
  # DEBUG j => j_13
  # DEBUG i => 0
  if (prephitmp_290 >= 0)
    goto <bb 28>;
  else
    goto <bb 34>;

  <bb 37>:
  _169 = h_30(D)->param.analyse.i_me_method;
  if (_169 > 2)
    goto <bb 38>;
  else
    goto <bb 40>;

  <bb 38>:
  _170 = frame_29->i_stride[0];
  _171 = _170 * 2;
  _172 = frame_29->i_lines[0];
  _173 = _69 + _172;
  _174 = _171 * _173;
  _175 = (unsigned int) _174;
  _176 = _175 * 2;
  _177 = (int) _176;
  _179 = x264_malloc (_177);
  frame_29->buffer[3] = _179;
  if (_179 == 0B)
    goto <bb 11>;
  else
    goto <bb 39>;

  <bb 39>:
  _181 = frame_29->i_stride[0];
  _182 = i_padv_33 * _181;
  _183 = (sizetype) _182;
  _184 = _183 + 32;
  _185 = _184 * 2;
  _186 = _179 + _185;
  frame_29->integral = _186;

  <bb 40>:
  frame_29->i_poc = -1;
  frame_29->i_type = 0;
  frame_29->i_qpplus1 = 0;
  frame_29->i_pts = -1;
  frame_29->i_frame = -1;
  frame_29->i_frame_num = -1;
  frame_29->i_lines_completed = -1;
  _197 = x264_malloc (i_mb_count_31);
  frame_29->mb_type = _197;
  if (_197 == 0B)
    goto <bb 11>;
  else
    goto <bb 41>;

  <bb 41>:
  i_mb_count.2_199 = (unsigned int) i_mb_count_31;
  _200 = i_mb_count.2_199 * 64;
  _201 = (int) _200;
  _203 = x264_malloc (_201);
  frame_29->mv[0] = _203;
  if (_203 == 0B)
    goto <bb 11>;
  else
    goto <bb 42>;

  <bb 42>:
  _205 = i_mb_count_31 * 4;
  _207 = x264_malloc (_205);
  frame_29->ref[0] = _207;
  if (_207 == 0B)
    goto <bb 11>;
  else
    goto <bb 43>;

  <bb 43>:
  _209 = i_mb_count.2_199 * 2;
  _210 = (int) _209;
  _212 = x264_malloc (_210);
  frame_29->i_intra_cost = _212;
  if (_212 == 0B)
    goto <bb 11>;
  else
    goto <bb 44>;

  <bb 44>:
  _214 = h_30(D)->param.i_bframe;
  if (_214 != 0)
    goto <bb 45>;
  else
    goto <bb 47>;

  <bb 45>:
  _216 = x264_malloc (_201);
  frame_29->mv[1] = _216;
  if (_216 == 0B)
    goto <bb 11>;
  else
    goto <bb 46>;

  <bb 46>:
  _219 = x264_malloc (_205);
  frame_29->ref[1] = _219;
  if (_219 == 0B)
    goto <bb 11>;
  else
    goto <bb 48>;

  <bb 47>:
  frame_29->mv[1] = 0B;
  frame_29->ref[1] = 0B;

  <bb 48>:
  _225 = i_lines_54 / 16;
  _226 = (unsigned int) _225;
  _227 = _226 * 4;
  _228 = (int) _227;
  _230 = x264_malloc (_228);
  frame_29->i_row_bits = _230;
  if (_230 == 0B)
    goto <bb 11>;
  else
    goto <bb 49>;

  <bb 49>:
  _233 = x264_malloc (_228);
  frame_29->i_row_qp = _233;
  if (_233 == 0B)
    goto <bb 11>;
  else
    goto <bb 50>;

  <bb 50>:
  # DEBUG i => 0
  _289 = h_30(D)->param.i_bframe;
  if (_289 >= -1)
    goto <bb 58>;
  else
    goto <bb 61>;

  <bb 51>:

  <bb 52>:
  # j_12 = PHI <0(51), j_242(54)>
  # DEBUG j => j_12
  _240 = x264_malloc (_228);
  frame_29->i_row_satds[i_76][j_12] = _240;
  if (_240 == 0B)
    goto <bb 11>;
  else
    goto <bb 53>;

  <bb 53>:
  j_242 = j_12 + 1;
  # DEBUG j => j_242
  # DEBUG j => j_242
  _237 = h_30(D)->param.i_bframe;
  _238 = _237 + 1;
  if (_238 >= j_242)
    goto <bb 54>;
  else
    goto <bb 55>;

  <bb 54>:
  goto <bb 52>;

  <bb 55>:
  # _60 = PHI <_237(53)>
  # _37 = PHI <_238(53)>

  <bb 56>:
  # prephitmp_17 = PHI <_60(55), prephitmp_7(60)>
  # prephitmp_280 = PHI <_37(55), pretmp_5(60)>
  i_244 = i_76 + 1;
  # DEBUG i => i_244
  # DEBUG i => i_244
  if (i_244 <= prephitmp_280)
    goto <bb 57>;
  else
    goto <bb 61>;

  <bb 57>:
  goto <bb 59>;

  <bb 58>:

  <bb 59>:
  # i_76 = PHI <0(58), i_244(57)>
  # prephitmp_7 = PHI <_289(58), prephitmp_17(57)>
  # DEBUG i => i_76
  # DEBUG j => 0
  if (prephitmp_7 >= -1)
    goto <bb 51>;
  else
    goto <bb 60>;

  <bb 60>:
  pretmp_5 = prephitmp_7 + 1;
  goto <bb 56>;

  <bb 61>:
  _245 = h_30(D)->param.rc.i_aq_mode;
  if (_245 != 0)
    goto <bb 62>;
  else
    goto <bb 65>;

  <bb 62>:
  _246 = h_30(D)->mb.i_mb_count;
  _247 = (unsigned int) _246;
  _248 = _247 * 4;
  _249 = (int) _248;
  _251 = x264_malloc (_249);
  frame_29->f_qp_offset = _251;
  if (_251 == 0B)
    goto <bb 11>;
  else
    goto <bb 63>;

  <bb 63>:
  _253 = h_30(D)->frames.b_have_lowres;
  if (_253 != 0)
    goto <bb 64>;
  else
    goto <bb 65>;

  <bb 64>:
  _254 = h_30(D)->mb.i_mb_count;
  _255 = (unsigned int) _254;
  _256 = _255 * 2;
  _257 = (int) _256;
  _259 = x264_malloc (_257);
  frame_29->i_inv_qscale_factor = _259;
  if (_259 == 0B)
    goto <bb 11>;
  else
    goto <bb 65>;

  <bb 65>:
  _263 = &frame_29->mutex;
  pthread_mutex_init (_263, 0B);
  _265 = &frame_29->cv;
  pthread_cond_init (_265, 0B);

  <bb 66>:
  # _11 = PHI <0B(5), frame_29(65), 0B(11)>
  return _11;

}



;; Function x264_frame_copy_picture (x264_frame_copy_picture, funcdef_no=117, decl_uid=4899, cgraph_uid=117, symbol_order=160)


Analyzing loop at common/frame.c:197
common/frame.c:197:5: note: ===== analyze_loop_nest =====
common/frame.c:197:5: note: === vect_analyze_loop_form ===
common/frame.c:197:5: note: not vectorized: control flow in loop.
common/frame.c:197:5: note: bad loop form.
common/frame.c:183:5: note: vectorized 0 loops in function.
x264_frame_copy_picture (struct x264_t * h, struct x264_frame_t * dst, struct x264_picture_t * src)
{
  int height;
  int width;
  int stride;
  uint8_t * plane;
  int s;
  int i;
  int i_csp;
  int _4;
  int _10;
  _Bool _12;
  _Bool _13;
  _Bool _14;
  int _17;
  int _20;
  long int _22;
  _Bool _24;
  _Bool _25;
  _Bool _26;
  int _30;
  int _31;
  int _33;
  int _35;
  int _36;
  int _37;
  int _38;
  sizetype _39;
  void (*<Tf9f>) (uint8_t *, int, uint8_t *, int, int, int) _42;
  int _43;
  uint8_t * _44;
  unsigned int ivtmp_51;
  unsigned int ivtmp_52;
  _Bool _53;

  <bb 2>:
  _10 = src_9(D)->img.i_csp;
  i_csp_11 = _10 & 255;
  # DEBUG i_csp => i_csp_11
  _12 = i_csp_11 != 1;
  _13 = i_csp_11 != 4;
  _14 = _12 & _13;
  if (_14 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  x264_log (h_15(D), 0, "Arg invalid CSP\n");
  goto <bb 11>;

  <bb 4>:
  _17 = src_9(D)->i_type;
  dst_18(D)->i_type = _17;
  _20 = src_9(D)->i_qpplus1;
  dst_18(D)->i_qpplus1 = _20;
  _22 = src_9(D)->i_pts;
  dst_18(D)->i_pts = _22;
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG i => 0
  goto <bb 8>;

  <bb 5>:
  # DEBUG i => s_46
  _24 = i_csp_11 == 4;
  _25 = s_46 != 0;
  _26 = _24 & _25;
  if (_26 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  s_27 = s_46 ^ 3;

  <bb 7>:
  # s_49 = PHI <s_27(6), s_46(5)>

  <bb 8>:
  # s_5 = PHI <s_49(7), 0(4)>
  # _53 = PHI <_25(7), 0(4)>
  # s_54 = PHI <s_46(7), 0(4)>
  # ivtmp_52 = PHI <ivtmp_51(7), 3(4)>
  # DEBUG s => s_5
  plane_28 = src_9(D)->img.plane[s_5];
  # DEBUG plane => plane_28
  stride_29 = src_9(D)->img.i_stride[s_5];
  # DEBUG stride => stride_29
  _30 = h_15(D)->param.i_width;
  _31 = (int) _53;
  width_32 = _30 >> _31;
  # DEBUG width => width_32
  _33 = h_15(D)->param.i_height;
  height_34 = _33 >> _31;
  # DEBUG height => height_34
  _35 = src_9(D)->img.i_csp;
  _36 = _35 & 4096;
  if (_36 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  _37 = height_34 + -1;
  _38 = stride_29 * _37;
  _39 = (sizetype) _38;
  plane_40 = plane_28 + _39;
  # DEBUG plane => plane_40
  stride_41 = -stride_29;
  # DEBUG stride => stride_41

  <bb 10>:
  # plane_2 = PHI <plane_28(8), plane_40(9)>
  # stride_3 = PHI <stride_29(8), stride_41(9)>
  # DEBUG stride => stride_3
  # DEBUG plane => plane_2
  _42 = h_15(D)->mc.plane_copy;
  _43 = dst_18(D)->i_stride[s_54];
  _44 = dst_18(D)->plane[s_54];
  _42 (_44, _43, plane_2, stride_3, width_32, height_34);
  s_46 = s_54 + 1;
  # DEBUG i => s_46
  # DEBUG i => s_46
  ivtmp_51 = ivtmp_52 - 1;
  if (ivtmp_51 != 0)
    goto <bb 5>;
  else
    goto <bb 11>;

  <bb 11>:
  # _4 = PHI <-1(3), 0(10)>
  return _4;

}



;; Function x264_frame_expand_border (x264_frame_expand_border, funcdef_no=119, decl_uid=4904, cgraph_uid=119, symbol_order=162)


Analyzing loop at common/frame.c:244
common/frame.c:244:5: note: ===== analyze_loop_nest =====
common/frame.c:244:5: note: === vect_analyze_loop_form ===
common/frame.c:244:5: note: not vectorized: control flow in loop.
common/frame.c:244:5: note: bad loop form.
common/frame.c:238:6: note: vectorized 0 loops in function.
x264_frame_expand_border (struct x264_t * h, struct x264_frame_t * frame, int mb_y, int b_end)
{
  uint8_t * pix;
  int padv;
  int padh;
  int height;
  int width;
  int stride;
  int b_start;
  int i;
  int iftmp.4_3;
  _Bool _10;
  int _14;
  int _15;
  int _17;
  struct x264_sps_t * _19;
  int _20;
  int _21;
  _Bool _22;
  int _23;
  int _27;
  int _28;
  int _29;
  int iftmp.4_31;
  uint8_t * _33;
  int _36;
  int _37;
  int _38;
  sizetype _39;
  int _45;
  int _46;
  int _49;
  sizetype _51;
  uint8_t * _52;
  int _66;
  int pretmp_77;
  int prephitmp_78;
  int pretmp_79;
  int pretmp_80;
  _Bool pretmp_81;
  _Bool pretmp_82;
  _Bool pretmp_83;

  <bb 2>:
  # DEBUG D#117 => mb_y_9(D) == 0
  # DEBUG b_start => (int) D#117
  _14 = h_13(D)->sh.b_mbaff;
  _15 = mb_y_9(D) & _14;
  if (_15 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  return;

  <bb 4>:
  # DEBUG i => 0
  _66 = frame_16(D)->i_plane;
  if (_66 > 0)
    goto <bb 5>;
  else
    goto <bb 3>;

  <bb 5>:
  _10 = mb_y_9(D) == 0;
  b_start_11 = (int) _10;
  pretmp_79 = mb_y_9(D) * 16;
  pretmp_80 = pretmp_79 + -4;
  pretmp_81 = b_end_25(D) != 0;
  pretmp_82 = mb_y_9(D) != 0;
  pretmp_83 = pretmp_81 & pretmp_82;

  <bb 6>:
  # i_4 = PHI <0(5), i_55(16)>
  # prephitmp_78 = PHI <_14(5), pretmp_77(16)>
  # DEBUG i => i_4
  stride_18 = frame_16(D)->i_stride[i_4];
  # DEBUG stride => stride_18
  _19 = h_13(D)->sps;
  _20 = _19->i_mb_width;
  _21 = _20 * 16;
  _22 = i_4 != 0;
  _23 = (int) _22;
  width_24 = _21 >> _23;
  # DEBUG width => width_24
  if (b_end_25(D) != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _27 = _19->i_mb_height;
  _28 = _27 - mb_y_9(D);
  _29 = _28 * 16;
  iftmp.4_31 = _29 >> prephitmp_78;

  <bb 8>:
  # iftmp.4_3 = PHI <iftmp.4_31(7), 16(6)>
  height_32 = iftmp.4_3 >> _23;
  # DEBUG height => height_32
  if (i_4 != 0)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:

  <bb 10>:
  # padv_5 = PHI <16(8), 32(9)>
  # DEBUG padv => padv_5
  _33 = frame_16(D)->plane[i_4];
  _36 = stride_18 * pretmp_80;
  _37 = _36 >> _23;
  _38 = MAX_EXPR <_37, 0>;
  _39 = (sizetype) _38;
  pix_40 = _33 + _39;
  # DEBUG pix => pix_40
  if (pretmp_83 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  _45 = _23 + prephitmp_78;
  _46 = 4 >> _45;
  height_47 = height_32 + _46;
  # DEBUG height => height_47

  <bb 12>:
  # height_2 = PHI <height_32(10), height_47(11)>
  # DEBUG height => height_2
  if (prephitmp_78 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _49 = stride_18 * 2;
  plane_expand_border (pix_40, _49, width_24, height_2, padv_5, padv_5, b_start_11, b_end_25(D));
  _51 = (sizetype) stride_18;
  _52 = pix_40 + _51;
  plane_expand_border (_52, _49, width_24, height_2, padv_5, padv_5, b_start_11, b_end_25(D));
  goto <bb 15>;

  <bb 14>:
  plane_expand_border (pix_40, stride_18, width_24, height_2, padv_5, padv_5, b_start_11, b_end_25(D));

  <bb 15>:
  i_55 = i_4 + 1;
  # DEBUG i => i_55
  # DEBUG i => i_55
  _17 = frame_16(D)->i_plane;
  if (_17 > i_55)
    goto <bb 16>;
  else
    goto <bb 3>;

  <bb 16>:
  pretmp_77 = h_13(D)->sh.b_mbaff;
  goto <bb 6>;

}



;; Function x264_frame_expand_border_filtered (x264_frame_expand_border_filtered, funcdef_no=120, decl_uid=4909, cgraph_uid=120, symbol_order=163)


Analyzing loop at common/frame.c:279
common/frame.c:279:5: note: ===== analyze_loop_nest =====
common/frame.c:279:5: note: === vect_analyze_loop_form ===
common/frame.c:279:5: note: not vectorized: control flow in loop.
common/frame.c:279:5: note: bad loop form.
common/frame.c:267:6: note: vectorized 0 loops in function.
x264_frame_expand_border_filtered (struct x264_t * h, struct x264_frame_t * frame, int mb_y, int b_end)
{
  uint8_t * pix;
  int i;
  int height;
  int width;
  int stride;
  int b_start;
  _Bool _6;
  struct x264_sps_t * _12;
  int _13;
  int _14;
  int _17;
  int _18;
  int _19;
  int _20;
  int _21;
  uint8_t * _23;
  int _26;
  int _27;
  int _28;
  sizetype _29;
  sizetype _30;
  int _32;
  sizetype _34;
  uint8_t * _35;
  unsigned int ivtmp_48;
  unsigned int ivtmp_49;
  unsigned int _50;
  unsigned int _51;
  int pretmp_52;
  int prephitmp_53;
  int pretmp_54;
  int pretmp_55;
  int prephitmp_56;

  <bb 2>:
  _6 = mb_y_5(D) == 0;
  b_start_7 = (int) _6;
  # DEBUG b_start => b_start_7
  stride_10 = frame_9(D)->i_stride[0];
  # DEBUG stride => stride_10
  _12 = h_11(D)->sps;
  _13 = _12->i_mb_width;
  _14 = _13 * 16;
  width_15 = _14 + 8;
  # DEBUG width => width_15
  if (b_end_16(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  pretmp_52 = h_11(D)->sh.b_mbaff;
  goto <bb 5>;

  <bb 4>:
  _17 = _12->i_mb_height;
  _18 = _17 - mb_y_5(D);
  _19 = _18 * 16;
  _20 = h_11(D)->sh.b_mbaff;
  _21 = _19 >> _20;
  height_22 = _21 + 16;

  <bb 5>:
  # height_2 = PHI <height_22(4), 16(3)>
  # prephitmp_53 = PHI <_20(4), pretmp_52(3)>
  # DEBUG height => height_2
  # DEBUG padh => 28
  # DEBUG padv => 24
  # DEBUG i => 1
  # DEBUG i => 1
  pretmp_54 = mb_y_5(D) * 16;
  _51 = (unsigned int) stride_10;
  _50 = _51 * 2;
  _32 = (int) _50;

  <bb 6>:
  # i_44 = PHI <i_38(10), 1(5)>
  # prephitmp_56 = PHI <pretmp_55(10), prephitmp_53(5)>
  # ivtmp_49 = PHI <ivtmp_48(10), 3(5)>
  # DEBUG i => i_44
  _23 = frame_9(D)->filtered[i_44];
  _26 = 8 << prephitmp_56;
  _27 = pretmp_54 - _26;
  _28 = stride_10 * _27;
  _29 = (sizetype) _28;
  _30 = _29 + 18446744073709551612;
  pix_31 = _23 + _30;
  # DEBUG pix => pix_31
  if (prephitmp_56 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  plane_expand_border (pix_31, _32, width_15, height_2, 28, 24, b_start_7, b_end_16(D));
  _34 = (sizetype) stride_10;
  _35 = pix_31 + _34;
  plane_expand_border (_35, _32, width_15, height_2, 28, 24, b_start_7, b_end_16(D));
  goto <bb 9>;

  <bb 8>:
  plane_expand_border (pix_31, stride_10, width_15, height_2, 28, 24, b_start_7, b_end_16(D));

  <bb 9>:
  i_38 = i_44 + 1;
  # DEBUG i => i_38
  # DEBUG i => i_38
  ivtmp_48 = ivtmp_49 - 1;
  if (ivtmp_48 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  pretmp_55 = h_11(D)->sh.b_mbaff;
  goto <bb 6>;

  <bb 11>:
  return;

}



;; Function x264_frame_expand_border_lowres (x264_frame_expand_border_lowres, funcdef_no=121, decl_uid=4911, cgraph_uid=121, symbol_order=164)


Analyzing loop at common/frame.c:298
common/frame.c:298:5: note: ===== analyze_loop_nest =====
common/frame.c:298:5: note: === vect_analyze_loop_form ===
common/frame.c:298:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/frame.c:298:5: note: === vect_analyze_data_refs ===
Creating dr for frame_4(D)->i_lines_lowres
analyze_innermost: success.
	base_address: frame_4(D)
	offset from base address: 0
	constant offset from base address: 92
	step: 0
	aligned to: 128
	base_object: *frame_4(D)
	Access function 0: 736
Creating dr for frame_4(D)->i_stride_lowres
analyze_innermost: success.
	base_address: frame_4(D)
	offset from base address: 0
	constant offset from base address: 84
	step: 0
	aligned to: 128
	base_object: *frame_4(D)
	Access function 0: 672
Creating dr for frame_4(D)->lowres[i_13]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_4(D)
	offset from base address: 0
	constant offset from base address: 152
	step: 8
	aligned to: 128
	base_object: *frame_4(D)
	Access function 0: {0, +, 1}_1
	Access function 1: 1216
common/frame.c:298:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:298:5: note: bad data references.
common/frame.c:295:6: note: vectorized 0 loops in function.
x264_frame_expand_border_lowres (struct x264_frame_t * frame)
{
  int i;
  unsigned int ivtmp_1;
  int _5;
  int _6;
  int _7;
  uint8_t * _8;
  unsigned int ivtmp_12;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 3>:
  # i_13 = PHI <i_10(4), 0(2)>
  # ivtmp_12 = PHI <ivtmp_1(4), 4(2)>
  # DEBUG i => i_13
  _5 = frame_4(D)->i_lines_lowres;
  _6 = frame_4(D)->i_stride_lowres;
  _7 = _6 + -64;
  _8 = frame_4(D)->lowres[i_13];
  plane_expand_border (_8, _6, _7, _5, 32, 32, 1, 1);
  i_10 = i_13 + 1;
  # DEBUG i => i_10
  # DEBUG i => i_10
  ivtmp_1 = ivtmp_12 - 1;
  if (ivtmp_1 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function x264_frame_expand_border_mod16 (x264_frame_expand_border_mod16, funcdef_no=122, decl_uid=4914, cgraph_uid=122, symbol_order=165)


Analyzing loop at common/frame.c:305
common/frame.c:305:5: note: ===== analyze_loop_nest =====
common/frame.c:305:5: note: === vect_analyze_loop_form ===
common/frame.c:305:5: note: not vectorized: multiple nested loops.
common/frame.c:305:5: note: bad loop form.

Analyzing loop at common/frame.c:323
common/frame.c:323:13: note: ===== analyze_loop_nest =====
common/frame.c:323:13: note: === vect_analyze_loop_form ===
common/frame.c:323:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [y_18 + 1, + , 1](no_overflow) < _64
  bounds on difference of bases: 0 ... 4294967294
Applying pattern match.pd:442, generic-match.c:3412
Applying pattern match.pd:628, generic-match.c:1309
  result:
    # of iterations ((unsigned int) _64 - (unsigned int) y_18) - 1, bounded by 4294967294
Applying pattern match.pd:475, generic-match.c:3649
common/frame.c:323:13: note: Symbolic number of iterations is (unsigned int) _64 - (unsigned int) y_18
common/frame.c:323:13: note: === vect_analyze_data_refs ===
Creating dr for frame_10(D)->plane[i_63]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_10(D)
	offset from base address: (ssizetype) ((sizetype) i_63 * 8)
	constant offset from base address: 96
	step: 0
	aligned to: 8
	base_object: *frame_10(D)
	Access function 0: i_63
	Access function 1: 768
Creating dr for frame_10(D)->i_stride[i_63]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_10(D)
	offset from base address: (ssizetype) ((sizetype) i_63 * 4)
	constant offset from base address: 48
	step: 0
	aligned to: 4
	base_object: *frame_10(D)
	Access function 0: i_63
	Access function 1: 384
common/frame.c:323:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:323:13: note: bad data references.

Analyzing loop at common/frame.c:315
common/frame.c:315:13: note: ===== analyze_loop_nest =====
common/frame.c:315:13: note: === vect_analyze_loop_form ===
common/frame.c:315:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) < y_18
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) y_18 + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/frame.c:315:13: note: Symbolic number of iterations is (unsigned int) y_18
common/frame.c:315:13: note: === vect_analyze_data_refs ===
Creating dr for frame_10(D)->plane[i_63]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_10(D)
	offset from base address: (ssizetype) ((sizetype) i_63 * 8)
	constant offset from base address: 96
	step: 0
	aligned to: 8
	base_object: *frame_10(D)
	Access function 0: i_63
	Access function 1: 768
Creating dr for frame_10(D)->i_stride[i_63]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_10(D)
	offset from base address: (ssizetype) ((sizetype) i_63 * 4)
	constant offset from base address: 48
	step: 0
	aligned to: 4
	base_object: *frame_10(D)
	Access function 0: i_63
	Access function 1: 384
Creating dr for *_37
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_37
common/frame.c:315:13: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/frame.c:315:13: note: bad data references.
common/frame.c:302:6: note: vectorized 0 loops in function.
x264_frame_expand_border_mod16 (struct x264_t * h, struct x264_frame_t * frame)
{
  int i_pady;
  int i_padx;
  int i_width;
  int i_subsample;
  int y;
  int i;
  int _11;
  _Bool _12;
  int _15;
  int _17;
  struct x264_sps_t * _19;
  int _20;
  int _21;
  int _23;
  int _25;
  int _26;
  int _28;
  uint8_t * _31;
  int _32;
  int _33;
  int _34;
  sizetype _35;
  sizetype _36;
  uint8_t * _37;
  unsigned char _38;
  int _39;
  void * _40;
  int _41;
  uint8_t * _46;
  int _48;
  int _49;
  sizetype _50;
  uint8_t * _51;
  int _52;
  sizetype _53;
  uint8_t * _54;
  int _64;
  int pretmp_108;
  long unsigned int pretmp_109;
  int pretmp_110;
  long unsigned int pretmp_111;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  _41 = frame_10(D)->i_plane;
  if (_41 > 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # i_63 = PHI <0(4), i_57(14)>
  # DEBUG i => i_63
  _12 = i_63 != 0;
  i_subsample_13 = (int) _12;
  # DEBUG i_subsample => i_subsample_13
  _15 = h_14(D)->param.i_width;
  i_width_16 = _15 >> i_subsample_13;
  # DEBUG i_width => i_width_16
  _17 = h_14(D)->param.i_height;
  y_18 = _17 >> i_subsample_13;
  # DEBUG i_height => y_18
  _19 = h_14(D)->sps;
  _20 = _19->i_mb_width;
  _21 = _20 * 16;
  _23 = _21 - _15;
  i_padx_24 = _23 >> i_subsample_13;
  # DEBUG i_padx => i_padx_24
  _25 = _19->i_mb_height;
  _26 = _25 * 16;
  _28 = _26 - _17;
  i_pady_29 = _28 >> i_subsample_13;
  # DEBUG i_pady => i_pady_29
  if (i_padx_24 != 0)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  if (i_pady_29 != 0)
    goto <bb 15>;
  else
    goto <bb 13>;

  <bb 7>:
  # DEBUG y => 0
  if (y_18 > 0)
    goto <bb 8>;
  else
    goto <bb 6>;

  <bb 8>:
  pretmp_111 = (long unsigned int) i_padx_24;

  <bb 9>:
  # y_70 = PHI <0(8), y_42(11)>
  # DEBUG y => y_70
  _31 = frame_10(D)->plane[i_63];
  _32 = frame_10(D)->i_stride[i_63];
  _33 = _32 * y_70;
  _34 = i_width_16 + _33;
  _35 = (sizetype) _34;
  _36 = _35 + 18446744073709551615;
  _37 = _31 + _36;
  _38 = *_37;
  _39 = (int) _38;
  _40 = _31 + _35;
  # DEBUG __dest => _40
  # DEBUG __ch => _39
  # DEBUG __len => (long unsigned int) i_padx_24
  __builtin_memset (_40, _39, pretmp_111);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  y_42 = y_70 + 1;
  # DEBUG y => y_42
  # DEBUG y => y_42
  if (y_18 > y_42)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 6>;

  <bb 11>:
  goto <bb 9>;

  <bb 12>:

  <bb 13>:
  i_57 = i_63 + 1;
  # DEBUG i => i_57
  # DEBUG i => i_57
  _11 = frame_10(D)->i_plane;
  if (_11 > i_57)
    goto <bb 14>;
  else
    goto <bb 3>;

  <bb 14>:
  goto <bb 5>;

  <bb 15>:
  # DEBUG y => y_18
  _64 = y_18 + i_pady_29;
  if (y_18 < _64)
    goto <bb 16>;
  else
    goto <bb 13>;

  <bb 16>:
  pretmp_108 = i_width_16 + i_padx_24;
  pretmp_109 = (long unsigned int) pretmp_108;
  pretmp_110 = y_18 + -1;

  <bb 17>:
  # y_71 = PHI <y_18(16), y_56(18)>
  # DEBUG y => y_71
  # DEBUG D#121 => i_width_16 + i_padx_24
  _46 = frame_10(D)->plane[i_63];
  _48 = frame_10(D)->i_stride[i_63];
  _49 = _48 * pretmp_110;
  _50 = (sizetype) _49;
  _51 = _46 + _50;
  _52 = _48 * y_71;
  _53 = (sizetype) _52;
  _54 = _46 + _53;
  # DEBUG __dest => _54
  # DEBUG __src => _51
  # DEBUG __len => (long unsigned int) D#121
  __builtin_memcpy (_54, _51, pretmp_109);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  y_56 = y_71 + 1;
  # DEBUG y => y_56
  # DEBUG y => y_56
  if (y_56 < _64)
    goto <bb 18>;
  else
    goto <bb 12>;

  <bb 18>:
  goto <bb 17>;

}



;; Function x264_frame_deblock_row (x264_frame_deblock_row, funcdef_no=140, decl_uid=4919, cgraph_uid=140, symbol_order=186)


Analyzing loop at common/frame.c:636
common/frame.c:636:5: note: ===== analyze_loop_nest =====
common/frame.c:636:5: note: === vect_analyze_loop_form ===
common/frame.c:636:5: note: not vectorized: multiple nested loops.
common/frame.c:636:5: note: bad loop form.

Analyzing loop at common/frame.c:785
common/frame.c:785:9: note: ===== analyze_loop_nest =====
common/frame.c:785:9: note: === vect_analyze_loop_form ===
common/frame.c:785:9: note: ===== analyze_loop_nest_1 =====
common/frame.c:785:9: note: === vect_analyze_loop_form ===
common/frame.c:785:9: note: not vectorized: control flow in loop.
common/frame.c:785:9: note: bad inner-loop form.
common/frame.c:785:9: note: not vectorized: Bad inner loop.
common/frame.c:785:9: note: bad loop form.

Analyzing loop at common/frame.c:785
common/frame.c:785:9: note: ===== analyze_loop_nest =====
common/frame.c:785:9: note: === vect_analyze_loop_form ===
common/frame.c:785:9: note: not vectorized: control flow in loop.
common/frame.c:785:9: note: bad loop form.

Analyzing loop at common/frame.c:785
common/frame.c:785:9: note: ===== analyze_loop_nest =====
common/frame.c:785:9: note: === vect_analyze_loop_form ===
common/frame.c:785:9: note: not vectorized: control flow in loop.
common/frame.c:785:9: note: bad loop form.

Analyzing loop at common/frame.c:784
common/frame.c:784:9: note: ===== analyze_loop_nest =====
common/frame.c:784:9: note: === vect_analyze_loop_form ===
common/frame.c:784:9: note: ===== analyze_loop_nest_1 =====
common/frame.c:784:9: note: === vect_analyze_loop_form ===
common/frame.c:784:9: note: not vectorized: control flow in loop.
common/frame.c:784:9: note: bad inner-loop form.
common/frame.c:784:9: note: not vectorized: Bad inner loop.
common/frame.c:784:9: note: bad loop form.

Analyzing loop at common/frame.c:784
common/frame.c:784:9: note: ===== analyze_loop_nest =====
common/frame.c:784:9: note: === vect_analyze_loop_form ===
common/frame.c:784:9: note: not vectorized: control flow in loop.
common/frame.c:784:9: note: bad loop form.

Analyzing loop at common/frame.c:784
common/frame.c:784:9: note: ===== analyze_loop_nest =====
common/frame.c:784:9: note: === vect_analyze_loop_form ===
common/frame.c:784:9: note: not vectorized: control flow in loop.
common/frame.c:784:9: note: bad loop form.
common/frame.c:619:6: note: vectorized 0 loops in function.
x264_frame_deblock_row (struct x264_t * h, int mb_y)
{
  int8_t tc[4];
  const int beta;
  const int alpha;
  const int index_a;
  int8_t tc[4];
  const int beta;
  const int alpha;
  const int index_a;
  int8_t tc[4];
  const int beta;
  const int alpha;
  const int index_a;
  int8_t tc[4];
  const int beta;
  const int alpha;
  const int index_a;
  const int alpha;
  const int beta;
  int8_t tc[4];
  const int beta;
  const int alpha;
  const int index_a;
  int8_t tc[4];
  const int beta;
  const int alpha;
  const int index_a;
  int8_t tc[4];
  const int beta;
  const int alpha;
  const int index_a;
  int8_t tc[4];
  const int beta;
  const int alpha;
  const int index_a;
  const int alpha;
  const int beta;
  const int beta;
  const int alpha;
  const int beta;
  const int alpha;
  int i_qpc;
  int i4q;
  int i4p;
  int i8q;
  int i8p;
  int yn;
  int xn;
  int y;
  int i_qpc;
  int i4q;
  int i4p;
  int i8q;
  int i8p;
  int yn;
  int xn;
  int y;
  int i_qpc;
  uint8_t bS[4];
  int mbn_4x4;
  int mbn_8x8;
  int mbn_xy;
  int i_qpn;
  int i_qpc;
  int i4q;
  int i4p;
  int i8q;
  int i8p;
  int yn;
  int xn;
  int x;
  int i_qpc;
  int i4q;
  int i4p;
  int i8q;
  int i8p;
  int yn;
  int xn;
  int x;
  int i_qpc;
  uint8_t bS[4];
  int mbn_4x4;
  int mbn_8x8;
  int mbn_xy;
  int i_qpn;
  uint8_t * pixv;
  uint8_t * pixu;
  uint8_t * pixy;
  int i_edge_end;
  const int i_qp;
  const int b_8x8_transform;
  int stride2uv;
  int strideuv;
  int stride2y;
  int stridey;
  int mb_x;
  const int no_sub8x8;
  const int qp_thresh;
  const int mvy_limit;
  const int b_interlaced;
  const int s4x4;
  const int s8x8;
  struct x264_sps_t * _14;
  unsigned int _36;
  int _44;
  int _50;
  int _51;
  int _52;
  int _53;
  int _54;
  int _55;
  unsigned int _57;
  unsigned int _58;
  _Bool _59;
  struct x264_frame_t * _61;
  int _64;
  struct x264_pps_t * _67;
  int _68;
  int _69;
  uint8_t[16] * _70;
  struct x264_sps_t * _73;
  int _74;
  int _76;
  int _79;
  int _80;
  int _83;
  int _84;
  int8_t * _86;
  sizetype _87;
  int8_t * _88;
  signed char _89;
  int8_t * _91;
  int8_t * _92;
  signed char _93;
  int8_t * _95;
  int8_t * _96;
  signed char _97;
  uint8_t * _99;
  int _100;
  int _101;
  sizetype _102;
  int _103;
  sizetype _104;
  sizetype _105;
  uint8_t * _107;
  int _108;
  int _109;
  sizetype _110;
  int _111;
  sizetype _112;
  sizetype _113;
  uint8_t * _115;
  int _117;
  int _118;
  sizetype _119;
  sizetype _120;
  int _122;
  sizetype _123;
  sizetype _124;
  _Bool _128;
  int8_t * _134;
  int8_t * _135;
  signed char _136;
  unsigned char _137;
  sizetype _138;
  int8_t * _139;
  signed char _140;
  unsigned char _141;
  int _148;
  int _149;
  unsigned char _150;
  long unsigned int _151;
  uint8_t[24] * _152;
  int _153;
  unsigned char _154;
  int _155;
  int _156;
  unsigned char _157;
  int _159;
  int _160;
  int _162;
  int _163;
  int _165;
  int _166;
  int _168;
  int8_t * _170;
  sizetype _171;
  int8_t * _172;
  signed char _173;
  sizetype _174;
  int8_t * _175;
  signed char _176;
  int16_t[2] * _177;
  long unsigned int _178;
  long unsigned int _179;
  int16_t[2] * _180;
  short int _181;
  int _182;
  long unsigned int _183;
  long unsigned int _184;
  int16_t[2] * _185;
  short int _186;
  int _187;
  int _188;
  int _189;
  short int _190;
  int _191;
  short int _192;
  int _193;
  int _194;
  int _195;
  int _196;
  int8_t * _197;
  int8_t * _198;
  signed char _199;
  int8_t * _200;
  signed char _201;
  int16_t[2] * _202;
  int16_t[2] * _203;
  short int _204;
  int _205;
  int16_t[2] * _206;
  short int _207;
  int _208;
  int _209;
  int _210;
  short int _211;
  int _212;
  short int _213;
  int _214;
  int _215;
  int _216;
  unsigned int _221;
  int8_t * _222;
  int8_t * _223;
  signed char _224;
  void (*<T1006>) (uint8_t *, int, int, int, int8_t *) _226;
  int _227;
  int _228;
  int _229;
  int _230;
  sizetype _231;
  uint8_t * _232;
  const uint8_t * _234;
  sizetype _235;
  const uint8_t * _236;
  unsigned char _237;
  int _238;
  sizetype _239;
  const uint8_t * _240;
  unsigned char _241;
  int _242;
  int _243;
  int _244;
  void (*<T1006>) (uint8_t *, int, int, int, int8_t *) _246;
  int _247;
  sizetype _248;
  uint8_t * _249;
  uint8_t * _250;
  int8_t * _252;
  int8_t * _254;
  signed char _255;
  void (*<T100b>) (uint8_t *, int, int, int) _257;
  int _258;
  int _259;
  int _260;
  int _261;
  sizetype _262;
  uint8_t * _263;
  const uint8_t * _265;
  sizetype _266;
  const uint8_t * _267;
  unsigned char _268;
  int _269;
  sizetype _270;
  const uint8_t * _271;
  unsigned char _272;
  int _273;
  int _274;
  int _275;
  void (*<T100b>) (uint8_t *, int, int, int) _277;
  int _278;
  sizetype _279;
  uint8_t * _280;
  uint8_t * _281;
  int _283;
  int8_t * _285;
  int8_t * _286;
  signed char _287;
  unsigned char _288;
  int _295;
  int _296;
  unsigned char _297;
  int _298;
  unsigned char _299;
  int _300;
  int _301;
  int _302;
  unsigned char _303;
  int _305;
  int _306;
  int _307;
  int _308;
  int _310;
  int _311;
  int _313;
  int _314;
  int _316;
  int8_t * _318;
  sizetype _319;
  int8_t * _320;
  signed char _321;
  sizetype _322;
  int8_t * _323;
  signed char _324;
  int16_t[2] * _325;
  long unsigned int _326;
  long unsigned int _327;
  int16_t[2] * _328;
  short int _329;
  int _330;
  long unsigned int _331;
  long unsigned int _332;
  int16_t[2] * _333;
  short int _334;
  int _335;
  int _336;
  int _337;
  short int _338;
  int _339;
  short int _340;
  int _341;
  int _342;
  int _343;
  int _344;
  int8_t * _345;
  int8_t * _346;
  signed char _347;
  int8_t * _348;
  signed char _349;
  int16_t[2] * _350;
  int16_t[2] * _351;
  short int _352;
  int _353;
  int16_t[2] * _354;
  short int _355;
  int _356;
  int _357;
  int _358;
  short int _359;
  int _360;
  short int _361;
  int _362;
  int _363;
  int _364;
  unsigned int _369;
  int8_t * _370;
  int8_t * _371;
  signed char _372;
  void (*<T1006>) (uint8_t *, int, int, int, int8_t *) _374;
  int _375;
  int _376;
  int _377;
  int _378;
  sizetype _379;
  uint8_t * _380;
  int _382;
  const uint8_t * _383;
  sizetype _384;
  const uint8_t * _385;
  unsigned char _386;
  int _387;
  sizetype _388;
  const uint8_t * _389;
  unsigned char _390;
  int _391;
  int _392;
  int _393;
  void (*<T1006>) (uint8_t *, int, int, int, int8_t *) _395;
  int _396;
  sizetype _397;
  uint8_t * _398;
  uint8_t * _399;
  _Bool _404;
  int _407;
  int8_t * _411;
  int8_t * _412;
  signed char _413;
  unsigned char _414;
  sizetype _415;
  int8_t * _416;
  signed char _417;
  unsigned char _418;
  int8_t * _419;
  int8_t * _421;
  signed char _422;
  void (*<T100b>) (uint8_t *, int, int, int) _424;
  int _425;
  int _426;
  int _427;
  int _428;
  int _429;
  sizetype _430;
  uint8_t * _431;
  const uint8_t * _434;
  sizetype _435;
  const uint8_t * _436;
  unsigned char _437;
  int _438;
  sizetype _439;
  const uint8_t * _440;
  unsigned char _441;
  int _442;
  int _443;
  int _444;
  void (*<T100b>) (uint8_t *, int, int, int) _446;
  int _447;
  int _448;
  sizetype _449;
  uint8_t * _450;
  uint8_t * _451;
  int8_t * _456;
  int8_t * _457;
  signed char _458;
  unsigned char _459;
  int _471;
  unsigned char _472;
  long unsigned int _473;
  uint8_t[24] * _474;
  int _475;
  int _476;
  unsigned char _477;
  int _478;
  int _479;
  unsigned char _480;
  int _482;
  int _483;
  struct x264_sps_t * _486;
  int _487;
  int _488;
  int _489;
  int _491;
  int _492;
  int _494;
  int _495;
  int8_t * _497;
  sizetype _498;
  int8_t * _499;
  signed char _500;
  sizetype _501;
  int8_t * _502;
  signed char _503;
  int16_t[2] * _504;
  long unsigned int _505;
  long unsigned int _506;
  int16_t[2] * _507;
  short int _508;
  int _509;
  long unsigned int _510;
  long unsigned int _511;
  int16_t[2] * _512;
  short int _513;
  int _514;
  int _515;
  int _516;
  short int _517;
  int _518;
  short int _519;
  int _520;
  int _521;
  int _522;
  int _523;
  int8_t * _524;
  int8_t * _525;
  signed char _526;
  int8_t * _527;
  signed char _528;
  int16_t[2] * _529;
  int16_t[2] * _530;
  short int _531;
  int _532;
  int16_t[2] * _533;
  short int _534;
  int _535;
  int _536;
  int _537;
  short int _538;
  int _539;
  short int _540;
  int _541;
  int _542;
  int _543;
  unsigned int _548;
  int8_t * _549;
  int8_t * _551;
  signed char _552;
  void (*<T1006>) (uint8_t *, int, int, int, int8_t *) _554;
  int _555;
  int _556;
  int _557;
  int _559;
  sizetype _560;
  uint8_t * _561;
  const uint8_t * _563;
  sizetype _564;
  const uint8_t * _565;
  unsigned char _566;
  int _567;
  sizetype _568;
  const uint8_t * _569;
  unsigned char _570;
  int _571;
  int _572;
  int _573;
  void (*<T1006>) (uint8_t *, int, int, int, int8_t *) _575;
  int _576;
  int _577;
  sizetype _578;
  uint8_t * _579;
  uint8_t * _580;
  int _582;
  int8_t * _584;
  int8_t * _585;
  signed char _586;
  unsigned char _587;
  int _595;
  unsigned char _596;
  int _597;
  int _598;
  unsigned char _599;
  int _600;
  int _601;
  int _602;
  unsigned char _603;
  int _605;
  int _606;
  int _607;
  int _608;
  int _610;
  int _611;
  int _613;
  int _614;
  int _616;
  int8_t * _618;
  sizetype _619;
  int8_t * _620;
  signed char _621;
  sizetype _622;
  int8_t * _623;
  signed char _624;
  int16_t[2] * _625;
  long unsigned int _626;
  long unsigned int _627;
  int16_t[2] * _628;
  short int _629;
  int _630;
  long unsigned int _631;
  long unsigned int _632;
  int16_t[2] * _633;
  short int _634;
  int _635;
  int _636;
  int _637;
  short int _638;
  int _639;
  short int _640;
  int _641;
  int _642;
  int _643;
  int _644;
  int8_t * _645;
  int8_t * _646;
  signed char _647;
  int8_t * _648;
  signed char _649;
  int16_t[2] * _650;
  int16_t[2] * _651;
  short int _652;
  int _653;
  int16_t[2] * _654;
  short int _655;
  int _656;
  int _657;
  int _658;
  short int _659;
  int _660;
  short int _661;
  int _662;
  int _663;
  int _664;
  unsigned int _669;
  int8_t * _670;
  int8_t * _671;
  signed char _672;
  void (*<T1006>) (uint8_t *, int, int, int, int8_t *) _674;
  int _675;
  int _676;
  int _677;
  int _679;
  sizetype _680;
  uint8_t * _681;
  int _683;
  const uint8_t * _684;
  sizetype _685;
  const uint8_t * _686;
  unsigned char _687;
  int _688;
  sizetype _689;
  const uint8_t * _690;
  unsigned char _691;
  int _692;
  int _693;
  int _694;
  void (*<T1006>) (uint8_t *, int, int, int, int8_t *) _696;
  int _697;
  int _698;
  sizetype _699;
  uint8_t * _700;
  uint8_t * _701;
  int _707;
  int _708;
  struct x264_pps_t * _711;
  int _712;
  uint8_t[16] * _714;
  int _716;
  int _717;
  int _720;
  int _721;
  int _722;
  int _723;
  int _724;
  int _725;
  int _728;
  int _729;
  int _730;
  int _731;
  int _732;
  int _733;
  int _736;
  int _737;
  int _740;
  int _741;
  unsigned char _742;
  int _744;
  int _745;
  unsigned char _746;
  _Bool _748;
  _Bool _749;
  _Bool _750;
  int _751;
  int _752;
  unsigned char _753;
  int _755;
  int _756;
  unsigned char _757;
  _Bool _759;
  _Bool _760;
  _Bool _761;
  int _766;
  int _767;
  unsigned char _768;
  int _771;
  int _772;
  unsigned char _773;
  _Bool _775;
  _Bool _776;
  _Bool _777;
  int _779;
  unsigned char _780;
  int _783;
  int _784;
  unsigned char _785;
  _Bool _787;
  _Bool _788;
  _Bool _789;
  unsigned char _790;
  int _791;
  signed char _792;
  unsigned char _797;
  int _798;
  signed char _799;
  unsigned char _803;
  int _804;
  signed char _805;
  unsigned int ivtmp_806;
  unsigned char _809;
  int _810;
  signed char _811;
  unsigned int ivtmp_812;
  int _816;
  unsigned char _817;
  int _820;
  int _821;
  unsigned char _822;
  _Bool _824;
  _Bool _825;
  _Bool _826;
  unsigned char _827;
  int _828;
  signed char _829;
  unsigned char _830;
  unsigned char _832;
  signed char _833;
  unsigned char _834;
  int _835;
  signed char _836;
  unsigned char _837;
  unsigned char _838;
  signed char _839;
  unsigned char _840;
  int _841;
  signed char _842;
  unsigned char _843;
  unsigned char _844;
  signed char _845;
  unsigned char _846;
  int _847;
  signed char _848;
  unsigned char _849;
  unsigned char _850;
  signed char _851;
  int _853;
  unsigned char _854;
  int _857;
  int _858;
  unsigned char _859;
  _Bool _861;
  _Bool _862;
  _Bool _863;
  unsigned char _864;
  int _865;
  signed char _866;
  unsigned char _871;
  int _872;
  signed char _873;
  unsigned char _877;
  int _878;
  signed char _879;
  struct x264_sps_t * _880;
  int _882;
  unsigned char _883;
  int _884;
  signed char _885;
  int _890;
  unsigned char _891;
  int _894;
  int _895;
  unsigned char _896;
  _Bool _898;
  _Bool _899;
  _Bool _900;
  unsigned char _901;
  int _902;
  signed char _903;
  unsigned char _904;
  unsigned char _906;
  signed char _907;
  unsigned char _908;
  int _909;
  signed char _910;
  unsigned char _911;
  unsigned char _912;
  signed char _913;
  unsigned char _914;
  int _915;
  signed char _916;
  unsigned char _917;
  unsigned char _918;
  signed char _919;
  unsigned char _920;
  int _921;
  signed char _922;
  unsigned char _923;
  unsigned char _924;
  signed char _925;
  int _926;
  int _927;
  unsigned char _928;
  int _931;
  int _932;
  unsigned char _933;
  _Bool _935;
  _Bool _936;
  _Bool _937;
  int _939;
  unsigned char _940;
  int _943;
  int _944;
  unsigned char _945;
  _Bool _947;
  _Bool _948;
  _Bool _949;
  unsigned char _950;
  int _951;
  signed char _952;
  unsigned char _957;
  int _958;
  signed char _959;
  unsigned char _963;
  int _964;
  signed char _965;
  unsigned char _969;
  int _970;
  signed char _971;
  int _976;
  unsigned char _977;
  int _980;
  int _981;
  unsigned char _982;
  _Bool _984;
  _Bool _985;
  _Bool _986;
  unsigned char _987;
  int _988;
  signed char _989;
  unsigned char _990;
  unsigned char _992;
  signed char _993;
  unsigned char _994;
  int _995;
  signed char _996;
  unsigned char _997;
  unsigned char _998;
  signed char _999;
  unsigned char _1000;
  int _1001;
  signed char _1002;
  unsigned char _1003;
  unsigned char _1004;
  signed char _1005;
  unsigned char _1006;
  int _1007;
  signed char _1008;
  unsigned char _1009;
  unsigned char _1010;
  signed char _1011;
  int _1013;
  unsigned char _1014;
  int _1017;
  int _1018;
  unsigned char _1019;
  _Bool _1021;
  _Bool _1022;
  _Bool _1023;
  unsigned char _1024;
  int _1025;
  signed char _1026;
  unsigned char _1031;
  int _1032;
  signed char _1033;
  unsigned int ivtmp_1036;
  unsigned char _1037;
  int _1038;
  signed char _1039;
  unsigned int ivtmp_1040;
  unsigned int ivtmp_1042;
  unsigned char _1043;
  int _1044;
  signed char _1045;
  int _1050;
  unsigned char _1051;
  int _1054;
  int _1055;
  unsigned char _1056;
  _Bool _1058;
  _Bool _1059;
  _Bool _1060;
  unsigned char _1061;
  int _1062;
  signed char _1063;
  unsigned char _1064;
  unsigned char _1066;
  signed char _1067;
  unsigned char _1068;
  int _1069;
  signed char _1070;
  unsigned char _1071;
  unsigned char _1072;
  signed char _1073;
  unsigned char _1074;
  int _1075;
  signed char _1076;
  unsigned char _1077;
  unsigned char _1078;
  signed char _1079;
  unsigned char _1080;
  int _1081;
  signed char _1082;
  unsigned char _1083;
  unsigned char _1084;
  signed char _1085;
  int _1197;
  unsigned int ivtmp_1459;
  unsigned int ivtmp_1460;
  unsigned int ivtmp_1461;
  unsigned int _1462;
  unsigned int _1463;
  unsigned int _1464;
  unsigned int _1465;
  unsigned int _1466;
  unsigned int _1467;
  unsigned int _1468;
  unsigned int _1469;
  unsigned int _1470;
  unsigned int _1471;
  unsigned int _1472;
  unsigned int _1473;
  unsigned int _1474;
  unsigned int _1475;
  unsigned int _1476;
  unsigned int _1477;
  unsigned int _1478;
  unsigned int _1479;
  unsigned int _1480;
  unsigned int _1481;
  unsigned int _1482;
  unsigned int _1483;
  unsigned int _1484;
  unsigned int _1485;
  unsigned int _1486;
  unsigned int _1487;
  unsigned int _1488;
  unsigned int _1489;
  unsigned int _1490;
  unsigned int _1491;
  unsigned int _1492;
  unsigned int _1493;
  unsigned int _1494;
  unsigned int _1495;
  unsigned int _1496;
  unsigned int _1497;
  unsigned int _1498;
  unsigned int _1499;
  unsigned int _1500;
  int pretmp_1508;
  int prephitmp_1509;
  int pretmp_1510;
  int prephitmp_1511;
  struct x264_frame_t * pretmp_1512;
  struct x264_frame_t * prephitmp_1513;
  int pretmp_1514;
  int prephitmp_1515;
  int pretmp_1516;
  int pretmp_1518;
  struct x264_frame_t * pretmp_1520;
  struct x264_frame_t * prephitmp_1521;
  int pretmp_1528;
  sizetype pretmp_1529;
  sizetype prephitmp_1530;
  int pretmp_1531;
  int prephitmp_1532;
  int pretmp_1533;
  int prephitmp_1534;
  int pretmp_1535;
  int pretmp_1536;
  uint8_t[24] * pretmp_1537;
  long unsigned int pretmp_1539;
  uint8_t[24] * pretmp_1540;
  int pretmp_1543;
  int prephitmp_1544;
  int pretmp_1545;
  int prephitmp_1546;
  sizetype prephitmp_1548;
  int pretmp_1549;
  int prephitmp_1550;
  int pretmp_1551;
  int prephitmp_1552;
  int pretmp_1553;
  int prephitmp_1554;
  sizetype pretmp_1555;
  sizetype prephitmp_1556;
  sizetype pretmp_1557;
  sizetype prephitmp_1558;
  int8_t * pretmp_1559;
  signed char pretmp_1561;
  unsigned char pretmp_1563;
  unsigned char prephitmp_1564;
  long unsigned int pretmp_1565;
  int pretmp_1566;
  int pretmp_1567;
  uint8_t[24] * pretmp_1568;
  uint8_t[24] * pretmp_1570;
  int pretmp_1572;
  sizetype pretmp_1573;
  sizetype prephitmp_1574;
  int pretmp_1575;
  int prephitmp_1576;
  int pretmp_1577;
  int prephitmp_1578;
  int pretmp_1579;
  int pretmp_1580;
  int prephitmp_1581;
  long unsigned int pretmp_1582;
  int pretmp_1583;
  int pretmp_1584;
  uint8_t[24] * pretmp_1585;
  uint8_t[24] * pretmp_1587;
  int pretmp_1589;
  int pretmp_1590;
  long unsigned int pretmp_1591;
  int pretmp_1592;
  int pretmp_1593;
  uint8_t[24] * pretmp_1594;
  uint8_t[24] * pretmp_1596;

  <bb 2>:
  _44 = h_43(D)->mb.i_mb_stride;
  s8x8_45 = _44 * 2;
  # DEBUG s8x8 => s8x8_45
  s4x4_47 = _44 * 4;
  # DEBUG s4x4 => s4x4_47
  b_interlaced_48 = h_43(D)->sh.b_mbaff;
  # DEBUG b_interlaced => b_interlaced_48
  mvy_limit_49 = 4 >> b_interlaced_48;
  # DEBUG mvy_limit => mvy_limit_49
  _50 = h_43(D)->sh.i_beta_offset;
  _51 = h_43(D)->sh.i_alpha_c0_offset;
  _52 = MIN_EXPR <_50, _51>;
  _53 = 15 - _52;
  _54 = h_43(D)->param.analyse.i_chroma_qp_offset;
  _55 = MAX_EXPR <_54, 0>;
  qp_thresh_56 = _53 - _55;
  # DEBUG qp_thresh => qp_thresh_56
  _57 = h_43(D)->param.analyse.inter;
  _58 = _57 & 32;
  _59 = _58 == 0;
  no_sub8x8_60 = (const int) _59;
  # DEBUG no_sub8x8 => no_sub8x8_60
  _61 = h_43(D)->fdec;
  stridey_62 = _61->i_stride[0];
  # DEBUG stridey => stridey_62
  stride2y_63 = stridey_62 << b_interlaced_48;
  # DEBUG stride2y => stride2y_63
  strideuv_65 = _61->i_stride[1];
  # DEBUG strideuv => strideuv_65
  stride2uv_66 = strideuv_65 << b_interlaced_48;
  # DEBUG stride2uv => stride2uv_66
  _67 = h_43(D)->pps;
  _68 = _67->b_cabac;
  if (_68 == 0)
    goto <bb 3>;
  else
    goto <bb 166>;

  <bb 3>:
  _69 = _67->b_transform_8x8_mode;
  if (_69 != 0)
    goto <bb 4>;
  else
    goto <bb 165>;

  <bb 4>:
  _70 = h_43(D)->mb.nnz_backup;
  munge_cavlc_nnz (h_43(D), mb_y_71(D), _70, munge_cavlc_nnz_row);
  # DEBUG mb_x => 0
  # DEBUG mb_y => mb_y_71(D)
  _14 = h_43(D)->sps;
  _1197 = _14->i_mb_width;
  if (_1197 > 0)
    goto <bb 5>;
  else
    goto <bb 159>;

  <bb 5>:
  pretmp_1510 = h_43(D)->mb.i_mb_stride;
  pretmp_1512 = h_43(D)->fdec;

  <bb 6>:
  # prephitmp_1511 = PHI <pretmp_1510(5), _44(165), _44(166)>
  # prephitmp_1513 = PHI <pretmp_1512(5), _61(165), _61(166)>
  pretmp_1516 = s8x8_45 * 2;
  pretmp_1518 = s4x4_47 * 4;
  pretmp_1528 = ~b_interlaced_48;
  _36 = (unsigned int) stridey_62;
  _1500 = _36 * 15;
  _118 = (int) _1500;
  _119 = (sizetype) _118;
  _120 = -_119;
  _1499 = (unsigned int) strideuv_65;
  _1498 = _1499 * 7;
  _122 = (int) _1498;
  _123 = (sizetype) _122;
  _124 = -_123;

  <bb 7>:
  # mb_y_9 = PHI <mb_y_71(D)(6), mb_y_710(158)>
  # mb_x_1219 = PHI <0(6), mb_x_709(158)>
  # prephitmp_1515 = PHI <prephitmp_1511(6), pretmp_1514(158)>
  # prephitmp_1521 = PHI <prephitmp_1513(6), pretmp_1520(158)>
  # DEBUG mb_x => mb_x_1219
  # DEBUG mb_y => mb_y_9
  _76 = mb_y_9 * prephitmp_1515;
  mbn_xy_77 = _76 + mb_x_1219;
  # DEBUG mb_xy => mbn_xy_77
  _79 = mb_y_9 * pretmp_1516;
  _80 = mb_x_1219 * 2;
  mbn_8x8_81 = _79 + _80;
  # DEBUG mb_8x8 => mbn_8x8_81
  _83 = mb_y_9 * pretmp_1518;
  _84 = mb_x_1219 * 4;
  mbn_4x4_85 = _83 + _84;
  # DEBUG mb_4x4 => mbn_4x4_85
  _86 = h_43(D)->mb.mb_transform_size;
  _87 = (sizetype) mbn_xy_77;
  _88 = _86 + _87;
  _89 = *_88;
  b_8x8_transform_90 = (const int) _89;
  # DEBUG b_8x8_transform => b_8x8_transform_90
  _91 = h_43(D)->mb.qp;
  _92 = _91 + _87;
  _93 = *_92;
  i_qp_94 = (const int) _93;
  # DEBUG i_qp => i_qp_94
  _95 = h_43(D)->mb.type;
  _96 = _95 + _87;
  _97 = *_96;
  if (_97 == 6)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:

  <bb 9>:
  # i_edge_end_18 = PHI <1(7), 4(8)>
  # DEBUG i_edge_end => i_edge_end_18
  _99 = prephitmp_1521->plane[0];
  _100 = mb_y_9 * 16;
  _101 = stridey_62 * _100;
  _102 = (sizetype) _101;
  _103 = mb_x_1219 * 16;
  _104 = (sizetype) _103;
  _105 = _102 + _104;
  pixy_106 = _99 + _105;
  # DEBUG pixy => pixy_106
  _107 = prephitmp_1521->plane[1];
  _108 = mb_y_9 * 8;
  _109 = strideuv_65 * _108;
  _110 = (sizetype) _109;
  _111 = mb_x_1219 * 8;
  _112 = (sizetype) _111;
  _113 = _110 + _112;
  pixu_114 = _107 + _113;
  # DEBUG pixu => pixu_114
  _115 = prephitmp_1521->plane[2];
  pixv_116 = _115 + _113;
  # DEBUG pixv => pixv_116
  if (b_interlaced_48 != 0)
    goto <bb 10>;
  else
    goto <bb 12>;

  <bb 10>:
  _117 = mb_y_9 & 1;
  if (_117 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  pixy_121 = pixy_106 + _120;
  # DEBUG pixy => pixy_121
  pixu_125 = pixu_114 + _124;
  # DEBUG pixu => pixu_125
  pixv_126 = pixv_116 + _124;
  # DEBUG pixv => pixv_126

  <bb 12>:
  # pixy_4 = PHI <pixy_106(9), pixy_106(10), pixy_121(11)>
  # pixu_5 = PHI <pixu_114(9), pixu_114(10), pixu_125(11)>
  # pixv_6 = PHI <pixv_116(9), pixv_116(10), pixv_126(11)>
  # DEBUG pixv => pixv_6
  # DEBUG pixu => pixu_5
  # DEBUG pixy => pixy_4
  x264_prefetch_fenc (h_43(D), prephitmp_1521, mb_x_1219, mb_y_9);
  if (qp_thresh_56 >= i_qp_94)
    goto <bb 14>;
  else
    goto <bb 13>;

  <bb 13>:

  <bb 14>:
  # i_edge_end_3 = PHI <i_edge_end_18(13), 1(12)>
  # DEBUG i_edge_end => i_edge_end_3
  _128 = mb_x_1219 == 0;
  x_129 = (int) _128;
  # DEBUG i_edge => x_129
  if (mb_x_1219 == 0)
    goto <bb 15>;
  else
    goto <bb 18>;

  <bb 15>:
  x_130 = b_8x8_transform_90 + x_129;
  # DEBUG i_edge => x_130

  <bb 16>:
  # x_19 = PHI <x_284(50), x_130(15)>
  # DEBUG i_edge => x_19
  if (i_edge_end_3 > x_19)
    goto <bb 51>;
  else
    goto <bb 17>;

  <bb 17>:
  bS ={v} {CLOBBER};
  _404 = mb_y_9 <= b_interlaced_48;
  y_405 = (int) _404;
  # DEBUG i_edge => y_405
  if (mb_y_9 <= b_interlaced_48)
    goto <bb 83>;
  else
    goto <bb 87>;

  <bb 18>:
  mbn_xy_131 = mbn_xy_77 + -1;
  # DEBUG mbn_xy => mbn_xy_131
  # DEBUG mbn_8x8 => mbn_8x8_81 + -2
  # DEBUG D#190 => mbn_4x4_85 + -4
  # DEBUG mbn_4x4 => D#190
  _134 = h_43(D)->mb.type;
  _135 = _134 + _87;
  _136 = *_135;
  _137 = (unsigned char) _136;
  if (_137 <= 3)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:
  pretmp_1529 = (sizetype) mbn_xy_131;
  goto <bb 21>;

  <bb 20>:
  _138 = (sizetype) mbn_xy_131;
  _139 = _134 + _138;
  _140 = *_139;
  _141 = (unsigned char) _140;
  if (_141 <= 3)
    goto <bb 21>;
  else
    goto <bb 26>;

  <bb 21>:
  # prephitmp_1530 = PHI <pretmp_1529(19), _138(20)>
  _252 = h_43(D)->mb.qp;
  _254 = _252 + prephitmp_1530;
  _255 = *_254;
  i_qpn_256 = (int) _255;
  # DEBUG i_qpn => i_qpn_256
  # DEBUG D#189 => h_43(D)->loopf.deblock_h_luma_intra
  _258 = i_qp_94 + i_qpn_256;
  _259 = _258 + 1;
  _260 = _259 >> 1;
  # DEBUG D#188 => x_129 * 4
  # DEBUG D#187 => (sizetype) D#188
  _732 = MEM[(int *)h_43(D) + 4704B];
  # DEBUG D#2 => h_43(D)
  _733 = MEM[(int *)h_43(D) + 4708B];
  # DEBUG D#2 => h_43(D)
  # DEBUG D#3 => &bS
  # DEBUG pix1 => pixy_4 + D#187
  # DEBUG pix2 => 0B
  # DEBUG i_stride => stride2y_63
  # DEBUG i_qp => _260
  # DEBUG b_chroma => 0
  # DEBUG pf_intra => D#189
  # DEBUG h => D#2
  # DEBUG h => D#2
  # DEBUG bS => D#3
  _740 = _260 + _732;
  _741 = _740 + 12;
  _742 = i_alpha_table[_741];
  alpha_743 = (const int) _742;
  # DEBUG alpha => alpha_743
  _744 = _260 + _733;
  _745 = _744 + 12;
  _746 = i_beta_table[_745];
  beta_747 = (const int) _746;
  # DEBUG beta => beta_747
  _748 = alpha_743 == 0;
  _749 = beta_747 == 0;
  _750 = _748 | _749;
  if (_750 != 0)
    goto <bb 23>;
  else
    goto <bb 22>;

  <bb 22>:
  _257 = h_43(D)->loopf.deblock_h_luma_intra;
  _261 = x_129 * 4;
  _262 = (sizetype) _261;
  _263 = pixy_4 + _262;
  _257 (_263, stride2y_63, alpha_743, beta_747);
  pretmp_1531 = MEM[(int *)h_43(D) + 4704B];
  pretmp_1533 = MEM[(int *)h_43(D) + 4708B];

  <bb 23>:
  # prephitmp_1532 = PHI <pretmp_1531(22), _732(21)>
  # prephitmp_1534 = PHI <pretmp_1533(22), _733(21)>
  # DEBUG pix1 => NULL
  # DEBUG pix2 => NULL
  # DEBUG i_stride => NULL
  # DEBUG i_qp => NULL
  # DEBUG b_chroma => NULL
  # DEBUG pf_intra => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  _265 = h_43(D)->chroma_qp_table;
  _266 = (sizetype) _93;
  _267 = _265 + _266;
  _268 = *_267;
  _269 = (int) _268;
  _270 = (sizetype) _255;
  _271 = _265 + _270;
  _272 = *_271;
  _273 = (int) _272;
  _274 = _269 + _273;
  _275 = _274 + 1;
  i_qpc_276 = _275 >> 1;
  # DEBUG i_qpc => i_qpc_276
  # DEBUG D#186 => h_43(D)->loopf.deblock_h_chroma_intra
  # DEBUG D#185 => x_129 * 2
  # DEBUG D#184 => (sizetype) D#185
  # DEBUG D#2 => h_43(D)
  # DEBUG D#2 => h_43(D)
  # DEBUG D#3 => &bS
  # DEBUG pix1 => pixu_5 + D#184
  # DEBUG pix2 => pixv_6 + D#184
  # DEBUG i_stride => stride2uv_66
  # DEBUG i_qp => i_qpc_276
  # DEBUG pf_intra => D#186
  # DEBUG b_chroma => 1
  # DEBUG h => D#2
  # DEBUG h => D#2
  # DEBUG bS => D#3
  _766 = i_qpc_276 + prephitmp_1532;
  _767 = _766 + 12;
  _768 = i_alpha_table[_767];
  alpha_769 = (const int) _768;
  # DEBUG alpha => alpha_769
  _771 = i_qpc_276 + prephitmp_1534;
  _772 = _771 + 12;
  _773 = i_beta_table[_772];
  beta_774 = (const int) _773;
  # DEBUG beta => beta_774
  _775 = alpha_769 == 0;
  _776 = beta_774 == 0;
  _777 = _775 | _776;
  if (_777 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  goto <bb 50> (end0);

  <bb 25>:
  _277 = h_43(D)->loopf.deblock_h_chroma_intra;
  _278 = x_129 * 2;
  _279 = (sizetype) _278;
  _281 = pixu_5 + _279;
  _277 (_281, stride2uv_66, alpha_769, beta_774);
  _280 = pixv_6 + _279;
  _277 (_280, stride2uv_66, alpha_769, beta_774);
  goto <bb 50> (end0);

  <bb 26>:
  MEM[(uint32_t *)&bS] = 0;
  # DEBUG i => 0
  # DEBUG i => 0
  pretmp_1535 = x_129 + -1;
  pretmp_1536 = pretmp_1535 & 3;
  pretmp_1537 = h_43(D)->mb.non_zero_count;
  pretmp_1539 = _87 * 24;
  pretmp_1540 = pretmp_1537 + pretmp_1539;
  _151 = _138 * 24;
  _152 = pretmp_1537 + _151;
  _162 = pretmp_1536 >> 1;
  _1497 = (unsigned int) mbn_8x8_81;
  _1496 = _1497 + 4294967294;
  mbn_8x8_132 = (int) _1496;
  _1495 = (unsigned int) mbn_8x8_132;
  _1494 = (unsigned int) _162;
  _1493 = _1495 + _1494;
  _163 = (int) _1493;

  <bb 27>:
  # yn_220 = PHI <yn_219(42), 0(26)>
  # ivtmp_1460 = PHI <ivtmp_1459(42), 4(26)>
  # DEBUG i => yn_220
  # DEBUG x => x_129
  # DEBUG y => yn_220
  # DEBUG D#134 => x_129 + -1
  # DEBUG xn => D#134 & 3
  # DEBUG yn => yn_220
  _148 = yn_220 * 4;
  _149 = x_129 + _148;
  _150 = *pretmp_1540[_149];
  if (_150 != 0)
    goto <bb 29>;
  else
    goto <bb 28>;

  <bb 28>:
  _153 = _148 + pretmp_1536;
  _154 = *_152[_153];
  if (_154 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  bS[yn_220] = 2;
  goto <bb 41>;

  <bb 30>:
  _155 = no_sub8x8_60 & yn_220;
  if (_155 != 0)
    goto <bb 31>;
  else
    goto <bb 33>;

  <bb 31>:
  _156 = yn_220 + -1;
  _157 = bS[_156];
  if (_157 != 2)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  bS[yn_220] = _157;
  goto <bb 41>;

  <bb 33>:
  _159 = yn_220 >> 1;
  _160 = s8x8_45 * _159;
  i8p_161 = mbn_8x8_81 + _160;
  # DEBUG i8p => i8p_161
  i8q_164 = _160 + _163;
  # DEBUG i8q => i8q_164
  # DEBUG D#183 => mbn_4x4_85 + x_129
  # DEBUG D#182 => s4x4_47 * yn_220
  # DEBUG i4p => D#183 + D#182
  # DEBUG D#181 => D#190 + pretmp_1536
  # DEBUG i4q => D#182 + D#181
  _170 = h_43(D)->mb.ref[0];
  _171 = (sizetype) i8p_161;
  _172 = _170 + _171;
  _173 = *_172;
  _174 = (sizetype) i8q_164;
  _175 = _170 + _174;
  _176 = *_175;
  if (_173 != _176)
    goto <bb 40>;
  else
    goto <bb 34>;

  <bb 34>:
  _166 = s4x4_47 * yn_220;
  _177 = h_43(D)->mb.mv[0];
  _165 = mbn_4x4_85 + x_129;
  i4p_167 = _165 + _166;
  _178 = (long unsigned int) i4p_167;
  _179 = _178 * 4;
  _180 = _177 + _179;
  _181 = *_180[0];
  _182 = (int) _181;
  mbn_4x4_133 = mbn_4x4_85 + -4;
  _168 = mbn_4x4_133 + pretmp_1536;
  i4q_169 = _166 + _168;
  _183 = (long unsigned int) i4q_169;
  _184 = _183 * 4;
  _185 = _177 + _184;
  _186 = *_185[0];
  _187 = (int) _186;
  _188 = _182 - _187;
  _189 = ABS_EXPR <_188>;
  if (_189 > 3)
    goto <bb 40>;
  else
    goto <bb 35>;

  <bb 35>:
  _190 = *_180[1];
  _191 = (int) _190;
  _192 = *_185[1];
  _193 = (int) _192;
  _194 = _191 - _193;
  _195 = ABS_EXPR <_194>;
  if (mvy_limit_49 <= _195)
    goto <bb 40>;
  else
    goto <bb 36>;

  <bb 36>:
  _196 = h_43(D)->sh.i_type;
  if (_196 == 1)
    goto <bb 37>;
  else
    goto <bb 41>;

  <bb 37>:
  _197 = h_43(D)->mb.ref[1];
  _198 = _197 + _171;
  _199 = *_198;
  _200 = _197 + _174;
  _201 = *_200;
  if (_199 != _201)
    goto <bb 40>;
  else
    goto <bb 38>;

  <bb 38>:
  _202 = h_43(D)->mb.mv[1];
  _203 = _202 + _179;
  _204 = *_203[0];
  _205 = (int) _204;
  _206 = _202 + _184;
  _207 = *_206[0];
  _208 = (int) _207;
  _209 = _205 - _208;
  _210 = ABS_EXPR <_209>;
  if (_210 > 3)
    goto <bb 40>;
  else
    goto <bb 39>;

  <bb 39>:
  _211 = *_203[1];
  _212 = (int) _211;
  _213 = *_206[1];
  _214 = (int) _213;
  _215 = _212 - _214;
  _216 = ABS_EXPR <_215>;
  if (mvy_limit_49 <= _216)
    goto <bb 40>;
  else
    goto <bb 41>;

  <bb 40>:
  bS[yn_220] = 1;

  <bb 41>:
  yn_219 = yn_220 + 1;
  # DEBUG i => yn_219
  # DEBUG i => yn_219
  ivtmp_1459 = ivtmp_1460 - 1;
  if (ivtmp_1459 != 0)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  goto <bb 27>;

  <bb 43>:
  _221 = MEM[(uint32_t *)&bS];
  if (_221 != 0)
    goto <bb 44>;
  else
    goto <bb 24>;

  <bb 44>:
  _222 = h_43(D)->mb.qp;
  _223 = _222 + _138;
  _224 = *_223;
  i_qpn_225 = (int) _224;
  # DEBUG i_qpn => i_qpn_225
  # DEBUG D#180 => h_43(D)->loopf.deblock_h_luma
  _227 = i_qp_94 + i_qpn_225;
  _228 = _227 + 1;
  _229 = _228 >> 1;
  # DEBUG D#179 => x_129 * 4
  # DEBUG D#178 => (sizetype) D#179
  _716 = MEM[(int *)h_43(D) + 4704B];
  # DEBUG D#1 => h_43(D)
  _717 = MEM[(int *)h_43(D) + 4708B];
  # DEBUG D#1 => h_43(D)
  # DEBUG pix1 => pixy_4 + D#178
  # DEBUG pix2 => 0B
  # DEBUG i_stride => stride2y_63
  # DEBUG bS => &bS
  # DEBUG i_qp => _229
  # DEBUG b_chroma => 0
  # DEBUG pf_inter => D#180
  # DEBUG h => D#1
  # DEBUG h => D#1
  index_a_778 = _229 + _716;
  # DEBUG index_a => index_a_778
  _779 = index_a_778 + 12;
  _780 = i_alpha_table[_779];
  alpha_781 = (const int) _780;
  # DEBUG alpha => alpha_781
  _783 = _229 + _717;
  _784 = _783 + 12;
  _785 = i_beta_table[_784];
  beta_786 = (const int) _785;
  # DEBUG beta => beta_786
  _787 = alpha_781 == 0;
  _788 = beta_786 == 0;
  _789 = _787 | _788;
  if (_789 != 0)
    goto <bb 46>;
  else
    goto <bb 45>;

  <bb 45>:
  _226 = h_43(D)->loopf.deblock_h_luma;
  _790 = MEM[(uint8_t *)&bS];
  _791 = (int) _790;
  _792 = i_tc0_table[_779][_791];
  tc[0] = _792;
  _797 = MEM[(uint8_t *)&bS + 1B];
  _798 = (int) _797;
  _799 = i_tc0_table[_779][_798];
  tc[1] = _799;
  _803 = MEM[(uint8_t *)&bS + 2B];
  _804 = (int) _803;
  _805 = i_tc0_table[_779][_804];
  tc[2] = _805;
  _809 = MEM[(uint8_t *)&bS + 3B];
  _810 = (int) _809;
  _811 = i_tc0_table[_779][_810];
  tc[3] = _811;
  _230 = x_129 * 4;
  _231 = (sizetype) _230;
  _232 = pixy_4 + _231;
  _226 (_232, stride2y_63, alpha_781, beta_786, &tc);
  tc ={v} {CLOBBER};
  pretmp_1543 = MEM[(int *)h_43(D) + 4704B];
  pretmp_1545 = MEM[(int *)h_43(D) + 4708B];
  goto <bb 47>;

  <bb 46>:
  tc ={v} {CLOBBER};

  <bb 47>:
  # prephitmp_1544 = PHI <_716(46), pretmp_1543(45)>
  # prephitmp_1546 = PHI <_717(46), pretmp_1545(45)>
  # DEBUG pix1 => NULL
  # DEBUG pix2 => NULL
  # DEBUG i_stride => NULL
  # DEBUG bS => NULL
  # DEBUG i_qp => NULL
  # DEBUG b_chroma => NULL
  # DEBUG pf_inter => NULL
  # DEBUG index_a => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  _234 = h_43(D)->chroma_qp_table;
  _235 = (sizetype) _93;
  _236 = _234 + _235;
  _237 = *_236;
  _238 = (int) _237;
  _239 = (sizetype) _224;
  _240 = _234 + _239;
  _241 = *_240;
  _242 = (int) _241;
  _243 = _238 + _242;
  _244 = _243 + 1;
  i_qpc_245 = _244 >> 1;
  # DEBUG i_qpc => i_qpc_245
  # DEBUG D#177 => h_43(D)->loopf.deblock_h_chroma
  # DEBUG D#176 => x_129 * 2
  # DEBUG D#175 => (sizetype) D#176
  # DEBUG D#1 => h_43(D)
  # DEBUG D#1 => h_43(D)
  # DEBUG pix1 => pixu_5 + D#175
  # DEBUG pix2 => pixv_6 + D#175
  # DEBUG i_stride => stride2uv_66
  # DEBUG bS => &bS
  # DEBUG i_qp => i_qpc_245
  # DEBUG b_chroma => 1
  # DEBUG pf_inter => D#177
  # DEBUG h => D#1
  # DEBUG h => D#1
  index_a_815 = i_qpc_245 + prephitmp_1544;
  # DEBUG index_a => index_a_815
  _816 = index_a_815 + 12;
  _817 = i_alpha_table[_816];
  alpha_818 = (const int) _817;
  # DEBUG alpha => alpha_818
  _820 = i_qpc_245 + prephitmp_1546;
  _821 = _820 + 12;
  _822 = i_beta_table[_821];
  beta_823 = (const int) _822;
  # DEBUG beta => beta_823
  _824 = alpha_818 == 0;
  _825 = beta_823 == 0;
  _826 = _824 | _825;
  if (_826 != 0)
    goto <bb 49>;
  else
    goto <bb 48>;

  <bb 48>:
  _246 = h_43(D)->loopf.deblock_h_chroma;
  _247 = x_129 * 2;
  _248 = (sizetype) _247;
  _827 = MEM[(uint8_t *)&bS];
  _828 = (int) _827;
  _829 = i_tc0_table[_816][_828];
  _830 = (unsigned char) _829;
  _832 = _830 + 1;
  _833 = (signed char) _832;
  tc[0] = _833;
  _834 = MEM[(uint8_t *)&bS + 1B];
  _835 = (int) _834;
  _836 = i_tc0_table[_816][_835];
  _837 = (unsigned char) _836;
  _838 = _837 + 1;
  _839 = (signed char) _838;
  tc[1] = _839;
  _840 = MEM[(uint8_t *)&bS + 2B];
  _841 = (int) _840;
  _842 = i_tc0_table[_816][_841];
  _843 = (unsigned char) _842;
  _844 = _843 + 1;
  _845 = (signed char) _844;
  tc[2] = _845;
  _846 = MEM[(uint8_t *)&bS + 3B];
  _847 = (int) _846;
  _848 = i_tc0_table[_816][_847];
  _849 = (unsigned char) _848;
  _850 = _849 + 1;
  _851 = (signed char) _850;
  tc[3] = _851;
  _250 = pixu_5 + _248;
  _246 (_250, stride2uv_66, alpha_818, beta_823, &tc);
  _249 = pixv_6 + _248;
  _246 (_249, stride2uv_66, alpha_818, beta_823, &tc);
  tc ={v} {CLOBBER};
  goto <bb 50> (end0);

  <bb 49>:
  tc ={v} {CLOBBER};

end0:
  _283 = b_8x8_transform_90 + 1;
  x_284 = x_129 + _283;
  # DEBUG i_edge => x_284
  goto <bb 16>;

  <bb 51>:
  pretmp_1590 = b_8x8_transform_90 + 1;
  pretmp_1591 = _87 * 24;

  <bb 52>:
  # x_979 = PHI <x_19(51), x_402(82)>
  # DEBUG i_edge => x_979
  _285 = h_43(D)->mb.type;
  _286 = _285 + _87;
  _287 = *_286;
  _288 = (unsigned char) _287;
  if (_288 <= 3)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  MEM[(uint32_t *)&bS] = 50529027;
  goto <bb 74>;

  <bb 54>:
  MEM[(uint32_t *)&bS] = 0;
  # DEBUG i => 0
  # DEBUG i => 0
  pretmp_1592 = x_979 + -1;
  pretmp_1593 = pretmp_1592 & 3;
  pretmp_1594 = h_43(D)->mb.non_zero_count;
  pretmp_1596 = pretmp_1594 + pretmp_1591;
  _305 = x_979 >> 1;
  _1492 = (unsigned int) mbn_8x8_81;
  _1491 = (unsigned int) _305;
  _1490 = _1492 + _1491;
  _306 = (int) _1490;
  _310 = pretmp_1593 >> 1;
  _1489 = (unsigned int) mbn_8x8_81;
  _1488 = (unsigned int) _310;
  _1487 = _1489 + _1488;
  _311 = (int) _1487;

  <bb 55>:
  # yn_1218 = PHI <yn_367(71), 0(54)>
  # ivtmp_1036 = PHI <ivtmp_1461(71), 4(54)>
  # DEBUG i => yn_1218
  # DEBUG x => x_979
  # DEBUG y => yn_1218
  # DEBUG D#133 => x_979 + -1
  # DEBUG xn => D#133 & 3
  # DEBUG yn => yn_1218
  _295 = yn_1218 * 4;
  _296 = _295 + x_979;
  _297 = *pretmp_1596[_296];
  if (_297 != 0)
    goto <bb 57>;
  else
    goto <bb 56>;

  <bb 56>:
  _298 = _295 + pretmp_1593;
  _299 = *pretmp_1596[_298];
  if (_299 != 0)
    goto <bb 57>;
  else
    goto <bb 58>;

  <bb 57>:
  bS[yn_1218] = 2;
  goto <bb 70>;

  <bb 58>:
  _300 = no_sub8x8_60 & x_979;
  if (_300 == 0)
    goto <bb 59>;
  else
    goto <bb 70>;

  <bb 59>:
  _301 = no_sub8x8_60 & yn_1218;
  if (_301 != 0)
    goto <bb 60>;
  else
    goto <bb 62>;

  <bb 60>:
  _302 = yn_1218 + -1;
  _303 = bS[_302];
  if (_303 != 2)
    goto <bb 61>;
  else
    goto <bb 62>;

  <bb 61>:
  bS[yn_1218] = _303;
  goto <bb 70>;

  <bb 62>:
  _307 = yn_1218 >> 1;
  _308 = s8x8_45 * _307;
  i8p_309 = _306 + _308;
  # DEBUG i8p => i8p_309
  i8q_312 = _308 + _311;
  # DEBUG i8q => i8q_312
  # DEBUG D#174 => mbn_4x4_85 + x_979
  # DEBUG D#173 => s4x4_47 * yn_1218
  # DEBUG i4p => D#174 + D#173
  # DEBUG D#172 => mbn_4x4_85 + pretmp_1593
  # DEBUG i4q => D#173 + D#172
  _318 = h_43(D)->mb.ref[0];
  _319 = (sizetype) i8p_309;
  _320 = _318 + _319;
  _321 = *_320;
  _322 = (sizetype) i8q_312;
  _323 = _318 + _322;
  _324 = *_323;
  if (_321 != _324)
    goto <bb 69>;
  else
    goto <bb 63>;

  <bb 63>:
  _314 = s4x4_47 * yn_1218;
  _325 = h_43(D)->mb.mv[0];
  _313 = mbn_4x4_85 + x_979;
  i4p_315 = _313 + _314;
  _326 = (long unsigned int) i4p_315;
  _327 = _326 * 4;
  _328 = _325 + _327;
  _329 = *_328[0];
  _330 = (int) _329;
  _316 = mbn_4x4_85 + pretmp_1593;
  i4q_317 = _314 + _316;
  _331 = (long unsigned int) i4q_317;
  _332 = _331 * 4;
  _333 = _325 + _332;
  _334 = *_333[0];
  _335 = (int) _334;
  _336 = _330 - _335;
  _337 = ABS_EXPR <_336>;
  if (_337 > 3)
    goto <bb 69>;
  else
    goto <bb 64>;

  <bb 64>:
  _338 = *_328[1];
  _339 = (int) _338;
  _340 = *_333[1];
  _341 = (int) _340;
  _342 = _339 - _341;
  _343 = ABS_EXPR <_342>;
  if (mvy_limit_49 <= _343)
    goto <bb 69>;
  else
    goto <bb 65>;

  <bb 65>:
  _344 = h_43(D)->sh.i_type;
  if (_344 == 1)
    goto <bb 66>;
  else
    goto <bb 70>;

  <bb 66>:
  _345 = h_43(D)->mb.ref[1];
  _346 = _345 + _319;
  _347 = *_346;
  _348 = _345 + _322;
  _349 = *_348;
  if (_347 != _349)
    goto <bb 69>;
  else
    goto <bb 67>;

  <bb 67>:
  _350 = h_43(D)->mb.mv[1];
  _351 = _350 + _327;
  _352 = *_351[0];
  _353 = (int) _352;
  _354 = _350 + _332;
  _355 = *_354[0];
  _356 = (int) _355;
  _357 = _353 - _356;
  _358 = ABS_EXPR <_357>;
  if (_358 > 3)
    goto <bb 69>;
  else
    goto <bb 68>;

  <bb 68>:
  _359 = *_351[1];
  _360 = (int) _359;
  _361 = *_354[1];
  _362 = (int) _361;
  _363 = _360 - _362;
  _364 = ABS_EXPR <_363>;
  if (mvy_limit_49 <= _364)
    goto <bb 69>;
  else
    goto <bb 70>;

  <bb 69>:
  bS[yn_1218] = 1;

  <bb 70>:
  yn_367 = yn_1218 + 1;
  # DEBUG i => yn_367
  # DEBUG i => yn_367
  ivtmp_1461 = ivtmp_1036 - 1;
  if (ivtmp_1461 != 0)
    goto <bb 71>;
  else
    goto <bb 72>;

  <bb 71>:
  goto <bb 55>;

  <bb 72>:
  _369 = MEM[(uint32_t *)&bS];
  if (_369 != 0)
    goto <bb 74>;
  else
    goto <bb 73>;

  <bb 73>:
  goto <bb 81>;

  <bb 74>:
  _370 = h_43(D)->mb.qp;
  _371 = _370 + _87;
  _372 = *_371;
  i_qpn_373 = (int) _372;
  # DEBUG i_qpn => i_qpn_373
  # DEBUG D#171 => h_43(D)->loopf.deblock_h_luma
  _375 = i_qp_94 + i_qpn_373;
  _376 = _375 + 1;
  _377 = _376 >> 1;
  # DEBUG D#170 => x_979 * 4
  # DEBUG D#169 => (sizetype) D#170
  _720 = MEM[(int *)h_43(D) + 4704B];
  # DEBUG D#1 => h_43(D)
  _721 = MEM[(int *)h_43(D) + 4708B];
  # DEBUG D#1 => h_43(D)
  # DEBUG pix1 => pixy_4 + D#169
  # DEBUG pix2 => 0B
  # DEBUG i_stride => stride2y_63
  # DEBUG bS => &bS
  # DEBUG i_qp => _377
  # DEBUG b_chroma => 0
  # DEBUG pf_inter => D#171
  # DEBUG h => D#1
  # DEBUG h => D#1
  index_a_852 = _377 + _720;
  # DEBUG index_a => index_a_852
  _853 = index_a_852 + 12;
  _854 = i_alpha_table[_853];
  alpha_855 = (const int) _854;
  # DEBUG alpha => alpha_855
  _857 = _377 + _721;
  _858 = _857 + 12;
  _859 = i_beta_table[_858];
  beta_860 = (const int) _859;
  # DEBUG beta => beta_860
  _861 = alpha_855 == 0;
  _862 = beta_860 == 0;
  _863 = _861 | _862;
  if (_863 != 0)
    goto <bb 76>;
  else
    goto <bb 75>;

  <bb 75>:
  _374 = h_43(D)->loopf.deblock_h_luma;
  _864 = MEM[(uint8_t *)&bS];
  _865 = (int) _864;
  _866 = i_tc0_table[_853][_865];
  tc[0] = _866;
  _871 = MEM[(uint8_t *)&bS + 1B];
  _872 = (int) _871;
  _873 = i_tc0_table[_853][_872];
  tc[1] = _873;
  _877 = MEM[(uint8_t *)&bS + 2B];
  _878 = (int) _877;
  _879 = i_tc0_table[_853][_878];
  tc[2] = _879;
  _883 = MEM[(uint8_t *)&bS + 3B];
  _884 = (int) _883;
  _885 = i_tc0_table[_853][_884];
  tc[3] = _885;
  _378 = x_979 * 4;
  _379 = (sizetype) _378;
  _380 = pixy_4 + _379;
  _374 (_380, stride2y_63, alpha_855, beta_860, &tc);
  tc ={v} {CLOBBER};
  goto <bb 77>;

  <bb 76>:
  tc ={v} {CLOBBER};

  <bb 77>:
  # DEBUG pix1 => NULL
  # DEBUG pix2 => NULL
  # DEBUG i_stride => NULL
  # DEBUG bS => NULL
  # DEBUG i_qp => NULL
  # DEBUG b_chroma => NULL
  # DEBUG pf_inter => NULL
  # DEBUG index_a => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  _382 = x_979 & 1;
  if (_382 == 0)
    goto <bb 78>;
  else
    goto <bb 73>;

  <bb 78>:
  _383 = h_43(D)->chroma_qp_table;
  _384 = (sizetype) _93;
  _385 = _383 + _384;
  _386 = *_385;
  _387 = (int) _386;
  _388 = (sizetype) _372;
  _389 = _383 + _388;
  _390 = *_389;
  _391 = (int) _390;
  _392 = _387 + _391;
  _393 = _392 + 1;
  i_qpc_394 = _393 >> 1;
  # DEBUG i_qpc => i_qpc_394
  # DEBUG D#168 => h_43(D)->loopf.deblock_h_chroma
  # DEBUG D#167 => x_979 * 2
  # DEBUG D#166 => (sizetype) D#167
  _722 = MEM[(int *)h_43(D) + 4704B];
  # DEBUG D#1 => h_43(D)
  _723 = MEM[(int *)h_43(D) + 4708B];
  # DEBUG D#1 => h_43(D)
  # DEBUG pix1 => pixu_5 + D#166
  # DEBUG pix2 => pixv_6 + D#166
  # DEBUG i_stride => stride2uv_66
  # DEBUG bS => &bS
  # DEBUG i_qp => i_qpc_394
  # DEBUG b_chroma => 1
  # DEBUG pf_inter => D#168
  # DEBUG h => D#1
  # DEBUG h => D#1
  index_a_889 = i_qpc_394 + _722;
  # DEBUG index_a => index_a_889
  _890 = index_a_889 + 12;
  _891 = i_alpha_table[_890];
  alpha_892 = (const int) _891;
  # DEBUG alpha => alpha_892
  _894 = i_qpc_394 + _723;
  _895 = _894 + 12;
  _896 = i_beta_table[_895];
  beta_897 = (const int) _896;
  # DEBUG beta => beta_897
  _898 = alpha_892 == 0;
  _899 = beta_897 == 0;
  _900 = _898 | _899;
  if (_900 != 0)
    goto <bb 80>;
  else
    goto <bb 79>;

  <bb 79>:
  _395 = h_43(D)->loopf.deblock_h_chroma;
  _396 = x_979 * 2;
  _397 = (sizetype) _396;
  _901 = MEM[(uint8_t *)&bS];
  _902 = (int) _901;
  _903 = i_tc0_table[_890][_902];
  _904 = (unsigned char) _903;
  _906 = _904 + 1;
  _907 = (signed char) _906;
  tc[0] = _907;
  _908 = MEM[(uint8_t *)&bS + 1B];
  _909 = (int) _908;
  _910 = i_tc0_table[_890][_909];
  _911 = (unsigned char) _910;
  _912 = _911 + 1;
  _913 = (signed char) _912;
  tc[1] = _913;
  _914 = MEM[(uint8_t *)&bS + 2B];
  _915 = (int) _914;
  _916 = i_tc0_table[_890][_915];
  _917 = (unsigned char) _916;
  _918 = _917 + 1;
  _919 = (signed char) _918;
  tc[2] = _919;
  _920 = MEM[(uint8_t *)&bS + 3B];
  _921 = (int) _920;
  _922 = i_tc0_table[_890][_921];
  _923 = (unsigned char) _922;
  _924 = _923 + 1;
  _925 = (signed char) _924;
  tc[3] = _925;
  _399 = pixu_5 + _397;
  _395 (_399, stride2uv_66, alpha_892, beta_897, &tc);
  _398 = pixv_6 + _397;
  _395 (_398, stride2uv_66, alpha_892, beta_897, &tc);
  tc ={v} {CLOBBER};
  goto <bb 81>;

  <bb 80>:
  tc ={v} {CLOBBER};

  <bb 81>:
  x_402 = x_979 + pretmp_1590;
  # DEBUG i_edge => x_402
  # DEBUG i_edge => x_402
  if (i_edge_end_3 > x_402)
    goto <bb 82>;
  else
    goto <bb 17>;

  <bb 82>:
  goto <bb 52>;

  <bb 83>:
  y_406 = b_8x8_transform_90 + y_405;
  # DEBUG i_edge => y_406

  <bb 84>:
  # y_34 = PHI <y_583(125), y_406(83)>
  # DEBUG i_edge => y_34
  if (i_edge_end_3 > y_34)
    goto <bb 126>;
  else
    goto <bb 85>;

  <bb 85>:
  bS ={v} {CLOBBER};
  _707 = mb_y_9 | pretmp_1528;
  _708 = _707 & 1;
  mb_x_709 = _708 + mb_x_1219;
  # DEBUG mb_x => mb_x_709
  mb_y_710 = mb_y_9 ^ b_interlaced_48;
  # DEBUG mb_y => mb_y_710
  # DEBUG mb_x => mb_x_709
  # DEBUG mb_y => mb_y_710
  _73 = h_43(D)->sps;
  _74 = _73->i_mb_width;
  if (_74 > mb_x_709)
    goto <bb 158>;
  else
    goto <bb 86>;

  <bb 86>:
  # mb_y_26 = PHI <mb_y_710(85)>
  goto <bb 159>;

  <bb 87>:
  _407 = h_43(D)->mb.i_mb_stride;
  mbn_xy_408 = mbn_xy_77 - _407;
  # DEBUG mbn_xy => mbn_xy_408
  mbn_8x8_409 = mbn_8x8_81 - pretmp_1516;
  # DEBUG mbn_8x8 => mbn_8x8_409
  mbn_4x4_410 = mbn_4x4_85 - pretmp_1518;
  # DEBUG mbn_4x4 => mbn_4x4_410
  if (b_interlaced_48 != 0)
    goto <bb 88>;
  else
    goto <bb 90>;

  <bb 88>:
  mbn_xy_453 = mbn_xy_408 - _407;
  # DEBUG mbn_xy => mbn_xy_453
  # DEBUG D#165 => mbn_8x8_409 - pretmp_1516
  # DEBUG mbn_8x8 => D#165
  # DEBUG D#164 => mbn_4x4_410 - pretmp_1518
  # DEBUG mbn_4x4 => D#164
  # DEBUG mbn_4x4 => D#164
  # DEBUG mbn_8x8 => D#165
  # DEBUG mbn_xy => mbn_xy_453
  _456 = h_43(D)->mb.type;
  _457 = _456 + _87;
  _458 = *_457;
  _459 = (unsigned char) _458;
  if (_459 <= 3)
    goto <bb 89>;
  else
    goto <bb 98>;

  <bb 89>:
  pretmp_1555 = (sizetype) mbn_xy_453;
  goto <bb 100>;

  <bb 90>:
  _411 = h_43(D)->mb.type;
  _412 = _411 + _87;
  _413 = *_412;
  _414 = (unsigned char) _413;
  if (_414 <= 3)
    goto <bb 91>;
  else
    goto <bb 92>;

  <bb 91>:
  pretmp_1573 = (sizetype) mbn_xy_408;
  goto <bb 93>;

  <bb 92>:
  _415 = (sizetype) mbn_xy_408;
  _416 = _411 + _415;
  _417 = *_416;
  _418 = (unsigned char) _417;
  if (_418 <= 3)
    goto <bb 93>;
  else
    goto <bb 99>;

  <bb 93>:
  # prephitmp_1574 = PHI <pretmp_1573(91), _415(92)>
  _419 = h_43(D)->mb.qp;
  _421 = _419 + prephitmp_1574;
  _422 = *_421;
  i_qpn_423 = (int) _422;
  # DEBUG i_qpn => i_qpn_423
  # DEBUG D#163 => h_43(D)->loopf.deblock_v_luma_intra
  _425 = i_qp_94 + i_qpn_423;
  _426 = _425 + 1;
  _427 = _426 >> 1;
  # DEBUG D#162 => y_405 * 4
  # DEBUG D#161 => stride2y_63 * D#162
  # DEBUG D#160 => (sizetype) D#161
  _736 = MEM[(int *)h_43(D) + 4704B];
  # DEBUG D#2 => h_43(D)
  _737 = MEM[(int *)h_43(D) + 4708B];
  # DEBUG D#2 => h_43(D)
  # DEBUG D#3 => &bS
  # DEBUG pix1 => pixy_4 + D#160
  # DEBUG pix2 => 0B
  # DEBUG i_stride => stride2y_63
  # DEBUG i_qp => _427
  # DEBUG b_chroma => 0
  # DEBUG pf_intra => D#163
  # DEBUG h => D#2
  # DEBUG h => D#2
  # DEBUG bS => D#3
  _751 = _427 + _736;
  _752 = _751 + 12;
  _753 = i_alpha_table[_752];
  alpha_754 = (const int) _753;
  # DEBUG alpha => alpha_754
  _755 = _427 + _737;
  _756 = _755 + 12;
  _757 = i_beta_table[_756];
  beta_758 = (const int) _757;
  # DEBUG beta => beta_758
  _759 = alpha_754 == 0;
  _760 = beta_758 == 0;
  _761 = _759 | _760;
  if (_761 != 0)
    goto <bb 95>;
  else
    goto <bb 94>;

  <bb 94>:
  _424 = h_43(D)->loopf.deblock_v_luma_intra;
  _428 = y_405 * 4;
  _429 = stride2y_63 * _428;
  _430 = (sizetype) _429;
  _431 = pixy_4 + _430;
  _424 (_431, stride2y_63, alpha_754, beta_758);
  pretmp_1575 = MEM[(int *)h_43(D) + 4704B];
  pretmp_1577 = MEM[(int *)h_43(D) + 4708B];

  <bb 95>:
  # prephitmp_1576 = PHI <pretmp_1575(94), _736(93)>
  # prephitmp_1578 = PHI <pretmp_1577(94), _737(93)>
  # DEBUG pix1 => NULL
  # DEBUG pix2 => NULL
  # DEBUG i_stride => NULL
  # DEBUG i_qp => NULL
  # DEBUG b_chroma => NULL
  # DEBUG pf_intra => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  _434 = h_43(D)->chroma_qp_table;
  _435 = (sizetype) _93;
  _436 = _434 + _435;
  _437 = *_436;
  _438 = (int) _437;
  _439 = (sizetype) _422;
  _440 = _434 + _439;
  _441 = *_440;
  _442 = (int) _441;
  _443 = _438 + _442;
  _444 = _443 + 1;
  i_qpc_445 = _444 >> 1;
  # DEBUG i_qpc => i_qpc_445
  # DEBUG D#159 => h_43(D)->loopf.deblock_v_chroma_intra
  # DEBUG D#158 => y_405 * 2
  # DEBUG D#157 => stride2uv_66 * D#158
  # DEBUG D#156 => (sizetype) D#157
  # DEBUG D#2 => h_43(D)
  # DEBUG D#2 => h_43(D)
  # DEBUG D#3 => &bS
  # DEBUG pix1 => pixu_5 + D#156
  # DEBUG pix2 => pixv_6 + D#156
  # DEBUG i_stride => stride2uv_66
  # DEBUG i_qp => i_qpc_445
  # DEBUG pf_intra => D#159
  # DEBUG b_chroma => 1
  # DEBUG h => D#2
  # DEBUG h => D#2
  # DEBUG bS => D#3
  _926 = i_qpc_445 + prephitmp_1576;
  _927 = _926 + 12;
  _928 = i_alpha_table[_927];
  alpha_929 = (const int) _928;
  # DEBUG alpha => alpha_929
  _931 = i_qpc_445 + prephitmp_1578;
  _932 = _931 + 12;
  _933 = i_beta_table[_932];
  beta_934 = (const int) _933;
  # DEBUG beta => beta_934
  _935 = alpha_929 == 0;
  _936 = beta_934 == 0;
  _937 = _935 | _936;
  if (_937 != 0)
    goto <bb 96>;
  else
    goto <bb 97>;

  <bb 96>:
  goto <bb 125> (end1);

  <bb 97>:
  _446 = h_43(D)->loopf.deblock_v_chroma_intra;
  _447 = y_405 * 2;
  _448 = stride2uv_66 * _447;
  _449 = (sizetype) _448;
  _451 = pixu_5 + _449;
  _446 (_451, stride2uv_66, alpha_929, beta_934);
  _450 = pixv_6 + _449;
  _446 (_450, stride2uv_66, alpha_929, beta_934);
  goto <bb 125> (end1);

  <bb 98>:
  mbn_8x8_454 = mbn_8x8_409 - pretmp_1516;
  mbn_4x4_455 = mbn_4x4_410 - pretmp_1518;
  pretmp_1557 = (sizetype) mbn_xy_453;
  pretmp_1559 = _456 + pretmp_1557;
  pretmp_1561 = *pretmp_1559;
  pretmp_1563 = (unsigned char) pretmp_1561;

  <bb 99>:
  # mbn_8x8_1046 = PHI <mbn_8x8_454(98), mbn_8x8_409(92)>
  # mbn_4x4_1048 = PHI <mbn_4x4_455(98), mbn_4x4_410(92)>
  # prephitmp_1558 = PHI <pretmp_1557(98), _415(92)>
  # prephitmp_1564 = PHI <pretmp_1563(98), _418(92)>
  # DEBUG mbn_4x4 => mbn_4x4_1048
  # DEBUG mbn_8x8 => mbn_8x8_1046
  # DEBUG mbn_xy => NULL
  if (prephitmp_1564 <= 3)
    goto <bb 100>;
  else
    goto <bb 101>;

  <bb 100>:
  # prephitmp_1556 = PHI <pretmp_1555(89), prephitmp_1558(99)>
  MEM[(uint32_t *)&bS] = 50529027;
  pretmp_1549 = y_405 * 4;
  goto <bb 119>;

  <bb 101>:
  MEM[(uint32_t *)&bS] = 0;
  # DEBUG i => 0
  # DEBUG i => 0
  pretmp_1565 = _87 * 24;
  pretmp_1566 = y_405 + -1;
  pretmp_1567 = pretmp_1566 & 3;
  pretmp_1568 = h_43(D)->mb.non_zero_count;
  pretmp_1570 = pretmp_1568 + pretmp_1565;
  pretmp_1572 = y_405 * 4;
  _473 = prephitmp_1558 * 24;
  _474 = pretmp_1568 + _473;
  _1486 = (unsigned int) pretmp_1567;
  _1485 = _1486 * 4;
  _475 = (int) _1485;
  _488 = pretmp_1567 >> 1;
  _1484 = (unsigned int) s8x8_45;
  _1483 = (unsigned int) _488;
  _1482 = _1484 * _1483;
  _489 = (int) _1482;
  _1481 = (unsigned int) s4x4_47;
  _1480 = (unsigned int) y_405;
  _1479 = _1481 * _1480;
  _492 = (int) _1479;
  _1478 = (unsigned int) s4x4_47;
  _1477 = (unsigned int) pretmp_1567;
  _1476 = _1478 * _1477;
  _495 = (int) _1476;

  <bb 102>:
  # xn_1196 = PHI <xn_546(117), 0(101)>
  # ivtmp_1040 = PHI <ivtmp_806(117), 4(101)>
  # DEBUG i => xn_1196
  # DEBUG x => xn_1196
  # DEBUG y => y_405
  # DEBUG xn => xn_1196
  # DEBUG D#132 => y_405 + -1
  # DEBUG yn => D#132 & 3
  _471 = xn_1196 + pretmp_1572;
  _472 = *pretmp_1570[_471];
  if (_472 != 0)
    goto <bb 104>;
  else
    goto <bb 103>;

  <bb 103>:
  _476 = _475 + xn_1196;
  _477 = *_474[_476];
  if (_477 != 0)
    goto <bb 104>;
  else
    goto <bb 105>;

  <bb 104>:
  bS[xn_1196] = 2;
  goto <bb 116>;

  <bb 105>:
  _478 = no_sub8x8_60 & xn_1196;
  if (_478 != 0)
    goto <bb 106>;
  else
    goto <bb 108>;

  <bb 106>:
  _479 = xn_1196 + -1;
  _480 = bS[_479];
  if (_480 != 2)
    goto <bb 107>;
  else
    goto <bb 108>;

  <bb 107>:
  bS[xn_1196] = _480;
  goto <bb 116>;

  <bb 108>:
  _482 = xn_1196 >> 1;
  _483 = mbn_8x8_81 + _482;
  # DEBUG i8p => _483
  _487 = _482 + mbn_8x8_1046;
  i8q_490 = _487 + _489;
  # DEBUG i8q => i8q_490
  # DEBUG D#155 => mbn_4x4_85 + xn_1196
  # DEBUG D#154 => s4x4_47 * y_405
  # DEBUG i4p => D#155 + D#154
  # DEBUG D#153 => mbn_4x4_1048 + xn_1196
  # DEBUG D#152 => s4x4_47 * pretmp_1567
  # DEBUG i4q => D#153 + D#152
  _497 = h_43(D)->mb.ref[0];
  _498 = (sizetype) _483;
  _499 = _497 + _498;
  _500 = *_499;
  _501 = (sizetype) i8q_490;
  _502 = _497 + _501;
  _503 = *_502;
  if (_500 != _503)
    goto <bb 115>;
  else
    goto <bb 109>;

  <bb 109>:
  _504 = h_43(D)->mb.mv[0];
  _491 = mbn_4x4_85 + xn_1196;
  i4p_493 = _491 + _492;
  _505 = (long unsigned int) i4p_493;
  _506 = _505 * 4;
  _507 = _504 + _506;
  _508 = *_507[0];
  _509 = (int) _508;
  _494 = mbn_4x4_1048 + xn_1196;
  i4q_496 = _494 + _495;
  _510 = (long unsigned int) i4q_496;
  _511 = _510 * 4;
  _512 = _504 + _511;
  _513 = *_512[0];
  _514 = (int) _513;
  _515 = _509 - _514;
  _516 = ABS_EXPR <_515>;
  if (_516 > 3)
    goto <bb 115>;
  else
    goto <bb 110>;

  <bb 110>:
  _517 = *_507[1];
  _518 = (int) _517;
  _519 = *_512[1];
  _520 = (int) _519;
  _521 = _518 - _520;
  _522 = ABS_EXPR <_521>;
  if (mvy_limit_49 <= _522)
    goto <bb 115>;
  else
    goto <bb 111>;

  <bb 111>:
  _523 = h_43(D)->sh.i_type;
  if (_523 == 1)
    goto <bb 112>;
  else
    goto <bb 116>;

  <bb 112>:
  _524 = h_43(D)->mb.ref[1];
  _525 = _524 + _498;
  _526 = *_525;
  _527 = _524 + _501;
  _528 = *_527;
  if (_526 != _528)
    goto <bb 115>;
  else
    goto <bb 113>;

  <bb 113>:
  _529 = h_43(D)->mb.mv[1];
  _530 = _529 + _506;
  _531 = *_530[0];
  _532 = (int) _531;
  _533 = _529 + _511;
  _534 = *_533[0];
  _535 = (int) _534;
  _536 = _532 - _535;
  _537 = ABS_EXPR <_536>;
  if (_537 > 3)
    goto <bb 115>;
  else
    goto <bb 114>;

  <bb 114>:
  _538 = *_530[1];
  _539 = (int) _538;
  _540 = *_533[1];
  _541 = (int) _540;
  _542 = _539 - _541;
  _543 = ABS_EXPR <_542>;
  if (mvy_limit_49 <= _543)
    goto <bb 115>;
  else
    goto <bb 116>;

  <bb 115>:
  bS[xn_1196] = 1;

  <bb 116>:
  xn_546 = xn_1196 + 1;
  # DEBUG i => xn_546
  # DEBUG i => xn_546
  ivtmp_806 = ivtmp_1040 - 1;
  if (ivtmp_806 != 0)
    goto <bb 117>;
  else
    goto <bb 118>;

  <bb 117>:
  goto <bb 102>;

  <bb 118>:
  _548 = MEM[(uint32_t *)&bS];
  if (_548 != 0)
    goto <bb 119>;
  else
    goto <bb 96>;

  <bb 119>:
  # prephitmp_1548 = PHI <prephitmp_1558(118), prephitmp_1556(100)>
  # prephitmp_1550 = PHI <pretmp_1572(118), pretmp_1549(100)>
  _549 = h_43(D)->mb.qp;
  _551 = _549 + prephitmp_1548;
  _552 = *_551;
  i_qpn_553 = (int) _552;
  # DEBUG i_qpn => i_qpn_553
  # DEBUG D#151 => h_43(D)->loopf.deblock_v_luma
  _555 = i_qp_94 + i_qpn_553;
  _556 = _555 + 1;
  _557 = _556 >> 1;
  # DEBUG D#150 => stride2y_63 * prephitmp_1550
  # DEBUG D#149 => (sizetype) D#150
  _724 = MEM[(int *)h_43(D) + 4704B];
  # DEBUG D#1 => h_43(D)
  _725 = MEM[(int *)h_43(D) + 4708B];
  # DEBUG D#1 => h_43(D)
  # DEBUG pix1 => pixy_4 + D#149
  # DEBUG pix2 => 0B
  # DEBUG i_stride => stride2y_63
  # DEBUG bS => &bS
  # DEBUG i_qp => _557
  # DEBUG b_chroma => 0
  # DEBUG pf_inter => D#151
  # DEBUG h => D#1
  # DEBUG h => D#1
  index_a_938 = _557 + _724;
  # DEBUG index_a => index_a_938
  _939 = index_a_938 + 12;
  _940 = i_alpha_table[_939];
  alpha_941 = (const int) _940;
  # DEBUG alpha => alpha_941
  _943 = _557 + _725;
  _944 = _943 + 12;
  _945 = i_beta_table[_944];
  beta_946 = (const int) _945;
  # DEBUG beta => beta_946
  _947 = alpha_941 == 0;
  _948 = beta_946 == 0;
  _949 = _947 | _948;
  if (_949 != 0)
    goto <bb 121>;
  else
    goto <bb 120>;

  <bb 120>:
  _554 = h_43(D)->loopf.deblock_v_luma;
  _950 = MEM[(uint8_t *)&bS];
  _951 = (int) _950;
  _952 = i_tc0_table[_939][_951];
  tc[0] = _952;
  _957 = MEM[(uint8_t *)&bS + 1B];
  _958 = (int) _957;
  _959 = i_tc0_table[_939][_958];
  tc[1] = _959;
  _963 = MEM[(uint8_t *)&bS + 2B];
  _964 = (int) _963;
  _965 = i_tc0_table[_939][_964];
  tc[2] = _965;
  _969 = MEM[(uint8_t *)&bS + 3B];
  _970 = (int) _969;
  _971 = i_tc0_table[_939][_970];
  tc[3] = _971;
  _559 = stride2y_63 * prephitmp_1550;
  _560 = (sizetype) _559;
  _561 = pixy_4 + _560;
  _554 (_561, stride2y_63, alpha_941, beta_946, &tc);
  tc ={v} {CLOBBER};
  pretmp_1551 = MEM[(int *)h_43(D) + 4704B];
  pretmp_1553 = MEM[(int *)h_43(D) + 4708B];
  goto <bb 122>;

  <bb 121>:
  tc ={v} {CLOBBER};

  <bb 122>:
  # prephitmp_1552 = PHI <_724(121), pretmp_1551(120)>
  # prephitmp_1554 = PHI <_725(121), pretmp_1553(120)>
  # DEBUG pix1 => NULL
  # DEBUG pix2 => NULL
  # DEBUG i_stride => NULL
  # DEBUG bS => NULL
  # DEBUG i_qp => NULL
  # DEBUG b_chroma => NULL
  # DEBUG pf_inter => NULL
  # DEBUG index_a => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  _563 = h_43(D)->chroma_qp_table;
  _564 = (sizetype) _93;
  _565 = _563 + _564;
  _566 = *_565;
  _567 = (int) _566;
  _568 = (sizetype) _552;
  _569 = _563 + _568;
  _570 = *_569;
  _571 = (int) _570;
  _572 = _567 + _571;
  _573 = _572 + 1;
  i_qpc_574 = _573 >> 1;
  # DEBUG i_qpc => i_qpc_574
  # DEBUG D#148 => h_43(D)->loopf.deblock_v_chroma
  # DEBUG D#147 => y_405 * 2
  # DEBUG D#146 => stride2uv_66 * D#147
  # DEBUG D#145 => (sizetype) D#146
  # DEBUG D#1 => h_43(D)
  # DEBUG D#1 => h_43(D)
  # DEBUG pix1 => pixu_5 + D#145
  # DEBUG pix2 => pixv_6 + D#145
  # DEBUG i_stride => stride2uv_66
  # DEBUG bS => &bS
  # DEBUG i_qp => i_qpc_574
  # DEBUG b_chroma => 1
  # DEBUG pf_inter => D#148
  # DEBUG h => D#1
  # DEBUG h => D#1
  index_a_975 = i_qpc_574 + prephitmp_1552;
  # DEBUG index_a => index_a_975
  _976 = index_a_975 + 12;
  _977 = i_alpha_table[_976];
  alpha_978 = (const int) _977;
  # DEBUG alpha => alpha_978
  _980 = i_qpc_574 + prephitmp_1554;
  _981 = _980 + 12;
  _982 = i_beta_table[_981];
  beta_983 = (const int) _982;
  # DEBUG beta => beta_983
  _984 = alpha_978 == 0;
  _985 = beta_983 == 0;
  _986 = _984 | _985;
  if (_986 != 0)
    goto <bb 124>;
  else
    goto <bb 123>;

  <bb 123>:
  _575 = h_43(D)->loopf.deblock_v_chroma;
  _576 = y_405 * 2;
  _577 = stride2uv_66 * _576;
  _578 = (sizetype) _577;
  _987 = MEM[(uint8_t *)&bS];
  _988 = (int) _987;
  _989 = i_tc0_table[_976][_988];
  _990 = (unsigned char) _989;
  _992 = _990 + 1;
  _993 = (signed char) _992;
  tc[0] = _993;
  _994 = MEM[(uint8_t *)&bS + 1B];
  _995 = (int) _994;
  _996 = i_tc0_table[_976][_995];
  _997 = (unsigned char) _996;
  _998 = _997 + 1;
  _999 = (signed char) _998;
  tc[1] = _999;
  _1000 = MEM[(uint8_t *)&bS + 2B];
  _1001 = (int) _1000;
  _1002 = i_tc0_table[_976][_1001];
  _1003 = (unsigned char) _1002;
  _1004 = _1003 + 1;
  _1005 = (signed char) _1004;
  tc[2] = _1005;
  _1006 = MEM[(uint8_t *)&bS + 3B];
  _1007 = (int) _1006;
  _1008 = i_tc0_table[_976][_1007];
  _1009 = (unsigned char) _1008;
  _1010 = _1009 + 1;
  _1011 = (signed char) _1010;
  tc[3] = _1011;
  _580 = pixu_5 + _578;
  _575 (_580, stride2uv_66, alpha_978, beta_983, &tc);
  _579 = pixv_6 + _578;
  _575 (_579, stride2uv_66, alpha_978, beta_983, &tc);
  tc ={v} {CLOBBER};
  goto <bb 125> (end1);

  <bb 124>:
  tc ={v} {CLOBBER};

end1:
  _582 = b_8x8_transform_90 + 1;
  y_583 = y_405 + _582;
  # DEBUG i_edge => y_583
  goto <bb 84>;

  <bb 126>:
  pretmp_1579 = b_8x8_transform_90 + 1;
  pretmp_1582 = _87 * 24;

  <bb 127>:
  # y_1220 = PHI <y_34(126), y_704(157)>
  # DEBUG i_edge => y_1220
  _584 = h_43(D)->mb.type;
  _585 = _584 + _87;
  _586 = *_585;
  _587 = (unsigned char) _586;
  if (_587 <= 3)
    goto <bb 128>;
  else
    goto <bb 129>;

  <bb 128>:
  MEM[(uint32_t *)&bS] = 50529027;
  pretmp_1580 = y_1220 * 4;
  goto <bb 149>;

  <bb 129>:
  MEM[(uint32_t *)&bS] = 0;
  # DEBUG i => 0
  # DEBUG i => 0
  pretmp_1583 = y_1220 + -1;
  pretmp_1584 = pretmp_1583 & 3;
  pretmp_1585 = h_43(D)->mb.non_zero_count;
  pretmp_1587 = pretmp_1585 + pretmp_1582;
  pretmp_1589 = y_1220 * 4;
  _1475 = (unsigned int) pretmp_1584;
  _1474 = _1475 * 4;
  _597 = (int) _1474;
  _607 = y_1220 >> 1;
  _1473 = (unsigned int) s8x8_45;
  _1472 = (unsigned int) _607;
  _1471 = _1473 * _1472;
  _608 = (int) _1471;
  _610 = pretmp_1584 >> 1;
  _1470 = (unsigned int) s8x8_45;
  _1469 = (unsigned int) _610;
  _1468 = _1470 * _1469;
  _611 = (int) _1468;
  _1467 = (unsigned int) s4x4_47;
  _1466 = (unsigned int) y_1220;
  _1465 = _1467 * _1466;
  _614 = (int) _1465;
  _1464 = (unsigned int) s4x4_47;
  _1463 = (unsigned int) pretmp_1584;
  _1462 = _1464 * _1463;
  _616 = (int) _1462;

  <bb 130>:
  # xn_1195 = PHI <xn_667(146), 0(129)>
  # ivtmp_812 = PHI <ivtmp_1042(146), 4(129)>
  # DEBUG i => xn_1195
  # DEBUG x => xn_1195
  # DEBUG y => y_1220
  # DEBUG xn => xn_1195
  # DEBUG D#131 => y_1220 + -1
  # DEBUG yn => D#131 & 3
  _595 = xn_1195 + pretmp_1589;
  _596 = *pretmp_1587[_595];
  if (_596 != 0)
    goto <bb 132>;
  else
    goto <bb 131>;

  <bb 131>:
  _598 = _597 + xn_1195;
  _599 = *pretmp_1587[_598];
  if (_599 != 0)
    goto <bb 132>;
  else
    goto <bb 133>;

  <bb 132>:
  bS[xn_1195] = 2;
  goto <bb 145>;

  <bb 133>:
  _600 = no_sub8x8_60 & y_1220;
  if (_600 == 0)
    goto <bb 134>;
  else
    goto <bb 145>;

  <bb 134>:
  _601 = no_sub8x8_60 & xn_1195;
  if (_601 != 0)
    goto <bb 135>;
  else
    goto <bb 137>;

  <bb 135>:
  _602 = xn_1195 + -1;
  _603 = bS[_602];
  if (_603 != 2)
    goto <bb 136>;
  else
    goto <bb 137>;

  <bb 136>:
  bS[xn_1195] = _603;
  goto <bb 145>;

  <bb 137>:
  _605 = xn_1195 >> 1;
  _606 = mbn_8x8_81 + _605;
  i8p_609 = _606 + _608;
  # DEBUG i8p => i8p_609
  i8q_612 = _606 + _611;
  # DEBUG i8q => i8q_612
  # DEBUG D#144 => mbn_4x4_85 + xn_1195
  # DEBUG D#143 => s4x4_47 * y_1220
  # DEBUG i4p => D#144 + D#143
  # DEBUG D#142 => s4x4_47 * pretmp_1584
  # DEBUG i4q => D#144 + D#142
  _618 = h_43(D)->mb.ref[0];
  _619 = (sizetype) i8p_609;
  _620 = _618 + _619;
  _621 = *_620;
  _622 = (sizetype) i8q_612;
  _623 = _618 + _622;
  _624 = *_623;
  if (_621 != _624)
    goto <bb 144>;
  else
    goto <bb 138>;

  <bb 138>:
  _613 = mbn_4x4_85 + xn_1195;
  _625 = h_43(D)->mb.mv[0];
  i4p_615 = _613 + _614;
  _626 = (long unsigned int) i4p_615;
  _627 = _626 * 4;
  _628 = _625 + _627;
  _629 = *_628[0];
  _630 = (int) _629;
  i4q_617 = _613 + _616;
  _631 = (long unsigned int) i4q_617;
  _632 = _631 * 4;
  _633 = _625 + _632;
  _634 = *_633[0];
  _635 = (int) _634;
  _636 = _630 - _635;
  _637 = ABS_EXPR <_636>;
  if (_637 > 3)
    goto <bb 144>;
  else
    goto <bb 139>;

  <bb 139>:
  _638 = *_628[1];
  _639 = (int) _638;
  _640 = *_633[1];
  _641 = (int) _640;
  _642 = _639 - _641;
  _643 = ABS_EXPR <_642>;
  if (mvy_limit_49 <= _643)
    goto <bb 144>;
  else
    goto <bb 140>;

  <bb 140>:
  _644 = h_43(D)->sh.i_type;
  if (_644 == 1)
    goto <bb 141>;
  else
    goto <bb 145>;

  <bb 141>:
  _645 = h_43(D)->mb.ref[1];
  _646 = _645 + _619;
  _647 = *_646;
  _648 = _645 + _622;
  _649 = *_648;
  if (_647 != _649)
    goto <bb 144>;
  else
    goto <bb 142>;

  <bb 142>:
  _650 = h_43(D)->mb.mv[1];
  _651 = _650 + _627;
  _652 = *_651[0];
  _653 = (int) _652;
  _654 = _650 + _632;
  _655 = *_654[0];
  _656 = (int) _655;
  _657 = _653 - _656;
  _658 = ABS_EXPR <_657>;
  if (_658 > 3)
    goto <bb 144>;
  else
    goto <bb 143>;

  <bb 143>:
  _659 = *_651[1];
  _660 = (int) _659;
  _661 = *_654[1];
  _662 = (int) _661;
  _663 = _660 - _662;
  _664 = ABS_EXPR <_663>;
  if (mvy_limit_49 <= _664)
    goto <bb 144>;
  else
    goto <bb 145>;

  <bb 144>:
  bS[xn_1195] = 1;

  <bb 145>:
  xn_667 = xn_1195 + 1;
  # DEBUG i => xn_667
  # DEBUG i => xn_667
  ivtmp_1042 = ivtmp_812 - 1;
  if (ivtmp_1042 != 0)
    goto <bb 146>;
  else
    goto <bb 147>;

  <bb 146>:
  goto <bb 130>;

  <bb 147>:
  _669 = MEM[(uint32_t *)&bS];
  if (_669 != 0)
    goto <bb 149>;
  else
    goto <bb 148>;

  <bb 148>:
  goto <bb 156>;

  <bb 149>:
  # prephitmp_1581 = PHI <pretmp_1589(147), pretmp_1580(128)>
  _670 = h_43(D)->mb.qp;
  _671 = _670 + _87;
  _672 = *_671;
  i_qpn_673 = (int) _672;
  # DEBUG i_qpn => i_qpn_673
  # DEBUG D#141 => h_43(D)->loopf.deblock_v_luma
  _675 = i_qp_94 + i_qpn_673;
  _676 = _675 + 1;
  _677 = _676 >> 1;
  # DEBUG D#140 => stride2y_63 * prephitmp_1581
  # DEBUG D#139 => (sizetype) D#140
  _728 = MEM[(int *)h_43(D) + 4704B];
  # DEBUG D#1 => h_43(D)
  _729 = MEM[(int *)h_43(D) + 4708B];
  # DEBUG D#1 => h_43(D)
  # DEBUG pix1 => pixy_4 + D#139
  # DEBUG pix2 => 0B
  # DEBUG i_stride => stride2y_63
  # DEBUG bS => &bS
  # DEBUG i_qp => _677
  # DEBUG b_chroma => 0
  # DEBUG pf_inter => D#141
  # DEBUG h => D#1
  # DEBUG h => D#1
  index_a_1012 = _677 + _728;
  # DEBUG index_a => index_a_1012
  _1013 = index_a_1012 + 12;
  _1014 = i_alpha_table[_1013];
  alpha_1015 = (const int) _1014;
  # DEBUG alpha => alpha_1015
  _1017 = _677 + _729;
  _1018 = _1017 + 12;
  _1019 = i_beta_table[_1018];
  beta_1020 = (const int) _1019;
  # DEBUG beta => beta_1020
  _1021 = alpha_1015 == 0;
  _1022 = beta_1020 == 0;
  _1023 = _1021 | _1022;
  if (_1023 != 0)
    goto <bb 151>;
  else
    goto <bb 150>;

  <bb 150>:
  _674 = h_43(D)->loopf.deblock_v_luma;
  _1024 = MEM[(uint8_t *)&bS];
  _1025 = (int) _1024;
  _1026 = i_tc0_table[_1013][_1025];
  tc[0] = _1026;
  _1031 = MEM[(uint8_t *)&bS + 1B];
  _1032 = (int) _1031;
  _1033 = i_tc0_table[_1013][_1032];
  tc[1] = _1033;
  _1037 = MEM[(uint8_t *)&bS + 2B];
  _1038 = (int) _1037;
  _1039 = i_tc0_table[_1013][_1038];
  tc[2] = _1039;
  _1043 = MEM[(uint8_t *)&bS + 3B];
  _1044 = (int) _1043;
  _1045 = i_tc0_table[_1013][_1044];
  tc[3] = _1045;
  _679 = stride2y_63 * prephitmp_1581;
  _680 = (sizetype) _679;
  _681 = pixy_4 + _680;
  _674 (_681, stride2y_63, alpha_1015, beta_1020, &tc);
  tc ={v} {CLOBBER};
  goto <bb 152>;

  <bb 151>:
  tc ={v} {CLOBBER};

  <bb 152>:
  # DEBUG pix1 => NULL
  # DEBUG pix2 => NULL
  # DEBUG i_stride => NULL
  # DEBUG bS => NULL
  # DEBUG i_qp => NULL
  # DEBUG b_chroma => NULL
  # DEBUG pf_inter => NULL
  # DEBUG index_a => NULL
  # DEBUG alpha => NULL
  # DEBUG beta => NULL
  _683 = y_1220 & 1;
  if (_683 == 0)
    goto <bb 153>;
  else
    goto <bb 148>;

  <bb 153>:
  _684 = h_43(D)->chroma_qp_table;
  _685 = (sizetype) _93;
  _686 = _684 + _685;
  _687 = *_686;
  _688 = (int) _687;
  _689 = (sizetype) _672;
  _690 = _684 + _689;
  _691 = *_690;
  _692 = (int) _691;
  _693 = _688 + _692;
  _694 = _693 + 1;
  i_qpc_695 = _694 >> 1;
  # DEBUG i_qpc => i_qpc_695
  # DEBUG D#138 => h_43(D)->loopf.deblock_v_chroma
  # DEBUG D#137 => y_1220 * 2
  # DEBUG D#136 => stride2uv_66 * D#137
  # DEBUG D#135 => (sizetype) D#136
  _730 = MEM[(int *)h_43(D) + 4704B];
  # DEBUG D#1 => h_43(D)
  _731 = MEM[(int *)h_43(D) + 4708B];
  # DEBUG D#1 => h_43(D)
  # DEBUG pix1 => pixu_5 + D#135
  # DEBUG pix2 => pixv_6 + D#135
  # DEBUG i_stride => stride2uv_66
  # DEBUG bS => &bS
  # DEBUG i_qp => i_qpc_695
  # DEBUG b_chroma => 1
  # DEBUG pf_inter => D#138
  # DEBUG h => D#1
  # DEBUG h => D#1
  index_a_1049 = i_qpc_695 + _730;
  # DEBUG index_a => index_a_1049
  _1050 = index_a_1049 + 12;
  _1051 = i_alpha_table[_1050];
  alpha_1052 = (const int) _1051;
  # DEBUG alpha => alpha_1052
  _1054 = i_qpc_695 + _731;
  _1055 = _1054 + 12;
  _1056 = i_beta_table[_1055];
  beta_1057 = (const int) _1056;
  # DEBUG beta => beta_1057
  _1058 = alpha_1052 == 0;
  _1059 = beta_1057 == 0;
  _1060 = _1058 | _1059;
  if (_1060 != 0)
    goto <bb 155>;
  else
    goto <bb 154>;

  <bb 154>:
  _696 = h_43(D)->loopf.deblock_v_chroma;
  _697 = y_1220 * 2;
  _698 = stride2uv_66 * _697;
  _699 = (sizetype) _698;
  _1061 = MEM[(uint8_t *)&bS];
  _1062 = (int) _1061;
  _1063 = i_tc0_table[_1050][_1062];
  _1064 = (unsigned char) _1063;
  _1066 = _1064 + 1;
  _1067 = (signed char) _1066;
  tc[0] = _1067;
  _1068 = MEM[(uint8_t *)&bS + 1B];
  _1069 = (int) _1068;
  _1070 = i_tc0_table[_1050][_1069];
  _1071 = (unsigned char) _1070;
  _1072 = _1071 + 1;
  _1073 = (signed char) _1072;
  tc[1] = _1073;
  _1074 = MEM[(uint8_t *)&bS + 2B];
  _1075 = (int) _1074;
  _1076 = i_tc0_table[_1050][_1075];
  _1077 = (unsigned char) _1076;
  _1078 = _1077 + 1;
  _1079 = (signed char) _1078;
  tc[2] = _1079;
  _1080 = MEM[(uint8_t *)&bS + 3B];
  _1081 = (int) _1080;
  _1082 = i_tc0_table[_1050][_1081];
  _1083 = (unsigned char) _1082;
  _1084 = _1083 + 1;
  _1085 = (signed char) _1084;
  tc[3] = _1085;
  _701 = pixu_5 + _699;
  _696 (_701, stride2uv_66, alpha_1052, beta_1057, &tc);
  _700 = pixv_6 + _699;
  _696 (_700, stride2uv_66, alpha_1052, beta_1057, &tc);
  tc ={v} {CLOBBER};
  goto <bb 156>;

  <bb 155>:
  tc ={v} {CLOBBER};

  <bb 156>:
  y_704 = y_1220 + pretmp_1579;
  # DEBUG i_edge => y_704
  # DEBUG i_edge => y_704
  if (i_edge_end_3 > y_704)
    goto <bb 157>;
  else
    goto <bb 85>;

  <bb 157>:
  goto <bb 127>;

  <bb 158>:
  pretmp_1514 = h_43(D)->mb.i_mb_stride;
  pretmp_1520 = h_43(D)->fdec;
  goto <bb 7>;

  <bb 159>:
  # mb_y_562 = PHI <mb_y_26(86), mb_y_71(D)(4)>
  _711 = h_43(D)->pps;
  _712 = _711->b_cabac;
  if (_712 == 0)
    goto <bb 161>;
  else
    goto <bb 160>;

  <bb 160>:
  goto <bb 164>;

  <bb 161>:
  pretmp_1508 = _711->b_transform_8x8_mode;

  <bb 162>:
  # mb_y_808 = PHI <mb_y_562(161), mb_y_71(D)(165)>
  # prephitmp_1509 = PHI <pretmp_1508(161), _69(165)>
  if (prephitmp_1509 != 0)
    goto <bb 163>;
  else
    goto <bb 160>;

  <bb 163>:
  _714 = h_43(D)->mb.nnz_backup;
  munge_cavlc_nnz (h_43(D), mb_y_808, _714, restore_cavlc_nnz_row);

  <bb 164>:
  return;

  <bb 165>:
  # DEBUG mb_x => 0
  # DEBUG mb_y => mb_y_71(D)
  _486 = h_43(D)->sps;
  _64 = _486->i_mb_width;
  if (_64 > 0)
    goto <bb 6>;
  else
    goto <bb 162>;

  <bb 166>:
  # DEBUG mb_x => 0
  # DEBUG mb_y => mb_y_71(D)
  _880 = h_43(D)->sps;
  _882 = _880->i_mb_width;
  if (_882 > 0)
    goto <bb 6>;
  else
    goto <bb 160>;

}



;; Function x264_frame_deblock (x264_frame_deblock, funcdef_no=141, decl_uid=4916, cgraph_uid=141, symbol_order=187)


Analyzing loop at common/frame.c:795
common/frame.c:795:5: note: ===== analyze_loop_nest =====
common/frame.c:795:5: note: === vect_analyze_loop_form ===
split exit edge.
common/frame.c:795:5: note: === get_loop_niters ===
common/frame.c:795:5: note: not vectorized: number of iterations cannot be computed.
common/frame.c:795:5: note: bad loop form.
common/frame.c:792:6: note: vectorized 0 loops in function.
x264_frame_deblock (struct x264_t * h)
{
  int mb_y;
  struct x264_sps_t * _5;
  int _6;
  int _8;
  int _9;
  struct x264_sps_t * _13;
  int _14;

  <bb 2>:
  # DEBUG mb_y => 0
  # DEBUG mb_y => 0
  _13 = h_4(D)->sps;
  _14 = _13->i_mb_height;
  if (_14 > 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # mb_y_15 = PHI <0(4), mb_y_10(6)>
  # DEBUG mb_y => mb_y_15
  x264_frame_deblock_row (h_4(D), mb_y_15);
  _8 = h_4(D)->sh.b_mbaff;
  _9 = _8 + 1;
  mb_y_10 = _9 + mb_y_15;
  # DEBUG mb_y => mb_y_10
  # DEBUG mb_y => mb_y_10
  _5 = h_4(D)->sps;
  _6 = _5->i_mb_height;
  if (_6 > mb_y_10)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 3>;

  <bb 6>:
  goto <bb 5>;

}



;; Function x264_frame_cond_wait (x264_frame_cond_wait, funcdef_no=144, decl_uid=4936, cgraph_uid=144, symbol_order=190)


Analyzing loop at common/frame.c:889
common/frame.c:889:10: note: ===== analyze_loop_nest =====
common/frame.c:889:10: note: === vect_analyze_loop_form ===
split exit edge.
common/frame.c:889:10: note: === get_loop_niters ===
common/frame.c:889:10: note: not vectorized: number of iterations cannot be computed.
common/frame.c:889:10: note: bad loop form.
common/frame.c:886:6: note: vectorized 0 loops in function.
x264_frame_cond_wait (struct x264_frame_t * frame, int i_lines_completed)
{
  union pthread_cond_t * pretmp_1;
  union pthread_mutex_t * _3;
  int _6;
  int _12;

  <bb 2>:
  _3 = &frame_2(D)->mutex;
  pthread_mutex_lock (_3);
  _12 = frame_2(D)->i_lines_completed;
  if (i_lines_completed_7(D) > _12)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  pthread_mutex_unlock (_3);
  return;

  <bb 4>:
  pretmp_1 = &frame_2(D)->cv;

  <bb 5>:
  pthread_cond_wait (pretmp_1, _3);
  _6 = frame_2(D)->i_lines_completed;
  if (_6 < i_lines_completed_7(D))
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 3>;

  <bb 6>:
  goto <bb 5>;

}



;; Function x264_frame_push (x264_frame_push, funcdef_no=145, decl_uid=4939, cgraph_uid=145, symbol_order=191)


Analyzing loop at common/frame.c:899
common/frame.c:899:10: note: ===== analyze_loop_nest =====
common/frame.c:899:10: note: === vect_analyze_loop_form ===
common/frame.c:899:10: note: === get_loop_niters ===
common/frame.c:899:10: note: not vectorized: number of iterations cannot be computed.
common/frame.c:899:10: note: bad loop form.
common/frame.c:896:6: note: vectorized 0 loops in function.
x264_frame_push (struct x264_frame_t * * list, struct x264_frame_t * frame)
{
  int i;
  long unsigned int _2;
  long unsigned int _3;
  struct x264_frame_t * * _5;
  struct x264_frame_t * _7;
  struct x264_frame_t * * _14;
  struct x264_frame_t * _15;
  struct x264_frame_t * * _17;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  _15 = *list_4(D);
  if (_15 != 0B)
    goto <bb 3>;
  else
    goto <bb 7>;

  <bb 3>:

  <bb 4>:
  # i_16 = PHI <0(3), i_8(5)>
  # DEBUG i => i_16
  i_8 = i_16 + 1;
  # DEBUG i => i_8
  # DEBUG i => i_8
  _2 = (long unsigned int) i_8;
  _3 = _2 * 8;
  _5 = list_4(D) + _3;
  _7 = *_5;
  if (_7 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  goto <bb 4>;

  <bb 6>:
  # _14 = PHI <_5(4)>

  <bb 7>:
  # _17 = PHI <_14(6), list_4(D)(2)>
  *_17 = frame_9(D);
  return;

}



;; Function x264_frame_pop (x264_frame_pop, funcdef_no=146, decl_uid=4941, cgraph_uid=146, symbol_order=192)


Analyzing loop at common/frame.c:908
common/frame.c:908:10: note: ===== analyze_loop_nest =====
common/frame.c:908:10: note: === vect_analyze_loop_form ===
common/frame.c:908:10: note: === get_loop_niters ===
common/frame.c:908:10: note: not vectorized: number of iterations cannot be computed.
common/frame.c:908:10: note: bad loop form.
common/frame.c:903:15: note: vectorized 0 loops in function.
x264_frame_pop (struct x264_frame_t * * list)
{
  int i;
  struct x264_frame_t * frame;
  struct x264_frame_t * _4;
  sizetype _5;
  sizetype _6;
  sizetype _7;
  struct x264_frame_t * * _8;
  struct x264_frame_t * _9;
  struct x264_frame_t * * _13;
  struct x264_frame_t * _22;
  sizetype _28;
  long unsigned int pretmp_30;
  long unsigned int prephitmp_31;

  <bb 2>:
  # DEBUG i => 0
  _4 = *list_3(D);
  if (_4 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG i => 0
  _22 = MEM[(struct x264_frame_t * *)list_3(D) + 8B];
  if (_22 != 0B)
    goto <bb 5>;
  else
    goto <bb 9>;

  <bb 4>:
  # DEBUG D#4 => list_3(D)
  # DEBUG D#5 => D#4
  # DEBUG list => D#5
  __assert_fail ("list[0]", "common/frame.c", 907, &__PRETTY_FUNCTION__);

  <bb 5>:

  <bb 6>:
  # i_23 = PHI <0(5), i_10(7)>
  # DEBUG i => i_23
  i_10 = i_23 + 1;
  # DEBUG i => i_10
  # DEBUG i => i_10
  _5 = (sizetype) i_10;
  _6 = _5 + 1;
  _7 = _6 * 8;
  _8 = list_3(D) + _7;
  _9 = *_8;
  if (_9 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  # _28 = PHI <_5(6)>
  pretmp_30 = _28 * 8;

  <bb 9>:
  # prephitmp_31 = PHI <pretmp_30(8), 0(3)>
  _13 = list_3(D) + prephitmp_31;
  frame_14 = *_13;
  # DEBUG frame => frame_14
  *_13 = 0B;
  return frame_14;

}



;; Function x264_frame_unshift (x264_frame_unshift, funcdef_no=147, decl_uid=4944, cgraph_uid=147, symbol_order=193)


Analyzing loop at common/frame.c:918
common/frame.c:918:10: note: ===== analyze_loop_nest =====
common/frame.c:918:10: note: === vect_analyze_loop_form ===
common/frame.c:918:10: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [i_36, + , -1](no_overflow) != 0
  bounds on difference of bases: -2147483646 ... 0
Applying pattern match.pd:49, generic-match.c:4249
  result:
    # of iterations (unsigned int) i_36, bounded by 2147483646
common/frame.c:918:10: note: Symbolic number of iterations is (unsigned int) i_36 + 1
common/frame.c:918:10: note: === vect_analyze_data_refs ===
Creating dr for *_18
analyze_innermost: success.
	base_address: list_6(D) + (sizetype) ((sizetype) i_36 * 8)
	offset from base address: 0
	constant offset from base address: 0
	step: -8(OVF)
	aligned to: 128
	base_object: *list_6(D) + (sizetype) ((sizetype) i_36 * 8)
	Access function 0: {0B, +, 18446744073709551608}_2
Creating dr for *_16
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: list_6(D) + (sizetype) i_36 * 8
	offset from base address: 0
	constant offset from base address: 8
	step: -8(OVF)
	aligned to: 128
	base_object: *list_6(D) + (sizetype) i_36 * 8
	Access function 0: {8B, +, 18446744073709551608}_2
common/frame.c:918:10: note: got vectype for stmt: _19 = *_18;
vector(2) long unsigned int
common/frame.c:918:10: note: got vectype for stmt: *_16 = _19;
vector(2) long unsigned int
common/frame.c:918:10: note: === vect_analyze_scalar_cycles ===
common/frame.c:918:10: note: Analyze phi: .MEM_33 = PHI <.MEM_8(D)(8), .MEM_20(11)>

common/frame.c:918:10: note: Analyze phi: i_35 = PHI <i_36(8), i_12(11)>

common/frame.c:918:10: note: Access function of PHI: {i_36, +, -1}_2
common/frame.c:918:10: note: step: -1,  init: i_36
common/frame.c:918:10: note: Detected induction.
common/frame.c:918:10: note: === vect_pattern_recog ===
common/frame.c:918:10: note: vect_is_simple_use: operand _14
common/frame.c:918:10: note: def_stmt: _14 = _13 + 1;
common/frame.c:918:10: note: type of def: 3.
common/frame.c:918:10: note: vect_is_simple_use: operand _13
common/frame.c:918:10: note: def_stmt: _13 = (sizetype) i_35;
common/frame.c:918:10: note: type of def: 3.
common/frame.c:918:10: note: vect_is_simple_use: operand i_35
common/frame.c:918:10: note: def_stmt: i_35 = PHI <i_36(8), i_12(11)>
common/frame.c:918:10: note: type of def: 4.
common/frame.c:918:10: note: vect_is_simple_use: operand 8
common/frame.c:918:10: note: === vect_analyze_data_ref_accesses ===
common/frame.c:918:10: note: === vect_mark_stmts_to_be_vectorized ===
common/frame.c:918:10: note: init: phi relevant? .MEM_33 = PHI <.MEM_8(D)(8), .MEM_20(11)>
common/frame.c:918:10: note: init: phi relevant? i_35 = PHI <i_36(8), i_12(11)>
common/frame.c:918:10: note: init: stmt relevant? # DEBUG i => i_35
common/frame.c:918:10: note: init: stmt relevant? _13 = (sizetype) i_35;
common/frame.c:918:10: note: init: stmt relevant? _14 = _13 + 1;
common/frame.c:918:10: note: init: stmt relevant? _15 = _14 * 8;
common/frame.c:918:10: note: init: stmt relevant? _16 = list_6(D) + _15;
common/frame.c:918:10: note: init: stmt relevant? _17 = _13 * 8;
common/frame.c:918:10: note: init: stmt relevant? _18 = list_6(D) + _17;
common/frame.c:918:10: note: init: stmt relevant? _19 = *_18;
common/frame.c:918:10: note: init: stmt relevant? *_16 = _19;
common/frame.c:918:10: note: vec_stmt_relevant_p: stmt has vdefs.
common/frame.c:918:10: note: mark relevant 4, live 0.
common/frame.c:918:10: note: init: stmt relevant? # DEBUG i => i_35
common/frame.c:918:10: note: init: stmt relevant? i_12 = i_35 + -1;
common/frame.c:918:10: note: init: stmt relevant? # DEBUG i => i_12
common/frame.c:918:10: note: init: stmt relevant? if (i_35 != 0)
common/frame.c:918:10: note: worklist: examine stmt: *_16 = _19;
common/frame.c:918:10: note: vect_is_simple_use: operand _19
common/frame.c:918:10: note: def_stmt: _19 = *_18;
common/frame.c:918:10: note: type of def: 3.
common/frame.c:918:10: note: mark relevant 4, live 0.
common/frame.c:918:10: note: worklist: examine stmt: _19 = *_18;
common/frame.c:918:10: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _19 = *_18;
  stmt_b: *_16 = _19;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 18446744073709551608}_2)
  (chrec_b = {8B, +, 18446744073709551608}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [1 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [1 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 18446744073709551608}_2)
  (chrec_b = {0B, +, 18446744073709551608}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _19 = *_18;
  stmt_b: _19 = *_18;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 18446744073709551608}_2)
  (chrec_b = {0B, +, 18446744073709551608}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_16 = _19;
  stmt_b: *_16 = _19;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 18446744073709551608}_2)
  (chrec_b = {8B, +, 18446744073709551608}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/frame.c:918:10: note: dependence distance  = 1.
common/frame.c:918:10: note: dependence distance negative.
common/frame.c:918:10: note: === vect_determine_vectorization_factor ===
common/frame.c:918:10: note: ==> examining phi: .MEM_33 = PHI <.MEM_8(D)(8), .MEM_20(11)>

common/frame.c:918:10: note: ==> examining phi: i_35 = PHI <i_36(8), i_12(11)>

common/frame.c:918:10: note: ==> examining statement: # DEBUG i => i_35

common/frame.c:918:10: note: skip.
common/frame.c:918:10: note: ==> examining statement: _13 = (sizetype) i_35;

common/frame.c:918:10: note: skip.
common/frame.c:918:10: note: ==> examining statement: _14 = _13 + 1;

common/frame.c:918:10: note: skip.
common/frame.c:918:10: note: ==> examining statement: _15 = _14 * 8;

common/frame.c:918:10: note: skip.
common/frame.c:918:10: note: ==> examining statement: _16 = list_6(D) + _15;

common/frame.c:918:10: note: skip.
common/frame.c:918:10: note: ==> examining statement: _17 = _13 * 8;

common/frame.c:918:10: note: skip.
common/frame.c:918:10: note: ==> examining statement: _18 = list_6(D) + _17;

common/frame.c:918:10: note: skip.
common/frame.c:918:10: note: ==> examining statement: _19 = *_18;

common/frame.c:918:10: note: get vectype for scalar type:  struct x264_frame_t *
common/frame.c:918:10: note: vectype: vector(2) long unsigned int
common/frame.c:918:10: note: nunits = 2
common/frame.c:918:10: note: ==> examining statement: *_16 = _19;

common/frame.c:918:10: note: get vectype for scalar type:  struct x264_frame_t *
common/frame.c:918:10: note: vectype: vector(2) long unsigned int
common/frame.c:918:10: note: nunits = 2
common/frame.c:918:10: note: ==> examining statement: # DEBUG i => i_35

common/frame.c:918:10: note: skip.
common/frame.c:918:10: note: ==> examining statement: i_12 = i_35 + -1;

common/frame.c:918:10: note: skip.
common/frame.c:918:10: note: ==> examining statement: # DEBUG i => i_12

common/frame.c:918:10: note: skip.
common/frame.c:918:10: note: ==> examining statement: if (i_35 != 0)

common/frame.c:918:10: note: skip.
common/frame.c:918:10: note: vectorization factor = 2
common/frame.c:918:10: note: === vect_analyze_data_refs_alignment ===
common/frame.c:918:10: note: dependence distance  = 1.
common/frame.c:918:10: note: vect_compute_data_ref_alignment:
common/frame.c:918:10: note: can't force alignment of ref: *_18
common/frame.c:918:10: note: vect_compute_data_ref_alignment:
common/frame.c:918:10: note: can't force alignment of ref: *_16
common/frame.c:918:10: note: === vect_prune_runtime_alias_test_list ===
common/frame.c:918:10: note: === vect_enhance_data_refs_alignment ===
common/frame.c:918:10: note: Unknown misalignment, is_packed = 0
common/frame.c:918:10: note: Unknown misalignment, is_packed = 0
common/frame.c:918:10: note: vect_can_advance_ivs_p:
common/frame.c:918:10: note: Analyze phi: .MEM_33 = PHI <.MEM_8(D)(8), .MEM_20(11)>

common/frame.c:918:10: note: virtual phi. skip.
common/frame.c:918:10: note: Analyze phi: i_35 = PHI <i_36(8), i_12(11)>

common/frame.c:918:10: note: vect_model_load_cost: unaligned supported by hardware.
common/frame.c:918:10: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/frame.c:918:10: note: vect_model_store_cost: unaligned supported by hardware.
common/frame.c:918:10: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/frame.c:918:10: note: Setting misalignment to -1.
common/frame.c:918:10: note: Disable peeling, max peels reached: 1
common/frame.c:918:10: note: Vectorizing an unaligned access.
common/frame.c:918:10: note: Vectorizing an unaligned access.
common/frame.c:918:10: note: === vect_analyze_slp ===
common/frame.c:918:10: note: === vect_make_slp_decision ===
common/frame.c:918:10: note: === vect_detect_hybrid_slp ===
common/frame.c:918:10: note: === vect_analyze_loop_operations ===
common/frame.c:918:10: note: examining phi: .MEM_33 = PHI <.MEM_8(D)(8), .MEM_20(11)>

common/frame.c:918:10: note: examining phi: i_35 = PHI <i_36(8), i_12(11)>

common/frame.c:918:10: note: ==> examining statement: # DEBUG i => i_35
common/frame.c:918:10: note: irrelevant.
common/frame.c:918:10: note: ==> examining statement: _13 = (sizetype) i_35;
common/frame.c:918:10: note: irrelevant.
common/frame.c:918:10: note: ==> examining statement: _14 = _13 + 1;
common/frame.c:918:10: note: irrelevant.
common/frame.c:918:10: note: ==> examining statement: _15 = _14 * 8;
common/frame.c:918:10: note: irrelevant.
common/frame.c:918:10: note: ==> examining statement: _16 = list_6(D) + _15;
common/frame.c:918:10: note: irrelevant.
common/frame.c:918:10: note: ==> examining statement: _17 = _13 * 8;
common/frame.c:918:10: note: irrelevant.
common/frame.c:918:10: note: ==> examining statement: _18 = list_6(D) + _17;
common/frame.c:918:10: note: irrelevant.
common/frame.c:918:10: note: ==> examining statement: _19 = *_18;
common/frame.c:918:10: note: vect_is_simple_use: operand *_18
common/frame.c:918:10: note: not ssa-name.
common/frame.c:918:10: note: use not simple.
common/frame.c:918:10: note: vect_is_simple_use: operand *_18
common/frame.c:918:10: note: not ssa-name.
common/frame.c:918:10: note: use not simple.
common/frame.c:918:10: note: vect_model_load_cost: unaligned supported by hardware.
common/frame.c:918:10: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/frame.c:918:10: note: ==> examining statement: *_16 = _19;
common/frame.c:918:10: note: vect_is_simple_use: operand _19
common/frame.c:918:10: note: def_stmt: _19 = *_18;
common/frame.c:918:10: note: type of def: 3.
common/frame.c:918:10: note: vect_model_store_cost: unaligned supported by hardware.
common/frame.c:918:10: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/frame.c:918:10: note: ==> examining statement: # DEBUG i => i_35
common/frame.c:918:10: note: irrelevant.
common/frame.c:918:10: note: ==> examining statement: i_12 = i_35 + -1;
common/frame.c:918:10: note: irrelevant.
common/frame.c:918:10: note: ==> examining statement: # DEBUG i => i_12
common/frame.c:918:10: note: irrelevant.
common/frame.c:918:10: note: ==> examining statement: if (i_35 != 0)
common/frame.c:918:10: note: irrelevant.
common/frame.c:918:10: note: === vect_update_slp_costs_according_to_vf ===
common/frame.c:918:10: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
common/frame.c:918:10: note: Cost model analysis: 
  Vector inside of loop cost: 4
  Vector prologue cost: 6
  Vector epilogue cost: 2
  Scalar iteration cost: 2
  Scalar outside cost: 6
  Vector outside cost: 8
  prologue iterations: 0
  epilogue iterations: 1
common/frame.c:918:10: note: cost model: the vector iteration cost = 4 divided by the scalar iteration cost = 2 is greater or equal to the vectorization factor = 2.
common/frame.c:918:10: note: not vectorized: vectorization not profitable.
common/frame.c:918:10: note: not vectorized: vector version will never be profitable.
common/frame.c:918:10: note: bad operation or unsupported loop bound.

Analyzing loop at common/frame.c:917
common/frame.c:917:10: note: ===== analyze_loop_nest =====
common/frame.c:917:10: note: === vect_analyze_loop_form ===
common/frame.c:917:10: note: === get_loop_niters ===
common/frame.c:917:10: note: not vectorized: number of iterations cannot be computed.
common/frame.c:917:10: note: bad loop form.
common/frame.c:914:6: note: vectorized 0 loops in function.
x264_frame_unshift (struct x264_frame_t * * list, struct x264_frame_t * frame)
{
  int i;
  long unsigned int _4;
  long unsigned int _5;
  struct x264_frame_t * * _7;
  struct x264_frame_t * _9;
  sizetype _13;
  sizetype _14;
  sizetype _15;
  struct x264_frame_t * * _16;
  long unsigned int _17;
  struct x264_frame_t * * _18;
  struct x264_frame_t * _19;
  struct x264_frame_t * _31;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  _31 = *list_6(D);
  if (_31 != 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  *list_6(D) = frame_21(D);
  return;

  <bb 4>:

  <bb 5>:
  # i_32 = PHI <0(4), i_10(6)>
  # DEBUG i => i_32
  i_10 = i_32 + 1;
  # DEBUG i => i_10
  # DEBUG i => i_10
  _4 = (long unsigned int) i_10;
  _5 = _4 * 8;
  _7 = list_6(D) + _5;
  _9 = *_7;
  if (_9 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  goto <bb 5>;

  <bb 7>:
  # i_37 = PHI <i_10(5)>
  # i_36 = PHI <i_32(5)>
  # DEBUG i => i_37
  # DEBUG i => i_36
  if (i_37 != 0)
    goto <bb 8>;
  else
    goto <bb 3>;

  <bb 8>:

  <bb 9>:
  # i_35 = PHI <i_36(8), i_12(11)>
  # DEBUG i => i_35
  _13 = (sizetype) i_35;
  _14 = _13 + 1;
  _15 = _14 * 8;
  _16 = list_6(D) + _15;
  _17 = _13 * 8;
  _18 = list_6(D) + _17;
  _19 = *_18;
  *_16 = _19;
  # DEBUG i => i_35
  i_12 = i_35 + -1;
  # DEBUG i => i_12
  if (i_35 != 0)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 3>;

  <bb 11>:
  goto <bb 9>;

}



;; Function x264_frame_shift (x264_frame_shift, funcdef_no=148, decl_uid=4946, cgraph_uid=148, symbol_order=194)


Analyzing loop at common/frame.c:927
common/frame.c:927:5: note: ===== analyze_loop_nest =====
common/frame.c:927:5: note: === vect_analyze_loop_form ===
common/frame.c:927:5: note: === get_loop_niters ===
common/frame.c:927:5: note: not vectorized: number of iterations cannot be computed.
common/frame.c:927:5: note: bad loop form.
common/frame.c:923:15: note: vectorized 0 loops in function.
x264_frame_shift (struct x264_frame_t * * list)
{
  static const char __PRETTY_FUNCTION__[17] = "x264_frame_shift";
  int i;
  struct x264_frame_t * frame;
  long unsigned int _6;
  long unsigned int _7;
  struct x264_frame_t * * _8;
  struct x264_frame_t * _9;
  sizetype _10;
  sizetype _11;
  struct x264_frame_t * * _12;
  struct x264_frame_t * _13;
  long unsigned int _26;
  struct x264_frame_t * * _27;

  <bb 2>:
  frame_5 = *list_4(D);
  # DEBUG frame => frame_5
  # DEBUG i => 0
  # DEBUG i => 0
  if (frame_5 != 0B)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 3>:

  <bb 4>:
  # i_23 = PHI <0(3), i_15(5)>
  # _26 = PHI <0(3), _6(5)>
  # _27 = PHI <list_4(D)(3), _8(5)>
  # DEBUG i => i_23
  _10 = _26 + 1;
  _11 = _10 * 8;
  _12 = list_4(D) + _11;
  _13 = *_12;
  *_27 = _13;
  i_15 = i_23 + 1;
  # DEBUG i => i_15
  # DEBUG i => i_15
  _6 = (long unsigned int) i_15;
  _7 = _6 * 8;
  _8 = list_4(D) + _7;
  _9 = *_8;
  if (_9 != 0B)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  goto <bb 4>;

  <bb 6>:
  __assert_fail ("frame", "common/frame.c", 929, &__PRETTY_FUNCTION__);

  <bb 7>:
  return frame_5;

}



;; Function x264_frame_push_unused (x264_frame_push_unused, funcdef_no=149, decl_uid=4949, cgraph_uid=149, symbol_order=195)


Analyzing loop at common/frame.c:899
common/frame.c:899:10: note: ===== analyze_loop_nest =====
common/frame.c:899:10: note: === vect_analyze_loop_form ===
common/frame.c:899:10: note: === get_loop_niters ===
common/frame.c:899:10: note: not vectorized: number of iterations cannot be computed.
common/frame.c:899:10: note: bad loop form.
common/frame.c:933:6: note: vectorized 0 loops in function.
x264_frame_push_unused (struct x264_t * h, struct x264_frame_t * frame)
{
  int i;
  static const char __PRETTY_FUNCTION__[23] = "x264_frame_push_unused";
  int _4;
  int _5;
  struct x264_frame_t *[340] * _8;
  struct x264_frame_t * _10;
  long unsigned int _15;
  long unsigned int _16;
  struct x264_frame_t * * _17;
  struct x264_frame_t * _18;
  struct x264_frame_t * * _22;
  struct x264_frame_t * _23;
  struct x264_frame_t * * _25;

  <bb 2>:
  _4 = frame_3(D)->i_reference_count;
  if (_4 <= 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  __assert_fail ("frame->i_reference_count > 0", "common/frame.c", 935, &__PRETTY_FUNCTION__);

  <bb 4>:
  _5 = _4 + -1;
  frame_3(D)->i_reference_count = _5;
  if (_5 == 0)
    goto <bb 5>;
  else
    goto <bb 11>;

  <bb 5>:
  _8 = &h_7(D)->frames.unused;
  # DEBUG list => _8
  # DEBUG frame => frame_3(D)
  # DEBUG i => 0
  # DEBUG i => 0
  _23 = MEM[(struct x264_frame_t * *)h_7(D) + 6304B];
  if (_23 != 0B)
    goto <bb 6>;
  else
    goto <bb 10>;

  <bb 6>:

  <bb 7>:
  # i_24 = PHI <0(6), i_14(8)>
  # DEBUG i => i_24
  i_14 = i_24 + 1;
  # DEBUG i => i_14
  # DEBUG i => i_14
  _15 = (long unsigned int) i_14;
  _16 = _15 * 8;
  _17 = _8 + _16;
  _18 = *_17;
  if (_18 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  goto <bb 7>;

  <bb 9>:
  # _22 = PHI <_17(7)>

  <bb 10>:
  # _25 = PHI <_22(9), _8(5)>
  *_25 = frame_3(D);

  <bb 11>:
  _10 = h_7(D)->frames.unused[339];
  if (_10 != 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  __assert_fail ("h->frames.unused[ sizeof(h->frames.unused) / sizeof(*h->frames.unused) - 1 ] == NULL", "common/frame.c", 939, &__PRETTY_FUNCTION__);

  <bb 13>:
  return;

}



;; Function x264_frame_sort (x264_frame_sort, funcdef_no=151, decl_uid=4954, cgraph_uid=151, symbol_order=197)


Analyzing loop at common/frame.c:959
common/frame.c:959:14: note: ===== analyze_loop_nest =====
common/frame.c:959:14: note: === vect_analyze_loop_form ===
common/frame.c:959:14: note: ===== analyze_loop_nest_1 =====
common/frame.c:959:14: note: === vect_analyze_loop_form ===
common/frame.c:959:14: note: not vectorized: control flow in loop.
common/frame.c:959:14: note: bad inner-loop form.
common/frame.c:959:14: note: not vectorized: Bad inner loop.
common/frame.c:959:14: note: bad loop form.

Analyzing loop at common/frame.c:960
common/frame.c:960:9: note: ===== analyze_loop_nest =====
common/frame.c:960:9: note: === vect_analyze_loop_form ===
common/frame.c:960:9: note: not vectorized: control flow in loop.
common/frame.c:960:9: note: bad loop form.
common/frame.c:955:6: note: vectorized 0 loops in function.
x264_frame_sort (struct x264_frame_t * * list, int b_dts)
{
  int swap;
  int dtime;
  int dtype;
  int b_ok;
  int i;
  sizetype _9;
  sizetype _10;
  sizetype _11;
  struct x264_frame_t * * _13;
  struct x264_frame_t * _14;
  long unsigned int _15;
  struct x264_frame_t * * _16;
  struct x264_frame_t * _17;
  int _18;
  int _19;
  int _21;
  int _22;
  _Bool _25;
  _Bool _26;
  _Bool _27;
  struct x264_frame_t * _39;
  sizetype _45;
  struct x264_frame_t * * _46;
  struct x264_frame_t * _47;
  struct x264_frame_t * * pretmp_53;

  <bb 2>:
  pretmp_53 = list_12(D) + 8;

  <bb 3>:
  # DEBUG b_ok => 1
  # DEBUG i => 0
  # DEBUG b_ok => 1
  # DEBUG i => 0
  _39 = MEM[(struct x264_frame_t * *)list_12(D) + 8B];
  if (_39 != 0B)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:
  return;

  <bb 5>:

  <bb 6>:
  # i_40 = PHI <0(5), i_32(12)>
  # b_ok_41 = PHI <1(5), b_ok_2(12)>
  # _45 = PHI <0(5), _9(12)>
  # _46 = PHI <pretmp_53(5), _13(12)>
  # _47 = PHI <_39(5), _14(12)>
  # DEBUG b_ok => b_ok_41
  # DEBUG i => i_40
  _15 = _45 * 8;
  _16 = list_12(D) + _15;
  _17 = *_16;
  # DEBUG D#224 => _17->i_type
  # DEBUG D#223 => _47->i_type
  # DEBUG dtype => D#224 - D#223
  _21 = _17->i_frame;
  _22 = _47->i_frame;
  dtime_23 = _21 - _22;
  # DEBUG dtime => dtime_23
  if (b_dts_24(D) != 0)
    goto <bb 7>;
  else
    goto <bb 9>;

  <bb 7>:
  _18 = _17->i_type;
  _19 = _47->i_type;
  dtype_20 = _18 - _19;
  if (dtype_20 > 0)
    goto <bb 10>;
  else
    goto <bb 8>;

  <bb 8>:
  _25 = dtype_20 == 0;
  _26 = dtime_23 > 0;
  _27 = _25 & _26;
  if (_27 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 9>:
  # DEBUG D#222 => dtime_23 > 0
  # DEBUG swap => (int) D#222
  if (dtime_23 > 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  # DEBUG swap => NULL
  # DEBUG t => _17
  *_16 = _47;
  *_46 = _17;
  # DEBUG b_ok => 0

  <bb 11>:
  # b_ok_2 = PHI <b_ok_41(9), 0(10), b_ok_41(8)>
  # DEBUG b_ok => b_ok_2
  i_32 = i_40 + 1;
  # DEBUG i => i_32
  # DEBUG b_ok => b_ok_2
  # DEBUG i => i_32
  _9 = (sizetype) i_32;
  _10 = _9 + 1;
  _11 = _10 * 8;
  _13 = list_12(D) + _11;
  _14 = *_13;
  if (_14 != 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  goto <bb 6>;

  <bb 13>:
  # b_ok_38 = PHI <b_ok_2(11)>
  if (b_ok_38 == 0)
    goto <bb 14>;
  else
    goto <bb 4>;

  <bb 14>:
  goto <bb 3>;

}


