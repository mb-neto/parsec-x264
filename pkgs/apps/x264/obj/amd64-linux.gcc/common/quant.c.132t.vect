
;; Function quant_8x8 (quant_8x8, funcdef_no=115, decl_uid=5883, cgraph_uid=115, symbol_order=158)


Analyzing loop at common/quant.c:44
common/quant.c:44:5: note: ===== analyze_loop_nest =====
common/quant.c:44:5: note: === vect_analyze_loop_form ===
common/quant.c:44:5: note: not vectorized: control flow in loop.
common/quant.c:44:5: note: bad loop form.
common/quant.c:41:13: note: vectorized 0 loops in function.
quant_8x8 (int16_t[8] * dct, uint16_t * mf, uint16_t * bias)
{
  int i;
  short int _6;
  long unsigned int _7;
  long unsigned int _8;
  uint16_t * _10;
  short unsigned int _11;
  int _12;
  int _13;
  int _14;
  uint16_t * _16;
  short unsigned int _17;
  int _18;
  int _19;
  int _20;
  short int _21;
  long unsigned int _23;
  long unsigned int _24;
  uint16_t * _25;
  short unsigned int _26;
  int _27;
  int _28;
  int _29;
  uint16_t * _30;
  short unsigned int _31;
  int _32;
  int _33;
  int _34;
  unsigned short _35;
  unsigned short _36;
  short int _37;
  short int cstore_38;
  unsigned int ivtmp_49;
  unsigned int ivtmp_50;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 3>:
  # i_41 = PHI <i_39(7), 0(2)>
  # ivtmp_50 = PHI <ivtmp_49(7), 64(2)>
  # DEBUG i => i_41
  _6 = *dct_5(D)[i_41];
  if (_6 > 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  _7 = (long unsigned int) i_41;
  _8 = _7 * 2;
  _10 = bias_9(D) + _8;
  _11 = *_10;
  _12 = (int) _11;
  _13 = (int) _6;
  _14 = _12 + _13;
  _16 = mf_15(D) + _8;
  _17 = *_16;
  _18 = (int) _17;
  _19 = _14 * _18;
  _20 = _19 >> 16;
  _21 = (short int) _20;
  goto <bb 6>;

  <bb 5>:
  _23 = (long unsigned int) i_41;
  _24 = _23 * 2;
  _25 = bias_9(D) + _24;
  _26 = *_25;
  _27 = (int) _26;
  _28 = (int) _6;
  _29 = _27 - _28;
  _30 = mf_15(D) + _24;
  _31 = *_30;
  _32 = (int) _31;
  _33 = _29 * _32;
  _34 = _33 >> 16;
  _35 = (unsigned short) _34;
  _36 = -_35;
  _37 = (short int) _36;

  <bb 6>:
  # cstore_38 = PHI <_21(4), _37(5)>
  *dct_5(D)[i_41] = cstore_38;
  i_39 = i_41 + 1;
  # DEBUG i => i_39
  # DEBUG i => i_39
  ivtmp_49 = ivtmp_50 - 1;
  if (ivtmp_49 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 3>;

  <bb 8>:
  return;

}



;; Function quant_4x4 (quant_4x4, funcdef_no=116, decl_uid=5892, cgraph_uid=116, symbol_order=159)


Analyzing loop at common/quant.c:51
common/quant.c:51:5: note: ===== analyze_loop_nest =====
common/quant.c:51:5: note: === vect_analyze_loop_form ===
common/quant.c:51:5: note: not vectorized: control flow in loop.
common/quant.c:51:5: note: bad loop form.
common/quant.c:48:13: note: vectorized 0 loops in function.
quant_4x4 (int16_t[4] * dct, uint16_t * mf, uint16_t * bias)
{
  int i;
  short int _6;
  long unsigned int _7;
  long unsigned int _8;
  uint16_t * _10;
  short unsigned int _11;
  int _12;
  int _13;
  int _14;
  uint16_t * _16;
  short unsigned int _17;
  int _18;
  int _19;
  int _20;
  short int _21;
  long unsigned int _23;
  long unsigned int _24;
  uint16_t * _25;
  short unsigned int _26;
  int _27;
  int _28;
  int _29;
  uint16_t * _30;
  short unsigned int _31;
  int _32;
  int _33;
  int _34;
  unsigned short _35;
  unsigned short _36;
  short int _37;
  short int cstore_38;
  unsigned int ivtmp_49;
  unsigned int ivtmp_50;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 3>:
  # i_41 = PHI <i_39(7), 0(2)>
  # ivtmp_50 = PHI <ivtmp_49(7), 16(2)>
  # DEBUG i => i_41
  _6 = *dct_5(D)[i_41];
  if (_6 > 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  _7 = (long unsigned int) i_41;
  _8 = _7 * 2;
  _10 = bias_9(D) + _8;
  _11 = *_10;
  _12 = (int) _11;
  _13 = (int) _6;
  _14 = _12 + _13;
  _16 = mf_15(D) + _8;
  _17 = *_16;
  _18 = (int) _17;
  _19 = _14 * _18;
  _20 = _19 >> 16;
  _21 = (short int) _20;
  goto <bb 6>;

  <bb 5>:
  _23 = (long unsigned int) i_41;
  _24 = _23 * 2;
  _25 = bias_9(D) + _24;
  _26 = *_25;
  _27 = (int) _26;
  _28 = (int) _6;
  _29 = _27 - _28;
  _30 = mf_15(D) + _24;
  _31 = *_30;
  _32 = (int) _31;
  _33 = _29 * _32;
  _34 = _33 >> 16;
  _35 = (unsigned short) _34;
  _36 = -_35;
  _37 = (short int) _36;

  <bb 6>:
  # cstore_38 = PHI <_21(4), _37(5)>
  *dct_5(D)[i_41] = cstore_38;
  i_39 = i_41 + 1;
  # DEBUG i => i_39
  # DEBUG i => i_39
  ivtmp_49 = ivtmp_50 - 1;
  if (ivtmp_49 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 3>;

  <bb 8>:
  return;

}



;; Function quant_4x4_dc (quant_4x4_dc, funcdef_no=117, decl_uid=5901, cgraph_uid=117, symbol_order=160)


Analyzing loop at common/quant.c:58
common/quant.c:58:5: note: ===== analyze_loop_nest =====
common/quant.c:58:5: note: === vect_analyze_loop_form ===
common/quant.c:58:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/quant.c:58:5: note: === vect_analyze_data_refs ===
Creating dr for *dct_5(D)[i_25]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: dct_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 2
	aligned to: 128
	base_object: *dct_5(D)
	Access function 0: {0, +, 1}_1
Creating dr for *dct_5(D)[i_25]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: dct_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 2
	aligned to: 128
	base_object: *dct_5(D)
	Access function 0: {0, +, 1}_1
common/quant.c:58:5: note: got vectype for stmt: _6 = *dct_5(D)[i_25];
vector(8) short int
common/quant.c:58:5: note: got vectype for stmt: *dct_5(D)[i_25] = cstore_22;
vector(8) short int
common/quant.c:58:5: note: === vect_analyze_scalar_cycles ===
common/quant.c:58:5: note: Analyze phi: i_25 = PHI <i_23(4), 0(2)>

common/quant.c:58:5: note: Access function of PHI: {0, +, 1}_1
common/quant.c:58:5: note: step: 1,  init: 0
common/quant.c:58:5: note: Detected induction.
common/quant.c:58:5: note: Analyze phi: .MEM_24 = PHI <.MEM_14(4), .MEM_4(D)(2)>

common/quant.c:58:5: note: Analyze phi: ivtmp_2 = PHI <ivtmp_1(4), 16(2)>

common/quant.c:58:5: note: Access function of PHI: {16, +, 4294967295}_1
common/quant.c:58:5: note: step: 4294967295,  init: 16
common/quant.c:58:5: note: Detected induction.
common/quant.c:58:5: note: === vect_pattern_recog ===
common/quant.c:58:5: note: vect_is_simple_use: operand _9
common/quant.c:58:5: note: def_stmt: _9 = _7 + bias_8(D);
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: vect_is_simple_use: operand _11
common/quant.c:58:5: note: def_stmt: _11 = _9 * mf_10(D);
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: vect_is_simple_use: operand mf_10(D)
common/quant.c:58:5: note: def_stmt: GIMPLE_NOP
common/quant.c:58:5: note: vect_is_simple_use: operand _17
common/quant.c:58:5: note: def_stmt: _17 = mf_10(D) * _16;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: === vect_analyze_data_ref_accesses ===
common/quant.c:58:5: note: === vect_mark_stmts_to_be_vectorized ===
common/quant.c:58:5: note: init: phi relevant? i_25 = PHI <i_23(4), 0(2)>
common/quant.c:58:5: note: init: phi relevant? .MEM_24 = PHI <.MEM_14(4), .MEM_4(D)(2)>
common/quant.c:58:5: note: init: phi relevant? ivtmp_2 = PHI <ivtmp_1(4), 16(2)>
common/quant.c:58:5: note: init: stmt relevant? # DEBUG i => NULL
common/quant.c:58:5: note: init: stmt relevant? _6 = *dct_5(D)[i_25];
common/quant.c:58:5: note: init: stmt relevant? _7 = (int) _6;
common/quant.c:58:5: note: init: stmt relevant? _9 = _7 + bias_8(D);
common/quant.c:58:5: note: init: stmt relevant? _11 = _9 * mf_10(D);
common/quant.c:58:5: note: init: stmt relevant? _12 = _11 >> 16;
common/quant.c:58:5: note: init: stmt relevant? _13 = (short int) _12;
common/quant.c:58:5: note: init: stmt relevant? _15 = (int) _6;
common/quant.c:58:5: note: init: stmt relevant? _16 = bias_8(D) - _15;
common/quant.c:58:5: note: init: stmt relevant? _17 = mf_10(D) * _16;
common/quant.c:58:5: note: init: stmt relevant? _18 = _17 >> 16;
common/quant.c:58:5: note: init: stmt relevant? _19 = (unsigned short) _18;
common/quant.c:58:5: note: init: stmt relevant? _20 = -_19;
common/quant.c:58:5: note: init: stmt relevant? _21 = (short int) _20;
common/quant.c:58:5: note: init: stmt relevant? cstore_22 = _6 > 0 ? _13 : _21;
common/quant.c:58:5: note: init: stmt relevant? *dct_5(D)[i_25] = cstore_22;
common/quant.c:58:5: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: init: stmt relevant? i_23 = i_25 + 1;
common/quant.c:58:5: note: init: stmt relevant? # DEBUG i => i_23
common/quant.c:58:5: note: init: stmt relevant? # DEBUG i => i_23
common/quant.c:58:5: note: init: stmt relevant? ivtmp_1 = ivtmp_2 - 1;
common/quant.c:58:5: note: init: stmt relevant? if (ivtmp_1 != 0)
common/quant.c:58:5: note: worklist: examine stmt: *dct_5(D)[i_25] = cstore_22;
common/quant.c:58:5: note: vect_is_simple_use: operand cstore_22
common/quant.c:58:5: note: def_stmt: cstore_22 = _6 > 0 ? _13 : _21;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: worklist: examine stmt: cstore_22 = _6 > 0 ? _13 : _21;
common/quant.c:58:5: note: vect_is_simple_use: operand _6
common/quant.c:58:5: note: def_stmt: _6 = *dct_5(D)[i_25];
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: vect_is_simple_use: operand _13
common/quant.c:58:5: note: def_stmt: _13 = (short int) _12;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: vect_is_simple_use: operand _21
common/quant.c:58:5: note: def_stmt: _21 = (short int) _20;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: worklist: examine stmt: _21 = (short int) _20;
common/quant.c:58:5: note: vect_is_simple_use: operand _20
common/quant.c:58:5: note: def_stmt: _20 = -_19;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: worklist: examine stmt: _20 = -_19;
common/quant.c:58:5: note: vect_is_simple_use: operand _19
common/quant.c:58:5: note: def_stmt: _19 = (unsigned short) _18;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: worklist: examine stmt: _19 = (unsigned short) _18;
common/quant.c:58:5: note: vect_is_simple_use: operand _18
common/quant.c:58:5: note: def_stmt: _18 = _17 >> 16;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: worklist: examine stmt: _18 = _17 >> 16;
common/quant.c:58:5: note: vect_is_simple_use: operand _17
common/quant.c:58:5: note: def_stmt: _17 = mf_10(D) * _16;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: worklist: examine stmt: _17 = mf_10(D) * _16;
common/quant.c:58:5: note: vect_is_simple_use: operand mf_10(D)
common/quant.c:58:5: note: def_stmt: GIMPLE_NOP
common/quant.c:58:5: note: vect_is_simple_use: operand _16
common/quant.c:58:5: note: def_stmt: _16 = bias_8(D) - _15;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: worklist: examine stmt: _16 = bias_8(D) - _15;
common/quant.c:58:5: note: vect_is_simple_use: operand bias_8(D)
common/quant.c:58:5: note: def_stmt: GIMPLE_NOP
common/quant.c:58:5: note: vect_is_simple_use: operand _15
common/quant.c:58:5: note: def_stmt: _15 = (int) _6;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: worklist: examine stmt: _15 = (int) _6;
common/quant.c:58:5: note: vect_is_simple_use: operand _6
common/quant.c:58:5: note: def_stmt: _6 = *dct_5(D)[i_25];
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: already marked relevant/live.
common/quant.c:58:5: note: worklist: examine stmt: _13 = (short int) _12;
common/quant.c:58:5: note: vect_is_simple_use: operand _12
common/quant.c:58:5: note: def_stmt: _12 = _11 >> 16;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: worklist: examine stmt: _12 = _11 >> 16;
common/quant.c:58:5: note: vect_is_simple_use: operand _11
common/quant.c:58:5: note: def_stmt: _11 = _9 * mf_10(D);
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: worklist: examine stmt: _11 = _9 * mf_10(D);
common/quant.c:58:5: note: vect_is_simple_use: operand _9
common/quant.c:58:5: note: def_stmt: _9 = _7 + bias_8(D);
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: vect_is_simple_use: operand mf_10(D)
common/quant.c:58:5: note: def_stmt: GIMPLE_NOP
common/quant.c:58:5: note: worklist: examine stmt: _9 = _7 + bias_8(D);
common/quant.c:58:5: note: vect_is_simple_use: operand _7
common/quant.c:58:5: note: def_stmt: _7 = (int) _6;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: vect_is_simple_use: operand bias_8(D)
common/quant.c:58:5: note: def_stmt: GIMPLE_NOP
common/quant.c:58:5: note: worklist: examine stmt: _7 = (int) _6;
common/quant.c:58:5: note: vect_is_simple_use: operand _6
common/quant.c:58:5: note: def_stmt: _6 = *dct_5(D)[i_25];
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: mark relevant 4, live 0.
common/quant.c:58:5: note: already marked relevant/live.
common/quant.c:58:5: note: worklist: examine stmt: _6 = *dct_5(D)[i_25];
common/quant.c:58:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _6 = *dct_5(D)[i_25];
  stmt_b: *dct_5(D)[i_25] = cstore_22;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *dct_5(D)[i_25];
  stmt_b: _6 = *dct_5(D)[i_25];
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *dct_5(D)[i_25] = cstore_22;
  stmt_b: *dct_5(D)[i_25] = cstore_22;
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/quant.c:58:5: note: dependence distance  = 0.
common/quant.c:58:5: note: dependence distance == 0 between *dct_5(D)[i_25] and *dct_5(D)[i_25]
common/quant.c:58:5: note: === vect_determine_vectorization_factor ===
common/quant.c:58:5: note: ==> examining phi: i_25 = PHI <i_23(4), 0(2)>

common/quant.c:58:5: note: ==> examining phi: .MEM_24 = PHI <.MEM_14(4), .MEM_4(D)(2)>

common/quant.c:58:5: note: ==> examining phi: ivtmp_2 = PHI <ivtmp_1(4), 16(2)>

common/quant.c:58:5: note: ==> examining statement: # DEBUG i => NULL

common/quant.c:58:5: note: skip.
common/quant.c:58:5: note: ==> examining statement: _6 = *dct_5(D)[i_25];

common/quant.c:58:5: note: get vectype for scalar type:  short int
common/quant.c:58:5: note: vectype: vector(8) short int
common/quant.c:58:5: note: nunits = 8
common/quant.c:58:5: note: ==> examining statement: _7 = (int) _6;

common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: get vectype for scalar type:  short int
common/quant.c:58:5: note: vectype: vector(8) short int
common/quant.c:58:5: note: nunits = 8
common/quant.c:58:5: note: ==> examining statement: _9 = _7 + bias_8(D);

common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: nunits = 4
common/quant.c:58:5: note: ==> examining statement: _11 = _9 * mf_10(D);

common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: nunits = 4
common/quant.c:58:5: note: ==> examining statement: _12 = _11 >> 16;

common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: nunits = 4
common/quant.c:58:5: note: ==> examining statement: _13 = (short int) _12;

common/quant.c:58:5: note: get vectype for scalar type:  short int
common/quant.c:58:5: note: vectype: vector(8) short int
common/quant.c:58:5: note: get vectype for scalar type:  short int
common/quant.c:58:5: note: vectype: vector(8) short int
common/quant.c:58:5: note: nunits = 8
common/quant.c:58:5: note: ==> examining statement: _15 = (int) _6;

common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: get vectype for scalar type:  short int
common/quant.c:58:5: note: vectype: vector(8) short int
common/quant.c:58:5: note: nunits = 8
common/quant.c:58:5: note: ==> examining statement: _16 = bias_8(D) - _15;

common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: nunits = 4
common/quant.c:58:5: note: ==> examining statement: _17 = mf_10(D) * _16;

common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: nunits = 4
common/quant.c:58:5: note: ==> examining statement: _18 = _17 >> 16;

common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: get vectype for scalar type:  int
common/quant.c:58:5: note: vectype: vector(4) int
common/quant.c:58:5: note: nunits = 4
common/quant.c:58:5: note: ==> examining statement: _19 = (unsigned short) _18;

common/quant.c:58:5: note: get vectype for scalar type:  unsigned short
common/quant.c:58:5: note: vectype: vector(8) unsigned short
common/quant.c:58:5: note: get vectype for scalar type:  unsigned short
common/quant.c:58:5: note: vectype: vector(8) unsigned short
common/quant.c:58:5: note: nunits = 8
common/quant.c:58:5: note: ==> examining statement: _20 = -_19;

common/quant.c:58:5: note: get vectype for scalar type:  unsigned short
common/quant.c:58:5: note: vectype: vector(8) unsigned short
common/quant.c:58:5: note: get vectype for scalar type:  unsigned short
common/quant.c:58:5: note: vectype: vector(8) unsigned short
common/quant.c:58:5: note: nunits = 8
common/quant.c:58:5: note: ==> examining statement: _21 = (short int) _20;

common/quant.c:58:5: note: get vectype for scalar type:  short int
common/quant.c:58:5: note: vectype: vector(8) short int
common/quant.c:58:5: note: get vectype for scalar type:  short int
common/quant.c:58:5: note: vectype: vector(8) short int
common/quant.c:58:5: note: nunits = 8
common/quant.c:58:5: note: ==> examining statement: cstore_22 = _6 > 0 ? _13 : _21;

common/quant.c:58:5: note: get vectype for scalar type:  short int
common/quant.c:58:5: note: vectype: vector(8) short int
common/quant.c:58:5: note: get vectype for scalar type:  short int
common/quant.c:58:5: note: vectype: vector(8) short int
common/quant.c:58:5: note: nunits = 8
common/quant.c:58:5: note: ==> examining statement: *dct_5(D)[i_25] = cstore_22;

common/quant.c:58:5: note: get vectype for scalar type:  int16_t
common/quant.c:58:5: note: vectype: vector(8) short int
common/quant.c:58:5: note: nunits = 8
common/quant.c:58:5: note: ==> examining statement: i_23 = i_25 + 1;

common/quant.c:58:5: note: skip.
common/quant.c:58:5: note: ==> examining statement: # DEBUG i => i_23

common/quant.c:58:5: note: skip.
common/quant.c:58:5: note: ==> examining statement: # DEBUG i => i_23

common/quant.c:58:5: note: skip.
common/quant.c:58:5: note: ==> examining statement: ivtmp_1 = ivtmp_2 - 1;

common/quant.c:58:5: note: skip.
common/quant.c:58:5: note: ==> examining statement: if (ivtmp_1 != 0)

common/quant.c:58:5: note: skip.
common/quant.c:58:5: note: vectorization factor = 8
common/quant.c:58:5: note: === vect_analyze_data_refs_alignment ===
common/quant.c:58:5: note: dependence distance  = 0.
common/quant.c:58:5: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *dct_5(D)[i_25] and *dct_5(D)[i_25]
common/quant.c:58:5: note: vect_compute_data_ref_alignment:
common/quant.c:58:5: note: can't force alignment of ref: *dct_5(D)[i_25]
common/quant.c:58:5: note: vect_compute_data_ref_alignment:
common/quant.c:58:5: note: can't force alignment of ref: *dct_5(D)[i_25]
common/quant.c:58:5: note: === vect_prune_runtime_alias_test_list ===
common/quant.c:58:5: note: === vect_enhance_data_refs_alignment ===
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:58:5: note: Unknown misalignment, is_packed = 0
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:58:5: note: Unknown misalignment, is_packed = 0
common/quant.c:58:5: note: vect_can_advance_ivs_p:
common/quant.c:58:5: note: Analyze phi: i_25 = PHI <i_23(4), 0(2)>

common/quant.c:58:5: note: Analyze phi: .MEM_24 = PHI <.MEM_14(4), .MEM_4(D)(2)>

common/quant.c:58:5: note: virtual phi. skip.
common/quant.c:58:5: note: Analyze phi: ivtmp_2 = PHI <ivtmp_1(4), 16(2)>

Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:58:5: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:58:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:58:5: note: vect_model_store_cost: unaligned supported by hardware.
common/quant.c:58:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/quant.c:58:5: note: Disable peeling, max peels reached: 7
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:58:5: note: Vectorizing an unaligned access.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:58:5: note: Vectorizing an unaligned access.
common/quant.c:58:5: note: === vect_analyze_slp ===
common/quant.c:58:5: note: === vect_make_slp_decision ===
common/quant.c:58:5: note: === vect_detect_hybrid_slp ===
common/quant.c:58:5: note: === vect_analyze_loop_operations ===
common/quant.c:58:5: note: examining phi: i_25 = PHI <i_23(4), 0(2)>

common/quant.c:58:5: note: examining phi: .MEM_24 = PHI <.MEM_14(4), .MEM_4(D)(2)>

common/quant.c:58:5: note: examining phi: ivtmp_2 = PHI <ivtmp_1(4), 16(2)>

common/quant.c:58:5: note: ==> examining statement: # DEBUG i => NULL
common/quant.c:58:5: note: irrelevant.
common/quant.c:58:5: note: ==> examining statement: _6 = *dct_5(D)[i_25];
common/quant.c:58:5: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:58:5: note: vect_is_simple_use: operand *dct_5(D)[i_25]
common/quant.c:58:5: note: not ssa-name.
common/quant.c:58:5: note: use not simple.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:58:5: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:58:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:58:5: note: ==> examining statement: _7 = (int) _6;
common/quant.c:58:5: note: vect_is_simple_use: operand _6
common/quant.c:58:5: note: def_stmt: _6 = *dct_5(D)[i_25];
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: === vectorizable_conversion ===
common/quant.c:58:5: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:58:5: note: ==> examining statement: _9 = _7 + bias_8(D);
common/quant.c:58:5: note: vect_is_simple_use: operand _7
common/quant.c:58:5: note: def_stmt: _7 = (int) _6;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: vect_is_simple_use: operand bias_8(D)
common/quant.c:58:5: note: def_stmt: GIMPLE_NOP
common/quant.c:58:5: note: === vectorizable_operation ===
common/quant.c:58:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 1 .
common/quant.c:58:5: note: ==> examining statement: _11 = _9 * mf_10(D);
common/quant.c:58:5: note: vect_is_simple_use: operand _9
common/quant.c:58:5: note: def_stmt: _9 = _7 + bias_8(D);
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: vect_is_simple_use: operand mf_10(D)
common/quant.c:58:5: note: def_stmt: GIMPLE_NOP
common/quant.c:58:5: note: === vectorizable_operation ===
common/quant.c:58:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 1 .
common/quant.c:58:5: note: ==> examining statement: _12 = _11 >> 16;
common/quant.c:58:5: note: vect_is_simple_use: operand _11
common/quant.c:58:5: note: def_stmt: _11 = _9 * mf_10(D);
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: vect_is_simple_use: operand 16
common/quant.c:58:5: note: vector/scalar shift/rotate found.
common/quant.c:58:5: note: === vectorizable_shift ===
common/quant.c:58:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 1 .
common/quant.c:58:5: note: ==> examining statement: _13 = (short int) _12;
common/quant.c:58:5: note: vect_is_simple_use: operand _12
common/quant.c:58:5: note: def_stmt: _12 = _11 >> 16;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: === vectorizable_conversion ===
common/quant.c:58:5: note: vect_model_promotion_demotion_cost: inside_cost = 1, prologue_cost = 0 .
common/quant.c:58:5: note: ==> examining statement: _15 = (int) _6;
common/quant.c:58:5: note: vect_is_simple_use: operand _6
common/quant.c:58:5: note: def_stmt: _6 = *dct_5(D)[i_25];
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: === vectorizable_conversion ===
common/quant.c:58:5: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:58:5: note: ==> examining statement: _16 = bias_8(D) - _15;
common/quant.c:58:5: note: vect_is_simple_use: operand bias_8(D)
common/quant.c:58:5: note: def_stmt: GIMPLE_NOP
common/quant.c:58:5: note: vect_is_simple_use: operand _15
common/quant.c:58:5: note: def_stmt: _15 = (int) _6;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: === vectorizable_operation ===
common/quant.c:58:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 1 .
common/quant.c:58:5: note: ==> examining statement: _17 = mf_10(D) * _16;
common/quant.c:58:5: note: vect_is_simple_use: operand mf_10(D)
common/quant.c:58:5: note: def_stmt: GIMPLE_NOP
common/quant.c:58:5: note: vect_is_simple_use: operand _16
common/quant.c:58:5: note: def_stmt: _16 = bias_8(D) - _15;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: === vectorizable_operation ===
common/quant.c:58:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 1 .
common/quant.c:58:5: note: ==> examining statement: _18 = _17 >> 16;
common/quant.c:58:5: note: vect_is_simple_use: operand _17
common/quant.c:58:5: note: def_stmt: _17 = mf_10(D) * _16;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: vect_is_simple_use: operand 16
common/quant.c:58:5: note: vector/scalar shift/rotate found.
common/quant.c:58:5: note: === vectorizable_shift ===
common/quant.c:58:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 1 .
common/quant.c:58:5: note: ==> examining statement: _19 = (unsigned short) _18;
common/quant.c:58:5: note: vect_is_simple_use: operand _18
common/quant.c:58:5: note: def_stmt: _18 = _17 >> 16;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: === vectorizable_conversion ===
common/quant.c:58:5: note: vect_model_promotion_demotion_cost: inside_cost = 1, prologue_cost = 0 .
common/quant.c:58:5: note: ==> examining statement: _20 = -_19;
common/quant.c:58:5: note: vect_is_simple_use: operand _19
common/quant.c:58:5: note: def_stmt: _19 = (unsigned short) _18;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: === vectorizable_operation ===
common/quant.c:58:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
common/quant.c:58:5: note: ==> examining statement: _21 = (short int) _20;
common/quant.c:58:5: note: vect_is_simple_use: operand _20
common/quant.c:58:5: note: def_stmt: _20 = -_19;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: vect_is_simple_use: operand _20
common/quant.c:58:5: note: def_stmt: _20 = -_19;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: no optab.
common/quant.c:58:5: note: vect_is_simple_use: operand _20
common/quant.c:58:5: note: def_stmt: _20 = -_19;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: === vectorizable_assignment ===
common/quant.c:58:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
common/quant.c:58:5: note: ==> examining statement: cstore_22 = _6 > 0 ? _13 : _21;
common/quant.c:58:5: note: vect_is_simple_use: operand _6 > 0
common/quant.c:58:5: note: not ssa-name.
common/quant.c:58:5: note: use not simple.
common/quant.c:58:5: note: vect_is_simple_use: operand _6
common/quant.c:58:5: note: def_stmt: _6 = *dct_5(D)[i_25];
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: vect_is_simple_use: operand _13
common/quant.c:58:5: note: def_stmt: _13 = (short int) _12;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: vect_is_simple_use: operand _21
common/quant.c:58:5: note: def_stmt: _21 = (short int) _20;
common/quant.c:58:5: note: type of def: 3.
common/quant.c:58:5: note: ==> examining statement: *dct_5(D)[i_25] = cstore_22;
common/quant.c:58:5: note: vect_is_simple_use: operand cstore_22
common/quant.c:58:5: note: def_stmt: cstore_22 = _6 > 0 ? _13 : _21;
common/quant.c:58:5: note: type of def: 3.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:58:5: note: vect_model_store_cost: unaligned supported by hardware.
common/quant.c:58:5: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:58:5: note: ==> examining statement: i_23 = i_25 + 1;
common/quant.c:58:5: note: irrelevant.
common/quant.c:58:5: note: ==> examining statement: # DEBUG i => i_23
common/quant.c:58:5: note: irrelevant.
common/quant.c:58:5: note: ==> examining statement: # DEBUG i => i_23
common/quant.c:58:5: note: irrelevant.
common/quant.c:58:5: note: ==> examining statement: ivtmp_1 = ivtmp_2 - 1;
common/quant.c:58:5: note: irrelevant.
common/quant.c:58:5: note: ==> examining statement: if (ivtmp_1 != 0)
common/quant.c:58:5: note: irrelevant.
common/quant.c:58:5: note: vectorization_factor = 8, niters = 16
common/quant.c:58:5: note: === vect_update_slp_costs_according_to_vf ===
common/quant.c:58:5: note: Cost model analysis: 
  Vector inside of loop cost: 24
  Vector prologue cost: 6
  Vector epilogue cost: 0
  Scalar iteration cost: 15
  Scalar outside cost: 0
  Vector outside cost: 6
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
common/quant.c:58:5: note:   Runtime profitability threshold = 7
common/quant.c:58:5: note:   Static estimate profitability threshold = 7
common/quant.c:58:5: note: not vectorized: estimated iteration count too small.
common/quant.c:58:5: note: not vectorized: estimated iteration count smaller than specified loop bound parameter or minimum profitable iterations (whichever is more conservative).
common/quant.c:58:5: note: bad operation or unsupported loop bound.
common/quant.c:55:13: note: vectorized 0 loops in function.
quant_4x4_dc (int16_t[4] * dct, int mf, int bias)
{
  int i;
  unsigned int ivtmp_1;
  unsigned int ivtmp_2;
  short int _6;
  int _7;
  int _9;
  int _11;
  int _12;
  short int _13;
  int _15;
  int _16;
  int _17;
  int _18;
  unsigned short _19;
  unsigned short _20;
  short int _21;
  short int cstore_22;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 3>:
  # i_25 = PHI <i_23(4), 0(2)>
  # ivtmp_2 = PHI <ivtmp_1(4), 16(2)>
  # DEBUG i => NULL
  _6 = *dct_5(D)[i_25];
  _7 = (int) _6;
  _9 = _7 + bias_8(D);
  _11 = _9 * mf_10(D);
  _12 = _11 >> 16;
  _13 = (short int) _12;
  _15 = (int) _6;
  _16 = bias_8(D) - _15;
  _17 = mf_10(D) * _16;
  _18 = _17 >> 16;
  _19 = (unsigned short) _18;
  _20 = -_19;
  _21 = (short int) _20;
  cstore_22 = _6 > 0 ? _13 : _21;
  *dct_5(D)[i_25] = cstore_22;
  i_23 = i_25 + 1;
  # DEBUG i => i_23
  # DEBUG i => i_23
  ivtmp_1 = ivtmp_2 - 1;
  if (ivtmp_1 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  return;

}



;; Function dequant_4x4 (dequant_4x4, funcdef_no=119, decl_uid=5915, cgraph_uid=119, symbol_order=162)


Analyzing loop at common/quant.c:84
common/quant.c:84:9: note: ===== analyze_loop_nest =====
common/quant.c:84:9: note: === vect_analyze_loop_form ===
split exit edge.
common/quant.c:84:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/quant.c:84:9: note: === vect_analyze_data_refs ===
Creating dr for *_15[0]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 0
	Access function 1: {0B, +, 8}_2
Creating dr for *pretmp_180[y_97][0]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 64
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 128
	base_object: *pretmp_180
	Access function 0: 0
	Access function 1: {0, +, 1}_2
Creating dr for *_15[0]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 0
	Access function 1: {0B, +, 8}_2
Creating dr for *_15[1]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 1
	Access function 1: {0B, +, 8}_2
Creating dr for *pretmp_180[y_97][1]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 64
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 128
	base_object: *pretmp_180
	Access function 0: 1
	Access function 1: {0, +, 1}_2
Creating dr for *_15[1]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 1
	Access function 1: {0B, +, 8}_2
Creating dr for *_15[2]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 2
	Access function 1: {0B, +, 8}_2
Creating dr for *pretmp_180[y_97][2]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 64
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 128
	base_object: *pretmp_180
	Access function 0: 2
	Access function 1: {0, +, 1}_2
Creating dr for *_15[2]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 2
	Access function 1: {0B, +, 8}_2
Creating dr for *_15[3]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 3
	Access function 1: {0B, +, 8}_2
Creating dr for *pretmp_180[y_97][3]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 64
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 128
	base_object: *pretmp_180
	Access function 0: 3
	Access function 1: {0, +, 1}_2
Creating dr for *_15[3]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 3
	Access function 1: {0B, +, 8}_2
common/quant.c:84:9: note: got vectype for stmt: _16 = *_15[0];
vector(8) short int
common/quant.c:84:9: note: got vectype for stmt: _22 = *pretmp_180[y_97][0];
vector(4) int
common/quant.c:84:9: note: got vectype for stmt: *_15[0] = _25;
vector(8) short int
common/quant.c:84:9: note: got vectype for stmt: _27 = *_15[1];
vector(8) short int
common/quant.c:84:9: note: got vectype for stmt: _29 = *pretmp_180[y_97][1];
vector(4) int
common/quant.c:84:9: note: got vectype for stmt: *_15[1] = _32;
vector(8) short int
common/quant.c:84:9: note: got vectype for stmt: _34 = *_15[2];
vector(8) short int
common/quant.c:84:9: note: got vectype for stmt: _36 = *pretmp_180[y_97][2];
vector(4) int
common/quant.c:84:9: note: got vectype for stmt: *_15[2] = _39;
vector(8) short int
common/quant.c:84:9: note: got vectype for stmt: _41 = *_15[3];
vector(8) short int
common/quant.c:84:9: note: got vectype for stmt: _43 = *pretmp_180[y_97][3];
vector(4) int
common/quant.c:84:9: note: got vectype for stmt: *_15[3] = _46;
vector(8) short int
common/quant.c:84:9: note: === vect_analyze_scalar_cycles ===
common/quant.c:84:9: note: Analyze phi: y_97 = PHI <0(3), y_48(5)>

common/quant.c:84:9: note: Access function of PHI: {0, +, 1}_2
common/quant.c:84:9: note: step: 1,  init: 0
common/quant.c:84:9: note: Detected induction.
common/quant.c:84:9: note: Analyze phi: .MEM_92 = PHI <.MEM_10(D)(3), .MEM_47(5)>

common/quant.c:84:9: note: Analyze phi: ivtmp_5 = PHI <4(3), ivtmp_167(5)>

common/quant.c:84:9: note: Access function of PHI: {4, +, 4294967295}_2
common/quant.c:84:9: note: step: 4294967295,  init: 4
common/quant.c:84:9: note: Detected induction.
common/quant.c:84:9: note: === vect_pattern_recog ===
common/quant.c:84:9: note: vect_is_simple_use: operand _11
common/quant.c:84:9: note: def_stmt: _11 = (long unsigned int) y_97;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand y_97
common/quant.c:84:9: note: def_stmt: y_97 = PHI <0(3), y_48(5)>
common/quant.c:84:9: note: type of def: 4.
common/quant.c:84:9: note: vect_is_simple_use: operand 8
common/quant.c:84:9: note: vect_is_simple_use: operand _17
common/quant.c:84:9: note: def_stmt: _17 = (int) _16;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _16
common/quant.c:84:9: note: def_stmt: _16 = *_15[0];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _22
common/quant.c:84:9: note: def_stmt: _22 = *pretmp_180[y_97][0];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _28
common/quant.c:84:9: note: def_stmt: _28 = (int) _27;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _27
common/quant.c:84:9: note: def_stmt: _27 = *_15[1];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _29
common/quant.c:84:9: note: def_stmt: _29 = *pretmp_180[y_97][1];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _35
common/quant.c:84:9: note: def_stmt: _35 = (int) _34;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _34
common/quant.c:84:9: note: def_stmt: _34 = *_15[2];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _36
common/quant.c:84:9: note: def_stmt: _36 = *pretmp_180[y_97][2];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _42
common/quant.c:84:9: note: def_stmt: _42 = (int) _41;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _41
common/quant.c:84:9: note: def_stmt: _41 = *_15[3];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _43
common/quant.c:84:9: note: def_stmt: _43 = *pretmp_180[y_97][3];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vect_analyze_data_ref_accesses ===
common/quant.c:84:9: note: Detected interleaving *pretmp_180[y_97][0] and *pretmp_180[y_97][1]
common/quant.c:84:9: note: Detected interleaving *pretmp_180[y_97][0] and *pretmp_180[y_97][2]
common/quant.c:84:9: note: Detected interleaving *pretmp_180[y_97][0] and *pretmp_180[y_97][3]
common/quant.c:84:9: note: Detected interleaving *_15[0] and *_15[1]
common/quant.c:84:9: note: Detected interleaving *_15[0] and *_15[2]
common/quant.c:84:9: note: Detected interleaving *_15[0] and *_15[3]
common/quant.c:84:9: note: Detected interleaving *_15[0] and *_15[1]
common/quant.c:84:9: note: Detected interleaving *_15[0] and *_15[2]
common/quant.c:84:9: note: Detected interleaving *_15[0] and *_15[3]
common/quant.c:84:9: note: Detected interleaving of size 4
common/quant.c:84:9: note: Detected interleaving of size 4
common/quant.c:84:9: note: Detected interleaving of size 4
common/quant.c:84:9: note: === vect_mark_stmts_to_be_vectorized ===
common/quant.c:84:9: note: init: phi relevant? y_97 = PHI <0(3), y_48(5)>
common/quant.c:84:9: note: init: phi relevant? .MEM_92 = PHI <.MEM_10(D)(3), .MEM_47(5)>
common/quant.c:84:9: note: init: phi relevant? ivtmp_5 = PHI <4(3), ivtmp_167(5)>
common/quant.c:84:9: note: init: stmt relevant? # DEBUG y => y_97
common/quant.c:84:9: note: init: stmt relevant? _11 = (long unsigned int) y_97;
common/quant.c:84:9: note: init: stmt relevant? _12 = _11 * 8;
common/quant.c:84:9: note: init: stmt relevant? _15 = dct_13(D) + _12;
common/quant.c:84:9: note: init: stmt relevant? _16 = *_15[0];
common/quant.c:84:9: note: init: stmt relevant? _17 = (int) _16;
common/quant.c:84:9: note: init: stmt relevant? _22 = *pretmp_180[y_97][0];
common/quant.c:84:9: note: init: stmt relevant? _23 = _17 * _22;
common/quant.c:84:9: note: init: stmt relevant? _24 = _23 << i_qbits_9;
common/quant.c:84:9: note: init: stmt relevant? _25 = (short int) _24;
common/quant.c:84:9: note: init: stmt relevant? *_15[0] = _25;
common/quant.c:84:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: init: stmt relevant? _27 = *_15[1];
common/quant.c:84:9: note: init: stmt relevant? _28 = (int) _27;
common/quant.c:84:9: note: init: stmt relevant? _29 = *pretmp_180[y_97][1];
common/quant.c:84:9: note: init: stmt relevant? _30 = _28 * _29;
common/quant.c:84:9: note: init: stmt relevant? _31 = _30 << i_qbits_9;
common/quant.c:84:9: note: init: stmt relevant? _32 = (short int) _31;
common/quant.c:84:9: note: init: stmt relevant? *_15[1] = _32;
common/quant.c:84:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: init: stmt relevant? _34 = *_15[2];
common/quant.c:84:9: note: init: stmt relevant? _35 = (int) _34;
common/quant.c:84:9: note: init: stmt relevant? _36 = *pretmp_180[y_97][2];
common/quant.c:84:9: note: init: stmt relevant? _37 = _35 * _36;
common/quant.c:84:9: note: init: stmt relevant? _38 = _37 << i_qbits_9;
common/quant.c:84:9: note: init: stmt relevant? _39 = (short int) _38;
common/quant.c:84:9: note: init: stmt relevant? *_15[2] = _39;
common/quant.c:84:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: init: stmt relevant? _41 = *_15[3];
common/quant.c:84:9: note: init: stmt relevant? _42 = (int) _41;
common/quant.c:84:9: note: init: stmt relevant? _43 = *pretmp_180[y_97][3];
common/quant.c:84:9: note: init: stmt relevant? _44 = _42 * _43;
common/quant.c:84:9: note: init: stmt relevant? _45 = _44 << i_qbits_9;
common/quant.c:84:9: note: init: stmt relevant? _46 = (short int) _45;
common/quant.c:84:9: note: init: stmt relevant? *_15[3] = _46;
common/quant.c:84:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: init: stmt relevant? y_48 = y_97 + 1;
common/quant.c:84:9: note: init: stmt relevant? # DEBUG y => y_48
common/quant.c:84:9: note: init: stmt relevant? # DEBUG y => y_48
common/quant.c:84:9: note: init: stmt relevant? ivtmp_167 = ivtmp_5 - 1;
common/quant.c:84:9: note: init: stmt relevant? if (ivtmp_167 != 0)
common/quant.c:84:9: note: worklist: examine stmt: *_15[3] = _46;
common/quant.c:84:9: note: vect_is_simple_use: operand _46
common/quant.c:84:9: note: def_stmt: _46 = (short int) _45;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _46 = (short int) _45;
common/quant.c:84:9: note: vect_is_simple_use: operand _45
common/quant.c:84:9: note: def_stmt: _45 = _44 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _45 = _44 << i_qbits_9;
common/quant.c:84:9: note: vect_is_simple_use: operand _44
common/quant.c:84:9: note: def_stmt: _44 = _42 * _43;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: def_stmt is out of loop.
common/quant.c:84:9: note: worklist: examine stmt: _44 = _42 * _43;
common/quant.c:84:9: note: vect_is_simple_use: operand _42
common/quant.c:84:9: note: def_stmt: _42 = (int) _41;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: vect_is_simple_use: operand _43
common/quant.c:84:9: note: def_stmt: _43 = *pretmp_180[y_97][3];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _43 = *pretmp_180[y_97][3];
common/quant.c:84:9: note: worklist: examine stmt: _42 = (int) _41;
common/quant.c:84:9: note: vect_is_simple_use: operand _41
common/quant.c:84:9: note: def_stmt: _41 = *_15[3];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _41 = *_15[3];
common/quant.c:84:9: note: worklist: examine stmt: *_15[2] = _39;
common/quant.c:84:9: note: vect_is_simple_use: operand _39
common/quant.c:84:9: note: def_stmt: _39 = (short int) _38;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _39 = (short int) _38;
common/quant.c:84:9: note: vect_is_simple_use: operand _38
common/quant.c:84:9: note: def_stmt: _38 = _37 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _38 = _37 << i_qbits_9;
common/quant.c:84:9: note: vect_is_simple_use: operand _37
common/quant.c:84:9: note: def_stmt: _37 = _35 * _36;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: def_stmt is out of loop.
common/quant.c:84:9: note: worklist: examine stmt: _37 = _35 * _36;
common/quant.c:84:9: note: vect_is_simple_use: operand _35
common/quant.c:84:9: note: def_stmt: _35 = (int) _34;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: vect_is_simple_use: operand _36
common/quant.c:84:9: note: def_stmt: _36 = *pretmp_180[y_97][2];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _36 = *pretmp_180[y_97][2];
common/quant.c:84:9: note: worklist: examine stmt: _35 = (int) _34;
common/quant.c:84:9: note: vect_is_simple_use: operand _34
common/quant.c:84:9: note: def_stmt: _34 = *_15[2];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _34 = *_15[2];
common/quant.c:84:9: note: worklist: examine stmt: *_15[1] = _32;
common/quant.c:84:9: note: vect_is_simple_use: operand _32
common/quant.c:84:9: note: def_stmt: _32 = (short int) _31;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _32 = (short int) _31;
common/quant.c:84:9: note: vect_is_simple_use: operand _31
common/quant.c:84:9: note: def_stmt: _31 = _30 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _31 = _30 << i_qbits_9;
common/quant.c:84:9: note: vect_is_simple_use: operand _30
common/quant.c:84:9: note: def_stmt: _30 = _28 * _29;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: def_stmt is out of loop.
common/quant.c:84:9: note: worklist: examine stmt: _30 = _28 * _29;
common/quant.c:84:9: note: vect_is_simple_use: operand _28
common/quant.c:84:9: note: def_stmt: _28 = (int) _27;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: vect_is_simple_use: operand _29
common/quant.c:84:9: note: def_stmt: _29 = *pretmp_180[y_97][1];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _29 = *pretmp_180[y_97][1];
common/quant.c:84:9: note: worklist: examine stmt: _28 = (int) _27;
common/quant.c:84:9: note: vect_is_simple_use: operand _27
common/quant.c:84:9: note: def_stmt: _27 = *_15[1];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _27 = *_15[1];
common/quant.c:84:9: note: worklist: examine stmt: *_15[0] = _25;
common/quant.c:84:9: note: vect_is_simple_use: operand _25
common/quant.c:84:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _25 = (short int) _24;
common/quant.c:84:9: note: vect_is_simple_use: operand _24
common/quant.c:84:9: note: def_stmt: _24 = _23 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _24 = _23 << i_qbits_9;
common/quant.c:84:9: note: vect_is_simple_use: operand _23
common/quant.c:84:9: note: def_stmt: _23 = _17 * _22;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: def_stmt is out of loop.
common/quant.c:84:9: note: worklist: examine stmt: _23 = _17 * _22;
common/quant.c:84:9: note: vect_is_simple_use: operand _17
common/quant.c:84:9: note: def_stmt: _17 = (int) _16;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: vect_is_simple_use: operand _22
common/quant.c:84:9: note: def_stmt: _22 = *pretmp_180[y_97][0];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _22 = *pretmp_180[y_97][0];
common/quant.c:84:9: note: worklist: examine stmt: _17 = (int) _16;
common/quant.c:84:9: note: vect_is_simple_use: operand _16
common/quant.c:84:9: note: def_stmt: _16 = *_15[0];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: mark relevant 4, live 0.
common/quant.c:84:9: note: worklist: examine stmt: _16 = *_15[0];
common/quant.c:84:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _22 = *pretmp_180[y_97][0];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[0] = _25;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _27 = *_15[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _29 = *pretmp_180[y_97][1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[1] = _32;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _34 = *_15[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _36 = *pretmp_180[y_97][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _43 = *pretmp_180[y_97][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_180[y_97][0];
  stmt_b: *_15[0] = _25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_180[y_97][0];
  stmt_b: _27 = *_15[1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_180[y_97][0];
  stmt_b: _29 = *pretmp_180[y_97][1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_180[y_97][0];
  stmt_b: *_15[1] = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_180[y_97][0];
  stmt_b: _34 = *_15[2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_180[y_97][0];
  stmt_b: _36 = *pretmp_180[y_97][2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_180[y_97][0];
  stmt_b: *_15[2] = _39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_180[y_97][0];
  stmt_b: _41 = *_15[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_180[y_97][0];
  stmt_b: _43 = *pretmp_180[y_97][3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_180[y_97][0];
  stmt_b: *_15[3] = _46;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _27 = *_15[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _29 = *pretmp_180[y_97][1];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[1] = _32;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _34 = *_15[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _36 = *pretmp_180[y_97][2];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _43 = *pretmp_180[y_97][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _29 = *pretmp_180[y_97][1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: *_15[1] = _32;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _34 = *_15[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _36 = *pretmp_180[y_97][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _43 = *pretmp_180[y_97][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _29 = *pretmp_180[y_97][1];
  stmt_b: *_15[1] = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_180[y_97][1];
  stmt_b: _34 = *_15[2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_180[y_97][1];
  stmt_b: _36 = *pretmp_180[y_97][2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _29 = *pretmp_180[y_97][1];
  stmt_b: *_15[2] = _39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_180[y_97][1];
  stmt_b: _41 = *_15[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_180[y_97][1];
  stmt_b: _43 = *pretmp_180[y_97][3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _29 = *pretmp_180[y_97][1];
  stmt_b: *_15[3] = _46;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _34 = *_15[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _36 = *pretmp_180[y_97][2];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _43 = *pretmp_180[y_97][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _36 = *pretmp_180[y_97][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _43 = *pretmp_180[y_97][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _36 = *pretmp_180[y_97][2];
  stmt_b: *_15[2] = _39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_180[y_97][2];
  stmt_b: _41 = *_15[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_180[y_97][2];
  stmt_b: _43 = *pretmp_180[y_97][3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _36 = *pretmp_180[y_97][2];
  stmt_b: *_15[3] = _46;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _43 = *pretmp_180[y_97][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _43 = *pretmp_180[y_97][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _43 = *pretmp_180[y_97][3];
  stmt_b: *_15[3] = _46;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _16 = *_15[0];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _22 = *pretmp_180[y_97][0];
  stmt_b: _22 = *pretmp_180[y_97][0];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[0] = _25;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _27 = *_15[1];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _29 = *pretmp_180[y_97][1];
  stmt_b: _29 = *pretmp_180[y_97][1];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: *_15[1] = _32;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _34 = *_15[2];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _36 = *pretmp_180[y_97][2];
  stmt_b: _36 = *pretmp_180[y_97][2];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _43 = *pretmp_180[y_97][3];
  stmt_b: _43 = *pretmp_180[y_97][3];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/quant.c:84:9: note: dependence distance  = 0.
common/quant.c:84:9: note: dependence distance == 0 between *_15[0] and *_15[0]
common/quant.c:84:9: note: dependence distance  = 0.
common/quant.c:84:9: note: dependence distance == 0 between *_15[1] and *_15[1]
common/quant.c:84:9: note: dependence distance  = 0.
common/quant.c:84:9: note: dependence distance == 0 between *_15[2] and *_15[2]
common/quant.c:84:9: note: dependence distance  = 0.
common/quant.c:84:9: note: dependence distance == 0 between *_15[3] and *_15[3]
common/quant.c:84:9: note: === vect_determine_vectorization_factor ===
common/quant.c:84:9: note: ==> examining phi: y_97 = PHI <0(3), y_48(5)>

common/quant.c:84:9: note: ==> examining phi: .MEM_92 = PHI <.MEM_10(D)(3), .MEM_47(5)>

common/quant.c:84:9: note: ==> examining phi: ivtmp_5 = PHI <4(3), ivtmp_167(5)>

common/quant.c:84:9: note: ==> examining statement: # DEBUG y => y_97

common/quant.c:84:9: note: skip.
common/quant.c:84:9: note: ==> examining statement: _11 = (long unsigned int) y_97;

common/quant.c:84:9: note: skip.
common/quant.c:84:9: note: ==> examining statement: _12 = _11 * 8;

common/quant.c:84:9: note: skip.
common/quant.c:84:9: note: ==> examining statement: _15 = dct_13(D) + _12;

common/quant.c:84:9: note: skip.
common/quant.c:84:9: note: ==> examining statement: _16 = *_15[0];

common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: _17 = (int) _16;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: _22 = *pretmp_180[y_97][0];

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _23 = _17 * _22;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _24 = _23 << i_qbits_9;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _25 = (short int) _24;

common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: *_15[0] = _25;

common/quant.c:84:9: note: get vectype for scalar type:  int16_t
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: _27 = *_15[1];

common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: _28 = (int) _27;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: _29 = *pretmp_180[y_97][1];

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _30 = _28 * _29;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _31 = _30 << i_qbits_9;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _32 = (short int) _31;

common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: *_15[1] = _32;

common/quant.c:84:9: note: get vectype for scalar type:  int16_t
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: _34 = *_15[2];

common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: _35 = (int) _34;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: _36 = *pretmp_180[y_97][2];

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _37 = _35 * _36;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _38 = _37 << i_qbits_9;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _39 = (short int) _38;

common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: *_15[2] = _39;

common/quant.c:84:9: note: get vectype for scalar type:  int16_t
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: _41 = *_15[3];

common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: _42 = (int) _41;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: _43 = *pretmp_180[y_97][3];

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _44 = _42 * _43;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _45 = _44 << i_qbits_9;

common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: get vectype for scalar type:  int
common/quant.c:84:9: note: vectype: vector(4) int
common/quant.c:84:9: note: nunits = 4
common/quant.c:84:9: note: ==> examining statement: _46 = (short int) _45;

common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: get vectype for scalar type:  short int
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: *_15[3] = _46;

common/quant.c:84:9: note: get vectype for scalar type:  int16_t
common/quant.c:84:9: note: vectype: vector(8) short int
common/quant.c:84:9: note: nunits = 8
common/quant.c:84:9: note: ==> examining statement: y_48 = y_97 + 1;

common/quant.c:84:9: note: skip.
common/quant.c:84:9: note: ==> examining statement: # DEBUG y => y_48

common/quant.c:84:9: note: skip.
common/quant.c:84:9: note: ==> examining statement: # DEBUG y => y_48

common/quant.c:84:9: note: skip.
common/quant.c:84:9: note: ==> examining statement: ivtmp_167 = ivtmp_5 - 1;

common/quant.c:84:9: note: skip.
common/quant.c:84:9: note: ==> examining statement: if (ivtmp_167 != 0)

common/quant.c:84:9: note: skip.
common/quant.c:84:9: note: vectorization factor = 8
common/quant.c:84:9: note: === vect_analyze_data_refs_alignment ===
common/quant.c:84:9: note: dependence distance  = 0.
common/quant.c:84:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[0] and *_15[0]
common/quant.c:84:9: note: dependence distance  = 0.
common/quant.c:84:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[1] and *_15[1]
common/quant.c:84:9: note: dependence distance  = 0.
common/quant.c:84:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[2] and *_15[2]
common/quant.c:84:9: note: dependence distance  = 0.
common/quant.c:84:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[3] and *_15[3]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *_15[0]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *pretmp_180[y_97][0]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *_15[0]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *_15[1]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *pretmp_180[y_97][1]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *_15[1]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *_15[2]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *pretmp_180[y_97][2]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *_15[2]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *_15[3]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *pretmp_180[y_97][3]
common/quant.c:84:9: note: vect_compute_data_ref_alignment:
common/quant.c:84:9: note: can't force alignment of ref: *_15[3]
common/quant.c:84:9: note: === vect_prune_runtime_alias_test_list ===
common/quant.c:84:9: note: === vect_enhance_data_refs_alignment ===
common/quant.c:84:9: note: vector alignment may not be reachable
common/quant.c:84:9: note: vect_can_advance_ivs_p:
common/quant.c:84:9: note: Analyze phi: y_97 = PHI <0(3), y_48(5)>

common/quant.c:84:9: note: Analyze phi: .MEM_92 = PHI <.MEM_10(D)(3), .MEM_47(5)>

common/quant.c:84:9: note: virtual phi. skip.
common/quant.c:84:9: note: Analyze phi: ivtmp_5 = PHI <4(3), ivtmp_167(5)>

Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:84:9: note: Vectorizing an unaligned access.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:84:9: note: Vectorizing an unaligned access.
common/quant.c:84:9: note: Vectorizing an unaligned access.
common/quant.c:84:9: note: === vect_analyze_slp ===
common/quant.c:84:9: note: Build SLP for *_15[0] = _25;

common/quant.c:84:9: note: Build SLP for *_15[1] = _32;

common/quant.c:84:9: note: Build SLP for *_15[2] = _39;

common/quant.c:84:9: note: Build SLP for *_15[3] = _46;

common/quant.c:84:9: note: vect_is_simple_use: operand _25
common/quant.c:84:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _32
common/quant.c:84:9: note: def_stmt: _32 = (short int) _31;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _39
common/quant.c:84:9: note: def_stmt: _39 = (short int) _38;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _46
common/quant.c:84:9: note: def_stmt: _46 = (short int) _45;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: Build SLP for _25 = (short int) _24;

common/quant.c:84:9: note: Build SLP for _32 = (short int) _31;

common/quant.c:84:9: note: Build SLP for _39 = (short int) _38;

common/quant.c:84:9: note: Build SLP for _46 = (short int) _45;

common/quant.c:84:9: note: vect_is_simple_use: operand _24
common/quant.c:84:9: note: def_stmt: _24 = _23 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _31
common/quant.c:84:9: note: def_stmt: _31 = _30 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _38
common/quant.c:84:9: note: def_stmt: _38 = _37 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _45
common/quant.c:84:9: note: def_stmt: _45 = _44 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: Build SLP for _24 = _23 << i_qbits_9;

common/quant.c:84:9: note: Build SLP for _31 = _30 << i_qbits_9;

common/quant.c:84:9: note: Build SLP for _38 = _37 << i_qbits_9;

common/quant.c:84:9: note: Build SLP for _45 = _44 << i_qbits_9;

common/quant.c:84:9: note: vect_is_simple_use: operand _23
common/quant.c:84:9: note: def_stmt: _23 = _17 * _22;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: vect_is_simple_use: operand _30
common/quant.c:84:9: note: def_stmt: _30 = _28 * _29;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: vect_is_simple_use: operand _37
common/quant.c:84:9: note: def_stmt: _37 = _35 * _36;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: vect_is_simple_use: operand _44
common/quant.c:84:9: note: def_stmt: _44 = _42 * _43;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: Build SLP for _23 = _17 * _22;

common/quant.c:84:9: note: Build SLP for _30 = _28 * _29;

common/quant.c:84:9: note: Build SLP for _37 = _35 * _36;

common/quant.c:84:9: note: Build SLP for _44 = _42 * _43;

common/quant.c:84:9: note: vect_is_simple_use: operand _17
common/quant.c:84:9: note: def_stmt: _17 = (int) _16;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _22
common/quant.c:84:9: note: def_stmt: _22 = *pretmp_180[y_97][0];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _28
common/quant.c:84:9: note: def_stmt: _28 = (int) _27;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _29
common/quant.c:84:9: note: def_stmt: _29 = *pretmp_180[y_97][1];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _35
common/quant.c:84:9: note: def_stmt: _35 = (int) _34;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _36
common/quant.c:84:9: note: def_stmt: _36 = *pretmp_180[y_97][2];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _42
common/quant.c:84:9: note: def_stmt: _42 = (int) _41;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _43
common/quant.c:84:9: note: def_stmt: _43 = *pretmp_180[y_97][3];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: Build SLP for _17 = (int) _16;

common/quant.c:84:9: note: Build SLP for _28 = (int) _27;

common/quant.c:84:9: note: Build SLP for _35 = (int) _34;

common/quant.c:84:9: note: Build SLP for _42 = (int) _41;

common/quant.c:84:9: note: vect_is_simple_use: operand _16
common/quant.c:84:9: note: def_stmt: _16 = *_15[0];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _27
common/quant.c:84:9: note: def_stmt: _27 = *_15[1];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _34
common/quant.c:84:9: note: def_stmt: _34 = *_15[2];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _41
common/quant.c:84:9: note: def_stmt: _41 = *_15[3];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: Build SLP for _16 = *_15[0];

common/quant.c:84:9: note: Build SLP for _27 = *_15[1];

common/quant.c:84:9: note: Build SLP for _34 = *_15[2];

common/quant.c:84:9: note: Build SLP for _41 = *_15[3];

common/quant.c:84:9: note: Build SLP for _22 = *pretmp_180[y_97][0];

Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:84:9: note: Build SLP for _29 = *pretmp_180[y_97][1];

common/quant.c:84:9: note: Build SLP for _36 = *pretmp_180[y_97][2];

common/quant.c:84:9: note: Build SLP for _43 = *pretmp_180[y_97][3];

common/quant.c:84:9: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:84:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:84:9: note: vect_is_simple_use: operand *_15[0]
common/quant.c:84:9: note: not ssa-name.
common/quant.c:84:9: note: vect_is_simple_use: operand _16
common/quant.c:84:9: note: def_stmt: _16 = *_15[0];
common/quant.c:84:9: note: type of def: 3.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:84:9: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:84:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:84:9: note: vect_is_simple_use: operand *pretmp_180[y_97][0]
common/quant.c:84:9: note: not ssa-name.
common/quant.c:84:9: note: vect_is_simple_use: operand _17
common/quant.c:84:9: note: def_stmt: _17 = (int) _16;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _22
common/quant.c:84:9: note: def_stmt: _22 = *pretmp_180[y_97][0];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _23
common/quant.c:84:9: note: def_stmt: _23 = _17 * _22;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: vect_is_simple_use: operand _24
common/quant.c:84:9: note: def_stmt: _24 = _23 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_model_store_cost: unaligned supported by hardware.
common/quant.c:84:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:84:9: note: vect_is_simple_use: operand _25
common/quant.c:84:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:84:9: note: type of def: 3.
node 
	stmt 0 *_15[0] = _25;

	stmt 1 *_15[1] = _32;

	stmt 2 *_15[2] = _39;

	stmt 3 *_15[3] = _46;

node 
	stmt 0 _25 = (short int) _24;

	stmt 1 _32 = (short int) _31;

	stmt 2 _39 = (short int) _38;

	stmt 3 _46 = (short int) _45;

node 
	stmt 0 _24 = _23 << i_qbits_9;

	stmt 1 _31 = _30 << i_qbits_9;

	stmt 2 _38 = _37 << i_qbits_9;

	stmt 3 _45 = _44 << i_qbits_9;

node 
	stmt 0 _23 = _17 * _22;

	stmt 1 _30 = _28 * _29;

	stmt 2 _37 = _35 * _36;

	stmt 3 _44 = _42 * _43;

node 
	stmt 0 _17 = (int) _16;

	stmt 1 _28 = (int) _27;

	stmt 2 _35 = (int) _34;

	stmt 3 _42 = (int) _41;

node 
	stmt 0 _16 = *_15[0];

	stmt 1 _27 = *_15[1];

	stmt 2 _34 = *_15[2];

	stmt 3 _41 = *_15[3];

node 
	stmt 0 _22 = *pretmp_180[y_97][0];

	stmt 1 _29 = *pretmp_180[y_97][1];

	stmt 2 _36 = *pretmp_180[y_97][2];

	stmt 3 _43 = *pretmp_180[y_97][3];

common/quant.c:84:9: note: === vect_make_slp_decision ===
common/quant.c:84:9: note: Decided to SLP 1 instances. Unrolling factor 2
common/quant.c:84:9: note: === vect_detect_hybrid_slp ===
common/quant.c:84:9: note: === vect_analyze_loop_operations ===
common/quant.c:84:9: note: Updating vectorization factor to 2
common/quant.c:84:9: note: examining phi: y_97 = PHI <0(3), y_48(5)>

common/quant.c:84:9: note: examining phi: .MEM_92 = PHI <.MEM_10(D)(3), .MEM_47(5)>

common/quant.c:84:9: note: examining phi: ivtmp_5 = PHI <4(3), ivtmp_167(5)>

common/quant.c:84:9: note: ==> examining statement: # DEBUG y => y_97
common/quant.c:84:9: note: irrelevant.
common/quant.c:84:9: note: ==> examining statement: _11 = (long unsigned int) y_97;
common/quant.c:84:9: note: irrelevant.
common/quant.c:84:9: note: ==> examining statement: _12 = _11 * 8;
common/quant.c:84:9: note: irrelevant.
common/quant.c:84:9: note: ==> examining statement: _15 = dct_13(D) + _12;
common/quant.c:84:9: note: irrelevant.
common/quant.c:84:9: note: ==> examining statement: _16 = *_15[0];
common/quant.c:84:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:84:9: note: vect_is_simple_use: operand *_15[0]
common/quant.c:84:9: note: not ssa-name.
common/quant.c:84:9: note: use not simple.
common/quant.c:84:9: note: ==> examining statement: _17 = (int) _16;
common/quant.c:84:9: note: vect_is_simple_use: operand _16
common/quant.c:84:9: note: def_stmt: _16 = *_15[0];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_conversion ===
common/quant.c:84:9: note: ==> examining statement: _22 = *pretmp_180[y_97][0];
common/quant.c:84:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:84:9: note: vect_is_simple_use: operand *pretmp_180[y_97][0]
common/quant.c:84:9: note: not ssa-name.
common/quant.c:84:9: note: use not simple.
common/quant.c:84:9: note: ==> examining statement: _23 = _17 * _22;
common/quant.c:84:9: note: vect_is_simple_use: operand _17
common/quant.c:84:9: note: def_stmt: _17 = (int) _16;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _22
common/quant.c:84:9: note: def_stmt: _22 = *pretmp_180[y_97][0];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_operation ===
common/quant.c:84:9: note: ==> examining statement: _24 = _23 << i_qbits_9;
common/quant.c:84:9: note: vect_is_simple_use: operand _23
common/quant.c:84:9: note: def_stmt: _23 = _17 * _22;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: vector/scalar shift/rotate found.
common/quant.c:84:9: note: === vectorizable_shift ===
common/quant.c:84:9: note: ==> examining statement: _25 = (short int) _24;
common/quant.c:84:9: note: vect_is_simple_use: operand _24
common/quant.c:84:9: note: def_stmt: _24 = _23 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_conversion ===
common/quant.c:84:9: note: ==> examining statement: *_15[0] = _25;
common/quant.c:84:9: note: vect_is_simple_use: operand _25
common/quant.c:84:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _32
common/quant.c:84:9: note: def_stmt: _32 = (short int) _31;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _39
common/quant.c:84:9: note: def_stmt: _39 = (short int) _38;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _46
common/quant.c:84:9: note: def_stmt: _46 = (short int) _45;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: ==> examining statement: _27 = *_15[1];
common/quant.c:84:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:84:9: note: vect_is_simple_use: operand *_15[1]
common/quant.c:84:9: note: not ssa-name.
common/quant.c:84:9: note: use not simple.
common/quant.c:84:9: note: ==> examining statement: _28 = (int) _27;
common/quant.c:84:9: note: vect_is_simple_use: operand _27
common/quant.c:84:9: note: def_stmt: _27 = *_15[1];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_conversion ===
common/quant.c:84:9: note: ==> examining statement: _29 = *pretmp_180[y_97][1];
common/quant.c:84:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:84:9: note: vect_is_simple_use: operand *pretmp_180[y_97][1]
common/quant.c:84:9: note: not ssa-name.
common/quant.c:84:9: note: use not simple.
common/quant.c:84:9: note: ==> examining statement: _30 = _28 * _29;
common/quant.c:84:9: note: vect_is_simple_use: operand _28
common/quant.c:84:9: note: def_stmt: _28 = (int) _27;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _29
common/quant.c:84:9: note: def_stmt: _29 = *pretmp_180[y_97][1];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_operation ===
common/quant.c:84:9: note: ==> examining statement: _31 = _30 << i_qbits_9;
common/quant.c:84:9: note: vect_is_simple_use: operand _30
common/quant.c:84:9: note: def_stmt: _30 = _28 * _29;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: vector/scalar shift/rotate found.
common/quant.c:84:9: note: === vectorizable_shift ===
common/quant.c:84:9: note: ==> examining statement: _32 = (short int) _31;
common/quant.c:84:9: note: vect_is_simple_use: operand _31
common/quant.c:84:9: note: def_stmt: _31 = _30 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_conversion ===
common/quant.c:84:9: note: ==> examining statement: *_15[1] = _32;
common/quant.c:84:9: note: vect_is_simple_use: operand _32
common/quant.c:84:9: note: def_stmt: _32 = (short int) _31;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: ==> examining statement: _34 = *_15[2];
common/quant.c:84:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:84:9: note: vect_is_simple_use: operand *_15[2]
common/quant.c:84:9: note: not ssa-name.
common/quant.c:84:9: note: use not simple.
common/quant.c:84:9: note: ==> examining statement: _35 = (int) _34;
common/quant.c:84:9: note: vect_is_simple_use: operand _34
common/quant.c:84:9: note: def_stmt: _34 = *_15[2];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_conversion ===
common/quant.c:84:9: note: ==> examining statement: _36 = *pretmp_180[y_97][2];
common/quant.c:84:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:84:9: note: vect_is_simple_use: operand *pretmp_180[y_97][2]
common/quant.c:84:9: note: not ssa-name.
common/quant.c:84:9: note: use not simple.
common/quant.c:84:9: note: ==> examining statement: _37 = _35 * _36;
common/quant.c:84:9: note: vect_is_simple_use: operand _35
common/quant.c:84:9: note: def_stmt: _35 = (int) _34;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _36
common/quant.c:84:9: note: def_stmt: _36 = *pretmp_180[y_97][2];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_operation ===
common/quant.c:84:9: note: ==> examining statement: _38 = _37 << i_qbits_9;
common/quant.c:84:9: note: vect_is_simple_use: operand _37
common/quant.c:84:9: note: def_stmt: _37 = _35 * _36;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: vector/scalar shift/rotate found.
common/quant.c:84:9: note: === vectorizable_shift ===
common/quant.c:84:9: note: ==> examining statement: _39 = (short int) _38;
common/quant.c:84:9: note: vect_is_simple_use: operand _38
common/quant.c:84:9: note: def_stmt: _38 = _37 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_conversion ===
common/quant.c:84:9: note: ==> examining statement: *_15[2] = _39;
common/quant.c:84:9: note: vect_is_simple_use: operand _39
common/quant.c:84:9: note: def_stmt: _39 = (short int) _38;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: ==> examining statement: _41 = *_15[3];
common/quant.c:84:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:84:9: note: vect_is_simple_use: operand *_15[3]
common/quant.c:84:9: note: not ssa-name.
common/quant.c:84:9: note: use not simple.
common/quant.c:84:9: note: ==> examining statement: _42 = (int) _41;
common/quant.c:84:9: note: vect_is_simple_use: operand _41
common/quant.c:84:9: note: def_stmt: _41 = *_15[3];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_conversion ===
common/quant.c:84:9: note: ==> examining statement: _43 = *pretmp_180[y_97][3];
common/quant.c:84:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:84:9: note: vect_is_simple_use: operand *pretmp_180[y_97][3]
common/quant.c:84:9: note: not ssa-name.
common/quant.c:84:9: note: use not simple.
common/quant.c:84:9: note: ==> examining statement: _44 = _42 * _43;
common/quant.c:84:9: note: vect_is_simple_use: operand _42
common/quant.c:84:9: note: def_stmt: _42 = (int) _41;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _43
common/quant.c:84:9: note: def_stmt: _43 = *pretmp_180[y_97][3];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_operation ===
common/quant.c:84:9: note: ==> examining statement: _45 = _44 << i_qbits_9;
common/quant.c:84:9: note: vect_is_simple_use: operand _44
common/quant.c:84:9: note: def_stmt: _44 = _42 * _43;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: vector/scalar shift/rotate found.
common/quant.c:84:9: note: === vectorizable_shift ===
common/quant.c:84:9: note: ==> examining statement: _46 = (short int) _45;
common/quant.c:84:9: note: vect_is_simple_use: operand _45
common/quant.c:84:9: note: def_stmt: _45 = _44 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: === vectorizable_conversion ===
common/quant.c:84:9: note: ==> examining statement: *_15[3] = _46;
common/quant.c:84:9: note: vect_is_simple_use: operand _46
common/quant.c:84:9: note: def_stmt: _46 = (short int) _45;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: ==> examining statement: y_48 = y_97 + 1;
common/quant.c:84:9: note: irrelevant.
common/quant.c:84:9: note: ==> examining statement: # DEBUG y => y_48
common/quant.c:84:9: note: irrelevant.
common/quant.c:84:9: note: ==> examining statement: # DEBUG y => y_48
common/quant.c:84:9: note: irrelevant.
common/quant.c:84:9: note: ==> examining statement: ivtmp_167 = ivtmp_5 - 1;
common/quant.c:84:9: note: irrelevant.
common/quant.c:84:9: note: ==> examining statement: if (ivtmp_167 != 0)
common/quant.c:84:9: note: irrelevant.
common/quant.c:84:9: note: vectorization_factor = 2, niters = 4
common/quant.c:84:9: note: === vect_update_slp_costs_according_to_vf ===
common/quant.c:84:9: note: Cost model analysis: 
  Vector inside of loop cost: 10
  Vector prologue cost: 1
  Vector epilogue cost: 0
  Scalar iteration cost: 28
  Scalar outside cost: 0
  Vector outside cost: 1
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
common/quant.c:84:9: note:   Runtime profitability threshold = 1
common/quant.c:84:9: note:   Static estimate profitability threshold = 1
common/quant.c:84:9: note: loop vectorized
common/quant.c:84:9: note: === vec_transform_loop ===
common/quant.c:84:9: note: ------>vectorizing phi: y_97 = PHI <0(11), y_48(5)>

common/quant.c:84:9: note: ------>vectorizing phi: .MEM_92 = PHI <.MEM_10(D)(11), .MEM_47(5)>

common/quant.c:84:9: note: ------>vectorizing phi: ivtmp_5 = PHI <4(11), ivtmp_167(5)>

common/quant.c:84:9: note: ------>vectorizing statement: # DEBUG y => y_97

common/quant.c:84:9: note: ------>vectorizing statement: _11 = (long unsigned int) y_97;

common/quant.c:84:9: note: ------>vectorizing statement: _12 = _11 * 8;

common/quant.c:84:9: note: ------>vectorizing statement: _15 = dct_13(D) + _12;

common/quant.c:84:9: note: ------>vectorizing statement: _16 = *_15[0];

common/quant.c:84:9: note: === scheduling SLP instances ===
common/quant.c:84:9: note: ------>vectorizing SLP node starting from: _16 = *_15[0];

common/quant.c:84:9: note: transform load. ncopies = 1
common/quant.c:84:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_13(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:84:9: note: created vectp_dct.54_163
common/quant.c:84:9: note: add new stmt: vect__16.55_160 = MEM[(short int *)vectp_dct.53_162];
common/quant.c:84:9: note: ------>vectorizing SLP node starting from: _17 = (int) _16;

common/quant.c:84:9: note: vect_is_simple_use: operand _16
common/quant.c:84:9: note: def_stmt: _16 = *_15[0];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: transform conversion. ncopies = 1.
common/quant.c:84:9: note: add new stmt: vect__17.56_159 = [vec_unpack_lo_expr] vect__16.55_160;
common/quant.c:84:9: note: add new stmt: vect__17.56_158 = [vec_unpack_hi_expr] vect__16.55_160;
common/quant.c:84:9: note: ------>vectorizing SLP node starting from: _22 = *pretmp_180[y_97][0];

common/quant.c:84:9: note: transform load. ncopies = 1
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:84:9: note: create vector_type-pointer variable to type: vector(4) int  vectorizing an array ref: *pretmp_180
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:84:9: note: created vectp.58_157
common/quant.c:84:9: note: add new stmt: vect__22.59_152 = MEM[(int *)vectp.57_154];
common/quant.c:84:9: note: add new stmt: vectp.57_151 = vectp.57_154 + 16;
common/quant.c:84:9: note: add new stmt: vect__22.60_150 = MEM[(int *)vectp.57_151];
common/quant.c:84:9: note: ------>vectorizing SLP node starting from: _23 = _17 * _22;

common/quant.c:84:9: note: vect_is_simple_use: operand _17
common/quant.c:84:9: note: def_stmt: _17 = (int) _16;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _22
common/quant.c:84:9: note: def_stmt: _22 = *pretmp_180[y_97][0];
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: transform binary/unary operation.
common/quant.c:84:9: note: add new stmt: vect__23.61_149 = vect__17.56_159 * vect__22.59_152;
common/quant.c:84:9: note: add new stmt: vect__23.61_148 = vect__17.56_158 * vect__22.60_150;
common/quant.c:84:9: note: ------>vectorizing SLP node starting from: _24 = _23 << i_qbits_9;

common/quant.c:84:9: note: vect_is_simple_use: operand _23
common/quant.c:84:9: note: def_stmt: _23 = _17 * _22;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:84:9: note: def_stmt: i_qbits_9 = _8 + -4;
common/quant.c:84:9: note: type of def: 2.
common/quant.c:84:9: note: vector/scalar shift/rotate found.
common/quant.c:84:9: note: transform binary/unary operation.
common/quant.c:84:9: note: operand 1 using scalar mode.
common/quant.c:84:9: note: add new stmt: vect__24.62_147 = vect__23.61_149 << i_qbits_9;
common/quant.c:84:9: note: add new stmt: vect__24.62_146 = vect__23.61_148 << i_qbits_9;
common/quant.c:84:9: note: ------>vectorizing SLP node starting from: _25 = (short int) _24;

common/quant.c:84:9: note: vect_is_simple_use: operand _24
common/quant.c:84:9: note: def_stmt: _24 = _23 << i_qbits_9;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: transform conversion. ncopies = 1.
common/quant.c:84:9: note: add new stmt: vect__25.63_145 = VEC_PACK_TRUNC_EXPR <vect__24.62_147, vect__24.62_146>;
common/quant.c:84:9: note: ------>vectorizing SLP node starting from: *_15[0] = _25;

common/quant.c:84:9: note: vect_is_simple_use: operand _25
common/quant.c:84:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _32
common/quant.c:84:9: note: def_stmt: _32 = (short int) _31;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _39
common/quant.c:84:9: note: def_stmt: _39 = (short int) _38;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: vect_is_simple_use: operand _46
common/quant.c:84:9: note: def_stmt: _46 = (short int) _45;
common/quant.c:84:9: note: type of def: 3.
common/quant.c:84:9: note: transform store. ncopies = 1
common/quant.c:84:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_13(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:84:9: note: created vectp_dct.65_144
common/quant.c:84:9: note: add new stmt: MEM[(short int *)vectp_dct.64_143] = vect__25.63_145;
common/quant.c:84:9: note: vectorizing stmts using SLP.
common/quant.c:84:9: note: ------>vectorizing statement: vect__17.56_159 = [vec_unpack_lo_expr] vect__16.55_160;

common/quant.c:84:9: note: ------>vectorizing statement: vect__17.56_158 = [vec_unpack_hi_expr] vect__16.55_160;

common/quant.c:84:9: note: ------>vectorizing statement: _17 = (int) _16;

common/quant.c:84:9: note: ------>vectorizing statement: vect__22.59_152 = MEM[(int *)vectp.57_154];

common/quant.c:84:9: note: ------>vectorizing statement: vectp.57_151 = vectp.57_154 + 16;

common/quant.c:84:9: note: ------>vectorizing statement: vect__22.60_150 = MEM[(int *)vectp.57_151];

common/quant.c:84:9: note: ------>vectorizing statement: _22 = *pretmp_180[y_97][0];

common/quant.c:84:9: note: ------>vectorizing statement: vect__23.61_149 = vect__17.56_159 * vect__22.59_152;

common/quant.c:84:9: note: ------>vectorizing statement: vect__23.61_148 = vect__17.56_158 * vect__22.60_150;

common/quant.c:84:9: note: ------>vectorizing statement: _23 = _17 * _22;

common/quant.c:84:9: note: ------>vectorizing statement: vect__24.62_147 = vect__23.61_149 << i_qbits_9;

common/quant.c:84:9: note: ------>vectorizing statement: vect__24.62_146 = vect__23.61_148 << i_qbits_9;

common/quant.c:84:9: note: ------>vectorizing statement: _24 = _23 << i_qbits_9;

common/quant.c:84:9: note: ------>vectorizing statement: vect__25.63_145 = VEC_PACK_TRUNC_EXPR <vect__24.62_147, vect__24.62_146>;

common/quant.c:84:9: note: ------>vectorizing statement: _25 = (short int) _24;

common/quant.c:84:9: note: ------>vectorizing statement: _27 = *_15[1];

common/quant.c:84:9: note: ------>vectorizing statement: _28 = (int) _27;

common/quant.c:84:9: note: ------>vectorizing statement: _29 = *pretmp_180[y_97][1];

common/quant.c:84:9: note: ------>vectorizing statement: _30 = _28 * _29;

common/quant.c:84:9: note: ------>vectorizing statement: _31 = _30 << i_qbits_9;

common/quant.c:84:9: note: ------>vectorizing statement: _32 = (short int) _31;

common/quant.c:84:9: note: ------>vectorizing statement: _34 = *_15[2];

common/quant.c:84:9: note: ------>vectorizing statement: _35 = (int) _34;

common/quant.c:84:9: note: ------>vectorizing statement: _36 = *pretmp_180[y_97][2];

common/quant.c:84:9: note: ------>vectorizing statement: _37 = _35 * _36;

common/quant.c:84:9: note: ------>vectorizing statement: _38 = _37 << i_qbits_9;

common/quant.c:84:9: note: ------>vectorizing statement: _39 = (short int) _38;

common/quant.c:84:9: note: ------>vectorizing statement: _41 = *_15[3];

common/quant.c:84:9: note: ------>vectorizing statement: _42 = (int) _41;

common/quant.c:84:9: note: ------>vectorizing statement: _43 = *pretmp_180[y_97][3];

common/quant.c:84:9: note: ------>vectorizing statement: _44 = _42 * _43;

common/quant.c:84:9: note: ------>vectorizing statement: _45 = _44 << i_qbits_9;

common/quant.c:84:9: note: ------>vectorizing statement: _46 = (short int) _45;

common/quant.c:84:9: note: ------>vectorizing statement: MEM[(short int *)vectp_dct.64_143] = vect__25.63_145;

common/quant.c:84:9: note: ------>vectorizing statement: y_48 = y_97 + 1;

common/quant.c:84:9: note: ------>vectorizing statement: # DEBUG y => y_48

common/quant.c:84:9: note: ------>vectorizing statement: # DEBUG y => y_48

common/quant.c:84:9: note: ------>vectorizing statement: ivtmp_167 = ivtmp_5 - 1;

common/quant.c:84:9: note: ------>vectorizing statement: vectp_dct.53_161 = vectp_dct.53_162 + 16;

common/quant.c:84:9: note: ------>vectorizing statement: vectp.57_153 = vectp.57_151 + 16;

common/quant.c:84:9: note: ------>vectorizing statement: vectp_dct.64_142 = vectp_dct.64_143 + 16;

common/quant.c:84:9: note: ------>vectorizing statement: if (ivtmp_167 != 0)


loop at common/quant.c:86: if (ivtmp_40 < 2)

;; Scaling loop 2 with scale 0.500000, bounding iterations to 2 from guessed 3
;; guessed iterations are now 2
common/quant.c:84:9: note: LOOP VECTORIZED


Analyzing loop at common/quant.c:95
common/quant.c:95:9: note: ===== analyze_loop_nest =====
common/quant.c:95:9: note: === vect_analyze_loop_form ===
split exit edge.
common/quant.c:95:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/quant.c:95:9: note: === vect_analyze_data_refs ===
Creating dr for *_53[0]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 0
	Access function 1: {0B, +, 8}_1
Creating dr for *pretmp_171[y_96][0]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 64
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 128
	base_object: *pretmp_171
	Access function 0: 0
	Access function 1: {0, +, 1}_1
Creating dr for *_53[0]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 0
	Access function 1: {0B, +, 8}_1
Creating dr for *_53[1]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 1
	Access function 1: {0B, +, 8}_1
Creating dr for *pretmp_171[y_96][1]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 64
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 128
	base_object: *pretmp_171
	Access function 0: 1
	Access function 1: {0, +, 1}_1
Creating dr for *_53[1]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 1
	Access function 1: {0B, +, 8}_1
Creating dr for *_53[2]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 2
	Access function 1: {0B, +, 8}_1
Creating dr for *pretmp_171[y_96][2]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 64
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 128
	base_object: *pretmp_171
	Access function 0: 2
	Access function 1: {0, +, 1}_1
Creating dr for *_53[2]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 2
	Access function 1: {0B, +, 8}_1
Creating dr for *_53[3]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 3
	Access function 1: {0B, +, 8}_1
Creating dr for *pretmp_171[y_96][3]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 64
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 128
	base_object: *pretmp_171
	Access function 0: 3
	Access function 1: {0, +, 1}_1
Creating dr for *_53[3]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 8
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 3
	Access function 1: {0B, +, 8}_1
common/quant.c:95:9: note: got vectype for stmt: _54 = *_53[0];
vector(8) short int
common/quant.c:95:9: note: got vectype for stmt: _59 = *pretmp_171[y_96][0];
vector(4) int
common/quant.c:95:9: note: got vectype for stmt: *_53[0] = _64;
vector(8) short int
common/quant.c:95:9: note: got vectype for stmt: _66 = *_53[1];
vector(8) short int
common/quant.c:95:9: note: got vectype for stmt: _68 = *pretmp_171[y_96][1];
vector(4) int
common/quant.c:95:9: note: got vectype for stmt: *_53[1] = _72;
vector(8) short int
common/quant.c:95:9: note: got vectype for stmt: _74 = *_53[2];
vector(8) short int
common/quant.c:95:9: note: got vectype for stmt: _76 = *pretmp_171[y_96][2];
vector(4) int
common/quant.c:95:9: note: got vectype for stmt: *_53[2] = _80;
vector(8) short int
common/quant.c:95:9: note: got vectype for stmt: _82 = *_53[3];
vector(8) short int
common/quant.c:95:9: note: got vectype for stmt: _84 = *pretmp_171[y_96][3];
vector(4) int
common/quant.c:95:9: note: got vectype for stmt: *_53[3] = _88;
vector(8) short int
common/quant.c:95:9: note: === vect_analyze_scalar_cycles ===
common/quant.c:95:9: note: Analyze phi: y_96 = PHI <y_90(9), 0(7)>

common/quant.c:95:9: note: Access function of PHI: {0, +, 1}_1
common/quant.c:95:9: note: step: 1,  init: 0
common/quant.c:95:9: note: Detected induction.
common/quant.c:95:9: note: Analyze phi: .MEM_94 = PHI <.MEM_89(9), .MEM_10(D)(7)>

common/quant.c:95:9: note: Analyze phi: ivtmp_166 = PHI <ivtmp_165(9), 4(7)>

common/quant.c:95:9: note: Access function of PHI: {4, +, 4294967295}_1
common/quant.c:95:9: note: step: 4294967295,  init: 4
common/quant.c:95:9: note: Detected induction.
common/quant.c:95:9: note: === vect_pattern_recog ===
common/quant.c:95:9: note: vect_is_simple_use: operand _51
common/quant.c:95:9: note: def_stmt: _51 = (long unsigned int) y_96;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand y_96
common/quant.c:95:9: note: def_stmt: y_96 = PHI <y_90(9), 0(7)>
common/quant.c:95:9: note: type of def: 4.
common/quant.c:95:9: note: vect_is_simple_use: operand 8
common/quant.c:95:9: note: vect_is_simple_use: operand _55
common/quant.c:95:9: note: def_stmt: _55 = (int) _54;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _54
common/quant.c:95:9: note: def_stmt: _54 = *_53[0];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _59
common/quant.c:95:9: note: def_stmt: _59 = *pretmp_171[y_96][0];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _67
common/quant.c:95:9: note: def_stmt: _67 = (int) _66;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _66
common/quant.c:95:9: note: def_stmt: _66 = *_53[1];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _68
common/quant.c:95:9: note: def_stmt: _68 = *pretmp_171[y_96][1];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _75
common/quant.c:95:9: note: def_stmt: _75 = (int) _74;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _74
common/quant.c:95:9: note: def_stmt: _74 = *_53[2];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _76
common/quant.c:95:9: note: def_stmt: _76 = *pretmp_171[y_96][2];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _83
common/quant.c:95:9: note: def_stmt: _83 = (int) _82;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _82
common/quant.c:95:9: note: def_stmt: _82 = *_53[3];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _84
common/quant.c:95:9: note: def_stmt: _84 = *pretmp_171[y_96][3];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vect_analyze_data_ref_accesses ===
common/quant.c:95:9: note: Detected interleaving *pretmp_171[y_96][0] and *pretmp_171[y_96][1]
common/quant.c:95:9: note: Detected interleaving *pretmp_171[y_96][0] and *pretmp_171[y_96][2]
common/quant.c:95:9: note: Detected interleaving *pretmp_171[y_96][0] and *pretmp_171[y_96][3]
common/quant.c:95:9: note: Detected interleaving *_53[0] and *_53[1]
common/quant.c:95:9: note: Detected interleaving *_53[0] and *_53[2]
common/quant.c:95:9: note: Detected interleaving *_53[0] and *_53[3]
common/quant.c:95:9: note: Detected interleaving *_53[0] and *_53[1]
common/quant.c:95:9: note: Detected interleaving *_53[0] and *_53[2]
common/quant.c:95:9: note: Detected interleaving *_53[0] and *_53[3]
common/quant.c:95:9: note: Detected interleaving of size 4
common/quant.c:95:9: note: Detected interleaving of size 4
common/quant.c:95:9: note: Detected interleaving of size 4
common/quant.c:95:9: note: === vect_mark_stmts_to_be_vectorized ===
common/quant.c:95:9: note: init: phi relevant? y_96 = PHI <y_90(9), 0(7)>
common/quant.c:95:9: note: init: phi relevant? .MEM_94 = PHI <.MEM_89(9), .MEM_10(D)(7)>
common/quant.c:95:9: note: init: phi relevant? ivtmp_166 = PHI <ivtmp_165(9), 4(7)>
common/quant.c:95:9: note: init: stmt relevant? # DEBUG y => y_96
common/quant.c:95:9: note: init: stmt relevant? _51 = (long unsigned int) y_96;
common/quant.c:95:9: note: init: stmt relevant? _52 = _51 * 8;
common/quant.c:95:9: note: init: stmt relevant? _53 = dct_13(D) + _52;
common/quant.c:95:9: note: init: stmt relevant? _54 = *_53[0];
common/quant.c:95:9: note: init: stmt relevant? _55 = (int) _54;
common/quant.c:95:9: note: init: stmt relevant? _59 = *pretmp_171[y_96][0];
common/quant.c:95:9: note: init: stmt relevant? _60 = _55 * _59;
common/quant.c:95:9: note: init: stmt relevant? _61 = f_50 + _60;
common/quant.c:95:9: note: init: stmt relevant? _63 = _61 >> pretmp_174;
common/quant.c:95:9: note: init: stmt relevant? _64 = (short int) _63;
common/quant.c:95:9: note: init: stmt relevant? *_53[0] = _64;
common/quant.c:95:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: init: stmt relevant? _66 = *_53[1];
common/quant.c:95:9: note: init: stmt relevant? _67 = (int) _66;
common/quant.c:95:9: note: init: stmt relevant? _68 = *pretmp_171[y_96][1];
common/quant.c:95:9: note: init: stmt relevant? _69 = _67 * _68;
common/quant.c:95:9: note: init: stmt relevant? _70 = f_50 + _69;
common/quant.c:95:9: note: init: stmt relevant? _71 = _70 >> pretmp_174;
common/quant.c:95:9: note: init: stmt relevant? _72 = (short int) _71;
common/quant.c:95:9: note: init: stmt relevant? *_53[1] = _72;
common/quant.c:95:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: init: stmt relevant? _74 = *_53[2];
common/quant.c:95:9: note: init: stmt relevant? _75 = (int) _74;
common/quant.c:95:9: note: init: stmt relevant? _76 = *pretmp_171[y_96][2];
common/quant.c:95:9: note: init: stmt relevant? _77 = _75 * _76;
common/quant.c:95:9: note: init: stmt relevant? _78 = f_50 + _77;
common/quant.c:95:9: note: init: stmt relevant? _79 = _78 >> pretmp_174;
common/quant.c:95:9: note: init: stmt relevant? _80 = (short int) _79;
common/quant.c:95:9: note: init: stmt relevant? *_53[2] = _80;
common/quant.c:95:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: init: stmt relevant? _82 = *_53[3];
common/quant.c:95:9: note: init: stmt relevant? _83 = (int) _82;
common/quant.c:95:9: note: init: stmt relevant? _84 = *pretmp_171[y_96][3];
common/quant.c:95:9: note: init: stmt relevant? _85 = _83 * _84;
common/quant.c:95:9: note: init: stmt relevant? _86 = f_50 + _85;
common/quant.c:95:9: note: init: stmt relevant? _87 = _86 >> pretmp_174;
common/quant.c:95:9: note: init: stmt relevant? _88 = (short int) _87;
common/quant.c:95:9: note: init: stmt relevant? *_53[3] = _88;
common/quant.c:95:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: init: stmt relevant? y_90 = y_96 + 1;
common/quant.c:95:9: note: init: stmt relevant? # DEBUG y => y_90
common/quant.c:95:9: note: init: stmt relevant? # DEBUG y => y_90
common/quant.c:95:9: note: init: stmt relevant? ivtmp_165 = ivtmp_166 - 1;
common/quant.c:95:9: note: init: stmt relevant? if (ivtmp_165 != 0)
common/quant.c:95:9: note: worklist: examine stmt: *_53[3] = _88;
common/quant.c:95:9: note: vect_is_simple_use: operand _88
common/quant.c:95:9: note: def_stmt: _88 = (short int) _87;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _88 = (short int) _87;
common/quant.c:95:9: note: vect_is_simple_use: operand _87
common/quant.c:95:9: note: def_stmt: _87 = _86 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _87 = _86 >> pretmp_174;
common/quant.c:95:9: note: vect_is_simple_use: operand _86
common/quant.c:95:9: note: def_stmt: _86 = f_50 + _85;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: def_stmt is out of loop.
common/quant.c:95:9: note: worklist: examine stmt: _86 = f_50 + _85;
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: def_stmt is out of loop.
common/quant.c:95:9: note: vect_is_simple_use: operand _85
common/quant.c:95:9: note: def_stmt: _85 = _83 * _84;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _85 = _83 * _84;
common/quant.c:95:9: note: vect_is_simple_use: operand _83
common/quant.c:95:9: note: def_stmt: _83 = (int) _82;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: vect_is_simple_use: operand _84
common/quant.c:95:9: note: def_stmt: _84 = *pretmp_171[y_96][3];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _84 = *pretmp_171[y_96][3];
common/quant.c:95:9: note: worklist: examine stmt: _83 = (int) _82;
common/quant.c:95:9: note: vect_is_simple_use: operand _82
common/quant.c:95:9: note: def_stmt: _82 = *_53[3];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _82 = *_53[3];
common/quant.c:95:9: note: worklist: examine stmt: *_53[2] = _80;
common/quant.c:95:9: note: vect_is_simple_use: operand _80
common/quant.c:95:9: note: def_stmt: _80 = (short int) _79;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _80 = (short int) _79;
common/quant.c:95:9: note: vect_is_simple_use: operand _79
common/quant.c:95:9: note: def_stmt: _79 = _78 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _79 = _78 >> pretmp_174;
common/quant.c:95:9: note: vect_is_simple_use: operand _78
common/quant.c:95:9: note: def_stmt: _78 = f_50 + _77;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: def_stmt is out of loop.
common/quant.c:95:9: note: worklist: examine stmt: _78 = f_50 + _77;
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: def_stmt is out of loop.
common/quant.c:95:9: note: vect_is_simple_use: operand _77
common/quant.c:95:9: note: def_stmt: _77 = _75 * _76;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _77 = _75 * _76;
common/quant.c:95:9: note: vect_is_simple_use: operand _75
common/quant.c:95:9: note: def_stmt: _75 = (int) _74;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: vect_is_simple_use: operand _76
common/quant.c:95:9: note: def_stmt: _76 = *pretmp_171[y_96][2];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _76 = *pretmp_171[y_96][2];
common/quant.c:95:9: note: worklist: examine stmt: _75 = (int) _74;
common/quant.c:95:9: note: vect_is_simple_use: operand _74
common/quant.c:95:9: note: def_stmt: _74 = *_53[2];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _74 = *_53[2];
common/quant.c:95:9: note: worklist: examine stmt: *_53[1] = _72;
common/quant.c:95:9: note: vect_is_simple_use: operand _72
common/quant.c:95:9: note: def_stmt: _72 = (short int) _71;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _72 = (short int) _71;
common/quant.c:95:9: note: vect_is_simple_use: operand _71
common/quant.c:95:9: note: def_stmt: _71 = _70 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _71 = _70 >> pretmp_174;
common/quant.c:95:9: note: vect_is_simple_use: operand _70
common/quant.c:95:9: note: def_stmt: _70 = f_50 + _69;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: def_stmt is out of loop.
common/quant.c:95:9: note: worklist: examine stmt: _70 = f_50 + _69;
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: def_stmt is out of loop.
common/quant.c:95:9: note: vect_is_simple_use: operand _69
common/quant.c:95:9: note: def_stmt: _69 = _67 * _68;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _69 = _67 * _68;
common/quant.c:95:9: note: vect_is_simple_use: operand _67
common/quant.c:95:9: note: def_stmt: _67 = (int) _66;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: vect_is_simple_use: operand _68
common/quant.c:95:9: note: def_stmt: _68 = *pretmp_171[y_96][1];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _68 = *pretmp_171[y_96][1];
common/quant.c:95:9: note: worklist: examine stmt: _67 = (int) _66;
common/quant.c:95:9: note: vect_is_simple_use: operand _66
common/quant.c:95:9: note: def_stmt: _66 = *_53[1];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _66 = *_53[1];
common/quant.c:95:9: note: worklist: examine stmt: *_53[0] = _64;
common/quant.c:95:9: note: vect_is_simple_use: operand _64
common/quant.c:95:9: note: def_stmt: _64 = (short int) _63;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _64 = (short int) _63;
common/quant.c:95:9: note: vect_is_simple_use: operand _63
common/quant.c:95:9: note: def_stmt: _63 = _61 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _63 = _61 >> pretmp_174;
common/quant.c:95:9: note: vect_is_simple_use: operand _61
common/quant.c:95:9: note: def_stmt: _61 = f_50 + _60;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: def_stmt is out of loop.
common/quant.c:95:9: note: worklist: examine stmt: _61 = f_50 + _60;
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: def_stmt is out of loop.
common/quant.c:95:9: note: vect_is_simple_use: operand _60
common/quant.c:95:9: note: def_stmt: _60 = _55 * _59;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _60 = _55 * _59;
common/quant.c:95:9: note: vect_is_simple_use: operand _55
common/quant.c:95:9: note: def_stmt: _55 = (int) _54;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: vect_is_simple_use: operand _59
common/quant.c:95:9: note: def_stmt: _59 = *pretmp_171[y_96][0];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _59 = *pretmp_171[y_96][0];
common/quant.c:95:9: note: worklist: examine stmt: _55 = (int) _54;
common/quant.c:95:9: note: vect_is_simple_use: operand _54
common/quant.c:95:9: note: def_stmt: _54 = *_53[0];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: mark relevant 4, live 0.
common/quant.c:95:9: note: worklist: examine stmt: _54 = *_53[0];
common/quant.c:95:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: _59 = *pretmp_171[y_96][0];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: *_53[0] = _64;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: _66 = *_53[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: _68 = *pretmp_171[y_96][1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: *_53[1] = _72;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: _74 = *_53[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: _76 = *pretmp_171[y_96][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: *_53[2] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: _82 = *_53[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: _84 = *pretmp_171[y_96][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: *_53[3] = _88;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _59 = *pretmp_171[y_96][0];
  stmt_b: *_53[0] = _64;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _59 = *pretmp_171[y_96][0];
  stmt_b: _66 = *_53[1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _59 = *pretmp_171[y_96][0];
  stmt_b: _68 = *pretmp_171[y_96][1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _59 = *pretmp_171[y_96][0];
  stmt_b: *_53[1] = _72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _59 = *pretmp_171[y_96][0];
  stmt_b: _74 = *_53[2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _59 = *pretmp_171[y_96][0];
  stmt_b: _76 = *pretmp_171[y_96][2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _59 = *pretmp_171[y_96][0];
  stmt_b: *_53[2] = _80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _59 = *pretmp_171[y_96][0];
  stmt_b: _82 = *_53[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _59 = *pretmp_171[y_96][0];
  stmt_b: _84 = *pretmp_171[y_96][3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _59 = *pretmp_171[y_96][0];
  stmt_b: *_53[3] = _88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_53[0] = _64;
  stmt_b: _66 = *_53[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[0] = _64;
  stmt_b: _68 = *pretmp_171[y_96][1];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[0] = _64;
  stmt_b: *_53[1] = _72;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[0] = _64;
  stmt_b: _74 = *_53[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[0] = _64;
  stmt_b: _76 = *pretmp_171[y_96][2];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[0] = _64;
  stmt_b: *_53[2] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[0] = _64;
  stmt_b: _82 = *_53[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[0] = _64;
  stmt_b: _84 = *pretmp_171[y_96][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[0] = _64;
  stmt_b: *_53[3] = _88;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _66 = *_53[1];
  stmt_b: _68 = *pretmp_171[y_96][1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_53[1];
  stmt_b: *_53[1] = _72;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _66 = *_53[1];
  stmt_b: _74 = *_53[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _66 = *_53[1];
  stmt_b: _76 = *pretmp_171[y_96][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_53[1];
  stmt_b: *_53[2] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _66 = *_53[1];
  stmt_b: _82 = *_53[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _66 = *_53[1];
  stmt_b: _84 = *pretmp_171[y_96][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _66 = *_53[1];
  stmt_b: *_53[3] = _88;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _68 = *pretmp_171[y_96][1];
  stmt_b: *_53[1] = _72;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _68 = *pretmp_171[y_96][1];
  stmt_b: _74 = *_53[2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _68 = *pretmp_171[y_96][1];
  stmt_b: _76 = *pretmp_171[y_96][2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _68 = *pretmp_171[y_96][1];
  stmt_b: *_53[2] = _80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _68 = *pretmp_171[y_96][1];
  stmt_b: _82 = *_53[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _68 = *pretmp_171[y_96][1];
  stmt_b: _84 = *pretmp_171[y_96][3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _68 = *pretmp_171[y_96][1];
  stmt_b: *_53[3] = _88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_53[1] = _72;
  stmt_b: _74 = *_53[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[1] = _72;
  stmt_b: _76 = *pretmp_171[y_96][2];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[1] = _72;
  stmt_b: *_53[2] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[1] = _72;
  stmt_b: _82 = *_53[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[1] = _72;
  stmt_b: _84 = *pretmp_171[y_96][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[1] = _72;
  stmt_b: *_53[3] = _88;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _74 = *_53[2];
  stmt_b: _76 = *pretmp_171[y_96][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_53[2];
  stmt_b: *_53[2] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _74 = *_53[2];
  stmt_b: _82 = *_53[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _74 = *_53[2];
  stmt_b: _84 = *pretmp_171[y_96][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_53[2];
  stmt_b: *_53[3] = _88;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _76 = *pretmp_171[y_96][2];
  stmt_b: *_53[2] = _80;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _76 = *pretmp_171[y_96][2];
  stmt_b: _82 = *_53[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _76 = *pretmp_171[y_96][2];
  stmt_b: _84 = *pretmp_171[y_96][3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _76 = *pretmp_171[y_96][2];
  stmt_b: *_53[3] = _88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_53[2] = _80;
  stmt_b: _82 = *_53[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[2] = _80;
  stmt_b: _84 = *pretmp_171[y_96][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_53[2] = _80;
  stmt_b: *_53[3] = _88;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_53[3];
  stmt_b: _84 = *pretmp_171[y_96][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_53[3];
  stmt_b: *_53[3] = _88;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _84 = *pretmp_171[y_96][3];
  stmt_b: *_53[3] = _88;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _54 = *_53[0];
  stmt_b: _54 = *_53[0];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _59 = *pretmp_171[y_96][0];
  stmt_b: _59 = *pretmp_171[y_96][0];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_53[0] = _64;
  stmt_b: *_53[0] = _64;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _66 = *_53[1];
  stmt_b: _66 = *_53[1];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _68 = *pretmp_171[y_96][1];
  stmt_b: _68 = *pretmp_171[y_96][1];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_53[1] = _72;
  stmt_b: *_53[1] = _72;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _74 = *_53[2];
  stmt_b: _74 = *_53[2];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _76 = *pretmp_171[y_96][2];
  stmt_b: _76 = *pretmp_171[y_96][2];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_53[2] = _80;
  stmt_b: *_53[2] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _82 = *_53[3];
  stmt_b: _82 = *_53[3];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _84 = *pretmp_171[y_96][3];
  stmt_b: _84 = *pretmp_171[y_96][3];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_53[3] = _88;
  stmt_b: *_53[3] = _88;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/quant.c:95:9: note: dependence distance  = 0.
common/quant.c:95:9: note: dependence distance == 0 between *_53[0] and *_53[0]
common/quant.c:95:9: note: dependence distance  = 0.
common/quant.c:95:9: note: dependence distance == 0 between *_53[1] and *_53[1]
common/quant.c:95:9: note: dependence distance  = 0.
common/quant.c:95:9: note: dependence distance == 0 between *_53[2] and *_53[2]
common/quant.c:95:9: note: dependence distance  = 0.
common/quant.c:95:9: note: dependence distance == 0 between *_53[3] and *_53[3]
common/quant.c:95:9: note: === vect_determine_vectorization_factor ===
common/quant.c:95:9: note: ==> examining phi: y_96 = PHI <y_90(9), 0(7)>

common/quant.c:95:9: note: ==> examining phi: .MEM_94 = PHI <.MEM_89(9), .MEM_10(D)(7)>

common/quant.c:95:9: note: ==> examining phi: ivtmp_166 = PHI <ivtmp_165(9), 4(7)>

common/quant.c:95:9: note: ==> examining statement: # DEBUG y => y_96

common/quant.c:95:9: note: skip.
common/quant.c:95:9: note: ==> examining statement: _51 = (long unsigned int) y_96;

common/quant.c:95:9: note: skip.
common/quant.c:95:9: note: ==> examining statement: _52 = _51 * 8;

common/quant.c:95:9: note: skip.
common/quant.c:95:9: note: ==> examining statement: _53 = dct_13(D) + _52;

common/quant.c:95:9: note: skip.
common/quant.c:95:9: note: ==> examining statement: _54 = *_53[0];

common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: _55 = (int) _54;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: _59 = *pretmp_171[y_96][0];

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _60 = _55 * _59;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _61 = f_50 + _60;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _63 = _61 >> pretmp_174;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _64 = (short int) _63;

common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: *_53[0] = _64;

common/quant.c:95:9: note: get vectype for scalar type:  int16_t
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: _66 = *_53[1];

common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: _67 = (int) _66;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: _68 = *pretmp_171[y_96][1];

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _69 = _67 * _68;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _70 = f_50 + _69;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _71 = _70 >> pretmp_174;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _72 = (short int) _71;

common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: *_53[1] = _72;

common/quant.c:95:9: note: get vectype for scalar type:  int16_t
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: _74 = *_53[2];

common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: _75 = (int) _74;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: _76 = *pretmp_171[y_96][2];

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _77 = _75 * _76;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _78 = f_50 + _77;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _79 = _78 >> pretmp_174;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _80 = (short int) _79;

common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: *_53[2] = _80;

common/quant.c:95:9: note: get vectype for scalar type:  int16_t
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: _82 = *_53[3];

common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: _83 = (int) _82;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: _84 = *pretmp_171[y_96][3];

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _85 = _83 * _84;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _86 = f_50 + _85;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _87 = _86 >> pretmp_174;

common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: get vectype for scalar type:  int
common/quant.c:95:9: note: vectype: vector(4) int
common/quant.c:95:9: note: nunits = 4
common/quant.c:95:9: note: ==> examining statement: _88 = (short int) _87;

common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: get vectype for scalar type:  short int
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: *_53[3] = _88;

common/quant.c:95:9: note: get vectype for scalar type:  int16_t
common/quant.c:95:9: note: vectype: vector(8) short int
common/quant.c:95:9: note: nunits = 8
common/quant.c:95:9: note: ==> examining statement: y_90 = y_96 + 1;

common/quant.c:95:9: note: skip.
common/quant.c:95:9: note: ==> examining statement: # DEBUG y => y_90

common/quant.c:95:9: note: skip.
common/quant.c:95:9: note: ==> examining statement: # DEBUG y => y_90

common/quant.c:95:9: note: skip.
common/quant.c:95:9: note: ==> examining statement: ivtmp_165 = ivtmp_166 - 1;

common/quant.c:95:9: note: skip.
common/quant.c:95:9: note: ==> examining statement: if (ivtmp_165 != 0)

common/quant.c:95:9: note: skip.
common/quant.c:95:9: note: vectorization factor = 8
common/quant.c:95:9: note: === vect_analyze_data_refs_alignment ===
common/quant.c:95:9: note: dependence distance  = 0.
common/quant.c:95:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_53[0] and *_53[0]
common/quant.c:95:9: note: dependence distance  = 0.
common/quant.c:95:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_53[1] and *_53[1]
common/quant.c:95:9: note: dependence distance  = 0.
common/quant.c:95:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_53[2] and *_53[2]
common/quant.c:95:9: note: dependence distance  = 0.
common/quant.c:95:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_53[3] and *_53[3]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *_53[0]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *pretmp_171[y_96][0]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *_53[0]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *_53[1]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *pretmp_171[y_96][1]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *_53[1]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *_53[2]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *pretmp_171[y_96][2]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *_53[2]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *_53[3]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *pretmp_171[y_96][3]
common/quant.c:95:9: note: vect_compute_data_ref_alignment:
common/quant.c:95:9: note: can't force alignment of ref: *_53[3]
common/quant.c:95:9: note: === vect_prune_runtime_alias_test_list ===
common/quant.c:95:9: note: === vect_enhance_data_refs_alignment ===
common/quant.c:95:9: note: vector alignment may not be reachable
common/quant.c:95:9: note: vect_can_advance_ivs_p:
common/quant.c:95:9: note: Analyze phi: y_96 = PHI <y_90(9), 0(7)>

common/quant.c:95:9: note: Analyze phi: .MEM_94 = PHI <.MEM_89(9), .MEM_10(D)(7)>

common/quant.c:95:9: note: virtual phi. skip.
common/quant.c:95:9: note: Analyze phi: ivtmp_166 = PHI <ivtmp_165(9), 4(7)>

Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:95:9: note: Vectorizing an unaligned access.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:95:9: note: Vectorizing an unaligned access.
common/quant.c:95:9: note: Vectorizing an unaligned access.
common/quant.c:95:9: note: === vect_analyze_slp ===
common/quant.c:95:9: note: Build SLP for *_53[0] = _64;

common/quant.c:95:9: note: Build SLP for *_53[1] = _72;

common/quant.c:95:9: note: Build SLP for *_53[2] = _80;

common/quant.c:95:9: note: Build SLP for *_53[3] = _88;

common/quant.c:95:9: note: vect_is_simple_use: operand _64
common/quant.c:95:9: note: def_stmt: _64 = (short int) _63;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _72
common/quant.c:95:9: note: def_stmt: _72 = (short int) _71;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _80
common/quant.c:95:9: note: def_stmt: _80 = (short int) _79;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _88
common/quant.c:95:9: note: def_stmt: _88 = (short int) _87;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: Build SLP for _64 = (short int) _63;

common/quant.c:95:9: note: Build SLP for _72 = (short int) _71;

common/quant.c:95:9: note: Build SLP for _80 = (short int) _79;

common/quant.c:95:9: note: Build SLP for _88 = (short int) _87;

common/quant.c:95:9: note: vect_is_simple_use: operand _63
common/quant.c:95:9: note: def_stmt: _63 = _61 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _71
common/quant.c:95:9: note: def_stmt: _71 = _70 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _79
common/quant.c:95:9: note: def_stmt: _79 = _78 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _87
common/quant.c:95:9: note: def_stmt: _87 = _86 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: Build SLP for _63 = _61 >> pretmp_174;

common/quant.c:95:9: note: Build SLP for _71 = _70 >> pretmp_174;

common/quant.c:95:9: note: Build SLP for _79 = _78 >> pretmp_174;

common/quant.c:95:9: note: Build SLP for _87 = _86 >> pretmp_174;

common/quant.c:95:9: note: vect_is_simple_use: operand _61
common/quant.c:95:9: note: def_stmt: _61 = f_50 + _60;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _70
common/quant.c:95:9: note: def_stmt: _70 = f_50 + _69;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _78
common/quant.c:95:9: note: def_stmt: _78 = f_50 + _77;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _86
common/quant.c:95:9: note: def_stmt: _86 = f_50 + _85;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: Build SLP for _61 = f_50 + _60;

common/quant.c:95:9: note: Build SLP for _70 = f_50 + _69;

common/quant.c:95:9: note: Build SLP for _78 = f_50 + _77;

common/quant.c:95:9: note: Build SLP for _86 = f_50 + _85;

common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _60
common/quant.c:95:9: note: def_stmt: _60 = _55 * _59;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _69
common/quant.c:95:9: note: def_stmt: _69 = _67 * _68;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _77
common/quant.c:95:9: note: def_stmt: _77 = _75 * _76;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _85
common/quant.c:95:9: note: def_stmt: _85 = _83 * _84;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: Build SLP for _60 = _55 * _59;

common/quant.c:95:9: note: Build SLP for _69 = _67 * _68;

common/quant.c:95:9: note: Build SLP for _77 = _75 * _76;

common/quant.c:95:9: note: Build SLP for _85 = _83 * _84;

common/quant.c:95:9: note: vect_is_simple_use: operand _55
common/quant.c:95:9: note: def_stmt: _55 = (int) _54;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _59
common/quant.c:95:9: note: def_stmt: _59 = *pretmp_171[y_96][0];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _67
common/quant.c:95:9: note: def_stmt: _67 = (int) _66;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _68
common/quant.c:95:9: note: def_stmt: _68 = *pretmp_171[y_96][1];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _75
common/quant.c:95:9: note: def_stmt: _75 = (int) _74;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _76
common/quant.c:95:9: note: def_stmt: _76 = *pretmp_171[y_96][2];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _83
common/quant.c:95:9: note: def_stmt: _83 = (int) _82;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _84
common/quant.c:95:9: note: def_stmt: _84 = *pretmp_171[y_96][3];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: Build SLP for _55 = (int) _54;

common/quant.c:95:9: note: Build SLP for _67 = (int) _66;

common/quant.c:95:9: note: Build SLP for _75 = (int) _74;

common/quant.c:95:9: note: Build SLP for _83 = (int) _82;

common/quant.c:95:9: note: vect_is_simple_use: operand _54
common/quant.c:95:9: note: def_stmt: _54 = *_53[0];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _66
common/quant.c:95:9: note: def_stmt: _66 = *_53[1];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _74
common/quant.c:95:9: note: def_stmt: _74 = *_53[2];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _82
common/quant.c:95:9: note: def_stmt: _82 = *_53[3];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: Build SLP for _54 = *_53[0];

common/quant.c:95:9: note: Build SLP for _66 = *_53[1];

common/quant.c:95:9: note: Build SLP for _74 = *_53[2];

common/quant.c:95:9: note: Build SLP for _82 = *_53[3];

common/quant.c:95:9: note: Build SLP for _59 = *pretmp_171[y_96][0];

Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:95:9: note: Build SLP for _68 = *pretmp_171[y_96][1];

common/quant.c:95:9: note: Build SLP for _76 = *pretmp_171[y_96][2];

common/quant.c:95:9: note: Build SLP for _84 = *pretmp_171[y_96][3];

common/quant.c:95:9: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:95:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:95:9: note: vect_is_simple_use: operand *_53[0]
common/quant.c:95:9: note: not ssa-name.
common/quant.c:95:9: note: vect_is_simple_use: operand _54
common/quant.c:95:9: note: def_stmt: _54 = *_53[0];
common/quant.c:95:9: note: type of def: 3.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:95:9: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:95:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:95:9: note: vect_is_simple_use: operand *pretmp_171[y_96][0]
common/quant.c:95:9: note: not ssa-name.
common/quant.c:95:9: note: vect_is_simple_use: operand _55
common/quant.c:95:9: note: def_stmt: _55 = (int) _54;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _59
common/quant.c:95:9: note: def_stmt: _59 = *pretmp_171[y_96][0];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _60
common/quant.c:95:9: note: def_stmt: _60 = _55 * _59;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _61
common/quant.c:95:9: note: def_stmt: _61 = f_50 + _60;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _63
common/quant.c:95:9: note: def_stmt: _63 = _61 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_model_store_cost: unaligned supported by hardware.
common/quant.c:95:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:95:9: note: vect_is_simple_use: operand _64
common/quant.c:95:9: note: def_stmt: _64 = (short int) _63;
common/quant.c:95:9: note: type of def: 3.
node 
	stmt 0 *_53[0] = _64;

	stmt 1 *_53[1] = _72;

	stmt 2 *_53[2] = _80;

	stmt 3 *_53[3] = _88;

node 
	stmt 0 _64 = (short int) _63;

	stmt 1 _72 = (short int) _71;

	stmt 2 _80 = (short int) _79;

	stmt 3 _88 = (short int) _87;

node 
	stmt 0 _63 = _61 >> pretmp_174;

	stmt 1 _71 = _70 >> pretmp_174;

	stmt 2 _79 = _78 >> pretmp_174;

	stmt 3 _87 = _86 >> pretmp_174;

node 
	stmt 0 _61 = f_50 + _60;

	stmt 1 _70 = f_50 + _69;

	stmt 2 _78 = f_50 + _77;

	stmt 3 _86 = f_50 + _85;

node 
	stmt 0 _60 = _55 * _59;

	stmt 1 _69 = _67 * _68;

	stmt 2 _77 = _75 * _76;

	stmt 3 _85 = _83 * _84;

node 
	stmt 0 _55 = (int) _54;

	stmt 1 _67 = (int) _66;

	stmt 2 _75 = (int) _74;

	stmt 3 _83 = (int) _82;

node 
	stmt 0 _54 = *_53[0];

	stmt 1 _66 = *_53[1];

	stmt 2 _74 = *_53[2];

	stmt 3 _82 = *_53[3];

node 
	stmt 0 _59 = *pretmp_171[y_96][0];

	stmt 1 _68 = *pretmp_171[y_96][1];

	stmt 2 _76 = *pretmp_171[y_96][2];

	stmt 3 _84 = *pretmp_171[y_96][3];

common/quant.c:95:9: note: === vect_make_slp_decision ===
common/quant.c:95:9: note: Decided to SLP 1 instances. Unrolling factor 2
common/quant.c:95:9: note: === vect_detect_hybrid_slp ===
common/quant.c:95:9: note: === vect_analyze_loop_operations ===
common/quant.c:95:9: note: Updating vectorization factor to 2
common/quant.c:95:9: note: examining phi: y_96 = PHI <y_90(9), 0(7)>

common/quant.c:95:9: note: examining phi: .MEM_94 = PHI <.MEM_89(9), .MEM_10(D)(7)>

common/quant.c:95:9: note: examining phi: ivtmp_166 = PHI <ivtmp_165(9), 4(7)>

common/quant.c:95:9: note: ==> examining statement: # DEBUG y => y_96
common/quant.c:95:9: note: irrelevant.
common/quant.c:95:9: note: ==> examining statement: _51 = (long unsigned int) y_96;
common/quant.c:95:9: note: irrelevant.
common/quant.c:95:9: note: ==> examining statement: _52 = _51 * 8;
common/quant.c:95:9: note: irrelevant.
common/quant.c:95:9: note: ==> examining statement: _53 = dct_13(D) + _52;
common/quant.c:95:9: note: irrelevant.
common/quant.c:95:9: note: ==> examining statement: _54 = *_53[0];
common/quant.c:95:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:95:9: note: vect_is_simple_use: operand *_53[0]
common/quant.c:95:9: note: not ssa-name.
common/quant.c:95:9: note: use not simple.
common/quant.c:95:9: note: ==> examining statement: _55 = (int) _54;
common/quant.c:95:9: note: vect_is_simple_use: operand _54
common/quant.c:95:9: note: def_stmt: _54 = *_53[0];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_conversion ===
common/quant.c:95:9: note: ==> examining statement: _59 = *pretmp_171[y_96][0];
common/quant.c:95:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:95:9: note: vect_is_simple_use: operand *pretmp_171[y_96][0]
common/quant.c:95:9: note: not ssa-name.
common/quant.c:95:9: note: use not simple.
common/quant.c:95:9: note: ==> examining statement: _60 = _55 * _59;
common/quant.c:95:9: note: vect_is_simple_use: operand _55
common/quant.c:95:9: note: def_stmt: _55 = (int) _54;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _59
common/quant.c:95:9: note: def_stmt: _59 = *pretmp_171[y_96][0];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_operation ===
common/quant.c:95:9: note: ==> examining statement: _61 = f_50 + _60;
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _60
common/quant.c:95:9: note: def_stmt: _60 = _55 * _59;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_operation ===
common/quant.c:95:9: note: ==> examining statement: _63 = _61 >> pretmp_174;
common/quant.c:95:9: note: vect_is_simple_use: operand _61
common/quant.c:95:9: note: def_stmt: _61 = f_50 + _60;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vector/scalar shift/rotate found.
common/quant.c:95:9: note: === vectorizable_shift ===
common/quant.c:95:9: note: ==> examining statement: _64 = (short int) _63;
common/quant.c:95:9: note: vect_is_simple_use: operand _63
common/quant.c:95:9: note: def_stmt: _63 = _61 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_conversion ===
common/quant.c:95:9: note: ==> examining statement: *_53[0] = _64;
common/quant.c:95:9: note: vect_is_simple_use: operand _64
common/quant.c:95:9: note: def_stmt: _64 = (short int) _63;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _72
common/quant.c:95:9: note: def_stmt: _72 = (short int) _71;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _80
common/quant.c:95:9: note: def_stmt: _80 = (short int) _79;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _88
common/quant.c:95:9: note: def_stmt: _88 = (short int) _87;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: ==> examining statement: _66 = *_53[1];
common/quant.c:95:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:95:9: note: vect_is_simple_use: operand *_53[1]
common/quant.c:95:9: note: not ssa-name.
common/quant.c:95:9: note: use not simple.
common/quant.c:95:9: note: ==> examining statement: _67 = (int) _66;
common/quant.c:95:9: note: vect_is_simple_use: operand _66
common/quant.c:95:9: note: def_stmt: _66 = *_53[1];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_conversion ===
common/quant.c:95:9: note: ==> examining statement: _68 = *pretmp_171[y_96][1];
common/quant.c:95:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:95:9: note: vect_is_simple_use: operand *pretmp_171[y_96][1]
common/quant.c:95:9: note: not ssa-name.
common/quant.c:95:9: note: use not simple.
common/quant.c:95:9: note: ==> examining statement: _69 = _67 * _68;
common/quant.c:95:9: note: vect_is_simple_use: operand _67
common/quant.c:95:9: note: def_stmt: _67 = (int) _66;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _68
common/quant.c:95:9: note: def_stmt: _68 = *pretmp_171[y_96][1];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_operation ===
common/quant.c:95:9: note: ==> examining statement: _70 = f_50 + _69;
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _69
common/quant.c:95:9: note: def_stmt: _69 = _67 * _68;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_operation ===
common/quant.c:95:9: note: ==> examining statement: _71 = _70 >> pretmp_174;
common/quant.c:95:9: note: vect_is_simple_use: operand _70
common/quant.c:95:9: note: def_stmt: _70 = f_50 + _69;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vector/scalar shift/rotate found.
common/quant.c:95:9: note: === vectorizable_shift ===
common/quant.c:95:9: note: ==> examining statement: _72 = (short int) _71;
common/quant.c:95:9: note: vect_is_simple_use: operand _71
common/quant.c:95:9: note: def_stmt: _71 = _70 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_conversion ===
common/quant.c:95:9: note: ==> examining statement: *_53[1] = _72;
common/quant.c:95:9: note: vect_is_simple_use: operand _72
common/quant.c:95:9: note: def_stmt: _72 = (short int) _71;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: ==> examining statement: _74 = *_53[2];
common/quant.c:95:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:95:9: note: vect_is_simple_use: operand *_53[2]
common/quant.c:95:9: note: not ssa-name.
common/quant.c:95:9: note: use not simple.
common/quant.c:95:9: note: ==> examining statement: _75 = (int) _74;
common/quant.c:95:9: note: vect_is_simple_use: operand _74
common/quant.c:95:9: note: def_stmt: _74 = *_53[2];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_conversion ===
common/quant.c:95:9: note: ==> examining statement: _76 = *pretmp_171[y_96][2];
common/quant.c:95:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:95:9: note: vect_is_simple_use: operand *pretmp_171[y_96][2]
common/quant.c:95:9: note: not ssa-name.
common/quant.c:95:9: note: use not simple.
common/quant.c:95:9: note: ==> examining statement: _77 = _75 * _76;
common/quant.c:95:9: note: vect_is_simple_use: operand _75
common/quant.c:95:9: note: def_stmt: _75 = (int) _74;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _76
common/quant.c:95:9: note: def_stmt: _76 = *pretmp_171[y_96][2];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_operation ===
common/quant.c:95:9: note: ==> examining statement: _78 = f_50 + _77;
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _77
common/quant.c:95:9: note: def_stmt: _77 = _75 * _76;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_operation ===
common/quant.c:95:9: note: ==> examining statement: _79 = _78 >> pretmp_174;
common/quant.c:95:9: note: vect_is_simple_use: operand _78
common/quant.c:95:9: note: def_stmt: _78 = f_50 + _77;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vector/scalar shift/rotate found.
common/quant.c:95:9: note: === vectorizable_shift ===
common/quant.c:95:9: note: ==> examining statement: _80 = (short int) _79;
common/quant.c:95:9: note: vect_is_simple_use: operand _79
common/quant.c:95:9: note: def_stmt: _79 = _78 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_conversion ===
common/quant.c:95:9: note: ==> examining statement: *_53[2] = _80;
common/quant.c:95:9: note: vect_is_simple_use: operand _80
common/quant.c:95:9: note: def_stmt: _80 = (short int) _79;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: ==> examining statement: _82 = *_53[3];
common/quant.c:95:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:95:9: note: vect_is_simple_use: operand *_53[3]
common/quant.c:95:9: note: not ssa-name.
common/quant.c:95:9: note: use not simple.
common/quant.c:95:9: note: ==> examining statement: _83 = (int) _82;
common/quant.c:95:9: note: vect_is_simple_use: operand _82
common/quant.c:95:9: note: def_stmt: _82 = *_53[3];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_conversion ===
common/quant.c:95:9: note: ==> examining statement: _84 = *pretmp_171[y_96][3];
common/quant.c:95:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:95:9: note: vect_is_simple_use: operand *pretmp_171[y_96][3]
common/quant.c:95:9: note: not ssa-name.
common/quant.c:95:9: note: use not simple.
common/quant.c:95:9: note: ==> examining statement: _85 = _83 * _84;
common/quant.c:95:9: note: vect_is_simple_use: operand _83
common/quant.c:95:9: note: def_stmt: _83 = (int) _82;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _84
common/quant.c:95:9: note: def_stmt: _84 = *pretmp_171[y_96][3];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_operation ===
common/quant.c:95:9: note: ==> examining statement: _86 = f_50 + _85;
common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _85
common/quant.c:95:9: note: def_stmt: _85 = _83 * _84;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_operation ===
common/quant.c:95:9: note: ==> examining statement: _87 = _86 >> pretmp_174;
common/quant.c:95:9: note: vect_is_simple_use: operand _86
common/quant.c:95:9: note: def_stmt: _86 = f_50 + _85;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vector/scalar shift/rotate found.
common/quant.c:95:9: note: === vectorizable_shift ===
common/quant.c:95:9: note: ==> examining statement: _88 = (short int) _87;
common/quant.c:95:9: note: vect_is_simple_use: operand _87
common/quant.c:95:9: note: def_stmt: _87 = _86 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: === vectorizable_conversion ===
common/quant.c:95:9: note: ==> examining statement: *_53[3] = _88;
common/quant.c:95:9: note: vect_is_simple_use: operand _88
common/quant.c:95:9: note: def_stmt: _88 = (short int) _87;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: ==> examining statement: y_90 = y_96 + 1;
common/quant.c:95:9: note: irrelevant.
common/quant.c:95:9: note: ==> examining statement: # DEBUG y => y_90
common/quant.c:95:9: note: irrelevant.
common/quant.c:95:9: note: ==> examining statement: # DEBUG y => y_90
common/quant.c:95:9: note: irrelevant.
common/quant.c:95:9: note: ==> examining statement: ivtmp_165 = ivtmp_166 - 1;
common/quant.c:95:9: note: irrelevant.
common/quant.c:95:9: note: ==> examining statement: if (ivtmp_165 != 0)
common/quant.c:95:9: note: irrelevant.
common/quant.c:95:9: note: vectorization_factor = 2, niters = 4
common/quant.c:95:9: note: === vect_update_slp_costs_according_to_vf ===
common/quant.c:95:9: note: Cost model analysis: 
  Vector inside of loop cost: 11
  Vector prologue cost: 2
  Vector epilogue cost: 0
  Scalar iteration cost: 32
  Scalar outside cost: 0
  Vector outside cost: 2
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
common/quant.c:95:9: note:   Runtime profitability threshold = 1
common/quant.c:95:9: note:   Static estimate profitability threshold = 1
common/quant.c:95:9: note: loop vectorized
common/quant.c:95:9: note: === vec_transform_loop ===
common/quant.c:95:9: note: ------>vectorizing phi: y_96 = PHI <y_90(9), 0(13)>

common/quant.c:95:9: note: ------>vectorizing phi: .MEM_94 = PHI <.MEM_89(9), .MEM_10(D)(13)>

common/quant.c:95:9: note: ------>vectorizing phi: ivtmp_166 = PHI <ivtmp_165(9), 4(13)>

common/quant.c:95:9: note: ------>vectorizing statement: # DEBUG y => y_96

common/quant.c:95:9: note: ------>vectorizing statement: _51 = (long unsigned int) y_96;

common/quant.c:95:9: note: ------>vectorizing statement: _52 = _51 * 8;

common/quant.c:95:9: note: ------>vectorizing statement: _53 = dct_13(D) + _52;

common/quant.c:95:9: note: ------>vectorizing statement: _54 = *_53[0];

common/quant.c:95:9: note: === scheduling SLP instances ===
common/quant.c:95:9: note: ------>vectorizing SLP node starting from: _54 = *_53[0];

common/quant.c:95:9: note: transform load. ncopies = 1
common/quant.c:95:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_13(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:95:9: note: created vectp_dct.67_26
common/quant.c:95:9: note: add new stmt: vect__54.68_138 = MEM[(short int *)vectp_dct.66_140];
common/quant.c:95:9: note: ------>vectorizing SLP node starting from: _55 = (int) _54;

common/quant.c:95:9: note: vect_is_simple_use: operand _54
common/quant.c:95:9: note: def_stmt: _54 = *_53[0];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: transform conversion. ncopies = 1.
common/quant.c:95:9: note: add new stmt: vect__55.69_137 = [vec_unpack_lo_expr] vect__54.68_138;
common/quant.c:95:9: note: add new stmt: vect__55.69_136 = [vec_unpack_hi_expr] vect__54.68_138;
common/quant.c:95:9: note: ------>vectorizing SLP node starting from: _59 = *pretmp_171[y_96][0];

common/quant.c:95:9: note: transform load. ncopies = 1
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:95:9: note: create vector_type-pointer variable to type: vector(4) int  vectorizing an array ref: *pretmp_171
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:95:9: note: created vectp.71_135
common/quant.c:95:9: note: add new stmt: vect__59.72_130 = MEM[(int *)vectp.70_132];
common/quant.c:95:9: note: add new stmt: vectp.70_129 = vectp.70_132 + 16;
common/quant.c:95:9: note: add new stmt: vect__59.73_128 = MEM[(int *)vectp.70_129];
common/quant.c:95:9: note: ------>vectorizing SLP node starting from: _60 = _55 * _59;

common/quant.c:95:9: note: vect_is_simple_use: operand _55
common/quant.c:95:9: note: def_stmt: _55 = (int) _54;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _59
common/quant.c:95:9: note: def_stmt: _59 = *pretmp_171[y_96][0];
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: transform binary/unary operation.
common/quant.c:95:9: note: add new stmt: vect__60.74_127 = vect__55.69_137 * vect__59.72_130;
common/quant.c:95:9: note: add new stmt: vect__60.74_126 = vect__55.69_136 * vect__59.73_128;
common/quant.c:95:9: note: ------>vectorizing SLP node starting from: _61 = f_50 + _60;

common/quant.c:95:9: note: vect_is_simple_use: operand f_50
common/quant.c:95:9: note: def_stmt: f_50 = 1 << _49;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vect_is_simple_use: operand _60
common/quant.c:95:9: note: def_stmt: _60 = _55 * _59;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: transform binary/unary operation.
common/quant.c:95:9: note: created new init_stmt: vect_cst_.76_125 = {f_50, f_50, f_50, f_50};
common/quant.c:95:9: note: add new stmt: vect__61.75_124 = vect_cst_.76_125 + vect__60.74_127;
common/quant.c:95:9: note: add new stmt: vect__61.75_123 = vect_cst_.76_125 + vect__60.74_126;
common/quant.c:95:9: note: ------>vectorizing SLP node starting from: _63 = _61 >> pretmp_174;

common/quant.c:95:9: note: vect_is_simple_use: operand _61
common/quant.c:95:9: note: def_stmt: _61 = f_50 + _60;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand pretmp_174
common/quant.c:95:9: note: def_stmt: pretmp_174 = -i_qbits_9;
common/quant.c:95:9: note: type of def: 2.
common/quant.c:95:9: note: vector/scalar shift/rotate found.
common/quant.c:95:9: note: transform binary/unary operation.
common/quant.c:95:9: note: operand 1 using scalar mode.
common/quant.c:95:9: note: add new stmt: vect__63.77_122 = vect__61.75_124 >> pretmp_174;
common/quant.c:95:9: note: add new stmt: vect__63.77_121 = vect__61.75_123 >> pretmp_174;
common/quant.c:95:9: note: ------>vectorizing SLP node starting from: _64 = (short int) _63;

common/quant.c:95:9: note: vect_is_simple_use: operand _63
common/quant.c:95:9: note: def_stmt: _63 = _61 >> pretmp_174;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: transform conversion. ncopies = 1.
common/quant.c:95:9: note: add new stmt: vect__64.78_120 = VEC_PACK_TRUNC_EXPR <vect__63.77_122, vect__63.77_121>;
common/quant.c:95:9: note: ------>vectorizing SLP node starting from: *_53[0] = _64;

common/quant.c:95:9: note: vect_is_simple_use: operand _64
common/quant.c:95:9: note: def_stmt: _64 = (short int) _63;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _72
common/quant.c:95:9: note: def_stmt: _72 = (short int) _71;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _80
common/quant.c:95:9: note: def_stmt: _80 = (short int) _79;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: vect_is_simple_use: operand _88
common/quant.c:95:9: note: def_stmt: _88 = (short int) _87;
common/quant.c:95:9: note: type of def: 3.
common/quant.c:95:9: note: transform store. ncopies = 1
common/quant.c:95:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_13(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:95:9: note: created vectp_dct.80_119
common/quant.c:95:9: note: add new stmt: MEM[(short int *)vectp_dct.79_118] = vect__64.78_120;
common/quant.c:95:9: note: vectorizing stmts using SLP.
common/quant.c:95:9: note: ------>vectorizing statement: vect__55.69_137 = [vec_unpack_lo_expr] vect__54.68_138;

common/quant.c:95:9: note: ------>vectorizing statement: vect__55.69_136 = [vec_unpack_hi_expr] vect__54.68_138;

common/quant.c:95:9: note: ------>vectorizing statement: _55 = (int) _54;

common/quant.c:95:9: note: ------>vectorizing statement: vect__59.72_130 = MEM[(int *)vectp.70_132];

common/quant.c:95:9: note: ------>vectorizing statement: vectp.70_129 = vectp.70_132 + 16;

common/quant.c:95:9: note: ------>vectorizing statement: vect__59.73_128 = MEM[(int *)vectp.70_129];

common/quant.c:95:9: note: ------>vectorizing statement: _59 = *pretmp_171[y_96][0];

common/quant.c:95:9: note: ------>vectorizing statement: vect__60.74_127 = vect__55.69_137 * vect__59.72_130;

common/quant.c:95:9: note: ------>vectorizing statement: vect__60.74_126 = vect__55.69_136 * vect__59.73_128;

common/quant.c:95:9: note: ------>vectorizing statement: _60 = _55 * _59;

common/quant.c:95:9: note: ------>vectorizing statement: vect__61.75_124 = vect_cst_.76_125 + vect__60.74_127;

common/quant.c:95:9: note: ------>vectorizing statement: vect__61.75_123 = vect_cst_.76_125 + vect__60.74_126;

common/quant.c:95:9: note: ------>vectorizing statement: _61 = f_50 + _60;

common/quant.c:95:9: note: ------>vectorizing statement: vect__63.77_122 = vect__61.75_124 >> pretmp_174;

common/quant.c:95:9: note: ------>vectorizing statement: vect__63.77_121 = vect__61.75_123 >> pretmp_174;

common/quant.c:95:9: note: ------>vectorizing statement: _63 = _61 >> pretmp_174;

common/quant.c:95:9: note: ------>vectorizing statement: vect__64.78_120 = VEC_PACK_TRUNC_EXPR <vect__63.77_122, vect__63.77_121>;

common/quant.c:95:9: note: ------>vectorizing statement: _64 = (short int) _63;

common/quant.c:95:9: note: ------>vectorizing statement: _66 = *_53[1];

common/quant.c:95:9: note: ------>vectorizing statement: _67 = (int) _66;

common/quant.c:95:9: note: ------>vectorizing statement: _68 = *pretmp_171[y_96][1];

common/quant.c:95:9: note: ------>vectorizing statement: _69 = _67 * _68;

common/quant.c:95:9: note: ------>vectorizing statement: _70 = f_50 + _69;

common/quant.c:95:9: note: ------>vectorizing statement: _71 = _70 >> pretmp_174;

common/quant.c:95:9: note: ------>vectorizing statement: _72 = (short int) _71;

common/quant.c:95:9: note: ------>vectorizing statement: _74 = *_53[2];

common/quant.c:95:9: note: ------>vectorizing statement: _75 = (int) _74;

common/quant.c:95:9: note: ------>vectorizing statement: _76 = *pretmp_171[y_96][2];

common/quant.c:95:9: note: ------>vectorizing statement: _77 = _75 * _76;

common/quant.c:95:9: note: ------>vectorizing statement: _78 = f_50 + _77;

common/quant.c:95:9: note: ------>vectorizing statement: _79 = _78 >> pretmp_174;

common/quant.c:95:9: note: ------>vectorizing statement: _80 = (short int) _79;

common/quant.c:95:9: note: ------>vectorizing statement: _82 = *_53[3];

common/quant.c:95:9: note: ------>vectorizing statement: _83 = (int) _82;

common/quant.c:95:9: note: ------>vectorizing statement: _84 = *pretmp_171[y_96][3];

common/quant.c:95:9: note: ------>vectorizing statement: _85 = _83 * _84;

common/quant.c:95:9: note: ------>vectorizing statement: _86 = f_50 + _85;

common/quant.c:95:9: note: ------>vectorizing statement: _87 = _86 >> pretmp_174;

common/quant.c:95:9: note: ------>vectorizing statement: _88 = (short int) _87;

common/quant.c:95:9: note: ------>vectorizing statement: MEM[(short int *)vectp_dct.79_118] = vect__64.78_120;

common/quant.c:95:9: note: ------>vectorizing statement: y_90 = y_96 + 1;

common/quant.c:95:9: note: ------>vectorizing statement: # DEBUG y => y_90

common/quant.c:95:9: note: ------>vectorizing statement: # DEBUG y => y_90

common/quant.c:95:9: note: ------>vectorizing statement: ivtmp_165 = ivtmp_166 - 1;

common/quant.c:95:9: note: ------>vectorizing statement: vectp_dct.66_139 = vectp_dct.66_140 + 16;

common/quant.c:95:9: note: ------>vectorizing statement: vectp.70_131 = vectp.70_129 + 16;

common/quant.c:95:9: note: ------>vectorizing statement: vectp_dct.79_117 = vectp_dct.79_118 + 16;

common/quant.c:95:9: note: ------>vectorizing statement: if (ivtmp_165 != 0)


loop at common/quant.c:97: if (ivtmp_81 < 2)

;; Scaling loop 1 with scale 0.500000, bounding iterations to 2 from guessed 3
;; guessed iterations are now 2
common/quant.c:95:9: note: LOOP VECTORIZED

common/quant.c:76:13: note: vectorized 2 loops in function.
Merging blocks 3 and 11
Merging blocks 7 and 13
dequant_4x4 (int16_t[4] * dct, int[4][4] * dequant_mf, int i_qp)
{
  vector(8) short int * vectp_dct.80;
  vector(8) short int * vectp_dct.79;
  vector(8) short int vect__64.78;
  vector(4) int vect__63.77;
  const vector(4) int vect_cst_.76;
  const vector(4) int vect__61.75;
  vector(4) int vect__60.74;
  vector(4) int vect__59.73;
  vector(4) int vect__59.72;
  vector(4) int * vectp.71;
  vector(4) int * vectp.70;
  vector(4) int vect__55.69;
  vector(8) short int vect__54.68;
  vector(8) short int * vectp_dct.67;
  vector(8) short int * vectp_dct.66;
  vector(8) short int * vectp_dct.65;
  vector(8) short int * vectp_dct.64;
  vector(8) short int vect__25.63;
  vector(4) int vect__24.62;
  vector(4) int vect__23.61;
  vector(4) int vect__22.60;
  vector(4) int vect__22.59;
  vector(4) int * vectp.58;
  vector(4) int * vectp.57;
  vector(4) int vect__17.56;
  vector(8) short int vect__16.55;
  vector(8) short int * vectp_dct.54;
  vector(8) short int * vectp_dct.53;
  const int f;
  int y;
  const int i_qbits;
  const int i_mf;
  unsigned int ivtmp_5;
  int _8;
  long unsigned int _11;
  long unsigned int _12;
  int16_t[4] * _15;
  short int _16;
  int _17;
  int _22;
  int _23;
  int _24;
  short int _25;
  short int _27;
  int _28;
  int _29;
  int _30;
  int _31;
  short int _32;
  short int _34;
  int _35;
  int _36;
  int _37;
  int _38;
  short int _39;
  unsigned int ivtmp_40;
  short int _41;
  int _42;
  int _43;
  int _44;
  int _45;
  short int _46;
  unsigned int ivtmp_47;
  int _49;
  long unsigned int _51;
  long unsigned int _52;
  int16_t[4] * _53;
  short int _54;
  int _55;
  int _59;
  int _60;
  int _61;
  int _63;
  short int _64;
  short int _66;
  int _67;
  int _68;
  int _69;
  int _70;
  int _71;
  short int _72;
  short int _74;
  int _75;
  int _76;
  int _77;
  int _78;
  int _79;
  short int _80;
  unsigned int ivtmp_81;
  short int _82;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  short int _88;
  unsigned int ivtmp_89;
  long unsigned int _133;
  long unsigned int _134;
  long unsigned int _155;
  long unsigned int _156;
  unsigned int ivtmp_165;
  unsigned int ivtmp_166;
  unsigned int ivtmp_167;
  long unsigned int pretmp_169;
  long unsigned int pretmp_170;
  int[4][4] * pretmp_171;
  int pretmp_174;
  long unsigned int pretmp_178;
  long unsigned int pretmp_179;
  int[4][4] * pretmp_180;

  <bb 2>:
  i_mf_7 = i_qp_6(D) % 6;
  # DEBUG i_mf => i_mf_7
  _8 = i_qp_6(D) / 6;
  i_qbits_9 = _8 + -4;
  # DEBUG i_qbits => i_qbits_9
  if (i_qbits_9 >= 0)
    goto <bb 3>;
  else
    goto <bb 8>;

  <bb 3>:
  pretmp_178 = (long unsigned int) i_mf_7;
  pretmp_179 = pretmp_178 * 64;
  pretmp_180 = dequant_mf_20(D) + pretmp_179;
  vectp_dct.54_163 = dct_13(D);
  _156 = (long unsigned int) i_mf_7;
  _155 = _156 * 64;
  vectp.58_157 = dequant_mf_20(D) + _155;
  vectp_dct.65_144 = dct_13(D);

  <bb 4>:
  # y_97 = PHI <0(3), y_48(5)>
  # ivtmp_5 = PHI <4(3), ivtmp_167(5)>
  # vectp_dct.53_162 = PHI <vectp_dct.54_163(3), vectp_dct.53_161(5)>
  # vectp.57_154 = PHI <vectp.58_157(3), vectp.57_153(5)>
  # vectp_dct.64_143 = PHI <vectp_dct.65_144(3), vectp_dct.64_142(5)>
  # ivtmp_47 = PHI <0(3), ivtmp_40(5)>
  # DEBUG y => y_97
  _11 = (long unsigned int) y_97;
  _12 = _11 * 8;
  _15 = dct_13(D) + _12;
  vect__16.55_160 = MEM[(short int *)vectp_dct.53_162];
  _16 = *_15[0];
  vect__17.56_159 = [vec_unpack_lo_expr] vect__16.55_160;
  vect__17.56_158 = [vec_unpack_hi_expr] vect__16.55_160;
  _17 = (int) _16;
  vect__22.59_152 = MEM[(int *)vectp.57_154];
  vectp.57_151 = vectp.57_154 + 16;
  vect__22.60_150 = MEM[(int *)vectp.57_151];
  _22 = *pretmp_180[y_97][0];
  vect__23.61_149 = vect__17.56_159 * vect__22.59_152;
  vect__23.61_148 = vect__17.56_158 * vect__22.60_150;
  _23 = _17 * _22;
  vect__24.62_147 = vect__23.61_149 << i_qbits_9;
  vect__24.62_146 = vect__23.61_148 << i_qbits_9;
  _24 = _23 << i_qbits_9;
  vect__25.63_145 = VEC_PACK_TRUNC_EXPR <vect__24.62_147, vect__24.62_146>;
  _25 = (short int) _24;
  _27 = *_15[1];
  _28 = (int) _27;
  _29 = *pretmp_180[y_97][1];
  _30 = _28 * _29;
  _31 = _30 << i_qbits_9;
  _32 = (short int) _31;
  _34 = *_15[2];
  _35 = (int) _34;
  _36 = *pretmp_180[y_97][2];
  _37 = _35 * _36;
  _38 = _37 << i_qbits_9;
  _39 = (short int) _38;
  _41 = *_15[3];
  _42 = (int) _41;
  _43 = *pretmp_180[y_97][3];
  _44 = _42 * _43;
  _45 = _44 << i_qbits_9;
  _46 = (short int) _45;
  MEM[(short int *)vectp_dct.64_143] = vect__25.63_145;
  y_48 = y_97 + 1;
  # DEBUG y => y_48
  # DEBUG y => y_48
  ivtmp_167 = ivtmp_5 - 1;
  vectp_dct.53_161 = vectp_dct.53_162 + 16;
  vectp.57_153 = vectp.57_151 + 16;
  vectp_dct.64_142 = vectp_dct.64_143 + 16;
  ivtmp_40 = ivtmp_47 + 1;
  if (ivtmp_40 < 2)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  goto <bb 4>;

  <bb 6>:

  <bb 7>:
  return;

  <bb 8>:
  _49 = ~i_qbits_9;
  f_50 = 1 << _49;
  # DEBUG f => f_50
  # DEBUG y => 0
  # DEBUG y => 0
  pretmp_169 = (long unsigned int) i_mf_7;
  pretmp_170 = pretmp_169 * 64;
  pretmp_171 = dequant_mf_20(D) + pretmp_170;
  pretmp_174 = -i_qbits_9;
  vectp_dct.67_26 = dct_13(D);
  _134 = (long unsigned int) i_mf_7;
  _133 = _134 * 64;
  vectp.71_135 = dequant_mf_20(D) + _133;
  vect_cst_.76_125 = {f_50, f_50, f_50, f_50};
  vectp_dct.80_119 = dct_13(D);

  <bb 9>:
  # y_96 = PHI <y_90(11), 0(8)>
  # ivtmp_166 = PHI <ivtmp_165(11), 4(8)>
  # vectp_dct.66_140 = PHI <vectp_dct.66_139(11), vectp_dct.67_26(8)>
  # vectp.70_132 = PHI <vectp.70_131(11), vectp.71_135(8)>
  # vectp_dct.79_118 = PHI <vectp_dct.79_117(11), vectp_dct.80_119(8)>
  # ivtmp_89 = PHI <ivtmp_81(11), 0(8)>
  # DEBUG y => y_96
  _51 = (long unsigned int) y_96;
  _52 = _51 * 8;
  _53 = dct_13(D) + _52;
  vect__54.68_138 = MEM[(short int *)vectp_dct.66_140];
  _54 = *_53[0];
  vect__55.69_137 = [vec_unpack_lo_expr] vect__54.68_138;
  vect__55.69_136 = [vec_unpack_hi_expr] vect__54.68_138;
  _55 = (int) _54;
  vect__59.72_130 = MEM[(int *)vectp.70_132];
  vectp.70_129 = vectp.70_132 + 16;
  vect__59.73_128 = MEM[(int *)vectp.70_129];
  _59 = *pretmp_171[y_96][0];
  vect__60.74_127 = vect__55.69_137 * vect__59.72_130;
  vect__60.74_126 = vect__55.69_136 * vect__59.73_128;
  _60 = _55 * _59;
  vect__61.75_124 = vect_cst_.76_125 + vect__60.74_127;
  vect__61.75_123 = vect_cst_.76_125 + vect__60.74_126;
  _61 = f_50 + _60;
  vect__63.77_122 = vect__61.75_124 >> pretmp_174;
  vect__63.77_121 = vect__61.75_123 >> pretmp_174;
  _63 = _61 >> pretmp_174;
  vect__64.78_120 = VEC_PACK_TRUNC_EXPR <vect__63.77_122, vect__63.77_121>;
  _64 = (short int) _63;
  _66 = *_53[1];
  _67 = (int) _66;
  _68 = *pretmp_171[y_96][1];
  _69 = _67 * _68;
  _70 = f_50 + _69;
  _71 = _70 >> pretmp_174;
  _72 = (short int) _71;
  _74 = *_53[2];
  _75 = (int) _74;
  _76 = *pretmp_171[y_96][2];
  _77 = _75 * _76;
  _78 = f_50 + _77;
  _79 = _78 >> pretmp_174;
  _80 = (short int) _79;
  _82 = *_53[3];
  _83 = (int) _82;
  _84 = *pretmp_171[y_96][3];
  _85 = _83 * _84;
  _86 = f_50 + _85;
  _87 = _86 >> pretmp_174;
  _88 = (short int) _87;
  MEM[(short int *)vectp_dct.79_118] = vect__64.78_120;
  y_90 = y_96 + 1;
  # DEBUG y => y_90
  # DEBUG y => y_90
  ivtmp_165 = ivtmp_166 - 1;
  vectp_dct.66_139 = vectp_dct.66_140 + 16;
  vectp.70_131 = vectp.70_129 + 16;
  vectp_dct.79_117 = vectp_dct.79_118 + 16;
  ivtmp_81 = ivtmp_89 + 1;
  if (ivtmp_81 < 2)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 7>;

  <bb 11>:
  goto <bb 9>;

}



;; Function dequant_8x8 (dequant_8x8, funcdef_no=120, decl_uid=5930, cgraph_uid=120, symbol_order=163)


Analyzing loop at common/quant.c:113
common/quant.c:113:9: note: ===== analyze_loop_nest =====
common/quant.c:113:9: note: === vect_analyze_loop_form ===
split exit edge.
common/quant.c:113:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/quant.c:113:9: note: === vect_analyze_data_refs ===
Creating dr for *_15[0]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 0
	Access function 1: {0B, +, 16}_2
Creating dr for *pretmp_312[y_157][0]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: *pretmp_312
	Access function 0: 0
	Access function 1: {0, +, 1}_2
Creating dr for *_15[0]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 0
	Access function 1: {0B, +, 16}_2
Creating dr for *_15[1]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 1
	Access function 1: {0B, +, 16}_2
Creating dr for *pretmp_312[y_157][1]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: *pretmp_312
	Access function 0: 1
	Access function 1: {0, +, 1}_2
Creating dr for *_15[1]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 1
	Access function 1: {0B, +, 16}_2
Creating dr for *_15[2]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 2
	Access function 1: {0B, +, 16}_2
Creating dr for *pretmp_312[y_157][2]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 8
	step: 32
	aligned to: 128
	base_object: *pretmp_312
	Access function 0: 2
	Access function 1: {0, +, 1}_2
Creating dr for *_15[2]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 2
	Access function 1: {0B, +, 16}_2
Creating dr for *_15[3]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 3
	Access function 1: {0B, +, 16}_2
Creating dr for *pretmp_312[y_157][3]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 12
	step: 32
	aligned to: 128
	base_object: *pretmp_312
	Access function 0: 3
	Access function 1: {0, +, 1}_2
Creating dr for *_15[3]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 3
	Access function 1: {0B, +, 16}_2
Creating dr for *_15[4]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 4
	Access function 1: {0B, +, 16}_2
Creating dr for *pretmp_312[y_157][4]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 16
	step: 32
	aligned to: 128
	base_object: *pretmp_312
	Access function 0: 4
	Access function 1: {0, +, 1}_2
Creating dr for *_15[4]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 4
	Access function 1: {0B, +, 16}_2
Creating dr for *_15[5]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 10
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 5
	Access function 1: {0B, +, 16}_2
Creating dr for *pretmp_312[y_157][5]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 20
	step: 32
	aligned to: 128
	base_object: *pretmp_312
	Access function 0: 5
	Access function 1: {0, +, 1}_2
Creating dr for *_15[5]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 10
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 5
	Access function 1: {0B, +, 16}_2
Creating dr for *_15[6]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 6
	Access function 1: {0B, +, 16}_2
Creating dr for *pretmp_312[y_157][6]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 24
	step: 32
	aligned to: 128
	base_object: *pretmp_312
	Access function 0: 6
	Access function 1: {0, +, 1}_2
Creating dr for *_15[6]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 6
	Access function 1: {0B, +, 16}_2
Creating dr for *_15[7]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 14
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 7
	Access function 1: {0B, +, 16}_2
Creating dr for *pretmp_312[y_157][7]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 28
	step: 32
	aligned to: 128
	base_object: *pretmp_312
	Access function 0: 7
	Access function 1: {0, +, 1}_2
Creating dr for *_15[7]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 14
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 7
	Access function 1: {0B, +, 16}_2
common/quant.c:113:9: note: got vectype for stmt: _16 = *_15[0];
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _22 = *pretmp_312[y_157][0];
vector(4) int
common/quant.c:113:9: note: got vectype for stmt: *_15[0] = _25;
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _27 = *_15[1];
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _29 = *pretmp_312[y_157][1];
vector(4) int
common/quant.c:113:9: note: got vectype for stmt: *_15[1] = _32;
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _34 = *_15[2];
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _36 = *pretmp_312[y_157][2];
vector(4) int
common/quant.c:113:9: note: got vectype for stmt: *_15[2] = _39;
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _41 = *_15[3];
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _43 = *pretmp_312[y_157][3];
vector(4) int
common/quant.c:113:9: note: got vectype for stmt: *_15[3] = _46;
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _48 = *_15[4];
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _50 = *pretmp_312[y_157][4];
vector(4) int
common/quant.c:113:9: note: got vectype for stmt: *_15[4] = _53;
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _55 = *_15[5];
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _57 = *pretmp_312[y_157][5];
vector(4) int
common/quant.c:113:9: note: got vectype for stmt: *_15[5] = _60;
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _62 = *_15[6];
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _64 = *pretmp_312[y_157][6];
vector(4) int
common/quant.c:113:9: note: got vectype for stmt: *_15[6] = _67;
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _69 = *_15[7];
vector(8) short int
common/quant.c:113:9: note: got vectype for stmt: _71 = *pretmp_312[y_157][7];
vector(4) int
common/quant.c:113:9: note: got vectype for stmt: *_15[7] = _74;
vector(8) short int
common/quant.c:113:9: note: === vect_analyze_scalar_cycles ===
common/quant.c:113:9: note: Analyze phi: y_157 = PHI <0(3), y_76(5)>

common/quant.c:113:9: note: Access function of PHI: {0, +, 1}_2
common/quant.c:113:9: note: step: 1,  init: 0
common/quant.c:113:9: note: Detected induction.
common/quant.c:113:9: note: Analyze phi: .MEM_152 = PHI <.MEM_10(D)(3), .MEM_75(5)>

common/quant.c:113:9: note: Analyze phi: ivtmp_5 = PHI <8(3), ivtmp_299(5)>

common/quant.c:113:9: note: Access function of PHI: {8, +, 4294967295}_2
common/quant.c:113:9: note: step: 4294967295,  init: 8
common/quant.c:113:9: note: Detected induction.
common/quant.c:113:9: note: === vect_pattern_recog ===
common/quant.c:113:9: note: vect_is_simple_use: operand _11
common/quant.c:113:9: note: def_stmt: _11 = (long unsigned int) y_157;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand y_157
common/quant.c:113:9: note: def_stmt: y_157 = PHI <0(3), y_76(5)>
common/quant.c:113:9: note: type of def: 4.
common/quant.c:113:9: note: vect_is_simple_use: operand 16
common/quant.c:113:9: note: vect_is_simple_use: operand _17
common/quant.c:113:9: note: def_stmt: _17 = (int) _16;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _16
common/quant.c:113:9: note: def_stmt: _16 = *_15[0];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _22
common/quant.c:113:9: note: def_stmt: _22 = *pretmp_312[y_157][0];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _28
common/quant.c:113:9: note: def_stmt: _28 = (int) _27;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _27
common/quant.c:113:9: note: def_stmt: _27 = *_15[1];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _29
common/quant.c:113:9: note: def_stmt: _29 = *pretmp_312[y_157][1];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _35
common/quant.c:113:9: note: def_stmt: _35 = (int) _34;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _34
common/quant.c:113:9: note: def_stmt: _34 = *_15[2];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _36
common/quant.c:113:9: note: def_stmt: _36 = *pretmp_312[y_157][2];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _42
common/quant.c:113:9: note: def_stmt: _42 = (int) _41;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _41
common/quant.c:113:9: note: def_stmt: _41 = *_15[3];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _43
common/quant.c:113:9: note: def_stmt: _43 = *pretmp_312[y_157][3];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _49
common/quant.c:113:9: note: def_stmt: _49 = (int) _48;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _48
common/quant.c:113:9: note: def_stmt: _48 = *_15[4];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _50
common/quant.c:113:9: note: def_stmt: _50 = *pretmp_312[y_157][4];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _56
common/quant.c:113:9: note: def_stmt: _56 = (int) _55;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _55
common/quant.c:113:9: note: def_stmt: _55 = *_15[5];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _57
common/quant.c:113:9: note: def_stmt: _57 = *pretmp_312[y_157][5];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _63
common/quant.c:113:9: note: def_stmt: _63 = (int) _62;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _62
common/quant.c:113:9: note: def_stmt: _62 = *_15[6];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _64
common/quant.c:113:9: note: def_stmt: _64 = *pretmp_312[y_157][6];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _70
common/quant.c:113:9: note: def_stmt: _70 = (int) _69;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _69
common/quant.c:113:9: note: def_stmt: _69 = *_15[7];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _71
common/quant.c:113:9: note: def_stmt: _71 = *pretmp_312[y_157][7];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vect_analyze_data_ref_accesses ===
common/quant.c:113:9: note: Detected interleaving *pretmp_312[y_157][0] and *pretmp_312[y_157][1]
common/quant.c:113:9: note: Detected interleaving *pretmp_312[y_157][0] and *pretmp_312[y_157][2]
common/quant.c:113:9: note: Detected interleaving *pretmp_312[y_157][0] and *pretmp_312[y_157][3]
common/quant.c:113:9: note: Detected interleaving *pretmp_312[y_157][0] and *pretmp_312[y_157][4]
common/quant.c:113:9: note: Detected interleaving *pretmp_312[y_157][0] and *pretmp_312[y_157][5]
common/quant.c:113:9: note: Detected interleaving *pretmp_312[y_157][0] and *pretmp_312[y_157][6]
common/quant.c:113:9: note: Detected interleaving *pretmp_312[y_157][0] and *pretmp_312[y_157][7]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[1]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[2]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[3]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[4]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[5]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[6]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[7]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[1]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[2]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[3]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[4]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[5]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[6]
common/quant.c:113:9: note: Detected interleaving *_15[0] and *_15[7]
common/quant.c:113:9: note: Detected interleaving of size 8
common/quant.c:113:9: note: Detected interleaving of size 8
common/quant.c:113:9: note: Detected interleaving of size 8
common/quant.c:113:9: note: === vect_mark_stmts_to_be_vectorized ===
common/quant.c:113:9: note: init: phi relevant? y_157 = PHI <0(3), y_76(5)>
common/quant.c:113:9: note: init: phi relevant? .MEM_152 = PHI <.MEM_10(D)(3), .MEM_75(5)>
common/quant.c:113:9: note: init: phi relevant? ivtmp_5 = PHI <8(3), ivtmp_299(5)>
common/quant.c:113:9: note: init: stmt relevant? # DEBUG y => y_157
common/quant.c:113:9: note: init: stmt relevant? _11 = (long unsigned int) y_157;
common/quant.c:113:9: note: init: stmt relevant? _12 = _11 * 16;
common/quant.c:113:9: note: init: stmt relevant? _15 = dct_13(D) + _12;
common/quant.c:113:9: note: init: stmt relevant? _16 = *_15[0];
common/quant.c:113:9: note: init: stmt relevant? _17 = (int) _16;
common/quant.c:113:9: note: init: stmt relevant? _22 = *pretmp_312[y_157][0];
common/quant.c:113:9: note: init: stmt relevant? _23 = _17 * _22;
common/quant.c:113:9: note: init: stmt relevant? _24 = _23 << i_qbits_9;
common/quant.c:113:9: note: init: stmt relevant? _25 = (short int) _24;
common/quant.c:113:9: note: init: stmt relevant? *_15[0] = _25;
common/quant.c:113:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: init: stmt relevant? _27 = *_15[1];
common/quant.c:113:9: note: init: stmt relevant? _28 = (int) _27;
common/quant.c:113:9: note: init: stmt relevant? _29 = *pretmp_312[y_157][1];
common/quant.c:113:9: note: init: stmt relevant? _30 = _28 * _29;
common/quant.c:113:9: note: init: stmt relevant? _31 = _30 << i_qbits_9;
common/quant.c:113:9: note: init: stmt relevant? _32 = (short int) _31;
common/quant.c:113:9: note: init: stmt relevant? *_15[1] = _32;
common/quant.c:113:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: init: stmt relevant? _34 = *_15[2];
common/quant.c:113:9: note: init: stmt relevant? _35 = (int) _34;
common/quant.c:113:9: note: init: stmt relevant? _36 = *pretmp_312[y_157][2];
common/quant.c:113:9: note: init: stmt relevant? _37 = _35 * _36;
common/quant.c:113:9: note: init: stmt relevant? _38 = _37 << i_qbits_9;
common/quant.c:113:9: note: init: stmt relevant? _39 = (short int) _38;
common/quant.c:113:9: note: init: stmt relevant? *_15[2] = _39;
common/quant.c:113:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: init: stmt relevant? _41 = *_15[3];
common/quant.c:113:9: note: init: stmt relevant? _42 = (int) _41;
common/quant.c:113:9: note: init: stmt relevant? _43 = *pretmp_312[y_157][3];
common/quant.c:113:9: note: init: stmt relevant? _44 = _42 * _43;
common/quant.c:113:9: note: init: stmt relevant? _45 = _44 << i_qbits_9;
common/quant.c:113:9: note: init: stmt relevant? _46 = (short int) _45;
common/quant.c:113:9: note: init: stmt relevant? *_15[3] = _46;
common/quant.c:113:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: init: stmt relevant? _48 = *_15[4];
common/quant.c:113:9: note: init: stmt relevant? _49 = (int) _48;
common/quant.c:113:9: note: init: stmt relevant? _50 = *pretmp_312[y_157][4];
common/quant.c:113:9: note: init: stmt relevant? _51 = _49 * _50;
common/quant.c:113:9: note: init: stmt relevant? _52 = _51 << i_qbits_9;
common/quant.c:113:9: note: init: stmt relevant? _53 = (short int) _52;
common/quant.c:113:9: note: init: stmt relevant? *_15[4] = _53;
common/quant.c:113:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: init: stmt relevant? _55 = *_15[5];
common/quant.c:113:9: note: init: stmt relevant? _56 = (int) _55;
common/quant.c:113:9: note: init: stmt relevant? _57 = *pretmp_312[y_157][5];
common/quant.c:113:9: note: init: stmt relevant? _58 = _56 * _57;
common/quant.c:113:9: note: init: stmt relevant? _59 = _58 << i_qbits_9;
common/quant.c:113:9: note: init: stmt relevant? _60 = (short int) _59;
common/quant.c:113:9: note: init: stmt relevant? *_15[5] = _60;
common/quant.c:113:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: init: stmt relevant? _62 = *_15[6];
common/quant.c:113:9: note: init: stmt relevant? _63 = (int) _62;
common/quant.c:113:9: note: init: stmt relevant? _64 = *pretmp_312[y_157][6];
common/quant.c:113:9: note: init: stmt relevant? _65 = _63 * _64;
common/quant.c:113:9: note: init: stmt relevant? _66 = _65 << i_qbits_9;
common/quant.c:113:9: note: init: stmt relevant? _67 = (short int) _66;
common/quant.c:113:9: note: init: stmt relevant? *_15[6] = _67;
common/quant.c:113:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: init: stmt relevant? _69 = *_15[7];
common/quant.c:113:9: note: init: stmt relevant? _70 = (int) _69;
common/quant.c:113:9: note: init: stmt relevant? _71 = *pretmp_312[y_157][7];
common/quant.c:113:9: note: init: stmt relevant? _72 = _70 * _71;
common/quant.c:113:9: note: init: stmt relevant? _73 = _72 << i_qbits_9;
common/quant.c:113:9: note: init: stmt relevant? _74 = (short int) _73;
common/quant.c:113:9: note: init: stmt relevant? *_15[7] = _74;
common/quant.c:113:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: init: stmt relevant? y_76 = y_157 + 1;
common/quant.c:113:9: note: init: stmt relevant? # DEBUG y => y_76
common/quant.c:113:9: note: init: stmt relevant? # DEBUG y => y_76
common/quant.c:113:9: note: init: stmt relevant? ivtmp_299 = ivtmp_5 - 1;
common/quant.c:113:9: note: init: stmt relevant? if (ivtmp_299 != 0)
common/quant.c:113:9: note: worklist: examine stmt: *_15[7] = _74;
common/quant.c:113:9: note: vect_is_simple_use: operand _74
common/quant.c:113:9: note: def_stmt: _74 = (short int) _73;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _74 = (short int) _73;
common/quant.c:113:9: note: vect_is_simple_use: operand _73
common/quant.c:113:9: note: def_stmt: _73 = _72 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _73 = _72 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _72
common/quant.c:113:9: note: def_stmt: _72 = _70 * _71;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: def_stmt is out of loop.
common/quant.c:113:9: note: worklist: examine stmt: _72 = _70 * _71;
common/quant.c:113:9: note: vect_is_simple_use: operand _70
common/quant.c:113:9: note: def_stmt: _70 = (int) _69;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand _71
common/quant.c:113:9: note: def_stmt: _71 = *pretmp_312[y_157][7];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _71 = *pretmp_312[y_157][7];
common/quant.c:113:9: note: worklist: examine stmt: _70 = (int) _69;
common/quant.c:113:9: note: vect_is_simple_use: operand _69
common/quant.c:113:9: note: def_stmt: _69 = *_15[7];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _69 = *_15[7];
common/quant.c:113:9: note: worklist: examine stmt: *_15[6] = _67;
common/quant.c:113:9: note: vect_is_simple_use: operand _67
common/quant.c:113:9: note: def_stmt: _67 = (short int) _66;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _67 = (short int) _66;
common/quant.c:113:9: note: vect_is_simple_use: operand _66
common/quant.c:113:9: note: def_stmt: _66 = _65 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _66 = _65 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _65
common/quant.c:113:9: note: def_stmt: _65 = _63 * _64;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: def_stmt is out of loop.
common/quant.c:113:9: note: worklist: examine stmt: _65 = _63 * _64;
common/quant.c:113:9: note: vect_is_simple_use: operand _63
common/quant.c:113:9: note: def_stmt: _63 = (int) _62;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand _64
common/quant.c:113:9: note: def_stmt: _64 = *pretmp_312[y_157][6];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _64 = *pretmp_312[y_157][6];
common/quant.c:113:9: note: worklist: examine stmt: _63 = (int) _62;
common/quant.c:113:9: note: vect_is_simple_use: operand _62
common/quant.c:113:9: note: def_stmt: _62 = *_15[6];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _62 = *_15[6];
common/quant.c:113:9: note: worklist: examine stmt: *_15[5] = _60;
common/quant.c:113:9: note: vect_is_simple_use: operand _60
common/quant.c:113:9: note: def_stmt: _60 = (short int) _59;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _60 = (short int) _59;
common/quant.c:113:9: note: vect_is_simple_use: operand _59
common/quant.c:113:9: note: def_stmt: _59 = _58 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _59 = _58 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _58
common/quant.c:113:9: note: def_stmt: _58 = _56 * _57;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: def_stmt is out of loop.
common/quant.c:113:9: note: worklist: examine stmt: _58 = _56 * _57;
common/quant.c:113:9: note: vect_is_simple_use: operand _56
common/quant.c:113:9: note: def_stmt: _56 = (int) _55;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand _57
common/quant.c:113:9: note: def_stmt: _57 = *pretmp_312[y_157][5];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _57 = *pretmp_312[y_157][5];
common/quant.c:113:9: note: worklist: examine stmt: _56 = (int) _55;
common/quant.c:113:9: note: vect_is_simple_use: operand _55
common/quant.c:113:9: note: def_stmt: _55 = *_15[5];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _55 = *_15[5];
common/quant.c:113:9: note: worklist: examine stmt: *_15[4] = _53;
common/quant.c:113:9: note: vect_is_simple_use: operand _53
common/quant.c:113:9: note: def_stmt: _53 = (short int) _52;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _53 = (short int) _52;
common/quant.c:113:9: note: vect_is_simple_use: operand _52
common/quant.c:113:9: note: def_stmt: _52 = _51 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _52 = _51 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _51
common/quant.c:113:9: note: def_stmt: _51 = _49 * _50;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: def_stmt is out of loop.
common/quant.c:113:9: note: worklist: examine stmt: _51 = _49 * _50;
common/quant.c:113:9: note: vect_is_simple_use: operand _49
common/quant.c:113:9: note: def_stmt: _49 = (int) _48;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand _50
common/quant.c:113:9: note: def_stmt: _50 = *pretmp_312[y_157][4];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _50 = *pretmp_312[y_157][4];
common/quant.c:113:9: note: worklist: examine stmt: _49 = (int) _48;
common/quant.c:113:9: note: vect_is_simple_use: operand _48
common/quant.c:113:9: note: def_stmt: _48 = *_15[4];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _48 = *_15[4];
common/quant.c:113:9: note: worklist: examine stmt: *_15[3] = _46;
common/quant.c:113:9: note: vect_is_simple_use: operand _46
common/quant.c:113:9: note: def_stmt: _46 = (short int) _45;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _46 = (short int) _45;
common/quant.c:113:9: note: vect_is_simple_use: operand _45
common/quant.c:113:9: note: def_stmt: _45 = _44 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _45 = _44 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _44
common/quant.c:113:9: note: def_stmt: _44 = _42 * _43;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: def_stmt is out of loop.
common/quant.c:113:9: note: worklist: examine stmt: _44 = _42 * _43;
common/quant.c:113:9: note: vect_is_simple_use: operand _42
common/quant.c:113:9: note: def_stmt: _42 = (int) _41;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand _43
common/quant.c:113:9: note: def_stmt: _43 = *pretmp_312[y_157][3];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _43 = *pretmp_312[y_157][3];
common/quant.c:113:9: note: worklist: examine stmt: _42 = (int) _41;
common/quant.c:113:9: note: vect_is_simple_use: operand _41
common/quant.c:113:9: note: def_stmt: _41 = *_15[3];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _41 = *_15[3];
common/quant.c:113:9: note: worklist: examine stmt: *_15[2] = _39;
common/quant.c:113:9: note: vect_is_simple_use: operand _39
common/quant.c:113:9: note: def_stmt: _39 = (short int) _38;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _39 = (short int) _38;
common/quant.c:113:9: note: vect_is_simple_use: operand _38
common/quant.c:113:9: note: def_stmt: _38 = _37 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _38 = _37 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _37
common/quant.c:113:9: note: def_stmt: _37 = _35 * _36;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: def_stmt is out of loop.
common/quant.c:113:9: note: worklist: examine stmt: _37 = _35 * _36;
common/quant.c:113:9: note: vect_is_simple_use: operand _35
common/quant.c:113:9: note: def_stmt: _35 = (int) _34;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand _36
common/quant.c:113:9: note: def_stmt: _36 = *pretmp_312[y_157][2];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _36 = *pretmp_312[y_157][2];
common/quant.c:113:9: note: worklist: examine stmt: _35 = (int) _34;
common/quant.c:113:9: note: vect_is_simple_use: operand _34
common/quant.c:113:9: note: def_stmt: _34 = *_15[2];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _34 = *_15[2];
common/quant.c:113:9: note: worklist: examine stmt: *_15[1] = _32;
common/quant.c:113:9: note: vect_is_simple_use: operand _32
common/quant.c:113:9: note: def_stmt: _32 = (short int) _31;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _32 = (short int) _31;
common/quant.c:113:9: note: vect_is_simple_use: operand _31
common/quant.c:113:9: note: def_stmt: _31 = _30 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _31 = _30 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _30
common/quant.c:113:9: note: def_stmt: _30 = _28 * _29;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: def_stmt is out of loop.
common/quant.c:113:9: note: worklist: examine stmt: _30 = _28 * _29;
common/quant.c:113:9: note: vect_is_simple_use: operand _28
common/quant.c:113:9: note: def_stmt: _28 = (int) _27;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand _29
common/quant.c:113:9: note: def_stmt: _29 = *pretmp_312[y_157][1];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _29 = *pretmp_312[y_157][1];
common/quant.c:113:9: note: worklist: examine stmt: _28 = (int) _27;
common/quant.c:113:9: note: vect_is_simple_use: operand _27
common/quant.c:113:9: note: def_stmt: _27 = *_15[1];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _27 = *_15[1];
common/quant.c:113:9: note: worklist: examine stmt: *_15[0] = _25;
common/quant.c:113:9: note: vect_is_simple_use: operand _25
common/quant.c:113:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _25 = (short int) _24;
common/quant.c:113:9: note: vect_is_simple_use: operand _24
common/quant.c:113:9: note: def_stmt: _24 = _23 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _24 = _23 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _23
common/quant.c:113:9: note: def_stmt: _23 = _17 * _22;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: def_stmt is out of loop.
common/quant.c:113:9: note: worklist: examine stmt: _23 = _17 * _22;
common/quant.c:113:9: note: vect_is_simple_use: operand _17
common/quant.c:113:9: note: def_stmt: _17 = (int) _16;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: vect_is_simple_use: operand _22
common/quant.c:113:9: note: def_stmt: _22 = *pretmp_312[y_157][0];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _22 = *pretmp_312[y_157][0];
common/quant.c:113:9: note: worklist: examine stmt: _17 = (int) _16;
common/quant.c:113:9: note: vect_is_simple_use: operand _16
common/quant.c:113:9: note: def_stmt: _16 = *_15[0];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: mark relevant 4, live 0.
common/quant.c:113:9: note: worklist: examine stmt: _16 = *_15[0];
common/quant.c:113:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _22 = *pretmp_312[y_157][0];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[0] = _25;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _27 = *_15[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _29 = *pretmp_312[y_157][1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[1] = _32;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _34 = *_15[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _36 = *pretmp_312[y_157][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _43 = *pretmp_312[y_157][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _48 = *_15[4];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _50 = *pretmp_312[y_157][4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[4] = _53;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _55 = *_15[5];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _57 = *pretmp_312[y_157][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: *_15[0] = _25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _27 = *_15[1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _29 = *pretmp_312[y_157][1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: *_15[1] = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _34 = *_15[2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _36 = *pretmp_312[y_157][2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: *_15[2] = _39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _41 = *_15[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _43 = *pretmp_312[y_157][3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: *_15[3] = _46;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _48 = *_15[4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _50 = *pretmp_312[y_157][4];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: *_15[4] = _53;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _55 = *_15[5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _57 = *pretmp_312[y_157][5];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: *_15[5] = _60;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _62 = *_15[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _64 = *pretmp_312[y_157][6];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: *_15[6] = _67;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _69 = *_15[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _71 = *pretmp_312[y_157][7];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: *_15[7] = _74;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _27 = *_15[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _29 = *pretmp_312[y_157][1];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[1] = _32;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _34 = *_15[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _36 = *pretmp_312[y_157][2];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _43 = *pretmp_312[y_157][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _48 = *_15[4];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _50 = *pretmp_312[y_157][4];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[4] = _53;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _55 = *_15[5];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _57 = *pretmp_312[y_157][5];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _29 = *pretmp_312[y_157][1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: *_15[1] = _32;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _34 = *_15[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _36 = *pretmp_312[y_157][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _43 = *pretmp_312[y_157][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _48 = *_15[4];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _50 = *pretmp_312[y_157][4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: *_15[4] = _53;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _55 = *_15[5];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _57 = *pretmp_312[y_157][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: *_15[1] = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _34 = *_15[2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _36 = *pretmp_312[y_157][2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: *_15[2] = _39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _41 = *_15[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _43 = *pretmp_312[y_157][3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: *_15[3] = _46;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _48 = *_15[4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _50 = *pretmp_312[y_157][4];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: *_15[4] = _53;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _55 = *_15[5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _57 = *pretmp_312[y_157][5];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: *_15[5] = _60;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _62 = *_15[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _64 = *pretmp_312[y_157][6];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: *_15[6] = _67;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _69 = *_15[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _71 = *pretmp_312[y_157][7];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: *_15[7] = _74;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _34 = *_15[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _36 = *pretmp_312[y_157][2];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _43 = *pretmp_312[y_157][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _48 = *_15[4];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _50 = *pretmp_312[y_157][4];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: *_15[4] = _53;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _55 = *_15[5];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _57 = *pretmp_312[y_157][5];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _36 = *pretmp_312[y_157][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _43 = *pretmp_312[y_157][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _48 = *_15[4];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _50 = *pretmp_312[y_157][4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: *_15[4] = _53;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _55 = *_15[5];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _57 = *pretmp_312[y_157][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: *_15[2] = _39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: _41 = *_15[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: _43 = *pretmp_312[y_157][3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: *_15[3] = _46;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: _48 = *_15[4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: _50 = *pretmp_312[y_157][4];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: *_15[4] = _53;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: _55 = *_15[5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: _57 = *pretmp_312[y_157][5];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: *_15[5] = _60;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: _62 = *_15[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: _64 = *pretmp_312[y_157][6];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: *_15[6] = _67;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: _69 = *_15[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: _71 = *pretmp_312[y_157][7];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: *_15[7] = _74;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _43 = *pretmp_312[y_157][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _48 = *_15[4];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _50 = *pretmp_312[y_157][4];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: *_15[4] = _53;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _55 = *_15[5];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _57 = *pretmp_312[y_157][5];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _43 = *pretmp_312[y_157][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _48 = *_15[4];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _50 = *pretmp_312[y_157][4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: *_15[4] = _53;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _55 = *_15[5];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _57 = *pretmp_312[y_157][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: *_15[3] = _46;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: _48 = *_15[4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: _50 = *pretmp_312[y_157][4];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: *_15[4] = _53;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: _55 = *_15[5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: _57 = *pretmp_312[y_157][5];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: *_15[5] = _60;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: _62 = *_15[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: _64 = *pretmp_312[y_157][6];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: *_15[6] = _67;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: _69 = *_15[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: _71 = *pretmp_312[y_157][7];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: *_15[7] = _74;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: _48 = *_15[4];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: _50 = *pretmp_312[y_157][4];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: *_15[4] = _53;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: _55 = *_15[5];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: _57 = *pretmp_312[y_157][5];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: _50 = *pretmp_312[y_157][4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: *_15[4] = _53;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: _55 = *_15[5];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: _57 = *pretmp_312[y_157][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _50 = *pretmp_312[y_157][4];
  stmt_b: *_15[4] = _53;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _50 = *pretmp_312[y_157][4];
  stmt_b: _55 = *_15[5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _50 = *pretmp_312[y_157][4];
  stmt_b: _57 = *pretmp_312[y_157][5];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _50 = *pretmp_312[y_157][4];
  stmt_b: *_15[5] = _60;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _50 = *pretmp_312[y_157][4];
  stmt_b: _62 = *_15[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _50 = *pretmp_312[y_157][4];
  stmt_b: _64 = *pretmp_312[y_157][6];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _50 = *pretmp_312[y_157][4];
  stmt_b: *_15[6] = _67;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _50 = *pretmp_312[y_157][4];
  stmt_b: _69 = *_15[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _50 = *pretmp_312[y_157][4];
  stmt_b: _71 = *pretmp_312[y_157][7];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _50 = *pretmp_312[y_157][4];
  stmt_b: *_15[7] = _74;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_15[4] = _53;
  stmt_b: _55 = *_15[5];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[4] = _53;
  stmt_b: _57 = *pretmp_312[y_157][5];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[4] = _53;
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[4] = _53;
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[4] = _53;
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[4] = _53;
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[4] = _53;
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[4] = _53;
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[4] = _53;
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _55 = *_15[5];
  stmt_b: _57 = *pretmp_312[y_157][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_15[5];
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _55 = *_15[5];
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _55 = *_15[5];
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_15[5];
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _55 = *_15[5];
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _55 = *_15[5];
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_15[5];
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _57 = *pretmp_312[y_157][5];
  stmt_b: *_15[5] = _60;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _57 = *pretmp_312[y_157][5];
  stmt_b: _62 = *_15[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _57 = *pretmp_312[y_157][5];
  stmt_b: _64 = *pretmp_312[y_157][6];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _57 = *pretmp_312[y_157][5];
  stmt_b: *_15[6] = _67;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _57 = *pretmp_312[y_157][5];
  stmt_b: _69 = *_15[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _57 = *pretmp_312[y_157][5];
  stmt_b: _71 = *pretmp_312[y_157][7];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _57 = *pretmp_312[y_157][5];
  stmt_b: *_15[7] = _74;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_15[5] = _60;
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[5] = _60;
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[5] = _60;
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[5] = _60;
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[5] = _60;
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[5] = _60;
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _62 = *_15[6];
  stmt_b: _64 = *pretmp_312[y_157][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _62 = *_15[6];
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _62 = *_15[6];
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _62 = *_15[6];
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _62 = *_15[6];
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _64 = *pretmp_312[y_157][6];
  stmt_b: *_15[6] = _67;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _64 = *pretmp_312[y_157][6];
  stmt_b: _69 = *_15[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _64 = *pretmp_312[y_157][6];
  stmt_b: _71 = *pretmp_312[y_157][7];
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _64 = *pretmp_312[y_157][6];
  stmt_b: *_15[7] = _74;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_15[6] = _67;
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[6] = _67;
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_15[6] = _67;
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _69 = *_15[7];
  stmt_b: _71 = *pretmp_312[y_157][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _69 = *_15[7];
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 7)
  (chrec_b = 7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _71 = *pretmp_312[y_157][7];
  stmt_b: *_15[7] = _74;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_15[0];
  stmt_b: _16 = *_15[0];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _22 = *pretmp_312[y_157][0];
  stmt_b: _22 = *pretmp_312[y_157][0];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[0] = _25;
  stmt_b: *_15[0] = _25;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _27 = *_15[1];
  stmt_b: _27 = *_15[1];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _29 = *pretmp_312[y_157][1];
  stmt_b: _29 = *pretmp_312[y_157][1];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[1] = _32;
  stmt_b: *_15[1] = _32;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _34 = *_15[2];
  stmt_b: _34 = *_15[2];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _36 = *pretmp_312[y_157][2];
  stmt_b: _36 = *pretmp_312[y_157][2];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[2] = _39;
  stmt_b: *_15[2] = _39;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _41 = *_15[3];
  stmt_b: _41 = *_15[3];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _43 = *pretmp_312[y_157][3];
  stmt_b: _43 = *pretmp_312[y_157][3];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[3] = _46;
  stmt_b: *_15[3] = _46;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _48 = *_15[4];
  stmt_b: _48 = *_15[4];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _50 = *pretmp_312[y_157][4];
  stmt_b: _50 = *pretmp_312[y_157][4];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[4] = _53;
  stmt_b: *_15[4] = _53;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _55 = *_15[5];
  stmt_b: _55 = *_15[5];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _57 = *pretmp_312[y_157][5];
  stmt_b: _57 = *pretmp_312[y_157][5];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[5] = _60;
  stmt_b: *_15[5] = _60;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _62 = *_15[6];
  stmt_b: _62 = *_15[6];
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _64 = *pretmp_312[y_157][6];
  stmt_b: _64 = *pretmp_312[y_157][6];
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[6] = _67;
  stmt_b: *_15[6] = _67;
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _69 = *_15[7];
  stmt_b: _69 = *_15[7];
(analyze_overlapping_iterations 
  (chrec_a = 7)
  (chrec_b = 7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _71 = *pretmp_312[y_157][7];
  stmt_b: _71 = *pretmp_312[y_157][7];
(analyze_overlapping_iterations 
  (chrec_a = 7)
  (chrec_b = 7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_2)
  (chrec_b = {0, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_15[7] = _74;
  stmt_b: *_15[7] = _74;
(analyze_overlapping_iterations 
  (chrec_a = 7)
  (chrec_b = 7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_2)
  (chrec_b = {0B, +, 16}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: dependence distance == 0 between *_15[0] and *_15[0]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: dependence distance == 0 between *_15[1] and *_15[1]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: dependence distance == 0 between *_15[2] and *_15[2]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: dependence distance == 0 between *_15[3] and *_15[3]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: dependence distance == 0 between *_15[4] and *_15[4]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: dependence distance == 0 between *_15[5] and *_15[5]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: dependence distance == 0 between *_15[6] and *_15[6]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: dependence distance == 0 between *_15[7] and *_15[7]
common/quant.c:113:9: note: === vect_determine_vectorization_factor ===
common/quant.c:113:9: note: ==> examining phi: y_157 = PHI <0(3), y_76(5)>

common/quant.c:113:9: note: ==> examining phi: .MEM_152 = PHI <.MEM_10(D)(3), .MEM_75(5)>

common/quant.c:113:9: note: ==> examining phi: ivtmp_5 = PHI <8(3), ivtmp_299(5)>

common/quant.c:113:9: note: ==> examining statement: # DEBUG y => y_157

common/quant.c:113:9: note: skip.
common/quant.c:113:9: note: ==> examining statement: _11 = (long unsigned int) y_157;

common/quant.c:113:9: note: skip.
common/quant.c:113:9: note: ==> examining statement: _12 = _11 * 16;

common/quant.c:113:9: note: skip.
common/quant.c:113:9: note: ==> examining statement: _15 = dct_13(D) + _12;

common/quant.c:113:9: note: skip.
common/quant.c:113:9: note: ==> examining statement: _16 = *_15[0];

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _17 = (int) _16;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _22 = *pretmp_312[y_157][0];

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _23 = _17 * _22;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _24 = _23 << i_qbits_9;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _25 = (short int) _24;

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: *_15[0] = _25;

common/quant.c:113:9: note: get vectype for scalar type:  int16_t
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _27 = *_15[1];

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _28 = (int) _27;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _29 = *pretmp_312[y_157][1];

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _30 = _28 * _29;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _31 = _30 << i_qbits_9;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _32 = (short int) _31;

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: *_15[1] = _32;

common/quant.c:113:9: note: get vectype for scalar type:  int16_t
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _34 = *_15[2];

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _35 = (int) _34;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _36 = *pretmp_312[y_157][2];

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _37 = _35 * _36;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _38 = _37 << i_qbits_9;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _39 = (short int) _38;

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: *_15[2] = _39;

common/quant.c:113:9: note: get vectype for scalar type:  int16_t
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _41 = *_15[3];

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _42 = (int) _41;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _43 = *pretmp_312[y_157][3];

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _44 = _42 * _43;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _45 = _44 << i_qbits_9;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _46 = (short int) _45;

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: *_15[3] = _46;

common/quant.c:113:9: note: get vectype for scalar type:  int16_t
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _48 = *_15[4];

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _49 = (int) _48;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _50 = *pretmp_312[y_157][4];

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _51 = _49 * _50;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _52 = _51 << i_qbits_9;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _53 = (short int) _52;

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: *_15[4] = _53;

common/quant.c:113:9: note: get vectype for scalar type:  int16_t
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _55 = *_15[5];

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _56 = (int) _55;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _57 = *pretmp_312[y_157][5];

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _58 = _56 * _57;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _59 = _58 << i_qbits_9;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _60 = (short int) _59;

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: *_15[5] = _60;

common/quant.c:113:9: note: get vectype for scalar type:  int16_t
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _62 = *_15[6];

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _63 = (int) _62;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _64 = *pretmp_312[y_157][6];

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _65 = _63 * _64;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _66 = _65 << i_qbits_9;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _67 = (short int) _66;

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: *_15[6] = _67;

common/quant.c:113:9: note: get vectype for scalar type:  int16_t
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _69 = *_15[7];

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _70 = (int) _69;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: _71 = *pretmp_312[y_157][7];

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _72 = _70 * _71;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _73 = _72 << i_qbits_9;

common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: get vectype for scalar type:  int
common/quant.c:113:9: note: vectype: vector(4) int
common/quant.c:113:9: note: nunits = 4
common/quant.c:113:9: note: ==> examining statement: _74 = (short int) _73;

common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: get vectype for scalar type:  short int
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: *_15[7] = _74;

common/quant.c:113:9: note: get vectype for scalar type:  int16_t
common/quant.c:113:9: note: vectype: vector(8) short int
common/quant.c:113:9: note: nunits = 8
common/quant.c:113:9: note: ==> examining statement: y_76 = y_157 + 1;

common/quant.c:113:9: note: skip.
common/quant.c:113:9: note: ==> examining statement: # DEBUG y => y_76

common/quant.c:113:9: note: skip.
common/quant.c:113:9: note: ==> examining statement: # DEBUG y => y_76

common/quant.c:113:9: note: skip.
common/quant.c:113:9: note: ==> examining statement: ivtmp_299 = ivtmp_5 - 1;

common/quant.c:113:9: note: skip.
common/quant.c:113:9: note: ==> examining statement: if (ivtmp_299 != 0)

common/quant.c:113:9: note: skip.
common/quant.c:113:9: note: vectorization factor = 8
common/quant.c:113:9: note: === vect_analyze_data_refs_alignment ===
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[0] and *_15[0]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[1] and *_15[1]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[2] and *_15[2]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[3] and *_15[3]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[4] and *_15[4]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[5] and *_15[5]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[6] and *_15[6]
common/quant.c:113:9: note: dependence distance  = 0.
common/quant.c:113:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_15[7] and *_15[7]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[0]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *pretmp_312[y_157][0]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[0]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[1]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *pretmp_312[y_157][1]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[1]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[2]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *pretmp_312[y_157][2]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[2]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[3]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *pretmp_312[y_157][3]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[3]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[4]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *pretmp_312[y_157][4]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[4]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[5]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *pretmp_312[y_157][5]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[5]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[6]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *pretmp_312[y_157][6]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[6]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[7]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *pretmp_312[y_157][7]
common/quant.c:113:9: note: vect_compute_data_ref_alignment:
common/quant.c:113:9: note: can't force alignment of ref: *_15[7]
common/quant.c:113:9: note: === vect_prune_runtime_alias_test_list ===
common/quant.c:113:9: note: === vect_enhance_data_refs_alignment ===
common/quant.c:113:9: note: vector alignment may not be reachable
common/quant.c:113:9: note: vect_can_advance_ivs_p:
common/quant.c:113:9: note: Analyze phi: y_157 = PHI <0(3), y_76(5)>

common/quant.c:113:9: note: Analyze phi: .MEM_152 = PHI <.MEM_10(D)(3), .MEM_75(5)>

common/quant.c:113:9: note: virtual phi. skip.
common/quant.c:113:9: note: Analyze phi: ivtmp_5 = PHI <8(3), ivtmp_299(5)>

Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:113:9: note: Vectorizing an unaligned access.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:113:9: note: Vectorizing an unaligned access.
common/quant.c:113:9: note: Vectorizing an unaligned access.
common/quant.c:113:9: note: === vect_analyze_slp ===
common/quant.c:113:9: note: Build SLP for *_15[0] = _25;

common/quant.c:113:9: note: Build SLP for *_15[1] = _32;

common/quant.c:113:9: note: Build SLP for *_15[2] = _39;

common/quant.c:113:9: note: Build SLP for *_15[3] = _46;

common/quant.c:113:9: note: Build SLP for *_15[4] = _53;

common/quant.c:113:9: note: Build SLP for *_15[5] = _60;

common/quant.c:113:9: note: Build SLP for *_15[6] = _67;

common/quant.c:113:9: note: Build SLP for *_15[7] = _74;

common/quant.c:113:9: note: vect_is_simple_use: operand _25
common/quant.c:113:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _32
common/quant.c:113:9: note: def_stmt: _32 = (short int) _31;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _39
common/quant.c:113:9: note: def_stmt: _39 = (short int) _38;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _46
common/quant.c:113:9: note: def_stmt: _46 = (short int) _45;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _53
common/quant.c:113:9: note: def_stmt: _53 = (short int) _52;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _60
common/quant.c:113:9: note: def_stmt: _60 = (short int) _59;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _67
common/quant.c:113:9: note: def_stmt: _67 = (short int) _66;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _74
common/quant.c:113:9: note: def_stmt: _74 = (short int) _73;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: Build SLP for _25 = (short int) _24;

common/quant.c:113:9: note: Build SLP for _32 = (short int) _31;

common/quant.c:113:9: note: Build SLP for _39 = (short int) _38;

common/quant.c:113:9: note: Build SLP for _46 = (short int) _45;

common/quant.c:113:9: note: Build SLP for _53 = (short int) _52;

common/quant.c:113:9: note: Build SLP for _60 = (short int) _59;

common/quant.c:113:9: note: Build SLP for _67 = (short int) _66;

common/quant.c:113:9: note: Build SLP for _74 = (short int) _73;

common/quant.c:113:9: note: vect_is_simple_use: operand _24
common/quant.c:113:9: note: def_stmt: _24 = _23 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _31
common/quant.c:113:9: note: def_stmt: _31 = _30 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _38
common/quant.c:113:9: note: def_stmt: _38 = _37 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _45
common/quant.c:113:9: note: def_stmt: _45 = _44 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _52
common/quant.c:113:9: note: def_stmt: _52 = _51 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _59
common/quant.c:113:9: note: def_stmt: _59 = _58 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _66
common/quant.c:113:9: note: def_stmt: _66 = _65 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _73
common/quant.c:113:9: note: def_stmt: _73 = _72 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: Build SLP for _24 = _23 << i_qbits_9;

common/quant.c:113:9: note: Build SLP for _31 = _30 << i_qbits_9;

common/quant.c:113:9: note: Build SLP for _38 = _37 << i_qbits_9;

common/quant.c:113:9: note: Build SLP for _45 = _44 << i_qbits_9;

common/quant.c:113:9: note: Build SLP for _52 = _51 << i_qbits_9;

common/quant.c:113:9: note: Build SLP for _59 = _58 << i_qbits_9;

common/quant.c:113:9: note: Build SLP for _66 = _65 << i_qbits_9;

common/quant.c:113:9: note: Build SLP for _73 = _72 << i_qbits_9;

common/quant.c:113:9: note: vect_is_simple_use: operand _23
common/quant.c:113:9: note: def_stmt: _23 = _17 * _22;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vect_is_simple_use: operand _30
common/quant.c:113:9: note: def_stmt: _30 = _28 * _29;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vect_is_simple_use: operand _37
common/quant.c:113:9: note: def_stmt: _37 = _35 * _36;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vect_is_simple_use: operand _44
common/quant.c:113:9: note: def_stmt: _44 = _42 * _43;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vect_is_simple_use: operand _51
common/quant.c:113:9: note: def_stmt: _51 = _49 * _50;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vect_is_simple_use: operand _58
common/quant.c:113:9: note: def_stmt: _58 = _56 * _57;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vect_is_simple_use: operand _65
common/quant.c:113:9: note: def_stmt: _65 = _63 * _64;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vect_is_simple_use: operand _72
common/quant.c:113:9: note: def_stmt: _72 = _70 * _71;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: Build SLP for _23 = _17 * _22;

common/quant.c:113:9: note: Build SLP for _30 = _28 * _29;

common/quant.c:113:9: note: Build SLP for _37 = _35 * _36;

common/quant.c:113:9: note: Build SLP for _44 = _42 * _43;

common/quant.c:113:9: note: Build SLP for _51 = _49 * _50;

common/quant.c:113:9: note: Build SLP for _58 = _56 * _57;

common/quant.c:113:9: note: Build SLP for _65 = _63 * _64;

common/quant.c:113:9: note: Build SLP for _72 = _70 * _71;

common/quant.c:113:9: note: vect_is_simple_use: operand _17
common/quant.c:113:9: note: def_stmt: _17 = (int) _16;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _22
common/quant.c:113:9: note: def_stmt: _22 = *pretmp_312[y_157][0];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _28
common/quant.c:113:9: note: def_stmt: _28 = (int) _27;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _29
common/quant.c:113:9: note: def_stmt: _29 = *pretmp_312[y_157][1];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _35
common/quant.c:113:9: note: def_stmt: _35 = (int) _34;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _36
common/quant.c:113:9: note: def_stmt: _36 = *pretmp_312[y_157][2];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _42
common/quant.c:113:9: note: def_stmt: _42 = (int) _41;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _43
common/quant.c:113:9: note: def_stmt: _43 = *pretmp_312[y_157][3];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _49
common/quant.c:113:9: note: def_stmt: _49 = (int) _48;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _50
common/quant.c:113:9: note: def_stmt: _50 = *pretmp_312[y_157][4];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _56
common/quant.c:113:9: note: def_stmt: _56 = (int) _55;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _57
common/quant.c:113:9: note: def_stmt: _57 = *pretmp_312[y_157][5];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _63
common/quant.c:113:9: note: def_stmt: _63 = (int) _62;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _64
common/quant.c:113:9: note: def_stmt: _64 = *pretmp_312[y_157][6];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _70
common/quant.c:113:9: note: def_stmt: _70 = (int) _69;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _71
common/quant.c:113:9: note: def_stmt: _71 = *pretmp_312[y_157][7];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: Build SLP for _17 = (int) _16;

common/quant.c:113:9: note: Build SLP for _28 = (int) _27;

common/quant.c:113:9: note: Build SLP for _35 = (int) _34;

common/quant.c:113:9: note: Build SLP for _42 = (int) _41;

common/quant.c:113:9: note: Build SLP for _49 = (int) _48;

common/quant.c:113:9: note: Build SLP for _56 = (int) _55;

common/quant.c:113:9: note: Build SLP for _63 = (int) _62;

common/quant.c:113:9: note: Build SLP for _70 = (int) _69;

common/quant.c:113:9: note: vect_is_simple_use: operand _16
common/quant.c:113:9: note: def_stmt: _16 = *_15[0];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _27
common/quant.c:113:9: note: def_stmt: _27 = *_15[1];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _34
common/quant.c:113:9: note: def_stmt: _34 = *_15[2];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _41
common/quant.c:113:9: note: def_stmt: _41 = *_15[3];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _48
common/quant.c:113:9: note: def_stmt: _48 = *_15[4];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _55
common/quant.c:113:9: note: def_stmt: _55 = *_15[5];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _62
common/quant.c:113:9: note: def_stmt: _62 = *_15[6];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _69
common/quant.c:113:9: note: def_stmt: _69 = *_15[7];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: Build SLP for _16 = *_15[0];

common/quant.c:113:9: note: Build SLP for _27 = *_15[1];

common/quant.c:113:9: note: Build SLP for _34 = *_15[2];

common/quant.c:113:9: note: Build SLP for _41 = *_15[3];

common/quant.c:113:9: note: Build SLP for _48 = *_15[4];

common/quant.c:113:9: note: Build SLP for _55 = *_15[5];

common/quant.c:113:9: note: Build SLP for _62 = *_15[6];

common/quant.c:113:9: note: Build SLP for _69 = *_15[7];

common/quant.c:113:9: note: Build SLP for _22 = *pretmp_312[y_157][0];

Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:113:9: note: Build SLP for _29 = *pretmp_312[y_157][1];

common/quant.c:113:9: note: Build SLP for _36 = *pretmp_312[y_157][2];

common/quant.c:113:9: note: Build SLP for _43 = *pretmp_312[y_157][3];

common/quant.c:113:9: note: Build SLP for _50 = *pretmp_312[y_157][4];

common/quant.c:113:9: note: Build SLP for _57 = *pretmp_312[y_157][5];

common/quant.c:113:9: note: Build SLP for _64 = *pretmp_312[y_157][6];

common/quant.c:113:9: note: Build SLP for _71 = *pretmp_312[y_157][7];

common/quant.c:113:9: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:113:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:113:9: note: vect_is_simple_use: operand *_15[0]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: vect_is_simple_use: operand _16
common/quant.c:113:9: note: def_stmt: _16 = *_15[0];
common/quant.c:113:9: note: type of def: 3.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:113:9: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:113:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:113:9: note: vect_is_simple_use: operand *pretmp_312[y_157][0]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: vect_is_simple_use: operand _17
common/quant.c:113:9: note: def_stmt: _17 = (int) _16;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _22
common/quant.c:113:9: note: def_stmt: _22 = *pretmp_312[y_157][0];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _23
common/quant.c:113:9: note: def_stmt: _23 = _17 * _22;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vect_is_simple_use: operand _24
common/quant.c:113:9: note: def_stmt: _24 = _23 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_model_store_cost: unaligned supported by hardware.
common/quant.c:113:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:113:9: note: vect_is_simple_use: operand _25
common/quant.c:113:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:113:9: note: type of def: 3.
node 
	stmt 0 *_15[0] = _25;

	stmt 1 *_15[1] = _32;

	stmt 2 *_15[2] = _39;

	stmt 3 *_15[3] = _46;

	stmt 4 *_15[4] = _53;

	stmt 5 *_15[5] = _60;

	stmt 6 *_15[6] = _67;

	stmt 7 *_15[7] = _74;

node 
	stmt 0 _25 = (short int) _24;

	stmt 1 _32 = (short int) _31;

	stmt 2 _39 = (short int) _38;

	stmt 3 _46 = (short int) _45;

	stmt 4 _53 = (short int) _52;

	stmt 5 _60 = (short int) _59;

	stmt 6 _67 = (short int) _66;

	stmt 7 _74 = (short int) _73;

node 
	stmt 0 _24 = _23 << i_qbits_9;

	stmt 1 _31 = _30 << i_qbits_9;

	stmt 2 _38 = _37 << i_qbits_9;

	stmt 3 _45 = _44 << i_qbits_9;

	stmt 4 _52 = _51 << i_qbits_9;

	stmt 5 _59 = _58 << i_qbits_9;

	stmt 6 _66 = _65 << i_qbits_9;

	stmt 7 _73 = _72 << i_qbits_9;

node 
	stmt 0 _23 = _17 * _22;

	stmt 1 _30 = _28 * _29;

	stmt 2 _37 = _35 * _36;

	stmt 3 _44 = _42 * _43;

	stmt 4 _51 = _49 * _50;

	stmt 5 _58 = _56 * _57;

	stmt 6 _65 = _63 * _64;

	stmt 7 _72 = _70 * _71;

node 
	stmt 0 _17 = (int) _16;

	stmt 1 _28 = (int) _27;

	stmt 2 _35 = (int) _34;

	stmt 3 _42 = (int) _41;

	stmt 4 _49 = (int) _48;

	stmt 5 _56 = (int) _55;

	stmt 6 _63 = (int) _62;

	stmt 7 _70 = (int) _69;

node 
	stmt 0 _16 = *_15[0];

	stmt 1 _27 = *_15[1];

	stmt 2 _34 = *_15[2];

	stmt 3 _41 = *_15[3];

	stmt 4 _48 = *_15[4];

	stmt 5 _55 = *_15[5];

	stmt 6 _62 = *_15[6];

	stmt 7 _69 = *_15[7];

node 
	stmt 0 _22 = *pretmp_312[y_157][0];

	stmt 1 _29 = *pretmp_312[y_157][1];

	stmt 2 _36 = *pretmp_312[y_157][2];

	stmt 3 _43 = *pretmp_312[y_157][3];

	stmt 4 _50 = *pretmp_312[y_157][4];

	stmt 5 _57 = *pretmp_312[y_157][5];

	stmt 6 _64 = *pretmp_312[y_157][6];

	stmt 7 _71 = *pretmp_312[y_157][7];

common/quant.c:113:9: note: === vect_make_slp_decision ===
common/quant.c:113:9: note: Decided to SLP 1 instances. Unrolling factor 1
common/quant.c:113:9: note: === vect_detect_hybrid_slp ===
common/quant.c:113:9: note: === vect_analyze_loop_operations ===
common/quant.c:113:9: note: Updating vectorization factor to 1
common/quant.c:113:9: note: examining phi: y_157 = PHI <0(3), y_76(5)>

common/quant.c:113:9: note: examining phi: .MEM_152 = PHI <.MEM_10(D)(3), .MEM_75(5)>

common/quant.c:113:9: note: examining phi: ivtmp_5 = PHI <8(3), ivtmp_299(5)>

common/quant.c:113:9: note: ==> examining statement: # DEBUG y => y_157
common/quant.c:113:9: note: irrelevant.
common/quant.c:113:9: note: ==> examining statement: _11 = (long unsigned int) y_157;
common/quant.c:113:9: note: irrelevant.
common/quant.c:113:9: note: ==> examining statement: _12 = _11 * 16;
common/quant.c:113:9: note: irrelevant.
common/quant.c:113:9: note: ==> examining statement: _15 = dct_13(D) + _12;
common/quant.c:113:9: note: irrelevant.
common/quant.c:113:9: note: ==> examining statement: _16 = *_15[0];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *_15[0]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _17 = (int) _16;
common/quant.c:113:9: note: vect_is_simple_use: operand _16
common/quant.c:113:9: note: def_stmt: _16 = *_15[0];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: _22 = *pretmp_312[y_157][0];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *pretmp_312[y_157][0]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _23 = _17 * _22;
common/quant.c:113:9: note: vect_is_simple_use: operand _17
common/quant.c:113:9: note: def_stmt: _17 = (int) _16;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _22
common/quant.c:113:9: note: def_stmt: _22 = *pretmp_312[y_157][0];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_operation ===
common/quant.c:113:9: note: ==> examining statement: _24 = _23 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _23
common/quant.c:113:9: note: def_stmt: _23 = _17 * _22;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vector/scalar shift/rotate found.
common/quant.c:113:9: note: === vectorizable_shift ===
common/quant.c:113:9: note: ==> examining statement: _25 = (short int) _24;
common/quant.c:113:9: note: vect_is_simple_use: operand _24
common/quant.c:113:9: note: def_stmt: _24 = _23 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: *_15[0] = _25;
common/quant.c:113:9: note: vect_is_simple_use: operand _25
common/quant.c:113:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _32
common/quant.c:113:9: note: def_stmt: _32 = (short int) _31;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _39
common/quant.c:113:9: note: def_stmt: _39 = (short int) _38;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _46
common/quant.c:113:9: note: def_stmt: _46 = (short int) _45;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _53
common/quant.c:113:9: note: def_stmt: _53 = (short int) _52;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _60
common/quant.c:113:9: note: def_stmt: _60 = (short int) _59;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _67
common/quant.c:113:9: note: def_stmt: _67 = (short int) _66;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _74
common/quant.c:113:9: note: def_stmt: _74 = (short int) _73;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: ==> examining statement: _27 = *_15[1];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *_15[1]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _28 = (int) _27;
common/quant.c:113:9: note: vect_is_simple_use: operand _27
common/quant.c:113:9: note: def_stmt: _27 = *_15[1];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: _29 = *pretmp_312[y_157][1];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *pretmp_312[y_157][1]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _30 = _28 * _29;
common/quant.c:113:9: note: vect_is_simple_use: operand _28
common/quant.c:113:9: note: def_stmt: _28 = (int) _27;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _29
common/quant.c:113:9: note: def_stmt: _29 = *pretmp_312[y_157][1];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_operation ===
common/quant.c:113:9: note: ==> examining statement: _31 = _30 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _30
common/quant.c:113:9: note: def_stmt: _30 = _28 * _29;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vector/scalar shift/rotate found.
common/quant.c:113:9: note: === vectorizable_shift ===
common/quant.c:113:9: note: ==> examining statement: _32 = (short int) _31;
common/quant.c:113:9: note: vect_is_simple_use: operand _31
common/quant.c:113:9: note: def_stmt: _31 = _30 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: *_15[1] = _32;
common/quant.c:113:9: note: vect_is_simple_use: operand _32
common/quant.c:113:9: note: def_stmt: _32 = (short int) _31;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: ==> examining statement: _34 = *_15[2];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *_15[2]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _35 = (int) _34;
common/quant.c:113:9: note: vect_is_simple_use: operand _34
common/quant.c:113:9: note: def_stmt: _34 = *_15[2];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: _36 = *pretmp_312[y_157][2];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *pretmp_312[y_157][2]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _37 = _35 * _36;
common/quant.c:113:9: note: vect_is_simple_use: operand _35
common/quant.c:113:9: note: def_stmt: _35 = (int) _34;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _36
common/quant.c:113:9: note: def_stmt: _36 = *pretmp_312[y_157][2];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_operation ===
common/quant.c:113:9: note: ==> examining statement: _38 = _37 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _37
common/quant.c:113:9: note: def_stmt: _37 = _35 * _36;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vector/scalar shift/rotate found.
common/quant.c:113:9: note: === vectorizable_shift ===
common/quant.c:113:9: note: ==> examining statement: _39 = (short int) _38;
common/quant.c:113:9: note: vect_is_simple_use: operand _38
common/quant.c:113:9: note: def_stmt: _38 = _37 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: *_15[2] = _39;
common/quant.c:113:9: note: vect_is_simple_use: operand _39
common/quant.c:113:9: note: def_stmt: _39 = (short int) _38;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: ==> examining statement: _41 = *_15[3];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *_15[3]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _42 = (int) _41;
common/quant.c:113:9: note: vect_is_simple_use: operand _41
common/quant.c:113:9: note: def_stmt: _41 = *_15[3];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: _43 = *pretmp_312[y_157][3];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *pretmp_312[y_157][3]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _44 = _42 * _43;
common/quant.c:113:9: note: vect_is_simple_use: operand _42
common/quant.c:113:9: note: def_stmt: _42 = (int) _41;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _43
common/quant.c:113:9: note: def_stmt: _43 = *pretmp_312[y_157][3];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_operation ===
common/quant.c:113:9: note: ==> examining statement: _45 = _44 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _44
common/quant.c:113:9: note: def_stmt: _44 = _42 * _43;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vector/scalar shift/rotate found.
common/quant.c:113:9: note: === vectorizable_shift ===
common/quant.c:113:9: note: ==> examining statement: _46 = (short int) _45;
common/quant.c:113:9: note: vect_is_simple_use: operand _45
common/quant.c:113:9: note: def_stmt: _45 = _44 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: *_15[3] = _46;
common/quant.c:113:9: note: vect_is_simple_use: operand _46
common/quant.c:113:9: note: def_stmt: _46 = (short int) _45;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: ==> examining statement: _48 = *_15[4];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *_15[4]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _49 = (int) _48;
common/quant.c:113:9: note: vect_is_simple_use: operand _48
common/quant.c:113:9: note: def_stmt: _48 = *_15[4];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: _50 = *pretmp_312[y_157][4];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *pretmp_312[y_157][4]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _51 = _49 * _50;
common/quant.c:113:9: note: vect_is_simple_use: operand _49
common/quant.c:113:9: note: def_stmt: _49 = (int) _48;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _50
common/quant.c:113:9: note: def_stmt: _50 = *pretmp_312[y_157][4];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_operation ===
common/quant.c:113:9: note: ==> examining statement: _52 = _51 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _51
common/quant.c:113:9: note: def_stmt: _51 = _49 * _50;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vector/scalar shift/rotate found.
common/quant.c:113:9: note: === vectorizable_shift ===
common/quant.c:113:9: note: ==> examining statement: _53 = (short int) _52;
common/quant.c:113:9: note: vect_is_simple_use: operand _52
common/quant.c:113:9: note: def_stmt: _52 = _51 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: *_15[4] = _53;
common/quant.c:113:9: note: vect_is_simple_use: operand _53
common/quant.c:113:9: note: def_stmt: _53 = (short int) _52;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: ==> examining statement: _55 = *_15[5];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *_15[5]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _56 = (int) _55;
common/quant.c:113:9: note: vect_is_simple_use: operand _55
common/quant.c:113:9: note: def_stmt: _55 = *_15[5];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: _57 = *pretmp_312[y_157][5];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *pretmp_312[y_157][5]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _58 = _56 * _57;
common/quant.c:113:9: note: vect_is_simple_use: operand _56
common/quant.c:113:9: note: def_stmt: _56 = (int) _55;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _57
common/quant.c:113:9: note: def_stmt: _57 = *pretmp_312[y_157][5];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_operation ===
common/quant.c:113:9: note: ==> examining statement: _59 = _58 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _58
common/quant.c:113:9: note: def_stmt: _58 = _56 * _57;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vector/scalar shift/rotate found.
common/quant.c:113:9: note: === vectorizable_shift ===
common/quant.c:113:9: note: ==> examining statement: _60 = (short int) _59;
common/quant.c:113:9: note: vect_is_simple_use: operand _59
common/quant.c:113:9: note: def_stmt: _59 = _58 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: *_15[5] = _60;
common/quant.c:113:9: note: vect_is_simple_use: operand _60
common/quant.c:113:9: note: def_stmt: _60 = (short int) _59;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: ==> examining statement: _62 = *_15[6];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *_15[6]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _63 = (int) _62;
common/quant.c:113:9: note: vect_is_simple_use: operand _62
common/quant.c:113:9: note: def_stmt: _62 = *_15[6];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: _64 = *pretmp_312[y_157][6];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *pretmp_312[y_157][6]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _65 = _63 * _64;
common/quant.c:113:9: note: vect_is_simple_use: operand _63
common/quant.c:113:9: note: def_stmt: _63 = (int) _62;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _64
common/quant.c:113:9: note: def_stmt: _64 = *pretmp_312[y_157][6];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_operation ===
common/quant.c:113:9: note: ==> examining statement: _66 = _65 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _65
common/quant.c:113:9: note: def_stmt: _65 = _63 * _64;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vector/scalar shift/rotate found.
common/quant.c:113:9: note: === vectorizable_shift ===
common/quant.c:113:9: note: ==> examining statement: _67 = (short int) _66;
common/quant.c:113:9: note: vect_is_simple_use: operand _66
common/quant.c:113:9: note: def_stmt: _66 = _65 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: *_15[6] = _67;
common/quant.c:113:9: note: vect_is_simple_use: operand _67
common/quant.c:113:9: note: def_stmt: _67 = (short int) _66;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: ==> examining statement: _69 = *_15[7];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *_15[7]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _70 = (int) _69;
common/quant.c:113:9: note: vect_is_simple_use: operand _69
common/quant.c:113:9: note: def_stmt: _69 = *_15[7];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: _71 = *pretmp_312[y_157][7];
common/quant.c:113:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:113:9: note: vect_is_simple_use: operand *pretmp_312[y_157][7]
common/quant.c:113:9: note: not ssa-name.
common/quant.c:113:9: note: use not simple.
common/quant.c:113:9: note: ==> examining statement: _72 = _70 * _71;
common/quant.c:113:9: note: vect_is_simple_use: operand _70
common/quant.c:113:9: note: def_stmt: _70 = (int) _69;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _71
common/quant.c:113:9: note: def_stmt: _71 = *pretmp_312[y_157][7];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_operation ===
common/quant.c:113:9: note: ==> examining statement: _73 = _72 << i_qbits_9;
common/quant.c:113:9: note: vect_is_simple_use: operand _72
common/quant.c:113:9: note: def_stmt: _72 = _70 * _71;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vector/scalar shift/rotate found.
common/quant.c:113:9: note: === vectorizable_shift ===
common/quant.c:113:9: note: ==> examining statement: _74 = (short int) _73;
common/quant.c:113:9: note: vect_is_simple_use: operand _73
common/quant.c:113:9: note: def_stmt: _73 = _72 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: === vectorizable_conversion ===
common/quant.c:113:9: note: ==> examining statement: *_15[7] = _74;
common/quant.c:113:9: note: vect_is_simple_use: operand _74
common/quant.c:113:9: note: def_stmt: _74 = (short int) _73;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: ==> examining statement: y_76 = y_157 + 1;
common/quant.c:113:9: note: irrelevant.
common/quant.c:113:9: note: ==> examining statement: # DEBUG y => y_76
common/quant.c:113:9: note: irrelevant.
common/quant.c:113:9: note: ==> examining statement: # DEBUG y => y_76
common/quant.c:113:9: note: irrelevant.
common/quant.c:113:9: note: ==> examining statement: ivtmp_299 = ivtmp_5 - 1;
common/quant.c:113:9: note: irrelevant.
common/quant.c:113:9: note: ==> examining statement: if (ivtmp_299 != 0)
common/quant.c:113:9: note: irrelevant.
common/quant.c:113:9: note: vectorization_factor = 1, niters = 8
common/quant.c:113:9: note: === vect_update_slp_costs_according_to_vf ===
common/quant.c:113:9: note: Cost model analysis: 
  Vector inside of loop cost: 10
  Vector prologue cost: 1
  Vector epilogue cost: 0
  Scalar iteration cost: 56
  Scalar outside cost: 0
  Vector outside cost: 1
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
common/quant.c:113:9: note:   Runtime profitability threshold = 0
common/quant.c:113:9: note:   Static estimate profitability threshold = 0
common/quant.c:113:9: note: loop vectorized
common/quant.c:113:9: note: === vec_transform_loop ===
common/quant.c:113:9: note: ------>vectorizing phi: y_157 = PHI <0(11), y_76(5)>

common/quant.c:113:9: note: ------>vectorizing phi: .MEM_152 = PHI <.MEM_10(D)(11), .MEM_75(5)>

common/quant.c:113:9: note: ------>vectorizing phi: ivtmp_5 = PHI <8(11), ivtmp_299(5)>

common/quant.c:113:9: note: ------>vectorizing statement: # DEBUG y => y_157

common/quant.c:113:9: note: ------>vectorizing statement: _11 = (long unsigned int) y_157;

common/quant.c:113:9: note: ------>vectorizing statement: _12 = _11 * 16;

common/quant.c:113:9: note: ------>vectorizing statement: _15 = dct_13(D) + _12;

common/quant.c:113:9: note: ------>vectorizing statement: _16 = *_15[0];

common/quant.c:113:9: note: === scheduling SLP instances ===
common/quant.c:113:9: note: ------>vectorizing SLP node starting from: _16 = *_15[0];

common/quant.c:113:9: note: transform load. ncopies = 1
common/quant.c:113:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_13(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:113:9: note: created vectp_dct.84_295
common/quant.c:113:9: note: add new stmt: vect__16.85_292 = MEM[(short int *)vectp_dct.83_294];
common/quant.c:113:9: note: ------>vectorizing SLP node starting from: _17 = (int) _16;

common/quant.c:113:9: note: vect_is_simple_use: operand _16
common/quant.c:113:9: note: def_stmt: _16 = *_15[0];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: transform conversion. ncopies = 1.
common/quant.c:113:9: note: add new stmt: vect__17.86_291 = [vec_unpack_lo_expr] vect__16.85_292;
common/quant.c:113:9: note: add new stmt: vect__17.86_290 = [vec_unpack_hi_expr] vect__16.85_292;
common/quant.c:113:9: note: ------>vectorizing SLP node starting from: _22 = *pretmp_312[y_157][0];

common/quant.c:113:9: note: transform load. ncopies = 1
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:113:9: note: create vector_type-pointer variable to type: vector(4) int  vectorizing an array ref: *pretmp_312
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:113:9: note: created vectp.88_289
common/quant.c:113:9: note: add new stmt: vect__22.89_284 = MEM[(int *)vectp.87_286];
common/quant.c:113:9: note: add new stmt: vectp.87_283 = vectp.87_286 + 16;
common/quant.c:113:9: note: add new stmt: vect__22.90_282 = MEM[(int *)vectp.87_283];
common/quant.c:113:9: note: ------>vectorizing SLP node starting from: _23 = _17 * _22;

common/quant.c:113:9: note: vect_is_simple_use: operand _17
common/quant.c:113:9: note: def_stmt: _17 = (int) _16;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _22
common/quant.c:113:9: note: def_stmt: _22 = *pretmp_312[y_157][0];
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: transform binary/unary operation.
common/quant.c:113:9: note: add new stmt: vect__23.91_281 = vect__17.86_291 * vect__22.89_284;
common/quant.c:113:9: note: add new stmt: vect__23.91_280 = vect__17.86_290 * vect__22.90_282;
common/quant.c:113:9: note: ------>vectorizing SLP node starting from: _24 = _23 << i_qbits_9;

common/quant.c:113:9: note: vect_is_simple_use: operand _23
common/quant.c:113:9: note: def_stmt: _23 = _17 * _22;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand i_qbits_9
common/quant.c:113:9: note: def_stmt: i_qbits_9 = _8 + -6;
common/quant.c:113:9: note: type of def: 2.
common/quant.c:113:9: note: vector/scalar shift/rotate found.
common/quant.c:113:9: note: transform binary/unary operation.
common/quant.c:113:9: note: operand 1 using scalar mode.
common/quant.c:113:9: note: add new stmt: vect__24.92_279 = vect__23.91_281 << i_qbits_9;
common/quant.c:113:9: note: add new stmt: vect__24.92_278 = vect__23.91_280 << i_qbits_9;
common/quant.c:113:9: note: ------>vectorizing SLP node starting from: _25 = (short int) _24;

common/quant.c:113:9: note: vect_is_simple_use: operand _24
common/quant.c:113:9: note: def_stmt: _24 = _23 << i_qbits_9;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: transform conversion. ncopies = 1.
common/quant.c:113:9: note: add new stmt: vect__25.93_277 = VEC_PACK_TRUNC_EXPR <vect__24.92_279, vect__24.92_278>;
common/quant.c:113:9: note: ------>vectorizing SLP node starting from: *_15[0] = _25;

common/quant.c:113:9: note: vect_is_simple_use: operand _25
common/quant.c:113:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _32
common/quant.c:113:9: note: def_stmt: _32 = (short int) _31;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _39
common/quant.c:113:9: note: def_stmt: _39 = (short int) _38;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _46
common/quant.c:113:9: note: def_stmt: _46 = (short int) _45;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _53
common/quant.c:113:9: note: def_stmt: _53 = (short int) _52;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _60
common/quant.c:113:9: note: def_stmt: _60 = (short int) _59;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _67
common/quant.c:113:9: note: def_stmt: _67 = (short int) _66;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: vect_is_simple_use: operand _74
common/quant.c:113:9: note: def_stmt: _74 = (short int) _73;
common/quant.c:113:9: note: type of def: 3.
common/quant.c:113:9: note: transform store. ncopies = 1
common/quant.c:113:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_13(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:113:9: note: created vectp_dct.95_276
common/quant.c:113:9: note: add new stmt: MEM[(short int *)vectp_dct.94_275] = vect__25.93_277;
common/quant.c:113:9: note: vectorizing stmts using SLP.
common/quant.c:113:9: note: ------>vectorizing statement: vect__17.86_291 = [vec_unpack_lo_expr] vect__16.85_292;

common/quant.c:113:9: note: ------>vectorizing statement: vect__17.86_290 = [vec_unpack_hi_expr] vect__16.85_292;

common/quant.c:113:9: note: ------>vectorizing statement: _17 = (int) _16;

common/quant.c:113:9: note: ------>vectorizing statement: vect__22.89_284 = MEM[(int *)vectp.87_286];

common/quant.c:113:9: note: ------>vectorizing statement: vectp.87_283 = vectp.87_286 + 16;

common/quant.c:113:9: note: ------>vectorizing statement: vect__22.90_282 = MEM[(int *)vectp.87_283];

common/quant.c:113:9: note: ------>vectorizing statement: _22 = *pretmp_312[y_157][0];

common/quant.c:113:9: note: ------>vectorizing statement: vect__23.91_281 = vect__17.86_291 * vect__22.89_284;

common/quant.c:113:9: note: ------>vectorizing statement: vect__23.91_280 = vect__17.86_290 * vect__22.90_282;

common/quant.c:113:9: note: ------>vectorizing statement: _23 = _17 * _22;

common/quant.c:113:9: note: ------>vectorizing statement: vect__24.92_279 = vect__23.91_281 << i_qbits_9;

common/quant.c:113:9: note: ------>vectorizing statement: vect__24.92_278 = vect__23.91_280 << i_qbits_9;

common/quant.c:113:9: note: ------>vectorizing statement: _24 = _23 << i_qbits_9;

common/quant.c:113:9: note: ------>vectorizing statement: vect__25.93_277 = VEC_PACK_TRUNC_EXPR <vect__24.92_279, vect__24.92_278>;

common/quant.c:113:9: note: ------>vectorizing statement: _25 = (short int) _24;

common/quant.c:113:9: note: ------>vectorizing statement: _27 = *_15[1];

common/quant.c:113:9: note: ------>vectorizing statement: _28 = (int) _27;

common/quant.c:113:9: note: ------>vectorizing statement: _29 = *pretmp_312[y_157][1];

common/quant.c:113:9: note: ------>vectorizing statement: _30 = _28 * _29;

common/quant.c:113:9: note: ------>vectorizing statement: _31 = _30 << i_qbits_9;

common/quant.c:113:9: note: ------>vectorizing statement: _32 = (short int) _31;

common/quant.c:113:9: note: ------>vectorizing statement: _34 = *_15[2];

common/quant.c:113:9: note: ------>vectorizing statement: _35 = (int) _34;

common/quant.c:113:9: note: ------>vectorizing statement: _36 = *pretmp_312[y_157][2];

common/quant.c:113:9: note: ------>vectorizing statement: _37 = _35 * _36;

common/quant.c:113:9: note: ------>vectorizing statement: _38 = _37 << i_qbits_9;

common/quant.c:113:9: note: ------>vectorizing statement: _39 = (short int) _38;

common/quant.c:113:9: note: ------>vectorizing statement: _41 = *_15[3];

common/quant.c:113:9: note: ------>vectorizing statement: _42 = (int) _41;

common/quant.c:113:9: note: ------>vectorizing statement: _43 = *pretmp_312[y_157][3];

common/quant.c:113:9: note: ------>vectorizing statement: _44 = _42 * _43;

common/quant.c:113:9: note: ------>vectorizing statement: _45 = _44 << i_qbits_9;

common/quant.c:113:9: note: ------>vectorizing statement: _46 = (short int) _45;

common/quant.c:113:9: note: ------>vectorizing statement: _48 = *_15[4];

common/quant.c:113:9: note: ------>vectorizing statement: _49 = (int) _48;

common/quant.c:113:9: note: ------>vectorizing statement: _50 = *pretmp_312[y_157][4];

common/quant.c:113:9: note: ------>vectorizing statement: _51 = _49 * _50;

common/quant.c:113:9: note: ------>vectorizing statement: _52 = _51 << i_qbits_9;

common/quant.c:113:9: note: ------>vectorizing statement: _53 = (short int) _52;

common/quant.c:113:9: note: ------>vectorizing statement: _55 = *_15[5];

common/quant.c:113:9: note: ------>vectorizing statement: _56 = (int) _55;

common/quant.c:113:9: note: ------>vectorizing statement: _57 = *pretmp_312[y_157][5];

common/quant.c:113:9: note: ------>vectorizing statement: _58 = _56 * _57;

common/quant.c:113:9: note: ------>vectorizing statement: _59 = _58 << i_qbits_9;

common/quant.c:113:9: note: ------>vectorizing statement: _60 = (short int) _59;

common/quant.c:113:9: note: ------>vectorizing statement: _62 = *_15[6];

common/quant.c:113:9: note: ------>vectorizing statement: _63 = (int) _62;

common/quant.c:113:9: note: ------>vectorizing statement: _64 = *pretmp_312[y_157][6];

common/quant.c:113:9: note: ------>vectorizing statement: _65 = _63 * _64;

common/quant.c:113:9: note: ------>vectorizing statement: _66 = _65 << i_qbits_9;

common/quant.c:113:9: note: ------>vectorizing statement: _67 = (short int) _66;

common/quant.c:113:9: note: ------>vectorizing statement: _69 = *_15[7];

common/quant.c:113:9: note: ------>vectorizing statement: _70 = (int) _69;

common/quant.c:113:9: note: ------>vectorizing statement: _71 = *pretmp_312[y_157][7];

common/quant.c:113:9: note: ------>vectorizing statement: _72 = _70 * _71;

common/quant.c:113:9: note: ------>vectorizing statement: _73 = _72 << i_qbits_9;

common/quant.c:113:9: note: ------>vectorizing statement: _74 = (short int) _73;

common/quant.c:113:9: note: ------>vectorizing statement: MEM[(short int *)vectp_dct.94_275] = vect__25.93_277;

common/quant.c:113:9: note: ------>vectorizing statement: y_76 = y_157 + 1;

common/quant.c:113:9: note: ------>vectorizing statement: # DEBUG y => y_76

common/quant.c:113:9: note: ------>vectorizing statement: # DEBUG y => y_76

common/quant.c:113:9: note: ------>vectorizing statement: ivtmp_299 = ivtmp_5 - 1;

common/quant.c:113:9: note: ------>vectorizing statement: vectp_dct.83_293 = vectp_dct.83_294 + 16;

common/quant.c:113:9: note: ------>vectorizing statement: vectp.87_285 = vectp.87_283 + 16;

common/quant.c:113:9: note: ------>vectorizing statement: vectp_dct.94_274 = vectp_dct.94_275 + 16;

common/quant.c:113:9: note: ------>vectorizing statement: if (ivtmp_299 != 0)


loop at common/quant.c:115: if (ivtmp_68 < 8)

;; Scaling loop 2 with scale 1.000000, bounding iterations to 8 from guessed 8
common/quant.c:113:9: note: LOOP VECTORIZED


Analyzing loop at common/quant.c:128
common/quant.c:128:9: note: ===== analyze_loop_nest =====
common/quant.c:128:9: note: === vect_analyze_loop_form ===
split exit edge.
common/quant.c:128:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/quant.c:128:9: note: === vect_analyze_data_refs ===
Creating dr for *_81[0]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 0
	Access function 1: {0B, +, 16}_1
Creating dr for *pretmp_303[y_156][0]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 0
	step: 32
	aligned to: 128
	base_object: *pretmp_303
	Access function 0: 0
	Access function 1: {0, +, 1}_1
Creating dr for *_81[0]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 0
	Access function 1: {0B, +, 16}_1
Creating dr for *_81[1]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 1
	Access function 1: {0B, +, 16}_1
Creating dr for *pretmp_303[y_156][1]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 4
	step: 32
	aligned to: 128
	base_object: *pretmp_303
	Access function 0: 1
	Access function 1: {0, +, 1}_1
Creating dr for *_81[1]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 1
	Access function 1: {0B, +, 16}_1
Creating dr for *_81[2]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 2
	Access function 1: {0B, +, 16}_1
Creating dr for *pretmp_303[y_156][2]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 8
	step: 32
	aligned to: 128
	base_object: *pretmp_303
	Access function 0: 2
	Access function 1: {0, +, 1}_1
Creating dr for *_81[2]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 2
	Access function 1: {0B, +, 16}_1
Creating dr for *_81[3]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 3
	Access function 1: {0B, +, 16}_1
Creating dr for *pretmp_303[y_156][3]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 12
	step: 32
	aligned to: 128
	base_object: *pretmp_303
	Access function 0: 3
	Access function 1: {0, +, 1}_1
Creating dr for *_81[3]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 3
	Access function 1: {0B, +, 16}_1
Creating dr for *_81[4]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 4
	Access function 1: {0B, +, 16}_1
Creating dr for *pretmp_303[y_156][4]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 16
	step: 32
	aligned to: 128
	base_object: *pretmp_303
	Access function 0: 4
	Access function 1: {0, +, 1}_1
Creating dr for *_81[4]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 4
	Access function 1: {0B, +, 16}_1
Creating dr for *_81[5]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 10
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 5
	Access function 1: {0B, +, 16}_1
Creating dr for *pretmp_303[y_156][5]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 20
	step: 32
	aligned to: 128
	base_object: *pretmp_303
	Access function 0: 5
	Access function 1: {0, +, 1}_1
Creating dr for *_81[5]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 10
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 5
	Access function 1: {0B, +, 16}_1
Creating dr for *_81[6]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 6
	Access function 1: {0B, +, 16}_1
Creating dr for *pretmp_303[y_156][6]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 24
	step: 32
	aligned to: 128
	base_object: *pretmp_303
	Access function 0: 6
	Access function 1: {0, +, 1}_1
Creating dr for *_81[6]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 6
	Access function 1: {0B, +, 16}_1
Creating dr for *_81[7]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 14
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 7
	Access function 1: {0B, +, 16}_1
Creating dr for *pretmp_303[y_156][7]
analyze_innermost: success.
	base_address: dequant_mf_20(D) + (long unsigned int) i_mf_7 * 256
	offset from base address: 0
	constant offset from base address: 28
	step: 32
	aligned to: 128
	base_object: *pretmp_303
	Access function 0: 7
	Access function 1: {0, +, 1}_1
Creating dr for *_81[7]
analyze_innermost: success.
	base_address: dct_13(D)
	offset from base address: 0
	constant offset from base address: 14
	step: 16
	aligned to: 128
	base_object: *dct_13(D)
	Access function 0: 7
	Access function 1: {0B, +, 16}_1
common/quant.c:128:9: note: got vectype for stmt: _82 = *_81[0];
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _87 = *pretmp_303[y_156][0];
vector(4) int
common/quant.c:128:9: note: got vectype for stmt: *_81[0] = _92;
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _94 = *_81[1];
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _96 = *pretmp_303[y_156][1];
vector(4) int
common/quant.c:128:9: note: got vectype for stmt: *_81[1] = _100;
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _102 = *_81[2];
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _104 = *pretmp_303[y_156][2];
vector(4) int
common/quant.c:128:9: note: got vectype for stmt: *_81[2] = _108;
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _110 = *_81[3];
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _112 = *pretmp_303[y_156][3];
vector(4) int
common/quant.c:128:9: note: got vectype for stmt: *_81[3] = _116;
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _118 = *_81[4];
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _120 = *pretmp_303[y_156][4];
vector(4) int
common/quant.c:128:9: note: got vectype for stmt: *_81[4] = _124;
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _126 = *_81[5];
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _128 = *pretmp_303[y_156][5];
vector(4) int
common/quant.c:128:9: note: got vectype for stmt: *_81[5] = _132;
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _134 = *_81[6];
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _136 = *pretmp_303[y_156][6];
vector(4) int
common/quant.c:128:9: note: got vectype for stmt: *_81[6] = _140;
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _142 = *_81[7];
vector(8) short int
common/quant.c:128:9: note: got vectype for stmt: _144 = *pretmp_303[y_156][7];
vector(4) int
common/quant.c:128:9: note: got vectype for stmt: *_81[7] = _148;
vector(8) short int
common/quant.c:128:9: note: === vect_analyze_scalar_cycles ===
common/quant.c:128:9: note: Analyze phi: y_156 = PHI <y_150(9), 0(7)>

common/quant.c:128:9: note: Access function of PHI: {0, +, 1}_1
common/quant.c:128:9: note: step: 1,  init: 0
common/quant.c:128:9: note: Detected induction.
common/quant.c:128:9: note: Analyze phi: .MEM_154 = PHI <.MEM_149(9), .MEM_10(D)(7)>

common/quant.c:128:9: note: Analyze phi: ivtmp_298 = PHI <ivtmp_297(9), 8(7)>

common/quant.c:128:9: note: Access function of PHI: {8, +, 4294967295}_1
common/quant.c:128:9: note: step: 4294967295,  init: 8
common/quant.c:128:9: note: Detected induction.
common/quant.c:128:9: note: === vect_pattern_recog ===
common/quant.c:128:9: note: vect_is_simple_use: operand _79
common/quant.c:128:9: note: def_stmt: _79 = (long unsigned int) y_156;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand y_156
common/quant.c:128:9: note: def_stmt: y_156 = PHI <y_150(9), 0(7)>
common/quant.c:128:9: note: type of def: 4.
common/quant.c:128:9: note: vect_is_simple_use: operand 16
common/quant.c:128:9: note: vect_is_simple_use: operand _83
common/quant.c:128:9: note: def_stmt: _83 = (int) _82;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _82
common/quant.c:128:9: note: def_stmt: _82 = *_81[0];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _87
common/quant.c:128:9: note: def_stmt: _87 = *pretmp_303[y_156][0];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _95
common/quant.c:128:9: note: def_stmt: _95 = (int) _94;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _94
common/quant.c:128:9: note: def_stmt: _94 = *_81[1];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _96
common/quant.c:128:9: note: def_stmt: _96 = *pretmp_303[y_156][1];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _103
common/quant.c:128:9: note: def_stmt: _103 = (int) _102;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _102
common/quant.c:128:9: note: def_stmt: _102 = *_81[2];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _104
common/quant.c:128:9: note: def_stmt: _104 = *pretmp_303[y_156][2];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _111
common/quant.c:128:9: note: def_stmt: _111 = (int) _110;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _110
common/quant.c:128:9: note: def_stmt: _110 = *_81[3];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _112
common/quant.c:128:9: note: def_stmt: _112 = *pretmp_303[y_156][3];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _119
common/quant.c:128:9: note: def_stmt: _119 = (int) _118;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _118
common/quant.c:128:9: note: def_stmt: _118 = *_81[4];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _120
common/quant.c:128:9: note: def_stmt: _120 = *pretmp_303[y_156][4];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _127
common/quant.c:128:9: note: def_stmt: _127 = (int) _126;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _126
common/quant.c:128:9: note: def_stmt: _126 = *_81[5];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _128
common/quant.c:128:9: note: def_stmt: _128 = *pretmp_303[y_156][5];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _135
common/quant.c:128:9: note: def_stmt: _135 = (int) _134;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _134
common/quant.c:128:9: note: def_stmt: _134 = *_81[6];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _136
common/quant.c:128:9: note: def_stmt: _136 = *pretmp_303[y_156][6];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _143
common/quant.c:128:9: note: def_stmt: _143 = (int) _142;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _142
common/quant.c:128:9: note: def_stmt: _142 = *_81[7];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _144
common/quant.c:128:9: note: def_stmt: _144 = *pretmp_303[y_156][7];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vect_analyze_data_ref_accesses ===
common/quant.c:128:9: note: Detected interleaving *pretmp_303[y_156][0] and *pretmp_303[y_156][1]
common/quant.c:128:9: note: Detected interleaving *pretmp_303[y_156][0] and *pretmp_303[y_156][2]
common/quant.c:128:9: note: Detected interleaving *pretmp_303[y_156][0] and *pretmp_303[y_156][3]
common/quant.c:128:9: note: Detected interleaving *pretmp_303[y_156][0] and *pretmp_303[y_156][4]
common/quant.c:128:9: note: Detected interleaving *pretmp_303[y_156][0] and *pretmp_303[y_156][5]
common/quant.c:128:9: note: Detected interleaving *pretmp_303[y_156][0] and *pretmp_303[y_156][6]
common/quant.c:128:9: note: Detected interleaving *pretmp_303[y_156][0] and *pretmp_303[y_156][7]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[1]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[2]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[3]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[4]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[5]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[6]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[7]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[1]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[2]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[3]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[4]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[5]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[6]
common/quant.c:128:9: note: Detected interleaving *_81[0] and *_81[7]
common/quant.c:128:9: note: Detected interleaving of size 8
common/quant.c:128:9: note: Detected interleaving of size 8
common/quant.c:128:9: note: Detected interleaving of size 8
common/quant.c:128:9: note: === vect_mark_stmts_to_be_vectorized ===
common/quant.c:128:9: note: init: phi relevant? y_156 = PHI <y_150(9), 0(7)>
common/quant.c:128:9: note: init: phi relevant? .MEM_154 = PHI <.MEM_149(9), .MEM_10(D)(7)>
common/quant.c:128:9: note: init: phi relevant? ivtmp_298 = PHI <ivtmp_297(9), 8(7)>
common/quant.c:128:9: note: init: stmt relevant? # DEBUG y => y_156
common/quant.c:128:9: note: init: stmt relevant? _79 = (long unsigned int) y_156;
common/quant.c:128:9: note: init: stmt relevant? _80 = _79 * 16;
common/quant.c:128:9: note: init: stmt relevant? _81 = dct_13(D) + _80;
common/quant.c:128:9: note: init: stmt relevant? _82 = *_81[0];
common/quant.c:128:9: note: init: stmt relevant? _83 = (int) _82;
common/quant.c:128:9: note: init: stmt relevant? _87 = *pretmp_303[y_156][0];
common/quant.c:128:9: note: init: stmt relevant? _88 = _83 * _87;
common/quant.c:128:9: note: init: stmt relevant? _89 = f_78 + _88;
common/quant.c:128:9: note: init: stmt relevant? _91 = _89 >> pretmp_306;
common/quant.c:128:9: note: init: stmt relevant? _92 = (short int) _91;
common/quant.c:128:9: note: init: stmt relevant? *_81[0] = _92;
common/quant.c:128:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: init: stmt relevant? _94 = *_81[1];
common/quant.c:128:9: note: init: stmt relevant? _95 = (int) _94;
common/quant.c:128:9: note: init: stmt relevant? _96 = *pretmp_303[y_156][1];
common/quant.c:128:9: note: init: stmt relevant? _97 = _95 * _96;
common/quant.c:128:9: note: init: stmt relevant? _98 = f_78 + _97;
common/quant.c:128:9: note: init: stmt relevant? _99 = _98 >> pretmp_306;
common/quant.c:128:9: note: init: stmt relevant? _100 = (short int) _99;
common/quant.c:128:9: note: init: stmt relevant? *_81[1] = _100;
common/quant.c:128:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: init: stmt relevant? _102 = *_81[2];
common/quant.c:128:9: note: init: stmt relevant? _103 = (int) _102;
common/quant.c:128:9: note: init: stmt relevant? _104 = *pretmp_303[y_156][2];
common/quant.c:128:9: note: init: stmt relevant? _105 = _103 * _104;
common/quant.c:128:9: note: init: stmt relevant? _106 = f_78 + _105;
common/quant.c:128:9: note: init: stmt relevant? _107 = _106 >> pretmp_306;
common/quant.c:128:9: note: init: stmt relevant? _108 = (short int) _107;
common/quant.c:128:9: note: init: stmt relevant? *_81[2] = _108;
common/quant.c:128:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: init: stmt relevant? _110 = *_81[3];
common/quant.c:128:9: note: init: stmt relevant? _111 = (int) _110;
common/quant.c:128:9: note: init: stmt relevant? _112 = *pretmp_303[y_156][3];
common/quant.c:128:9: note: init: stmt relevant? _113 = _111 * _112;
common/quant.c:128:9: note: init: stmt relevant? _114 = f_78 + _113;
common/quant.c:128:9: note: init: stmt relevant? _115 = _114 >> pretmp_306;
common/quant.c:128:9: note: init: stmt relevant? _116 = (short int) _115;
common/quant.c:128:9: note: init: stmt relevant? *_81[3] = _116;
common/quant.c:128:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: init: stmt relevant? _118 = *_81[4];
common/quant.c:128:9: note: init: stmt relevant? _119 = (int) _118;
common/quant.c:128:9: note: init: stmt relevant? _120 = *pretmp_303[y_156][4];
common/quant.c:128:9: note: init: stmt relevant? _121 = _119 * _120;
common/quant.c:128:9: note: init: stmt relevant? _122 = f_78 + _121;
common/quant.c:128:9: note: init: stmt relevant? _123 = _122 >> pretmp_306;
common/quant.c:128:9: note: init: stmt relevant? _124 = (short int) _123;
common/quant.c:128:9: note: init: stmt relevant? *_81[4] = _124;
common/quant.c:128:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: init: stmt relevant? _126 = *_81[5];
common/quant.c:128:9: note: init: stmt relevant? _127 = (int) _126;
common/quant.c:128:9: note: init: stmt relevant? _128 = *pretmp_303[y_156][5];
common/quant.c:128:9: note: init: stmt relevant? _129 = _127 * _128;
common/quant.c:128:9: note: init: stmt relevant? _130 = f_78 + _129;
common/quant.c:128:9: note: init: stmt relevant? _131 = _130 >> pretmp_306;
common/quant.c:128:9: note: init: stmt relevant? _132 = (short int) _131;
common/quant.c:128:9: note: init: stmt relevant? *_81[5] = _132;
common/quant.c:128:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: init: stmt relevant? _134 = *_81[6];
common/quant.c:128:9: note: init: stmt relevant? _135 = (int) _134;
common/quant.c:128:9: note: init: stmt relevant? _136 = *pretmp_303[y_156][6];
common/quant.c:128:9: note: init: stmt relevant? _137 = _135 * _136;
common/quant.c:128:9: note: init: stmt relevant? _138 = f_78 + _137;
common/quant.c:128:9: note: init: stmt relevant? _139 = _138 >> pretmp_306;
common/quant.c:128:9: note: init: stmt relevant? _140 = (short int) _139;
common/quant.c:128:9: note: init: stmt relevant? *_81[6] = _140;
common/quant.c:128:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: init: stmt relevant? _142 = *_81[7];
common/quant.c:128:9: note: init: stmt relevant? _143 = (int) _142;
common/quant.c:128:9: note: init: stmt relevant? _144 = *pretmp_303[y_156][7];
common/quant.c:128:9: note: init: stmt relevant? _145 = _143 * _144;
common/quant.c:128:9: note: init: stmt relevant? _146 = f_78 + _145;
common/quant.c:128:9: note: init: stmt relevant? _147 = _146 >> pretmp_306;
common/quant.c:128:9: note: init: stmt relevant? _148 = (short int) _147;
common/quant.c:128:9: note: init: stmt relevant? *_81[7] = _148;
common/quant.c:128:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: init: stmt relevant? y_150 = y_156 + 1;
common/quant.c:128:9: note: init: stmt relevant? # DEBUG y => y_150
common/quant.c:128:9: note: init: stmt relevant? # DEBUG y => y_150
common/quant.c:128:9: note: init: stmt relevant? ivtmp_297 = ivtmp_298 - 1;
common/quant.c:128:9: note: init: stmt relevant? if (ivtmp_297 != 0)
common/quant.c:128:9: note: worklist: examine stmt: *_81[7] = _148;
common/quant.c:128:9: note: vect_is_simple_use: operand _148
common/quant.c:128:9: note: def_stmt: _148 = (short int) _147;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _148 = (short int) _147;
common/quant.c:128:9: note: vect_is_simple_use: operand _147
common/quant.c:128:9: note: def_stmt: _147 = _146 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _147 = _146 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _146
common/quant.c:128:9: note: def_stmt: _146 = f_78 + _145;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: worklist: examine stmt: _146 = f_78 + _145;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: vect_is_simple_use: operand _145
common/quant.c:128:9: note: def_stmt: _145 = _143 * _144;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _145 = _143 * _144;
common/quant.c:128:9: note: vect_is_simple_use: operand _143
common/quant.c:128:9: note: def_stmt: _143 = (int) _142;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand _144
common/quant.c:128:9: note: def_stmt: _144 = *pretmp_303[y_156][7];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _144 = *pretmp_303[y_156][7];
common/quant.c:128:9: note: worklist: examine stmt: _143 = (int) _142;
common/quant.c:128:9: note: vect_is_simple_use: operand _142
common/quant.c:128:9: note: def_stmt: _142 = *_81[7];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _142 = *_81[7];
common/quant.c:128:9: note: worklist: examine stmt: *_81[6] = _140;
common/quant.c:128:9: note: vect_is_simple_use: operand _140
common/quant.c:128:9: note: def_stmt: _140 = (short int) _139;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _140 = (short int) _139;
common/quant.c:128:9: note: vect_is_simple_use: operand _139
common/quant.c:128:9: note: def_stmt: _139 = _138 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _139 = _138 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _138
common/quant.c:128:9: note: def_stmt: _138 = f_78 + _137;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: worklist: examine stmt: _138 = f_78 + _137;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: vect_is_simple_use: operand _137
common/quant.c:128:9: note: def_stmt: _137 = _135 * _136;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _137 = _135 * _136;
common/quant.c:128:9: note: vect_is_simple_use: operand _135
common/quant.c:128:9: note: def_stmt: _135 = (int) _134;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand _136
common/quant.c:128:9: note: def_stmt: _136 = *pretmp_303[y_156][6];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _136 = *pretmp_303[y_156][6];
common/quant.c:128:9: note: worklist: examine stmt: _135 = (int) _134;
common/quant.c:128:9: note: vect_is_simple_use: operand _134
common/quant.c:128:9: note: def_stmt: _134 = *_81[6];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _134 = *_81[6];
common/quant.c:128:9: note: worklist: examine stmt: *_81[5] = _132;
common/quant.c:128:9: note: vect_is_simple_use: operand _132
common/quant.c:128:9: note: def_stmt: _132 = (short int) _131;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _132 = (short int) _131;
common/quant.c:128:9: note: vect_is_simple_use: operand _131
common/quant.c:128:9: note: def_stmt: _131 = _130 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _131 = _130 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _130
common/quant.c:128:9: note: def_stmt: _130 = f_78 + _129;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: worklist: examine stmt: _130 = f_78 + _129;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: vect_is_simple_use: operand _129
common/quant.c:128:9: note: def_stmt: _129 = _127 * _128;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _129 = _127 * _128;
common/quant.c:128:9: note: vect_is_simple_use: operand _127
common/quant.c:128:9: note: def_stmt: _127 = (int) _126;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand _128
common/quant.c:128:9: note: def_stmt: _128 = *pretmp_303[y_156][5];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _128 = *pretmp_303[y_156][5];
common/quant.c:128:9: note: worklist: examine stmt: _127 = (int) _126;
common/quant.c:128:9: note: vect_is_simple_use: operand _126
common/quant.c:128:9: note: def_stmt: _126 = *_81[5];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _126 = *_81[5];
common/quant.c:128:9: note: worklist: examine stmt: *_81[4] = _124;
common/quant.c:128:9: note: vect_is_simple_use: operand _124
common/quant.c:128:9: note: def_stmt: _124 = (short int) _123;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _124 = (short int) _123;
common/quant.c:128:9: note: vect_is_simple_use: operand _123
common/quant.c:128:9: note: def_stmt: _123 = _122 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _123 = _122 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _122
common/quant.c:128:9: note: def_stmt: _122 = f_78 + _121;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: worklist: examine stmt: _122 = f_78 + _121;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: vect_is_simple_use: operand _121
common/quant.c:128:9: note: def_stmt: _121 = _119 * _120;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _121 = _119 * _120;
common/quant.c:128:9: note: vect_is_simple_use: operand _119
common/quant.c:128:9: note: def_stmt: _119 = (int) _118;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand _120
common/quant.c:128:9: note: def_stmt: _120 = *pretmp_303[y_156][4];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _120 = *pretmp_303[y_156][4];
common/quant.c:128:9: note: worklist: examine stmt: _119 = (int) _118;
common/quant.c:128:9: note: vect_is_simple_use: operand _118
common/quant.c:128:9: note: def_stmt: _118 = *_81[4];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _118 = *_81[4];
common/quant.c:128:9: note: worklist: examine stmt: *_81[3] = _116;
common/quant.c:128:9: note: vect_is_simple_use: operand _116
common/quant.c:128:9: note: def_stmt: _116 = (short int) _115;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _116 = (short int) _115;
common/quant.c:128:9: note: vect_is_simple_use: operand _115
common/quant.c:128:9: note: def_stmt: _115 = _114 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _115 = _114 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _114
common/quant.c:128:9: note: def_stmt: _114 = f_78 + _113;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: worklist: examine stmt: _114 = f_78 + _113;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: vect_is_simple_use: operand _113
common/quant.c:128:9: note: def_stmt: _113 = _111 * _112;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _113 = _111 * _112;
common/quant.c:128:9: note: vect_is_simple_use: operand _111
common/quant.c:128:9: note: def_stmt: _111 = (int) _110;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand _112
common/quant.c:128:9: note: def_stmt: _112 = *pretmp_303[y_156][3];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _112 = *pretmp_303[y_156][3];
common/quant.c:128:9: note: worklist: examine stmt: _111 = (int) _110;
common/quant.c:128:9: note: vect_is_simple_use: operand _110
common/quant.c:128:9: note: def_stmt: _110 = *_81[3];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _110 = *_81[3];
common/quant.c:128:9: note: worklist: examine stmt: *_81[2] = _108;
common/quant.c:128:9: note: vect_is_simple_use: operand _108
common/quant.c:128:9: note: def_stmt: _108 = (short int) _107;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _108 = (short int) _107;
common/quant.c:128:9: note: vect_is_simple_use: operand _107
common/quant.c:128:9: note: def_stmt: _107 = _106 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _107 = _106 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _106
common/quant.c:128:9: note: def_stmt: _106 = f_78 + _105;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: worklist: examine stmt: _106 = f_78 + _105;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: vect_is_simple_use: operand _105
common/quant.c:128:9: note: def_stmt: _105 = _103 * _104;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _105 = _103 * _104;
common/quant.c:128:9: note: vect_is_simple_use: operand _103
common/quant.c:128:9: note: def_stmt: _103 = (int) _102;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand _104
common/quant.c:128:9: note: def_stmt: _104 = *pretmp_303[y_156][2];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _104 = *pretmp_303[y_156][2];
common/quant.c:128:9: note: worklist: examine stmt: _103 = (int) _102;
common/quant.c:128:9: note: vect_is_simple_use: operand _102
common/quant.c:128:9: note: def_stmt: _102 = *_81[2];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _102 = *_81[2];
common/quant.c:128:9: note: worklist: examine stmt: *_81[1] = _100;
common/quant.c:128:9: note: vect_is_simple_use: operand _100
common/quant.c:128:9: note: def_stmt: _100 = (short int) _99;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _100 = (short int) _99;
common/quant.c:128:9: note: vect_is_simple_use: operand _99
common/quant.c:128:9: note: def_stmt: _99 = _98 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _99 = _98 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _98
common/quant.c:128:9: note: def_stmt: _98 = f_78 + _97;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: worklist: examine stmt: _98 = f_78 + _97;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: vect_is_simple_use: operand _97
common/quant.c:128:9: note: def_stmt: _97 = _95 * _96;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _97 = _95 * _96;
common/quant.c:128:9: note: vect_is_simple_use: operand _95
common/quant.c:128:9: note: def_stmt: _95 = (int) _94;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand _96
common/quant.c:128:9: note: def_stmt: _96 = *pretmp_303[y_156][1];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _96 = *pretmp_303[y_156][1];
common/quant.c:128:9: note: worklist: examine stmt: _95 = (int) _94;
common/quant.c:128:9: note: vect_is_simple_use: operand _94
common/quant.c:128:9: note: def_stmt: _94 = *_81[1];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _94 = *_81[1];
common/quant.c:128:9: note: worklist: examine stmt: *_81[0] = _92;
common/quant.c:128:9: note: vect_is_simple_use: operand _92
common/quant.c:128:9: note: def_stmt: _92 = (short int) _91;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _92 = (short int) _91;
common/quant.c:128:9: note: vect_is_simple_use: operand _91
common/quant.c:128:9: note: def_stmt: _91 = _89 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _91 = _89 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _89
common/quant.c:128:9: note: def_stmt: _89 = f_78 + _88;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: worklist: examine stmt: _89 = f_78 + _88;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: def_stmt is out of loop.
common/quant.c:128:9: note: vect_is_simple_use: operand _88
common/quant.c:128:9: note: def_stmt: _88 = _83 * _87;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _88 = _83 * _87;
common/quant.c:128:9: note: vect_is_simple_use: operand _83
common/quant.c:128:9: note: def_stmt: _83 = (int) _82;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: vect_is_simple_use: operand _87
common/quant.c:128:9: note: def_stmt: _87 = *pretmp_303[y_156][0];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _87 = *pretmp_303[y_156][0];
common/quant.c:128:9: note: worklist: examine stmt: _83 = (int) _82;
common/quant.c:128:9: note: vect_is_simple_use: operand _82
common/quant.c:128:9: note: def_stmt: _82 = *_81[0];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: mark relevant 4, live 0.
common/quant.c:128:9: note: worklist: examine stmt: _82 = *_81[0];
common/quant.c:128:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _87 = *pretmp_303[y_156][0];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: *_81[0] = _92;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _94 = *_81[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _96 = *pretmp_303[y_156][1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: *_81[1] = _100;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _102 = *_81[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _104 = *pretmp_303[y_156][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: *_81[2] = _108;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _110 = *_81[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _112 = *pretmp_303[y_156][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: *_81[3] = _116;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _118 = *_81[4];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _120 = *pretmp_303[y_156][4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: *_81[4] = _124;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _126 = *_81[5];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _128 = *pretmp_303[y_156][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: *_81[0] = _92;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _94 = *_81[1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _96 = *pretmp_303[y_156][1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: *_81[1] = _100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _102 = *_81[2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _104 = *pretmp_303[y_156][2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: *_81[2] = _108;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _110 = *_81[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _112 = *pretmp_303[y_156][3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: *_81[3] = _116;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _118 = *_81[4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _120 = *pretmp_303[y_156][4];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: *_81[4] = _124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _126 = *_81[5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _128 = *pretmp_303[y_156][5];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: *_81[5] = _132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _134 = *_81[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _136 = *pretmp_303[y_156][6];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: *_81[6] = _140;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _142 = *_81[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _144 = *pretmp_303[y_156][7];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: *_81[7] = _148;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _94 = *_81[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _96 = *pretmp_303[y_156][1];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: *_81[1] = _100;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _102 = *_81[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _104 = *pretmp_303[y_156][2];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: *_81[2] = _108;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _110 = *_81[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _112 = *pretmp_303[y_156][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: *_81[3] = _116;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _118 = *_81[4];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _120 = *pretmp_303[y_156][4];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: *_81[4] = _124;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _126 = *_81[5];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _128 = *pretmp_303[y_156][5];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _96 = *pretmp_303[y_156][1];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: *_81[1] = _100;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _102 = *_81[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _104 = *pretmp_303[y_156][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: *_81[2] = _108;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _110 = *_81[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _112 = *pretmp_303[y_156][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: *_81[3] = _116;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _118 = *_81[4];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _120 = *pretmp_303[y_156][4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: *_81[4] = _124;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _126 = *_81[5];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _128 = *pretmp_303[y_156][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: *_81[1] = _100;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _102 = *_81[2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _104 = *pretmp_303[y_156][2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: *_81[2] = _108;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _110 = *_81[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _112 = *pretmp_303[y_156][3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: *_81[3] = _116;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _118 = *_81[4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _120 = *pretmp_303[y_156][4];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: *_81[4] = _124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _126 = *_81[5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _128 = *pretmp_303[y_156][5];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: *_81[5] = _132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _134 = *_81[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _136 = *pretmp_303[y_156][6];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: *_81[6] = _140;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _142 = *_81[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _144 = *pretmp_303[y_156][7];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: *_81[7] = _148;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _102 = *_81[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _104 = *pretmp_303[y_156][2];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: *_81[2] = _108;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _110 = *_81[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _112 = *pretmp_303[y_156][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: *_81[3] = _116;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _118 = *_81[4];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _120 = *pretmp_303[y_156][4];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: *_81[4] = _124;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _126 = *_81[5];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _128 = *pretmp_303[y_156][5];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _104 = *pretmp_303[y_156][2];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: *_81[2] = _108;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _110 = *_81[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _112 = *pretmp_303[y_156][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: *_81[3] = _116;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _118 = *_81[4];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _120 = *pretmp_303[y_156][4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: *_81[4] = _124;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _126 = *_81[5];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _128 = *pretmp_303[y_156][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: *_81[2] = _108;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: _110 = *_81[3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: _112 = *pretmp_303[y_156][3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: *_81[3] = _116;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: _118 = *_81[4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: _120 = *pretmp_303[y_156][4];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: *_81[4] = _124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: _126 = *_81[5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: _128 = *pretmp_303[y_156][5];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: *_81[5] = _132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: _134 = *_81[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: _136 = *pretmp_303[y_156][6];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: *_81[6] = _140;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: _142 = *_81[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: _144 = *pretmp_303[y_156][7];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: *_81[7] = _148;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: _110 = *_81[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: _112 = *pretmp_303[y_156][3];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: *_81[3] = _116;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: _118 = *_81[4];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: _120 = *pretmp_303[y_156][4];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: *_81[4] = _124;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: _126 = *_81[5];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: _128 = *pretmp_303[y_156][5];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: _112 = *pretmp_303[y_156][3];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: *_81[3] = _116;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: _118 = *_81[4];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: _120 = *pretmp_303[y_156][4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: *_81[4] = _124;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: _126 = *_81[5];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: _128 = *pretmp_303[y_156][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: *_81[3] = _116;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: _118 = *_81[4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: _120 = *pretmp_303[y_156][4];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: *_81[4] = _124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: _126 = *_81[5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: _128 = *pretmp_303[y_156][5];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: *_81[5] = _132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: _134 = *_81[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: _136 = *pretmp_303[y_156][6];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: *_81[6] = _140;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: _142 = *_81[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: _144 = *pretmp_303[y_156][7];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: *_81[7] = _148;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: _118 = *_81[4];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: _120 = *pretmp_303[y_156][4];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: *_81[4] = _124;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 4)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: _126 = *_81[5];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: _128 = *pretmp_303[y_156][5];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: _120 = *pretmp_303[y_156][4];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: *_81[4] = _124;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: _126 = *_81[5];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: _128 = *pretmp_303[y_156][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _120 = *pretmp_303[y_156][4];
  stmt_b: *_81[4] = _124;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _120 = *pretmp_303[y_156][4];
  stmt_b: _126 = *_81[5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _120 = *pretmp_303[y_156][4];
  stmt_b: _128 = *pretmp_303[y_156][5];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _120 = *pretmp_303[y_156][4];
  stmt_b: *_81[5] = _132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _120 = *pretmp_303[y_156][4];
  stmt_b: _134 = *_81[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _120 = *pretmp_303[y_156][4];
  stmt_b: _136 = *pretmp_303[y_156][6];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _120 = *pretmp_303[y_156][4];
  stmt_b: *_81[6] = _140;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _120 = *pretmp_303[y_156][4];
  stmt_b: _142 = *_81[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _120 = *pretmp_303[y_156][4];
  stmt_b: _144 = *pretmp_303[y_156][7];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _120 = *pretmp_303[y_156][4];
  stmt_b: *_81[7] = _148;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_81[4] = _124;
  stmt_b: _126 = *_81[5];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[4] = _124;
  stmt_b: _128 = *pretmp_303[y_156][5];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[4] = _124;
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 5)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[4] = _124;
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[4] = _124;
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[4] = _124;
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[4] = _124;
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[4] = _124;
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[4] = _124;
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _126 = *_81[5];
  stmt_b: _128 = *pretmp_303[y_156][5];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _126 = *_81[5];
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _126 = *_81[5];
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _126 = *_81[5];
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _126 = *_81[5];
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _126 = *_81[5];
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _126 = *_81[5];
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _126 = *_81[5];
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _128 = *pretmp_303[y_156][5];
  stmt_b: *_81[5] = _132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _128 = *pretmp_303[y_156][5];
  stmt_b: _134 = *_81[6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _128 = *pretmp_303[y_156][5];
  stmt_b: _136 = *pretmp_303[y_156][6];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _128 = *pretmp_303[y_156][5];
  stmt_b: *_81[6] = _140;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _128 = *pretmp_303[y_156][5];
  stmt_b: _142 = *_81[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _128 = *pretmp_303[y_156][5];
  stmt_b: _144 = *pretmp_303[y_156][7];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _128 = *pretmp_303[y_156][5];
  stmt_b: *_81[7] = _148;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_81[5] = _132;
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[5] = _132;
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[5] = _132;
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 6)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[5] = _132;
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[5] = _132;
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[5] = _132;
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _134 = *_81[6];
  stmt_b: _136 = *pretmp_303[y_156][6];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _134 = *_81[6];
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _134 = *_81[6];
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _134 = *_81[6];
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _134 = *_81[6];
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _136 = *pretmp_303[y_156][6];
  stmt_b: *_81[6] = _140;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _136 = *pretmp_303[y_156][6];
  stmt_b: _142 = *_81[7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _136 = *pretmp_303[y_156][6];
  stmt_b: _144 = *pretmp_303[y_156][7];
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _136 = *pretmp_303[y_156][6];
  stmt_b: *_81[7] = _148;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_81[6] = _140;
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[6] = _140;
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> no dependence
(compute_affine_dependence
  stmt_a: *_81[6] = _140;
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 7)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _142 = *_81[7];
  stmt_b: _144 = *pretmp_303[y_156][7];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _142 = *_81[7];
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 7)
  (chrec_b = 7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _144 = *pretmp_303[y_156][7];
  stmt_b: *_81[7] = _148;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_81[0];
  stmt_b: _82 = *_81[0];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _87 = *pretmp_303[y_156][0];
  stmt_b: _87 = *pretmp_303[y_156][0];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_81[0] = _92;
  stmt_b: *_81[0] = _92;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _94 = *_81[1];
  stmt_b: _94 = *_81[1];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _96 = *pretmp_303[y_156][1];
  stmt_b: _96 = *pretmp_303[y_156][1];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_81[1] = _100;
  stmt_b: *_81[1] = _100;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _102 = *_81[2];
  stmt_b: _102 = *_81[2];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _104 = *pretmp_303[y_156][2];
  stmt_b: _104 = *pretmp_303[y_156][2];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_81[2] = _108;
  stmt_b: *_81[2] = _108;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _110 = *_81[3];
  stmt_b: _110 = *_81[3];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _112 = *pretmp_303[y_156][3];
  stmt_b: _112 = *pretmp_303[y_156][3];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_81[3] = _116;
  stmt_b: *_81[3] = _116;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _118 = *_81[4];
  stmt_b: _118 = *_81[4];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _120 = *pretmp_303[y_156][4];
  stmt_b: _120 = *pretmp_303[y_156][4];
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_81[4] = _124;
  stmt_b: *_81[4] = _124;
(analyze_overlapping_iterations 
  (chrec_a = 4)
  (chrec_b = 4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _126 = *_81[5];
  stmt_b: _126 = *_81[5];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _128 = *pretmp_303[y_156][5];
  stmt_b: _128 = *pretmp_303[y_156][5];
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_81[5] = _132;
  stmt_b: *_81[5] = _132;
(analyze_overlapping_iterations 
  (chrec_a = 5)
  (chrec_b = 5)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _134 = *_81[6];
  stmt_b: _134 = *_81[6];
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _136 = *pretmp_303[y_156][6];
  stmt_b: _136 = *pretmp_303[y_156][6];
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_81[6] = _140;
  stmt_b: *_81[6] = _140;
(analyze_overlapping_iterations 
  (chrec_a = 6)
  (chrec_b = 6)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _142 = *_81[7];
  stmt_b: _142 = *_81[7];
(analyze_overlapping_iterations 
  (chrec_a = 7)
  (chrec_b = 7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _144 = *pretmp_303[y_156][7];
  stmt_b: _144 = *pretmp_303[y_156][7];
(analyze_overlapping_iterations 
  (chrec_a = 7)
  (chrec_b = 7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0, +, 1}_1)
  (chrec_b = {0, +, 1}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_81[7] = _148;
  stmt_b: *_81[7] = _148;
(analyze_overlapping_iterations 
  (chrec_a = 7)
  (chrec_b = 7)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 16}_1)
  (chrec_b = {0B, +, 16}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: dependence distance == 0 between *_81[0] and *_81[0]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: dependence distance == 0 between *_81[1] and *_81[1]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: dependence distance == 0 between *_81[2] and *_81[2]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: dependence distance == 0 between *_81[3] and *_81[3]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: dependence distance == 0 between *_81[4] and *_81[4]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: dependence distance == 0 between *_81[5] and *_81[5]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: dependence distance == 0 between *_81[6] and *_81[6]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: dependence distance == 0 between *_81[7] and *_81[7]
common/quant.c:128:9: note: === vect_determine_vectorization_factor ===
common/quant.c:128:9: note: ==> examining phi: y_156 = PHI <y_150(9), 0(7)>

common/quant.c:128:9: note: ==> examining phi: .MEM_154 = PHI <.MEM_149(9), .MEM_10(D)(7)>

common/quant.c:128:9: note: ==> examining phi: ivtmp_298 = PHI <ivtmp_297(9), 8(7)>

common/quant.c:128:9: note: ==> examining statement: # DEBUG y => y_156

common/quant.c:128:9: note: skip.
common/quant.c:128:9: note: ==> examining statement: _79 = (long unsigned int) y_156;

common/quant.c:128:9: note: skip.
common/quant.c:128:9: note: ==> examining statement: _80 = _79 * 16;

common/quant.c:128:9: note: skip.
common/quant.c:128:9: note: ==> examining statement: _81 = dct_13(D) + _80;

common/quant.c:128:9: note: skip.
common/quant.c:128:9: note: ==> examining statement: _82 = *_81[0];

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _83 = (int) _82;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _87 = *pretmp_303[y_156][0];

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _88 = _83 * _87;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _89 = f_78 + _88;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _91 = _89 >> pretmp_306;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _92 = (short int) _91;

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: *_81[0] = _92;

common/quant.c:128:9: note: get vectype for scalar type:  int16_t
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _94 = *_81[1];

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _95 = (int) _94;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _96 = *pretmp_303[y_156][1];

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _97 = _95 * _96;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _98 = f_78 + _97;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _99 = _98 >> pretmp_306;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _100 = (short int) _99;

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: *_81[1] = _100;

common/quant.c:128:9: note: get vectype for scalar type:  int16_t
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _102 = *_81[2];

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _103 = (int) _102;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _104 = *pretmp_303[y_156][2];

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _105 = _103 * _104;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _106 = f_78 + _105;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _107 = _106 >> pretmp_306;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _108 = (short int) _107;

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: *_81[2] = _108;

common/quant.c:128:9: note: get vectype for scalar type:  int16_t
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _110 = *_81[3];

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _111 = (int) _110;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _112 = *pretmp_303[y_156][3];

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _113 = _111 * _112;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _114 = f_78 + _113;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _115 = _114 >> pretmp_306;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _116 = (short int) _115;

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: *_81[3] = _116;

common/quant.c:128:9: note: get vectype for scalar type:  int16_t
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _118 = *_81[4];

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _119 = (int) _118;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _120 = *pretmp_303[y_156][4];

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _121 = _119 * _120;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _122 = f_78 + _121;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _123 = _122 >> pretmp_306;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _124 = (short int) _123;

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: *_81[4] = _124;

common/quant.c:128:9: note: get vectype for scalar type:  int16_t
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _126 = *_81[5];

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _127 = (int) _126;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _128 = *pretmp_303[y_156][5];

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _129 = _127 * _128;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _130 = f_78 + _129;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _131 = _130 >> pretmp_306;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _132 = (short int) _131;

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: *_81[5] = _132;

common/quant.c:128:9: note: get vectype for scalar type:  int16_t
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _134 = *_81[6];

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _135 = (int) _134;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _136 = *pretmp_303[y_156][6];

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _137 = _135 * _136;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _138 = f_78 + _137;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _139 = _138 >> pretmp_306;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _140 = (short int) _139;

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: *_81[6] = _140;

common/quant.c:128:9: note: get vectype for scalar type:  int16_t
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _142 = *_81[7];

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _143 = (int) _142;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: _144 = *pretmp_303[y_156][7];

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _145 = _143 * _144;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _146 = f_78 + _145;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _147 = _146 >> pretmp_306;

common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: get vectype for scalar type:  int
common/quant.c:128:9: note: vectype: vector(4) int
common/quant.c:128:9: note: nunits = 4
common/quant.c:128:9: note: ==> examining statement: _148 = (short int) _147;

common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: get vectype for scalar type:  short int
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: *_81[7] = _148;

common/quant.c:128:9: note: get vectype for scalar type:  int16_t
common/quant.c:128:9: note: vectype: vector(8) short int
common/quant.c:128:9: note: nunits = 8
common/quant.c:128:9: note: ==> examining statement: y_150 = y_156 + 1;

common/quant.c:128:9: note: skip.
common/quant.c:128:9: note: ==> examining statement: # DEBUG y => y_150

common/quant.c:128:9: note: skip.
common/quant.c:128:9: note: ==> examining statement: # DEBUG y => y_150

common/quant.c:128:9: note: skip.
common/quant.c:128:9: note: ==> examining statement: ivtmp_297 = ivtmp_298 - 1;

common/quant.c:128:9: note: skip.
common/quant.c:128:9: note: ==> examining statement: if (ivtmp_297 != 0)

common/quant.c:128:9: note: skip.
common/quant.c:128:9: note: vectorization factor = 8
common/quant.c:128:9: note: === vect_analyze_data_refs_alignment ===
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_81[0] and *_81[0]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_81[1] and *_81[1]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_81[2] and *_81[2]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_81[3] and *_81[3]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_81[4] and *_81[4]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_81[5] and *_81[5]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_81[6] and *_81[6]
common/quant.c:128:9: note: dependence distance  = 0.
common/quant.c:128:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_81[7] and *_81[7]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[0]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *pretmp_303[y_156][0]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[0]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[1]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *pretmp_303[y_156][1]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[1]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[2]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *pretmp_303[y_156][2]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[2]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[3]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *pretmp_303[y_156][3]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[3]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[4]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *pretmp_303[y_156][4]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[4]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[5]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *pretmp_303[y_156][5]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[5]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[6]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *pretmp_303[y_156][6]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[6]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[7]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *pretmp_303[y_156][7]
common/quant.c:128:9: note: vect_compute_data_ref_alignment:
common/quant.c:128:9: note: can't force alignment of ref: *_81[7]
common/quant.c:128:9: note: === vect_prune_runtime_alias_test_list ===
common/quant.c:128:9: note: === vect_enhance_data_refs_alignment ===
common/quant.c:128:9: note: vector alignment may not be reachable
common/quant.c:128:9: note: vect_can_advance_ivs_p:
common/quant.c:128:9: note: Analyze phi: y_156 = PHI <y_150(9), 0(7)>

common/quant.c:128:9: note: Analyze phi: .MEM_154 = PHI <.MEM_149(9), .MEM_10(D)(7)>

common/quant.c:128:9: note: virtual phi. skip.
common/quant.c:128:9: note: Analyze phi: ivtmp_298 = PHI <ivtmp_297(9), 8(7)>

Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:128:9: note: Vectorizing an unaligned access.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:128:9: note: Vectorizing an unaligned access.
common/quant.c:128:9: note: Vectorizing an unaligned access.
common/quant.c:128:9: note: === vect_analyze_slp ===
common/quant.c:128:9: note: Build SLP for *_81[0] = _92;

common/quant.c:128:9: note: Build SLP for *_81[1] = _100;

common/quant.c:128:9: note: Build SLP for *_81[2] = _108;

common/quant.c:128:9: note: Build SLP for *_81[3] = _116;

common/quant.c:128:9: note: Build SLP for *_81[4] = _124;

common/quant.c:128:9: note: Build SLP for *_81[5] = _132;

common/quant.c:128:9: note: Build SLP for *_81[6] = _140;

common/quant.c:128:9: note: Build SLP for *_81[7] = _148;

common/quant.c:128:9: note: vect_is_simple_use: operand _92
common/quant.c:128:9: note: def_stmt: _92 = (short int) _91;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _100
common/quant.c:128:9: note: def_stmt: _100 = (short int) _99;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _108
common/quant.c:128:9: note: def_stmt: _108 = (short int) _107;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _116
common/quant.c:128:9: note: def_stmt: _116 = (short int) _115;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _124
common/quant.c:128:9: note: def_stmt: _124 = (short int) _123;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _132
common/quant.c:128:9: note: def_stmt: _132 = (short int) _131;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _140
common/quant.c:128:9: note: def_stmt: _140 = (short int) _139;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _148
common/quant.c:128:9: note: def_stmt: _148 = (short int) _147;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: Build SLP for _92 = (short int) _91;

common/quant.c:128:9: note: Build SLP for _100 = (short int) _99;

common/quant.c:128:9: note: Build SLP for _108 = (short int) _107;

common/quant.c:128:9: note: Build SLP for _116 = (short int) _115;

common/quant.c:128:9: note: Build SLP for _124 = (short int) _123;

common/quant.c:128:9: note: Build SLP for _132 = (short int) _131;

common/quant.c:128:9: note: Build SLP for _140 = (short int) _139;

common/quant.c:128:9: note: Build SLP for _148 = (short int) _147;

common/quant.c:128:9: note: vect_is_simple_use: operand _91
common/quant.c:128:9: note: def_stmt: _91 = _89 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _99
common/quant.c:128:9: note: def_stmt: _99 = _98 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _107
common/quant.c:128:9: note: def_stmt: _107 = _106 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _115
common/quant.c:128:9: note: def_stmt: _115 = _114 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _123
common/quant.c:128:9: note: def_stmt: _123 = _122 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _131
common/quant.c:128:9: note: def_stmt: _131 = _130 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _139
common/quant.c:128:9: note: def_stmt: _139 = _138 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _147
common/quant.c:128:9: note: def_stmt: _147 = _146 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: Build SLP for _91 = _89 >> pretmp_306;

common/quant.c:128:9: note: Build SLP for _99 = _98 >> pretmp_306;

common/quant.c:128:9: note: Build SLP for _107 = _106 >> pretmp_306;

common/quant.c:128:9: note: Build SLP for _115 = _114 >> pretmp_306;

common/quant.c:128:9: note: Build SLP for _123 = _122 >> pretmp_306;

common/quant.c:128:9: note: Build SLP for _131 = _130 >> pretmp_306;

common/quant.c:128:9: note: Build SLP for _139 = _138 >> pretmp_306;

common/quant.c:128:9: note: Build SLP for _147 = _146 >> pretmp_306;

common/quant.c:128:9: note: vect_is_simple_use: operand _89
common/quant.c:128:9: note: def_stmt: _89 = f_78 + _88;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _98
common/quant.c:128:9: note: def_stmt: _98 = f_78 + _97;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _106
common/quant.c:128:9: note: def_stmt: _106 = f_78 + _105;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _114
common/quant.c:128:9: note: def_stmt: _114 = f_78 + _113;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _122
common/quant.c:128:9: note: def_stmt: _122 = f_78 + _121;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _130
common/quant.c:128:9: note: def_stmt: _130 = f_78 + _129;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _138
common/quant.c:128:9: note: def_stmt: _138 = f_78 + _137;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _146
common/quant.c:128:9: note: def_stmt: _146 = f_78 + _145;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: Build SLP for _89 = f_78 + _88;

common/quant.c:128:9: note: Build SLP for _98 = f_78 + _97;

common/quant.c:128:9: note: Build SLP for _106 = f_78 + _105;

common/quant.c:128:9: note: Build SLP for _114 = f_78 + _113;

common/quant.c:128:9: note: Build SLP for _122 = f_78 + _121;

common/quant.c:128:9: note: Build SLP for _130 = f_78 + _129;

common/quant.c:128:9: note: Build SLP for _138 = f_78 + _137;

common/quant.c:128:9: note: Build SLP for _146 = f_78 + _145;

common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _88
common/quant.c:128:9: note: def_stmt: _88 = _83 * _87;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _97
common/quant.c:128:9: note: def_stmt: _97 = _95 * _96;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _105
common/quant.c:128:9: note: def_stmt: _105 = _103 * _104;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _113
common/quant.c:128:9: note: def_stmt: _113 = _111 * _112;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _121
common/quant.c:128:9: note: def_stmt: _121 = _119 * _120;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _129
common/quant.c:128:9: note: def_stmt: _129 = _127 * _128;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _137
common/quant.c:128:9: note: def_stmt: _137 = _135 * _136;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _145
common/quant.c:128:9: note: def_stmt: _145 = _143 * _144;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: Build SLP for _88 = _83 * _87;

common/quant.c:128:9: note: Build SLP for _97 = _95 * _96;

common/quant.c:128:9: note: Build SLP for _105 = _103 * _104;

common/quant.c:128:9: note: Build SLP for _113 = _111 * _112;

common/quant.c:128:9: note: Build SLP for _121 = _119 * _120;

common/quant.c:128:9: note: Build SLP for _129 = _127 * _128;

common/quant.c:128:9: note: Build SLP for _137 = _135 * _136;

common/quant.c:128:9: note: Build SLP for _145 = _143 * _144;

common/quant.c:128:9: note: vect_is_simple_use: operand _83
common/quant.c:128:9: note: def_stmt: _83 = (int) _82;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _87
common/quant.c:128:9: note: def_stmt: _87 = *pretmp_303[y_156][0];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _95
common/quant.c:128:9: note: def_stmt: _95 = (int) _94;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _96
common/quant.c:128:9: note: def_stmt: _96 = *pretmp_303[y_156][1];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _103
common/quant.c:128:9: note: def_stmt: _103 = (int) _102;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _104
common/quant.c:128:9: note: def_stmt: _104 = *pretmp_303[y_156][2];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _111
common/quant.c:128:9: note: def_stmt: _111 = (int) _110;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _112
common/quant.c:128:9: note: def_stmt: _112 = *pretmp_303[y_156][3];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _119
common/quant.c:128:9: note: def_stmt: _119 = (int) _118;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _120
common/quant.c:128:9: note: def_stmt: _120 = *pretmp_303[y_156][4];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _127
common/quant.c:128:9: note: def_stmt: _127 = (int) _126;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _128
common/quant.c:128:9: note: def_stmt: _128 = *pretmp_303[y_156][5];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _135
common/quant.c:128:9: note: def_stmt: _135 = (int) _134;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _136
common/quant.c:128:9: note: def_stmt: _136 = *pretmp_303[y_156][6];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _143
common/quant.c:128:9: note: def_stmt: _143 = (int) _142;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _144
common/quant.c:128:9: note: def_stmt: _144 = *pretmp_303[y_156][7];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: Build SLP for _83 = (int) _82;

common/quant.c:128:9: note: Build SLP for _95 = (int) _94;

common/quant.c:128:9: note: Build SLP for _103 = (int) _102;

common/quant.c:128:9: note: Build SLP for _111 = (int) _110;

common/quant.c:128:9: note: Build SLP for _119 = (int) _118;

common/quant.c:128:9: note: Build SLP for _127 = (int) _126;

common/quant.c:128:9: note: Build SLP for _135 = (int) _134;

common/quant.c:128:9: note: Build SLP for _143 = (int) _142;

common/quant.c:128:9: note: vect_is_simple_use: operand _82
common/quant.c:128:9: note: def_stmt: _82 = *_81[0];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _94
common/quant.c:128:9: note: def_stmt: _94 = *_81[1];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _102
common/quant.c:128:9: note: def_stmt: _102 = *_81[2];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _110
common/quant.c:128:9: note: def_stmt: _110 = *_81[3];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _118
common/quant.c:128:9: note: def_stmt: _118 = *_81[4];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _126
common/quant.c:128:9: note: def_stmt: _126 = *_81[5];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _134
common/quant.c:128:9: note: def_stmt: _134 = *_81[6];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _142
common/quant.c:128:9: note: def_stmt: _142 = *_81[7];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: Build SLP for _82 = *_81[0];

common/quant.c:128:9: note: Build SLP for _94 = *_81[1];

common/quant.c:128:9: note: Build SLP for _102 = *_81[2];

common/quant.c:128:9: note: Build SLP for _110 = *_81[3];

common/quant.c:128:9: note: Build SLP for _118 = *_81[4];

common/quant.c:128:9: note: Build SLP for _126 = *_81[5];

common/quant.c:128:9: note: Build SLP for _134 = *_81[6];

common/quant.c:128:9: note: Build SLP for _142 = *_81[7];

common/quant.c:128:9: note: Build SLP for _87 = *pretmp_303[y_156][0];

Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:128:9: note: Build SLP for _96 = *pretmp_303[y_156][1];

common/quant.c:128:9: note: Build SLP for _104 = *pretmp_303[y_156][2];

common/quant.c:128:9: note: Build SLP for _112 = *pretmp_303[y_156][3];

common/quant.c:128:9: note: Build SLP for _120 = *pretmp_303[y_156][4];

common/quant.c:128:9: note: Build SLP for _128 = *pretmp_303[y_156][5];

common/quant.c:128:9: note: Build SLP for _136 = *pretmp_303[y_156][6];

common/quant.c:128:9: note: Build SLP for _144 = *pretmp_303[y_156][7];

common/quant.c:128:9: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:128:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:128:9: note: vect_is_simple_use: operand *_81[0]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: vect_is_simple_use: operand _82
common/quant.c:128:9: note: def_stmt: _82 = *_81[0];
common/quant.c:128:9: note: type of def: 3.
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:128:9: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:128:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:128:9: note: vect_is_simple_use: operand *pretmp_303[y_156][0]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: vect_is_simple_use: operand _83
common/quant.c:128:9: note: def_stmt: _83 = (int) _82;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _87
common/quant.c:128:9: note: def_stmt: _87 = *pretmp_303[y_156][0];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _88
common/quant.c:128:9: note: def_stmt: _88 = _83 * _87;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _89
common/quant.c:128:9: note: def_stmt: _89 = f_78 + _88;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _91
common/quant.c:128:9: note: def_stmt: _91 = _89 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_model_store_cost: unaligned supported by hardware.
common/quant.c:128:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:128:9: note: vect_is_simple_use: operand _92
common/quant.c:128:9: note: def_stmt: _92 = (short int) _91;
common/quant.c:128:9: note: type of def: 3.
node 
	stmt 0 *_81[0] = _92;

	stmt 1 *_81[1] = _100;

	stmt 2 *_81[2] = _108;

	stmt 3 *_81[3] = _116;

	stmt 4 *_81[4] = _124;

	stmt 5 *_81[5] = _132;

	stmt 6 *_81[6] = _140;

	stmt 7 *_81[7] = _148;

node 
	stmt 0 _92 = (short int) _91;

	stmt 1 _100 = (short int) _99;

	stmt 2 _108 = (short int) _107;

	stmt 3 _116 = (short int) _115;

	stmt 4 _124 = (short int) _123;

	stmt 5 _132 = (short int) _131;

	stmt 6 _140 = (short int) _139;

	stmt 7 _148 = (short int) _147;

node 
	stmt 0 _91 = _89 >> pretmp_306;

	stmt 1 _99 = _98 >> pretmp_306;

	stmt 2 _107 = _106 >> pretmp_306;

	stmt 3 _115 = _114 >> pretmp_306;

	stmt 4 _123 = _122 >> pretmp_306;

	stmt 5 _131 = _130 >> pretmp_306;

	stmt 6 _139 = _138 >> pretmp_306;

	stmt 7 _147 = _146 >> pretmp_306;

node 
	stmt 0 _89 = f_78 + _88;

	stmt 1 _98 = f_78 + _97;

	stmt 2 _106 = f_78 + _105;

	stmt 3 _114 = f_78 + _113;

	stmt 4 _122 = f_78 + _121;

	stmt 5 _130 = f_78 + _129;

	stmt 6 _138 = f_78 + _137;

	stmt 7 _146 = f_78 + _145;

node 
	stmt 0 _88 = _83 * _87;

	stmt 1 _97 = _95 * _96;

	stmt 2 _105 = _103 * _104;

	stmt 3 _113 = _111 * _112;

	stmt 4 _121 = _119 * _120;

	stmt 5 _129 = _127 * _128;

	stmt 6 _137 = _135 * _136;

	stmt 7 _145 = _143 * _144;

node 
	stmt 0 _83 = (int) _82;

	stmt 1 _95 = (int) _94;

	stmt 2 _103 = (int) _102;

	stmt 3 _111 = (int) _110;

	stmt 4 _119 = (int) _118;

	stmt 5 _127 = (int) _126;

	stmt 6 _135 = (int) _134;

	stmt 7 _143 = (int) _142;

node 
	stmt 0 _82 = *_81[0];

	stmt 1 _94 = *_81[1];

	stmt 2 _102 = *_81[2];

	stmt 3 _110 = *_81[3];

	stmt 4 _118 = *_81[4];

	stmt 5 _126 = *_81[5];

	stmt 6 _134 = *_81[6];

	stmt 7 _142 = *_81[7];

node 
	stmt 0 _87 = *pretmp_303[y_156][0];

	stmt 1 _96 = *pretmp_303[y_156][1];

	stmt 2 _104 = *pretmp_303[y_156][2];

	stmt 3 _112 = *pretmp_303[y_156][3];

	stmt 4 _120 = *pretmp_303[y_156][4];

	stmt 5 _128 = *pretmp_303[y_156][5];

	stmt 6 _136 = *pretmp_303[y_156][6];

	stmt 7 _144 = *pretmp_303[y_156][7];

common/quant.c:128:9: note: === vect_make_slp_decision ===
common/quant.c:128:9: note: Decided to SLP 1 instances. Unrolling factor 1
common/quant.c:128:9: note: === vect_detect_hybrid_slp ===
common/quant.c:128:9: note: === vect_analyze_loop_operations ===
common/quant.c:128:9: note: Updating vectorization factor to 1
common/quant.c:128:9: note: examining phi: y_156 = PHI <y_150(9), 0(7)>

common/quant.c:128:9: note: examining phi: .MEM_154 = PHI <.MEM_149(9), .MEM_10(D)(7)>

common/quant.c:128:9: note: examining phi: ivtmp_298 = PHI <ivtmp_297(9), 8(7)>

common/quant.c:128:9: note: ==> examining statement: # DEBUG y => y_156
common/quant.c:128:9: note: irrelevant.
common/quant.c:128:9: note: ==> examining statement: _79 = (long unsigned int) y_156;
common/quant.c:128:9: note: irrelevant.
common/quant.c:128:9: note: ==> examining statement: _80 = _79 * 16;
common/quant.c:128:9: note: irrelevant.
common/quant.c:128:9: note: ==> examining statement: _81 = dct_13(D) + _80;
common/quant.c:128:9: note: irrelevant.
common/quant.c:128:9: note: ==> examining statement: _82 = *_81[0];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *_81[0]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _83 = (int) _82;
common/quant.c:128:9: note: vect_is_simple_use: operand _82
common/quant.c:128:9: note: def_stmt: _82 = *_81[0];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: _87 = *pretmp_303[y_156][0];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *pretmp_303[y_156][0]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _88 = _83 * _87;
common/quant.c:128:9: note: vect_is_simple_use: operand _83
common/quant.c:128:9: note: def_stmt: _83 = (int) _82;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _87
common/quant.c:128:9: note: def_stmt: _87 = *pretmp_303[y_156][0];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _89 = f_78 + _88;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _88
common/quant.c:128:9: note: def_stmt: _88 = _83 * _87;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _91 = _89 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _89
common/quant.c:128:9: note: def_stmt: _89 = f_78 + _88;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vector/scalar shift/rotate found.
common/quant.c:128:9: note: === vectorizable_shift ===
common/quant.c:128:9: note: ==> examining statement: _92 = (short int) _91;
common/quant.c:128:9: note: vect_is_simple_use: operand _91
common/quant.c:128:9: note: def_stmt: _91 = _89 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: *_81[0] = _92;
common/quant.c:128:9: note: vect_is_simple_use: operand _92
common/quant.c:128:9: note: def_stmt: _92 = (short int) _91;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _100
common/quant.c:128:9: note: def_stmt: _100 = (short int) _99;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _108
common/quant.c:128:9: note: def_stmt: _108 = (short int) _107;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _116
common/quant.c:128:9: note: def_stmt: _116 = (short int) _115;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _124
common/quant.c:128:9: note: def_stmt: _124 = (short int) _123;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _132
common/quant.c:128:9: note: def_stmt: _132 = (short int) _131;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _140
common/quant.c:128:9: note: def_stmt: _140 = (short int) _139;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _148
common/quant.c:128:9: note: def_stmt: _148 = (short int) _147;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: ==> examining statement: _94 = *_81[1];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *_81[1]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _95 = (int) _94;
common/quant.c:128:9: note: vect_is_simple_use: operand _94
common/quant.c:128:9: note: def_stmt: _94 = *_81[1];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: _96 = *pretmp_303[y_156][1];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *pretmp_303[y_156][1]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _97 = _95 * _96;
common/quant.c:128:9: note: vect_is_simple_use: operand _95
common/quant.c:128:9: note: def_stmt: _95 = (int) _94;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _96
common/quant.c:128:9: note: def_stmt: _96 = *pretmp_303[y_156][1];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _98 = f_78 + _97;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _97
common/quant.c:128:9: note: def_stmt: _97 = _95 * _96;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _99 = _98 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _98
common/quant.c:128:9: note: def_stmt: _98 = f_78 + _97;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vector/scalar shift/rotate found.
common/quant.c:128:9: note: === vectorizable_shift ===
common/quant.c:128:9: note: ==> examining statement: _100 = (short int) _99;
common/quant.c:128:9: note: vect_is_simple_use: operand _99
common/quant.c:128:9: note: def_stmt: _99 = _98 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: *_81[1] = _100;
common/quant.c:128:9: note: vect_is_simple_use: operand _100
common/quant.c:128:9: note: def_stmt: _100 = (short int) _99;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: ==> examining statement: _102 = *_81[2];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *_81[2]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _103 = (int) _102;
common/quant.c:128:9: note: vect_is_simple_use: operand _102
common/quant.c:128:9: note: def_stmt: _102 = *_81[2];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: _104 = *pretmp_303[y_156][2];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *pretmp_303[y_156][2]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _105 = _103 * _104;
common/quant.c:128:9: note: vect_is_simple_use: operand _103
common/quant.c:128:9: note: def_stmt: _103 = (int) _102;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _104
common/quant.c:128:9: note: def_stmt: _104 = *pretmp_303[y_156][2];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _106 = f_78 + _105;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _105
common/quant.c:128:9: note: def_stmt: _105 = _103 * _104;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _107 = _106 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _106
common/quant.c:128:9: note: def_stmt: _106 = f_78 + _105;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vector/scalar shift/rotate found.
common/quant.c:128:9: note: === vectorizable_shift ===
common/quant.c:128:9: note: ==> examining statement: _108 = (short int) _107;
common/quant.c:128:9: note: vect_is_simple_use: operand _107
common/quant.c:128:9: note: def_stmt: _107 = _106 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: *_81[2] = _108;
common/quant.c:128:9: note: vect_is_simple_use: operand _108
common/quant.c:128:9: note: def_stmt: _108 = (short int) _107;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: ==> examining statement: _110 = *_81[3];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *_81[3]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _111 = (int) _110;
common/quant.c:128:9: note: vect_is_simple_use: operand _110
common/quant.c:128:9: note: def_stmt: _110 = *_81[3];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: _112 = *pretmp_303[y_156][3];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *pretmp_303[y_156][3]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _113 = _111 * _112;
common/quant.c:128:9: note: vect_is_simple_use: operand _111
common/quant.c:128:9: note: def_stmt: _111 = (int) _110;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _112
common/quant.c:128:9: note: def_stmt: _112 = *pretmp_303[y_156][3];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _114 = f_78 + _113;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _113
common/quant.c:128:9: note: def_stmt: _113 = _111 * _112;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _115 = _114 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _114
common/quant.c:128:9: note: def_stmt: _114 = f_78 + _113;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vector/scalar shift/rotate found.
common/quant.c:128:9: note: === vectorizable_shift ===
common/quant.c:128:9: note: ==> examining statement: _116 = (short int) _115;
common/quant.c:128:9: note: vect_is_simple_use: operand _115
common/quant.c:128:9: note: def_stmt: _115 = _114 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: *_81[3] = _116;
common/quant.c:128:9: note: vect_is_simple_use: operand _116
common/quant.c:128:9: note: def_stmt: _116 = (short int) _115;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: ==> examining statement: _118 = *_81[4];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *_81[4]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _119 = (int) _118;
common/quant.c:128:9: note: vect_is_simple_use: operand _118
common/quant.c:128:9: note: def_stmt: _118 = *_81[4];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: _120 = *pretmp_303[y_156][4];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *pretmp_303[y_156][4]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _121 = _119 * _120;
common/quant.c:128:9: note: vect_is_simple_use: operand _119
common/quant.c:128:9: note: def_stmt: _119 = (int) _118;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _120
common/quant.c:128:9: note: def_stmt: _120 = *pretmp_303[y_156][4];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _122 = f_78 + _121;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _121
common/quant.c:128:9: note: def_stmt: _121 = _119 * _120;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _123 = _122 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _122
common/quant.c:128:9: note: def_stmt: _122 = f_78 + _121;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vector/scalar shift/rotate found.
common/quant.c:128:9: note: === vectorizable_shift ===
common/quant.c:128:9: note: ==> examining statement: _124 = (short int) _123;
common/quant.c:128:9: note: vect_is_simple_use: operand _123
common/quant.c:128:9: note: def_stmt: _123 = _122 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: *_81[4] = _124;
common/quant.c:128:9: note: vect_is_simple_use: operand _124
common/quant.c:128:9: note: def_stmt: _124 = (short int) _123;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: ==> examining statement: _126 = *_81[5];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *_81[5]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _127 = (int) _126;
common/quant.c:128:9: note: vect_is_simple_use: operand _126
common/quant.c:128:9: note: def_stmt: _126 = *_81[5];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: _128 = *pretmp_303[y_156][5];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *pretmp_303[y_156][5]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _129 = _127 * _128;
common/quant.c:128:9: note: vect_is_simple_use: operand _127
common/quant.c:128:9: note: def_stmt: _127 = (int) _126;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _128
common/quant.c:128:9: note: def_stmt: _128 = *pretmp_303[y_156][5];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _130 = f_78 + _129;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _129
common/quant.c:128:9: note: def_stmt: _129 = _127 * _128;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _131 = _130 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _130
common/quant.c:128:9: note: def_stmt: _130 = f_78 + _129;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vector/scalar shift/rotate found.
common/quant.c:128:9: note: === vectorizable_shift ===
common/quant.c:128:9: note: ==> examining statement: _132 = (short int) _131;
common/quant.c:128:9: note: vect_is_simple_use: operand _131
common/quant.c:128:9: note: def_stmt: _131 = _130 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: *_81[5] = _132;
common/quant.c:128:9: note: vect_is_simple_use: operand _132
common/quant.c:128:9: note: def_stmt: _132 = (short int) _131;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: ==> examining statement: _134 = *_81[6];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *_81[6]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _135 = (int) _134;
common/quant.c:128:9: note: vect_is_simple_use: operand _134
common/quant.c:128:9: note: def_stmt: _134 = *_81[6];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: _136 = *pretmp_303[y_156][6];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *pretmp_303[y_156][6]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _137 = _135 * _136;
common/quant.c:128:9: note: vect_is_simple_use: operand _135
common/quant.c:128:9: note: def_stmt: _135 = (int) _134;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _136
common/quant.c:128:9: note: def_stmt: _136 = *pretmp_303[y_156][6];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _138 = f_78 + _137;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _137
common/quant.c:128:9: note: def_stmt: _137 = _135 * _136;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _139 = _138 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _138
common/quant.c:128:9: note: def_stmt: _138 = f_78 + _137;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vector/scalar shift/rotate found.
common/quant.c:128:9: note: === vectorizable_shift ===
common/quant.c:128:9: note: ==> examining statement: _140 = (short int) _139;
common/quant.c:128:9: note: vect_is_simple_use: operand _139
common/quant.c:128:9: note: def_stmt: _139 = _138 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: *_81[6] = _140;
common/quant.c:128:9: note: vect_is_simple_use: operand _140
common/quant.c:128:9: note: def_stmt: _140 = (short int) _139;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: ==> examining statement: _142 = *_81[7];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *_81[7]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _143 = (int) _142;
common/quant.c:128:9: note: vect_is_simple_use: operand _142
common/quant.c:128:9: note: def_stmt: _142 = *_81[7];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: _144 = *pretmp_303[y_156][7];
common/quant.c:128:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:128:9: note: vect_is_simple_use: operand *pretmp_303[y_156][7]
common/quant.c:128:9: note: not ssa-name.
common/quant.c:128:9: note: use not simple.
common/quant.c:128:9: note: ==> examining statement: _145 = _143 * _144;
common/quant.c:128:9: note: vect_is_simple_use: operand _143
common/quant.c:128:9: note: def_stmt: _143 = (int) _142;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _144
common/quant.c:128:9: note: def_stmt: _144 = *pretmp_303[y_156][7];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _146 = f_78 + _145;
common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _145
common/quant.c:128:9: note: def_stmt: _145 = _143 * _144;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_operation ===
common/quant.c:128:9: note: ==> examining statement: _147 = _146 >> pretmp_306;
common/quant.c:128:9: note: vect_is_simple_use: operand _146
common/quant.c:128:9: note: def_stmt: _146 = f_78 + _145;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vector/scalar shift/rotate found.
common/quant.c:128:9: note: === vectorizable_shift ===
common/quant.c:128:9: note: ==> examining statement: _148 = (short int) _147;
common/quant.c:128:9: note: vect_is_simple_use: operand _147
common/quant.c:128:9: note: def_stmt: _147 = _146 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: === vectorizable_conversion ===
common/quant.c:128:9: note: ==> examining statement: *_81[7] = _148;
common/quant.c:128:9: note: vect_is_simple_use: operand _148
common/quant.c:128:9: note: def_stmt: _148 = (short int) _147;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: ==> examining statement: y_150 = y_156 + 1;
common/quant.c:128:9: note: irrelevant.
common/quant.c:128:9: note: ==> examining statement: # DEBUG y => y_150
common/quant.c:128:9: note: irrelevant.
common/quant.c:128:9: note: ==> examining statement: # DEBUG y => y_150
common/quant.c:128:9: note: irrelevant.
common/quant.c:128:9: note: ==> examining statement: ivtmp_297 = ivtmp_298 - 1;
common/quant.c:128:9: note: irrelevant.
common/quant.c:128:9: note: ==> examining statement: if (ivtmp_297 != 0)
common/quant.c:128:9: note: irrelevant.
common/quant.c:128:9: note: vectorization_factor = 1, niters = 8
common/quant.c:128:9: note: === vect_update_slp_costs_according_to_vf ===
common/quant.c:128:9: note: Cost model analysis: 
  Vector inside of loop cost: 11
  Vector prologue cost: 2
  Vector epilogue cost: 0
  Scalar iteration cost: 64
  Scalar outside cost: 0
  Vector outside cost: 2
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
common/quant.c:128:9: note:   Runtime profitability threshold = 0
common/quant.c:128:9: note:   Static estimate profitability threshold = 0
common/quant.c:128:9: note: loop vectorized
common/quant.c:128:9: note: === vec_transform_loop ===
common/quant.c:128:9: note: ------>vectorizing phi: y_156 = PHI <y_150(9), 0(13)>

common/quant.c:128:9: note: ------>vectorizing phi: .MEM_154 = PHI <.MEM_149(9), .MEM_10(D)(13)>

common/quant.c:128:9: note: ------>vectorizing phi: ivtmp_298 = PHI <ivtmp_297(9), 8(13)>

common/quant.c:128:9: note: ------>vectorizing statement: # DEBUG y => y_156

common/quant.c:128:9: note: ------>vectorizing statement: _79 = (long unsigned int) y_156;

common/quant.c:128:9: note: ------>vectorizing statement: _80 = _79 * 16;

common/quant.c:128:9: note: ------>vectorizing statement: _81 = dct_13(D) + _80;

common/quant.c:128:9: note: ------>vectorizing statement: _82 = *_81[0];

common/quant.c:128:9: note: === scheduling SLP instances ===
common/quant.c:128:9: note: ------>vectorizing SLP node starting from: _82 = *_81[0];

common/quant.c:128:9: note: transform load. ncopies = 1
common/quant.c:128:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_13(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:128:9: note: created vectp_dct.97_54
common/quant.c:128:9: note: add new stmt: vect__82.98_33 = MEM[(short int *)vectp_dct.96_47];
common/quant.c:128:9: note: ------>vectorizing SLP node starting from: _83 = (int) _82;

common/quant.c:128:9: note: vect_is_simple_use: operand _82
common/quant.c:128:9: note: def_stmt: _82 = *_81[0];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: transform conversion. ncopies = 1.
common/quant.c:128:9: note: add new stmt: vect__83.99_26 = [vec_unpack_lo_expr] vect__82.98_33;
common/quant.c:128:9: note: add new stmt: vect__83.99_272 = [vec_unpack_hi_expr] vect__82.98_33;
common/quant.c:128:9: note: ------>vectorizing SLP node starting from: _87 = *pretmp_303[y_156][0];

common/quant.c:128:9: note: transform load. ncopies = 1
Applying pattern match.pd:49, generic-match.c:3223
common/quant.c:128:9: note: create vector_type-pointer variable to type: vector(4) int  vectorizing an array ref: *pretmp_303
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:128:9: note: created vectp.101_271
common/quant.c:128:9: note: add new stmt: vect__87.102_266 = MEM[(int *)vectp.100_268];
common/quant.c:128:9: note: add new stmt: vectp.100_265 = vectp.100_268 + 16;
common/quant.c:128:9: note: add new stmt: vect__87.103_264 = MEM[(int *)vectp.100_265];
common/quant.c:128:9: note: ------>vectorizing SLP node starting from: _88 = _83 * _87;

common/quant.c:128:9: note: vect_is_simple_use: operand _83
common/quant.c:128:9: note: def_stmt: _83 = (int) _82;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _87
common/quant.c:128:9: note: def_stmt: _87 = *pretmp_303[y_156][0];
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: transform binary/unary operation.
common/quant.c:128:9: note: add new stmt: vect__88.104_263 = vect__83.99_26 * vect__87.102_266;
common/quant.c:128:9: note: add new stmt: vect__88.104_262 = vect__83.99_272 * vect__87.103_264;
common/quant.c:128:9: note: ------>vectorizing SLP node starting from: _89 = f_78 + _88;

common/quant.c:128:9: note: vect_is_simple_use: operand f_78
common/quant.c:128:9: note: def_stmt: f_78 = 1 << _77;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vect_is_simple_use: operand _88
common/quant.c:128:9: note: def_stmt: _88 = _83 * _87;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: transform binary/unary operation.
common/quant.c:128:9: note: created new init_stmt: vect_cst_.106_261 = {f_78, f_78, f_78, f_78};
common/quant.c:128:9: note: created new init_stmt: vect_cst_.107_260 = {f_78, f_78, f_78, f_78};
common/quant.c:128:9: note: add new stmt: vect__89.105_259 = vect_cst_.107_260 + vect__88.104_263;
common/quant.c:128:9: note: add new stmt: vect__89.105_258 = vect_cst_.106_261 + vect__88.104_262;
common/quant.c:128:9: note: ------>vectorizing SLP node starting from: _91 = _89 >> pretmp_306;

common/quant.c:128:9: note: vect_is_simple_use: operand _89
common/quant.c:128:9: note: def_stmt: _89 = f_78 + _88;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand pretmp_306
common/quant.c:128:9: note: def_stmt: pretmp_306 = -i_qbits_9;
common/quant.c:128:9: note: type of def: 2.
common/quant.c:128:9: note: vector/scalar shift/rotate found.
common/quant.c:128:9: note: transform binary/unary operation.
common/quant.c:128:9: note: operand 1 using scalar mode.
common/quant.c:128:9: note: add new stmt: vect__91.108_257 = vect__89.105_259 >> pretmp_306;
common/quant.c:128:9: note: add new stmt: vect__91.108_256 = vect__89.105_258 >> pretmp_306;
common/quant.c:128:9: note: ------>vectorizing SLP node starting from: _92 = (short int) _91;

common/quant.c:128:9: note: vect_is_simple_use: operand _91
common/quant.c:128:9: note: def_stmt: _91 = _89 >> pretmp_306;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: transform conversion. ncopies = 1.
common/quant.c:128:9: note: add new stmt: vect__92.109_255 = VEC_PACK_TRUNC_EXPR <vect__91.108_257, vect__91.108_256>;
common/quant.c:128:9: note: ------>vectorizing SLP node starting from: *_81[0] = _92;

common/quant.c:128:9: note: vect_is_simple_use: operand _92
common/quant.c:128:9: note: def_stmt: _92 = (short int) _91;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _100
common/quant.c:128:9: note: def_stmt: _100 = (short int) _99;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _108
common/quant.c:128:9: note: def_stmt: _108 = (short int) _107;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _116
common/quant.c:128:9: note: def_stmt: _116 = (short int) _115;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _124
common/quant.c:128:9: note: def_stmt: _124 = (short int) _123;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _132
common/quant.c:128:9: note: def_stmt: _132 = (short int) _131;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _140
common/quant.c:128:9: note: def_stmt: _140 = (short int) _139;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: vect_is_simple_use: operand _148
common/quant.c:128:9: note: def_stmt: _148 = (short int) _147;
common/quant.c:128:9: note: type of def: 3.
common/quant.c:128:9: note: transform store. ncopies = 1
common/quant.c:128:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_13(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:128:9: note: created vectp_dct.111_254
common/quant.c:128:9: note: add new stmt: MEM[(short int *)vectp_dct.110_253] = vect__92.109_255;
common/quant.c:128:9: note: vectorizing stmts using SLP.
common/quant.c:128:9: note: ------>vectorizing statement: vect__83.99_26 = [vec_unpack_lo_expr] vect__82.98_33;

common/quant.c:128:9: note: ------>vectorizing statement: vect__83.99_272 = [vec_unpack_hi_expr] vect__82.98_33;

common/quant.c:128:9: note: ------>vectorizing statement: _83 = (int) _82;

common/quant.c:128:9: note: ------>vectorizing statement: vect__87.102_266 = MEM[(int *)vectp.100_268];

common/quant.c:128:9: note: ------>vectorizing statement: vectp.100_265 = vectp.100_268 + 16;

common/quant.c:128:9: note: ------>vectorizing statement: vect__87.103_264 = MEM[(int *)vectp.100_265];

common/quant.c:128:9: note: ------>vectorizing statement: _87 = *pretmp_303[y_156][0];

common/quant.c:128:9: note: ------>vectorizing statement: vect__88.104_263 = vect__83.99_26 * vect__87.102_266;

common/quant.c:128:9: note: ------>vectorizing statement: vect__88.104_262 = vect__83.99_272 * vect__87.103_264;

common/quant.c:128:9: note: ------>vectorizing statement: _88 = _83 * _87;

common/quant.c:128:9: note: ------>vectorizing statement: vect__89.105_259 = vect_cst_.107_260 + vect__88.104_263;

common/quant.c:128:9: note: ------>vectorizing statement: vect__89.105_258 = vect_cst_.106_261 + vect__88.104_262;

common/quant.c:128:9: note: ------>vectorizing statement: _89 = f_78 + _88;

common/quant.c:128:9: note: ------>vectorizing statement: vect__91.108_257 = vect__89.105_259 >> pretmp_306;

common/quant.c:128:9: note: ------>vectorizing statement: vect__91.108_256 = vect__89.105_258 >> pretmp_306;

common/quant.c:128:9: note: ------>vectorizing statement: _91 = _89 >> pretmp_306;

common/quant.c:128:9: note: ------>vectorizing statement: vect__92.109_255 = VEC_PACK_TRUNC_EXPR <vect__91.108_257, vect__91.108_256>;

common/quant.c:128:9: note: ------>vectorizing statement: _92 = (short int) _91;

common/quant.c:128:9: note: ------>vectorizing statement: _94 = *_81[1];

common/quant.c:128:9: note: ------>vectorizing statement: _95 = (int) _94;

common/quant.c:128:9: note: ------>vectorizing statement: _96 = *pretmp_303[y_156][1];

common/quant.c:128:9: note: ------>vectorizing statement: _97 = _95 * _96;

common/quant.c:128:9: note: ------>vectorizing statement: _98 = f_78 + _97;

common/quant.c:128:9: note: ------>vectorizing statement: _99 = _98 >> pretmp_306;

common/quant.c:128:9: note: ------>vectorizing statement: _100 = (short int) _99;

common/quant.c:128:9: note: ------>vectorizing statement: _102 = *_81[2];

common/quant.c:128:9: note: ------>vectorizing statement: _103 = (int) _102;

common/quant.c:128:9: note: ------>vectorizing statement: _104 = *pretmp_303[y_156][2];

common/quant.c:128:9: note: ------>vectorizing statement: _105 = _103 * _104;

common/quant.c:128:9: note: ------>vectorizing statement: _106 = f_78 + _105;

common/quant.c:128:9: note: ------>vectorizing statement: _107 = _106 >> pretmp_306;

common/quant.c:128:9: note: ------>vectorizing statement: _108 = (short int) _107;

common/quant.c:128:9: note: ------>vectorizing statement: _110 = *_81[3];

common/quant.c:128:9: note: ------>vectorizing statement: _111 = (int) _110;

common/quant.c:128:9: note: ------>vectorizing statement: _112 = *pretmp_303[y_156][3];

common/quant.c:128:9: note: ------>vectorizing statement: _113 = _111 * _112;

common/quant.c:128:9: note: ------>vectorizing statement: _114 = f_78 + _113;

common/quant.c:128:9: note: ------>vectorizing statement: _115 = _114 >> pretmp_306;

common/quant.c:128:9: note: ------>vectorizing statement: _116 = (short int) _115;

common/quant.c:128:9: note: ------>vectorizing statement: _118 = *_81[4];

common/quant.c:128:9: note: ------>vectorizing statement: _119 = (int) _118;

common/quant.c:128:9: note: ------>vectorizing statement: _120 = *pretmp_303[y_156][4];

common/quant.c:128:9: note: ------>vectorizing statement: _121 = _119 * _120;

common/quant.c:128:9: note: ------>vectorizing statement: _122 = f_78 + _121;

common/quant.c:128:9: note: ------>vectorizing statement: _123 = _122 >> pretmp_306;

common/quant.c:128:9: note: ------>vectorizing statement: _124 = (short int) _123;

common/quant.c:128:9: note: ------>vectorizing statement: _126 = *_81[5];

common/quant.c:128:9: note: ------>vectorizing statement: _127 = (int) _126;

common/quant.c:128:9: note: ------>vectorizing statement: _128 = *pretmp_303[y_156][5];

common/quant.c:128:9: note: ------>vectorizing statement: _129 = _127 * _128;

common/quant.c:128:9: note: ------>vectorizing statement: _130 = f_78 + _129;

common/quant.c:128:9: note: ------>vectorizing statement: _131 = _130 >> pretmp_306;

common/quant.c:128:9: note: ------>vectorizing statement: _132 = (short int) _131;

common/quant.c:128:9: note: ------>vectorizing statement: _134 = *_81[6];

common/quant.c:128:9: note: ------>vectorizing statement: _135 = (int) _134;

common/quant.c:128:9: note: ------>vectorizing statement: _136 = *pretmp_303[y_156][6];

common/quant.c:128:9: note: ------>vectorizing statement: _137 = _135 * _136;

common/quant.c:128:9: note: ------>vectorizing statement: _138 = f_78 + _137;

common/quant.c:128:9: note: ------>vectorizing statement: _139 = _138 >> pretmp_306;

common/quant.c:128:9: note: ------>vectorizing statement: _140 = (short int) _139;

common/quant.c:128:9: note: ------>vectorizing statement: _142 = *_81[7];

common/quant.c:128:9: note: ------>vectorizing statement: _143 = (int) _142;

common/quant.c:128:9: note: ------>vectorizing statement: _144 = *pretmp_303[y_156][7];

common/quant.c:128:9: note: ------>vectorizing statement: _145 = _143 * _144;

common/quant.c:128:9: note: ------>vectorizing statement: _146 = f_78 + _145;

common/quant.c:128:9: note: ------>vectorizing statement: _147 = _146 >> pretmp_306;

common/quant.c:128:9: note: ------>vectorizing statement: _148 = (short int) _147;

common/quant.c:128:9: note: ------>vectorizing statement: MEM[(short int *)vectp_dct.110_253] = vect__92.109_255;

common/quant.c:128:9: note: ------>vectorizing statement: y_150 = y_156 + 1;

common/quant.c:128:9: note: ------>vectorizing statement: # DEBUG y => y_150

common/quant.c:128:9: note: ------>vectorizing statement: # DEBUG y => y_150

common/quant.c:128:9: note: ------>vectorizing statement: ivtmp_297 = ivtmp_298 - 1;

common/quant.c:128:9: note: ------>vectorizing statement: vectp_dct.96_40 = vectp_dct.96_47 + 16;

common/quant.c:128:9: note: ------>vectorizing statement: vectp.100_267 = vectp.100_265 + 16;

common/quant.c:128:9: note: ------>vectorizing statement: vectp_dct.110_252 = vectp_dct.110_253 + 16;

common/quant.c:128:9: note: ------>vectorizing statement: if (ivtmp_297 != 0)


loop at common/quant.c:130: if (ivtmp_141 < 8)

;; Scaling loop 1 with scale 1.000000, bounding iterations to 8 from guessed 7
common/quant.c:128:9: note: LOOP VECTORIZED

common/quant.c:105:13: note: vectorized 2 loops in function.
Merging blocks 3 and 11
Merging blocks 7 and 13
dequant_8x8 (int16_t[8] * dct, int[8][8] * dequant_mf, int i_qp)
{
  vector(8) short int * vectp_dct.111;
  vector(8) short int * vectp_dct.110;
  vector(8) short int vect__92.109;
  vector(4) int vect__91.108;
  const vector(4) int vect_cst_.107;
  const vector(4) int vect_cst_.106;
  const vector(4) int vect__89.105;
  vector(4) int vect__88.104;
  vector(4) int vect__87.103;
  vector(4) int vect__87.102;
  vector(4) int * vectp.101;
  vector(4) int * vectp.100;
  vector(4) int vect__83.99;
  vector(8) short int vect__82.98;
  vector(8) short int * vectp_dct.97;
  vector(8) short int * vectp_dct.96;
  vector(8) short int * vectp_dct.95;
  vector(8) short int * vectp_dct.94;
  vector(8) short int vect__25.93;
  vector(4) int vect__24.92;
  vector(4) int vect__23.91;
  vector(4) int vect__22.90;
  vector(4) int vect__22.89;
  vector(4) int * vectp.88;
  vector(4) int * vectp.87;
  vector(4) int vect__17.86;
  vector(8) short int vect__16.85;
  vector(8) short int * vectp_dct.84;
  vector(8) short int * vectp_dct.83;
  const int f;
  int y;
  const int i_qbits;
  const int i_mf;
  unsigned int ivtmp_5;
  int _8;
  long unsigned int _11;
  long unsigned int _12;
  int16_t[8] * _15;
  short int _16;
  int _17;
  int _22;
  int _23;
  int _24;
  short int _25;
  short int _27;
  int _28;
  int _29;
  int _30;
  int _31;
  short int _32;
  short int _34;
  int _35;
  int _36;
  int _37;
  int _38;
  short int _39;
  short int _41;
  int _42;
  int _43;
  int _44;
  int _45;
  short int _46;
  short int _48;
  int _49;
  int _50;
  int _51;
  int _52;
  short int _53;
  short int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  short int _60;
  short int _62;
  int _63;
  int _64;
  int _65;
  int _66;
  short int _67;
  unsigned int ivtmp_68;
  short int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  short int _74;
  unsigned int ivtmp_75;
  int _77;
  long unsigned int _79;
  long unsigned int _80;
  int16_t[8] * _81;
  short int _82;
  int _83;
  int _87;
  int _88;
  int _89;
  int _91;
  short int _92;
  short int _94;
  int _95;
  int _96;
  int _97;
  int _98;
  int _99;
  short int _100;
  short int _102;
  int _103;
  int _104;
  int _105;
  int _106;
  int _107;
  short int _108;
  short int _110;
  int _111;
  int _112;
  int _113;
  int _114;
  int _115;
  short int _116;
  short int _118;
  int _119;
  int _120;
  int _121;
  int _122;
  int _123;
  short int _124;
  short int _126;
  int _127;
  int _128;
  int _129;
  int _130;
  int _131;
  short int _132;
  short int _134;
  int _135;
  int _136;
  int _137;
  int _138;
  int _139;
  short int _140;
  unsigned int ivtmp_141;
  short int _142;
  int _143;
  int _144;
  int _145;
  int _146;
  int _147;
  short int _148;
  unsigned int ivtmp_149;
  long unsigned int _269;
  long unsigned int _270;
  long unsigned int _287;
  long unsigned int _288;
  unsigned int ivtmp_297;
  unsigned int ivtmp_298;
  unsigned int ivtmp_299;
  long unsigned int pretmp_301;
  long unsigned int pretmp_302;
  int[8][8] * pretmp_303;
  int pretmp_306;
  long unsigned int pretmp_310;
  long unsigned int pretmp_311;
  int[8][8] * pretmp_312;

  <bb 2>:
  i_mf_7 = i_qp_6(D) % 6;
  # DEBUG i_mf => i_mf_7
  _8 = i_qp_6(D) / 6;
  i_qbits_9 = _8 + -6;
  # DEBUG i_qbits => i_qbits_9
  if (i_qbits_9 >= 0)
    goto <bb 3>;
  else
    goto <bb 8>;

  <bb 3>:
  pretmp_310 = (long unsigned int) i_mf_7;
  pretmp_311 = pretmp_310 * 256;
  pretmp_312 = dequant_mf_20(D) + pretmp_311;
  vectp_dct.84_295 = dct_13(D);
  _288 = (long unsigned int) i_mf_7;
  _287 = _288 * 256;
  vectp.88_289 = dequant_mf_20(D) + _287;
  vectp_dct.95_276 = dct_13(D);

  <bb 4>:
  # y_157 = PHI <0(3), y_76(5)>
  # ivtmp_5 = PHI <8(3), ivtmp_299(5)>
  # vectp_dct.83_294 = PHI <vectp_dct.84_295(3), vectp_dct.83_293(5)>
  # vectp.87_286 = PHI <vectp.88_289(3), vectp.87_285(5)>
  # vectp_dct.94_275 = PHI <vectp_dct.95_276(3), vectp_dct.94_274(5)>
  # ivtmp_75 = PHI <0(3), ivtmp_68(5)>
  # DEBUG y => y_157
  _11 = (long unsigned int) y_157;
  _12 = _11 * 16;
  _15 = dct_13(D) + _12;
  vect__16.85_292 = MEM[(short int *)vectp_dct.83_294];
  _16 = *_15[0];
  vect__17.86_291 = [vec_unpack_lo_expr] vect__16.85_292;
  vect__17.86_290 = [vec_unpack_hi_expr] vect__16.85_292;
  _17 = (int) _16;
  vect__22.89_284 = MEM[(int *)vectp.87_286];
  vectp.87_283 = vectp.87_286 + 16;
  vect__22.90_282 = MEM[(int *)vectp.87_283];
  _22 = *pretmp_312[y_157][0];
  vect__23.91_281 = vect__17.86_291 * vect__22.89_284;
  vect__23.91_280 = vect__17.86_290 * vect__22.90_282;
  _23 = _17 * _22;
  vect__24.92_279 = vect__23.91_281 << i_qbits_9;
  vect__24.92_278 = vect__23.91_280 << i_qbits_9;
  _24 = _23 << i_qbits_9;
  vect__25.93_277 = VEC_PACK_TRUNC_EXPR <vect__24.92_279, vect__24.92_278>;
  _25 = (short int) _24;
  _27 = *_15[1];
  _28 = (int) _27;
  _29 = *pretmp_312[y_157][1];
  _30 = _28 * _29;
  _31 = _30 << i_qbits_9;
  _32 = (short int) _31;
  _34 = *_15[2];
  _35 = (int) _34;
  _36 = *pretmp_312[y_157][2];
  _37 = _35 * _36;
  _38 = _37 << i_qbits_9;
  _39 = (short int) _38;
  _41 = *_15[3];
  _42 = (int) _41;
  _43 = *pretmp_312[y_157][3];
  _44 = _42 * _43;
  _45 = _44 << i_qbits_9;
  _46 = (short int) _45;
  _48 = *_15[4];
  _49 = (int) _48;
  _50 = *pretmp_312[y_157][4];
  _51 = _49 * _50;
  _52 = _51 << i_qbits_9;
  _53 = (short int) _52;
  _55 = *_15[5];
  _56 = (int) _55;
  _57 = *pretmp_312[y_157][5];
  _58 = _56 * _57;
  _59 = _58 << i_qbits_9;
  _60 = (short int) _59;
  _62 = *_15[6];
  _63 = (int) _62;
  _64 = *pretmp_312[y_157][6];
  _65 = _63 * _64;
  _66 = _65 << i_qbits_9;
  _67 = (short int) _66;
  _69 = *_15[7];
  _70 = (int) _69;
  _71 = *pretmp_312[y_157][7];
  _72 = _70 * _71;
  _73 = _72 << i_qbits_9;
  _74 = (short int) _73;
  MEM[(short int *)vectp_dct.94_275] = vect__25.93_277;
  y_76 = y_157 + 1;
  # DEBUG y => y_76
  # DEBUG y => y_76
  ivtmp_299 = ivtmp_5 - 1;
  vectp_dct.83_293 = vectp_dct.83_294 + 16;
  vectp.87_285 = vectp.87_283 + 16;
  vectp_dct.94_274 = vectp_dct.94_275 + 16;
  ivtmp_68 = ivtmp_75 + 1;
  if (ivtmp_68 < 8)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  goto <bb 4>;

  <bb 6>:

  <bb 7>:
  return;

  <bb 8>:
  _77 = ~i_qbits_9;
  f_78 = 1 << _77;
  # DEBUG f => f_78
  # DEBUG y => 0
  # DEBUG y => 0
  pretmp_301 = (long unsigned int) i_mf_7;
  pretmp_302 = pretmp_301 * 256;
  pretmp_303 = dequant_mf_20(D) + pretmp_302;
  pretmp_306 = -i_qbits_9;
  vectp_dct.97_54 = dct_13(D);
  _270 = (long unsigned int) i_mf_7;
  _269 = _270 * 256;
  vectp.101_271 = dequant_mf_20(D) + _269;
  vect_cst_.106_261 = {f_78, f_78, f_78, f_78};
  vect_cst_.107_260 = {f_78, f_78, f_78, f_78};
  vectp_dct.111_254 = dct_13(D);

  <bb 9>:
  # y_156 = PHI <y_150(11), 0(8)>
  # ivtmp_298 = PHI <ivtmp_297(11), 8(8)>
  # vectp_dct.96_47 = PHI <vectp_dct.96_40(11), vectp_dct.97_54(8)>
  # vectp.100_268 = PHI <vectp.100_267(11), vectp.101_271(8)>
  # vectp_dct.110_253 = PHI <vectp_dct.110_252(11), vectp_dct.111_254(8)>
  # ivtmp_149 = PHI <ivtmp_141(11), 0(8)>
  # DEBUG y => y_156
  _79 = (long unsigned int) y_156;
  _80 = _79 * 16;
  _81 = dct_13(D) + _80;
  vect__82.98_33 = MEM[(short int *)vectp_dct.96_47];
  _82 = *_81[0];
  vect__83.99_26 = [vec_unpack_lo_expr] vect__82.98_33;
  vect__83.99_272 = [vec_unpack_hi_expr] vect__82.98_33;
  _83 = (int) _82;
  vect__87.102_266 = MEM[(int *)vectp.100_268];
  vectp.100_265 = vectp.100_268 + 16;
  vect__87.103_264 = MEM[(int *)vectp.100_265];
  _87 = *pretmp_303[y_156][0];
  vect__88.104_263 = vect__83.99_26 * vect__87.102_266;
  vect__88.104_262 = vect__83.99_272 * vect__87.103_264;
  _88 = _83 * _87;
  vect__89.105_259 = vect_cst_.107_260 + vect__88.104_263;
  vect__89.105_258 = vect_cst_.106_261 + vect__88.104_262;
  _89 = f_78 + _88;
  vect__91.108_257 = vect__89.105_259 >> pretmp_306;
  vect__91.108_256 = vect__89.105_258 >> pretmp_306;
  _91 = _89 >> pretmp_306;
  vect__92.109_255 = VEC_PACK_TRUNC_EXPR <vect__91.108_257, vect__91.108_256>;
  _92 = (short int) _91;
  _94 = *_81[1];
  _95 = (int) _94;
  _96 = *pretmp_303[y_156][1];
  _97 = _95 * _96;
  _98 = f_78 + _97;
  _99 = _98 >> pretmp_306;
  _100 = (short int) _99;
  _102 = *_81[2];
  _103 = (int) _102;
  _104 = *pretmp_303[y_156][2];
  _105 = _103 * _104;
  _106 = f_78 + _105;
  _107 = _106 >> pretmp_306;
  _108 = (short int) _107;
  _110 = *_81[3];
  _111 = (int) _110;
  _112 = *pretmp_303[y_156][3];
  _113 = _111 * _112;
  _114 = f_78 + _113;
  _115 = _114 >> pretmp_306;
  _116 = (short int) _115;
  _118 = *_81[4];
  _119 = (int) _118;
  _120 = *pretmp_303[y_156][4];
  _121 = _119 * _120;
  _122 = f_78 + _121;
  _123 = _122 >> pretmp_306;
  _124 = (short int) _123;
  _126 = *_81[5];
  _127 = (int) _126;
  _128 = *pretmp_303[y_156][5];
  _129 = _127 * _128;
  _130 = f_78 + _129;
  _131 = _130 >> pretmp_306;
  _132 = (short int) _131;
  _134 = *_81[6];
  _135 = (int) _134;
  _136 = *pretmp_303[y_156][6];
  _137 = _135 * _136;
  _138 = f_78 + _137;
  _139 = _138 >> pretmp_306;
  _140 = (short int) _139;
  _142 = *_81[7];
  _143 = (int) _142;
  _144 = *pretmp_303[y_156][7];
  _145 = _143 * _144;
  _146 = f_78 + _145;
  _147 = _146 >> pretmp_306;
  _148 = (short int) _147;
  MEM[(short int *)vectp_dct.110_253] = vect__92.109_255;
  y_150 = y_156 + 1;
  # DEBUG y => y_150
  # DEBUG y => y_150
  ivtmp_297 = ivtmp_298 - 1;
  vectp_dct.96_40 = vectp_dct.96_47 + 16;
  vectp.100_267 = vectp.100_265 + 16;
  vectp_dct.110_252 = vectp_dct.110_253 + 16;
  ivtmp_141 = ivtmp_149 + 1;
  if (ivtmp_141 < 8)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 7>;

  <bb 11>:
  goto <bb 9>;

}



;; Function dequant_4x4_dc (dequant_4x4_dc, funcdef_no=121, decl_uid=5945, cgraph_uid=121, symbol_order=164)


Analyzing loop at common/quant.c:151
common/quant.c:151:9: note: ===== analyze_loop_nest =====
common/quant.c:151:9: note: === vect_analyze_loop_form ===
split exit edge.
common/quant.c:151:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/quant.c:151:9: note: === vect_analyze_data_refs ===
Creating dr for *_20[0]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 0
	Access function 1: {0B, +, 8}_2
Creating dr for *_20[0]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 0
	Access function 1: {0B, +, 8}_2
Creating dr for *_20[1]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 1
	Access function 1: {0B, +, 8}_2
Creating dr for *_20[1]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 1
	Access function 1: {0B, +, 8}_2
Creating dr for *_20[2]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 2
	Access function 1: {0B, +, 8}_2
Creating dr for *_20[2]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 2
	Access function 1: {0B, +, 8}_2
Creating dr for *_20[3]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 3
	Access function 1: {0B, +, 8}_2
Creating dr for *_20[3]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 3
	Access function 1: {0B, +, 8}_2
common/quant.c:151:9: note: got vectype for stmt: _21 = *_20[0];
vector(8) short int
common/quant.c:151:9: note: got vectype for stmt: *_20[0] = _25;
vector(8) short int
common/quant.c:151:9: note: got vectype for stmt: _27 = *_20[1];
vector(8) short int
common/quant.c:151:9: note: got vectype for stmt: *_20[1] = _30;
vector(8) short int
common/quant.c:151:9: note: got vectype for stmt: _32 = *_20[2];
vector(8) short int
common/quant.c:151:9: note: got vectype for stmt: *_20[2] = _35;
vector(8) short int
common/quant.c:151:9: note: got vectype for stmt: _37 = *_20[3];
vector(8) short int
common/quant.c:151:9: note: got vectype for stmt: *_20[3] = _40;
vector(8) short int
common/quant.c:151:9: note: === vect_analyze_scalar_cycles ===
common/quant.c:151:9: note: Analyze phi: y_83 = PHI <y_42(5), 0(3)>

common/quant.c:151:9: note: Access function of PHI: {0, +, 1}_2
common/quant.c:151:9: note: step: 1,  init: 0
common/quant.c:151:9: note: Detected induction.
common/quant.c:151:9: note: Analyze phi: .MEM_89 = PHI <.MEM_41(5), .MEM_14(D)(3)>

common/quant.c:151:9: note: Analyze phi: ivtmp_5 = PHI <ivtmp_148(5), 4(3)>

common/quant.c:151:9: note: Access function of PHI: {4, +, 4294967295}_2
common/quant.c:151:9: note: step: 4294967295,  init: 4
common/quant.c:151:9: note: Detected induction.
common/quant.c:151:9: note: === vect_pattern_recog ===
common/quant.c:151:9: note: vect_is_simple_use: operand _17
common/quant.c:151:9: note: def_stmt: _17 = (long unsigned int) y_83;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand y_83
common/quant.c:151:9: note: def_stmt: y_83 = PHI <y_42(5), 0(3)>
common/quant.c:151:9: note: type of def: 4.
common/quant.c:151:9: note: vect_is_simple_use: operand 8
common/quant.c:151:9: note: vect_is_simple_use: operand _22
common/quant.c:151:9: note: def_stmt: _22 = (unsigned short) _21;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _21
common/quant.c:151:9: note: def_stmt: _21 = *_20[0];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _28
common/quant.c:151:9: note: def_stmt: _28 = (unsigned short) _27;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _27
common/quant.c:151:9: note: def_stmt: _27 = *_20[1];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _33
common/quant.c:151:9: note: def_stmt: _33 = (unsigned short) _32;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _32
common/quant.c:151:9: note: def_stmt: _32 = *_20[2];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _38
common/quant.c:151:9: note: def_stmt: _38 = (unsigned short) _37;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _37
common/quant.c:151:9: note: def_stmt: _37 = *_20[3];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: === vect_analyze_data_ref_accesses ===
common/quant.c:151:9: note: Detected interleaving *_20[0] and *_20[1]
common/quant.c:151:9: note: Detected interleaving *_20[0] and *_20[2]
common/quant.c:151:9: note: Detected interleaving *_20[0] and *_20[3]
common/quant.c:151:9: note: Detected interleaving *_20[0] and *_20[1]
common/quant.c:151:9: note: Detected interleaving *_20[0] and *_20[2]
common/quant.c:151:9: note: Detected interleaving *_20[0] and *_20[3]
common/quant.c:151:9: note: Detected interleaving of size 4
common/quant.c:151:9: note: Detected interleaving of size 4
common/quant.c:151:9: note: === vect_mark_stmts_to_be_vectorized ===
common/quant.c:151:9: note: init: phi relevant? y_83 = PHI <y_42(5), 0(3)>
common/quant.c:151:9: note: init: phi relevant? .MEM_89 = PHI <.MEM_41(5), .MEM_14(D)(3)>
common/quant.c:151:9: note: init: phi relevant? ivtmp_5 = PHI <ivtmp_148(5), 4(3)>
common/quant.c:151:9: note: init: stmt relevant? # DEBUG y => y_83
common/quant.c:151:9: note: init: stmt relevant? _17 = (long unsigned int) y_83;
common/quant.c:151:9: note: init: stmt relevant? _18 = _17 * 8;
common/quant.c:151:9: note: init: stmt relevant? _20 = dct_19(D) + _18;
common/quant.c:151:9: note: init: stmt relevant? _21 = *_20[0];
common/quant.c:151:9: note: init: stmt relevant? _22 = (unsigned short) _21;
common/quant.c:151:9: note: init: stmt relevant? _24 = _22 * pretmp_156;
common/quant.c:151:9: note: init: stmt relevant? _25 = (short int) _24;
common/quant.c:151:9: note: init: stmt relevant? *_20[0] = _25;
common/quant.c:151:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: init: stmt relevant? _27 = *_20[1];
common/quant.c:151:9: note: init: stmt relevant? _28 = (unsigned short) _27;
common/quant.c:151:9: note: init: stmt relevant? _29 = _28 * pretmp_156;
common/quant.c:151:9: note: init: stmt relevant? _30 = (short int) _29;
common/quant.c:151:9: note: init: stmt relevant? *_20[1] = _30;
common/quant.c:151:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: init: stmt relevant? _32 = *_20[2];
common/quant.c:151:9: note: init: stmt relevant? _33 = (unsigned short) _32;
common/quant.c:151:9: note: init: stmt relevant? _34 = _33 * pretmp_156;
common/quant.c:151:9: note: init: stmt relevant? _35 = (short int) _34;
common/quant.c:151:9: note: init: stmt relevant? *_20[2] = _35;
common/quant.c:151:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: init: stmt relevant? _37 = *_20[3];
common/quant.c:151:9: note: init: stmt relevant? _38 = (unsigned short) _37;
common/quant.c:151:9: note: init: stmt relevant? _39 = _38 * pretmp_156;
common/quant.c:151:9: note: init: stmt relevant? _40 = (short int) _39;
common/quant.c:151:9: note: init: stmt relevant? *_20[3] = _40;
common/quant.c:151:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: init: stmt relevant? y_42 = y_83 + 1;
common/quant.c:151:9: note: init: stmt relevant? # DEBUG y => y_42
common/quant.c:151:9: note: init: stmt relevant? # DEBUG y => y_42
common/quant.c:151:9: note: init: stmt relevant? ivtmp_148 = ivtmp_5 - 1;
common/quant.c:151:9: note: init: stmt relevant? if (ivtmp_148 != 0)
common/quant.c:151:9: note: worklist: examine stmt: *_20[3] = _40;
common/quant.c:151:9: note: vect_is_simple_use: operand _40
common/quant.c:151:9: note: def_stmt: _40 = (short int) _39;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _40 = (short int) _39;
common/quant.c:151:9: note: vect_is_simple_use: operand _39
common/quant.c:151:9: note: def_stmt: _39 = _38 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _39 = _38 * pretmp_156;
common/quant.c:151:9: note: vect_is_simple_use: operand _38
common/quant.c:151:9: note: def_stmt: _38 = (unsigned short) _37;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: def_stmt is out of loop.
common/quant.c:151:9: note: worklist: examine stmt: _38 = (unsigned short) _37;
common/quant.c:151:9: note: vect_is_simple_use: operand _37
common/quant.c:151:9: note: def_stmt: _37 = *_20[3];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _37 = *_20[3];
common/quant.c:151:9: note: worklist: examine stmt: *_20[2] = _35;
common/quant.c:151:9: note: vect_is_simple_use: operand _35
common/quant.c:151:9: note: def_stmt: _35 = (short int) _34;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _35 = (short int) _34;
common/quant.c:151:9: note: vect_is_simple_use: operand _34
common/quant.c:151:9: note: def_stmt: _34 = _33 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _34 = _33 * pretmp_156;
common/quant.c:151:9: note: vect_is_simple_use: operand _33
common/quant.c:151:9: note: def_stmt: _33 = (unsigned short) _32;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: def_stmt is out of loop.
common/quant.c:151:9: note: worklist: examine stmt: _33 = (unsigned short) _32;
common/quant.c:151:9: note: vect_is_simple_use: operand _32
common/quant.c:151:9: note: def_stmt: _32 = *_20[2];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _32 = *_20[2];
common/quant.c:151:9: note: worklist: examine stmt: *_20[1] = _30;
common/quant.c:151:9: note: vect_is_simple_use: operand _30
common/quant.c:151:9: note: def_stmt: _30 = (short int) _29;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _30 = (short int) _29;
common/quant.c:151:9: note: vect_is_simple_use: operand _29
common/quant.c:151:9: note: def_stmt: _29 = _28 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _29 = _28 * pretmp_156;
common/quant.c:151:9: note: vect_is_simple_use: operand _28
common/quant.c:151:9: note: def_stmt: _28 = (unsigned short) _27;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: def_stmt is out of loop.
common/quant.c:151:9: note: worklist: examine stmt: _28 = (unsigned short) _27;
common/quant.c:151:9: note: vect_is_simple_use: operand _27
common/quant.c:151:9: note: def_stmt: _27 = *_20[1];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _27 = *_20[1];
common/quant.c:151:9: note: worklist: examine stmt: *_20[0] = _25;
common/quant.c:151:9: note: vect_is_simple_use: operand _25
common/quant.c:151:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _25 = (short int) _24;
common/quant.c:151:9: note: vect_is_simple_use: operand _24
common/quant.c:151:9: note: def_stmt: _24 = _22 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _24 = _22 * pretmp_156;
common/quant.c:151:9: note: vect_is_simple_use: operand _22
common/quant.c:151:9: note: def_stmt: _22 = (unsigned short) _21;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: def_stmt is out of loop.
common/quant.c:151:9: note: worklist: examine stmt: _22 = (unsigned short) _21;
common/quant.c:151:9: note: vect_is_simple_use: operand _21
common/quant.c:151:9: note: def_stmt: _21 = *_20[0];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: mark relevant 4, live 0.
common/quant.c:151:9: note: worklist: examine stmt: _21 = *_20[0];
common/quant.c:151:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _21 = *_20[0];
  stmt_b: *_20[0] = _25;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _21 = *_20[0];
  stmt_b: _27 = *_20[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _21 = *_20[0];
  stmt_b: *_20[1] = _30;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _21 = *_20[0];
  stmt_b: _32 = *_20[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _21 = *_20[0];
  stmt_b: *_20[2] = _35;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _21 = *_20[0];
  stmt_b: _37 = *_20[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _21 = *_20[0];
  stmt_b: *_20[3] = _40;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[0] = _25;
  stmt_b: _27 = *_20[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[0] = _25;
  stmt_b: *_20[1] = _30;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[0] = _25;
  stmt_b: _32 = *_20[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[0] = _25;
  stmt_b: *_20[2] = _35;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[0] = _25;
  stmt_b: _37 = *_20[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[0] = _25;
  stmt_b: *_20[3] = _40;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_20[1];
  stmt_b: *_20[1] = _30;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _27 = *_20[1];
  stmt_b: _32 = *_20[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_20[1];
  stmt_b: *_20[2] = _35;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_20[1];
  stmt_b: _37 = *_20[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_20[1];
  stmt_b: *_20[3] = _40;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[1] = _30;
  stmt_b: _32 = *_20[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[1] = _30;
  stmt_b: *_20[2] = _35;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[1] = _30;
  stmt_b: _37 = *_20[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[1] = _30;
  stmt_b: *_20[3] = _40;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _32 = *_20[2];
  stmt_b: *_20[2] = _35;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _32 = *_20[2];
  stmt_b: _37 = *_20[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _32 = *_20[2];
  stmt_b: *_20[3] = _40;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[2] = _35;
  stmt_b: _37 = *_20[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_20[2] = _35;
  stmt_b: *_20[3] = _40;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _37 = *_20[3];
  stmt_b: *_20[3] = _40;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _21 = *_20[0];
  stmt_b: _21 = *_20[0];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_20[0] = _25;
  stmt_b: *_20[0] = _25;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _27 = *_20[1];
  stmt_b: _27 = *_20[1];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_20[1] = _30;
  stmt_b: *_20[1] = _30;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _32 = *_20[2];
  stmt_b: _32 = *_20[2];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_20[2] = _35;
  stmt_b: *_20[2] = _35;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _37 = *_20[3];
  stmt_b: _37 = *_20[3];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_20[3] = _40;
  stmt_b: *_20[3] = _40;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_2)
  (chrec_b = {0B, +, 8}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/quant.c:151:9: note: dependence distance  = 0.
common/quant.c:151:9: note: dependence distance == 0 between *_20[0] and *_20[0]
common/quant.c:151:9: note: dependence distance  = 0.
common/quant.c:151:9: note: dependence distance == 0 between *_20[1] and *_20[1]
common/quant.c:151:9: note: dependence distance  = 0.
common/quant.c:151:9: note: dependence distance == 0 between *_20[2] and *_20[2]
common/quant.c:151:9: note: dependence distance  = 0.
common/quant.c:151:9: note: dependence distance == 0 between *_20[3] and *_20[3]
common/quant.c:151:9: note: === vect_determine_vectorization_factor ===
common/quant.c:151:9: note: ==> examining phi: y_83 = PHI <y_42(5), 0(3)>

common/quant.c:151:9: note: ==> examining phi: .MEM_89 = PHI <.MEM_41(5), .MEM_14(D)(3)>

common/quant.c:151:9: note: ==> examining phi: ivtmp_5 = PHI <ivtmp_148(5), 4(3)>

common/quant.c:151:9: note: ==> examining statement: # DEBUG y => y_83

common/quant.c:151:9: note: skip.
common/quant.c:151:9: note: ==> examining statement: _17 = (long unsigned int) y_83;

common/quant.c:151:9: note: skip.
common/quant.c:151:9: note: ==> examining statement: _18 = _17 * 8;

common/quant.c:151:9: note: skip.
common/quant.c:151:9: note: ==> examining statement: _20 = dct_19(D) + _18;

common/quant.c:151:9: note: skip.
common/quant.c:151:9: note: ==> examining statement: _21 = *_20[0];

common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _22 = (unsigned short) _21;

common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _24 = _22 * pretmp_156;

common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _25 = (short int) _24;

common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: *_20[0] = _25;

common/quant.c:151:9: note: get vectype for scalar type:  int16_t
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _27 = *_20[1];

common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _28 = (unsigned short) _27;

common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _29 = _28 * pretmp_156;

common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _30 = (short int) _29;

common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: *_20[1] = _30;

common/quant.c:151:9: note: get vectype for scalar type:  int16_t
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _32 = *_20[2];

common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _33 = (unsigned short) _32;

common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _34 = _33 * pretmp_156;

common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _35 = (short int) _34;

common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: *_20[2] = _35;

common/quant.c:151:9: note: get vectype for scalar type:  int16_t
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _37 = *_20[3];

common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _38 = (unsigned short) _37;

common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _39 = _38 * pretmp_156;

common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: get vectype for scalar type:  unsigned short
common/quant.c:151:9: note: vectype: vector(8) unsigned short
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: _40 = (short int) _39;

common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: get vectype for scalar type:  short int
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: *_20[3] = _40;

common/quant.c:151:9: note: get vectype for scalar type:  int16_t
common/quant.c:151:9: note: vectype: vector(8) short int
common/quant.c:151:9: note: nunits = 8
common/quant.c:151:9: note: ==> examining statement: y_42 = y_83 + 1;

common/quant.c:151:9: note: skip.
common/quant.c:151:9: note: ==> examining statement: # DEBUG y => y_42

common/quant.c:151:9: note: skip.
common/quant.c:151:9: note: ==> examining statement: # DEBUG y => y_42

common/quant.c:151:9: note: skip.
common/quant.c:151:9: note: ==> examining statement: ivtmp_148 = ivtmp_5 - 1;

common/quant.c:151:9: note: skip.
common/quant.c:151:9: note: ==> examining statement: if (ivtmp_148 != 0)

common/quant.c:151:9: note: skip.
common/quant.c:151:9: note: vectorization factor = 8
common/quant.c:151:9: note: === vect_analyze_data_refs_alignment ===
common/quant.c:151:9: note: dependence distance  = 0.
common/quant.c:151:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_20[0] and *_20[0]
common/quant.c:151:9: note: dependence distance  = 0.
common/quant.c:151:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_20[1] and *_20[1]
common/quant.c:151:9: note: dependence distance  = 0.
common/quant.c:151:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_20[2] and *_20[2]
common/quant.c:151:9: note: dependence distance  = 0.
common/quant.c:151:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_20[3] and *_20[3]
common/quant.c:151:9: note: vect_compute_data_ref_alignment:
common/quant.c:151:9: note: can't force alignment of ref: *_20[0]
common/quant.c:151:9: note: vect_compute_data_ref_alignment:
common/quant.c:151:9: note: can't force alignment of ref: *_20[0]
common/quant.c:151:9: note: vect_compute_data_ref_alignment:
common/quant.c:151:9: note: can't force alignment of ref: *_20[1]
common/quant.c:151:9: note: vect_compute_data_ref_alignment:
common/quant.c:151:9: note: can't force alignment of ref: *_20[1]
common/quant.c:151:9: note: vect_compute_data_ref_alignment:
common/quant.c:151:9: note: can't force alignment of ref: *_20[2]
common/quant.c:151:9: note: vect_compute_data_ref_alignment:
common/quant.c:151:9: note: can't force alignment of ref: *_20[2]
common/quant.c:151:9: note: vect_compute_data_ref_alignment:
common/quant.c:151:9: note: can't force alignment of ref: *_20[3]
common/quant.c:151:9: note: vect_compute_data_ref_alignment:
common/quant.c:151:9: note: can't force alignment of ref: *_20[3]
common/quant.c:151:9: note: === vect_prune_runtime_alias_test_list ===
common/quant.c:151:9: note: === vect_enhance_data_refs_alignment ===
common/quant.c:151:9: note: vector alignment may not be reachable
common/quant.c:151:9: note: vect_can_advance_ivs_p:
common/quant.c:151:9: note: Analyze phi: y_83 = PHI <y_42(5), 0(3)>

common/quant.c:151:9: note: Analyze phi: .MEM_89 = PHI <.MEM_41(5), .MEM_14(D)(3)>

common/quant.c:151:9: note: virtual phi. skip.
common/quant.c:151:9: note: Analyze phi: ivtmp_5 = PHI <ivtmp_148(5), 4(3)>

common/quant.c:151:9: note: Vectorizing an unaligned access.
common/quant.c:151:9: note: Vectorizing an unaligned access.
common/quant.c:151:9: note: === vect_analyze_slp ===
common/quant.c:151:9: note: Build SLP for *_20[0] = _25;

common/quant.c:151:9: note: Build SLP for *_20[1] = _30;

common/quant.c:151:9: note: Build SLP for *_20[2] = _35;

common/quant.c:151:9: note: Build SLP for *_20[3] = _40;

common/quant.c:151:9: note: vect_is_simple_use: operand _25
common/quant.c:151:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _30
common/quant.c:151:9: note: def_stmt: _30 = (short int) _29;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _35
common/quant.c:151:9: note: def_stmt: _35 = (short int) _34;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _40
common/quant.c:151:9: note: def_stmt: _40 = (short int) _39;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: Build SLP for _25 = (short int) _24;

common/quant.c:151:9: note: Build SLP for _30 = (short int) _29;

common/quant.c:151:9: note: Build SLP for _35 = (short int) _34;

common/quant.c:151:9: note: Build SLP for _40 = (short int) _39;

common/quant.c:151:9: note: vect_is_simple_use: operand _24
common/quant.c:151:9: note: def_stmt: _24 = _22 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _29
common/quant.c:151:9: note: def_stmt: _29 = _28 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _34
common/quant.c:151:9: note: def_stmt: _34 = _33 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _39
common/quant.c:151:9: note: def_stmt: _39 = _38 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: Build SLP for _24 = _22 * pretmp_156;

common/quant.c:151:9: note: Build SLP for _29 = _28 * pretmp_156;

common/quant.c:151:9: note: Build SLP for _34 = _33 * pretmp_156;

common/quant.c:151:9: note: Build SLP for _39 = _38 * pretmp_156;

common/quant.c:151:9: note: vect_is_simple_use: operand _22
common/quant.c:151:9: note: def_stmt: _22 = (unsigned short) _21;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: vect_is_simple_use: operand _28
common/quant.c:151:9: note: def_stmt: _28 = (unsigned short) _27;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: vect_is_simple_use: operand _33
common/quant.c:151:9: note: def_stmt: _33 = (unsigned short) _32;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: vect_is_simple_use: operand _38
common/quant.c:151:9: note: def_stmt: _38 = (unsigned short) _37;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: Build SLP for _22 = (unsigned short) _21;

common/quant.c:151:9: note: Build SLP for _28 = (unsigned short) _27;

common/quant.c:151:9: note: Build SLP for _33 = (unsigned short) _32;

common/quant.c:151:9: note: Build SLP for _38 = (unsigned short) _37;

common/quant.c:151:9: note: vect_is_simple_use: operand _21
common/quant.c:151:9: note: def_stmt: _21 = *_20[0];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _27
common/quant.c:151:9: note: def_stmt: _27 = *_20[1];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _32
common/quant.c:151:9: note: def_stmt: _32 = *_20[2];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _37
common/quant.c:151:9: note: def_stmt: _37 = *_20[3];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: Build SLP for _21 = *_20[0];

common/quant.c:151:9: note: Build SLP for _27 = *_20[1];

common/quant.c:151:9: note: Build SLP for _32 = *_20[2];

common/quant.c:151:9: note: Build SLP for _37 = *_20[3];

common/quant.c:151:9: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:151:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:151:9: note: vect_is_simple_use: operand *_20[0]
common/quant.c:151:9: note: not ssa-name.
common/quant.c:151:9: note: vect_is_simple_use: operand _21
common/quant.c:151:9: note: def_stmt: _21 = *_20[0];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _22
common/quant.c:151:9: note: def_stmt: _22 = (unsigned short) _21;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: vect_is_simple_use: operand _24
common/quant.c:151:9: note: def_stmt: _24 = _22 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_model_store_cost: unaligned supported by hardware.
common/quant.c:151:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:151:9: note: vect_is_simple_use: operand _25
common/quant.c:151:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:151:9: note: type of def: 3.
node 
	stmt 0 *_20[0] = _25;

	stmt 1 *_20[1] = _30;

	stmt 2 *_20[2] = _35;

	stmt 3 *_20[3] = _40;

node 
	stmt 0 _25 = (short int) _24;

	stmt 1 _30 = (short int) _29;

	stmt 2 _35 = (short int) _34;

	stmt 3 _40 = (short int) _39;

node 
	stmt 0 _24 = _22 * pretmp_156;

	stmt 1 _29 = _28 * pretmp_156;

	stmt 2 _34 = _33 * pretmp_156;

	stmt 3 _39 = _38 * pretmp_156;

node 
	stmt 0 _22 = (unsigned short) _21;

	stmt 1 _28 = (unsigned short) _27;

	stmt 2 _33 = (unsigned short) _32;

	stmt 3 _38 = (unsigned short) _37;

node 
	stmt 0 _21 = *_20[0];

	stmt 1 _27 = *_20[1];

	stmt 2 _32 = *_20[2];

	stmt 3 _37 = *_20[3];

common/quant.c:151:9: note: === vect_make_slp_decision ===
common/quant.c:151:9: note: Decided to SLP 1 instances. Unrolling factor 2
common/quant.c:151:9: note: === vect_detect_hybrid_slp ===
common/quant.c:151:9: note: === vect_analyze_loop_operations ===
common/quant.c:151:9: note: Updating vectorization factor to 2
common/quant.c:151:9: note: examining phi: y_83 = PHI <y_42(5), 0(3)>

common/quant.c:151:9: note: examining phi: .MEM_89 = PHI <.MEM_41(5), .MEM_14(D)(3)>

common/quant.c:151:9: note: examining phi: ivtmp_5 = PHI <ivtmp_148(5), 4(3)>

common/quant.c:151:9: note: ==> examining statement: # DEBUG y => y_83
common/quant.c:151:9: note: irrelevant.
common/quant.c:151:9: note: ==> examining statement: _17 = (long unsigned int) y_83;
common/quant.c:151:9: note: irrelevant.
common/quant.c:151:9: note: ==> examining statement: _18 = _17 * 8;
common/quant.c:151:9: note: irrelevant.
common/quant.c:151:9: note: ==> examining statement: _20 = dct_19(D) + _18;
common/quant.c:151:9: note: irrelevant.
common/quant.c:151:9: note: ==> examining statement: _21 = *_20[0];
common/quant.c:151:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:151:9: note: vect_is_simple_use: operand *_20[0]
common/quant.c:151:9: note: not ssa-name.
common/quant.c:151:9: note: use not simple.
common/quant.c:151:9: note: ==> examining statement: _22 = (unsigned short) _21;
common/quant.c:151:9: note: vect_is_simple_use: operand _21
common/quant.c:151:9: note: def_stmt: _21 = *_20[0];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _21
common/quant.c:151:9: note: def_stmt: _21 = *_20[0];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: no optab.
common/quant.c:151:9: note: vect_is_simple_use: operand _21
common/quant.c:151:9: note: def_stmt: _21 = *_20[0];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: === vectorizable_assignment ===
common/quant.c:151:9: note: ==> examining statement: _24 = _22 * pretmp_156;
common/quant.c:151:9: note: vect_is_simple_use: operand _22
common/quant.c:151:9: note: def_stmt: _22 = (unsigned short) _21;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: === vectorizable_operation ===
common/quant.c:151:9: note: ==> examining statement: _25 = (short int) _24;
common/quant.c:151:9: note: vect_is_simple_use: operand _24
common/quant.c:151:9: note: def_stmt: _24 = _22 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _24
common/quant.c:151:9: note: def_stmt: _24 = _22 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: no optab.
common/quant.c:151:9: note: vect_is_simple_use: operand _24
common/quant.c:151:9: note: def_stmt: _24 = _22 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: === vectorizable_assignment ===
common/quant.c:151:9: note: ==> examining statement: *_20[0] = _25;
common/quant.c:151:9: note: vect_is_simple_use: operand _25
common/quant.c:151:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _30
common/quant.c:151:9: note: def_stmt: _30 = (short int) _29;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _35
common/quant.c:151:9: note: def_stmt: _35 = (short int) _34;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _40
common/quant.c:151:9: note: def_stmt: _40 = (short int) _39;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: ==> examining statement: _27 = *_20[1];
common/quant.c:151:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:151:9: note: vect_is_simple_use: operand *_20[1]
common/quant.c:151:9: note: not ssa-name.
common/quant.c:151:9: note: use not simple.
common/quant.c:151:9: note: ==> examining statement: _28 = (unsigned short) _27;
common/quant.c:151:9: note: vect_is_simple_use: operand _27
common/quant.c:151:9: note: def_stmt: _27 = *_20[1];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _27
common/quant.c:151:9: note: def_stmt: _27 = *_20[1];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: no optab.
common/quant.c:151:9: note: vect_is_simple_use: operand _27
common/quant.c:151:9: note: def_stmt: _27 = *_20[1];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: === vectorizable_assignment ===
common/quant.c:151:9: note: ==> examining statement: _29 = _28 * pretmp_156;
common/quant.c:151:9: note: vect_is_simple_use: operand _28
common/quant.c:151:9: note: def_stmt: _28 = (unsigned short) _27;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: === vectorizable_operation ===
common/quant.c:151:9: note: ==> examining statement: _30 = (short int) _29;
common/quant.c:151:9: note: vect_is_simple_use: operand _29
common/quant.c:151:9: note: def_stmt: _29 = _28 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _29
common/quant.c:151:9: note: def_stmt: _29 = _28 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: no optab.
common/quant.c:151:9: note: vect_is_simple_use: operand _29
common/quant.c:151:9: note: def_stmt: _29 = _28 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: === vectorizable_assignment ===
common/quant.c:151:9: note: ==> examining statement: *_20[1] = _30;
common/quant.c:151:9: note: vect_is_simple_use: operand _30
common/quant.c:151:9: note: def_stmt: _30 = (short int) _29;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: ==> examining statement: _32 = *_20[2];
common/quant.c:151:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:151:9: note: vect_is_simple_use: operand *_20[2]
common/quant.c:151:9: note: not ssa-name.
common/quant.c:151:9: note: use not simple.
common/quant.c:151:9: note: ==> examining statement: _33 = (unsigned short) _32;
common/quant.c:151:9: note: vect_is_simple_use: operand _32
common/quant.c:151:9: note: def_stmt: _32 = *_20[2];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _32
common/quant.c:151:9: note: def_stmt: _32 = *_20[2];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: no optab.
common/quant.c:151:9: note: vect_is_simple_use: operand _32
common/quant.c:151:9: note: def_stmt: _32 = *_20[2];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: === vectorizable_assignment ===
common/quant.c:151:9: note: ==> examining statement: _34 = _33 * pretmp_156;
common/quant.c:151:9: note: vect_is_simple_use: operand _33
common/quant.c:151:9: note: def_stmt: _33 = (unsigned short) _32;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: === vectorizable_operation ===
common/quant.c:151:9: note: ==> examining statement: _35 = (short int) _34;
common/quant.c:151:9: note: vect_is_simple_use: operand _34
common/quant.c:151:9: note: def_stmt: _34 = _33 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _34
common/quant.c:151:9: note: def_stmt: _34 = _33 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: no optab.
common/quant.c:151:9: note: vect_is_simple_use: operand _34
common/quant.c:151:9: note: def_stmt: _34 = _33 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: === vectorizable_assignment ===
common/quant.c:151:9: note: ==> examining statement: *_20[2] = _35;
common/quant.c:151:9: note: vect_is_simple_use: operand _35
common/quant.c:151:9: note: def_stmt: _35 = (short int) _34;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: ==> examining statement: _37 = *_20[3];
common/quant.c:151:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:151:9: note: vect_is_simple_use: operand *_20[3]
common/quant.c:151:9: note: not ssa-name.
common/quant.c:151:9: note: use not simple.
common/quant.c:151:9: note: ==> examining statement: _38 = (unsigned short) _37;
common/quant.c:151:9: note: vect_is_simple_use: operand _37
common/quant.c:151:9: note: def_stmt: _37 = *_20[3];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _37
common/quant.c:151:9: note: def_stmt: _37 = *_20[3];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: no optab.
common/quant.c:151:9: note: vect_is_simple_use: operand _37
common/quant.c:151:9: note: def_stmt: _37 = *_20[3];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: === vectorizable_assignment ===
common/quant.c:151:9: note: ==> examining statement: _39 = _38 * pretmp_156;
common/quant.c:151:9: note: vect_is_simple_use: operand _38
common/quant.c:151:9: note: def_stmt: _38 = (unsigned short) _37;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: === vectorizable_operation ===
common/quant.c:151:9: note: ==> examining statement: _40 = (short int) _39;
common/quant.c:151:9: note: vect_is_simple_use: operand _39
common/quant.c:151:9: note: def_stmt: _39 = _38 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _39
common/quant.c:151:9: note: def_stmt: _39 = _38 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: no optab.
common/quant.c:151:9: note: vect_is_simple_use: operand _39
common/quant.c:151:9: note: def_stmt: _39 = _38 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: === vectorizable_assignment ===
common/quant.c:151:9: note: ==> examining statement: *_20[3] = _40;
common/quant.c:151:9: note: vect_is_simple_use: operand _40
common/quant.c:151:9: note: def_stmt: _40 = (short int) _39;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: ==> examining statement: y_42 = y_83 + 1;
common/quant.c:151:9: note: irrelevant.
common/quant.c:151:9: note: ==> examining statement: # DEBUG y => y_42
common/quant.c:151:9: note: irrelevant.
common/quant.c:151:9: note: ==> examining statement: # DEBUG y => y_42
common/quant.c:151:9: note: irrelevant.
common/quant.c:151:9: note: ==> examining statement: ivtmp_148 = ivtmp_5 - 1;
common/quant.c:151:9: note: irrelevant.
common/quant.c:151:9: note: ==> examining statement: if (ivtmp_148 != 0)
common/quant.c:151:9: note: irrelevant.
common/quant.c:151:9: note: vectorization_factor = 2, niters = 4
common/quant.c:151:9: note: === vect_update_slp_costs_according_to_vf ===
common/quant.c:151:9: note: Cost model analysis: 
  Vector inside of loop cost: 7
  Vector prologue cost: 1
  Vector epilogue cost: 0
  Scalar iteration cost: 20
  Scalar outside cost: 0
  Vector outside cost: 1
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
common/quant.c:151:9: note:   Runtime profitability threshold = 1
common/quant.c:151:9: note:   Static estimate profitability threshold = 1
common/quant.c:151:9: note: loop vectorized
common/quant.c:151:9: note: === vec_transform_loop ===
common/quant.c:151:9: note: ------>vectorizing phi: y_83 = PHI <y_42(5), 0(11)>

common/quant.c:151:9: note: ------>vectorizing phi: .MEM_89 = PHI <.MEM_41(5), .MEM_14(D)(11)>

common/quant.c:151:9: note: ------>vectorizing phi: ivtmp_5 = PHI <ivtmp_148(5), 4(11)>

common/quant.c:151:9: note: ------>vectorizing statement: # DEBUG y => y_83

common/quant.c:151:9: note: ------>vectorizing statement: _17 = (long unsigned int) y_83;

common/quant.c:151:9: note: ------>vectorizing statement: _18 = _17 * 8;

common/quant.c:151:9: note: ------>vectorizing statement: _20 = dct_19(D) + _18;

common/quant.c:151:9: note: ------>vectorizing statement: _21 = *_20[0];

common/quant.c:151:9: note: === scheduling SLP instances ===
common/quant.c:151:9: note: ------>vectorizing SLP node starting from: _21 = *_20[0];

common/quant.c:151:9: note: transform load. ncopies = 1
common/quant.c:151:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_19(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:151:9: note: created vectp_dct.115_144
common/quant.c:151:9: note: add new stmt: vect__21.116_141 = MEM[(short int *)vectp_dct.114_143];
common/quant.c:151:9: note: ------>vectorizing SLP node starting from: _22 = (unsigned short) _21;

common/quant.c:151:9: note: vect_is_simple_use: operand _21
common/quant.c:151:9: note: def_stmt: _21 = *_20[0];
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: transform assignment.
common/quant.c:151:9: note: add new stmt: vect__22.117_140 = VIEW_CONVERT_EXPR<vector(8) unsigned short>(vect__21.116_141);
common/quant.c:151:9: note: ------>vectorizing SLP node starting from: _24 = _22 * pretmp_156;

common/quant.c:151:9: note: vect_is_simple_use: operand _22
common/quant.c:151:9: note: def_stmt: _22 = (unsigned short) _21;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand pretmp_156
common/quant.c:151:9: note: def_stmt: pretmp_156 = (unsigned short) i_dmf_16;
common/quant.c:151:9: note: type of def: 2.
common/quant.c:151:9: note: transform binary/unary operation.
common/quant.c:151:9: note: created new init_stmt: vect_cst_.119_139 = {pretmp_156, pretmp_156, pretmp_156, pretmp_156, pretmp_156, pretmp_156, pretmp_156, pretmp_156};
common/quant.c:151:9: note: add new stmt: vect__24.118_138 = vect__22.117_140 * vect_cst_.119_139;
common/quant.c:151:9: note: ------>vectorizing SLP node starting from: _25 = (short int) _24;

common/quant.c:151:9: note: vect_is_simple_use: operand _24
common/quant.c:151:9: note: def_stmt: _24 = _22 * pretmp_156;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: transform assignment.
common/quant.c:151:9: note: add new stmt: vect__25.120_137 = VIEW_CONVERT_EXPR<vector(8) short int>(vect__24.118_138);
common/quant.c:151:9: note: ------>vectorizing SLP node starting from: *_20[0] = _25;

common/quant.c:151:9: note: vect_is_simple_use: operand _25
common/quant.c:151:9: note: def_stmt: _25 = (short int) _24;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _30
common/quant.c:151:9: note: def_stmt: _30 = (short int) _29;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _35
common/quant.c:151:9: note: def_stmt: _35 = (short int) _34;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: vect_is_simple_use: operand _40
common/quant.c:151:9: note: def_stmt: _40 = (short int) _39;
common/quant.c:151:9: note: type of def: 3.
common/quant.c:151:9: note: transform store. ncopies = 1
common/quant.c:151:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_19(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:151:9: note: created vectp_dct.122_136
common/quant.c:151:9: note: add new stmt: MEM[(short int *)vectp_dct.121_135] = vect__25.120_137;
common/quant.c:151:9: note: vectorizing stmts using SLP.
common/quant.c:151:9: note: ------>vectorizing statement: vect__22.117_140 = VIEW_CONVERT_EXPR<vector(8) unsigned short>(vect__21.116_141);

common/quant.c:151:9: note: ------>vectorizing statement: _22 = (unsigned short) _21;

common/quant.c:151:9: note: ------>vectorizing statement: vect__24.118_138 = vect__22.117_140 * vect_cst_.119_139;

common/quant.c:151:9: note: ------>vectorizing statement: _24 = _22 * pretmp_156;

common/quant.c:151:9: note: ------>vectorizing statement: vect__25.120_137 = VIEW_CONVERT_EXPR<vector(8) short int>(vect__24.118_138);

common/quant.c:151:9: note: ------>vectorizing statement: _25 = (short int) _24;

common/quant.c:151:9: note: ------>vectorizing statement: _27 = *_20[1];

common/quant.c:151:9: note: ------>vectorizing statement: _28 = (unsigned short) _27;

common/quant.c:151:9: note: ------>vectorizing statement: _29 = _28 * pretmp_156;

common/quant.c:151:9: note: ------>vectorizing statement: _30 = (short int) _29;

common/quant.c:151:9: note: ------>vectorizing statement: _32 = *_20[2];

common/quant.c:151:9: note: ------>vectorizing statement: _33 = (unsigned short) _32;

common/quant.c:151:9: note: ------>vectorizing statement: _34 = _33 * pretmp_156;

common/quant.c:151:9: note: ------>vectorizing statement: _35 = (short int) _34;

common/quant.c:151:9: note: ------>vectorizing statement: _37 = *_20[3];

common/quant.c:151:9: note: ------>vectorizing statement: _38 = (unsigned short) _37;

common/quant.c:151:9: note: ------>vectorizing statement: _39 = _38 * pretmp_156;

common/quant.c:151:9: note: ------>vectorizing statement: _40 = (short int) _39;

common/quant.c:151:9: note: ------>vectorizing statement: MEM[(short int *)vectp_dct.121_135] = vect__25.120_137;

common/quant.c:151:9: note: ------>vectorizing statement: y_42 = y_83 + 1;

common/quant.c:151:9: note: ------>vectorizing statement: # DEBUG y => y_42

common/quant.c:151:9: note: ------>vectorizing statement: # DEBUG y => y_42

common/quant.c:151:9: note: ------>vectorizing statement: ivtmp_148 = ivtmp_5 - 1;

common/quant.c:151:9: note: ------>vectorizing statement: vectp_dct.114_142 = vectp_dct.114_143 + 16;

common/quant.c:151:9: note: ------>vectorizing statement: vectp_dct.121_134 = vectp_dct.121_135 + 16;

common/quant.c:151:9: note: ------>vectorizing statement: if (ivtmp_148 != 0)


loop at common/quant.c:153: if (ivtmp_36 < 2)

;; Scaling loop 2 with scale 0.500000, bounding iterations to 2 from guessed 3
;; guessed iterations are now 2
common/quant.c:151:9: note: LOOP VECTORIZED


Analyzing loop at common/quant.c:164
common/quant.c:164:9: note: ===== analyze_loop_nest =====
common/quant.c:164:9: note: === vect_analyze_loop_form ===
split exit edge.
common/quant.c:164:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/quant.c:164:9: note: === vect_analyze_data_refs ===
Creating dr for *_52[0]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 0
	Access function 1: {0B, +, 8}_1
Creating dr for *_52[0]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 0
	Access function 1: {0B, +, 8}_1
Creating dr for *_52[1]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 1
	Access function 1: {0B, +, 8}_1
Creating dr for *_52[1]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 1
	Access function 1: {0B, +, 8}_1
Creating dr for *_52[2]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 2
	Access function 1: {0B, +, 8}_1
Creating dr for *_52[2]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 2
	Access function 1: {0B, +, 8}_1
Creating dr for *_52[3]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 3
	Access function 1: {0B, +, 8}_1
Creating dr for *_52[3]
analyze_innermost: success.
	base_address: dct_19(D)
	offset from base address: 0
	constant offset from base address: 6
	step: 8
	aligned to: 128
	base_object: *dct_19(D)
	Access function 0: 3
	Access function 1: {0B, +, 8}_1
common/quant.c:164:9: note: got vectype for stmt: _53 = *_52[0];
vector(8) short int
common/quant.c:164:9: note: got vectype for stmt: *_52[0] = _59;
vector(8) short int
common/quant.c:164:9: note: got vectype for stmt: _61 = *_52[1];
vector(8) short int
common/quant.c:164:9: note: got vectype for stmt: *_52[1] = _66;
vector(8) short int
common/quant.c:164:9: note: got vectype for stmt: _68 = *_52[2];
vector(8) short int
common/quant.c:164:9: note: got vectype for stmt: *_52[2] = _73;
vector(8) short int
common/quant.c:164:9: note: got vectype for stmt: _75 = *_52[3];
vector(8) short int
common/quant.c:164:9: note: got vectype for stmt: *_52[3] = _80;
vector(8) short int
common/quant.c:164:9: note: === vect_analyze_scalar_cycles ===
common/quant.c:164:9: note: Analyze phi: y_85 = PHI <y_82(9), 0(7)>

common/quant.c:164:9: note: Access function of PHI: {0, +, 1}_1
common/quant.c:164:9: note: step: 1,  init: 0
common/quant.c:164:9: note: Detected induction.
common/quant.c:164:9: note: Analyze phi: .MEM_90 = PHI <.MEM_81(9), .MEM_14(D)(7)>

common/quant.c:164:9: note: Analyze phi: ivtmp_147 = PHI <ivtmp_146(9), 4(7)>

common/quant.c:164:9: note: Access function of PHI: {4, +, 4294967295}_1
common/quant.c:164:9: note: step: 4294967295,  init: 4
common/quant.c:164:9: note: Detected induction.
common/quant.c:164:9: note: === vect_pattern_recog ===
common/quant.c:164:9: note: vect_is_simple_use: operand _50
common/quant.c:164:9: note: def_stmt: _50 = (long unsigned int) y_85;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand y_85
common/quant.c:164:9: note: def_stmt: y_85 = PHI <y_82(9), 0(7)>
common/quant.c:164:9: note: type of def: 4.
common/quant.c:164:9: note: vect_is_simple_use: operand 8
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: === vect_analyze_data_ref_accesses ===
common/quant.c:164:9: note: Detected interleaving *_52[0] and *_52[1]
common/quant.c:164:9: note: Detected interleaving *_52[0] and *_52[2]
common/quant.c:164:9: note: Detected interleaving *_52[0] and *_52[3]
common/quant.c:164:9: note: Detected interleaving *_52[0] and *_52[1]
common/quant.c:164:9: note: Detected interleaving *_52[0] and *_52[2]
common/quant.c:164:9: note: Detected interleaving *_52[0] and *_52[3]
common/quant.c:164:9: note: Detected interleaving of size 4
common/quant.c:164:9: note: Detected interleaving of size 4
common/quant.c:164:9: note: === vect_mark_stmts_to_be_vectorized ===
common/quant.c:164:9: note: init: phi relevant? y_85 = PHI <y_82(9), 0(7)>
common/quant.c:164:9: note: init: phi relevant? .MEM_90 = PHI <.MEM_81(9), .MEM_14(D)(7)>
common/quant.c:164:9: note: init: phi relevant? ivtmp_147 = PHI <ivtmp_146(9), 4(7)>
common/quant.c:164:9: note: init: stmt relevant? # DEBUG y => y_85
common/quant.c:164:9: note: init: stmt relevant? _50 = (long unsigned int) y_85;
common/quant.c:164:9: note: init: stmt relevant? _51 = _50 * 8;
common/quant.c:164:9: note: init: stmt relevant? _52 = dct_19(D) + _51;
common/quant.c:164:9: note: init: stmt relevant? _53 = *_52[0];
common/quant.c:164:9: note: init: stmt relevant? _54 = (int) _53;
common/quant.c:164:9: note: init: stmt relevant? _55 = i_dmf_47 * _54;
common/quant.c:164:9: note: init: stmt relevant? _56 = f_49 + _55;
common/quant.c:164:9: note: init: stmt relevant? _58 = _56 >> pretmp_152;
common/quant.c:164:9: note: init: stmt relevant? _59 = (short int) _58;
common/quant.c:164:9: note: init: stmt relevant? *_52[0] = _59;
common/quant.c:164:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: init: stmt relevant? _61 = *_52[1];
common/quant.c:164:9: note: init: stmt relevant? _62 = (int) _61;
common/quant.c:164:9: note: init: stmt relevant? _63 = i_dmf_47 * _62;
common/quant.c:164:9: note: init: stmt relevant? _64 = f_49 + _63;
common/quant.c:164:9: note: init: stmt relevant? _65 = _64 >> pretmp_152;
common/quant.c:164:9: note: init: stmt relevant? _66 = (short int) _65;
common/quant.c:164:9: note: init: stmt relevant? *_52[1] = _66;
common/quant.c:164:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: init: stmt relevant? _68 = *_52[2];
common/quant.c:164:9: note: init: stmt relevant? _69 = (int) _68;
common/quant.c:164:9: note: init: stmt relevant? _70 = i_dmf_47 * _69;
common/quant.c:164:9: note: init: stmt relevant? _71 = f_49 + _70;
common/quant.c:164:9: note: init: stmt relevant? _72 = _71 >> pretmp_152;
common/quant.c:164:9: note: init: stmt relevant? _73 = (short int) _72;
common/quant.c:164:9: note: init: stmt relevant? *_52[2] = _73;
common/quant.c:164:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: init: stmt relevant? _75 = *_52[3];
common/quant.c:164:9: note: init: stmt relevant? _76 = (int) _75;
common/quant.c:164:9: note: init: stmt relevant? _77 = i_dmf_47 * _76;
common/quant.c:164:9: note: init: stmt relevant? _78 = f_49 + _77;
common/quant.c:164:9: note: init: stmt relevant? _79 = _78 >> pretmp_152;
common/quant.c:164:9: note: init: stmt relevant? _80 = (short int) _79;
common/quant.c:164:9: note: init: stmt relevant? *_52[3] = _80;
common/quant.c:164:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: init: stmt relevant? y_82 = y_85 + 1;
common/quant.c:164:9: note: init: stmt relevant? # DEBUG y => y_82
common/quant.c:164:9: note: init: stmt relevant? # DEBUG y => y_82
common/quant.c:164:9: note: init: stmt relevant? ivtmp_146 = ivtmp_147 - 1;
common/quant.c:164:9: note: init: stmt relevant? if (ivtmp_146 != 0)
common/quant.c:164:9: note: worklist: examine stmt: *_52[3] = _80;
common/quant.c:164:9: note: vect_is_simple_use: operand _80
common/quant.c:164:9: note: def_stmt: _80 = (short int) _79;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _80 = (short int) _79;
common/quant.c:164:9: note: vect_is_simple_use: operand _79
common/quant.c:164:9: note: def_stmt: _79 = _78 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _79 = _78 >> pretmp_152;
common/quant.c:164:9: note: vect_is_simple_use: operand _78
common/quant.c:164:9: note: def_stmt: _78 = f_49 + _77;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: worklist: examine stmt: _78 = f_49 + _77;
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: vect_is_simple_use: operand _77
common/quant.c:164:9: note: def_stmt: _77 = i_dmf_47 * _76;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _77 = i_dmf_47 * _76;
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: vect_is_simple_use: operand _76
common/quant.c:164:9: note: def_stmt: _76 = (int) _75;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _76 = (int) _75;
common/quant.c:164:9: note: vect_is_simple_use: operand _75
common/quant.c:164:9: note: def_stmt: _75 = *_52[3];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _75 = *_52[3];
common/quant.c:164:9: note: worklist: examine stmt: *_52[2] = _73;
common/quant.c:164:9: note: vect_is_simple_use: operand _73
common/quant.c:164:9: note: def_stmt: _73 = (short int) _72;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _73 = (short int) _72;
common/quant.c:164:9: note: vect_is_simple_use: operand _72
common/quant.c:164:9: note: def_stmt: _72 = _71 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _72 = _71 >> pretmp_152;
common/quant.c:164:9: note: vect_is_simple_use: operand _71
common/quant.c:164:9: note: def_stmt: _71 = f_49 + _70;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: worklist: examine stmt: _71 = f_49 + _70;
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: vect_is_simple_use: operand _70
common/quant.c:164:9: note: def_stmt: _70 = i_dmf_47 * _69;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _70 = i_dmf_47 * _69;
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: vect_is_simple_use: operand _69
common/quant.c:164:9: note: def_stmt: _69 = (int) _68;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _69 = (int) _68;
common/quant.c:164:9: note: vect_is_simple_use: operand _68
common/quant.c:164:9: note: def_stmt: _68 = *_52[2];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _68 = *_52[2];
common/quant.c:164:9: note: worklist: examine stmt: *_52[1] = _66;
common/quant.c:164:9: note: vect_is_simple_use: operand _66
common/quant.c:164:9: note: def_stmt: _66 = (short int) _65;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _66 = (short int) _65;
common/quant.c:164:9: note: vect_is_simple_use: operand _65
common/quant.c:164:9: note: def_stmt: _65 = _64 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _65 = _64 >> pretmp_152;
common/quant.c:164:9: note: vect_is_simple_use: operand _64
common/quant.c:164:9: note: def_stmt: _64 = f_49 + _63;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: worklist: examine stmt: _64 = f_49 + _63;
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: vect_is_simple_use: operand _63
common/quant.c:164:9: note: def_stmt: _63 = i_dmf_47 * _62;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _63 = i_dmf_47 * _62;
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: vect_is_simple_use: operand _62
common/quant.c:164:9: note: def_stmt: _62 = (int) _61;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _62 = (int) _61;
common/quant.c:164:9: note: vect_is_simple_use: operand _61
common/quant.c:164:9: note: def_stmt: _61 = *_52[1];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _61 = *_52[1];
common/quant.c:164:9: note: worklist: examine stmt: *_52[0] = _59;
common/quant.c:164:9: note: vect_is_simple_use: operand _59
common/quant.c:164:9: note: def_stmt: _59 = (short int) _58;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _59 = (short int) _58;
common/quant.c:164:9: note: vect_is_simple_use: operand _58
common/quant.c:164:9: note: def_stmt: _58 = _56 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _58 = _56 >> pretmp_152;
common/quant.c:164:9: note: vect_is_simple_use: operand _56
common/quant.c:164:9: note: def_stmt: _56 = f_49 + _55;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: worklist: examine stmt: _56 = f_49 + _55;
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: vect_is_simple_use: operand _55
common/quant.c:164:9: note: def_stmt: _55 = i_dmf_47 * _54;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _55 = i_dmf_47 * _54;
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: def_stmt is out of loop.
common/quant.c:164:9: note: vect_is_simple_use: operand _54
common/quant.c:164:9: note: def_stmt: _54 = (int) _53;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _54 = (int) _53;
common/quant.c:164:9: note: vect_is_simple_use: operand _53
common/quant.c:164:9: note: def_stmt: _53 = *_52[0];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: mark relevant 4, live 0.
common/quant.c:164:9: note: worklist: examine stmt: _53 = *_52[0];
common/quant.c:164:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _53 = *_52[0];
  stmt_b: *_52[0] = _59;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _53 = *_52[0];
  stmt_b: _61 = *_52[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _53 = *_52[0];
  stmt_b: *_52[1] = _66;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _53 = *_52[0];
  stmt_b: _68 = *_52[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _53 = *_52[0];
  stmt_b: *_52[2] = _73;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _53 = *_52[0];
  stmt_b: _75 = *_52[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _53 = *_52[0];
  stmt_b: *_52[3] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[0] = _59;
  stmt_b: _61 = *_52[1];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[0] = _59;
  stmt_b: *_52[1] = _66;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 1)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[0] = _59;
  stmt_b: _68 = *_52[2];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[0] = _59;
  stmt_b: *_52[2] = _73;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[0] = _59;
  stmt_b: _75 = *_52[3];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[0] = _59;
  stmt_b: *_52[3] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _61 = *_52[1];
  stmt_b: *_52[1] = _66;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _61 = *_52[1];
  stmt_b: _68 = *_52[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _61 = *_52[1];
  stmt_b: *_52[2] = _73;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _61 = *_52[1];
  stmt_b: _75 = *_52[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _61 = *_52[1];
  stmt_b: *_52[3] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[1] = _66;
  stmt_b: _68 = *_52[2];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[1] = _66;
  stmt_b: *_52[2] = _73;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 2)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[1] = _66;
  stmt_b: _75 = *_52[3];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[1] = _66;
  stmt_b: *_52[3] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _68 = *_52[2];
  stmt_b: *_52[2] = _73;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _68 = *_52[2];
  stmt_b: _75 = *_52[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _68 = *_52[2];
  stmt_b: *_52[3] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[2] = _73;
  stmt_b: _75 = *_52[3];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: *_52[2] = _73;
  stmt_b: *_52[3] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 3)
(analyze_ziv_subscript 
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _75 = *_52[3];
  stmt_b: *_52[3] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _53 = *_52[0];
  stmt_b: _53 = *_52[0];
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_52[0] = _59;
  stmt_b: *_52[0] = _59;
(analyze_overlapping_iterations 
  (chrec_a = 0)
  (chrec_b = 0)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _61 = *_52[1];
  stmt_b: _61 = *_52[1];
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_52[1] = _66;
  stmt_b: *_52[1] = _66;
(analyze_overlapping_iterations 
  (chrec_a = 1)
  (chrec_b = 1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _68 = *_52[2];
  stmt_b: _68 = *_52[2];
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_52[2] = _73;
  stmt_b: *_52[2] = _73;
(analyze_overlapping_iterations 
  (chrec_a = 2)
  (chrec_b = 2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _75 = *_52[3];
  stmt_b: _75 = *_52[3];
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_52[3] = _80;
  stmt_b: *_52[3] = _80;
(analyze_overlapping_iterations 
  (chrec_a = 3)
  (chrec_b = 3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_1)
  (chrec_b = {0B, +, 8}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/quant.c:164:9: note: dependence distance  = 0.
common/quant.c:164:9: note: dependence distance == 0 between *_52[0] and *_52[0]
common/quant.c:164:9: note: dependence distance  = 0.
common/quant.c:164:9: note: dependence distance == 0 between *_52[1] and *_52[1]
common/quant.c:164:9: note: dependence distance  = 0.
common/quant.c:164:9: note: dependence distance == 0 between *_52[2] and *_52[2]
common/quant.c:164:9: note: dependence distance  = 0.
common/quant.c:164:9: note: dependence distance == 0 between *_52[3] and *_52[3]
common/quant.c:164:9: note: === vect_determine_vectorization_factor ===
common/quant.c:164:9: note: ==> examining phi: y_85 = PHI <y_82(9), 0(7)>

common/quant.c:164:9: note: ==> examining phi: .MEM_90 = PHI <.MEM_81(9), .MEM_14(D)(7)>

common/quant.c:164:9: note: ==> examining phi: ivtmp_147 = PHI <ivtmp_146(9), 4(7)>

common/quant.c:164:9: note: ==> examining statement: # DEBUG y => y_85

common/quant.c:164:9: note: skip.
common/quant.c:164:9: note: ==> examining statement: _50 = (long unsigned int) y_85;

common/quant.c:164:9: note: skip.
common/quant.c:164:9: note: ==> examining statement: _51 = _50 * 8;

common/quant.c:164:9: note: skip.
common/quant.c:164:9: note: ==> examining statement: _52 = dct_19(D) + _51;

common/quant.c:164:9: note: skip.
common/quant.c:164:9: note: ==> examining statement: _53 = *_52[0];

common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: _54 = (int) _53;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: _55 = i_dmf_47 * _54;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _56 = f_49 + _55;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _58 = _56 >> pretmp_152;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _59 = (short int) _58;

common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: *_52[0] = _59;

common/quant.c:164:9: note: get vectype for scalar type:  int16_t
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: _61 = *_52[1];

common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: _62 = (int) _61;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: _63 = i_dmf_47 * _62;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _64 = f_49 + _63;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _65 = _64 >> pretmp_152;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _66 = (short int) _65;

common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: *_52[1] = _66;

common/quant.c:164:9: note: get vectype for scalar type:  int16_t
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: _68 = *_52[2];

common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: _69 = (int) _68;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: _70 = i_dmf_47 * _69;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _71 = f_49 + _70;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _72 = _71 >> pretmp_152;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _73 = (short int) _72;

common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: *_52[2] = _73;

common/quant.c:164:9: note: get vectype for scalar type:  int16_t
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: _75 = *_52[3];

common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: _76 = (int) _75;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: _77 = i_dmf_47 * _76;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _78 = f_49 + _77;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _79 = _78 >> pretmp_152;

common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: get vectype for scalar type:  int
common/quant.c:164:9: note: vectype: vector(4) int
common/quant.c:164:9: note: nunits = 4
common/quant.c:164:9: note: ==> examining statement: _80 = (short int) _79;

common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: get vectype for scalar type:  short int
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: *_52[3] = _80;

common/quant.c:164:9: note: get vectype for scalar type:  int16_t
common/quant.c:164:9: note: vectype: vector(8) short int
common/quant.c:164:9: note: nunits = 8
common/quant.c:164:9: note: ==> examining statement: y_82 = y_85 + 1;

common/quant.c:164:9: note: skip.
common/quant.c:164:9: note: ==> examining statement: # DEBUG y => y_82

common/quant.c:164:9: note: skip.
common/quant.c:164:9: note: ==> examining statement: # DEBUG y => y_82

common/quant.c:164:9: note: skip.
common/quant.c:164:9: note: ==> examining statement: ivtmp_146 = ivtmp_147 - 1;

common/quant.c:164:9: note: skip.
common/quant.c:164:9: note: ==> examining statement: if (ivtmp_146 != 0)

common/quant.c:164:9: note: skip.
common/quant.c:164:9: note: vectorization factor = 8
common/quant.c:164:9: note: === vect_analyze_data_refs_alignment ===
common/quant.c:164:9: note: dependence distance  = 0.
common/quant.c:164:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_52[0] and *_52[0]
common/quant.c:164:9: note: dependence distance  = 0.
common/quant.c:164:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_52[1] and *_52[1]
common/quant.c:164:9: note: dependence distance  = 0.
common/quant.c:164:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_52[2] and *_52[2]
common/quant.c:164:9: note: dependence distance  = 0.
common/quant.c:164:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_52[3] and *_52[3]
common/quant.c:164:9: note: vect_compute_data_ref_alignment:
common/quant.c:164:9: note: can't force alignment of ref: *_52[0]
common/quant.c:164:9: note: vect_compute_data_ref_alignment:
common/quant.c:164:9: note: can't force alignment of ref: *_52[0]
common/quant.c:164:9: note: vect_compute_data_ref_alignment:
common/quant.c:164:9: note: can't force alignment of ref: *_52[1]
common/quant.c:164:9: note: vect_compute_data_ref_alignment:
common/quant.c:164:9: note: can't force alignment of ref: *_52[1]
common/quant.c:164:9: note: vect_compute_data_ref_alignment:
common/quant.c:164:9: note: can't force alignment of ref: *_52[2]
common/quant.c:164:9: note: vect_compute_data_ref_alignment:
common/quant.c:164:9: note: can't force alignment of ref: *_52[2]
common/quant.c:164:9: note: vect_compute_data_ref_alignment:
common/quant.c:164:9: note: can't force alignment of ref: *_52[3]
common/quant.c:164:9: note: vect_compute_data_ref_alignment:
common/quant.c:164:9: note: can't force alignment of ref: *_52[3]
common/quant.c:164:9: note: === vect_prune_runtime_alias_test_list ===
common/quant.c:164:9: note: === vect_enhance_data_refs_alignment ===
common/quant.c:164:9: note: vector alignment may not be reachable
common/quant.c:164:9: note: vect_can_advance_ivs_p:
common/quant.c:164:9: note: Analyze phi: y_85 = PHI <y_82(9), 0(7)>

common/quant.c:164:9: note: Analyze phi: .MEM_90 = PHI <.MEM_81(9), .MEM_14(D)(7)>

common/quant.c:164:9: note: virtual phi. skip.
common/quant.c:164:9: note: Analyze phi: ivtmp_147 = PHI <ivtmp_146(9), 4(7)>

common/quant.c:164:9: note: Vectorizing an unaligned access.
common/quant.c:164:9: note: Vectorizing an unaligned access.
common/quant.c:164:9: note: === vect_analyze_slp ===
common/quant.c:164:9: note: Build SLP for *_52[0] = _59;

common/quant.c:164:9: note: Build SLP for *_52[1] = _66;

common/quant.c:164:9: note: Build SLP for *_52[2] = _73;

common/quant.c:164:9: note: Build SLP for *_52[3] = _80;

common/quant.c:164:9: note: vect_is_simple_use: operand _59
common/quant.c:164:9: note: def_stmt: _59 = (short int) _58;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _66
common/quant.c:164:9: note: def_stmt: _66 = (short int) _65;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _73
common/quant.c:164:9: note: def_stmt: _73 = (short int) _72;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _80
common/quant.c:164:9: note: def_stmt: _80 = (short int) _79;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: Build SLP for _59 = (short int) _58;

common/quant.c:164:9: note: Build SLP for _66 = (short int) _65;

common/quant.c:164:9: note: Build SLP for _73 = (short int) _72;

common/quant.c:164:9: note: Build SLP for _80 = (short int) _79;

common/quant.c:164:9: note: vect_is_simple_use: operand _58
common/quant.c:164:9: note: def_stmt: _58 = _56 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _65
common/quant.c:164:9: note: def_stmt: _65 = _64 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _72
common/quant.c:164:9: note: def_stmt: _72 = _71 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _79
common/quant.c:164:9: note: def_stmt: _79 = _78 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: Build SLP for _58 = _56 >> pretmp_152;

common/quant.c:164:9: note: Build SLP for _65 = _64 >> pretmp_152;

common/quant.c:164:9: note: Build SLP for _72 = _71 >> pretmp_152;

common/quant.c:164:9: note: Build SLP for _79 = _78 >> pretmp_152;

common/quant.c:164:9: note: vect_is_simple_use: operand _56
common/quant.c:164:9: note: def_stmt: _56 = f_49 + _55;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _64
common/quant.c:164:9: note: def_stmt: _64 = f_49 + _63;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _71
common/quant.c:164:9: note: def_stmt: _71 = f_49 + _70;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _78
common/quant.c:164:9: note: def_stmt: _78 = f_49 + _77;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: Build SLP for _56 = f_49 + _55;

common/quant.c:164:9: note: Build SLP for _64 = f_49 + _63;

common/quant.c:164:9: note: Build SLP for _71 = f_49 + _70;

common/quant.c:164:9: note: Build SLP for _78 = f_49 + _77;

common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _55
common/quant.c:164:9: note: def_stmt: _55 = i_dmf_47 * _54;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _63
common/quant.c:164:9: note: def_stmt: _63 = i_dmf_47 * _62;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _70
common/quant.c:164:9: note: def_stmt: _70 = i_dmf_47 * _69;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _77
common/quant.c:164:9: note: def_stmt: _77 = i_dmf_47 * _76;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: Build SLP for _55 = i_dmf_47 * _54;

common/quant.c:164:9: note: Build SLP for _63 = i_dmf_47 * _62;

common/quant.c:164:9: note: Build SLP for _70 = i_dmf_47 * _69;

common/quant.c:164:9: note: Build SLP for _77 = i_dmf_47 * _76;

common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _54
common/quant.c:164:9: note: def_stmt: _54 = (int) _53;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _62
common/quant.c:164:9: note: def_stmt: _62 = (int) _61;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _69
common/quant.c:164:9: note: def_stmt: _69 = (int) _68;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _76
common/quant.c:164:9: note: def_stmt: _76 = (int) _75;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: Build SLP for _54 = (int) _53;

common/quant.c:164:9: note: Build SLP for _62 = (int) _61;

common/quant.c:164:9: note: Build SLP for _69 = (int) _68;

common/quant.c:164:9: note: Build SLP for _76 = (int) _75;

common/quant.c:164:9: note: vect_is_simple_use: operand _53
common/quant.c:164:9: note: def_stmt: _53 = *_52[0];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _61
common/quant.c:164:9: note: def_stmt: _61 = *_52[1];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _68
common/quant.c:164:9: note: def_stmt: _68 = *_52[2];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _75
common/quant.c:164:9: note: def_stmt: _75 = *_52[3];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: Build SLP for _53 = *_52[0];

common/quant.c:164:9: note: Build SLP for _61 = *_52[1];

common/quant.c:164:9: note: Build SLP for _68 = *_52[2];

common/quant.c:164:9: note: Build SLP for _75 = *_52[3];

common/quant.c:164:9: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:164:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:164:9: note: vect_is_simple_use: operand *_52[0]
common/quant.c:164:9: note: not ssa-name.
common/quant.c:164:9: note: vect_is_simple_use: operand _53
common/quant.c:164:9: note: def_stmt: _53 = *_52[0];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _54
common/quant.c:164:9: note: def_stmt: _54 = (int) _53;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _55
common/quant.c:164:9: note: def_stmt: _55 = i_dmf_47 * _54;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _56
common/quant.c:164:9: note: def_stmt: _56 = f_49 + _55;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _58
common/quant.c:164:9: note: def_stmt: _58 = _56 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_model_store_cost: unaligned supported by hardware.
common/quant.c:164:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:164:9: note: vect_is_simple_use: operand _59
common/quant.c:164:9: note: def_stmt: _59 = (short int) _58;
common/quant.c:164:9: note: type of def: 3.
node 
	stmt 0 *_52[0] = _59;

	stmt 1 *_52[1] = _66;

	stmt 2 *_52[2] = _73;

	stmt 3 *_52[3] = _80;

node 
	stmt 0 _59 = (short int) _58;

	stmt 1 _66 = (short int) _65;

	stmt 2 _73 = (short int) _72;

	stmt 3 _80 = (short int) _79;

node 
	stmt 0 _58 = _56 >> pretmp_152;

	stmt 1 _65 = _64 >> pretmp_152;

	stmt 2 _72 = _71 >> pretmp_152;

	stmt 3 _79 = _78 >> pretmp_152;

node 
	stmt 0 _56 = f_49 + _55;

	stmt 1 _64 = f_49 + _63;

	stmt 2 _71 = f_49 + _70;

	stmt 3 _78 = f_49 + _77;

node 
	stmt 0 _55 = i_dmf_47 * _54;

	stmt 1 _63 = i_dmf_47 * _62;

	stmt 2 _70 = i_dmf_47 * _69;

	stmt 3 _77 = i_dmf_47 * _76;

node 
	stmt 0 _54 = (int) _53;

	stmt 1 _62 = (int) _61;

	stmt 2 _69 = (int) _68;

	stmt 3 _76 = (int) _75;

node 
	stmt 0 _53 = *_52[0];

	stmt 1 _61 = *_52[1];

	stmt 2 _68 = *_52[2];

	stmt 3 _75 = *_52[3];

common/quant.c:164:9: note: === vect_make_slp_decision ===
common/quant.c:164:9: note: Decided to SLP 1 instances. Unrolling factor 2
common/quant.c:164:9: note: === vect_detect_hybrid_slp ===
common/quant.c:164:9: note: === vect_analyze_loop_operations ===
common/quant.c:164:9: note: Updating vectorization factor to 2
common/quant.c:164:9: note: examining phi: y_85 = PHI <y_82(9), 0(7)>

common/quant.c:164:9: note: examining phi: .MEM_90 = PHI <.MEM_81(9), .MEM_14(D)(7)>

common/quant.c:164:9: note: examining phi: ivtmp_147 = PHI <ivtmp_146(9), 4(7)>

common/quant.c:164:9: note: ==> examining statement: # DEBUG y => y_85
common/quant.c:164:9: note: irrelevant.
common/quant.c:164:9: note: ==> examining statement: _50 = (long unsigned int) y_85;
common/quant.c:164:9: note: irrelevant.
common/quant.c:164:9: note: ==> examining statement: _51 = _50 * 8;
common/quant.c:164:9: note: irrelevant.
common/quant.c:164:9: note: ==> examining statement: _52 = dct_19(D) + _51;
common/quant.c:164:9: note: irrelevant.
common/quant.c:164:9: note: ==> examining statement: _53 = *_52[0];
common/quant.c:164:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:164:9: note: vect_is_simple_use: operand *_52[0]
common/quant.c:164:9: note: not ssa-name.
common/quant.c:164:9: note: use not simple.
common/quant.c:164:9: note: ==> examining statement: _54 = (int) _53;
common/quant.c:164:9: note: vect_is_simple_use: operand _53
common/quant.c:164:9: note: def_stmt: _53 = *_52[0];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_conversion ===
common/quant.c:164:9: note: ==> examining statement: _55 = i_dmf_47 * _54;
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _54
common/quant.c:164:9: note: def_stmt: _54 = (int) _53;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_operation ===
common/quant.c:164:9: note: ==> examining statement: _56 = f_49 + _55;
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _55
common/quant.c:164:9: note: def_stmt: _55 = i_dmf_47 * _54;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_operation ===
common/quant.c:164:9: note: ==> examining statement: _58 = _56 >> pretmp_152;
common/quant.c:164:9: note: vect_is_simple_use: operand _56
common/quant.c:164:9: note: def_stmt: _56 = f_49 + _55;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vector/scalar shift/rotate found.
common/quant.c:164:9: note: === vectorizable_shift ===
common/quant.c:164:9: note: ==> examining statement: _59 = (short int) _58;
common/quant.c:164:9: note: vect_is_simple_use: operand _58
common/quant.c:164:9: note: def_stmt: _58 = _56 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_conversion ===
common/quant.c:164:9: note: ==> examining statement: *_52[0] = _59;
common/quant.c:164:9: note: vect_is_simple_use: operand _59
common/quant.c:164:9: note: def_stmt: _59 = (short int) _58;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _66
common/quant.c:164:9: note: def_stmt: _66 = (short int) _65;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _73
common/quant.c:164:9: note: def_stmt: _73 = (short int) _72;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _80
common/quant.c:164:9: note: def_stmt: _80 = (short int) _79;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: ==> examining statement: _61 = *_52[1];
common/quant.c:164:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:164:9: note: vect_is_simple_use: operand *_52[1]
common/quant.c:164:9: note: not ssa-name.
common/quant.c:164:9: note: use not simple.
common/quant.c:164:9: note: ==> examining statement: _62 = (int) _61;
common/quant.c:164:9: note: vect_is_simple_use: operand _61
common/quant.c:164:9: note: def_stmt: _61 = *_52[1];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_conversion ===
common/quant.c:164:9: note: ==> examining statement: _63 = i_dmf_47 * _62;
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _62
common/quant.c:164:9: note: def_stmt: _62 = (int) _61;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_operation ===
common/quant.c:164:9: note: ==> examining statement: _64 = f_49 + _63;
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _63
common/quant.c:164:9: note: def_stmt: _63 = i_dmf_47 * _62;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_operation ===
common/quant.c:164:9: note: ==> examining statement: _65 = _64 >> pretmp_152;
common/quant.c:164:9: note: vect_is_simple_use: operand _64
common/quant.c:164:9: note: def_stmt: _64 = f_49 + _63;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vector/scalar shift/rotate found.
common/quant.c:164:9: note: === vectorizable_shift ===
common/quant.c:164:9: note: ==> examining statement: _66 = (short int) _65;
common/quant.c:164:9: note: vect_is_simple_use: operand _65
common/quant.c:164:9: note: def_stmt: _65 = _64 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_conversion ===
common/quant.c:164:9: note: ==> examining statement: *_52[1] = _66;
common/quant.c:164:9: note: vect_is_simple_use: operand _66
common/quant.c:164:9: note: def_stmt: _66 = (short int) _65;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: ==> examining statement: _68 = *_52[2];
common/quant.c:164:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:164:9: note: vect_is_simple_use: operand *_52[2]
common/quant.c:164:9: note: not ssa-name.
common/quant.c:164:9: note: use not simple.
common/quant.c:164:9: note: ==> examining statement: _69 = (int) _68;
common/quant.c:164:9: note: vect_is_simple_use: operand _68
common/quant.c:164:9: note: def_stmt: _68 = *_52[2];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_conversion ===
common/quant.c:164:9: note: ==> examining statement: _70 = i_dmf_47 * _69;
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _69
common/quant.c:164:9: note: def_stmt: _69 = (int) _68;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_operation ===
common/quant.c:164:9: note: ==> examining statement: _71 = f_49 + _70;
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _70
common/quant.c:164:9: note: def_stmt: _70 = i_dmf_47 * _69;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_operation ===
common/quant.c:164:9: note: ==> examining statement: _72 = _71 >> pretmp_152;
common/quant.c:164:9: note: vect_is_simple_use: operand _71
common/quant.c:164:9: note: def_stmt: _71 = f_49 + _70;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vector/scalar shift/rotate found.
common/quant.c:164:9: note: === vectorizable_shift ===
common/quant.c:164:9: note: ==> examining statement: _73 = (short int) _72;
common/quant.c:164:9: note: vect_is_simple_use: operand _72
common/quant.c:164:9: note: def_stmt: _72 = _71 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_conversion ===
common/quant.c:164:9: note: ==> examining statement: *_52[2] = _73;
common/quant.c:164:9: note: vect_is_simple_use: operand _73
common/quant.c:164:9: note: def_stmt: _73 = (short int) _72;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: ==> examining statement: _75 = *_52[3];
common/quant.c:164:9: note: num. args = 4 (not unary/binary/ternary op).
common/quant.c:164:9: note: vect_is_simple_use: operand *_52[3]
common/quant.c:164:9: note: not ssa-name.
common/quant.c:164:9: note: use not simple.
common/quant.c:164:9: note: ==> examining statement: _76 = (int) _75;
common/quant.c:164:9: note: vect_is_simple_use: operand _75
common/quant.c:164:9: note: def_stmt: _75 = *_52[3];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_conversion ===
common/quant.c:164:9: note: ==> examining statement: _77 = i_dmf_47 * _76;
common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _76
common/quant.c:164:9: note: def_stmt: _76 = (int) _75;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_operation ===
common/quant.c:164:9: note: ==> examining statement: _78 = f_49 + _77;
common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _77
common/quant.c:164:9: note: def_stmt: _77 = i_dmf_47 * _76;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_operation ===
common/quant.c:164:9: note: ==> examining statement: _79 = _78 >> pretmp_152;
common/quant.c:164:9: note: vect_is_simple_use: operand _78
common/quant.c:164:9: note: def_stmt: _78 = f_49 + _77;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vector/scalar shift/rotate found.
common/quant.c:164:9: note: === vectorizable_shift ===
common/quant.c:164:9: note: ==> examining statement: _80 = (short int) _79;
common/quant.c:164:9: note: vect_is_simple_use: operand _79
common/quant.c:164:9: note: def_stmt: _79 = _78 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: === vectorizable_conversion ===
common/quant.c:164:9: note: ==> examining statement: *_52[3] = _80;
common/quant.c:164:9: note: vect_is_simple_use: operand _80
common/quant.c:164:9: note: def_stmt: _80 = (short int) _79;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: ==> examining statement: y_82 = y_85 + 1;
common/quant.c:164:9: note: irrelevant.
common/quant.c:164:9: note: ==> examining statement: # DEBUG y => y_82
common/quant.c:164:9: note: irrelevant.
common/quant.c:164:9: note: ==> examining statement: # DEBUG y => y_82
common/quant.c:164:9: note: irrelevant.
common/quant.c:164:9: note: ==> examining statement: ivtmp_146 = ivtmp_147 - 1;
common/quant.c:164:9: note: irrelevant.
common/quant.c:164:9: note: ==> examining statement: if (ivtmp_146 != 0)
common/quant.c:164:9: note: irrelevant.
common/quant.c:164:9: note: vectorization_factor = 2, niters = 4
common/quant.c:164:9: note: === vect_update_slp_costs_according_to_vf ===
common/quant.c:164:9: note: Cost model analysis: 
  Vector inside of loop cost: 9
  Vector prologue cost: 3
  Vector epilogue cost: 0
  Scalar iteration cost: 28
  Scalar outside cost: 0
  Vector outside cost: 3
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
common/quant.c:164:9: note:   Runtime profitability threshold = 1
common/quant.c:164:9: note:   Static estimate profitability threshold = 1
common/quant.c:164:9: note: loop vectorized
common/quant.c:164:9: note: === vec_transform_loop ===
common/quant.c:164:9: note: ------>vectorizing phi: y_85 = PHI <y_82(9), 0(13)>

common/quant.c:164:9: note: ------>vectorizing phi: .MEM_90 = PHI <.MEM_81(9), .MEM_14(D)(13)>

common/quant.c:164:9: note: ------>vectorizing phi: ivtmp_147 = PHI <ivtmp_146(9), 4(13)>

common/quant.c:164:9: note: ------>vectorizing statement: # DEBUG y => y_85

common/quant.c:164:9: note: ------>vectorizing statement: _50 = (long unsigned int) y_85;

common/quant.c:164:9: note: ------>vectorizing statement: _51 = _50 * 8;

common/quant.c:164:9: note: ------>vectorizing statement: _52 = dct_19(D) + _51;

common/quant.c:164:9: note: ------>vectorizing statement: _53 = *_52[0];

common/quant.c:164:9: note: === scheduling SLP instances ===
common/quant.c:164:9: note: ------>vectorizing SLP node starting from: _53 = *_52[0];

common/quant.c:164:9: note: transform load. ncopies = 1
common/quant.c:164:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_19(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:164:9: note: created vectp_dct.124_26
common/quant.c:164:9: note: add new stmt: vect__53.125_130 = MEM[(short int *)vectp_dct.123_132];
common/quant.c:164:9: note: ------>vectorizing SLP node starting from: _54 = (int) _53;

common/quant.c:164:9: note: vect_is_simple_use: operand _53
common/quant.c:164:9: note: def_stmt: _53 = *_52[0];
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: transform conversion. ncopies = 1.
common/quant.c:164:9: note: add new stmt: vect__54.126_129 = [vec_unpack_lo_expr] vect__53.125_130;
common/quant.c:164:9: note: add new stmt: vect__54.126_128 = [vec_unpack_hi_expr] vect__53.125_130;
common/quant.c:164:9: note: ------>vectorizing SLP node starting from: _55 = i_dmf_47 * _54;

common/quant.c:164:9: note: vect_is_simple_use: operand i_dmf_47
common/quant.c:164:9: note: def_stmt: i_dmf_47 = *_46[0][0];
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _54
common/quant.c:164:9: note: def_stmt: _54 = (int) _53;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: transform binary/unary operation.
common/quant.c:164:9: note: created new init_stmt: vect_cst_.128_127 = {i_dmf_47, i_dmf_47, i_dmf_47, i_dmf_47};
common/quant.c:164:9: note: add new stmt: vect__55.127_126 = vect_cst_.128_127 * vect__54.126_129;
common/quant.c:164:9: note: add new stmt: vect__55.127_125 = vect_cst_.128_127 * vect__54.126_128;
common/quant.c:164:9: note: ------>vectorizing SLP node starting from: _56 = f_49 + _55;

common/quant.c:164:9: note: vect_is_simple_use: operand f_49
common/quant.c:164:9: note: def_stmt: f_49 = 1 << _48;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vect_is_simple_use: operand _55
common/quant.c:164:9: note: def_stmt: _55 = i_dmf_47 * _54;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: transform binary/unary operation.
common/quant.c:164:9: note: created new init_stmt: vect_cst_.130_124 = {f_49, f_49, f_49, f_49};
common/quant.c:164:9: note: add new stmt: vect__56.129_123 = vect_cst_.130_124 + vect__55.127_126;
common/quant.c:164:9: note: add new stmt: vect__56.129_122 = vect_cst_.130_124 + vect__55.127_125;
common/quant.c:164:9: note: ------>vectorizing SLP node starting from: _58 = _56 >> pretmp_152;

common/quant.c:164:9: note: vect_is_simple_use: operand _56
common/quant.c:164:9: note: def_stmt: _56 = f_49 + _55;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand pretmp_152
common/quant.c:164:9: note: def_stmt: pretmp_152 = -i_qbits_8;
common/quant.c:164:9: note: type of def: 2.
common/quant.c:164:9: note: vector/scalar shift/rotate found.
common/quant.c:164:9: note: transform binary/unary operation.
common/quant.c:164:9: note: operand 1 using scalar mode.
common/quant.c:164:9: note: add new stmt: vect__58.131_121 = vect__56.129_123 >> pretmp_152;
common/quant.c:164:9: note: add new stmt: vect__58.131_120 = vect__56.129_122 >> pretmp_152;
common/quant.c:164:9: note: ------>vectorizing SLP node starting from: _59 = (short int) _58;

common/quant.c:164:9: note: vect_is_simple_use: operand _58
common/quant.c:164:9: note: def_stmt: _58 = _56 >> pretmp_152;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: transform conversion. ncopies = 1.
common/quant.c:164:9: note: add new stmt: vect__59.132_119 = VEC_PACK_TRUNC_EXPR <vect__58.131_121, vect__58.131_120>;
common/quant.c:164:9: note: ------>vectorizing SLP node starting from: *_52[0] = _59;

common/quant.c:164:9: note: vect_is_simple_use: operand _59
common/quant.c:164:9: note: def_stmt: _59 = (short int) _58;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _66
common/quant.c:164:9: note: def_stmt: _66 = (short int) _65;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _73
common/quant.c:164:9: note: def_stmt: _73 = (short int) _72;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: vect_is_simple_use: operand _80
common/quant.c:164:9: note: def_stmt: _80 = (short int) _79;
common/quant.c:164:9: note: type of def: 3.
common/quant.c:164:9: note: transform store. ncopies = 1
common/quant.c:164:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing an array ref: *dct_19(D)
Applying pattern match.pd:49, generic-match.c:4015
common/quant.c:164:9: note: created vectp_dct.134_118
common/quant.c:164:9: note: add new stmt: MEM[(short int *)vectp_dct.133_117] = vect__59.132_119;
common/quant.c:164:9: note: vectorizing stmts using SLP.
common/quant.c:164:9: note: ------>vectorizing statement: vect__54.126_129 = [vec_unpack_lo_expr] vect__53.125_130;

common/quant.c:164:9: note: ------>vectorizing statement: vect__54.126_128 = [vec_unpack_hi_expr] vect__53.125_130;

common/quant.c:164:9: note: ------>vectorizing statement: _54 = (int) _53;

common/quant.c:164:9: note: ------>vectorizing statement: vect__55.127_126 = vect_cst_.128_127 * vect__54.126_129;

common/quant.c:164:9: note: ------>vectorizing statement: vect__55.127_125 = vect_cst_.128_127 * vect__54.126_128;

common/quant.c:164:9: note: ------>vectorizing statement: _55 = i_dmf_47 * _54;

common/quant.c:164:9: note: ------>vectorizing statement: vect__56.129_123 = vect_cst_.130_124 + vect__55.127_126;

common/quant.c:164:9: note: ------>vectorizing statement: vect__56.129_122 = vect_cst_.130_124 + vect__55.127_125;

common/quant.c:164:9: note: ------>vectorizing statement: _56 = f_49 + _55;

common/quant.c:164:9: note: ------>vectorizing statement: vect__58.131_121 = vect__56.129_123 >> pretmp_152;

common/quant.c:164:9: note: ------>vectorizing statement: vect__58.131_120 = vect__56.129_122 >> pretmp_152;

common/quant.c:164:9: note: ------>vectorizing statement: _58 = _56 >> pretmp_152;

common/quant.c:164:9: note: ------>vectorizing statement: vect__59.132_119 = VEC_PACK_TRUNC_EXPR <vect__58.131_121, vect__58.131_120>;

common/quant.c:164:9: note: ------>vectorizing statement: _59 = (short int) _58;

common/quant.c:164:9: note: ------>vectorizing statement: _61 = *_52[1];

common/quant.c:164:9: note: ------>vectorizing statement: _62 = (int) _61;

common/quant.c:164:9: note: ------>vectorizing statement: _63 = i_dmf_47 * _62;

common/quant.c:164:9: note: ------>vectorizing statement: _64 = f_49 + _63;

common/quant.c:164:9: note: ------>vectorizing statement: _65 = _64 >> pretmp_152;

common/quant.c:164:9: note: ------>vectorizing statement: _66 = (short int) _65;

common/quant.c:164:9: note: ------>vectorizing statement: _68 = *_52[2];

common/quant.c:164:9: note: ------>vectorizing statement: _69 = (int) _68;

common/quant.c:164:9: note: ------>vectorizing statement: _70 = i_dmf_47 * _69;

common/quant.c:164:9: note: ------>vectorizing statement: _71 = f_49 + _70;

common/quant.c:164:9: note: ------>vectorizing statement: _72 = _71 >> pretmp_152;

common/quant.c:164:9: note: ------>vectorizing statement: _73 = (short int) _72;

common/quant.c:164:9: note: ------>vectorizing statement: _75 = *_52[3];

common/quant.c:164:9: note: ------>vectorizing statement: _76 = (int) _75;

common/quant.c:164:9: note: ------>vectorizing statement: _77 = i_dmf_47 * _76;

common/quant.c:164:9: note: ------>vectorizing statement: _78 = f_49 + _77;

common/quant.c:164:9: note: ------>vectorizing statement: _79 = _78 >> pretmp_152;

common/quant.c:164:9: note: ------>vectorizing statement: _80 = (short int) _79;

common/quant.c:164:9: note: ------>vectorizing statement: MEM[(short int *)vectp_dct.133_117] = vect__59.132_119;

common/quant.c:164:9: note: ------>vectorizing statement: y_82 = y_85 + 1;

common/quant.c:164:9: note: ------>vectorizing statement: # DEBUG y => y_82

common/quant.c:164:9: note: ------>vectorizing statement: # DEBUG y => y_82

common/quant.c:164:9: note: ------>vectorizing statement: ivtmp_146 = ivtmp_147 - 1;

common/quant.c:164:9: note: ------>vectorizing statement: vectp_dct.123_131 = vectp_dct.123_132 + 16;

common/quant.c:164:9: note: ------>vectorizing statement: vectp_dct.133_116 = vectp_dct.133_117 + 16;

common/quant.c:164:9: note: ------>vectorizing statement: if (ivtmp_146 != 0)


loop at common/quant.c:166: if (ivtmp_74 < 2)

;; Scaling loop 1 with scale 0.500000, bounding iterations to 2 from guessed 3
;; guessed iterations are now 2
common/quant.c:164:9: note: LOOP VECTORIZED

common/quant.c:142:13: note: vectorized 2 loops in function.
Merging blocks 3 and 11
Merging blocks 7 and 13
dequant_4x4_dc (int16_t[4] * dct, int[4][4] * dequant_mf, int i_qp)
{
  vector(8) short int * vectp_dct.134;
  vector(8) short int * vectp_dct.133;
  vector(8) short int vect__59.132;
  vector(4) int vect__58.131;
  const vector(4) int vect_cst_.130;
  const vector(4) int vect__56.129;
  const vector(4) int vect_cst_.128;
  const vector(4) int vect__55.127;
  vector(4) int vect__54.126;
  vector(8) short int vect__53.125;
  vector(8) short int * vectp_dct.124;
  vector(8) short int * vectp_dct.123;
  vector(8) short int * vectp_dct.122;
  vector(8) short int * vectp_dct.121;
  vector(8) short int vect__25.120;
  vector(8) unsigned short vect_cst_.119;
  vector(8) unsigned short vect__24.118;
  vector(8) unsigned short vect__22.117;
  vector(8) short int vect__21.116;
  vector(8) short int * vectp_dct.115;
  vector(8) short int * vectp_dct.114;
  const int f;
  const int i_dmf;
  const int i_dmf;
  int y;
  const int i_qbits;
  unsigned int ivtmp_5;
  int _7;
  int _9;
  long unsigned int _10;
  long unsigned int _11;
  int[4][4] * _13;
  int _15;
  long unsigned int _17;
  long unsigned int _18;
  int16_t[4] * _20;
  short int _21;
  unsigned short _22;
  unsigned short _24;
  short int _25;
  short int _27;
  unsigned short _28;
  unsigned short _29;
  short int _30;
  short int _32;
  unsigned short _33;
  unsigned short _34;
  short int _35;
  unsigned int ivtmp_36;
  short int _37;
  unsigned short _38;
  unsigned short _39;
  short int _40;
  unsigned int ivtmp_41;
  int _43;
  long unsigned int _44;
  long unsigned int _45;
  int[4][4] * _46;
  int _48;
  long unsigned int _50;
  long unsigned int _51;
  int16_t[4] * _52;
  short int _53;
  int _54;
  int _55;
  int _56;
  int _58;
  short int _59;
  short int _61;
  int _62;
  int _63;
  int _64;
  int _65;
  short int _66;
  short int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  short int _73;
  unsigned int ivtmp_74;
  short int _75;
  int _76;
  int _77;
  int _78;
  int _79;
  short int _80;
  unsigned int ivtmp_81;
  unsigned int ivtmp_146;
  unsigned int ivtmp_147;
  unsigned int ivtmp_148;
  int pretmp_152;
  unsigned short pretmp_156;

  <bb 2>:
  _7 = i_qp_6(D) / 6;
  i_qbits_8 = _7 + -6;
  # DEBUG i_qbits => i_qbits_8
  if (i_qbits_8 >= 0)
    goto <bb 3>;
  else
    goto <bb 8>;

  <bb 3>:
  _9 = i_qp_6(D) % 6;
  _10 = (long unsigned int) _9;
  _11 = _10 * 64;
  _13 = dequant_mf_12(D) + _11;
  _15 = *_13[0][0];
  i_dmf_16 = _15 << i_qbits_8;
  # DEBUG i_dmf => i_dmf_16
  # DEBUG y => 0
  # DEBUG y => 0
  pretmp_156 = (unsigned short) i_dmf_16;
  vectp_dct.115_144 = dct_19(D);
  vect_cst_.119_139 = {pretmp_156, pretmp_156, pretmp_156, pretmp_156, pretmp_156, pretmp_156, pretmp_156, pretmp_156};
  vectp_dct.122_136 = dct_19(D);

  <bb 4>:
  # y_83 = PHI <y_42(5), 0(3)>
  # ivtmp_5 = PHI <ivtmp_148(5), 4(3)>
  # vectp_dct.114_143 = PHI <vectp_dct.114_142(5), vectp_dct.115_144(3)>
  # vectp_dct.121_135 = PHI <vectp_dct.121_134(5), vectp_dct.122_136(3)>
  # ivtmp_41 = PHI <ivtmp_36(5), 0(3)>
  # DEBUG y => y_83
  _17 = (long unsigned int) y_83;
  _18 = _17 * 8;
  _20 = dct_19(D) + _18;
  vect__21.116_141 = MEM[(short int *)vectp_dct.114_143];
  _21 = *_20[0];
  vect__22.117_140 = VIEW_CONVERT_EXPR<vector(8) unsigned short>(vect__21.116_141);
  _22 = (unsigned short) _21;
  vect__24.118_138 = vect__22.117_140 * vect_cst_.119_139;
  _24 = _22 * pretmp_156;
  vect__25.120_137 = VIEW_CONVERT_EXPR<vector(8) short int>(vect__24.118_138);
  _25 = (short int) _24;
  _27 = *_20[1];
  _28 = (unsigned short) _27;
  _29 = _28 * pretmp_156;
  _30 = (short int) _29;
  _32 = *_20[2];
  _33 = (unsigned short) _32;
  _34 = _33 * pretmp_156;
  _35 = (short int) _34;
  _37 = *_20[3];
  _38 = (unsigned short) _37;
  _39 = _38 * pretmp_156;
  _40 = (short int) _39;
  MEM[(short int *)vectp_dct.121_135] = vect__25.120_137;
  y_42 = y_83 + 1;
  # DEBUG y => y_42
  # DEBUG y => y_42
  ivtmp_148 = ivtmp_5 - 1;
  vectp_dct.114_142 = vectp_dct.114_143 + 16;
  vectp_dct.121_134 = vectp_dct.121_135 + 16;
  ivtmp_36 = ivtmp_41 + 1;
  if (ivtmp_36 < 2)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  goto <bb 4>;

  <bb 6>:

  <bb 7>:
  return;

  <bb 8>:
  _43 = i_qp_6(D) % 6;
  _44 = (long unsigned int) _43;
  _45 = _44 * 64;
  _46 = dequant_mf_12(D) + _45;
  i_dmf_47 = *_46[0][0];
  # DEBUG i_dmf => i_dmf_47
  _48 = ~i_qbits_8;
  f_49 = 1 << _48;
  # DEBUG f => f_49
  # DEBUG y => 0
  # DEBUG y => 0
  pretmp_152 = -i_qbits_8;
  vectp_dct.124_26 = dct_19(D);
  vect_cst_.128_127 = {i_dmf_47, i_dmf_47, i_dmf_47, i_dmf_47};
  vect_cst_.130_124 = {f_49, f_49, f_49, f_49};
  vectp_dct.134_118 = dct_19(D);

  <bb 9>:
  # y_85 = PHI <y_82(11), 0(8)>
  # ivtmp_147 = PHI <ivtmp_146(11), 4(8)>
  # vectp_dct.123_132 = PHI <vectp_dct.123_131(11), vectp_dct.124_26(8)>
  # vectp_dct.133_117 = PHI <vectp_dct.133_116(11), vectp_dct.134_118(8)>
  # ivtmp_81 = PHI <ivtmp_74(11), 0(8)>
  # DEBUG y => y_85
  _50 = (long unsigned int) y_85;
  _51 = _50 * 8;
  _52 = dct_19(D) + _51;
  vect__53.125_130 = MEM[(short int *)vectp_dct.123_132];
  _53 = *_52[0];
  vect__54.126_129 = [vec_unpack_lo_expr] vect__53.125_130;
  vect__54.126_128 = [vec_unpack_hi_expr] vect__53.125_130;
  _54 = (int) _53;
  vect__55.127_126 = vect_cst_.128_127 * vect__54.126_129;
  vect__55.127_125 = vect_cst_.128_127 * vect__54.126_128;
  _55 = i_dmf_47 * _54;
  vect__56.129_123 = vect_cst_.130_124 + vect__55.127_126;
  vect__56.129_122 = vect_cst_.130_124 + vect__55.127_125;
  _56 = f_49 + _55;
  vect__58.131_121 = vect__56.129_123 >> pretmp_152;
  vect__58.131_120 = vect__56.129_122 >> pretmp_152;
  _58 = _56 >> pretmp_152;
  vect__59.132_119 = VEC_PACK_TRUNC_EXPR <vect__58.131_121, vect__58.131_120>;
  _59 = (short int) _58;
  _61 = *_52[1];
  _62 = (int) _61;
  _63 = i_dmf_47 * _62;
  _64 = f_49 + _63;
  _65 = _64 >> pretmp_152;
  _66 = (short int) _65;
  _68 = *_52[2];
  _69 = (int) _68;
  _70 = i_dmf_47 * _69;
  _71 = f_49 + _70;
  _72 = _71 >> pretmp_152;
  _73 = (short int) _72;
  _75 = *_52[3];
  _76 = (int) _75;
  _77 = i_dmf_47 * _76;
  _78 = f_49 + _77;
  _79 = _78 >> pretmp_152;
  _80 = (short int) _79;
  MEM[(short int *)vectp_dct.133_117] = vect__59.132_119;
  y_82 = y_85 + 1;
  # DEBUG y => y_82
  # DEBUG y => y_82
  ivtmp_146 = ivtmp_147 - 1;
  vectp_dct.123_131 = vectp_dct.123_132 + 16;
  vectp_dct.133_116 = vectp_dct.133_117 + 16;
  ivtmp_74 = ivtmp_81 + 1;
  if (ivtmp_74 < 2)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 7>;

  <bb 11>:
  goto <bb 9>;

}



;; Function x264_denoise_dct (x264_denoise_dct, funcdef_no=122, decl_uid=5962, cgraph_uid=122, symbol_order=165)


Analyzing loop at common/quant.c:177
common/quant.c:177:5: note: ===== analyze_loop_nest =====
common/quant.c:177:5: note: === vect_analyze_loop_form ===
common/quant.c:177:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [2, + , 1](no_overflow) < size_5(D)
  bounds on difference of bases: 0 ... 2147483645
  result:
    # of iterations (unsigned int) size_5(D) + 4294967294, bounded by 2147483645
Applying pattern match.pd:494, generic-match.c:3721
common/quant.c:177:5: note: Symbolic number of iterations is (unsigned int) size_5(D) + 4294967295
common/quant.c:177:5: note: === vect_analyze_data_refs ===
Creating dr for *_9
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: dct_8(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 2
	aligned to: 128
	base_object: *dct_8(D)
	Access function 0: {2B, +, 2}_1
Creating dr for *_17
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: sum_16(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *sum_16(D)
	Access function 0: {4B, +, 4}_1
Creating dr for *_17
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: sum_16(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 128
	base_object: *sum_16(D)
	Access function 0: {4B, +, 4}_1
Creating dr for *_23
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: offset_22(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 2
	aligned to: 128
	base_object: *offset_22(D)
	Access function 0: {2B, +, 2}_1
Creating dr for *_9
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: dct_8(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 2
	aligned to: 128
	base_object: *dct_8(D)
	Access function 0: {2B, +, 2}_1
common/quant.c:177:5: note: got vectype for stmt: _10 = *_9;
vector(8) short int
common/quant.c:177:5: note: got vectype for stmt: _18 = *_17;
vector(4) unsigned int
common/quant.c:177:5: note: got vectype for stmt: *_17 = _20;
vector(4) unsigned int
common/quant.c:177:5: note: got vectype for stmt: _24 = *_23;
vector(8) short unsigned int
common/quant.c:177:5: note: got vectype for stmt: *_9 = iftmp.3_2;
vector(8) short int
common/quant.c:177:5: note: === vect_analyze_scalar_cycles ===
common/quant.c:177:5: note: Analyze phi: i_37 = PHI <1(4), i_35(7)>

common/quant.c:177:5: note: Access function of PHI: {1, +, 1}_1
common/quant.c:177:5: note: step: 1,  init: 1
common/quant.c:177:5: note: Detected induction.
common/quant.c:177:5: note: Analyze phi: .MEM_36 = PHI <.MEM_4(D)(4), .MEM_34(7)>

common/quant.c:177:5: note: === vect_pattern_recog ===
common/quant.c:177:5: note: vect_is_simple_use: operand _6
common/quant.c:177:5: note: def_stmt: _6 = (long unsigned int) i_37;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand i_37
common/quant.c:177:5: note: def_stmt: i_37 = PHI <1(4), i_35(7)>
common/quant.c:177:5: note: type of def: 4.
common/quant.c:177:5: note: vect_is_simple_use: operand 2
common/quant.c:177:5: note: vect_is_simple_use: operand _6
common/quant.c:177:5: note: def_stmt: _6 = (long unsigned int) i_37;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand i_37
common/quant.c:177:5: note: def_stmt: i_37 = PHI <1(4), i_35(7)>
common/quant.c:177:5: note: type of def: 4.
common/quant.c:177:5: note: vect_is_simple_use: operand 4
common/quant.c:177:5: note: vect_is_simple_use: operand iftmp.3_33
common/quant.c:177:5: note: def_stmt: iftmp.3_33 = (int16_t) _32;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand _32
common/quant.c:177:5: note: def_stmt: _32 = _30 - _31;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vect_analyze_data_ref_accesses ===
common/quant.c:177:5: note: === vect_mark_stmts_to_be_vectorized ===
common/quant.c:177:5: note: init: phi relevant? i_37 = PHI <1(4), i_35(7)>
common/quant.c:177:5: note: init: phi relevant? .MEM_36 = PHI <.MEM_4(D)(4), .MEM_34(7)>
common/quant.c:177:5: note: init: stmt relevant? # DEBUG i => NULL
common/quant.c:177:5: note: init: stmt relevant? _6 = (long unsigned int) i_37;
common/quant.c:177:5: note: init: stmt relevant? _7 = _6 * 2;
common/quant.c:177:5: note: init: stmt relevant? _9 = dct_8(D) + _7;
common/quant.c:177:5: note: init: stmt relevant? _10 = *_9;
common/quant.c:177:5: note: init: stmt relevant? level_11 = (int) _10;
common/quant.c:177:5: note: init: stmt relevant? # DEBUG level => NULL
common/quant.c:177:5: note: init: stmt relevant? sign_12 = level_11 >> 15;
common/quant.c:177:5: note: init: stmt relevant? # DEBUG sign => NULL
common/quant.c:177:5: note: init: stmt relevant? _13 = level_11 + sign_12;
common/quant.c:177:5: note: init: stmt relevant? level_14 = sign_12 ^ _13;
common/quant.c:177:5: note: init: stmt relevant? # DEBUG level => NULL
common/quant.c:177:5: note: init: stmt relevant? _15 = _6 * 4;
common/quant.c:177:5: note: init: stmt relevant? _17 = sum_16(D) + _15;
common/quant.c:177:5: note: init: stmt relevant? _18 = *_17;
common/quant.c:177:5: note: init: stmt relevant? level.2_19 = (unsigned int) level_14;
common/quant.c:177:5: note: init: stmt relevant? _20 = _18 + level.2_19;
common/quant.c:177:5: note: init: stmt relevant? *_17 = _20;
common/quant.c:177:5: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: init: stmt relevant? _23 = offset_22(D) + _7;
common/quant.c:177:5: note: init: stmt relevant? _24 = *_23;
common/quant.c:177:5: note: init: stmt relevant? _25 = (int) _24;
common/quant.c:177:5: note: init: stmt relevant? level_26 = level_14 - _25;
common/quant.c:177:5: note: init: stmt relevant? # DEBUG level => NULL
common/quant.c:177:5: note: init: stmt relevant? _27 = (signed short) level_26;
common/quant.c:177:5: note: init: stmt relevant? _28 = (signed short) sign_12;
common/quant.c:177:5: note: init: stmt relevant? _29 = _27 ^ _28;
common/quant.c:177:5: note: init: stmt relevant? _30 = (unsigned short) _29;
common/quant.c:177:5: note: init: stmt relevant? _31 = (unsigned short) sign_12;
common/quant.c:177:5: note: init: stmt relevant? _32 = _30 - _31;
common/quant.c:177:5: note: init: stmt relevant? iftmp.3_33 = (int16_t) _32;
common/quant.c:177:5: note: init: stmt relevant? iftmp.3_2 = level_26 >= 0 ? iftmp.3_33 : 0;
common/quant.c:177:5: note: init: stmt relevant? *_9 = iftmp.3_2;
common/quant.c:177:5: note: vec_stmt_relevant_p: stmt has vdefs.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: init: stmt relevant? i_35 = i_37 + 1;
common/quant.c:177:5: note: init: stmt relevant? # DEBUG i => i_35
common/quant.c:177:5: note: init: stmt relevant? # DEBUG i => i_35
common/quant.c:177:5: note: init: stmt relevant? if (size_5(D) > i_35)
common/quant.c:177:5: note: worklist: examine stmt: *_9 = iftmp.3_2;
common/quant.c:177:5: note: vect_is_simple_use: operand iftmp.3_2
common/quant.c:177:5: note: def_stmt: iftmp.3_2 = level_26 >= 0 ? iftmp.3_33 : 0;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: iftmp.3_2 = level_26 >= 0 ? iftmp.3_33 : 0;
common/quant.c:177:5: note: vect_is_simple_use: operand level_26
common/quant.c:177:5: note: def_stmt: level_26 = level_14 - _25;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: vect_is_simple_use: operand iftmp.3_33
common/quant.c:177:5: note: def_stmt: iftmp.3_33 = (int16_t) _32;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: iftmp.3_33 = (int16_t) _32;
common/quant.c:177:5: note: vect_is_simple_use: operand _32
common/quant.c:177:5: note: def_stmt: _32 = _30 - _31;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: _32 = _30 - _31;
common/quant.c:177:5: note: vect_is_simple_use: operand _30
common/quant.c:177:5: note: def_stmt: _30 = (unsigned short) _29;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: vect_is_simple_use: operand _31
common/quant.c:177:5: note: def_stmt: _31 = (unsigned short) sign_12;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: _31 = (unsigned short) sign_12;
common/quant.c:177:5: note: vect_is_simple_use: operand sign_12
common/quant.c:177:5: note: def_stmt: sign_12 = level_11 >> 15;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: sign_12 = level_11 >> 15;
common/quant.c:177:5: note: vect_is_simple_use: operand level_11
common/quant.c:177:5: note: def_stmt: level_11 = (int) _10;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: level_11 = (int) _10;
common/quant.c:177:5: note: vect_is_simple_use: operand _10
common/quant.c:177:5: note: def_stmt: _10 = *_9;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: _10 = *_9;
common/quant.c:177:5: note: worklist: examine stmt: _30 = (unsigned short) _29;
common/quant.c:177:5: note: vect_is_simple_use: operand _29
common/quant.c:177:5: note: def_stmt: _29 = _27 ^ _28;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: _29 = _27 ^ _28;
common/quant.c:177:5: note: vect_is_simple_use: operand _27
common/quant.c:177:5: note: def_stmt: _27 = (signed short) level_26;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: vect_is_simple_use: operand _28
common/quant.c:177:5: note: def_stmt: _28 = (signed short) sign_12;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: _28 = (signed short) sign_12;
common/quant.c:177:5: note: vect_is_simple_use: operand sign_12
common/quant.c:177:5: note: def_stmt: sign_12 = level_11 >> 15;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: already marked relevant/live.
common/quant.c:177:5: note: worklist: examine stmt: _27 = (signed short) level_26;
common/quant.c:177:5: note: vect_is_simple_use: operand level_26
common/quant.c:177:5: note: def_stmt: level_26 = level_14 - _25;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: already marked relevant/live.
common/quant.c:177:5: note: worklist: examine stmt: level_26 = level_14 - _25;
common/quant.c:177:5: note: vect_is_simple_use: operand level_14
common/quant.c:177:5: note: def_stmt: level_14 = sign_12 ^ _13;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: vect_is_simple_use: operand _25
common/quant.c:177:5: note: def_stmt: _25 = (int) _24;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: _25 = (int) _24;
common/quant.c:177:5: note: vect_is_simple_use: operand _24
common/quant.c:177:5: note: def_stmt: _24 = *_23;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: _24 = *_23;
common/quant.c:177:5: note: worklist: examine stmt: level_14 = sign_12 ^ _13;
common/quant.c:177:5: note: vect_is_simple_use: operand sign_12
common/quant.c:177:5: note: def_stmt: sign_12 = level_11 >> 15;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: already marked relevant/live.
common/quant.c:177:5: note: vect_is_simple_use: operand _13
common/quant.c:177:5: note: def_stmt: _13 = level_11 + sign_12;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: _13 = level_11 + sign_12;
common/quant.c:177:5: note: vect_is_simple_use: operand level_11
common/quant.c:177:5: note: def_stmt: level_11 = (int) _10;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: already marked relevant/live.
common/quant.c:177:5: note: vect_is_simple_use: operand sign_12
common/quant.c:177:5: note: def_stmt: sign_12 = level_11 >> 15;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: already marked relevant/live.
common/quant.c:177:5: note: worklist: examine stmt: *_17 = _20;
common/quant.c:177:5: note: vect_is_simple_use: operand _20
common/quant.c:177:5: note: def_stmt: _20 = _18 + level.2_19;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: _20 = _18 + level.2_19;
common/quant.c:177:5: note: vect_is_simple_use: operand _18
common/quant.c:177:5: note: def_stmt: _18 = *_17;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: vect_is_simple_use: operand level.2_19
common/quant.c:177:5: note: def_stmt: level.2_19 = (unsigned int) level_14;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: worklist: examine stmt: level.2_19 = (unsigned int) level_14;
common/quant.c:177:5: note: vect_is_simple_use: operand level_14
common/quant.c:177:5: note: def_stmt: level_14 = sign_12 ^ _13;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: mark relevant 4, live 0.
common/quant.c:177:5: note: already marked relevant/live.
common/quant.c:177:5: note: worklist: examine stmt: _18 = *_17;
common/quant.c:177:5: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _10 = *_9;
  stmt_b: _18 = *_17;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _10 = *_9;
  stmt_b: *_17 = _20;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _10 = *_9;
  stmt_b: _24 = *_23;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _10 = *_9;
  stmt_b: *_9 = iftmp.3_2;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_1)
  (chrec_b = {2B, +, 2}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _18 = *_17;
  stmt_b: *_17 = _20;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_1)
  (chrec_b = {4B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _18 = *_17;
  stmt_b: _24 = *_23;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _18 = *_17;
  stmt_b: *_9 = iftmp.3_2;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_17 = _20;
  stmt_b: _24 = *_23;
) -> no dependence
(compute_affine_dependence
  stmt_a: *_17 = _20;
  stmt_b: *_9 = iftmp.3_2;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: *_9 = iftmp.3_2;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _10 = *_9;
  stmt_b: _10 = *_9;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_1)
  (chrec_b = {2B, +, 2}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _18 = *_17;
  stmt_b: _18 = *_17;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_1)
  (chrec_b = {4B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_17 = _20;
  stmt_b: *_17 = _20;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_1)
  (chrec_b = {4B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _24 = *_23;
  stmt_b: _24 = *_23;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_1)
  (chrec_b = {2B, +, 2}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_9 = iftmp.3_2;
  stmt_b: *_9 = iftmp.3_2;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_1)
  (chrec_b = {2B, +, 2}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/quant.c:177:5: note: dependence distance  = 0.
common/quant.c:177:5: note: dependence distance == 0 between *_9 and *_9
common/quant.c:177:5: note: dependence distance  = 0.
common/quant.c:177:5: note: dependence distance == 0 between *_17 and *_17
common/quant.c:177:5: note: versioning for alias required: can't determine dependence between *_17 and *_9
common/quant.c:177:5: note: mark for run-time aliasing test between *_17 and *_9
common/quant.c:177:5: note: versioning for alias required: can't determine dependence between *_23 and *_9
common/quant.c:177:5: note: mark for run-time aliasing test between *_23 and *_9
common/quant.c:177:5: note: === vect_determine_vectorization_factor ===
common/quant.c:177:5: note: ==> examining phi: i_37 = PHI <1(4), i_35(7)>

common/quant.c:177:5: note: ==> examining phi: .MEM_36 = PHI <.MEM_4(D)(4), .MEM_34(7)>

common/quant.c:177:5: note: ==> examining statement: # DEBUG i => NULL

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: _6 = (long unsigned int) i_37;

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: _7 = _6 * 2;

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: _9 = dct_8(D) + _7;

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: _10 = *_9;

common/quant.c:177:5: note: get vectype for scalar type:  short int
common/quant.c:177:5: note: vectype: vector(8) short int
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: level_11 = (int) _10;

common/quant.c:177:5: note: get vectype for scalar type:  int
common/quant.c:177:5: note: vectype: vector(4) int
common/quant.c:177:5: note: get vectype for scalar type:  short int
common/quant.c:177:5: note: vectype: vector(8) short int
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: # DEBUG level => NULL

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: sign_12 = level_11 >> 15;

common/quant.c:177:5: note: get vectype for scalar type:  int
common/quant.c:177:5: note: vectype: vector(4) int
common/quant.c:177:5: note: get vectype for scalar type:  int
common/quant.c:177:5: note: vectype: vector(4) int
common/quant.c:177:5: note: nunits = 4
common/quant.c:177:5: note: ==> examining statement: # DEBUG sign => NULL

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: _13 = level_11 + sign_12;

common/quant.c:177:5: note: get vectype for scalar type:  int
common/quant.c:177:5: note: vectype: vector(4) int
common/quant.c:177:5: note: get vectype for scalar type:  int
common/quant.c:177:5: note: vectype: vector(4) int
common/quant.c:177:5: note: nunits = 4
common/quant.c:177:5: note: ==> examining statement: level_14 = sign_12 ^ _13;

common/quant.c:177:5: note: get vectype for scalar type:  int
common/quant.c:177:5: note: vectype: vector(4) int
common/quant.c:177:5: note: get vectype for scalar type:  int
common/quant.c:177:5: note: vectype: vector(4) int
common/quant.c:177:5: note: nunits = 4
common/quant.c:177:5: note: ==> examining statement: # DEBUG level => NULL

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: _15 = _6 * 4;

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: _17 = sum_16(D) + _15;

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: _18 = *_17;

common/quant.c:177:5: note: get vectype for scalar type:  unsigned int
common/quant.c:177:5: note: vectype: vector(4) unsigned int
common/quant.c:177:5: note: nunits = 4
common/quant.c:177:5: note: ==> examining statement: level.2_19 = (unsigned int) level_14;

common/quant.c:177:5: note: get vectype for scalar type:  unsigned int
common/quant.c:177:5: note: vectype: vector(4) unsigned int
common/quant.c:177:5: note: get vectype for scalar type:  unsigned int
common/quant.c:177:5: note: vectype: vector(4) unsigned int
common/quant.c:177:5: note: nunits = 4
common/quant.c:177:5: note: ==> examining statement: _20 = _18 + level.2_19;

common/quant.c:177:5: note: get vectype for scalar type:  unsigned int
common/quant.c:177:5: note: vectype: vector(4) unsigned int
common/quant.c:177:5: note: get vectype for scalar type:  unsigned int
common/quant.c:177:5: note: vectype: vector(4) unsigned int
common/quant.c:177:5: note: nunits = 4
common/quant.c:177:5: note: ==> examining statement: *_17 = _20;

common/quant.c:177:5: note: get vectype for scalar type:  uint32_t
common/quant.c:177:5: note: vectype: vector(4) unsigned int
common/quant.c:177:5: note: nunits = 4
common/quant.c:177:5: note: ==> examining statement: _23 = offset_22(D) + _7;

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: _24 = *_23;

common/quant.c:177:5: note: get vectype for scalar type:  short unsigned int
common/quant.c:177:5: note: vectype: vector(8) short unsigned int
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: _25 = (int) _24;

common/quant.c:177:5: note: get vectype for scalar type:  int
common/quant.c:177:5: note: vectype: vector(4) int
common/quant.c:177:5: note: get vectype for scalar type:  short unsigned int
common/quant.c:177:5: note: vectype: vector(8) short unsigned int
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: level_26 = level_14 - _25;

common/quant.c:177:5: note: get vectype for scalar type:  int
common/quant.c:177:5: note: vectype: vector(4) int
common/quant.c:177:5: note: get vectype for scalar type:  int
common/quant.c:177:5: note: vectype: vector(4) int
common/quant.c:177:5: note: nunits = 4
common/quant.c:177:5: note: ==> examining statement: # DEBUG level => NULL

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: _27 = (signed short) level_26;

common/quant.c:177:5: note: get vectype for scalar type:  signed short
common/quant.c:177:5: note: vectype: vector(8) signed short
common/quant.c:177:5: note: get vectype for scalar type:  signed short
common/quant.c:177:5: note: vectype: vector(8) signed short
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: _28 = (signed short) sign_12;

common/quant.c:177:5: note: get vectype for scalar type:  signed short
common/quant.c:177:5: note: vectype: vector(8) signed short
common/quant.c:177:5: note: get vectype for scalar type:  signed short
common/quant.c:177:5: note: vectype: vector(8) signed short
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: _29 = _27 ^ _28;

common/quant.c:177:5: note: get vectype for scalar type:  signed short
common/quant.c:177:5: note: vectype: vector(8) signed short
common/quant.c:177:5: note: get vectype for scalar type:  signed short
common/quant.c:177:5: note: vectype: vector(8) signed short
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: _30 = (unsigned short) _29;

common/quant.c:177:5: note: get vectype for scalar type:  unsigned short
common/quant.c:177:5: note: vectype: vector(8) unsigned short
common/quant.c:177:5: note: get vectype for scalar type:  unsigned short
common/quant.c:177:5: note: vectype: vector(8) unsigned short
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: _31 = (unsigned short) sign_12;

common/quant.c:177:5: note: get vectype for scalar type:  unsigned short
common/quant.c:177:5: note: vectype: vector(8) unsigned short
common/quant.c:177:5: note: get vectype for scalar type:  unsigned short
common/quant.c:177:5: note: vectype: vector(8) unsigned short
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: _32 = _30 - _31;

common/quant.c:177:5: note: get vectype for scalar type:  unsigned short
common/quant.c:177:5: note: vectype: vector(8) unsigned short
common/quant.c:177:5: note: get vectype for scalar type:  unsigned short
common/quant.c:177:5: note: vectype: vector(8) unsigned short
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: iftmp.3_33 = (int16_t) _32;

common/quant.c:177:5: note: get vectype for scalar type:  int16_t
common/quant.c:177:5: note: vectype: vector(8) short int
common/quant.c:177:5: note: get vectype for scalar type:  int16_t
common/quant.c:177:5: note: vectype: vector(8) short int
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: iftmp.3_2 = level_26 >= 0 ? iftmp.3_33 : 0;

common/quant.c:177:5: note: get vectype for scalar type:  int16_t
common/quant.c:177:5: note: vectype: vector(8) short int
common/quant.c:177:5: note: get vectype for scalar type:  int16_t
common/quant.c:177:5: note: vectype: vector(8) short int
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: *_9 = iftmp.3_2;

common/quant.c:177:5: note: get vectype for scalar type:  int16_t
common/quant.c:177:5: note: vectype: vector(8) short int
common/quant.c:177:5: note: nunits = 8
common/quant.c:177:5: note: ==> examining statement: i_35 = i_37 + 1;

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: # DEBUG i => i_35

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: # DEBUG i => i_35

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: ==> examining statement: if (size_5(D) > i_35)

common/quant.c:177:5: note: skip.
common/quant.c:177:5: note: vectorization factor = 8
common/quant.c:177:5: note: === vect_analyze_data_refs_alignment ===
common/quant.c:177:5: note: dependence distance  = 0.
common/quant.c:177:5: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_9 and *_9
common/quant.c:177:5: note: dependence distance  = 0.
common/quant.c:177:5: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_17 and *_17
common/quant.c:177:5: note: vect_compute_data_ref_alignment:
common/quant.c:177:5: note: can't force alignment of ref: *_9
common/quant.c:177:5: note: vect_compute_data_ref_alignment:
common/quant.c:177:5: note: can't force alignment of ref: *_17
common/quant.c:177:5: note: vect_compute_data_ref_alignment:
common/quant.c:177:5: note: can't force alignment of ref: *_17
common/quant.c:177:5: note: vect_compute_data_ref_alignment:
common/quant.c:177:5: note: can't force alignment of ref: *_23
common/quant.c:177:5: note: vect_compute_data_ref_alignment:
common/quant.c:177:5: note: can't force alignment of ref: *_9
common/quant.c:177:5: note: === vect_prune_runtime_alias_test_list ===
common/quant.c:177:5: note: improved number of alias checks from 2 to 2
common/quant.c:177:5: note: === vect_enhance_data_refs_alignment ===
common/quant.c:177:5: note: Unknown misalignment, is_packed = 0
common/quant.c:177:5: note: Unknown misalignment, is_packed = 0
common/quant.c:177:5: note: Unknown misalignment, is_packed = 0
common/quant.c:177:5: note: Unknown misalignment, is_packed = 0
common/quant.c:177:5: note: Unknown misalignment, is_packed = 0
common/quant.c:177:5: note: vect_can_advance_ivs_p:
common/quant.c:177:5: note: Analyze phi: i_37 = PHI <1(4), i_35(7)>

common/quant.c:177:5: note: Analyze phi: .MEM_36 = PHI <.MEM_4(D)(4), .MEM_34(7)>

common/quant.c:177:5: note: virtual phi. skip.
common/quant.c:177:5: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:177:5: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/quant.c:177:5: note: vect_model_store_cost: unaligned supported by hardware.
common/quant.c:177:5: note: vect_get_data_access_cost: inside_cost = 4, outside_cost = 0.
common/quant.c:177:5: note: Setting misalignment to -1.
common/quant.c:177:5: note: Setting misalignment to -1.
common/quant.c:177:5: note: Setting misalignment to -1.
common/quant.c:177:5: note: Disable peeling, max peels reached: 7
common/quant.c:177:5: note: Vectorizing an unaligned access.
common/quant.c:177:5: note: Vectorizing an unaligned access.
common/quant.c:177:5: note: Vectorizing an unaligned access.
common/quant.c:177:5: note: Vectorizing an unaligned access.
common/quant.c:177:5: note: Vectorizing an unaligned access.
common/quant.c:177:5: note: === vect_analyze_slp ===
common/quant.c:177:5: note: === vect_make_slp_decision ===
common/quant.c:177:5: note: === vect_detect_hybrid_slp ===
common/quant.c:177:5: note: === vect_analyze_loop_operations ===
common/quant.c:177:5: note: examining phi: i_37 = PHI <1(4), i_35(7)>

common/quant.c:177:5: note: examining phi: .MEM_36 = PHI <.MEM_4(D)(4), .MEM_34(7)>

common/quant.c:177:5: note: ==> examining statement: # DEBUG i => NULL
common/quant.c:177:5: note: irrelevant.
common/quant.c:177:5: note: ==> examining statement: _6 = (long unsigned int) i_37;
common/quant.c:177:5: note: irrelevant.
common/quant.c:177:5: note: ==> examining statement: _7 = _6 * 2;
common/quant.c:177:5: note: irrelevant.
common/quant.c:177:5: note: ==> examining statement: _9 = dct_8(D) + _7;
common/quant.c:177:5: note: irrelevant.
common/quant.c:177:5: note: ==> examining statement: _10 = *_9;
common/quant.c:177:5: note: vect_is_simple_use: operand *_9
common/quant.c:177:5: note: not ssa-name.
common/quant.c:177:5: note: use not simple.
common/quant.c:177:5: note: vect_is_simple_use: operand *_9
common/quant.c:177:5: note: not ssa-name.
common/quant.c:177:5: note: use not simple.
common/quant.c:177:5: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:177:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: level_11 = (int) _10;
common/quant.c:177:5: note: vect_is_simple_use: operand _10
common/quant.c:177:5: note: def_stmt: _10 = *_9;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_conversion ===
common/quant.c:177:5: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: # DEBUG level => NULL
common/quant.c:177:5: note: irrelevant.
common/quant.c:177:5: note: ==> examining statement: sign_12 = level_11 >> 15;
common/quant.c:177:5: note: vect_is_simple_use: operand level_11
common/quant.c:177:5: note: def_stmt: level_11 = (int) _10;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand 15
common/quant.c:177:5: note: vector/scalar shift/rotate found.
common/quant.c:177:5: note: === vectorizable_shift ===
common/quant.c:177:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 1 .
common/quant.c:177:5: note: ==> examining statement: # DEBUG sign => NULL
common/quant.c:177:5: note: irrelevant.
common/quant.c:177:5: note: ==> examining statement: _13 = level_11 + sign_12;
common/quant.c:177:5: note: vect_is_simple_use: operand level_11
common/quant.c:177:5: note: def_stmt: level_11 = (int) _10;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand sign_12
common/quant.c:177:5: note: def_stmt: sign_12 = level_11 >> 15;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_operation ===
common/quant.c:177:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: level_14 = sign_12 ^ _13;
common/quant.c:177:5: note: vect_is_simple_use: operand sign_12
common/quant.c:177:5: note: def_stmt: sign_12 = level_11 >> 15;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand _13
common/quant.c:177:5: note: def_stmt: _13 = level_11 + sign_12;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_operation ===
common/quant.c:177:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: # DEBUG level => NULL
common/quant.c:177:5: note: irrelevant.
common/quant.c:177:5: note: ==> examining statement: _15 = _6 * 4;
common/quant.c:177:5: note: irrelevant.
common/quant.c:177:5: note: ==> examining statement: _17 = sum_16(D) + _15;
common/quant.c:177:5: note: irrelevant.
common/quant.c:177:5: note: ==> examining statement: _18 = *_17;
common/quant.c:177:5: note: vect_is_simple_use: operand *_17
common/quant.c:177:5: note: not ssa-name.
common/quant.c:177:5: note: use not simple.
common/quant.c:177:5: note: vect_is_simple_use: operand *_17
common/quant.c:177:5: note: not ssa-name.
common/quant.c:177:5: note: use not simple.
common/quant.c:177:5: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:177:5: note: vect_model_load_cost: inside_cost = 4, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: level.2_19 = (unsigned int) level_14;
common/quant.c:177:5: note: vect_is_simple_use: operand level_14
common/quant.c:177:5: note: def_stmt: level_14 = sign_12 ^ _13;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand level_14
common/quant.c:177:5: note: def_stmt: level_14 = sign_12 ^ _13;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: no optab.
common/quant.c:177:5: note: vect_is_simple_use: operand level_14
common/quant.c:177:5: note: def_stmt: level_14 = sign_12 ^ _13;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_assignment ===
common/quant.c:177:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: _20 = _18 + level.2_19;
common/quant.c:177:5: note: vect_is_simple_use: operand _18
common/quant.c:177:5: note: def_stmt: _18 = *_17;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand level.2_19
common/quant.c:177:5: note: def_stmt: level.2_19 = (unsigned int) level_14;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_operation ===
common/quant.c:177:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: *_17 = _20;
common/quant.c:177:5: note: vect_is_simple_use: operand _20
common/quant.c:177:5: note: def_stmt: _20 = _18 + level.2_19;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_model_store_cost: unaligned supported by hardware.
common/quant.c:177:5: note: vect_model_store_cost: inside_cost = 4, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: _23 = offset_22(D) + _7;
common/quant.c:177:5: note: irrelevant.
common/quant.c:177:5: note: ==> examining statement: _24 = *_23;
common/quant.c:177:5: note: vect_is_simple_use: operand *_23
common/quant.c:177:5: note: not ssa-name.
common/quant.c:177:5: note: use not simple.
common/quant.c:177:5: note: vect_is_simple_use: operand *_23
common/quant.c:177:5: note: not ssa-name.
common/quant.c:177:5: note: use not simple.
common/quant.c:177:5: note: vect_model_load_cost: unaligned supported by hardware.
common/quant.c:177:5: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: _25 = (int) _24;
common/quant.c:177:5: note: vect_is_simple_use: operand _24
common/quant.c:177:5: note: def_stmt: _24 = *_23;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_conversion ===
common/quant.c:177:5: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: level_26 = level_14 - _25;
common/quant.c:177:5: note: vect_is_simple_use: operand level_14
common/quant.c:177:5: note: def_stmt: level_14 = sign_12 ^ _13;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand _25
common/quant.c:177:5: note: def_stmt: _25 = (int) _24;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_operation ===
common/quant.c:177:5: note: vect_model_simple_cost: inside_cost = 2, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: # DEBUG level => NULL
common/quant.c:177:5: note: irrelevant.
common/quant.c:177:5: note: ==> examining statement: _27 = (signed short) level_26;
common/quant.c:177:5: note: vect_is_simple_use: operand level_26
common/quant.c:177:5: note: def_stmt: level_26 = level_14 - _25;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_conversion ===
common/quant.c:177:5: note: vect_model_promotion_demotion_cost: inside_cost = 1, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: _28 = (signed short) sign_12;
common/quant.c:177:5: note: vect_is_simple_use: operand sign_12
common/quant.c:177:5: note: def_stmt: sign_12 = level_11 >> 15;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_conversion ===
common/quant.c:177:5: note: vect_model_promotion_demotion_cost: inside_cost = 1, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: _29 = _27 ^ _28;
common/quant.c:177:5: note: vect_is_simple_use: operand _27
common/quant.c:177:5: note: def_stmt: _27 = (signed short) level_26;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand _28
common/quant.c:177:5: note: def_stmt: _28 = (signed short) sign_12;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_operation ===
common/quant.c:177:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: _30 = (unsigned short) _29;
common/quant.c:177:5: note: vect_is_simple_use: operand _29
common/quant.c:177:5: note: def_stmt: _29 = _27 ^ _28;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand _29
common/quant.c:177:5: note: def_stmt: _29 = _27 ^ _28;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: no optab.
common/quant.c:177:5: note: vect_is_simple_use: operand _29
common/quant.c:177:5: note: def_stmt: _29 = _27 ^ _28;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_assignment ===
common/quant.c:177:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: _31 = (unsigned short) sign_12;
common/quant.c:177:5: note: vect_is_simple_use: operand sign_12
common/quant.c:177:5: note: def_stmt: sign_12 = level_11 >> 15;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_conversion ===
common/quant.c:177:5: note: vect_model_promotion_demotion_cost: inside_cost = 1, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: _32 = _30 - _31;
common/quant.c:177:5: note: vect_is_simple_use: operand _30
common/quant.c:177:5: note: def_stmt: _30 = (unsigned short) _29;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand _31
common/quant.c:177:5: note: def_stmt: _31 = (unsigned short) sign_12;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_operation ===
common/quant.c:177:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: iftmp.3_33 = (int16_t) _32;
common/quant.c:177:5: note: vect_is_simple_use: operand _32
common/quant.c:177:5: note: def_stmt: _32 = _30 - _31;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand _32
common/quant.c:177:5: note: def_stmt: _32 = _30 - _31;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: no optab.
common/quant.c:177:5: note: vect_is_simple_use: operand _32
common/quant.c:177:5: note: def_stmt: _32 = _30 - _31;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: === vectorizable_assignment ===
common/quant.c:177:5: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
common/quant.c:177:5: note: ==> examining statement: iftmp.3_2 = level_26 >= 0 ? iftmp.3_33 : 0;
common/quant.c:177:5: note: vect_is_simple_use: operand level_26 >= 0
common/quant.c:177:5: note: not ssa-name.
common/quant.c:177:5: note: use not simple.
common/quant.c:177:5: note: vect_is_simple_use: operand level_26
common/quant.c:177:5: note: def_stmt: level_26 = level_14 - _25;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: vect_is_simple_use: operand iftmp.3_33
common/quant.c:177:5: note: def_stmt: iftmp.3_33 = (int16_t) _32;
common/quant.c:177:5: note: type of def: 3.
common/quant.c:177:5: note: not vectorized: relevant stmt not supported: iftmp.3_2 = level_26 >= 0 ? iftmp.3_33 : 0;
common/quant.c:177:5: note: bad operation or unsupported loop bound.
common/quant.c:174:13: note: vectorized 0 loops in function.
x264_denoise_dct (int16_t * dct, uint32_t * sum, uint16_t * offset, int size)
{
  int sign;
  int level;
  int i;
  int16_t iftmp.3_2;
  long unsigned int _6;
  long unsigned int _7;
  int16_t * _9;
  short int _10;
  int _13;
  long unsigned int _15;
  uint32_t * _17;
  unsigned int _18;
  unsigned int level.2_19;
  unsigned int _20;
  uint16_t * _23;
  short unsigned int _24;
  int _25;
  signed short _27;
  signed short _28;
  signed short _29;
  unsigned short _30;
  unsigned short _31;
  unsigned short _32;
  int16_t iftmp.3_33;

  <bb 2>:
  # DEBUG i => 1
  # DEBUG i => 1
  if (size_5(D) > 1)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # i_37 = PHI <1(4), i_35(7)>
  # DEBUG i => NULL
  _6 = (long unsigned int) i_37;
  _7 = _6 * 2;
  _9 = dct_8(D) + _7;
  _10 = *_9;
  level_11 = (int) _10;
  # DEBUG level => NULL
  sign_12 = level_11 >> 15;
  # DEBUG sign => NULL
  _13 = level_11 + sign_12;
  level_14 = sign_12 ^ _13;
  # DEBUG level => NULL
  _15 = _6 * 4;
  _17 = sum_16(D) + _15;
  _18 = *_17;
  level.2_19 = (unsigned int) level_14;
  _20 = _18 + level.2_19;
  *_17 = _20;
  _23 = offset_22(D) + _7;
  _24 = *_23;
  _25 = (int) _24;
  level_26 = level_14 - _25;
  # DEBUG level => NULL
  _27 = (signed short) level_26;
  _28 = (signed short) sign_12;
  _29 = _27 ^ _28;
  _30 = (unsigned short) _29;
  _31 = (unsigned short) sign_12;
  _32 = _30 - _31;
  iftmp.3_33 = (int16_t) _32;
  iftmp.3_2 = level_26 >= 0 ? iftmp.3_33 : 0;
  *_9 = iftmp.3_2;
  i_35 = i_37 + 1;
  # DEBUG i => i_35
  # DEBUG i => i_35
  if (size_5(D) > i_35)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  goto <bb 3>;

  <bb 7>:
  goto <bb 5>;

}



;; Function x264_decimate_score15 (x264_decimate_score15, funcdef_no=124, decl_uid=5990, cgraph_uid=124, symbol_order=169)


Analyzing loop at common/quant.c:220
common/quant.c:220:31: note: ===== analyze_loop_nest =====
common/quant.c:220:31: note: === vect_analyze_loop_form ===
common/quant.c:220:31: note: ===== analyze_loop_nest_1 =====
common/quant.c:220:31: note: === vect_analyze_loop_form ===
common/quant.c:220:31: note: not vectorized: control flow in loop.
common/quant.c:220:31: note: bad inner-loop form.
common/quant.c:220:31: note: not vectorized: Bad inner loop.
common/quant.c:220:31: note: bad loop form.

Analyzing loop at common/quant.c:226
common/quant.c:226:16: note: ===== analyze_loop_nest =====
common/quant.c:226:16: note: === vect_analyze_loop_form ===
common/quant.c:226:16: note: not vectorized: control flow in loop.
common/quant.c:226:16: note: bad loop form.

Analyzing loop at common/quant.c:212
common/quant.c:212:40: note: ===== analyze_loop_nest =====
common/quant.c:212:40: note: === vect_analyze_loop_form ===
common/quant.c:212:40: note: not vectorized: control flow in loop.
common/quant.c:212:40: note: bad loop form.
common/quant.c:235:12: note: vectorized 0 loops in function.
x264_decimate_score15 (int16_t * dct)
{
  int i_score;
  int idx;
  int i_run;
  int16_t * _2;
  int _4;
  unsigned int ivtmp_6;
  long unsigned int _8;
  long unsigned int _9;
  sizetype _10;
  int16_t * _11;
  unsigned int _12;
  int16_t * _15;
  short int _16;
  long unsigned int _20;
  long unsigned int _21;
  int16_t * _22;
  short int _23;
  int _24;
  int _25;
  unsigned int _26;
  long unsigned int _31;
  long unsigned int _32;
  int16_t * _33;
  short int _34;
  int _41;
  unsigned int _43;
  long unsigned int _47;
  short int _49;
  int _51;
  int16_t * _52;
  long unsigned int _53;
  long unsigned int _56;
  long unsigned int _57;
  int16_t * _58;
  short int _59;
  unsigned int ivtmp_62;
  long unsigned int _73;
  sizetype pretmp_81;
  const uint8_t[16] * pretmp_83;
  unsigned char pretmp_85;
  int pretmp_87;
  int prephitmp_88;
  sizetype pretmp_89;
  const uint8_t[16] * pretmp_91;
  unsigned char pretmp_93;
  int pretmp_95;
  int prephitmp_96;

  <bb 2>:
  _2 = dct_1(D) + 2;
  # DEBUG dct => _2
  # DEBUG i_max => 15
  # DEBUG ds_table => &x264_decimate_table4
  # DEBUG i_score => 0
  # DEBUG idx => 14
  # DEBUG idx => 14
  goto <bb 5>;

  <bb 3>:
  idx_7 = idx_54 + -2;
  # DEBUG idx => idx_7
  # DEBUG idx => idx_7
  ivtmp_62 = ivtmp_6 - 1;
  if (ivtmp_62 != 0)
    goto <bb 4>;
  else
    goto <bb 22>;

  <bb 4>:

  <bb 5>:
  # idx_54 = PHI <idx_7(4), 14(2)>
  # ivtmp_6 = PHI <ivtmp_62(4), 8(2)>
  # DEBUG idx => idx_54
  _8 = (long unsigned int) idx_54;
  _9 = _8 * 2;
  _10 = _9 + 18446744073709551614;
  _11 = _2 + _10;
  _12 = MEM[(uint32_t *)_11];
  if (_12 == 0)
    goto <bb 3>;
  else
    goto <bb 23>;

  <bb 6>:
  idx_17 = idx_68 + -1;
  # DEBUG idx => idx_17

  <bb 7>:
  # idx_5 = PHI <idx_17(6), idx_68(23)>
  # DEBUG idx => idx_5
  # DEBUG i_score => 0
  if (idx_5 >= 0)
    goto <bb 8>;
  else
    goto <bb 22>;

  <bb 8>:
  # DEBUG idx => idx_5
  # DEBUG i_score => 0
  idx_48 = idx_5 + -1;
  # DEBUG idx => idx_48
  _47 = (long unsigned int) idx_5;
  _53 = _47 * 2;
  _52 = _2 + _53;
  _49 = *_52;
  _51 = (int) _49;
  _4 = _51 + 1;
  _43 = (unsigned int) _4;
  if (_43 > 2)
    goto <bb 22>;
  else
    goto <bb 11>;

  <bb 9>:
  # DEBUG idx => idx_45
  # DEBUG i_score => i_score_40
  idx_19 = idx_45 + -1;
  # DEBUG idx => idx_19
  _20 = (long unsigned int) idx_45;
  _21 = _20 * 2;
  _22 = _2 + _21;
  _23 = *_22;
  _24 = (int) _23;
  _25 = _24 + 1;
  _26 = (unsigned int) _25;
  if (_26 > 2)
    goto <bb 22>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 12>;

  <bb 11>:

  <bb 12>:
  # idx_50 = PHI <idx_48(11), idx_19(10)>
  # i_score_63 = PHI <0(11), i_score_40(10)>
  # DEBUG i_score => i_score_63
  # DEBUG idx => idx_48
  # DEBUG i_run => 0
  # DEBUG idx => idx_50
  if (idx_50 != -1)
    goto <bb 13>;
  else
    goto <bb 24>;

  <bb 13>:
  _56 = (long unsigned int) idx_50;
  _57 = _56 * 2;
  _58 = _2 + _57;
  _59 = *_58;
  if (_59 == 0)
    goto <bb 14>;
  else
    goto <bb 20>;

  <bb 14>:

  <bb 15>:
  # idx_60 = PHI <idx_50(14), idx_28(18)>
  # i_run_61 = PHI <0(14), i_run_30(18)>
  # DEBUG i_run => i_run_61
  # DEBUG idx => idx_60
  idx_28 = idx_60 + -1;
  # DEBUG idx => idx_28
  i_run_30 = i_run_61 + 1;
  # DEBUG i_run => i_run_30
  # DEBUG i_run => i_run_30
  # DEBUG idx => idx_28
  if (idx_28 != -1)
    goto <bb 17>;
  else
    goto <bb 16>;

  <bb 16>:
  # i_run_71 = PHI <i_run_30(15)>
  # i_score_55 = PHI <i_score_63(15)>
  pretmp_81 = (sizetype) i_run_71;
  pretmp_83 = &x264_decimate_table4 + pretmp_81;
  pretmp_85 = MEM[(const uint8_t *)pretmp_83];
  pretmp_87 = (int) pretmp_85;
  goto <bb 25>;

  <bb 17>:
  _31 = (long unsigned int) idx_28;
  _32 = _31 * 2;
  _33 = _2 + _32;
  _34 = *_33;
  if (_34 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  goto <bb 15>;

  <bb 19>:
  # idx_72 = PHI <idx_28(17)>
  # i_run_70 = PHI <i_run_30(17)>
  pretmp_89 = (sizetype) i_run_70;
  pretmp_91 = &x264_decimate_table4 + pretmp_89;
  pretmp_93 = MEM[(const uint8_t *)pretmp_91];
  pretmp_95 = (int) pretmp_93;

  <bb 20>:
  # idx_45 = PHI <idx_50(13), idx_72(19)>
  # prephitmp_96 = PHI <3(13), pretmp_95(19)>
  i_score_40 = i_score_63 + prephitmp_96;
  # DEBUG i_score => i_score_40
  # DEBUG idx => idx_45
  # DEBUG i_score => i_score_40
  if (idx_45 >= 0)
    goto <bb 9>;
  else
    goto <bb 21>;

  <bb 21>:
  # i_score_69 = PHI <i_score_40(20)>

  <bb 22>:
  # _41 = PHI <9(9), i_score_69(21), 0(7), i_score_67(25), 0(3), 9(8)>
  # DEBUG dct => NULL
  # DEBUG i_max => NULL
  # DEBUG i_run => NULL
  # DEBUG idx => NULL
  # DEBUG i_score => NULL
  # DEBUG ds_table => NULL
  return _41;

  <bb 23>:
  # _73 = PHI <_9(5)>
  # idx_68 = PHI <idx_54(5)>
  _15 = _2 + _73;
  _16 = *_15;
  if (_16 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 24>:
  # i_score_44 = PHI <i_score_63(12)>

  <bb 25>:
  # prephitmp_88 = PHI <3(24), pretmp_87(16)>
  # i_score_42 = PHI <i_score_44(24), i_score_55(16)>
  i_score_67 = i_score_42 + prephitmp_88;
  # DEBUG i_score => i_score_67
  # DEBUG idx => -1
  # DEBUG i_score => i_score_67
  goto <bb 22>;

}



;; Function x264_decimate_score16 (x264_decimate_score16, funcdef_no=125, decl_uid=5993, cgraph_uid=125, symbol_order=170)


Analyzing loop at common/quant.c:220
common/quant.c:220:31: note: ===== analyze_loop_nest =====
common/quant.c:220:31: note: === vect_analyze_loop_form ===
common/quant.c:220:31: note: ===== analyze_loop_nest_1 =====
common/quant.c:220:31: note: === vect_analyze_loop_form ===
common/quant.c:220:31: note: not vectorized: control flow in loop.
common/quant.c:220:31: note: bad inner-loop form.
common/quant.c:220:31: note: not vectorized: Bad inner loop.
common/quant.c:220:31: note: bad loop form.

Analyzing loop at common/quant.c:226
common/quant.c:226:16: note: ===== analyze_loop_nest =====
common/quant.c:226:16: note: === vect_analyze_loop_form ===
common/quant.c:226:16: note: not vectorized: control flow in loop.
common/quant.c:226:16: note: bad loop form.

Analyzing loop at common/quant.c:212
common/quant.c:212:40: note: ===== analyze_loop_nest =====
common/quant.c:212:40: note: === vect_analyze_loop_form ===
common/quant.c:212:40: note: not vectorized: control flow in loop.
common/quant.c:212:40: note: bad loop form.
common/quant.c:239:12: note: vectorized 0 loops in function.
x264_decimate_score16 (int16_t * dct)
{
  int i_score;
  int idx;
  int i_run;
  int _3;
  unsigned int ivtmp_5;
  long unsigned int _7;
  long unsigned int _8;
  sizetype _9;
  int16_t * _10;
  unsigned int _11;
  int16_t * _14;
  short int _15;
  int _23;
  int _24;
  unsigned int _25;
  long unsigned int _30;
  long unsigned int _31;
  int16_t * _32;
  short int _33;
  int _40;
  unsigned int _42;
  long unsigned int _46;
  short int _48;
  int _50;
  int16_t * _51;
  long unsigned int _52;
  short int _54;
  long unsigned int _55;
  long unsigned int _56;
  int16_t * _57;
  short int _58;
  unsigned int ivtmp_68;
  long unsigned int _76;
  sizetype pretmp_84;
  const uint8_t[16] * pretmp_86;
  unsigned char pretmp_88;
  int pretmp_90;
  int prephitmp_91;
  short int prephitmp_95;
  sizetype pretmp_96;
  const uint8_t[16] * pretmp_98;
  unsigned char pretmp_100;
  int pretmp_102;
  int prephitmp_103;

  <bb 2>:
  # DEBUG dct => dct_2(D)
  # DEBUG i_max => 16
  # DEBUG ds_table => &x264_decimate_table4
  # DEBUG i_score => 0
  # DEBUG idx => 15
  # DEBUG idx => 15
  goto <bb 5>;

  <bb 3>:
  idx_6 = idx_53 + -2;
  # DEBUG idx => idx_6
  # DEBUG idx => idx_6
  ivtmp_5 = ivtmp_68 - 1;
  if (ivtmp_5 != 0)
    goto <bb 4>;
  else
    goto <bb 18>;

  <bb 4>:

  <bb 5>:
  # idx_53 = PHI <idx_6(4), 15(2)>
  # ivtmp_68 = PHI <ivtmp_5(4), 8(2)>
  # DEBUG idx => idx_53
  _7 = (long unsigned int) idx_53;
  _8 = _7 * 2;
  _9 = _8 + 18446744073709551614;
  _10 = dct_2(D) + _9;
  _11 = MEM[(uint32_t *)_10];
  if (_11 == 0)
    goto <bb 3>;
  else
    goto <bb 19>;

  <bb 6>:
  idx_16 = idx_44 + -1;
  # DEBUG idx => idx_16

  <bb 7>:
  # idx_4 = PHI <idx_16(6), idx_44(19)>
  # DEBUG idx => idx_4
  # DEBUG i_score => 0
  if (idx_4 != -1)
    goto <bb 8>;
  else
    goto <bb 18>;

  <bb 8>:
  # DEBUG idx => idx_4
  # DEBUG i_score => 0
  idx_47 = idx_4 + -1;
  # DEBUG idx => idx_47
  _46 = (long unsigned int) idx_4;
  _52 = _46 * 2;
  _51 = dct_2(D) + _52;
  _48 = *_51;
  _50 = (int) _48;
  _3 = _50 + 1;
  _42 = (unsigned int) _3;
  if (_42 > 2)
    goto <bb 18>;
  else
    goto <bb 9>;

  <bb 9>:

  <bb 10>:
  # idx_49 = PHI <idx_47(9), idx_18(23)>
  # i_score_62 = PHI <0(9), i_score_73(23)>
  # DEBUG i_score => i_score_62
  # DEBUG idx => idx_47
  # DEBUG i_run => 0
  # DEBUG idx => idx_49
  if (idx_49 != -1)
    goto <bb 11>;
  else
    goto <bb 20>;

  <bb 11>:
  _55 = (long unsigned int) idx_49;
  _56 = _55 * 2;
  _57 = dct_2(D) + _56;
  _58 = *_57;
  if (_58 == 0)
    goto <bb 12>;
  else
    goto <bb 22>;

  <bb 12>:

  <bb 13>:
  # idx_59 = PHI <idx_49(12), idx_27(16)>
  # i_run_60 = PHI <0(12), i_run_29(16)>
  # DEBUG i_run => i_run_60
  # DEBUG idx => idx_59
  idx_27 = idx_59 + -1;
  # DEBUG idx => idx_27
  i_run_29 = i_run_60 + 1;
  # DEBUG i_run => i_run_29
  # DEBUG i_run => i_run_29
  # DEBUG idx => idx_27
  if (idx_27 != -1)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:
  # i_run_74 = PHI <i_run_29(13)>
  # i_score_43 = PHI <i_score_62(13)>
  pretmp_84 = (sizetype) i_run_74;
  pretmp_86 = &x264_decimate_table4 + pretmp_84;
  pretmp_88 = MEM[(const uint8_t *)pretmp_86];
  pretmp_90 = (int) pretmp_88;
  goto <bb 21>;

  <bb 15>:
  _30 = (long unsigned int) idx_27;
  _31 = _30 * 2;
  _32 = dct_2(D) + _31;
  _33 = *_32;
  if (_33 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  goto <bb 13>;

  <bb 17>:
  # idx_75 = PHI <idx_27(15)>
  # i_run_61 = PHI <i_run_29(15)>
  # _54 = PHI <_33(15)>
  pretmp_96 = (sizetype) i_run_61;
  pretmp_98 = &x264_decimate_table4 + pretmp_96;
  pretmp_100 = MEM[(const uint8_t *)pretmp_98];
  pretmp_102 = (int) pretmp_100;
  goto <bb 22>;

  <bb 18>:
  # _40 = PHI <9(22), i_score_66(21), 0(7), 0(3), 9(8)>
  # DEBUG dct => NULL
  # DEBUG i_max => NULL
  # DEBUG i_run => NULL
  # DEBUG idx => NULL
  # DEBUG i_score => NULL
  # DEBUG ds_table => NULL
  return _40;

  <bb 19>:
  # _76 = PHI <_8(5)>
  # idx_44 = PHI <idx_53(5)>
  _14 = dct_2(D) + _76;
  _15 = *_14;
  if (_15 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 20>:
  # i_score_41 = PHI <i_score_62(10)>

  <bb 21>:
  # prephitmp_91 = PHI <3(20), pretmp_90(14)>
  # i_score_39 = PHI <i_score_41(20), i_score_43(14)>
  i_score_66 = i_score_39 + prephitmp_91;
  # DEBUG i_score => i_score_66
  # DEBUG idx => -1
  # DEBUG i_score => i_score_66
  goto <bb 18>;

  <bb 22>:
  # idx_67 = PHI <idx_49(11), idx_75(17)>
  # prephitmp_95 = PHI <_58(11), _54(17)>
  # prephitmp_103 = PHI <3(11), pretmp_102(17)>
  i_score_73 = i_score_62 + prephitmp_103;
  # DEBUG i_score => i_score_73
  # DEBUG idx => idx_67
  # DEBUG i_score => i_score_73
  # DEBUG idx => idx_67
  # DEBUG i_score => i_score_73
  idx_18 = idx_67 + -1;
  # DEBUG idx => idx_18
  _23 = (int) prephitmp_95;
  _24 = _23 + 1;
  _25 = (unsigned int) _24;
  if (_25 > 2)
    goto <bb 18>;
  else
    goto <bb 23>;

  <bb 23>:
  goto <bb 10>;

}



;; Function x264_decimate_score64 (x264_decimate_score64, funcdef_no=126, decl_uid=5996, cgraph_uid=126, symbol_order=171)


Analyzing loop at common/quant.c:220
common/quant.c:220:31: note: ===== analyze_loop_nest =====
common/quant.c:220:31: note: === vect_analyze_loop_form ===
common/quant.c:220:31: note: ===== analyze_loop_nest_1 =====
common/quant.c:220:31: note: === vect_analyze_loop_form ===
common/quant.c:220:31: note: not vectorized: control flow in loop.
common/quant.c:220:31: note: bad inner-loop form.
common/quant.c:220:31: note: not vectorized: Bad inner loop.
common/quant.c:220:31: note: bad loop form.

Analyzing loop at common/quant.c:226
common/quant.c:226:16: note: ===== analyze_loop_nest =====
common/quant.c:226:16: note: === vect_analyze_loop_form ===
common/quant.c:226:16: note: not vectorized: control flow in loop.
common/quant.c:226:16: note: bad loop form.

Analyzing loop at common/quant.c:212
common/quant.c:212:40: note: ===== analyze_loop_nest =====
common/quant.c:212:40: note: === vect_analyze_loop_form ===
common/quant.c:212:40: note: not vectorized: control flow in loop.
common/quant.c:212:40: note: bad loop form.
common/quant.c:243:12: note: vectorized 0 loops in function.
x264_decimate_score64 (int16_t * dct)
{
  int i_score;
  int idx;
  int i_run;
  int _3;
  unsigned int ivtmp_5;
  long unsigned int _7;
  long unsigned int _8;
  sizetype _9;
  int16_t * _10;
  unsigned int _11;
  int16_t * _14;
  short int _15;
  int _23;
  int _24;
  unsigned int _25;
  long unsigned int _30;
  long unsigned int _31;
  int16_t * _32;
  short int _33;
  int _40;
  unsigned int _42;
  long unsigned int _46;
  short int _48;
  int _50;
  int16_t * _51;
  long unsigned int _52;
  short int _54;
  long unsigned int _55;
  long unsigned int _56;
  int16_t * _57;
  short int _58;
  unsigned int ivtmp_68;
  long unsigned int _76;
  sizetype pretmp_84;
  const uint8_t[64] * pretmp_86;
  unsigned char pretmp_88;
  int pretmp_90;
  int prephitmp_91;
  short int prephitmp_95;
  sizetype pretmp_96;
  const uint8_t[64] * pretmp_98;
  unsigned char pretmp_100;
  int pretmp_102;
  int prephitmp_103;

  <bb 2>:
  # DEBUG dct => dct_2(D)
  # DEBUG i_max => 64
  # DEBUG ds_table => &x264_decimate_table8
  # DEBUG i_score => 0
  # DEBUG idx => 63
  # DEBUG idx => 63
  goto <bb 5>;

  <bb 3>:
  idx_6 = idx_53 + -2;
  # DEBUG idx => idx_6
  # DEBUG idx => idx_6
  ivtmp_5 = ivtmp_68 - 1;
  if (ivtmp_5 != 0)
    goto <bb 4>;
  else
    goto <bb 18>;

  <bb 4>:

  <bb 5>:
  # idx_53 = PHI <idx_6(4), 63(2)>
  # ivtmp_68 = PHI <ivtmp_5(4), 32(2)>
  # DEBUG idx => idx_53
  _7 = (long unsigned int) idx_53;
  _8 = _7 * 2;
  _9 = _8 + 18446744073709551614;
  _10 = dct_2(D) + _9;
  _11 = MEM[(uint32_t *)_10];
  if (_11 == 0)
    goto <bb 3>;
  else
    goto <bb 19>;

  <bb 6>:
  idx_16 = idx_44 + -1;
  # DEBUG idx => idx_16

  <bb 7>:
  # idx_4 = PHI <idx_16(6), idx_44(19)>
  # DEBUG idx => idx_4
  # DEBUG i_score => 0
  if (idx_4 != -1)
    goto <bb 8>;
  else
    goto <bb 18>;

  <bb 8>:
  # DEBUG idx => idx_4
  # DEBUG i_score => 0
  idx_47 = idx_4 + -1;
  # DEBUG idx => idx_47
  _46 = (long unsigned int) idx_4;
  _52 = _46 * 2;
  _51 = dct_2(D) + _52;
  _48 = *_51;
  _50 = (int) _48;
  _3 = _50 + 1;
  _42 = (unsigned int) _3;
  if (_42 > 2)
    goto <bb 18>;
  else
    goto <bb 9>;

  <bb 9>:

  <bb 10>:
  # idx_49 = PHI <idx_47(9), idx_18(23)>
  # i_score_62 = PHI <0(9), i_score_73(23)>
  # DEBUG i_score => i_score_62
  # DEBUG idx => idx_47
  # DEBUG i_run => 0
  # DEBUG idx => idx_49
  if (idx_49 != -1)
    goto <bb 11>;
  else
    goto <bb 20>;

  <bb 11>:
  _55 = (long unsigned int) idx_49;
  _56 = _55 * 2;
  _57 = dct_2(D) + _56;
  _58 = *_57;
  if (_58 == 0)
    goto <bb 12>;
  else
    goto <bb 22>;

  <bb 12>:

  <bb 13>:
  # idx_59 = PHI <idx_49(12), idx_27(16)>
  # i_run_60 = PHI <0(12), i_run_29(16)>
  # DEBUG i_run => i_run_60
  # DEBUG idx => idx_59
  idx_27 = idx_59 + -1;
  # DEBUG idx => idx_27
  i_run_29 = i_run_60 + 1;
  # DEBUG i_run => i_run_29
  # DEBUG i_run => i_run_29
  # DEBUG idx => idx_27
  if (idx_27 != -1)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:
  # i_run_74 = PHI <i_run_29(13)>
  # i_score_43 = PHI <i_score_62(13)>
  pretmp_84 = (sizetype) i_run_74;
  pretmp_86 = &x264_decimate_table8 + pretmp_84;
  pretmp_88 = MEM[(const uint8_t *)pretmp_86];
  pretmp_90 = (int) pretmp_88;
  goto <bb 21>;

  <bb 15>:
  _30 = (long unsigned int) idx_27;
  _31 = _30 * 2;
  _32 = dct_2(D) + _31;
  _33 = *_32;
  if (_33 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  goto <bb 13>;

  <bb 17>:
  # idx_75 = PHI <idx_27(15)>
  # i_run_61 = PHI <i_run_29(15)>
  # _54 = PHI <_33(15)>
  pretmp_96 = (sizetype) i_run_61;
  pretmp_98 = &x264_decimate_table8 + pretmp_96;
  pretmp_100 = MEM[(const uint8_t *)pretmp_98];
  pretmp_102 = (int) pretmp_100;
  goto <bb 22>;

  <bb 18>:
  # _40 = PHI <9(22), i_score_66(21), 0(7), 0(3), 9(8)>
  # DEBUG dct => NULL
  # DEBUG i_max => NULL
  # DEBUG i_run => NULL
  # DEBUG idx => NULL
  # DEBUG i_score => NULL
  # DEBUG ds_table => NULL
  return _40;

  <bb 19>:
  # _76 = PHI <_8(5)>
  # idx_44 = PHI <idx_53(5)>
  _14 = dct_2(D) + _76;
  _15 = *_14;
  if (_15 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 20>:
  # i_score_41 = PHI <i_score_62(10)>

  <bb 21>:
  # prephitmp_91 = PHI <3(20), pretmp_90(14)>
  # i_score_39 = PHI <i_score_41(20), i_score_43(14)>
  i_score_66 = i_score_39 + prephitmp_91;
  # DEBUG i_score => i_score_66
  # DEBUG idx => -1
  # DEBUG i_score => i_score_66
  goto <bb 18>;

  <bb 22>:
  # idx_67 = PHI <idx_49(11), idx_75(17)>
  # prephitmp_95 = PHI <_58(11), _54(17)>
  # prephitmp_103 = PHI <3(11), pretmp_102(17)>
  i_score_73 = i_score_62 + prephitmp_103;
  # DEBUG i_score => i_score_73
  # DEBUG idx => idx_67
  # DEBUG i_score => i_score_73
  # DEBUG idx => idx_67
  # DEBUG i_score => i_score_73
  idx_18 = idx_67 + -1;
  # DEBUG idx => idx_18
  _23 = (int) prephitmp_95;
  _24 = _23 + 1;
  _25 = (unsigned int) _24;
  if (_25 > 2)
    goto <bb 18>;
  else
    goto <bb 23>;

  <bb 23>:
  goto <bb 10>;

}



;; Function x264_coeff_last4 (x264_coeff_last4, funcdef_no=128, decl_uid=6010, cgraph_uid=128, symbol_order=173)


Analyzing loop at common/quant.c:254
common/quant.c:254:28: note: ===== analyze_loop_nest =====
common/quant.c:254:28: note: === vect_analyze_loop_form ===
common/quant.c:254:28: note: not vectorized: control flow in loop.
common/quant.c:254:28: note: bad loop form.
common/quant.c:259:12: note: vectorized 0 loops in function.
x264_coeff_last4 (int16_t * l)
{
  int i_last;
  unsigned int ivtmp_5;
  long unsigned int _12;
  long unsigned int _13;
  int16_t * _14;
  short int _15;
  unsigned int ivtmp_18;
  short int _20;
  long unsigned int _22;

  <bb 2>:
  # DEBUG l => l_2(D)
  # DEBUG i_count => 4
  # DEBUG i_last => 3
  # DEBUG i_last => 3
  _22 = MEM[(uint64_t *)l_2(D)];
  if (_22 != 0)
    goto <bb 3>;
  else
    goto <bb 9>;

  <bb 3>:
  # DEBUG i_last => 3
  # DEBUG i_last => 3
  _20 = MEM[(int16_t *)l_2(D) + 6B];
  if (_20 == 0)
    goto <bb 4>;
  else
    goto <bb 9>;

  <bb 4>:
  goto <bb 7>;

  <bb 5>:
  # DEBUG i_last => i_last_6
  i_last_11 = i_last_6 + -1;
  # DEBUG i_last => i_last_11
  # DEBUG i_last => i_last_11
  ivtmp_5 = ivtmp_18 - 1;
  if (ivtmp_5 != 0)
    goto <bb 6>;
  else
    goto <bb 9>;

  <bb 6>:

  <bb 7>:
  # i_last_6 = PHI <i_last_11(6), 2(4)>
  # ivtmp_18 = PHI <ivtmp_5(6), 3(4)>
  # DEBUG i_last => i_last_6
  _12 = (long unsigned int) i_last_6;
  _13 = _12 * 2;
  _14 = l_2(D) + _13;
  _15 = *_14;
  if (_15 == 0)
    goto <bb 5>;
  else
    goto <bb 8>;

  <bb 8>:
  # i_last_19 = PHI <i_last_6(7)>

  <bb 9>:
  # i_last_21 = PHI <-1(5), i_last_19(8), 3(3), -1(2)>
  # DEBUG l => NULL
  # DEBUG i_count => NULL
  # DEBUG i_last => NULL
  return i_last_21;

}



;; Function x264_coeff_last15 (x264_coeff_last15, funcdef_no=129, decl_uid=6013, cgraph_uid=129, symbol_order=174)


Analyzing loop at common/quant.c:254
common/quant.c:254:28: note: ===== analyze_loop_nest =====
common/quant.c:254:28: note: === vect_analyze_loop_form ===
common/quant.c:254:28: note: not vectorized: control flow in loop.
common/quant.c:254:28: note: bad loop form.
common/quant.c:263:12: note: vectorized 0 loops in function.
x264_coeff_last15 (int16_t * l)
{
  int i_last;
  long unsigned int _12;
  long unsigned int _13;
  int16_t * _14;
  short int _15;
  long unsigned int _22;
  long unsigned int _29;
  long unsigned int _36;

  <bb 2>:
  # DEBUG l => l_2(D)
  # DEBUG i_count => 15
  # DEBUG i_last => 14
  # DEBUG i_last => 14
  _22 = MEM[(uint64_t *)l_2(D) + 22B];
  if (_22 != 0)
    goto <bb 6>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG i_last => 10
  # DEBUG i_last => 10
  _29 = MEM[(uint64_t *)l_2(D) + 14B];
  if (_29 != 0)
    goto <bb 6>;
  else
    goto <bb 4>;

  <bb 4>:
  # DEBUG i_last => 6
  # DEBUG i_last => 6
  _36 = MEM[(uint64_t *)l_2(D) + 6B];
  if (_36 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:

  <bb 6>:
  # i_last_16 = PHI <2(4), 6(5), 10(3), 14(2)>
  # DEBUG i_last => i_last_16
  goto <bb 10>;

  <bb 7>:
  i_last_11 = i_last_27 + -1;
  # DEBUG i_last => i_last_11
  # DEBUG i_last => i_last_11
  if (i_last_11 >= 0)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  # i_last_35 = PHI <i_last_11(7)>
  goto <bb 12>;

  <bb 9>:

  <bb 10>:
  # i_last_27 = PHI <i_last_11(9), i_last_16(6)>
  # DEBUG i_last => i_last_27
  _12 = (long unsigned int) i_last_27;
  _13 = _12 * 2;
  _14 = l_2(D) + _13;
  _15 = *_14;
  if (_15 == 0)
    goto <bb 7>;
  else
    goto <bb 11>;

  <bb 11>:
  # i_last_32 = PHI <i_last_27(10)>

  <bb 12>:
  # i_last_20 = PHI <i_last_35(8), i_last_32(11)>
  # DEBUG l => NULL
  # DEBUG i_count => NULL
  # DEBUG i_last => NULL
  return i_last_20;

}



;; Function x264_coeff_last16 (x264_coeff_last16, funcdef_no=130, decl_uid=6016, cgraph_uid=130, symbol_order=175)


Analyzing loop at common/quant.c:255
common/quant.c:255:15: note: ===== analyze_loop_nest =====
common/quant.c:255:15: note: === vect_analyze_loop_form ===
common/quant.c:255:15: note: not vectorized: control flow in loop.
common/quant.c:255:15: note: bad loop form.

Analyzing loop at common/quant.c:252
common/quant.c:252:34: note: ===== analyze_loop_nest =====
common/quant.c:252:34: note: === vect_analyze_loop_form ===
common/quant.c:252:34: note: not vectorized: control flow in loop.
common/quant.c:252:34: note: bad loop form.
common/quant.c:267:12: note: vectorized 0 loops in function.
x264_coeff_last16 (int16_t * l)
{
  int i_last;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  sizetype _6;
  int16_t * _7;
  long unsigned int _8;
  unsigned int ivtmp_10;
  long unsigned int _12;
  long unsigned int _13;
  int16_t * _14;
  short int _15;
  int16_t * _18;
  long unsigned int _19;
  unsigned int ivtmp_20;
  short int _22;

  <bb 2>:
  # DEBUG l => l_2(D)
  # DEBUG i_count => 16
  # DEBUG i_last => 15
  # DEBUG i_last => 15

  <bb 3>:
  # i_last_21 = PHI <i_last_9(6), 15(2)>
  # ivtmp_20 = PHI <ivtmp_10(6), 4(2)>
  # DEBUG i_last => i_last_21
  _4 = (long unsigned int) i_last_21;
  _5 = _4 * 2;
  _6 = _5 + 18446744073709551610;
  _7 = l_2(D) + _6;
  _8 = MEM[(uint64_t *)_7];
  if (_8 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  # i_last_24 = PHI <i_last_21(3)>
  goto <bb 8>;

  <bb 5>:
  i_last_9 = i_last_21 + -4;
  # DEBUG i_last => i_last_9
  # DEBUG i_last => i_last_9
  ivtmp_10 = ivtmp_20 - 1;
  if (ivtmp_10 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  goto <bb 3>;

  <bb 7>:
  # i_last_26 = PHI <i_last_9(5)>

  <bb 8>:
  # i_last_16 = PHI <i_last_26(7), i_last_24(4)>
  # DEBUG i_last => i_last_16
  if (i_last_16 != -1)
    goto <bb 9>;
  else
    goto <bb 15>;

  <bb 9>:
  # DEBUG i_last => i_last_16
  _3 = (long unsigned int) i_last_16;
  _19 = _3 * 2;
  _18 = l_2(D) + _19;
  _22 = *_18;
  if (_22 == 0)
    goto <bb 10>;
  else
    goto <bb 15>;

  <bb 10>:

  <bb 11>:
  # i_last_23 = PHI <i_last_16(10), i_last_11(13)>
  # DEBUG i_last => i_last_23
  i_last_11 = i_last_23 + -1;
  # DEBUG i_last => i_last_11
  # DEBUG i_last => i_last_11
  if (i_last_11 != -1)
    goto <bb 12>;
  else
    goto <bb 15>;

  <bb 12>:
  # DEBUG i_last => i_last_11
  _12 = (long unsigned int) i_last_11;
  _13 = _12 * 2;
  _14 = l_2(D) + _13;
  _15 = *_14;
  if (_15 == 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  goto <bb 11>;

  <bb 14>:
  # i_last_25 = PHI <i_last_11(12)>

  <bb 15>:
  # i_last_17 = PHI <i_last_16(9), i_last_25(14), -1(11), -1(8)>
  # DEBUG l => NULL
  # DEBUG i_count => NULL
  # DEBUG i_last => NULL
  return i_last_17;

}



;; Function x264_coeff_last64 (x264_coeff_last64, funcdef_no=131, decl_uid=6019, cgraph_uid=131, symbol_order=176)


Analyzing loop at common/quant.c:255
common/quant.c:255:15: note: ===== analyze_loop_nest =====
common/quant.c:255:15: note: === vect_analyze_loop_form ===
common/quant.c:255:15: note: not vectorized: control flow in loop.
common/quant.c:255:15: note: bad loop form.

Analyzing loop at common/quant.c:252
common/quant.c:252:34: note: ===== analyze_loop_nest =====
common/quant.c:252:34: note: === vect_analyze_loop_form ===
common/quant.c:252:34: note: not vectorized: control flow in loop.
common/quant.c:252:34: note: bad loop form.
common/quant.c:271:12: note: vectorized 0 loops in function.
x264_coeff_last64 (int16_t * l)
{
  int i_last;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  sizetype _6;
  int16_t * _7;
  long unsigned int _8;
  unsigned int ivtmp_10;
  long unsigned int _12;
  long unsigned int _13;
  int16_t * _14;
  short int _15;
  int16_t * _18;
  long unsigned int _19;
  unsigned int ivtmp_20;
  short int _22;

  <bb 2>:
  # DEBUG l => l_2(D)
  # DEBUG i_count => 64
  # DEBUG i_last => 63
  # DEBUG i_last => 63

  <bb 3>:
  # i_last_21 = PHI <i_last_9(6), 63(2)>
  # ivtmp_20 = PHI <ivtmp_10(6), 16(2)>
  # DEBUG i_last => i_last_21
  _4 = (long unsigned int) i_last_21;
  _5 = _4 * 2;
  _6 = _5 + 18446744073709551610;
  _7 = l_2(D) + _6;
  _8 = MEM[(uint64_t *)_7];
  if (_8 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  # i_last_24 = PHI <i_last_21(3)>
  goto <bb 8>;

  <bb 5>:
  i_last_9 = i_last_21 + -4;
  # DEBUG i_last => i_last_9
  # DEBUG i_last => i_last_9
  ivtmp_10 = ivtmp_20 - 1;
  if (ivtmp_10 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  goto <bb 3>;

  <bb 7>:
  # i_last_26 = PHI <i_last_9(5)>

  <bb 8>:
  # i_last_16 = PHI <i_last_26(7), i_last_24(4)>
  # DEBUG i_last => i_last_16
  if (i_last_16 != -1)
    goto <bb 9>;
  else
    goto <bb 15>;

  <bb 9>:
  # DEBUG i_last => i_last_16
  _3 = (long unsigned int) i_last_16;
  _19 = _3 * 2;
  _18 = l_2(D) + _19;
  _22 = *_18;
  if (_22 == 0)
    goto <bb 10>;
  else
    goto <bb 15>;

  <bb 10>:

  <bb 11>:
  # i_last_23 = PHI <i_last_16(10), i_last_11(13)>
  # DEBUG i_last => i_last_23
  i_last_11 = i_last_23 + -1;
  # DEBUG i_last => i_last_11
  # DEBUG i_last => i_last_11
  if (i_last_11 != -1)
    goto <bb 12>;
  else
    goto <bb 15>;

  <bb 12>:
  # DEBUG i_last => i_last_11
  _12 = (long unsigned int) i_last_11;
  _13 = _12 * 2;
  _14 = l_2(D) + _13;
  _15 = *_14;
  if (_15 == 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  goto <bb 11>;

  <bb 14>:
  # i_last_25 = PHI <i_last_11(12)>

  <bb 15>:
  # i_last_17 = PHI <i_last_16(9), i_last_25(14), -1(11), -1(8)>
  # DEBUG l => NULL
  # DEBUG i_count => NULL
  # DEBUG i_last => NULL
  return i_last_17;

}


