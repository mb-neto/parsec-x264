
;; Function get_ref (get_ref, funcdef_no=131, decl_uid=5956, cgraph_uid=131, symbol_order=176)


Analyzing loop at common/mc.c:40
common/mc.c:40:5: note: ===== analyze_loop_nest =====
common/mc.c:40:5: note: === vect_analyze_loop_form ===
common/mc.c:40:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:40:5: note: === vect_analyze_loop_form ===
common/mc.c:40:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) < i_width_42(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) i_width_42(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:40:5: note: Symbolic number of iterations is (unsigned int) i_width_42(D)
common/mc.c:40:5: note: not vectorized: control flow in loop.
common/mc.c:40:5: note: bad loop form.

Analyzing loop at common/mc.c:42
common/mc.c:42:9: note: ===== analyze_loop_nest =====
common/mc.c:42:9: note: === vect_analyze_loop_form ===
common/mc.c:42:9: note: === get_loop_niters ===
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:42:9: note: Symbolic number of iterations is (unsigned int) i_width_42(D)
common/mc.c:42:9: note: === vect_analyze_data_refs ===
Creating dr for *_51
analyze_innermost: success.
	base_address: src1_83
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *src1_83
	Access function 0: {0B, +, 1}_2
Creating dr for *_55
analyze_innermost: success.
	base_address: src2_84
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *src2_84
	Access function 0: {0B, +, 1}_2
Creating dr for *_49
analyze_innermost: success.
	base_address: dst_82
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *dst_82
	Access function 0: {0B, +, 1}_2
common/mc.c:42:9: note: got vectype for stmt: _52 = *_51;
vector(16) unsigned char
common/mc.c:42:9: note: got vectype for stmt: _56 = *_55;
vector(16) unsigned char
common/mc.c:42:9: note: got vectype for stmt: *_49 = _61;
vector(16) unsigned char
common/mc.c:42:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:42:9: note: Analyze phi: .MEM_79 = PHI <.MEM_72(6), .MEM_71(8)>

common/mc.c:42:9: note: Analyze phi: x_81 = PHI <0(6), x_62(8)>

common/mc.c:42:9: note: Access function of PHI: {0, +, 1}_2
common/mc.c:42:9: note: step: 1,  init: 0
common/mc.c:42:9: note: Detected induction.
common/mc.c:42:9: note: === vect_pattern_recog ===
common/mc.c:42:9: note: vect_is_simple_use: operand _59
common/mc.c:42:9: note: def_stmt: _59 = _58 + 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:42:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:42:9: note: init: phi relevant? .MEM_79 = PHI <.MEM_72(6), .MEM_71(8)>
common/mc.c:42:9: note: init: phi relevant? x_81 = PHI <0(6), x_62(8)>
common/mc.c:42:9: note: init: stmt relevant? # DEBUG x => x_81
common/mc.c:42:9: note: init: stmt relevant? _47 = (sizetype) x_81;
common/mc.c:42:9: note: init: stmt relevant? _49 = dst_82 + _47;
common/mc.c:42:9: note: init: stmt relevant? _51 = src1_83 + _47;
common/mc.c:42:9: note: init: stmt relevant? _52 = *_51;
common/mc.c:42:9: note: init: stmt relevant? _53 = (int) _52;
common/mc.c:42:9: note: init: stmt relevant? _55 = src2_84 + _47;
common/mc.c:42:9: note: init: stmt relevant? _56 = *_55;
common/mc.c:42:9: note: init: stmt relevant? _57 = (int) _56;
common/mc.c:42:9: note: init: stmt relevant? _58 = _53 + _57;
common/mc.c:42:9: note: init: stmt relevant? _59 = _58 + 1;
common/mc.c:42:9: note: init: stmt relevant? _60 = _59 >> 1;
common/mc.c:42:9: note: init: stmt relevant? _61 = (unsigned char) _60;
common/mc.c:42:9: note: init: stmt relevant? *_49 = _61;
common/mc.c:42:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: init: stmt relevant? x_62 = x_81 + 1;
common/mc.c:42:9: note: init: stmt relevant? # DEBUG x => x_62
common/mc.c:42:9: note: init: stmt relevant? # DEBUG x => x_62
common/mc.c:42:9: note: init: stmt relevant? if (i_width_42(D) > x_62)
common/mc.c:42:9: note: worklist: examine stmt: *_49 = _61;
common/mc.c:42:9: note: vect_is_simple_use: operand _61
common/mc.c:42:9: note: def_stmt: _61 = (unsigned char) _60;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _61 = (unsigned char) _60;
common/mc.c:42:9: note: vect_is_simple_use: operand _60
common/mc.c:42:9: note: def_stmt: _60 = _59 >> 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _60 = _59 >> 1;
common/mc.c:42:9: note: vect_is_simple_use: operand _59
common/mc.c:42:9: note: def_stmt: _59 = _58 + 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _59 = _58 + 1;
common/mc.c:42:9: note: vect_is_simple_use: operand _58
common/mc.c:42:9: note: def_stmt: _58 = _53 + _57;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _58 = _53 + _57;
common/mc.c:42:9: note: vect_is_simple_use: operand _53
common/mc.c:42:9: note: def_stmt: _53 = (int) _52;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: vect_is_simple_use: operand _57
common/mc.c:42:9: note: def_stmt: _57 = (int) _56;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _57 = (int) _56;
common/mc.c:42:9: note: vect_is_simple_use: operand _56
common/mc.c:42:9: note: def_stmt: _56 = *_55;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _56 = *_55;
common/mc.c:42:9: note: worklist: examine stmt: _53 = (int) _52;
common/mc.c:42:9: note: vect_is_simple_use: operand _52
common/mc.c:42:9: note: def_stmt: _52 = *_51;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _52 = *_51;
common/mc.c:42:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _56 = *_55;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: *_49 = _61;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _56 = *_55;
  stmt_b: *_49 = _61;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _52 = *_51;
  stmt_b: _52 = *_51;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _56 = *_55;
  stmt_b: _56 = *_55;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_49 = _61;
  stmt_b: *_49 = _61;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:42:9: note: versioning for alias required: can't determine dependence between *_51 and *_49
common/mc.c:42:9: note: mark for run-time aliasing test between *_51 and *_49
common/mc.c:42:9: note: versioning for alias required: can't determine dependence between *_55 and *_49
common/mc.c:42:9: note: mark for run-time aliasing test between *_55 and *_49
common/mc.c:42:9: note: === vect_determine_vectorization_factor ===
common/mc.c:42:9: note: ==> examining phi: .MEM_79 = PHI <.MEM_72(6), .MEM_71(8)>

common/mc.c:42:9: note: ==> examining phi: x_81 = PHI <0(6), x_62(8)>

common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_81

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: _47 = (sizetype) x_81;

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: _49 = dst_82 + _47;

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: _51 = src1_83 + _47;

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: _52 = *_51;

common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: _53 = (int) _52;

common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: _55 = src2_84 + _47;

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: _56 = *_55;

common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: _57 = (int) _56;

common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: _58 = _53 + _57;

common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: nunits = 4
common/mc.c:42:9: note: ==> examining statement: _59 = _58 + 1;

common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: nunits = 4
common/mc.c:42:9: note: ==> examining statement: _60 = _59 >> 1;

common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: nunits = 4
common/mc.c:42:9: note: ==> examining statement: _61 = (unsigned char) _60;

common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: *_49 = _61;

common/mc.c:42:9: note: get vectype for scalar type:  uint8_t
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: x_62 = x_81 + 1;

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_62

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_62

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: if (i_width_42(D) > x_62)

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: vectorization factor = 16
common/mc.c:42:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:42:9: note: vect_compute_data_ref_alignment:
common/mc.c:42:9: note: can't force alignment of ref: *_51
common/mc.c:42:9: note: vect_compute_data_ref_alignment:
common/mc.c:42:9: note: can't force alignment of ref: *_55
common/mc.c:42:9: note: vect_compute_data_ref_alignment:
common/mc.c:42:9: note: can't force alignment of ref: *_49
common/mc.c:42:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:42:9: note: improved number of alias checks from 2 to 2
common/mc.c:42:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:42:9: note: Unknown misalignment, is_packed = 0
common/mc.c:42:9: note: Unknown misalignment, is_packed = 0
common/mc.c:42:9: note: Unknown misalignment, is_packed = 0
common/mc.c:42:9: note: vect_can_advance_ivs_p:
common/mc.c:42:9: note: Analyze phi: .MEM_79 = PHI <.MEM_72(6), .MEM_71(8)>

common/mc.c:42:9: note: virtual phi. skip.
common/mc.c:42:9: note: Analyze phi: x_81 = PHI <0(6), x_62(8)>

common/mc.c:42:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:42:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/mc.c:42:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:42:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/mc.c:42:9: note: Setting misalignment to -1.
common/mc.c:42:9: note: Setting misalignment to -1.
common/mc.c:42:9: note: Disable peeling, max peels reached: 15
common/mc.c:42:9: note: Vectorizing an unaligned access.
common/mc.c:42:9: note: Vectorizing an unaligned access.
common/mc.c:42:9: note: Vectorizing an unaligned access.
common/mc.c:42:9: note: === vect_analyze_slp ===
common/mc.c:42:9: note: === vect_make_slp_decision ===
common/mc.c:42:9: note: === vect_detect_hybrid_slp ===
common/mc.c:42:9: note: === vect_analyze_loop_operations ===
common/mc.c:42:9: note: examining phi: .MEM_79 = PHI <.MEM_72(6), .MEM_71(8)>

common/mc.c:42:9: note: examining phi: x_81 = PHI <0(6), x_62(8)>

common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_81
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: _47 = (sizetype) x_81;
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: _49 = dst_82 + _47;
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: _51 = src1_83 + _47;
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: _52 = *_51;
common/mc.c:42:9: note: vect_is_simple_use: operand *_51
common/mc.c:42:9: note: not ssa-name.
common/mc.c:42:9: note: use not simple.
common/mc.c:42:9: note: vect_is_simple_use: operand *_51
common/mc.c:42:9: note: not ssa-name.
common/mc.c:42:9: note: use not simple.
common/mc.c:42:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:42:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: _53 = (int) _52;
common/mc.c:42:9: note: vect_is_simple_use: operand _52
common/mc.c:42:9: note: def_stmt: _52 = *_51;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: === vectorizable_conversion ===
common/mc.c:42:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: _55 = src2_84 + _47;
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: _56 = *_55;
common/mc.c:42:9: note: vect_is_simple_use: operand *_55
common/mc.c:42:9: note: not ssa-name.
common/mc.c:42:9: note: use not simple.
common/mc.c:42:9: note: vect_is_simple_use: operand *_55
common/mc.c:42:9: note: not ssa-name.
common/mc.c:42:9: note: use not simple.
common/mc.c:42:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:42:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: _57 = (int) _56;
common/mc.c:42:9: note: vect_is_simple_use: operand _56
common/mc.c:42:9: note: def_stmt: _56 = *_55;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: === vectorizable_conversion ===
common/mc.c:42:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: _58 = _53 + _57;
common/mc.c:42:9: note: vect_is_simple_use: operand _53
common/mc.c:42:9: note: def_stmt: _53 = (int) _52;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand _57
common/mc.c:42:9: note: def_stmt: _57 = (int) _56;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: === vectorizable_operation ===
common/mc.c:42:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: _59 = _58 + 1;
common/mc.c:42:9: note: vect_is_simple_use: operand _58
common/mc.c:42:9: note: def_stmt: _58 = _53 + _57;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand 1
common/mc.c:42:9: note: === vectorizable_operation ===
common/mc.c:42:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:42:9: note: ==> examining statement: _60 = _59 >> 1;
common/mc.c:42:9: note: vect_is_simple_use: operand _59
common/mc.c:42:9: note: def_stmt: _59 = _58 + 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand 1
common/mc.c:42:9: note: vector/scalar shift/rotate found.
common/mc.c:42:9: note: === vectorizable_shift ===
common/mc.c:42:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:42:9: note: ==> examining statement: _61 = (unsigned char) _60;
common/mc.c:42:9: note: vect_is_simple_use: operand _60
common/mc.c:42:9: note: def_stmt: _60 = _59 >> 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: === vectorizable_conversion ===
common/mc.c:42:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: *_49 = _61;
common/mc.c:42:9: note: vect_is_simple_use: operand _61
common/mc.c:42:9: note: def_stmt: _61 = (unsigned char) _60;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:42:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: x_62 = x_81 + 1;
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_62
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_62
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: if (i_width_42(D) > x_62)
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
common/mc.c:42:9: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
common/mc.c:42:9: note: Cost model analysis: 
  Vector inside of loop cost: 33
  Vector prologue cost: 13
  Vector epilogue cost: 72
  Scalar iteration cost: 9
  Scalar outside cost: 1
  Vector outside cost: 85
  prologue iterations: 0
  epilogue iterations: 8
  Calculated minimum iters for profitability: 10
common/mc.c:42:9: note:   Runtime profitability threshold = 15
common/mc.c:42:9: note:   Static estimate profitability threshold = 15
common/mc.c:42:9: note: epilog loop required
common/mc.c:42:9: note: vect_can_advance_ivs_p:
common/mc.c:42:9: note: Analyze phi: .MEM_79 = PHI <.MEM_72(6), .MEM_71(8)>

common/mc.c:42:9: note: virtual phi. skip.
common/mc.c:42:9: note: Analyze phi: x_81 = PHI <0(6), x_62(8)>

common/mc.c:42:9: note: loop vectorized
common/mc.c:42:9: note: === vec_transform_loop ===
common/mc.c:42:9: note: Profitability threshold is 15 loop iterations.
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:42:9: note: create runtime check for data references *_51 and *_49
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:42:9: note: create runtime check for data references *_55 and *_49
common/mc.c:42:9: note: created 2 versioning for alias checks.
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _74 = _75 | _77;
Applying pattern match.pd:318, generic-match.c:18
gimple_simplified to _73 = _74 & _86;
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _48 = _50 | _68;
Applying pattern match.pd:318, generic-match.c:18
gimple_simplified to _46 = _48 & _73;
common/mc.c:42:9: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Registering new PHI nodes in block #7
Updating SSA information for statement # DEBUG x => x_81
Updating SSA information for statement _47 = (sizetype) x_81;
Updating SSA information for statement _49 = dst_82 + _47;
Updating SSA information for statement _51 = src1_83 + _47;
Updating SSA information for statement _52 = *_51;
Updating SSA information for statement _53 = (int) _52;
Updating SSA information for statement _55 = src2_84 + _47;
Updating SSA information for statement _56 = *_55;
Updating SSA information for statement _57 = (int) _56;
Updating SSA information for statement _58 = _53 + _57;
Updating SSA information for statement _59 = _58 + 1;
Updating SSA information for statement _60 = _59 >> 1;
Updating SSA information for statement _61 = (unsigned char) _60;
Updating SSA information for statement *_49 = _61;
Updating SSA information for statement x_62 = x_81 + 1;
Updating SSA information for statement # DEBUG x => x_62
Updating SSA information for statement # DEBUG x => x_62
Updating SSA information for statement if (i_width_42(D) > x_62)
Registering new PHI nodes in block #8
Registering new PHI nodes in block #21
Registering new PHI nodes in block #20
Registering new PHI nodes in block #16
Updating SSA information for statement # DEBUG x => x_81
Updating SSA information for statement _95 = (sizetype) x_81;
Updating SSA information for statement _94 = dst_82 + _47;
Updating SSA information for statement _93 = src1_83 + _47;
Updating SSA information for statement _63 = *_51;
Updating SSA information for statement _65 = (int) _52;
Updating SSA information for statement _96 = src2_84 + _47;
Updating SSA information for statement _97 = *_55;
Updating SSA information for statement _98 = (int) _56;
Updating SSA information for statement _99 = _53 + _57;
Updating SSA information for statement _100 = _58 + 1;
Updating SSA information for statement _101 = _59 >> 1;
Updating SSA information for statement _102 = (unsigned char) _60;
Updating SSA information for statement *_49 = _61;
Updating SSA information for statement x_104 = x_81 + 1;
Updating SSA information for statement # DEBUG x => x_62
Updating SSA information for statement # DEBUG x => x_62
Updating SSA information for statement if (i_width_42(D) > x_62)
Registering new PHI nodes in block #17
Registering new PHI nodes in block #9

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

x_22 -> { x_81 }
.MEM_44 -> { .MEM_79 }
_63 -> { _52 }
_65 -> { _53 }
_93 -> { _51 }
_94 -> { _49 }
_95 -> { _47 }
_96 -> { _55 }
_97 -> { _56 }
_98 -> { _57 }
_99 -> { _58 }
_100 -> { _59 }
_101 -> { _60 }
_102 -> { _61 }
.MEM_103 -> { .MEM_71 }
x_104 -> { x_62 }
Incremental SSA update started at block: 18
Number of blocks in CFG: 22
Number of blocks to update: 8 ( 36%)
Affected blocks: 7 8 9 16 17 19 20 21


common/mc.c:42:9: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 22
basic block 22, loop depth 1
 pred:       19
 succ:      


;; Scaling loop 2 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 4 with scale 0.777800, bounding iterations to 16 from guessed 14
;; guessed iterations are now 11
common/mc.c:42:9: note: vect_update_ivs_after_vectorizer: phi: .MEM_79 = PHI <.MEM_72(26), .MEM_71(8)>

common/mc.c:42:9: note: virtual phi. skip.
common/mc.c:42:9: note: vect_update_ivs_after_vectorizer: phi: x_81 = PHI <0(26), x_62(8)>

Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Setting upper bound of nb iterations for epilogue loop to 14
common/mc.c:42:9: note: ------>vectorizing phi: .MEM_79 = PHI <.MEM_72(30), .MEM_71(8)>

common/mc.c:42:9: note: ------>vectorizing phi: x_81 = PHI <0(30), x_62(8)>

common/mc.c:42:9: note: ------>vectorizing statement: # DEBUG x => x_81

common/mc.c:42:9: note: ------>vectorizing statement: _47 = (sizetype) x_81;

common/mc.c:42:9: note: ------>vectorizing statement: _49 = dst_82 + _47;

common/mc.c:42:9: note: ------>vectorizing statement: _51 = src1_83 + _47;

common/mc.c:42:9: note: ------>vectorizing statement: _52 = *_51;

common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: transform load. ncopies = 1
common/mc.c:42:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src1_83
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:42:9: note: created vectp_src1.42_136
common/mc.c:42:9: note: add new stmt: vect__52.43_139 = MEM[(uint8_t *)vectp_src1.41_137];
common/mc.c:42:9: note: ------>vectorizing statement: _53 = (int) _52;

common/mc.c:42:9: note: multiple-types.
common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _52
common/mc.c:42:9: note: def_stmt: _52 = *_51;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: transform conversion. ncopies = 1.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _52
common/mc.c:42:9: note: vect_is_simple_use: operand _52
common/mc.c:42:9: note: def_stmt: _52 = *_51;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _52
  def_stmt =  _52 = *_51;
common/mc.c:42:9: note: add new stmt: vect__53.45_140 = [vec_unpack_lo_expr] vect__52.43_139;
common/mc.c:42:9: note: add new stmt: vect__53.45_141 = [vec_unpack_hi_expr] vect__52.43_139;
common/mc.c:42:9: note: add new stmt: vect__53.44_142 = [vec_unpack_lo_expr] vect__53.45_140;
common/mc.c:42:9: note: add new stmt: vect__53.44_143 = [vec_unpack_hi_expr] vect__53.45_140;
common/mc.c:42:9: note: add new stmt: vect__53.44_144 = [vec_unpack_lo_expr] vect__53.45_141;
common/mc.c:42:9: note: add new stmt: vect__53.44_145 = [vec_unpack_hi_expr] vect__53.45_141;
common/mc.c:42:9: note: ------>vectorizing statement: _55 = src2_84 + _47;

common/mc.c:42:9: note: ------>vectorizing statement: _56 = *_55;

common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: transform load. ncopies = 1
common/mc.c:42:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src2_84
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:42:9: note: created vectp_src2.47_146
common/mc.c:42:9: note: add new stmt: vect__56.48_149 = MEM[(uint8_t *)vectp_src2.46_147];
common/mc.c:42:9: note: ------>vectorizing statement: _57 = (int) _56;

common/mc.c:42:9: note: multiple-types.
common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _56
common/mc.c:42:9: note: def_stmt: _56 = *_55;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: transform conversion. ncopies = 1.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _56
common/mc.c:42:9: note: vect_is_simple_use: operand _56
common/mc.c:42:9: note: def_stmt: _56 = *_55;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _56
  def_stmt =  _56 = *_55;
common/mc.c:42:9: note: add new stmt: vect__57.50_150 = [vec_unpack_lo_expr] vect__56.48_149;
common/mc.c:42:9: note: add new stmt: vect__57.50_151 = [vec_unpack_hi_expr] vect__56.48_149;
common/mc.c:42:9: note: add new stmt: vect__57.49_152 = [vec_unpack_lo_expr] vect__57.50_150;
common/mc.c:42:9: note: add new stmt: vect__57.49_153 = [vec_unpack_hi_expr] vect__57.50_150;
common/mc.c:42:9: note: add new stmt: vect__57.49_154 = [vec_unpack_lo_expr] vect__57.50_151;
common/mc.c:42:9: note: add new stmt: vect__57.49_155 = [vec_unpack_hi_expr] vect__57.50_151;
common/mc.c:42:9: note: ------>vectorizing statement: _58 = _53 + _57;

common/mc.c:42:9: note: multiple-types.
common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _53
common/mc.c:42:9: note: def_stmt: _53 = (int) _52;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand _57
common/mc.c:42:9: note: def_stmt: _57 = (int) _56;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: transform binary/unary operation.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _53
common/mc.c:42:9: note: vect_is_simple_use: operand _53
common/mc.c:42:9: note: def_stmt: _53 = (int) _52;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _53
  def_stmt =  _53 = (int) _52;
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _57
common/mc.c:42:9: note: vect_is_simple_use: operand _57
common/mc.c:42:9: note: def_stmt: _57 = (int) _56;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _57
  def_stmt =  _57 = (int) _56;
common/mc.c:42:9: note: add new stmt: vect__58.51_156 = vect__53.44_142 + vect__57.49_152;
common/mc.c:42:9: note: add new stmt: vect__58.51_157 = vect__53.44_143 + vect__57.49_153;
common/mc.c:42:9: note: add new stmt: vect__58.51_158 = vect__53.44_144 + vect__57.49_154;
common/mc.c:42:9: note: add new stmt: vect__58.51_159 = vect__53.44_145 + vect__57.49_155;
common/mc.c:42:9: note: ------>vectorizing statement: _59 = _58 + 1;

common/mc.c:42:9: note: multiple-types.
common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _58
common/mc.c:42:9: note: def_stmt: _58 = _53 + _57;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand 1
common/mc.c:42:9: note: transform binary/unary operation.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _58
common/mc.c:42:9: note: vect_is_simple_use: operand _58
common/mc.c:42:9: note: def_stmt: _58 = _53 + _57;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _58
  def_stmt =  _58 = _53 + _57;
common/mc.c:42:9: note: vect_get_vec_def_for_operand: 1
common/mc.c:42:9: note: vect_is_simple_use: operand 1
common/mc.c:42:9: note: Create vector_cst. nunits = 4
common/mc.c:42:9: note: created new init_stmt: vect_cst_.53_160 = { 1, 1, 1, 1 };
common/mc.c:42:9: note: add new stmt: vect__59.52_161 = vect__58.51_156 + vect_cst_.53_160;
common/mc.c:42:9: note: add new stmt: vect__59.52_162 = vect__58.51_157 + vect_cst_.53_160;
common/mc.c:42:9: note: add new stmt: vect__59.52_163 = vect__58.51_158 + vect_cst_.53_160;
common/mc.c:42:9: note: add new stmt: vect__59.52_164 = vect__58.51_159 + vect_cst_.53_160;
common/mc.c:42:9: note: ------>vectorizing statement: _60 = _59 >> 1;

common/mc.c:42:9: note: multiple-types.
common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _59
common/mc.c:42:9: note: def_stmt: _59 = _58 + 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand 1
common/mc.c:42:9: note: vector/scalar shift/rotate found.
common/mc.c:42:9: note: transform binary/unary operation.
common/mc.c:42:9: note: operand 1 using scalar mode.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _59
common/mc.c:42:9: note: vect_is_simple_use: operand _59
common/mc.c:42:9: note: def_stmt: _59 = _58 + 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _59
  def_stmt =  _59 = _58 + 1;
common/mc.c:42:9: note: add new stmt: vect__60.54_165 = vect__59.52_161 >> 1;
common/mc.c:42:9: note: add new stmt: vect__60.54_166 = vect__59.52_162 >> 1;
common/mc.c:42:9: note: add new stmt: vect__60.54_167 = vect__59.52_163 >> 1;
common/mc.c:42:9: note: add new stmt: vect__60.54_168 = vect__59.52_164 >> 1;
common/mc.c:42:9: note: ------>vectorizing statement: _61 = (unsigned char) _60;

common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _60
common/mc.c:42:9: note: def_stmt: _60 = _59 >> 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: transform conversion. ncopies = 1.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _60
common/mc.c:42:9: note: vect_is_simple_use: operand _60
common/mc.c:42:9: note: def_stmt: _60 = _59 >> 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _60
  def_stmt =  _60 = _59 >> 1;
common/mc.c:42:9: note: add new stmt: vect__61.56_169 = VEC_PACK_TRUNC_EXPR <vect__60.54_165, vect__60.54_166>;
common/mc.c:42:9: note: add new stmt: vect__61.56_170 = VEC_PACK_TRUNC_EXPR <vect__60.54_167, vect__60.54_168>;
common/mc.c:42:9: note: add new stmt: vect__61.55_171 = VEC_PACK_TRUNC_EXPR <vect__61.56_169, vect__61.56_170>;
common/mc.c:42:9: note: ------>vectorizing statement: *_49 = _61;

common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _61
common/mc.c:42:9: note: def_stmt: _61 = (unsigned char) _60;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: transform store. ncopies = 1
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _61
common/mc.c:42:9: note: vect_is_simple_use: operand _61
common/mc.c:42:9: note: def_stmt: _61 = (unsigned char) _60;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _61
  def_stmt =  _61 = (unsigned char) _60;
common/mc.c:42:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *dst_82
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:42:9: note: created vectp_dst.58_172
common/mc.c:42:9: note: add new stmt: MEM[(uint8_t *)vectp_dst.57_173] = vect__61.55_171;
common/mc.c:42:9: note: ------>vectorizing statement: x_62 = x_81 + 1;

common/mc.c:42:9: note: ------>vectorizing statement: # DEBUG x => x_62

common/mc.c:42:9: note: ------>vectorizing statement: # DEBUG x => x_62

common/mc.c:42:9: note: ------>vectorizing statement: vectp_src1.41_138 = vectp_src1.41_137 + 16;

common/mc.c:42:9: note: ------>vectorizing statement: vectp_src2.46_148 = vectp_src2.46_147 + 16;

common/mc.c:42:9: note: ------>vectorizing statement: vectp_dst.57_174 = vectp_dst.57_173 + 16;

common/mc.c:42:9: note: ------>vectorizing statement: if (i_width_42(D) > x_62)


loop at common/mc.c:44: if (ivtmp_176 < bnd.38_107)

;; Scaling loop 2 with scale 0.062500, bounding iterations to 0 from guessed 11
;; guessed iterations are now 1
common/mc.c:42:9: note: LOOP VECTORIZED

common/mc.c:183:17: note: vectorized 1 loops in function.
Removing basic block 6
basic block 6, loop depth 1
 pred:      
 succ:       18


Merging blocks 19 and 26
Merging blocks 28 and 21
get_ref (uint8_t * dst, int * i_dst_stride, uint8_t * * src, int i_src_stride, int mvx, int mvy, int i_width, int i_height)
{
  vector(16) unsigned char * vectp_dst.58;
  vector(16) unsigned char * vectp_dst.57;
  vector(8) short int vect__61.56;
  vector(16) unsigned char vect__61.55;
  vector(4) int vect__60.54;
  vector(4) int vect_cst_.53;
  vector(4) int vect__59.52;
  vector(4) int vect__58.51;
  vector(8) short unsigned int vect__57.50;
  vector(4) int vect__57.49;
  vector(16) unsigned char vect__56.48;
  vector(16) unsigned char * vectp_src2.47;
  vector(16) unsigned char * vectp_src2.46;
  vector(8) short unsigned int vect__53.45;
  vector(4) int vect__53.44;
  vector(16) unsigned char vect__52.43;
  vector(16) unsigned char * vectp_src1.42;
  vector(16) unsigned char * vectp_src1.41;
  int tmp.40;
  unsigned int ratio_mult_vf.39;
  unsigned int bnd.38;
  unsigned int niters.37;
  int x;
  int y;
  uint8_t * src2;
  uint8_t * src1;
  int offset;
  int qpel_idx;
  uint8_t * _1;
  int _4;
  int _5;
  int _7;
  int _9;
  int _11;
  int _12;
  int _15;
  long unsigned int _16;
  long unsigned int _17;
  uint8_t * * _19;
  uint8_t * _20;
  sizetype _21;
  _Bool _23;
  int _24;
  int _25;
  sizetype _26;
  sizetype _27;
  int _29;
  int _30;
  long unsigned int _31;
  long unsigned int _32;
  uint8_t * * _33;
  uint8_t * _34;
  _Bool _35;
  long unsigned int _36;
  sizetype _37;
  int _40;
  _Bool _46;
  sizetype _47;
  _Bool _48;
  uint8_t * _49;
  _Bool _50;
  uint8_t * _51;
  unsigned char _52;
  int _53;
  uint8_t * _54;
  uint8_t * _55;
  unsigned char _56;
  int _57;
  int _58;
  int _59;
  int _60;
  unsigned char _61;
  unsigned char _63;
  int _65;
  _Bool _68;
  uint8_t * _70;
  unsigned int ivtmp_71;
  _Bool _73;
  _Bool _74;
  _Bool _75;
  uint8_t * _76;
  _Bool _77;
  uint8_t * _78;
  _Bool _86;
  unsigned int _87;
  sizetype pretmp_91;
  sizetype pretmp_92;
  uint8_t * _93;
  uint8_t * _94;
  sizetype _95;
  uint8_t * _96;
  unsigned char _97;
  int _98;
  int _99;
  int _100;
  int _101;
  unsigned char _102;
  unsigned int _108;
  unsigned int _109;
  sizetype _113;
  uint8_t * _114;
  uint8_t * _115;
  unsigned char _116;
  int _117;
  uint8_t * _118;
  unsigned char _119;
  int _120;
  int _121;
  int _122;
  int _123;
  unsigned char _124;
  unsigned int _127;
  unsigned int _128;
  unsigned int ivtmp_176;

  <bb 2>:
  _4 = mvy_3(D) & 3;
  _5 = _4 << 2;
  _7 = mvx_6(D) & 3;
  qpel_idx_8 = _5 + _7;
  # DEBUG qpel_idx => qpel_idx_8
  _9 = mvy_3(D) >> 2;
  _11 = _9 * i_src_stride_10(D);
  _12 = mvx_6(D) >> 2;
  offset_13 = _11 + _12;
  # DEBUG offset => offset_13
  _15 = hpel_ref0[qpel_idx_8];
  _16 = (long unsigned int) _15;
  _17 = _16 * 8;
  _19 = src_18(D) + _17;
  _20 = *_19;
  _21 = (sizetype) offset_13;
  _23 = _4 == 3;
  _24 = (int) _23;
  _25 = i_src_stride_10(D) * _24;
  _26 = (sizetype) _25;
  _27 = _21 + _26;
  src1_28 = _20 + _27;
  # DEBUG src1 => src1_28
  _29 = qpel_idx_8 & 5;
  if (_29 != 0)
    goto <bb 3>;
  else
    goto <bb 25>;

  <bb 3>:
  _30 = hpel_ref1[qpel_idx_8];
  _31 = (long unsigned int) _30;
  _32 = _31 * 8;
  _33 = src_18(D) + _32;
  _34 = *_33;
  _35 = _7 == 3;
  _36 = (long unsigned int) _35;
  _37 = _21 + _36;
  src2_38 = _34 + _37;
  # DEBUG src2 => src2_38
  _40 = *i_dst_stride_39(D);
  # DEBUG dst => dst_41(D)
  # DEBUG i_dst_stride => _40
  # DEBUG src1 => src1_28
  # DEBUG i_src1_stride => i_src_stride_10(D)
  # DEBUG src2 => src2_38
  # DEBUG i_src2_stride => i_src_stride_10(D)
  # DEBUG i_width => i_width_42(D)
  # DEBUG i_height => i_height_43(D)
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => src2_38
  # DEBUG src1 => src1_28
  # DEBUG dst => dst_41(D)
  if (i_height_43(D) > 0)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:
  goto <bb 26>;

  <bb 5>:
  pretmp_91 = (sizetype) _40;
  pretmp_92 = (sizetype) i_src_stride_10(D);
  goto <bb 24>;

  <bb 6>:
  _87 = (unsigned int) i_width_42(D);
  _86 = _87 > 15;
  _78 = src1_83 + 16;
  _77 = _78 <= dst_82;
  _76 = dst_82 + 16;
  _75 = _76 <= src1_83;
  _74 = _75 | _77;
  _73 = _74 & _86;
  _70 = src2_84 + 16;
  _68 = _70 <= dst_82;
  _54 = dst_82 + 16;
  _50 = _54 <= src2_84;
  _48 = _50 | _68;
  _46 = _48 & _73;
  if (_46 != 0)
    goto <bb 7>;
  else
    goto <bb 15>;

  <bb 7>:
  niters.37_106 = (unsigned int) i_width_42(D);
  _108 = niters.37_106 + 4294967280;
  _109 = _108 >> 4;
  bnd.38_107 = _109 + 1;
  ratio_mult_vf.39_110 = bnd.38_107 << 4;
  _127 = (unsigned int) i_width_42(D);
  _128 = _127 + 4294967295;
  if (_128 <= 14)
    goto <bb 13>;
  else
    goto <bb 8>;

  <bb 8>:
  vectp_src1.42_136 = src1_83;
  vectp_src2.47_146 = src2_84;
  vect_cst_.53_160 = { 1, 1, 1, 1 };
  vectp_dst.58_172 = dst_82;

  <bb 9>:
  # x_81 = PHI <0(8), x_62(14)>
  # vectp_src1.41_137 = PHI <vectp_src1.42_136(8), vectp_src1.41_138(14)>
  # vectp_src2.46_147 = PHI <vectp_src2.47_146(8), vectp_src2.46_148(14)>
  # vectp_dst.57_173 = PHI <vectp_dst.58_172(8), vectp_dst.57_174(14)>
  # ivtmp_71 = PHI <0(8), ivtmp_176(14)>
  # DEBUG x => x_81
  _47 = (sizetype) x_81;
  _49 = dst_82 + _47;
  _51 = src1_83 + _47;
  vect__52.43_139 = MEM[(uint8_t *)vectp_src1.41_137];
  _52 = *_51;
  vect__53.45_140 = [vec_unpack_lo_expr] vect__52.43_139;
  vect__53.45_141 = [vec_unpack_hi_expr] vect__52.43_139;
  vect__53.44_142 = [vec_unpack_lo_expr] vect__53.45_140;
  vect__53.44_143 = [vec_unpack_hi_expr] vect__53.45_140;
  vect__53.44_144 = [vec_unpack_lo_expr] vect__53.45_141;
  vect__53.44_145 = [vec_unpack_hi_expr] vect__53.45_141;
  _53 = (int) _52;
  _55 = src2_84 + _47;
  vect__56.48_149 = MEM[(uint8_t *)vectp_src2.46_147];
  _56 = *_55;
  vect__57.50_150 = [vec_unpack_lo_expr] vect__56.48_149;
  vect__57.50_151 = [vec_unpack_hi_expr] vect__56.48_149;
  vect__57.49_152 = [vec_unpack_lo_expr] vect__57.50_150;
  vect__57.49_153 = [vec_unpack_hi_expr] vect__57.50_150;
  vect__57.49_154 = [vec_unpack_lo_expr] vect__57.50_151;
  vect__57.49_155 = [vec_unpack_hi_expr] vect__57.50_151;
  _57 = (int) _56;
  vect__58.51_156 = vect__53.44_142 + vect__57.49_152;
  vect__58.51_157 = vect__53.44_143 + vect__57.49_153;
  vect__58.51_158 = vect__53.44_144 + vect__57.49_154;
  vect__58.51_159 = vect__53.44_145 + vect__57.49_155;
  _58 = _53 + _57;
  vect__59.52_161 = vect__58.51_156 + vect_cst_.53_160;
  vect__59.52_162 = vect__58.51_157 + vect_cst_.53_160;
  vect__59.52_163 = vect__58.51_158 + vect_cst_.53_160;
  vect__59.52_164 = vect__58.51_159 + vect_cst_.53_160;
  _59 = _58 + 1;
  vect__60.54_165 = vect__59.52_161 >> 1;
  vect__60.54_166 = vect__59.52_162 >> 1;
  vect__60.54_167 = vect__59.52_163 >> 1;
  vect__60.54_168 = vect__59.52_164 >> 1;
  _60 = _59 >> 1;
  vect__61.56_169 = VEC_PACK_TRUNC_EXPR <vect__60.54_165, vect__60.54_166>;
  vect__61.56_170 = VEC_PACK_TRUNC_EXPR <vect__60.54_167, vect__60.54_168>;
  vect__61.55_171 = VEC_PACK_TRUNC_EXPR <vect__61.56_169, vect__61.56_170>;
  _61 = (unsigned char) _60;
  MEM[(uint8_t *)vectp_dst.57_173] = vect__61.55_171;
  x_62 = x_81 + 1;
  # DEBUG x => x_62
  # DEBUG x => x_62
  vectp_src1.41_138 = vectp_src1.41_137 + 16;
  vectp_src2.46_148 = vectp_src2.46_147 + 16;
  vectp_dst.57_174 = vectp_dst.57_173 + 16;
  ivtmp_176 = ivtmp_71 + 1;
  if (ivtmp_176 < bnd.38_107)
    goto <bb 14>;
  else
    goto <bb 12>;

  <bb 10>:
  # x_112 = PHI <x_126(11), x_130(13)>
  # DEBUG x => x_112
  _113 = (sizetype) x_112;
  _114 = dst_82 + _113;
  _115 = src1_83 + _113;
  _116 = *_115;
  _117 = (int) _116;
  _118 = src2_84 + _113;
  _119 = *_118;
  _120 = (int) _119;
  _121 = _117 + _120;
  _122 = _121 + 1;
  _123 = _122 >> 1;
  _124 = (unsigned char) _123;
  *_114 = _124;
  x_126 = x_112 + 1;
  # DEBUG x => x_126
  # DEBUG x => x_126
  if (i_width_42(D) > x_126)
    goto <bb 11>;
  else
    goto <bb 18>;

  <bb 11>:
  goto <bb 10>;

  <bb 12>:
  # x_131 = PHI <x_62(9)>
  tmp.40_135 = (int) ratio_mult_vf.39_110;
  if (niters.37_106 == ratio_mult_vf.39_110)
    goto <bb 19>;
  else
    goto <bb 13>;

  <bb 13>:
  # x_130 = PHI <tmp.40_135(12), 0(7)>
  goto <bb 10>;

  <bb 14>:
  goto <bb 9>;

  <bb 15>:

  <bb 16>:
  # x_22 = PHI <0(15), x_104(17)>
  # DEBUG x => x_22
  _95 = (sizetype) x_22;
  _94 = dst_82 + _95;
  _93 = src1_83 + _95;
  _63 = *_93;
  _65 = (int) _63;
  _96 = src2_84 + _95;
  _97 = *_96;
  _98 = (int) _97;
  _99 = _65 + _98;
  _100 = _99 + 1;
  _101 = _100 >> 1;
  _102 = (unsigned char) _101;
  *_94 = _102;
  x_104 = x_22 + 1;
  # DEBUG x => x_104
  # DEBUG x => x_104
  if (i_width_42(D) > x_104)
    goto <bb 17>;
  else
    goto <bb 20>;

  <bb 17>:
  goto <bb 16>;

  <bb 18>:

  <bb 19>:

  <bb 20>:

  <bb 21>:
  dst_64 = dst_82 + pretmp_91;
  # DEBUG dst => dst_64
  src1_66 = src1_83 + pretmp_92;
  # DEBUG src1 => src1_66
  src2_67 = src2_84 + pretmp_92;
  # DEBUG src2 => src2_67
  y_69 = y_85 + 1;
  # DEBUG y => y_69
  # DEBUG y => y_69
  # DEBUG src2 => src2_67
  # DEBUG src1 => src1_66
  # DEBUG dst => dst_64
  if (i_height_43(D) > y_69)
    goto <bb 23>;
  else
    goto <bb 22>;

  <bb 22>:
  goto <bb 4>;

  <bb 23>:

  <bb 24>:
  # dst_82 = PHI <dst_41(D)(5), dst_64(23)>
  # src1_83 = PHI <src1_28(5), src1_66(23)>
  # src2_84 = PHI <src2_38(5), src2_67(23)>
  # y_85 = PHI <0(5), y_69(23)>
  # DEBUG y => y_85
  # DEBUG src2 => src2_84
  # DEBUG src1 => src1_83
  # DEBUG dst => dst_82
  # DEBUG x => 0
  if (i_width_42(D) > 0)
    goto <bb 6>;
  else
    goto <bb 21>;

  <bb 25>:
  *i_dst_stride_39(D) = i_src_stride_10(D);

  <bb 26>:
  # _1 = PHI <dst_41(D)(4), src1_28(25)>
  return _1;

}



;; Function mc_chroma (mc_chroma, funcdef_no=132, decl_uid=5970, cgraph_uid=132, symbol_order=177)


Analyzing loop at common/mc.c:226
common/mc.c:226:5: note: ===== analyze_loop_nest =====
common/mc.c:226:5: note: === vect_analyze_loop_form ===
common/mc.c:226:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:226:5: note: === vect_analyze_loop_form ===
common/mc.c:226:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) < i_width_32(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) i_width_32(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:226:5: note: Symbolic number of iterations is (unsigned int) i_width_32(D)
common/mc.c:226:5: note: not vectorized: control flow in loop.
common/mc.c:226:5: note: bad loop form.

Analyzing loop at common/mc.c:228
common/mc.c:228:9: note: ===== analyze_loop_nest =====
common/mc.c:228:9: note: === vect_analyze_loop_form ===
common/mc.c:228:9: note: === get_loop_niters ===
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:228:9: note: Symbolic number of iterations is (unsigned int) i_width_32(D)
common/mc.c:228:9: note: === vect_analyze_data_refs ===
Creating dr for *_35
analyze_innermost: success.
	base_address: src_73
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *src_73
	Access function 0: {0B, +, 1}_2
Creating dr for *_40
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_73
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: *src_73
	Access function 0: {1B, +, 1}_2
Creating dr for *_45
analyze_innermost: success.
	base_address: src_74
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *src_74
	Access function 0: {0B, +, 1}_2
Creating dr for *_50
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_74
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: *src_74
	Access function 0: {1B, +, 1}_2
Creating dr for *_34
analyze_innermost: success.
	base_address: dst_72
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *dst_72
	Access function 0: {0B, +, 1}_2
common/mc.c:228:9: note: got vectype for stmt: _36 = *_35;
vector(16) unsigned char
common/mc.c:228:9: note: got vectype for stmt: _41 = *_40;
vector(16) unsigned char
common/mc.c:228:9: note: got vectype for stmt: _46 = *_45;
vector(16) unsigned char
common/mc.c:228:9: note: got vectype for stmt: _51 = *_50;
vector(16) unsigned char
common/mc.c:228:9: note: got vectype for stmt: *_34 = _57;
vector(16) unsigned char
common/mc.c:228:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:228:9: note: Analyze phi: x_75 = PHI <0(4), x_59(6)>

common/mc.c:228:9: note: Access function of PHI: {0, +, 1}_2
common/mc.c:228:9: note: step: 1,  init: 0
common/mc.c:228:9: note: Detected induction.
common/mc.c:228:9: note: Analyze phi: .MEM_77 = PHI <.MEM_65(4), .MEM_58(6)>

common/mc.c:228:9: note: === vect_pattern_recog ===
common/mc.c:228:9: note: vect_is_simple_use: operand cA_14
common/mc.c:228:9: note: def_stmt: cA_14 = _12 * _13;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand cB_16
common/mc.c:228:9: note: def_stmt: cB_16 = d8x_9 * _13;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand cC_17
common/mc.c:228:9: note: def_stmt: cC_17 = d8y_11 * _12;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand cD_18
common/mc.c:228:9: note: def_stmt: cD_18 = d8x_9 * d8y_11;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand _55
common/mc.c:228:9: note: def_stmt: _55 = _54 + 32;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:228:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:228:9: note: init: phi relevant? x_75 = PHI <0(4), x_59(6)>
common/mc.c:228:9: note: init: phi relevant? .MEM_77 = PHI <.MEM_65(4), .MEM_58(6)>
common/mc.c:228:9: note: init: stmt relevant? # DEBUG x => x_75
common/mc.c:228:9: note: init: stmt relevant? _33 = (sizetype) x_75;
common/mc.c:228:9: note: init: stmt relevant? _34 = dst_72 + _33;
common/mc.c:228:9: note: init: stmt relevant? _35 = src_73 + _33;
common/mc.c:228:9: note: init: stmt relevant? _36 = *_35;
common/mc.c:228:9: note: init: stmt relevant? _37 = (int) _36;
common/mc.c:228:9: note: init: stmt relevant? _38 = cA_14 * _37;
common/mc.c:228:9: note: init: stmt relevant? _39 = _33 + 1;
common/mc.c:228:9: note: init: stmt relevant? _40 = src_73 + _39;
common/mc.c:228:9: note: init: stmt relevant? _41 = *_40;
common/mc.c:228:9: note: init: stmt relevant? _42 = (int) _41;
common/mc.c:228:9: note: init: stmt relevant? _43 = cB_16 * _42;
common/mc.c:228:9: note: init: stmt relevant? _44 = _38 + _43;
common/mc.c:228:9: note: init: stmt relevant? _45 = src_74 + _33;
common/mc.c:228:9: note: init: stmt relevant? _46 = *_45;
common/mc.c:228:9: note: init: stmt relevant? _47 = (int) _46;
common/mc.c:228:9: note: init: stmt relevant? _48 = cC_17 * _47;
common/mc.c:228:9: note: init: stmt relevant? _49 = _44 + _48;
common/mc.c:228:9: note: init: stmt relevant? _50 = src_74 + _39;
common/mc.c:228:9: note: init: stmt relevant? _51 = *_50;
common/mc.c:228:9: note: init: stmt relevant? _52 = (int) _51;
common/mc.c:228:9: note: init: stmt relevant? _53 = cD_18 * _52;
common/mc.c:228:9: note: init: stmt relevant? _54 = _49 + _53;
common/mc.c:228:9: note: init: stmt relevant? _55 = _54 + 32;
common/mc.c:228:9: note: init: stmt relevant? _56 = _55 >> 6;
common/mc.c:228:9: note: init: stmt relevant? _57 = (unsigned char) _56;
common/mc.c:228:9: note: init: stmt relevant? *_34 = _57;
common/mc.c:228:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: init: stmt relevant? x_59 = x_75 + 1;
common/mc.c:228:9: note: init: stmt relevant? # DEBUG x => x_59
common/mc.c:228:9: note: init: stmt relevant? # DEBUG x => x_59
common/mc.c:228:9: note: init: stmt relevant? if (i_width_32(D) > x_59)
common/mc.c:228:9: note: worklist: examine stmt: *_34 = _57;
common/mc.c:228:9: note: vect_is_simple_use: operand _57
common/mc.c:228:9: note: def_stmt: _57 = (unsigned char) _56;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _57 = (unsigned char) _56;
common/mc.c:228:9: note: vect_is_simple_use: operand _56
common/mc.c:228:9: note: def_stmt: _56 = _55 >> 6;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _56 = _55 >> 6;
common/mc.c:228:9: note: vect_is_simple_use: operand _55
common/mc.c:228:9: note: def_stmt: _55 = _54 + 32;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _55 = _54 + 32;
common/mc.c:228:9: note: vect_is_simple_use: operand _54
common/mc.c:228:9: note: def_stmt: _54 = _49 + _53;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _54 = _49 + _53;
common/mc.c:228:9: note: vect_is_simple_use: operand _49
common/mc.c:228:9: note: def_stmt: _49 = _44 + _48;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: vect_is_simple_use: operand _53
common/mc.c:228:9: note: def_stmt: _53 = cD_18 * _52;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _53 = cD_18 * _52;
common/mc.c:228:9: note: vect_is_simple_use: operand cD_18
common/mc.c:228:9: note: def_stmt: cD_18 = d8x_9 * d8y_11;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: def_stmt is out of loop.
common/mc.c:228:9: note: vect_is_simple_use: operand _52
common/mc.c:228:9: note: def_stmt: _52 = (int) _51;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _52 = (int) _51;
common/mc.c:228:9: note: vect_is_simple_use: operand _51
common/mc.c:228:9: note: def_stmt: _51 = *_50;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _51 = *_50;
common/mc.c:228:9: note: worklist: examine stmt: _49 = _44 + _48;
common/mc.c:228:9: note: vect_is_simple_use: operand _44
common/mc.c:228:9: note: def_stmt: _44 = _38 + _43;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: vect_is_simple_use: operand _48
common/mc.c:228:9: note: def_stmt: _48 = cC_17 * _47;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _48 = cC_17 * _47;
common/mc.c:228:9: note: vect_is_simple_use: operand cC_17
common/mc.c:228:9: note: def_stmt: cC_17 = d8y_11 * _12;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: def_stmt is out of loop.
common/mc.c:228:9: note: vect_is_simple_use: operand _47
common/mc.c:228:9: note: def_stmt: _47 = (int) _46;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _47 = (int) _46;
common/mc.c:228:9: note: vect_is_simple_use: operand _46
common/mc.c:228:9: note: def_stmt: _46 = *_45;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _46 = *_45;
common/mc.c:228:9: note: worklist: examine stmt: _44 = _38 + _43;
common/mc.c:228:9: note: vect_is_simple_use: operand _38
common/mc.c:228:9: note: def_stmt: _38 = cA_14 * _37;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: vect_is_simple_use: operand _43
common/mc.c:228:9: note: def_stmt: _43 = cB_16 * _42;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _43 = cB_16 * _42;
common/mc.c:228:9: note: vect_is_simple_use: operand cB_16
common/mc.c:228:9: note: def_stmt: cB_16 = d8x_9 * _13;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: def_stmt is out of loop.
common/mc.c:228:9: note: vect_is_simple_use: operand _42
common/mc.c:228:9: note: def_stmt: _42 = (int) _41;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _42 = (int) _41;
common/mc.c:228:9: note: vect_is_simple_use: operand _41
common/mc.c:228:9: note: def_stmt: _41 = *_40;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _41 = *_40;
common/mc.c:228:9: note: worklist: examine stmt: _38 = cA_14 * _37;
common/mc.c:228:9: note: vect_is_simple_use: operand cA_14
common/mc.c:228:9: note: def_stmt: cA_14 = _12 * _13;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: def_stmt is out of loop.
common/mc.c:228:9: note: vect_is_simple_use: operand _37
common/mc.c:228:9: note: def_stmt: _37 = (int) _36;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _37 = (int) _36;
common/mc.c:228:9: note: vect_is_simple_use: operand _36
common/mc.c:228:9: note: def_stmt: _36 = *_35;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: mark relevant 4, live 0.
common/mc.c:228:9: note: worklist: examine stmt: _36 = *_35;
common/mc.c:228:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _41 = *_40;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {1B, +, 1}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _46 = *_45;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _51 = *_50;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: *_34 = _57;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _46 = *_45;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _51 = *_50;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: *_34 = _57;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _46 = *_45;
  stmt_b: _51 = *_50;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {1B, +, 1}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _46 = *_45;
  stmt_b: *_34 = _57;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: *_34 = _57;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _36 = *_35;
  stmt_b: _36 = *_35;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _41 = *_40;
  stmt_b: _41 = *_40;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 1}_2)
  (chrec_b = {1B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _46 = *_45;
  stmt_b: _46 = *_45;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _51 = *_50;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 1}_2)
  (chrec_b = {1B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_34 = _57;
  stmt_b: *_34 = _57;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:228:9: note: versioning for alias required: can't determine dependence between *_35 and *_34
common/mc.c:228:9: note: mark for run-time aliasing test between *_35 and *_34
common/mc.c:228:9: note: versioning for alias required: can't determine dependence between *_40 and *_34
common/mc.c:228:9: note: mark for run-time aliasing test between *_40 and *_34
common/mc.c:228:9: note: versioning for alias required: can't determine dependence between *_45 and *_34
common/mc.c:228:9: note: mark for run-time aliasing test between *_45 and *_34
common/mc.c:228:9: note: versioning for alias required: can't determine dependence between *_50 and *_34
common/mc.c:228:9: note: mark for run-time aliasing test between *_50 and *_34
common/mc.c:228:9: note: === vect_determine_vectorization_factor ===
common/mc.c:228:9: note: ==> examining phi: x_75 = PHI <0(4), x_59(6)>

common/mc.c:228:9: note: ==> examining phi: .MEM_77 = PHI <.MEM_65(4), .MEM_58(6)>

common/mc.c:228:9: note: ==> examining statement: # DEBUG x => x_75

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: ==> examining statement: _33 = (sizetype) x_75;

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: ==> examining statement: _34 = dst_72 + _33;

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: ==> examining statement: _35 = src_73 + _33;

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: ==> examining statement: _36 = *_35;

common/mc.c:228:9: note: get vectype for scalar type:  unsigned char
common/mc.c:228:9: note: vectype: vector(16) unsigned char
common/mc.c:228:9: note: nunits = 16
common/mc.c:228:9: note: ==> examining statement: _37 = (int) _36;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  unsigned char
common/mc.c:228:9: note: vectype: vector(16) unsigned char
common/mc.c:228:9: note: nunits = 16
common/mc.c:228:9: note: ==> examining statement: _38 = cA_14 * _37;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: nunits = 4
common/mc.c:228:9: note: ==> examining statement: _39 = _33 + 1;

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: ==> examining statement: _40 = src_73 + _39;

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: ==> examining statement: _41 = *_40;

common/mc.c:228:9: note: get vectype for scalar type:  unsigned char
common/mc.c:228:9: note: vectype: vector(16) unsigned char
common/mc.c:228:9: note: nunits = 16
common/mc.c:228:9: note: ==> examining statement: _42 = (int) _41;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  unsigned char
common/mc.c:228:9: note: vectype: vector(16) unsigned char
common/mc.c:228:9: note: nunits = 16
common/mc.c:228:9: note: ==> examining statement: _43 = cB_16 * _42;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: nunits = 4
common/mc.c:228:9: note: ==> examining statement: _44 = _38 + _43;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: nunits = 4
common/mc.c:228:9: note: ==> examining statement: _45 = src_74 + _33;

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: ==> examining statement: _46 = *_45;

common/mc.c:228:9: note: get vectype for scalar type:  unsigned char
common/mc.c:228:9: note: vectype: vector(16) unsigned char
common/mc.c:228:9: note: nunits = 16
common/mc.c:228:9: note: ==> examining statement: _47 = (int) _46;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  unsigned char
common/mc.c:228:9: note: vectype: vector(16) unsigned char
common/mc.c:228:9: note: nunits = 16
common/mc.c:228:9: note: ==> examining statement: _48 = cC_17 * _47;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: nunits = 4
common/mc.c:228:9: note: ==> examining statement: _49 = _44 + _48;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: nunits = 4
common/mc.c:228:9: note: ==> examining statement: _50 = src_74 + _39;

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: ==> examining statement: _51 = *_50;

common/mc.c:228:9: note: get vectype for scalar type:  unsigned char
common/mc.c:228:9: note: vectype: vector(16) unsigned char
common/mc.c:228:9: note: nunits = 16
common/mc.c:228:9: note: ==> examining statement: _52 = (int) _51;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  unsigned char
common/mc.c:228:9: note: vectype: vector(16) unsigned char
common/mc.c:228:9: note: nunits = 16
common/mc.c:228:9: note: ==> examining statement: _53 = cD_18 * _52;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: nunits = 4
common/mc.c:228:9: note: ==> examining statement: _54 = _49 + _53;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: nunits = 4
common/mc.c:228:9: note: ==> examining statement: _55 = _54 + 32;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: nunits = 4
common/mc.c:228:9: note: ==> examining statement: _56 = _55 >> 6;

common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: get vectype for scalar type:  int
common/mc.c:228:9: note: vectype: vector(4) int
common/mc.c:228:9: note: nunits = 4
common/mc.c:228:9: note: ==> examining statement: _57 = (unsigned char) _56;

common/mc.c:228:9: note: get vectype for scalar type:  unsigned char
common/mc.c:228:9: note: vectype: vector(16) unsigned char
common/mc.c:228:9: note: get vectype for scalar type:  unsigned char
common/mc.c:228:9: note: vectype: vector(16) unsigned char
common/mc.c:228:9: note: nunits = 16
common/mc.c:228:9: note: ==> examining statement: *_34 = _57;

common/mc.c:228:9: note: get vectype for scalar type:  uint8_t
common/mc.c:228:9: note: vectype: vector(16) unsigned char
common/mc.c:228:9: note: nunits = 16
common/mc.c:228:9: note: ==> examining statement: x_59 = x_75 + 1;

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: ==> examining statement: # DEBUG x => x_59

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: ==> examining statement: # DEBUG x => x_59

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: ==> examining statement: if (i_width_32(D) > x_59)

common/mc.c:228:9: note: skip.
common/mc.c:228:9: note: vectorization factor = 16
common/mc.c:228:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:228:9: note: dependence distance  = 1.
common/mc.c:228:9: note: dependence distance  = 1.
common/mc.c:228:9: note: vect_compute_data_ref_alignment:
common/mc.c:228:9: note: can't force alignment of ref: *_35
common/mc.c:228:9: note: vect_compute_data_ref_alignment:
common/mc.c:228:9: note: can't force alignment of ref: *_40
common/mc.c:228:9: note: vect_compute_data_ref_alignment:
common/mc.c:228:9: note: can't force alignment of ref: *_45
common/mc.c:228:9: note: vect_compute_data_ref_alignment:
common/mc.c:228:9: note: can't force alignment of ref: *_50
common/mc.c:228:9: note: vect_compute_data_ref_alignment:
common/mc.c:228:9: note: can't force alignment of ref: *_34
common/mc.c:228:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:228:9: note: merging ranges for *_35, *_34 and *_40, *_34
common/mc.c:228:9: note: merging ranges for *_45, *_34 and *_50, *_34
common/mc.c:228:9: note: improved number of alias checks from 4 to 2
common/mc.c:228:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:228:9: note: Unknown misalignment, is_packed = 0
common/mc.c:228:9: note: Unknown misalignment, is_packed = 0
common/mc.c:228:9: note: Unknown misalignment, is_packed = 0
common/mc.c:228:9: note: Unknown misalignment, is_packed = 0
common/mc.c:228:9: note: Unknown misalignment, is_packed = 0
common/mc.c:228:9: note: vect_can_advance_ivs_p:
common/mc.c:228:9: note: Analyze phi: x_75 = PHI <0(4), x_59(6)>

common/mc.c:228:9: note: Analyze phi: .MEM_77 = PHI <.MEM_65(4), .MEM_58(6)>

common/mc.c:228:9: note: virtual phi. skip.
common/mc.c:228:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:228:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/mc.c:228:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:228:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/mc.c:228:9: note: Setting misalignment to -1.
common/mc.c:228:9: note: Setting misalignment to -1.
common/mc.c:228:9: note: Setting misalignment to -1.
common/mc.c:228:9: note: Setting misalignment to -1.
common/mc.c:228:9: note: Disable peeling, max peels reached: 15
common/mc.c:228:9: note: Vectorizing an unaligned access.
common/mc.c:228:9: note: Vectorizing an unaligned access.
common/mc.c:228:9: note: Vectorizing an unaligned access.
common/mc.c:228:9: note: Vectorizing an unaligned access.
common/mc.c:228:9: note: Vectorizing an unaligned access.
common/mc.c:228:9: note: === vect_analyze_slp ===
common/mc.c:228:9: note: === vect_make_slp_decision ===
common/mc.c:228:9: note: === vect_detect_hybrid_slp ===
common/mc.c:228:9: note: === vect_analyze_loop_operations ===
common/mc.c:228:9: note: examining phi: x_75 = PHI <0(4), x_59(6)>

common/mc.c:228:9: note: examining phi: .MEM_77 = PHI <.MEM_65(4), .MEM_58(6)>

common/mc.c:228:9: note: ==> examining statement: # DEBUG x => x_75
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: ==> examining statement: _33 = (sizetype) x_75;
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: ==> examining statement: _34 = dst_72 + _33;
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: ==> examining statement: _35 = src_73 + _33;
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: ==> examining statement: _36 = *_35;
common/mc.c:228:9: note: vect_is_simple_use: operand *_35
common/mc.c:228:9: note: not ssa-name.
common/mc.c:228:9: note: use not simple.
common/mc.c:228:9: note: vect_is_simple_use: operand *_35
common/mc.c:228:9: note: not ssa-name.
common/mc.c:228:9: note: use not simple.
common/mc.c:228:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:228:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: _37 = (int) _36;
common/mc.c:228:9: note: vect_is_simple_use: operand _36
common/mc.c:228:9: note: def_stmt: _36 = *_35;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_conversion ===
common/mc.c:228:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: _38 = cA_14 * _37;
common/mc.c:228:9: note: vect_is_simple_use: operand cA_14
common/mc.c:228:9: note: def_stmt: cA_14 = _12 * _13;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand _37
common/mc.c:228:9: note: def_stmt: _37 = (int) _36;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_operation ===
common/mc.c:228:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:228:9: note: ==> examining statement: _39 = _33 + 1;
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: ==> examining statement: _40 = src_73 + _39;
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: ==> examining statement: _41 = *_40;
common/mc.c:228:9: note: vect_is_simple_use: operand *_40
common/mc.c:228:9: note: not ssa-name.
common/mc.c:228:9: note: use not simple.
common/mc.c:228:9: note: vect_is_simple_use: operand *_40
common/mc.c:228:9: note: not ssa-name.
common/mc.c:228:9: note: use not simple.
common/mc.c:228:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:228:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: _42 = (int) _41;
common/mc.c:228:9: note: vect_is_simple_use: operand _41
common/mc.c:228:9: note: def_stmt: _41 = *_40;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_conversion ===
common/mc.c:228:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: _43 = cB_16 * _42;
common/mc.c:228:9: note: vect_is_simple_use: operand cB_16
common/mc.c:228:9: note: def_stmt: cB_16 = d8x_9 * _13;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand _42
common/mc.c:228:9: note: def_stmt: _42 = (int) _41;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_operation ===
common/mc.c:228:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:228:9: note: ==> examining statement: _44 = _38 + _43;
common/mc.c:228:9: note: vect_is_simple_use: operand _38
common/mc.c:228:9: note: def_stmt: _38 = cA_14 * _37;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: vect_is_simple_use: operand _43
common/mc.c:228:9: note: def_stmt: _43 = cB_16 * _42;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_operation ===
common/mc.c:228:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: _45 = src_74 + _33;
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: ==> examining statement: _46 = *_45;
common/mc.c:228:9: note: vect_is_simple_use: operand *_45
common/mc.c:228:9: note: not ssa-name.
common/mc.c:228:9: note: use not simple.
common/mc.c:228:9: note: vect_is_simple_use: operand *_45
common/mc.c:228:9: note: not ssa-name.
common/mc.c:228:9: note: use not simple.
common/mc.c:228:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:228:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: _47 = (int) _46;
common/mc.c:228:9: note: vect_is_simple_use: operand _46
common/mc.c:228:9: note: def_stmt: _46 = *_45;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_conversion ===
common/mc.c:228:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: _48 = cC_17 * _47;
common/mc.c:228:9: note: vect_is_simple_use: operand cC_17
common/mc.c:228:9: note: def_stmt: cC_17 = d8y_11 * _12;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand _47
common/mc.c:228:9: note: def_stmt: _47 = (int) _46;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_operation ===
common/mc.c:228:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:228:9: note: ==> examining statement: _49 = _44 + _48;
common/mc.c:228:9: note: vect_is_simple_use: operand _44
common/mc.c:228:9: note: def_stmt: _44 = _38 + _43;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: vect_is_simple_use: operand _48
common/mc.c:228:9: note: def_stmt: _48 = cC_17 * _47;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_operation ===
common/mc.c:228:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: _50 = src_74 + _39;
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: ==> examining statement: _51 = *_50;
common/mc.c:228:9: note: vect_is_simple_use: operand *_50
common/mc.c:228:9: note: not ssa-name.
common/mc.c:228:9: note: use not simple.
common/mc.c:228:9: note: vect_is_simple_use: operand *_50
common/mc.c:228:9: note: not ssa-name.
common/mc.c:228:9: note: use not simple.
common/mc.c:228:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:228:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: _52 = (int) _51;
common/mc.c:228:9: note: vect_is_simple_use: operand _51
common/mc.c:228:9: note: def_stmt: _51 = *_50;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_conversion ===
common/mc.c:228:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: _53 = cD_18 * _52;
common/mc.c:228:9: note: vect_is_simple_use: operand cD_18
common/mc.c:228:9: note: def_stmt: cD_18 = d8x_9 * d8y_11;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand _52
common/mc.c:228:9: note: def_stmt: _52 = (int) _51;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_operation ===
common/mc.c:228:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:228:9: note: ==> examining statement: _54 = _49 + _53;
common/mc.c:228:9: note: vect_is_simple_use: operand _49
common/mc.c:228:9: note: def_stmt: _49 = _44 + _48;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: vect_is_simple_use: operand _53
common/mc.c:228:9: note: def_stmt: _53 = cD_18 * _52;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_operation ===
common/mc.c:228:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: _55 = _54 + 32;
common/mc.c:228:9: note: vect_is_simple_use: operand _54
common/mc.c:228:9: note: def_stmt: _54 = _49 + _53;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: vect_is_simple_use: operand 32
common/mc.c:228:9: note: === vectorizable_operation ===
common/mc.c:228:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:228:9: note: ==> examining statement: _56 = _55 >> 6;
common/mc.c:228:9: note: vect_is_simple_use: operand _55
common/mc.c:228:9: note: def_stmt: _55 = _54 + 32;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: vect_is_simple_use: operand 6
common/mc.c:228:9: note: vector/scalar shift/rotate found.
common/mc.c:228:9: note: === vectorizable_shift ===
common/mc.c:228:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:228:9: note: ==> examining statement: _57 = (unsigned char) _56;
common/mc.c:228:9: note: vect_is_simple_use: operand _56
common/mc.c:228:9: note: def_stmt: _56 = _55 >> 6;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: === vectorizable_conversion ===
common/mc.c:228:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: *_34 = _57;
common/mc.c:228:9: note: vect_is_simple_use: operand _57
common/mc.c:228:9: note: def_stmt: _57 = (unsigned char) _56;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:228:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:228:9: note: ==> examining statement: x_59 = x_75 + 1;
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: ==> examining statement: # DEBUG x => x_59
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: ==> examining statement: # DEBUG x => x_59
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: ==> examining statement: if (i_width_32(D) > x_59)
common/mc.c:228:9: note: irrelevant.
common/mc.c:228:9: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
common/mc.c:228:9: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
common/mc.c:228:9: note: Cost model analysis: 
  Vector inside of loop cost: 73
  Vector prologue cost: 17
  Vector epilogue cost: 152
  Scalar iteration cost: 19
  Scalar outside cost: 1
  Vector outside cost: 169
  prologue iterations: 0
  epilogue iterations: 8
  Calculated minimum iters for profitability: 10
common/mc.c:228:9: note:   Runtime profitability threshold = 15
common/mc.c:228:9: note:   Static estimate profitability threshold = 15
common/mc.c:228:9: note: epilog loop required
common/mc.c:228:9: note: vect_can_advance_ivs_p:
common/mc.c:228:9: note: Analyze phi: x_75 = PHI <0(4), x_59(6)>

common/mc.c:228:9: note: Analyze phi: .MEM_77 = PHI <.MEM_65(4), .MEM_58(6)>

common/mc.c:228:9: note: virtual phi. skip.
common/mc.c:228:9: note: loop vectorized
common/mc.c:228:9: note: === vec_transform_loop ===
common/mc.c:228:9: note: Profitability threshold is 15 loop iterations.
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:228:9: note: create runtime check for data references *_34 and *_35
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:228:9: note: create runtime check for data references *_34 and *_45
common/mc.c:228:9: note: created 2 versioning for alias checks.
gimple_simplified to _104 = src_73 >= _105;
gimple_simplified to _102 = dst_72 >= _103;
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _101 = _102 | _104;
Applying pattern match.pd:318, generic-match.c:18
gimple_simplified to _100 = _101 & _106;
gimple_simplified to _98 = src_74 >= _99;
gimple_simplified to _96 = dst_72 >= _97;
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _95 = _96 | _98;
Applying pattern match.pd:318, generic-match.c:18
gimple_simplified to _94 = _95 & _100;
common/mc.c:228:9: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
Registering new PHI nodes in block #15
Registering new PHI nodes in block #16
Registering new PHI nodes in block #5
Updating SSA information for statement # DEBUG x => x_75
Updating SSA information for statement _33 = (sizetype) x_75;
Updating SSA information for statement _34 = dst_72 + _33;
Updating SSA information for statement _35 = src_73 + _33;
Updating SSA information for statement _36 = *_35;
Updating SSA information for statement _37 = (int) _36;
Updating SSA information for statement _38 = cA_14 * _37;
Updating SSA information for statement _39 = _33 + 1;
Updating SSA information for statement _40 = src_73 + _39;
Updating SSA information for statement _41 = *_40;
Updating SSA information for statement _42 = (int) _41;
Updating SSA information for statement _43 = cB_16 * _42;
Updating SSA information for statement _44 = _38 + _43;
Updating SSA information for statement _45 = src_74 + _33;
Updating SSA information for statement _46 = *_45;
Updating SSA information for statement _47 = (int) _46;
Updating SSA information for statement _48 = cC_17 * _47;
Updating SSA information for statement _49 = _44 + _48;
Updating SSA information for statement _50 = src_74 + _39;
Updating SSA information for statement _51 = *_50;
Updating SSA information for statement _52 = (int) _51;
Updating SSA information for statement _53 = cD_18 * _52;
Updating SSA information for statement _54 = _49 + _53;
Updating SSA information for statement _55 = _54 + 32;
Updating SSA information for statement _56 = _55 >> 6;
Updating SSA information for statement _57 = (unsigned char) _56;
Updating SSA information for statement *_34 = _57;
Updating SSA information for statement x_59 = x_75 + 1;
Updating SSA information for statement # DEBUG x => x_59
Updating SSA information for statement # DEBUG x => x_59
Updating SSA information for statement if (i_width_32(D) > x_59)
Registering new PHI nodes in block #6
Registering new PHI nodes in block #18
Registering new PHI nodes in block #17
Registering new PHI nodes in block #13
Updating SSA information for statement # DEBUG x => x_75
Updating SSA information for statement _91 = (sizetype) x_75;
Updating SSA information for statement _90 = dst_72 + _33;
Updating SSA information for statement _89 = src_73 + _33;
Updating SSA information for statement _88 = *_35;
Updating SSA information for statement _87 = (int) _36;
Updating SSA information for statement _86 = cA_14 * _37;
Updating SSA information for statement _85 = _33 + 1;
Updating SSA information for statement _84 = src_73 + _39;
Updating SSA information for statement _83 = *_40;
Updating SSA information for statement _82 = (int) _41;
Updating SSA information for statement _81 = cB_16 * _42;
Updating SSA information for statement _80 = _38 + _43;
Updating SSA information for statement _71 = src_74 + _33;
Updating SSA information for statement _70 = *_45;
Updating SSA information for statement _69 = (int) _46;
Updating SSA information for statement _68 = cC_17 * _47;
Updating SSA information for statement _67 = _44 + _48;
Updating SSA information for statement _66 = src_74 + _39;
Updating SSA information for statement _15 = *_50;
Updating SSA information for statement _7 = (int) _51;
Updating SSA information for statement _6 = cD_18 * _52;
Updating SSA information for statement _5 = _49 + _53;
Updating SSA information for statement _4 = _54 + 32;
Updating SSA information for statement _3 = _55 >> 6;
Updating SSA information for statement _2 = (unsigned char) _56;
Updating SSA information for statement *_34 = _57;
Updating SSA information for statement x_114 = x_75 + 1;
Updating SSA information for statement # DEBUG x => x_59
Updating SSA information for statement # DEBUG x => x_59
Updating SSA information for statement if (i_width_32(D) > x_59)
Registering new PHI nodes in block #14
Registering new PHI nodes in block #7

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_1 -> { .MEM_58 }
_2 -> { _57 }
_3 -> { _56 }
_4 -> { _55 }
_5 -> { _54 }
_6 -> { _53 }
_7 -> { _52 }
_15 -> { _51 }
_66 -> { _50 }
_67 -> { _49 }
_68 -> { _48 }
_69 -> { _47 }
_70 -> { _46 }
_71 -> { _45 }
_80 -> { _44 }
_81 -> { _43 }
_82 -> { _42 }
_83 -> { _41 }
_84 -> { _40 }
_85 -> { _39 }
_86 -> { _38 }
_87 -> { _37 }
_88 -> { _36 }
_89 -> { _35 }
_90 -> { _34 }
_91 -> { _33 }
.MEM_92 -> { .MEM_77 }
x_93 -> { x_75 }
x_114 -> { x_59 }
Incremental SSA update started at block: 15
Number of blocks in CFG: 19
Number of blocks to update: 8 ( 42%)
Affected blocks: 5 6 7 13 14 16 17 18


common/mc.c:228:9: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 19
basic block 19, loop depth 1
 pred:       16
 succ:      


;; Scaling loop 2 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 4 with scale 0.777800, bounding iterations to 16 from guessed 14
;; guessed iterations are now 11
common/mc.c:228:9: note: vect_update_ivs_after_vectorizer: phi: x_75 = PHI <0(23), x_59(6)>

Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:228:9: note: vect_update_ivs_after_vectorizer: phi: .MEM_77 = PHI <.MEM_65(23), .MEM_58(6)>

common/mc.c:228:9: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 14
common/mc.c:228:9: note: ------>vectorizing phi: x_75 = PHI <0(27), x_59(6)>

common/mc.c:228:9: note: ------>vectorizing phi: .MEM_77 = PHI <.MEM_65(27), .MEM_58(6)>

common/mc.c:228:9: note: ------>vectorizing statement: # DEBUG x => x_75

common/mc.c:228:9: note: ------>vectorizing statement: _33 = (sizetype) x_75;

common/mc.c:228:9: note: ------>vectorizing statement: _34 = dst_72 + _33;

common/mc.c:228:9: note: ------>vectorizing statement: _35 = src_73 + _33;

common/mc.c:228:9: note: ------>vectorizing statement: _36 = *_35;

common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: transform load. ncopies = 1
common/mc.c:228:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_73
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:228:9: note: created vectp_src.123_155
common/mc.c:228:9: note: add new stmt: vect__36.124_158 = MEM[(uint8_t *)vectp_src.122_156];
common/mc.c:228:9: note: ------>vectorizing statement: _37 = (int) _36;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand _36
common/mc.c:228:9: note: def_stmt: _36 = *_35;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform conversion. ncopies = 1.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _36
common/mc.c:228:9: note: vect_is_simple_use: operand _36
common/mc.c:228:9: note: def_stmt: _36 = *_35;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _36
  def_stmt =  _36 = *_35;
common/mc.c:228:9: note: add new stmt: vect__37.126_159 = [vec_unpack_lo_expr] vect__36.124_158;
common/mc.c:228:9: note: add new stmt: vect__37.126_160 = [vec_unpack_hi_expr] vect__36.124_158;
common/mc.c:228:9: note: add new stmt: vect__37.125_161 = [vec_unpack_lo_expr] vect__37.126_159;
common/mc.c:228:9: note: add new stmt: vect__37.125_162 = [vec_unpack_hi_expr] vect__37.126_159;
common/mc.c:228:9: note: add new stmt: vect__37.125_163 = [vec_unpack_lo_expr] vect__37.126_160;
common/mc.c:228:9: note: add new stmt: vect__37.125_164 = [vec_unpack_hi_expr] vect__37.126_160;
common/mc.c:228:9: note: ------>vectorizing statement: _38 = cA_14 * _37;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand cA_14
common/mc.c:228:9: note: def_stmt: cA_14 = _12 * _13;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand _37
common/mc.c:228:9: note: def_stmt: _37 = (int) _36;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform binary/unary operation.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: cA_14
common/mc.c:228:9: note: vect_is_simple_use: operand cA_14
common/mc.c:228:9: note: def_stmt: cA_14 = _12 * _13;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: def =  cA_14
  def_stmt =  cA_14 = _12 * _13;
common/mc.c:228:9: note: Create vector_inv.
common/mc.c:228:9: note: created new init_stmt: vect_cst_.128_165 = {cA_14, cA_14, cA_14, cA_14};
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _37
common/mc.c:228:9: note: vect_is_simple_use: operand _37
common/mc.c:228:9: note: def_stmt: _37 = (int) _36;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _37
  def_stmt =  _37 = (int) _36;
common/mc.c:228:9: note: add new stmt: vect__38.127_166 = vect_cst_.128_165 * vect__37.125_161;
common/mc.c:228:9: note: add new stmt: vect__38.127_167 = vect_cst_.128_165 * vect__37.125_162;
common/mc.c:228:9: note: add new stmt: vect__38.127_168 = vect_cst_.128_165 * vect__37.125_163;
common/mc.c:228:9: note: add new stmt: vect__38.127_169 = vect_cst_.128_165 * vect__37.125_164;
common/mc.c:228:9: note: ------>vectorizing statement: _39 = _33 + 1;

common/mc.c:228:9: note: ------>vectorizing statement: _40 = src_73 + _39;

common/mc.c:228:9: note: ------>vectorizing statement: _41 = *_40;

common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: transform load. ncopies = 1
common/mc.c:228:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_73
common/mc.c:228:9: note: created vectp_src.130_170
common/mc.c:228:9: note: add new stmt: vect__41.131_173 = MEM[(uint8_t *)vectp_src.129_171];
common/mc.c:228:9: note: ------>vectorizing statement: _42 = (int) _41;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand _41
common/mc.c:228:9: note: def_stmt: _41 = *_40;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform conversion. ncopies = 1.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _41
common/mc.c:228:9: note: vect_is_simple_use: operand _41
common/mc.c:228:9: note: def_stmt: _41 = *_40;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _41
  def_stmt =  _41 = *_40;
common/mc.c:228:9: note: add new stmt: vect__42.133_174 = [vec_unpack_lo_expr] vect__41.131_173;
common/mc.c:228:9: note: add new stmt: vect__42.133_175 = [vec_unpack_hi_expr] vect__41.131_173;
common/mc.c:228:9: note: add new stmt: vect__42.132_176 = [vec_unpack_lo_expr] vect__42.133_174;
common/mc.c:228:9: note: add new stmt: vect__42.132_177 = [vec_unpack_hi_expr] vect__42.133_174;
common/mc.c:228:9: note: add new stmt: vect__42.132_178 = [vec_unpack_lo_expr] vect__42.133_175;
common/mc.c:228:9: note: add new stmt: vect__42.132_179 = [vec_unpack_hi_expr] vect__42.133_175;
common/mc.c:228:9: note: ------>vectorizing statement: _43 = cB_16 * _42;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand cB_16
common/mc.c:228:9: note: def_stmt: cB_16 = d8x_9 * _13;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand _42
common/mc.c:228:9: note: def_stmt: _42 = (int) _41;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform binary/unary operation.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: cB_16
common/mc.c:228:9: note: vect_is_simple_use: operand cB_16
common/mc.c:228:9: note: def_stmt: cB_16 = d8x_9 * _13;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: def =  cB_16
  def_stmt =  cB_16 = d8x_9 * _13;
common/mc.c:228:9: note: Create vector_inv.
common/mc.c:228:9: note: created new init_stmt: vect_cst_.135_180 = {cB_16, cB_16, cB_16, cB_16};
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _42
common/mc.c:228:9: note: vect_is_simple_use: operand _42
common/mc.c:228:9: note: def_stmt: _42 = (int) _41;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _42
  def_stmt =  _42 = (int) _41;
common/mc.c:228:9: note: add new stmt: vect__43.134_181 = vect_cst_.135_180 * vect__42.132_176;
common/mc.c:228:9: note: add new stmt: vect__43.134_182 = vect_cst_.135_180 * vect__42.132_177;
common/mc.c:228:9: note: add new stmt: vect__43.134_183 = vect_cst_.135_180 * vect__42.132_178;
common/mc.c:228:9: note: add new stmt: vect__43.134_184 = vect_cst_.135_180 * vect__42.132_179;
common/mc.c:228:9: note: ------>vectorizing statement: _44 = _38 + _43;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand _38
common/mc.c:228:9: note: def_stmt: _38 = cA_14 * _37;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: vect_is_simple_use: operand _43
common/mc.c:228:9: note: def_stmt: _43 = cB_16 * _42;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform binary/unary operation.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _38
common/mc.c:228:9: note: vect_is_simple_use: operand _38
common/mc.c:228:9: note: def_stmt: _38 = cA_14 * _37;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _38
  def_stmt =  _38 = cA_14 * _37;
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _43
common/mc.c:228:9: note: vect_is_simple_use: operand _43
common/mc.c:228:9: note: def_stmt: _43 = cB_16 * _42;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _43
  def_stmt =  _43 = cB_16 * _42;
common/mc.c:228:9: note: add new stmt: vect__44.136_185 = vect__38.127_166 + vect__43.134_181;
common/mc.c:228:9: note: add new stmt: vect__44.136_186 = vect__38.127_167 + vect__43.134_182;
common/mc.c:228:9: note: add new stmt: vect__44.136_187 = vect__38.127_168 + vect__43.134_183;
common/mc.c:228:9: note: add new stmt: vect__44.136_188 = vect__38.127_169 + vect__43.134_184;
common/mc.c:228:9: note: ------>vectorizing statement: _45 = src_74 + _33;

common/mc.c:228:9: note: ------>vectorizing statement: _46 = *_45;

common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: transform load. ncopies = 1
common/mc.c:228:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_74
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:228:9: note: created vectp_src.138_189
common/mc.c:228:9: note: add new stmt: vect__46.139_192 = MEM[(uint8_t *)vectp_src.137_190];
common/mc.c:228:9: note: ------>vectorizing statement: _47 = (int) _46;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand _46
common/mc.c:228:9: note: def_stmt: _46 = *_45;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform conversion. ncopies = 1.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _46
common/mc.c:228:9: note: vect_is_simple_use: operand _46
common/mc.c:228:9: note: def_stmt: _46 = *_45;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _46
  def_stmt =  _46 = *_45;
common/mc.c:228:9: note: add new stmt: vect__47.141_193 = [vec_unpack_lo_expr] vect__46.139_192;
common/mc.c:228:9: note: add new stmt: vect__47.141_194 = [vec_unpack_hi_expr] vect__46.139_192;
common/mc.c:228:9: note: add new stmt: vect__47.140_195 = [vec_unpack_lo_expr] vect__47.141_193;
common/mc.c:228:9: note: add new stmt: vect__47.140_196 = [vec_unpack_hi_expr] vect__47.141_193;
common/mc.c:228:9: note: add new stmt: vect__47.140_197 = [vec_unpack_lo_expr] vect__47.141_194;
common/mc.c:228:9: note: add new stmt: vect__47.140_198 = [vec_unpack_hi_expr] vect__47.141_194;
common/mc.c:228:9: note: ------>vectorizing statement: _48 = cC_17 * _47;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand cC_17
common/mc.c:228:9: note: def_stmt: cC_17 = d8y_11 * _12;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand _47
common/mc.c:228:9: note: def_stmt: _47 = (int) _46;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform binary/unary operation.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: cC_17
common/mc.c:228:9: note: vect_is_simple_use: operand cC_17
common/mc.c:228:9: note: def_stmt: cC_17 = d8y_11 * _12;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: def =  cC_17
  def_stmt =  cC_17 = d8y_11 * _12;
common/mc.c:228:9: note: Create vector_inv.
common/mc.c:228:9: note: created new init_stmt: vect_cst_.143_199 = {cC_17, cC_17, cC_17, cC_17};
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _47
common/mc.c:228:9: note: vect_is_simple_use: operand _47
common/mc.c:228:9: note: def_stmt: _47 = (int) _46;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _47
  def_stmt =  _47 = (int) _46;
common/mc.c:228:9: note: add new stmt: vect__48.142_200 = vect_cst_.143_199 * vect__47.140_195;
common/mc.c:228:9: note: add new stmt: vect__48.142_201 = vect_cst_.143_199 * vect__47.140_196;
common/mc.c:228:9: note: add new stmt: vect__48.142_202 = vect_cst_.143_199 * vect__47.140_197;
common/mc.c:228:9: note: add new stmt: vect__48.142_203 = vect_cst_.143_199 * vect__47.140_198;
common/mc.c:228:9: note: ------>vectorizing statement: _49 = _44 + _48;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand _44
common/mc.c:228:9: note: def_stmt: _44 = _38 + _43;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: vect_is_simple_use: operand _48
common/mc.c:228:9: note: def_stmt: _48 = cC_17 * _47;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform binary/unary operation.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _44
common/mc.c:228:9: note: vect_is_simple_use: operand _44
common/mc.c:228:9: note: def_stmt: _44 = _38 + _43;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _44
  def_stmt =  _44 = _38 + _43;
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _48
common/mc.c:228:9: note: vect_is_simple_use: operand _48
common/mc.c:228:9: note: def_stmt: _48 = cC_17 * _47;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _48
  def_stmt =  _48 = cC_17 * _47;
common/mc.c:228:9: note: add new stmt: vect__49.144_204 = vect__44.136_185 + vect__48.142_200;
common/mc.c:228:9: note: add new stmt: vect__49.144_205 = vect__44.136_186 + vect__48.142_201;
common/mc.c:228:9: note: add new stmt: vect__49.144_206 = vect__44.136_187 + vect__48.142_202;
common/mc.c:228:9: note: add new stmt: vect__49.144_207 = vect__44.136_188 + vect__48.142_203;
common/mc.c:228:9: note: ------>vectorizing statement: _50 = src_74 + _39;

common/mc.c:228:9: note: ------>vectorizing statement: _51 = *_50;

common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: transform load. ncopies = 1
common/mc.c:228:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_74
common/mc.c:228:9: note: created vectp_src.146_208
common/mc.c:228:9: note: add new stmt: vect__51.147_211 = MEM[(uint8_t *)vectp_src.145_209];
common/mc.c:228:9: note: ------>vectorizing statement: _52 = (int) _51;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand _51
common/mc.c:228:9: note: def_stmt: _51 = *_50;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform conversion. ncopies = 1.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _51
common/mc.c:228:9: note: vect_is_simple_use: operand _51
common/mc.c:228:9: note: def_stmt: _51 = *_50;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _51
  def_stmt =  _51 = *_50;
common/mc.c:228:9: note: add new stmt: vect__52.149_212 = [vec_unpack_lo_expr] vect__51.147_211;
common/mc.c:228:9: note: add new stmt: vect__52.149_213 = [vec_unpack_hi_expr] vect__51.147_211;
common/mc.c:228:9: note: add new stmt: vect__52.148_214 = [vec_unpack_lo_expr] vect__52.149_212;
common/mc.c:228:9: note: add new stmt: vect__52.148_215 = [vec_unpack_hi_expr] vect__52.149_212;
common/mc.c:228:9: note: add new stmt: vect__52.148_216 = [vec_unpack_lo_expr] vect__52.149_213;
common/mc.c:228:9: note: add new stmt: vect__52.148_217 = [vec_unpack_hi_expr] vect__52.149_213;
common/mc.c:228:9: note: ------>vectorizing statement: _53 = cD_18 * _52;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand cD_18
common/mc.c:228:9: note: def_stmt: cD_18 = d8x_9 * d8y_11;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: vect_is_simple_use: operand _52
common/mc.c:228:9: note: def_stmt: _52 = (int) _51;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform binary/unary operation.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: cD_18
common/mc.c:228:9: note: vect_is_simple_use: operand cD_18
common/mc.c:228:9: note: def_stmt: cD_18 = d8x_9 * d8y_11;
common/mc.c:228:9: note: type of def: 2.
common/mc.c:228:9: note: def =  cD_18
  def_stmt =  cD_18 = d8x_9 * d8y_11;
common/mc.c:228:9: note: Create vector_inv.
common/mc.c:228:9: note: created new init_stmt: vect_cst_.151_218 = {cD_18, cD_18, cD_18, cD_18};
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _52
common/mc.c:228:9: note: vect_is_simple_use: operand _52
common/mc.c:228:9: note: def_stmt: _52 = (int) _51;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _52
  def_stmt =  _52 = (int) _51;
common/mc.c:228:9: note: add new stmt: vect__53.150_219 = vect_cst_.151_218 * vect__52.148_214;
common/mc.c:228:9: note: add new stmt: vect__53.150_220 = vect_cst_.151_218 * vect__52.148_215;
common/mc.c:228:9: note: add new stmt: vect__53.150_221 = vect_cst_.151_218 * vect__52.148_216;
common/mc.c:228:9: note: add new stmt: vect__53.150_222 = vect_cst_.151_218 * vect__52.148_217;
common/mc.c:228:9: note: ------>vectorizing statement: _54 = _49 + _53;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand _49
common/mc.c:228:9: note: def_stmt: _49 = _44 + _48;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: vect_is_simple_use: operand _53
common/mc.c:228:9: note: def_stmt: _53 = cD_18 * _52;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform binary/unary operation.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _49
common/mc.c:228:9: note: vect_is_simple_use: operand _49
common/mc.c:228:9: note: def_stmt: _49 = _44 + _48;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _49
  def_stmt =  _49 = _44 + _48;
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _53
common/mc.c:228:9: note: vect_is_simple_use: operand _53
common/mc.c:228:9: note: def_stmt: _53 = cD_18 * _52;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _53
  def_stmt =  _53 = cD_18 * _52;
common/mc.c:228:9: note: add new stmt: vect__54.152_223 = vect__49.144_204 + vect__53.150_219;
common/mc.c:228:9: note: add new stmt: vect__54.152_224 = vect__49.144_205 + vect__53.150_220;
common/mc.c:228:9: note: add new stmt: vect__54.152_225 = vect__49.144_206 + vect__53.150_221;
common/mc.c:228:9: note: add new stmt: vect__54.152_226 = vect__49.144_207 + vect__53.150_222;
common/mc.c:228:9: note: ------>vectorizing statement: _55 = _54 + 32;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand _54
common/mc.c:228:9: note: def_stmt: _54 = _49 + _53;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: vect_is_simple_use: operand 32
common/mc.c:228:9: note: transform binary/unary operation.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _54
common/mc.c:228:9: note: vect_is_simple_use: operand _54
common/mc.c:228:9: note: def_stmt: _54 = _49 + _53;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _54
  def_stmt =  _54 = _49 + _53;
common/mc.c:228:9: note: vect_get_vec_def_for_operand: 32
common/mc.c:228:9: note: vect_is_simple_use: operand 32
common/mc.c:228:9: note: Create vector_cst. nunits = 4
common/mc.c:228:9: note: created new init_stmt: vect_cst_.154_227 = { 32, 32, 32, 32 };
common/mc.c:228:9: note: add new stmt: vect__55.153_228 = vect__54.152_223 + vect_cst_.154_227;
common/mc.c:228:9: note: add new stmt: vect__55.153_229 = vect__54.152_224 + vect_cst_.154_227;
common/mc.c:228:9: note: add new stmt: vect__55.153_230 = vect__54.152_225 + vect_cst_.154_227;
common/mc.c:228:9: note: add new stmt: vect__55.153_231 = vect__54.152_226 + vect_cst_.154_227;
common/mc.c:228:9: note: ------>vectorizing statement: _56 = _55 >> 6;

common/mc.c:228:9: note: multiple-types.
common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand _55
common/mc.c:228:9: note: def_stmt: _55 = _54 + 32;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: vect_is_simple_use: operand 6
common/mc.c:228:9: note: vector/scalar shift/rotate found.
common/mc.c:228:9: note: transform binary/unary operation.
common/mc.c:228:9: note: operand 1 using scalar mode.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _55
common/mc.c:228:9: note: vect_is_simple_use: operand _55
common/mc.c:228:9: note: def_stmt: _55 = _54 + 32;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _55
  def_stmt =  _55 = _54 + 32;
common/mc.c:228:9: note: add new stmt: vect__56.155_232 = vect__55.153_228 >> 6;
common/mc.c:228:9: note: add new stmt: vect__56.155_233 = vect__55.153_229 >> 6;
common/mc.c:228:9: note: add new stmt: vect__56.155_234 = vect__55.153_230 >> 6;
common/mc.c:228:9: note: add new stmt: vect__56.155_235 = vect__55.153_231 >> 6;
common/mc.c:228:9: note: ------>vectorizing statement: _57 = (unsigned char) _56;

common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand _56
common/mc.c:228:9: note: def_stmt: _56 = _55 >> 6;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform conversion. ncopies = 1.
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _56
common/mc.c:228:9: note: vect_is_simple_use: operand _56
common/mc.c:228:9: note: def_stmt: _56 = _55 >> 6;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _56
  def_stmt =  _56 = _55 >> 6;
common/mc.c:228:9: note: add new stmt: vect__57.157_236 = VEC_PACK_TRUNC_EXPR <vect__56.155_232, vect__56.155_233>;
common/mc.c:228:9: note: add new stmt: vect__57.157_237 = VEC_PACK_TRUNC_EXPR <vect__56.155_234, vect__56.155_235>;
common/mc.c:228:9: note: add new stmt: vect__57.156_238 = VEC_PACK_TRUNC_EXPR <vect__57.157_236, vect__57.157_237>;
common/mc.c:228:9: note: ------>vectorizing statement: *_34 = _57;

common/mc.c:228:9: note: transform statement.
common/mc.c:228:9: note: vect_is_simple_use: operand _57
common/mc.c:228:9: note: def_stmt: _57 = (unsigned char) _56;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: transform store. ncopies = 1
common/mc.c:228:9: note: vect_get_vec_def_for_operand: _57
common/mc.c:228:9: note: vect_is_simple_use: operand _57
common/mc.c:228:9: note: def_stmt: _57 = (unsigned char) _56;
common/mc.c:228:9: note: type of def: 3.
common/mc.c:228:9: note: def =  _57
  def_stmt =  _57 = (unsigned char) _56;
common/mc.c:228:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *dst_72
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:228:9: note: created vectp_dst.159_239
common/mc.c:228:9: note: add new stmt: MEM[(uint8_t *)vectp_dst.158_240] = vect__57.156_238;
common/mc.c:228:9: note: ------>vectorizing statement: x_59 = x_75 + 1;

common/mc.c:228:9: note: ------>vectorizing statement: # DEBUG x => x_59

common/mc.c:228:9: note: ------>vectorizing statement: # DEBUG x => x_59

common/mc.c:228:9: note: ------>vectorizing statement: vectp_src.122_157 = vectp_src.122_156 + 16;

common/mc.c:228:9: note: ------>vectorizing statement: vectp_src.129_172 = vectp_src.129_171 + 16;

common/mc.c:228:9: note: ------>vectorizing statement: vectp_src.137_191 = vectp_src.137_190 + 16;

common/mc.c:228:9: note: ------>vectorizing statement: vectp_src.145_210 = vectp_src.145_209 + 16;

common/mc.c:228:9: note: ------>vectorizing statement: vectp_dst.158_241 = vectp_dst.158_240 + 16;

common/mc.c:228:9: note: ------>vectorizing statement: if (i_width_32(D) > x_59)


loop at common/mc.c:230: if (ivtmp_243 < bnd.119_111)

;; Scaling loop 2 with scale 0.062500, bounding iterations to 0 from guessed 11
;; guessed iterations are now 1
common/mc.c:228:9: note: LOOP VECTORIZED

common/mc.c:207:13: note: vectorized 1 loops in function.
Removing basic block 4
basic block 4, loop depth 1
 pred:      
 succ:       15


Merging blocks 16 and 23
Merging blocks 25 and 18
mc_chroma (uint8_t * dst, int i_dst_stride, uint8_t * src, int i_src_stride, int mvx, int mvy, int i_width, int i_height)
{
  vector(16) unsigned char * vectp_dst.159;
  vector(16) unsigned char * vectp_dst.158;
  vector(8) short int vect__57.157;
  vector(16) unsigned char vect__57.156;
  vector(4) int vect__56.155;
  vector(4) int vect_cst_.154;
  vector(4) int vect__55.153;
  vector(4) int vect__54.152;
  const vector(4) int vect_cst_.151;
  const vector(4) int vect__53.150;
  vector(8) short unsigned int vect__52.149;
  vector(4) int vect__52.148;
  vector(16) unsigned char vect__51.147;
  vector(16) unsigned char * vectp_src.146;
  vector(16) unsigned char * vectp_src.145;
  vector(4) int vect__49.144;
  const vector(4) int vect_cst_.143;
  const vector(4) int vect__48.142;
  vector(8) short unsigned int vect__47.141;
  vector(4) int vect__47.140;
  vector(16) unsigned char vect__46.139;
  vector(16) unsigned char * vectp_src.138;
  vector(16) unsigned char * vectp_src.137;
  vector(4) int vect__44.136;
  const vector(4) int vect_cst_.135;
  const vector(4) int vect__43.134;
  vector(8) short unsigned int vect__42.133;
  vector(4) int vect__42.132;
  vector(16) unsigned char vect__41.131;
  vector(16) unsigned char * vectp_src.130;
  vector(16) unsigned char * vectp_src.129;
  const vector(4) int vect_cst_.128;
  const vector(4) int vect__38.127;
  vector(8) short unsigned int vect__37.126;
  vector(4) int vect__37.125;
  vector(16) unsigned char vect__36.124;
  vector(16) unsigned char * vectp_src.123;
  vector(16) unsigned char * vectp_src.122;
  int tmp.121;
  unsigned int ratio_mult_vf.120;
  unsigned int bnd.119;
  unsigned int niters.118;
  const int cD;
  const int cC;
  const int cB;
  const int cA;
  const int d8y;
  const int d8x;
  int y;
  int x;
  unsigned char _2;
  int _3;
  int _4;
  int _5;
  int _6;
  int _7;
  int _12;
  int _13;
  unsigned char _15;
  int _19;
  int _21;
  int _22;
  int _23;
  sizetype _24;
  sizetype _27;
  sizetype _33;
  uint8_t * _34;
  uint8_t * _35;
  unsigned char _36;
  int _37;
  int _38;
  sizetype _39;
  uint8_t * _40;
  unsigned char _41;
  int _42;
  int _43;
  int _44;
  uint8_t * _45;
  unsigned char _46;
  int _47;
  int _48;
  int _49;
  uint8_t * _50;
  unsigned char _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  unsigned char _57;
  unsigned int ivtmp_58;
  unsigned int _61;
  uint8_t * _66;
  int _67;
  int _68;
  int _69;
  unsigned char _70;
  uint8_t * _71;
  int _80;
  int _81;
  int _82;
  unsigned char _83;
  uint8_t * _84;
  sizetype _85;
  int _86;
  int _87;
  unsigned char _88;
  uint8_t * _89;
  uint8_t * _90;
  sizetype _91;
  _Bool _94;
  _Bool _95;
  _Bool _96;
  uint8_t * _97;
  _Bool _98;
  uint8_t * _99;
  _Bool _100;
  _Bool _101;
  _Bool _102;
  uint8_t * _103;
  _Bool _104;
  uint8_t * _105;
  _Bool _106;
  unsigned int _107;
  sizetype pretmp_110;
  unsigned int _115;
  sizetype _119;
  uint8_t * _120;
  uint8_t * _121;
  unsigned char _122;
  int _123;
  int _124;
  sizetype _125;
  uint8_t * _126;
  unsigned char _127;
  int _128;
  int _129;
  int _130;
  uint8_t * _131;
  unsigned char _132;
  int _133;
  int _134;
  int _135;
  uint8_t * _136;
  unsigned char _137;
  int _138;
  int _139;
  int _140;
  int _141;
  int _142;
  unsigned char _143;
  unsigned int _146;
  unsigned int _147;
  unsigned int ivtmp_243;

  <bb 2>:
  d8x_9 = mvx_8(D) & 7;
  # DEBUG d8x => d8x_9
  d8y_11 = mvy_10(D) & 7;
  # DEBUG d8y => d8y_11
  _12 = 8 - d8x_9;
  _13 = 8 - d8y_11;
  cA_14 = _12 * _13;
  # DEBUG cA => cA_14
  cB_16 = d8x_9 * _13;
  # DEBUG cB => cB_16
  cC_17 = d8y_11 * _12;
  # DEBUG cC => cC_17
  cD_18 = d8x_9 * d8y_11;
  # DEBUG cD => cD_18
  _19 = mvy_10(D) >> 3;
  _21 = _19 * i_src_stride_20(D);
  _22 = mvx_8(D) >> 3;
  _23 = _21 + _22;
  _24 = (sizetype) _23;
  src_26 = src_25(D) + _24;
  # DEBUG src => src_26
  _27 = (sizetype) i_src_stride_20(D);
  src_28 = src_26 + _27;
  # DEBUG srcp => src_28
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG srcp => src_28
  # DEBUG src => src_26
  # DEBUG dst => dst_29(D)
  if (i_height_31(D) > 0)
    goto <bb 3>;
  else
    goto <bb 23>;

  <bb 3>:
  pretmp_110 = (sizetype) i_dst_stride_60(D);
  goto <bb 21>;

  <bb 4>:
  _107 = (unsigned int) i_width_32(D);
  _106 = _107 > 15;
  _105 = dst_72 + 16;
  _104 = src_73 >= _105;
  _103 = src_73 + 17;
  _102 = dst_72 >= _103;
  _101 = _102 | _104;
  _100 = _101 & _106;
  _99 = dst_72 + 16;
  _98 = src_74 >= _99;
  _97 = src_74 + 17;
  _96 = dst_72 >= _97;
  _95 = _96 | _98;
  _94 = _95 & _100;
  if (_94 != 0)
    goto <bb 5>;
  else
    goto <bb 13>;

  <bb 5>:
  niters.118_112 = (unsigned int) i_width_32(D);
  _61 = niters.118_112 + 4294967280;
  _115 = _61 >> 4;
  bnd.119_111 = _115 + 1;
  ratio_mult_vf.120_116 = bnd.119_111 << 4;
  _146 = (unsigned int) i_width_32(D);
  _147 = _146 + 4294967295;
  if (_147 <= 14)
    goto <bb 11>;
  else
    goto <bb 6>;

  <bb 6>:
  vectp_src.123_155 = src_73;
  vect_cst_.128_165 = {cA_14, cA_14, cA_14, cA_14};
  vectp_src.130_170 = src_73 + 1;
  vect_cst_.135_180 = {cB_16, cB_16, cB_16, cB_16};
  vectp_src.138_189 = src_74;
  vect_cst_.143_199 = {cC_17, cC_17, cC_17, cC_17};
  vectp_src.146_208 = src_74 + 1;
  vect_cst_.151_218 = {cD_18, cD_18, cD_18, cD_18};
  vect_cst_.154_227 = { 32, 32, 32, 32 };
  vectp_dst.159_239 = dst_72;

  <bb 7>:
  # x_75 = PHI <0(6), x_59(12)>
  # vectp_src.122_156 = PHI <vectp_src.123_155(6), vectp_src.122_157(12)>
  # vectp_src.129_171 = PHI <vectp_src.130_170(6), vectp_src.129_172(12)>
  # vectp_src.137_190 = PHI <vectp_src.138_189(6), vectp_src.137_191(12)>
  # vectp_src.145_209 = PHI <vectp_src.146_208(6), vectp_src.145_210(12)>
  # vectp_dst.158_240 = PHI <vectp_dst.159_239(6), vectp_dst.158_241(12)>
  # ivtmp_58 = PHI <0(6), ivtmp_243(12)>
  # DEBUG x => x_75
  _33 = (sizetype) x_75;
  _34 = dst_72 + _33;
  _35 = src_73 + _33;
  vect__36.124_158 = MEM[(uint8_t *)vectp_src.122_156];
  _36 = *_35;
  vect__37.126_159 = [vec_unpack_lo_expr] vect__36.124_158;
  vect__37.126_160 = [vec_unpack_hi_expr] vect__36.124_158;
  vect__37.125_161 = [vec_unpack_lo_expr] vect__37.126_159;
  vect__37.125_162 = [vec_unpack_hi_expr] vect__37.126_159;
  vect__37.125_163 = [vec_unpack_lo_expr] vect__37.126_160;
  vect__37.125_164 = [vec_unpack_hi_expr] vect__37.126_160;
  _37 = (int) _36;
  vect__38.127_166 = vect_cst_.128_165 * vect__37.125_161;
  vect__38.127_167 = vect_cst_.128_165 * vect__37.125_162;
  vect__38.127_168 = vect_cst_.128_165 * vect__37.125_163;
  vect__38.127_169 = vect_cst_.128_165 * vect__37.125_164;
  _38 = cA_14 * _37;
  _39 = _33 + 1;
  _40 = src_73 + _39;
  vect__41.131_173 = MEM[(uint8_t *)vectp_src.129_171];
  _41 = *_40;
  vect__42.133_174 = [vec_unpack_lo_expr] vect__41.131_173;
  vect__42.133_175 = [vec_unpack_hi_expr] vect__41.131_173;
  vect__42.132_176 = [vec_unpack_lo_expr] vect__42.133_174;
  vect__42.132_177 = [vec_unpack_hi_expr] vect__42.133_174;
  vect__42.132_178 = [vec_unpack_lo_expr] vect__42.133_175;
  vect__42.132_179 = [vec_unpack_hi_expr] vect__42.133_175;
  _42 = (int) _41;
  vect__43.134_181 = vect_cst_.135_180 * vect__42.132_176;
  vect__43.134_182 = vect_cst_.135_180 * vect__42.132_177;
  vect__43.134_183 = vect_cst_.135_180 * vect__42.132_178;
  vect__43.134_184 = vect_cst_.135_180 * vect__42.132_179;
  _43 = cB_16 * _42;
  vect__44.136_185 = vect__38.127_166 + vect__43.134_181;
  vect__44.136_186 = vect__38.127_167 + vect__43.134_182;
  vect__44.136_187 = vect__38.127_168 + vect__43.134_183;
  vect__44.136_188 = vect__38.127_169 + vect__43.134_184;
  _44 = _38 + _43;
  _45 = src_74 + _33;
  vect__46.139_192 = MEM[(uint8_t *)vectp_src.137_190];
  _46 = *_45;
  vect__47.141_193 = [vec_unpack_lo_expr] vect__46.139_192;
  vect__47.141_194 = [vec_unpack_hi_expr] vect__46.139_192;
  vect__47.140_195 = [vec_unpack_lo_expr] vect__47.141_193;
  vect__47.140_196 = [vec_unpack_hi_expr] vect__47.141_193;
  vect__47.140_197 = [vec_unpack_lo_expr] vect__47.141_194;
  vect__47.140_198 = [vec_unpack_hi_expr] vect__47.141_194;
  _47 = (int) _46;
  vect__48.142_200 = vect_cst_.143_199 * vect__47.140_195;
  vect__48.142_201 = vect_cst_.143_199 * vect__47.140_196;
  vect__48.142_202 = vect_cst_.143_199 * vect__47.140_197;
  vect__48.142_203 = vect_cst_.143_199 * vect__47.140_198;
  _48 = cC_17 * _47;
  vect__49.144_204 = vect__44.136_185 + vect__48.142_200;
  vect__49.144_205 = vect__44.136_186 + vect__48.142_201;
  vect__49.144_206 = vect__44.136_187 + vect__48.142_202;
  vect__49.144_207 = vect__44.136_188 + vect__48.142_203;
  _49 = _44 + _48;
  _50 = src_74 + _39;
  vect__51.147_211 = MEM[(uint8_t *)vectp_src.145_209];
  _51 = *_50;
  vect__52.149_212 = [vec_unpack_lo_expr] vect__51.147_211;
  vect__52.149_213 = [vec_unpack_hi_expr] vect__51.147_211;
  vect__52.148_214 = [vec_unpack_lo_expr] vect__52.149_212;
  vect__52.148_215 = [vec_unpack_hi_expr] vect__52.149_212;
  vect__52.148_216 = [vec_unpack_lo_expr] vect__52.149_213;
  vect__52.148_217 = [vec_unpack_hi_expr] vect__52.149_213;
  _52 = (int) _51;
  vect__53.150_219 = vect_cst_.151_218 * vect__52.148_214;
  vect__53.150_220 = vect_cst_.151_218 * vect__52.148_215;
  vect__53.150_221 = vect_cst_.151_218 * vect__52.148_216;
  vect__53.150_222 = vect_cst_.151_218 * vect__52.148_217;
  _53 = cD_18 * _52;
  vect__54.152_223 = vect__49.144_204 + vect__53.150_219;
  vect__54.152_224 = vect__49.144_205 + vect__53.150_220;
  vect__54.152_225 = vect__49.144_206 + vect__53.150_221;
  vect__54.152_226 = vect__49.144_207 + vect__53.150_222;
  _54 = _49 + _53;
  vect__55.153_228 = vect__54.152_223 + vect_cst_.154_227;
  vect__55.153_229 = vect__54.152_224 + vect_cst_.154_227;
  vect__55.153_230 = vect__54.152_225 + vect_cst_.154_227;
  vect__55.153_231 = vect__54.152_226 + vect_cst_.154_227;
  _55 = _54 + 32;
  vect__56.155_232 = vect__55.153_228 >> 6;
  vect__56.155_233 = vect__55.153_229 >> 6;
  vect__56.155_234 = vect__55.153_230 >> 6;
  vect__56.155_235 = vect__55.153_231 >> 6;
  _56 = _55 >> 6;
  vect__57.157_236 = VEC_PACK_TRUNC_EXPR <vect__56.155_232, vect__56.155_233>;
  vect__57.157_237 = VEC_PACK_TRUNC_EXPR <vect__56.155_234, vect__56.155_235>;
  vect__57.156_238 = VEC_PACK_TRUNC_EXPR <vect__57.157_236, vect__57.157_237>;
  _57 = (unsigned char) _56;
  MEM[(uint8_t *)vectp_dst.158_240] = vect__57.156_238;
  x_59 = x_75 + 1;
  # DEBUG x => x_59
  # DEBUG x => x_59
  vectp_src.122_157 = vectp_src.122_156 + 16;
  vectp_src.129_172 = vectp_src.129_171 + 16;
  vectp_src.137_191 = vectp_src.137_190 + 16;
  vectp_src.145_210 = vectp_src.145_209 + 16;
  vectp_dst.158_241 = vectp_dst.158_240 + 16;
  ivtmp_243 = ivtmp_58 + 1;
  if (ivtmp_243 < bnd.119_111)
    goto <bb 12>;
  else
    goto <bb 10>;

  <bb 8>:
  # x_117 = PHI <x_145(9), x_148(11)>
  # DEBUG x => x_117
  _119 = (sizetype) x_117;
  _120 = dst_72 + _119;
  _121 = src_73 + _119;
  _122 = *_121;
  _123 = (int) _122;
  _124 = cA_14 * _123;
  _125 = _119 + 1;
  _126 = src_73 + _125;
  _127 = *_126;
  _128 = (int) _127;
  _129 = cB_16 * _128;
  _130 = _124 + _129;
  _131 = src_74 + _119;
  _132 = *_131;
  _133 = (int) _132;
  _134 = cC_17 * _133;
  _135 = _130 + _134;
  _136 = src_74 + _125;
  _137 = *_136;
  _138 = (int) _137;
  _139 = cD_18 * _138;
  _140 = _135 + _139;
  _141 = _140 + 32;
  _142 = _141 >> 6;
  _143 = (unsigned char) _142;
  *_120 = _143;
  x_145 = x_117 + 1;
  # DEBUG x => x_145
  # DEBUG x => x_145
  if (i_width_32(D) > x_145)
    goto <bb 9>;
  else
    goto <bb 16>;

  <bb 9>:
  goto <bb 8>;

  <bb 10>:
  # x_149 = PHI <x_59(7)>
  tmp.121_154 = (int) ratio_mult_vf.120_116;
  if (niters.118_112 == ratio_mult_vf.120_116)
    goto <bb 17>;
  else
    goto <bb 11>;

  <bb 11>:
  # x_148 = PHI <tmp.121_154(10), 0(5)>
  goto <bb 8>;

  <bb 12>:
  goto <bb 7>;

  <bb 13>:

  <bb 14>:
  # x_93 = PHI <0(13), x_114(15)>
  # DEBUG x => x_93
  _91 = (sizetype) x_93;
  _90 = dst_72 + _91;
  _89 = src_73 + _91;
  _88 = *_89;
  _87 = (int) _88;
  _86 = cA_14 * _87;
  _85 = _91 + 1;
  _84 = src_73 + _85;
  _83 = *_84;
  _82 = (int) _83;
  _81 = cB_16 * _82;
  _80 = _86 + _81;
  _71 = src_74 + _91;
  _70 = *_71;
  _69 = (int) _70;
  _68 = cC_17 * _69;
  _67 = _80 + _68;
  _66 = src_74 + _85;
  _15 = *_66;
  _7 = (int) _15;
  _6 = cD_18 * _7;
  _5 = _67 + _6;
  _4 = _5 + 32;
  _3 = _4 >> 6;
  _2 = (unsigned char) _3;
  *_90 = _2;
  x_114 = x_93 + 1;
  # DEBUG x => x_114
  # DEBUG x => x_114
  if (i_width_32(D) > x_114)
    goto <bb 15>;
  else
    goto <bb 18>;

  <bb 15>:
  goto <bb 14>;

  <bb 16>:

  <bb 17>:

  <bb 18>:

  <bb 19>:
  dst_62 = dst_72 + pretmp_110;
  # DEBUG dst => dst_62
  # DEBUG src => src_74
  src_63 = src_74 + _27;
  # DEBUG srcp => src_63
  y_64 = y_76 + 1;
  # DEBUG y => y_64
  # DEBUG y => y_64
  # DEBUG srcp => src_63
  # DEBUG src => src_74
  # DEBUG dst => dst_62
  if (i_height_31(D) > y_64)
    goto <bb 20>;
  else
    goto <bb 22>;

  <bb 20>:

  <bb 21>:
  # dst_72 = PHI <dst_29(D)(3), dst_62(20)>
  # src_73 = PHI <src_26(3), src_74(20)>
  # src_74 = PHI <src_28(3), src_63(20)>
  # y_76 = PHI <0(3), y_64(20)>
  # DEBUG y => y_76
  # DEBUG srcp => src_74
  # DEBUG src => src_73
  # DEBUG dst => dst_72
  # DEBUG x => 0
  if (i_width_32(D) > 0)
    goto <bb 4>;
  else
    goto <bb 19>;

  <bb 22>:

  <bb 23>:
  return;

}



;; Function frame_init_lowres_core (frame_init_lowres_core, funcdef_no=141, decl_uid=6069, cgraph_uid=141, symbol_order=186)


Analyzing loop at common/mc.c:303
common/mc.c:303:5: note: ===== analyze_loop_nest =====
common/mc.c:303:5: note: === vect_analyze_loop_form ===
common/mc.c:303:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:303:5: note: === vect_analyze_loop_form ===
common/mc.c:303:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) < width_21(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) width_21(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:303:5: note: Symbolic number of iterations is (unsigned int) width_21(D)
common/mc.c:303:5: note: not vectorized: control flow in loop.
common/mc.c:303:5: note: bad loop form.

Analyzing loop at common/mc.c:307
common/mc.c:307:9: note: ===== analyze_loop_nest =====
common/mc.c:307:9: note: === vect_analyze_loop_form ===
common/mc.c:307:9: note: === get_loop_niters ===
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:307:9: note: Symbolic number of iterations is (unsigned int) width_21(D)
common/mc.c:307:9: note: === vect_analyze_data_refs ===
Creating dr for *_26
analyze_innermost: success.
	base_address: src0_136
	offset from base address: 0
	constant offset from base address: 0
	step: 2
	aligned to: 128
	base_object: *src0_136
	Access function 0: {0B, +, 2}_2
Creating dr for *_29
analyze_innermost: success.
	base_address: src0_136 + (sizetype) src_stride_17(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 2
	aligned to: 128
	base_object: *src0_136 + (sizetype) src_stride_17(D)
	Access function 0: {0B, +, 2}_2
Creating dr for *_36
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136
	offset from base address: 0
	constant offset from base address: 1
	step: 2
	aligned to: 128
	base_object: *src0_136
	Access function 0: {1B, +, 2}_2
Creating dr for *_39
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136 + (sizetype) src_stride_17(D)
	offset from base address: 0
	constant offset from base address: 1
	step: 2
	aligned to: 128
	base_object: *src0_136 + (sizetype) src_stride_17(D)
	Access function 0: {1B, +, 2}_2
Creating dr for *_23
analyze_innermost: success.
	base_address: dst0_137
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *dst0_137
	Access function 0: {0B, +, 1}_2
Creating dr for *_36
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136
	offset from base address: 0
	constant offset from base address: 1
	step: 2
	aligned to: 128
	base_object: *src0_136
	Access function 0: {1B, +, 2}_2
Creating dr for *_39
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136 + (sizetype) src_stride_17(D)
	offset from base address: 0
	constant offset from base address: 1
	step: 2
	aligned to: 128
	base_object: *src0_136 + (sizetype) src_stride_17(D)
	Access function 0: {1B, +, 2}_2
Creating dr for *_59
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136
	offset from base address: 0
	constant offset from base address: 2
	step: 2
	aligned to: 128
	base_object: *src0_136
	Access function 0: {2B, +, 2}_2
Creating dr for *_62
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136 + (sizetype) src_stride_17(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 2
	aligned to: 128
	base_object: *src0_136 + (sizetype) src_stride_17(D)
	Access function 0: {2B, +, 2}_2
Creating dr for *_50
analyze_innermost: success.
	base_address: dsth_138
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *dsth_138
	Access function 0: {0B, +, 1}_2
Creating dr for *_29
analyze_innermost: success.
	base_address: src0_136 + (sizetype) src_stride_17(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 2
	aligned to: 128
	base_object: *src0_136 + (sizetype) src_stride_17(D)
	Access function 0: {0B, +, 2}_2
Creating dr for *_76
analyze_innermost: Applying pattern match.pd:400, generic-match.c:4039
success.
Applying pattern match.pd:400, generic-match.c:4039
	base_address: src0_136 + ((sizetype) src_stride_17(D) + (sizetype) src_stride_17(D))
	offset from base address: 0
	constant offset from base address: 0
	step: 2
	aligned to: 128
	base_object: *src0_136 + ((sizetype) src_stride_17(D) + (sizetype) src_stride_17(D))
	Access function 0: {0B, +, 2}_2
Creating dr for *_39
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136 + (sizetype) src_stride_17(D)
	offset from base address: 0
	constant offset from base address: 1
	step: 2
	aligned to: 128
	base_object: *src0_136 + (sizetype) src_stride_17(D)
	Access function 0: {1B, +, 2}_2
Creating dr for *_84
analyze_innermost: Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136 + ((sizetype) src_stride_17(D) + (sizetype) src_stride_17(D))
	offset from base address: 0
	constant offset from base address: 1
	step: 2
	aligned to: 128
	base_object: *src0_136 + ((sizetype) src_stride_17(D) + (sizetype) src_stride_17(D))
	Access function 0: {1B, +, 2}_2
Creating dr for *_73
analyze_innermost: success.
	base_address: dstv_139
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *dstv_139
	Access function 0: {0B, +, 1}_2
Creating dr for *_39
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136 + (sizetype) src_stride_17(D)
	offset from base address: 0
	constant offset from base address: 1
	step: 2
	aligned to: 128
	base_object: *src0_136 + (sizetype) src_stride_17(D)
	Access function 0: {1B, +, 2}_2
Creating dr for *_84
analyze_innermost: Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136 + ((sizetype) src_stride_17(D) + (sizetype) src_stride_17(D))
	offset from base address: 0
	constant offset from base address: 1
	step: 2
	aligned to: 128
	base_object: *src0_136 + ((sizetype) src_stride_17(D) + (sizetype) src_stride_17(D))
	Access function 0: {1B, +, 2}_2
Creating dr for *_62
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136 + (sizetype) src_stride_17(D)
	offset from base address: 0
	constant offset from base address: 2
	step: 2
	aligned to: 128
	base_object: *src0_136 + (sizetype) src_stride_17(D)
	Access function 0: {2B, +, 2}_2
Creating dr for *_105
analyze_innermost: Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src0_136 + ((sizetype) src_stride_17(D) + (sizetype) src_stride_17(D))
	offset from base address: 0
	constant offset from base address: 2
	step: 2
	aligned to: 128
	base_object: *src0_136 + ((sizetype) src_stride_17(D) + (sizetype) src_stride_17(D))
	Access function 0: {2B, +, 2}_2
Creating dr for *_95
analyze_innermost: success.
	base_address: dstc_140
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *dstc_140
	Access function 0: {0B, +, 1}_2
common/mc.c:307:9: note: got vectype for stmt: _27 = *_26;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _30 = *_29;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _37 = *_36;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _40 = *_39;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: *_23 = _48;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _51 = *_36;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _53 = *_39;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _60 = *_59;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _63 = *_62;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: *_50 = _71;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _74 = *_29;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _77 = *_76;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _82 = *_39;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _85 = *_84;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: *_73 = _93;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _96 = *_39;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _98 = *_84;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _103 = *_62;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: _106 = *_105;
vector(16) unsigned char
common/mc.c:307:9: note: got vectype for stmt: *_95 = _114;
vector(16) unsigned char
common/mc.c:307:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:307:9: note: Analyze phi: x_141 = PHI <0(9), x_116(12)>

common/mc.c:307:9: note: Access function of PHI: {0, +, 1}_2
common/mc.c:307:9: note: step: 1,  init: 0
common/mc.c:307:9: note: Detected induction.
common/mc.c:307:9: note: Analyze phi: .MEM_143 = PHI <.MEM_145(9), .MEM_115(12)>

common/mc.c:307:9: note: === vect_pattern_recog ===
common/mc.c:307:9: note: vect_is_simple_use: operand x_141
common/mc.c:307:9: note: def_stmt: x_141 = PHI <0(9), x_116(12)>
common/mc.c:307:9: note: type of def: 4.
common/mc.c:307:9: note: vect_is_simple_use: operand _33
common/mc.c:307:9: note: def_stmt: _33 = _32 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: vect_is_simple_use: operand _43
common/mc.c:307:9: note: def_stmt: _43 = _42 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: vect_is_simple_use: operand _46
common/mc.c:307:9: note: def_stmt: _46 = _45 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: vect_is_simple_use: operand _56
common/mc.c:307:9: note: def_stmt: _56 = _55 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: vect_is_simple_use: operand _66
common/mc.c:307:9: note: def_stmt: _66 = _65 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: vect_is_simple_use: operand _69
common/mc.c:307:9: note: def_stmt: _69 = _68 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: vect_is_simple_use: operand _80
common/mc.c:307:9: note: def_stmt: _80 = _79 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: vect_is_simple_use: operand _88
common/mc.c:307:9: note: def_stmt: _88 = _87 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: vect_is_simple_use: operand _91
common/mc.c:307:9: note: def_stmt: _91 = _90 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: vect_is_simple_use: operand _101
common/mc.c:307:9: note: def_stmt: _101 = _100 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: vect_is_simple_use: operand _109
common/mc.c:307:9: note: def_stmt: _109 = _108 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: vect_is_simple_use: operand _112
common/mc.c:307:9: note: def_stmt: _112 = _111 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:307:9: note: Detected interleaving *_76 and *_84
common/mc.c:307:9: note: Detected interleaving *_76 and *_84
common/mc.c:307:9: note: Detected interleaving *_29 and *_39
common/mc.c:307:9: note: Detected interleaving *_29 and *_39
common/mc.c:307:9: note: Detected interleaving *_29 and *_39
common/mc.c:307:9: note: Detected interleaving *_29 and *_39
common/mc.c:307:9: note: Detected interleaving *_26 and *_36
common/mc.c:307:9: note: Detected interleaving *_26 and *_36
common/mc.c:307:9: note: Detected interleaving of size 2
common/mc.c:307:9: note: Detected single element interleaving *_105 step 2
common/mc.c:307:9: note: Data access with gaps requires scalar epilogue loop
common/mc.c:307:9: note: Detected single element interleaving *_29 step 2
common/mc.c:307:9: note: Data access with gaps requires scalar epilogue loop
common/mc.c:307:9: note: Detected interleaving of size 2
common/mc.c:307:9: note: Detected single element interleaving *_62 step 2
common/mc.c:307:9: note: Data access with gaps requires scalar epilogue loop
common/mc.c:307:9: note: Detected single element interleaving *_62 step 2
common/mc.c:307:9: note: Data access with gaps requires scalar epilogue loop
common/mc.c:307:9: note: Detected interleaving of size 2
common/mc.c:307:9: note: Detected single element interleaving *_59 step 2
common/mc.c:307:9: note: Data access with gaps requires scalar epilogue loop
common/mc.c:307:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:307:9: note: init: phi relevant? x_141 = PHI <0(9), x_116(12)>
common/mc.c:307:9: note: init: phi relevant? .MEM_143 = PHI <.MEM_145(9), .MEM_115(12)>
common/mc.c:307:9: note: init: stmt relevant? # DEBUG x => x_141
common/mc.c:307:9: note: init: stmt relevant? _22 = (sizetype) x_141;
common/mc.c:307:9: note: init: stmt relevant? _23 = dst0_137 + _22;
common/mc.c:307:9: note: init: stmt relevant? _24 = x_141 * 2;
common/mc.c:307:9: note: init: stmt relevant? _25 = (sizetype) _24;
common/mc.c:307:9: note: init: stmt relevant? _26 = src0_136 + _25;
common/mc.c:307:9: note: init: stmt relevant? _27 = *_26;
common/mc.c:307:9: note: init: stmt relevant? _28 = (int) _27;
common/mc.c:307:9: note: init: stmt relevant? _29 = src1_19 + _25;
common/mc.c:307:9: note: init: stmt relevant? _30 = *_29;
common/mc.c:307:9: note: init: stmt relevant? _31 = (int) _30;
common/mc.c:307:9: note: init: stmt relevant? _32 = _28 + _31;
common/mc.c:307:9: note: init: stmt relevant? _33 = _32 + 1;
common/mc.c:307:9: note: init: stmt relevant? _34 = _33 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _35 = _25 + 1;
common/mc.c:307:9: note: init: stmt relevant? _36 = src0_136 + _35;
common/mc.c:307:9: note: init: stmt relevant? _37 = *_36;
common/mc.c:307:9: note: init: stmt relevant? _38 = (int) _37;
common/mc.c:307:9: note: init: stmt relevant? _39 = src1_19 + _35;
common/mc.c:307:9: note: init: stmt relevant? _40 = *_39;
common/mc.c:307:9: note: init: stmt relevant? _41 = (int) _40;
common/mc.c:307:9: note: init: stmt relevant? _42 = _38 + _41;
common/mc.c:307:9: note: init: stmt relevant? _43 = _42 + 1;
common/mc.c:307:9: note: init: stmt relevant? _44 = _43 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _45 = _34 + _44;
common/mc.c:307:9: note: init: stmt relevant? _46 = _45 + 1;
common/mc.c:307:9: note: init: stmt relevant? _47 = _46 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _48 = (unsigned char) _47;
common/mc.c:307:9: note: init: stmt relevant? *_23 = _48;
common/mc.c:307:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: init: stmt relevant? _50 = dsth_138 + _22;
common/mc.c:307:9: note: init: stmt relevant? _51 = *_36;
common/mc.c:307:9: note: init: stmt relevant? _52 = (int) _51;
common/mc.c:307:9: note: init: stmt relevant? _53 = *_39;
common/mc.c:307:9: note: init: stmt relevant? _54 = (int) _53;
common/mc.c:307:9: note: init: stmt relevant? _55 = _52 + _54;
common/mc.c:307:9: note: init: stmt relevant? _56 = _55 + 1;
common/mc.c:307:9: note: init: stmt relevant? _57 = _56 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _58 = _25 + 2;
common/mc.c:307:9: note: init: stmt relevant? _59 = src0_136 + _58;
common/mc.c:307:9: note: init: stmt relevant? _60 = *_59;
common/mc.c:307:9: note: init: stmt relevant? _61 = (int) _60;
common/mc.c:307:9: note: init: stmt relevant? _62 = src1_19 + _58;
common/mc.c:307:9: note: init: stmt relevant? _63 = *_62;
common/mc.c:307:9: note: init: stmt relevant? _64 = (int) _63;
common/mc.c:307:9: note: init: stmt relevant? _65 = _61 + _64;
common/mc.c:307:9: note: init: stmt relevant? _66 = _65 + 1;
common/mc.c:307:9: note: init: stmt relevant? _67 = _66 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _68 = _57 + _67;
common/mc.c:307:9: note: init: stmt relevant? _69 = _68 + 1;
common/mc.c:307:9: note: init: stmt relevant? _70 = _69 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _71 = (unsigned char) _70;
common/mc.c:307:9: note: init: stmt relevant? *_50 = _71;
common/mc.c:307:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: init: stmt relevant? _73 = dstv_139 + _22;
common/mc.c:307:9: note: init: stmt relevant? _74 = *_29;
common/mc.c:307:9: note: init: stmt relevant? _75 = (int) _74;
common/mc.c:307:9: note: init: stmt relevant? _76 = src2_20 + _25;
common/mc.c:307:9: note: init: stmt relevant? _77 = *_76;
common/mc.c:307:9: note: init: stmt relevant? _78 = (int) _77;
common/mc.c:307:9: note: init: stmt relevant? _79 = _75 + _78;
common/mc.c:307:9: note: init: stmt relevant? _80 = _79 + 1;
common/mc.c:307:9: note: init: stmt relevant? _81 = _80 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _82 = *_39;
common/mc.c:307:9: note: init: stmt relevant? _83 = (int) _82;
common/mc.c:307:9: note: init: stmt relevant? _84 = src2_20 + _35;
common/mc.c:307:9: note: init: stmt relevant? _85 = *_84;
common/mc.c:307:9: note: init: stmt relevant? _86 = (int) _85;
common/mc.c:307:9: note: init: stmt relevant? _87 = _83 + _86;
common/mc.c:307:9: note: init: stmt relevant? _88 = _87 + 1;
common/mc.c:307:9: note: init: stmt relevant? _89 = _88 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _90 = _81 + _89;
common/mc.c:307:9: note: init: stmt relevant? _91 = _90 + 1;
common/mc.c:307:9: note: init: stmt relevant? _92 = _91 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _93 = (unsigned char) _92;
common/mc.c:307:9: note: init: stmt relevant? *_73 = _93;
common/mc.c:307:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: init: stmt relevant? _95 = dstc_140 + _22;
common/mc.c:307:9: note: init: stmt relevant? _96 = *_39;
common/mc.c:307:9: note: init: stmt relevant? _97 = (int) _96;
common/mc.c:307:9: note: init: stmt relevant? _98 = *_84;
common/mc.c:307:9: note: init: stmt relevant? _99 = (int) _98;
common/mc.c:307:9: note: init: stmt relevant? _100 = _97 + _99;
common/mc.c:307:9: note: init: stmt relevant? _101 = _100 + 1;
common/mc.c:307:9: note: init: stmt relevant? _102 = _101 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _103 = *_62;
common/mc.c:307:9: note: init: stmt relevant? _104 = (int) _103;
common/mc.c:307:9: note: init: stmt relevant? _105 = src2_20 + _58;
common/mc.c:307:9: note: init: stmt relevant? _106 = *_105;
common/mc.c:307:9: note: init: stmt relevant? _107 = (int) _106;
common/mc.c:307:9: note: init: stmt relevant? _108 = _104 + _107;
common/mc.c:307:9: note: init: stmt relevant? _109 = _108 + 1;
common/mc.c:307:9: note: init: stmt relevant? _110 = _109 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _111 = _102 + _110;
common/mc.c:307:9: note: init: stmt relevant? _112 = _111 + 1;
common/mc.c:307:9: note: init: stmt relevant? _113 = _112 >> 1;
common/mc.c:307:9: note: init: stmt relevant? _114 = (unsigned char) _113;
common/mc.c:307:9: note: init: stmt relevant? *_95 = _114;
common/mc.c:307:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: init: stmt relevant? x_116 = x_141 + 1;
common/mc.c:307:9: note: init: stmt relevant? # DEBUG x => x_116
common/mc.c:307:9: note: init: stmt relevant? # DEBUG x => x_116
common/mc.c:307:9: note: init: stmt relevant? if (width_21(D) > x_116)
common/mc.c:307:9: note: worklist: examine stmt: *_95 = _114;
common/mc.c:307:9: note: vect_is_simple_use: operand _114
common/mc.c:307:9: note: def_stmt: _114 = (unsigned char) _113;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _114 = (unsigned char) _113;
common/mc.c:307:9: note: vect_is_simple_use: operand _113
common/mc.c:307:9: note: def_stmt: _113 = _112 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _113 = _112 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _112
common/mc.c:307:9: note: def_stmt: _112 = _111 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _112 = _111 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _111
common/mc.c:307:9: note: def_stmt: _111 = _102 + _110;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _111 = _102 + _110;
common/mc.c:307:9: note: vect_is_simple_use: operand _102
common/mc.c:307:9: note: def_stmt: _102 = _101 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _110
common/mc.c:307:9: note: def_stmt: _110 = _109 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _110 = _109 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _109
common/mc.c:307:9: note: def_stmt: _109 = _108 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _109 = _108 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _108
common/mc.c:307:9: note: def_stmt: _108 = _104 + _107;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _108 = _104 + _107;
common/mc.c:307:9: note: vect_is_simple_use: operand _104
common/mc.c:307:9: note: def_stmt: _104 = (int) _103;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _107
common/mc.c:307:9: note: def_stmt: _107 = (int) _106;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _107 = (int) _106;
common/mc.c:307:9: note: vect_is_simple_use: operand _106
common/mc.c:307:9: note: def_stmt: _106 = *_105;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _106 = *_105;
common/mc.c:307:9: note: worklist: examine stmt: _104 = (int) _103;
common/mc.c:307:9: note: vect_is_simple_use: operand _103
common/mc.c:307:9: note: def_stmt: _103 = *_62;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _103 = *_62;
common/mc.c:307:9: note: worklist: examine stmt: _102 = _101 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _101
common/mc.c:307:9: note: def_stmt: _101 = _100 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _101 = _100 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _100
common/mc.c:307:9: note: def_stmt: _100 = _97 + _99;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _100 = _97 + _99;
common/mc.c:307:9: note: vect_is_simple_use: operand _97
common/mc.c:307:9: note: def_stmt: _97 = (int) _96;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _99
common/mc.c:307:9: note: def_stmt: _99 = (int) _98;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _99 = (int) _98;
common/mc.c:307:9: note: vect_is_simple_use: operand _98
common/mc.c:307:9: note: def_stmt: _98 = *_84;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _98 = *_84;
common/mc.c:307:9: note: worklist: examine stmt: _97 = (int) _96;
common/mc.c:307:9: note: vect_is_simple_use: operand _96
common/mc.c:307:9: note: def_stmt: _96 = *_39;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _96 = *_39;
common/mc.c:307:9: note: worklist: examine stmt: *_73 = _93;
common/mc.c:307:9: note: vect_is_simple_use: operand _93
common/mc.c:307:9: note: def_stmt: _93 = (unsigned char) _92;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _93 = (unsigned char) _92;
common/mc.c:307:9: note: vect_is_simple_use: operand _92
common/mc.c:307:9: note: def_stmt: _92 = _91 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _92 = _91 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _91
common/mc.c:307:9: note: def_stmt: _91 = _90 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _91 = _90 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _90
common/mc.c:307:9: note: def_stmt: _90 = _81 + _89;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _90 = _81 + _89;
common/mc.c:307:9: note: vect_is_simple_use: operand _81
common/mc.c:307:9: note: def_stmt: _81 = _80 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _89
common/mc.c:307:9: note: def_stmt: _89 = _88 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _89 = _88 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _88
common/mc.c:307:9: note: def_stmt: _88 = _87 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _88 = _87 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _87
common/mc.c:307:9: note: def_stmt: _87 = _83 + _86;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _87 = _83 + _86;
common/mc.c:307:9: note: vect_is_simple_use: operand _83
common/mc.c:307:9: note: def_stmt: _83 = (int) _82;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _86
common/mc.c:307:9: note: def_stmt: _86 = (int) _85;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _86 = (int) _85;
common/mc.c:307:9: note: vect_is_simple_use: operand _85
common/mc.c:307:9: note: def_stmt: _85 = *_84;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _85 = *_84;
common/mc.c:307:9: note: worklist: examine stmt: _83 = (int) _82;
common/mc.c:307:9: note: vect_is_simple_use: operand _82
common/mc.c:307:9: note: def_stmt: _82 = *_39;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _82 = *_39;
common/mc.c:307:9: note: worklist: examine stmt: _81 = _80 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _80
common/mc.c:307:9: note: def_stmt: _80 = _79 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _80 = _79 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _79
common/mc.c:307:9: note: def_stmt: _79 = _75 + _78;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _79 = _75 + _78;
common/mc.c:307:9: note: vect_is_simple_use: operand _75
common/mc.c:307:9: note: def_stmt: _75 = (int) _74;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _78
common/mc.c:307:9: note: def_stmt: _78 = (int) _77;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _78 = (int) _77;
common/mc.c:307:9: note: vect_is_simple_use: operand _77
common/mc.c:307:9: note: def_stmt: _77 = *_76;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _77 = *_76;
common/mc.c:307:9: note: worklist: examine stmt: _75 = (int) _74;
common/mc.c:307:9: note: vect_is_simple_use: operand _74
common/mc.c:307:9: note: def_stmt: _74 = *_29;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _74 = *_29;
common/mc.c:307:9: note: worklist: examine stmt: *_50 = _71;
common/mc.c:307:9: note: vect_is_simple_use: operand _71
common/mc.c:307:9: note: def_stmt: _71 = (unsigned char) _70;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _71 = (unsigned char) _70;
common/mc.c:307:9: note: vect_is_simple_use: operand _70
common/mc.c:307:9: note: def_stmt: _70 = _69 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _70 = _69 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _69
common/mc.c:307:9: note: def_stmt: _69 = _68 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _69 = _68 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _68
common/mc.c:307:9: note: def_stmt: _68 = _57 + _67;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _68 = _57 + _67;
common/mc.c:307:9: note: vect_is_simple_use: operand _57
common/mc.c:307:9: note: def_stmt: _57 = _56 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _67
common/mc.c:307:9: note: def_stmt: _67 = _66 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _67 = _66 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _66
common/mc.c:307:9: note: def_stmt: _66 = _65 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _66 = _65 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _65
common/mc.c:307:9: note: def_stmt: _65 = _61 + _64;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _65 = _61 + _64;
common/mc.c:307:9: note: vect_is_simple_use: operand _61
common/mc.c:307:9: note: def_stmt: _61 = (int) _60;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _64
common/mc.c:307:9: note: def_stmt: _64 = (int) _63;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _64 = (int) _63;
common/mc.c:307:9: note: vect_is_simple_use: operand _63
common/mc.c:307:9: note: def_stmt: _63 = *_62;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _63 = *_62;
common/mc.c:307:9: note: worklist: examine stmt: _61 = (int) _60;
common/mc.c:307:9: note: vect_is_simple_use: operand _60
common/mc.c:307:9: note: def_stmt: _60 = *_59;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _60 = *_59;
common/mc.c:307:9: note: worklist: examine stmt: _57 = _56 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _56
common/mc.c:307:9: note: def_stmt: _56 = _55 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _56 = _55 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _55
common/mc.c:307:9: note: def_stmt: _55 = _52 + _54;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _55 = _52 + _54;
common/mc.c:307:9: note: vect_is_simple_use: operand _52
common/mc.c:307:9: note: def_stmt: _52 = (int) _51;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _54
common/mc.c:307:9: note: def_stmt: _54 = (int) _53;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _54 = (int) _53;
common/mc.c:307:9: note: vect_is_simple_use: operand _53
common/mc.c:307:9: note: def_stmt: _53 = *_39;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _53 = *_39;
common/mc.c:307:9: note: worklist: examine stmt: _52 = (int) _51;
common/mc.c:307:9: note: vect_is_simple_use: operand _51
common/mc.c:307:9: note: def_stmt: _51 = *_36;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _51 = *_36;
common/mc.c:307:9: note: worklist: examine stmt: *_23 = _48;
common/mc.c:307:9: note: vect_is_simple_use: operand _48
common/mc.c:307:9: note: def_stmt: _48 = (unsigned char) _47;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _48 = (unsigned char) _47;
common/mc.c:307:9: note: vect_is_simple_use: operand _47
common/mc.c:307:9: note: def_stmt: _47 = _46 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _47 = _46 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _46
common/mc.c:307:9: note: def_stmt: _46 = _45 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _46 = _45 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _45
common/mc.c:307:9: note: def_stmt: _45 = _34 + _44;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _45 = _34 + _44;
common/mc.c:307:9: note: vect_is_simple_use: operand _34
common/mc.c:307:9: note: def_stmt: _34 = _33 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _44
common/mc.c:307:9: note: def_stmt: _44 = _43 >> 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _44 = _43 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _43
common/mc.c:307:9: note: def_stmt: _43 = _42 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _43 = _42 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _42
common/mc.c:307:9: note: def_stmt: _42 = _38 + _41;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _42 = _38 + _41;
common/mc.c:307:9: note: vect_is_simple_use: operand _38
common/mc.c:307:9: note: def_stmt: _38 = (int) _37;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _41
common/mc.c:307:9: note: def_stmt: _41 = (int) _40;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _41 = (int) _40;
common/mc.c:307:9: note: vect_is_simple_use: operand _40
common/mc.c:307:9: note: def_stmt: _40 = *_39;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _40 = *_39;
common/mc.c:307:9: note: worklist: examine stmt: _38 = (int) _37;
common/mc.c:307:9: note: vect_is_simple_use: operand _37
common/mc.c:307:9: note: def_stmt: _37 = *_36;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _37 = *_36;
common/mc.c:307:9: note: worklist: examine stmt: _34 = _33 >> 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _33
common/mc.c:307:9: note: def_stmt: _33 = _32 + 1;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _33 = _32 + 1;
common/mc.c:307:9: note: vect_is_simple_use: operand _32
common/mc.c:307:9: note: def_stmt: _32 = _28 + _31;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _32 = _28 + _31;
common/mc.c:307:9: note: vect_is_simple_use: operand _28
common/mc.c:307:9: note: def_stmt: _28 = (int) _27;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: vect_is_simple_use: operand _31
common/mc.c:307:9: note: def_stmt: _31 = (int) _30;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _31 = (int) _30;
common/mc.c:307:9: note: vect_is_simple_use: operand _30
common/mc.c:307:9: note: def_stmt: _30 = *_29;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _30 = *_29;
common/mc.c:307:9: note: worklist: examine stmt: _28 = (int) _27;
common/mc.c:307:9: note: vect_is_simple_use: operand _27
common/mc.c:307:9: note: def_stmt: _27 = *_26;
common/mc.c:307:9: note: type of def: 3.
common/mc.c:307:9: note: mark relevant 4, live 0.
common/mc.c:307:9: note: worklist: examine stmt: _27 = *_26;
common/mc.c:307:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _30 = *_29;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _37 = *_36;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _40 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: *_23 = _48;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _51 = *_36;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _53 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _60 = *_59;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _63 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: *_50 = _71;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _74 = *_29;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _82 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _96 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _103 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _37 = *_36;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _40 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: *_23 = _48;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _51 = *_36;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _53 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _60 = *_59;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _63 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: *_50 = _71;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _74 = *_29;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {0B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _82 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _96 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _103 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _40 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: *_23 = _48;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _51 = *_36;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _53 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _60 = *_59;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _63 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: *_50 = _71;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _74 = *_29;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _82 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _96 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _103 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: *_23 = _48;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _51 = *_36;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _53 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _60 = *_59;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _63 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: *_50 = _71;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _74 = *_29;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {0B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _82 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _96 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _103 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _51 = *_36;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _53 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _60 = *_59;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _63 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: *_50 = _71;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _74 = *_29;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _82 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _96 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _103 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _53 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _60 = *_59;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _63 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: *_50 = _71;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _74 = *_29;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _82 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _96 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _103 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: _60 = *_59;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: _63 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: *_50 = _71;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: _74 = *_29;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {0B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: _77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: _82 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: _96 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: _103 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _63 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: *_50 = _71;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _74 = *_29;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _82 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _96 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _103 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: *_50 = _71;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: _74 = *_29;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_2)
  (chrec_b = {0B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [1 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [1 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: _77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: _82 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: _96 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: _103 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_50 = _71;
  stmt_b: _74 = *_29;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_50 = _71;
  stmt_b: _77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_50 = _71;
  stmt_b: _82 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_50 = _71;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_50 = _71;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_50 = _71;
  stmt_b: _96 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_50 = _71;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_50 = _71;
  stmt_b: _103 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_50 = _71;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_50 = _71;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_29;
  stmt_b: _77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_29;
  stmt_b: _82 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _74 = *_29;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_29;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_29;
  stmt_b: _96 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _74 = *_29;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_29;
  stmt_b: _103 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _74 = *_29;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _74 = *_29;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _77 = *_76;
  stmt_b: _82 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _77 = *_76;
  stmt_b: _85 = *_84;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _77 = *_76;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _77 = *_76;
  stmt_b: _96 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _77 = *_76;
  stmt_b: _98 = *_84;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _77 = *_76;
  stmt_b: _103 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _77 = *_76;
  stmt_b: _106 = *_105;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _77 = *_76;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_39;
  stmt_b: _85 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_39;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_39;
  stmt_b: _96 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _82 = *_39;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_39;
  stmt_b: _103 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _82 = *_39;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _82 = *_39;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _85 = *_84;
  stmt_b: *_73 = _93;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _85 = *_84;
  stmt_b: _96 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _85 = *_84;
  stmt_b: _98 = *_84;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _85 = *_84;
  stmt_b: _103 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _85 = *_84;
  stmt_b: _106 = *_105;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _85 = *_84;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_73 = _93;
  stmt_b: _96 = *_39;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_73 = _93;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_73 = _93;
  stmt_b: _103 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_73 = _93;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_73 = _93;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *_39;
  stmt_b: _98 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *_39;
  stmt_b: _103 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _96 = *_39;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _96 = *_39;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_84;
  stmt_b: _103 = *_62;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _98 = *_84;
  stmt_b: _106 = *_105;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = no dependence)
  (overlaps_b = no dependence))
)
  (overlap_iterations_a = no dependence)
  (overlap_iterations_b = no dependence))
) -> no dependence
(compute_affine_dependence
  stmt_a: _98 = *_84;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _103 = *_62;
  stmt_b: _106 = *_105;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _103 = *_62;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _106 = *_105;
  stmt_b: *_95 = _114;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_26;
  stmt_b: _27 = *_26;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {0B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _30 = *_29;
  stmt_b: _30 = *_29;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {0B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _37 = *_36;
  stmt_b: _37 = *_36;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _40 = *_39;
  stmt_b: _40 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_23 = _48;
  stmt_b: *_23 = _48;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _51 = *_36;
  stmt_b: _51 = *_36;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _53 = *_39;
  stmt_b: _53 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _60 = *_59;
  stmt_b: _60 = *_59;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _63 = *_62;
  stmt_b: _63 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_50 = _71;
  stmt_b: *_50 = _71;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _74 = *_29;
  stmt_b: _74 = *_29;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {0B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _77 = *_76;
  stmt_b: _77 = *_76;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {0B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _82 = *_39;
  stmt_b: _82 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _85 = *_84;
  stmt_b: _85 = *_84;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_73 = _93;
  stmt_b: *_73 = _93;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _96 = *_39;
  stmt_b: _96 = *_39;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _98 = *_84;
  stmt_b: _98 = *_84;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 2}_2)
  (chrec_b = {1B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _103 = *_62;
  stmt_b: _103 = *_62;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _106 = *_105;
  stmt_b: _106 = *_105;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_2)
  (chrec_b = {2B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_95 = _114;
  stmt_b: *_95 = _114;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_26 and *_23
common/mc.c:307:9: note: mark for run-time aliasing test between *_26 and *_23
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_26 and *_50
common/mc.c:307:9: note: mark for run-time aliasing test between *_26 and *_50
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_26 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_26 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_26 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_26 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_29 and *_23
common/mc.c:307:9: note: mark for run-time aliasing test between *_29 and *_23
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_29 and *_50
common/mc.c:307:9: note: mark for run-time aliasing test between *_29 and *_50
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_29 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_29 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_29 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_29 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_36 and *_23
common/mc.c:307:9: note: mark for run-time aliasing test between *_36 and *_23
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_36 and *_50
common/mc.c:307:9: note: mark for run-time aliasing test between *_36 and *_50
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_36 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_36 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_36 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_36 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_39 and *_23
common/mc.c:307:9: note: mark for run-time aliasing test between *_39 and *_23
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_39 and *_50
common/mc.c:307:9: note: mark for run-time aliasing test between *_39 and *_50
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_39 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_39 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_39 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_39 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_36
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_36
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_39
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_39
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_59
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_59
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_62
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_62
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_50
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_50
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_29
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_29
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_76
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_76
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_39
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_39
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_84
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_84
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_39
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_39
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_84
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_84
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_62
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_62
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_105
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_105
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_23 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_23 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_36 and *_50
common/mc.c:307:9: note: mark for run-time aliasing test between *_36 and *_50
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_36 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_36 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_36 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_36 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_39 and *_50
common/mc.c:307:9: note: mark for run-time aliasing test between *_39 and *_50
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_39 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_39 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_39 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_39 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_59 and *_50
common/mc.c:307:9: note: mark for run-time aliasing test between *_59 and *_50
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_59 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_59 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_59 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_59 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_62 and *_50
common/mc.c:307:9: note: mark for run-time aliasing test between *_62 and *_50
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_62 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_62 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_62 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_62 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_50 and *_29
common/mc.c:307:9: note: mark for run-time aliasing test between *_50 and *_29
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_50 and *_76
common/mc.c:307:9: note: mark for run-time aliasing test between *_50 and *_76
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_50 and *_39
common/mc.c:307:9: note: mark for run-time aliasing test between *_50 and *_39
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_50 and *_84
common/mc.c:307:9: note: mark for run-time aliasing test between *_50 and *_84
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_50 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_50 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_50 and *_39
common/mc.c:307:9: note: mark for run-time aliasing test between *_50 and *_39
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_50 and *_84
common/mc.c:307:9: note: mark for run-time aliasing test between *_50 and *_84
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_50 and *_62
common/mc.c:307:9: note: mark for run-time aliasing test between *_50 and *_62
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_50 and *_105
common/mc.c:307:9: note: mark for run-time aliasing test between *_50 and *_105
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_50 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_50 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_29 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_29 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_29 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_29 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_76 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_76 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_76 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_76 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_39 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_39 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_39 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_39 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_84 and *_73
common/mc.c:307:9: note: mark for run-time aliasing test between *_84 and *_73
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_84 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_84 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_73 and *_39
common/mc.c:307:9: note: mark for run-time aliasing test between *_73 and *_39
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_73 and *_84
common/mc.c:307:9: note: mark for run-time aliasing test between *_73 and *_84
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_73 and *_62
common/mc.c:307:9: note: mark for run-time aliasing test between *_73 and *_62
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_73 and *_105
common/mc.c:307:9: note: mark for run-time aliasing test between *_73 and *_105
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_73 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_73 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_39 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_39 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_84 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_84 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_62 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_62 and *_95
common/mc.c:307:9: note: versioning for alias required: can't determine dependence between *_105 and *_95
common/mc.c:307:9: note: mark for run-time aliasing test between *_105 and *_95
common/mc.c:307:9: note: === vect_determine_vectorization_factor ===
common/mc.c:307:9: note: ==> examining phi: x_141 = PHI <0(9), x_116(12)>

common/mc.c:307:9: note: ==> examining phi: .MEM_143 = PHI <.MEM_145(9), .MEM_115(12)>

common/mc.c:307:9: note: ==> examining statement: # DEBUG x => x_141

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _22 = (sizetype) x_141;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _23 = dst0_137 + _22;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _24 = x_141 * 2;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _25 = (sizetype) _24;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _26 = src0_136 + _25;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _27 = *_26;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _28 = (int) _27;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _29 = src1_19 + _25;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _30 = *_29;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _31 = (int) _30;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _32 = _28 + _31;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _33 = _32 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _34 = _33 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _35 = _25 + 1;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _36 = src0_136 + _35;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _37 = *_36;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _38 = (int) _37;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _39 = src1_19 + _35;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _40 = *_39;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _41 = (int) _40;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _42 = _38 + _41;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _43 = _42 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _44 = _43 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _45 = _34 + _44;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _46 = _45 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _47 = _46 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _48 = (unsigned char) _47;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: *_23 = _48;

common/mc.c:307:9: note: get vectype for scalar type:  uint8_t
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _50 = dsth_138 + _22;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _51 = *_36;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _52 = (int) _51;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _53 = *_39;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _54 = (int) _53;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _55 = _52 + _54;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _56 = _55 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _57 = _56 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _58 = _25 + 2;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _59 = src0_136 + _58;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _60 = *_59;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _61 = (int) _60;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _62 = src1_19 + _58;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _63 = *_62;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _64 = (int) _63;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _65 = _61 + _64;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _66 = _65 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _67 = _66 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _68 = _57 + _67;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _69 = _68 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _70 = _69 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _71 = (unsigned char) _70;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: *_50 = _71;

common/mc.c:307:9: note: get vectype for scalar type:  uint8_t
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _73 = dstv_139 + _22;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _74 = *_29;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _75 = (int) _74;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _76 = src2_20 + _25;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _77 = *_76;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _78 = (int) _77;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _79 = _75 + _78;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _80 = _79 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _81 = _80 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _82 = *_39;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _83 = (int) _82;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _84 = src2_20 + _35;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _85 = *_84;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _86 = (int) _85;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _87 = _83 + _86;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _88 = _87 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _89 = _88 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _90 = _81 + _89;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _91 = _90 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _92 = _91 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _93 = (unsigned char) _92;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: *_73 = _93;

common/mc.c:307:9: note: get vectype for scalar type:  uint8_t
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _95 = dstc_140 + _22;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _96 = *_39;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _97 = (int) _96;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _98 = *_84;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _99 = (int) _98;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _100 = _97 + _99;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _101 = _100 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _102 = _101 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _103 = *_62;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _104 = (int) _103;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _105 = src2_20 + _58;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: _106 = *_105;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _107 = (int) _106;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: _108 = _104 + _107;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _109 = _108 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _110 = _109 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _111 = _102 + _110;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _112 = _111 + 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _113 = _112 >> 1;

common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: get vectype for scalar type:  int
common/mc.c:307:9: note: vectype: vector(4) int
common/mc.c:307:9: note: nunits = 4
common/mc.c:307:9: note: ==> examining statement: _114 = (unsigned char) _113;

common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: get vectype for scalar type:  unsigned char
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: *_95 = _114;

common/mc.c:307:9: note: get vectype for scalar type:  uint8_t
common/mc.c:307:9: note: vectype: vector(16) unsigned char
common/mc.c:307:9: note: nunits = 16
common/mc.c:307:9: note: ==> examining statement: x_116 = x_141 + 1;

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: # DEBUG x => x_116

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: # DEBUG x => x_116

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: ==> examining statement: if (width_21(D) > x_116)

common/mc.c:307:9: note: skip.
common/mc.c:307:9: note: vectorization factor = 16
common/mc.c:307:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:307:9: note: dependence distance  = 1.
common/mc.c:307:9: note: dependence distance  = 1.
common/mc.c:307:9: note: dependence distance  = 0.
common/mc.c:307:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_29 and *_29
common/mc.c:307:9: note: dependence distance  = 1.
common/mc.c:307:9: note: dependence distance  = 0.
common/mc.c:307:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_36 and *_36
common/mc.c:307:9: note: dependence distance  = 0.
common/mc.c:307:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_39 and *_39
common/mc.c:307:9: note: dependence distance  = 0.
common/mc.c:307:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_39 and *_39
common/mc.c:307:9: note: dependence distance  = 0.
common/mc.c:307:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_39 and *_39
common/mc.c:307:9: note: dependence distance  = 0.
common/mc.c:307:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_39 and *_39
common/mc.c:307:9: note: dependence distance  = 0.
common/mc.c:307:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_39 and *_39
common/mc.c:307:9: note: dependence distance  = 1.
common/mc.c:307:9: note: dependence distance  = 0.
common/mc.c:307:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_62 and *_62
common/mc.c:307:9: note: dependence distance  = 1.
common/mc.c:307:9: note: dependence distance  = 1.
common/mc.c:307:9: note: dependence distance  = 0.
common/mc.c:307:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_39 and *_39
common/mc.c:307:9: note: dependence distance  = 0.
common/mc.c:307:9: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *_84 and *_84
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_26
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_29
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_36
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_39
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_23
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_36
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_39
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_59
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_62
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_50
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_29
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_76
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_39
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_84
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_73
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_39
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_84
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_62
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_105
common/mc.c:307:9: note: vect_compute_data_ref_alignment:
common/mc.c:307:9: note: can't force alignment of ref: *_95
common/mc.c:307:9: note: === vect_prune_runtime_alias_test_list ===
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
common/mc.c:307:9: note: found equal ranges *_76, *_23 and *_76, *_23
common/mc.c:307:9: note: found equal ranges *_76, *_23 and *_76, *_23
common/mc.c:307:9: note: merging ranges for *_76, *_23 and *_105, *_23
common/mc.c:307:9: note: found equal ranges *_76, *_50 and *_76, *_50
common/mc.c:307:9: note: found equal ranges *_76, *_50 and *_76, *_50
common/mc.c:307:9: note: merging ranges for *_76, *_50 and *_105, *_50
common/mc.c:307:9: note: found equal ranges *_76, *_73 and *_76, *_73
common/mc.c:307:9: note: found equal ranges *_76, *_73 and *_76, *_73
common/mc.c:307:9: note: merging ranges for *_76, *_73 and *_105, *_73
common/mc.c:307:9: note: found equal ranges *_76, *_95 and *_76, *_95
common/mc.c:307:9: note: found equal ranges *_76, *_95 and *_76, *_95
common/mc.c:307:9: note: merging ranges for *_76, *_95 and *_105, *_95
common/mc.c:307:9: note: found equal ranges *_29, *_23 and *_29, *_23
common/mc.c:307:9: note: found equal ranges *_29, *_23 and *_29, *_23
common/mc.c:307:9: note: found equal ranges *_29, *_23 and *_29, *_23
common/mc.c:307:9: note: found equal ranges *_29, *_23 and *_29, *_23
common/mc.c:307:9: note: found equal ranges *_29, *_23 and *_29, *_23
common/mc.c:307:9: note: merging ranges for *_29, *_23 and *_62, *_23
common/mc.c:307:9: note: merging ranges for *_29, *_23 and *_62, *_23
common/mc.c:307:9: note: found equal ranges *_29, *_50 and *_29, *_50
common/mc.c:307:9: note: found equal ranges *_29, *_50 and *_29, *_50
common/mc.c:307:9: note: found equal ranges *_29, *_50 and *_29, *_50
common/mc.c:307:9: note: found equal ranges *_29, *_50 and *_29, *_50
common/mc.c:307:9: note: found equal ranges *_29, *_50 and *_29, *_50
common/mc.c:307:9: note: merging ranges for *_29, *_50 and *_62, *_50
common/mc.c:307:9: note: merging ranges for *_29, *_50 and *_62, *_50
common/mc.c:307:9: note: found equal ranges *_29, *_73 and *_29, *_73
common/mc.c:307:9: note: found equal ranges *_29, *_73 and *_29, *_73
common/mc.c:307:9: note: found equal ranges *_29, *_73 and *_29, *_73
common/mc.c:307:9: note: found equal ranges *_29, *_73 and *_29, *_73
common/mc.c:307:9: note: found equal ranges *_29, *_73 and *_29, *_73
common/mc.c:307:9: note: merging ranges for *_29, *_73 and *_62, *_73
common/mc.c:307:9: note: merging ranges for *_29, *_73 and *_62, *_73
common/mc.c:307:9: note: found equal ranges *_29, *_95 and *_29, *_95
common/mc.c:307:9: note: found equal ranges *_29, *_95 and *_29, *_95
common/mc.c:307:9: note: found equal ranges *_29, *_95 and *_29, *_95
common/mc.c:307:9: note: found equal ranges *_29, *_95 and *_29, *_95
common/mc.c:307:9: note: found equal ranges *_29, *_95 and *_29, *_95
common/mc.c:307:9: note: merging ranges for *_29, *_95 and *_62, *_95
common/mc.c:307:9: note: merging ranges for *_29, *_95 and *_62, *_95
common/mc.c:307:9: note: found equal ranges *_26, *_23 and *_26, *_23
common/mc.c:307:9: note: found equal ranges *_26, *_23 and *_26, *_23
common/mc.c:307:9: note: merging ranges for *_26, *_23 and *_59, *_23
common/mc.c:307:9: note: found equal ranges *_26, *_50 and *_26, *_50
common/mc.c:307:9: note: found equal ranges *_26, *_50 and *_26, *_50
common/mc.c:307:9: note: merging ranges for *_26, *_50 and *_59, *_50
common/mc.c:307:9: note: found equal ranges *_26, *_73 and *_26, *_73
common/mc.c:307:9: note: found equal ranges *_26, *_73 and *_26, *_73
common/mc.c:307:9: note: merging ranges for *_26, *_73 and *_59, *_73
common/mc.c:307:9: note: found equal ranges *_26, *_95 and *_26, *_95
common/mc.c:307:9: note: found equal ranges *_26, *_95 and *_26, *_95
common/mc.c:307:9: note: merging ranges for *_26, *_95 and *_59, *_95
common/mc.c:307:9: note: improved number of alias checks from 70 to 18
common/mc.c:307:9: note: number of versioning for alias run-time tests exceeds 6 (--param vect-max-version-for-alias-checks)
common/mc.c:299:13: note: vectorized 0 loops in function.
frame_init_lowres_core (uint8_t * src0, uint8_t * dst0, uint8_t * dsth, uint8_t * dstv, uint8_t * dstc, int src_stride, int dst_stride, int width, int height)
{
  uint8_t * src2;
  uint8_t * src1;
  int y;
  int x;
  sizetype _22;
  uint8_t * _23;
  int _24;
  sizetype _25;
  uint8_t * _26;
  unsigned char _27;
  int _28;
  uint8_t * _29;
  unsigned char _30;
  int _31;
  int _32;
  int _33;
  int _34;
  sizetype _35;
  uint8_t * _36;
  unsigned char _37;
  int _38;
  uint8_t * _39;
  unsigned char _40;
  int _41;
  int _42;
  int _43;
  int _44;
  int _45;
  int _46;
  int _47;
  unsigned char _48;
  uint8_t * _50;
  unsigned char _51;
  int _52;
  unsigned char _53;
  int _54;
  int _55;
  int _56;
  int _57;
  sizetype _58;
  uint8_t * _59;
  unsigned char _60;
  int _61;
  uint8_t * _62;
  unsigned char _63;
  int _64;
  int _65;
  int _66;
  int _67;
  int _68;
  int _69;
  int _70;
  unsigned char _71;
  uint8_t * _73;
  unsigned char _74;
  int _75;
  uint8_t * _76;
  unsigned char _77;
  int _78;
  int _79;
  int _80;
  int _81;
  unsigned char _82;
  int _83;
  uint8_t * _84;
  unsigned char _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  int _91;
  int _92;
  unsigned char _93;
  uint8_t * _95;
  unsigned char _96;
  int _97;
  unsigned char _98;
  int _99;
  int _100;
  int _101;
  int _102;
  unsigned char _103;
  int _104;
  uint8_t * _105;
  unsigned char _106;
  int _107;
  int _108;
  int _109;
  int _110;
  int _111;
  int _112;
  int _113;
  unsigned char _114;
  sizetype pretmp_178;
  int pretmp_179;
  sizetype pretmp_180;
  sizetype pretmp_181;

  <bb 2>:
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG dstc => dstc_14(D)
  # DEBUG dstv => dstv_13(D)
  # DEBUG dsth => dsth_12(D)
  # DEBUG dst0 => dst0_11(D)
  # DEBUG src0 => src0_10(D)
  if (height_16(D) > 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  return;

  <bb 4>:
  pretmp_178 = (sizetype) src_stride_17(D);
  pretmp_179 = src_stride_17(D) * 2;
  pretmp_180 = (sizetype) pretmp_179;
  pretmp_181 = (sizetype) dst_stride_120(D);

  <bb 5>:
  # src0_136 = PHI <src0_10(D)(4), src0_119(8)>
  # dst0_137 = PHI <dst0_11(D)(4), dst0_122(8)>
  # dsth_138 = PHI <dsth_12(D)(4), dsth_123(8)>
  # dstv_139 = PHI <dstv_13(D)(4), dstv_124(8)>
  # dstc_140 = PHI <dstc_14(D)(4), dstc_125(8)>
  # y_142 = PHI <0(4), y_126(8)>
  # DEBUG y => y_142
  # DEBUG dstc => dstc_140
  # DEBUG dstv => dstv_139
  # DEBUG dsth => dsth_138
  # DEBUG dst0 => dst0_137
  # DEBUG src0 => src0_136
  src1_19 = src0_136 + pretmp_178;
  # DEBUG src1 => src1_19
  src2_20 = src1_19 + pretmp_178;
  # DEBUG src2 => src2_20
  # DEBUG x => 0
  # DEBUG x => 0
  if (width_21(D) > 0)
    goto <bb 9>;
  else
    goto <bb 6>;

  <bb 6>:
  src0_119 = src0_136 + pretmp_180;
  # DEBUG src0 => src0_119
  dst0_122 = dst0_137 + pretmp_181;
  # DEBUG dst0 => dst0_122
  dsth_123 = dsth_138 + pretmp_181;
  # DEBUG dsth => dsth_123
  dstv_124 = dstv_139 + pretmp_181;
  # DEBUG dstv => dstv_124
  dstc_125 = dstc_140 + pretmp_181;
  # DEBUG dstc => dstc_125
  y_126 = y_142 + 1;
  # DEBUG y => y_126
  # DEBUG y => y_126
  # DEBUG dstc => dstc_125
  # DEBUG dstv => dstv_124
  # DEBUG dsth => dsth_123
  # DEBUG dst0 => dst0_122
  # DEBUG src0 => src0_119
  if (height_16(D) > y_126)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 3>;

  <bb 8>:
  goto <bb 5>;

  <bb 9>:

  <bb 10>:
  # x_141 = PHI <0(9), x_116(12)>
  # DEBUG x => x_141
  _22 = (sizetype) x_141;
  _23 = dst0_137 + _22;
  _24 = x_141 * 2;
  _25 = (sizetype) _24;
  _26 = src0_136 + _25;
  _27 = *_26;
  _28 = (int) _27;
  _29 = src1_19 + _25;
  _30 = *_29;
  _31 = (int) _30;
  _32 = _28 + _31;
  _33 = _32 + 1;
  _34 = _33 >> 1;
  _35 = _25 + 1;
  _36 = src0_136 + _35;
  _37 = *_36;
  _38 = (int) _37;
  _39 = src1_19 + _35;
  _40 = *_39;
  _41 = (int) _40;
  _42 = _38 + _41;
  _43 = _42 + 1;
  _44 = _43 >> 1;
  _45 = _34 + _44;
  _46 = _45 + 1;
  _47 = _46 >> 1;
  _48 = (unsigned char) _47;
  *_23 = _48;
  _50 = dsth_138 + _22;
  _51 = *_36;
  _52 = (int) _51;
  _53 = *_39;
  _54 = (int) _53;
  _55 = _52 + _54;
  _56 = _55 + 1;
  _57 = _56 >> 1;
  _58 = _25 + 2;
  _59 = src0_136 + _58;
  _60 = *_59;
  _61 = (int) _60;
  _62 = src1_19 + _58;
  _63 = *_62;
  _64 = (int) _63;
  _65 = _61 + _64;
  _66 = _65 + 1;
  _67 = _66 >> 1;
  _68 = _57 + _67;
  _69 = _68 + 1;
  _70 = _69 >> 1;
  _71 = (unsigned char) _70;
  *_50 = _71;
  _73 = dstv_139 + _22;
  _74 = *_29;
  _75 = (int) _74;
  _76 = src2_20 + _25;
  _77 = *_76;
  _78 = (int) _77;
  _79 = _75 + _78;
  _80 = _79 + 1;
  _81 = _80 >> 1;
  _82 = *_39;
  _83 = (int) _82;
  _84 = src2_20 + _35;
  _85 = *_84;
  _86 = (int) _85;
  _87 = _83 + _86;
  _88 = _87 + 1;
  _89 = _88 >> 1;
  _90 = _81 + _89;
  _91 = _90 + 1;
  _92 = _91 >> 1;
  _93 = (unsigned char) _92;
  *_73 = _93;
  _95 = dstc_140 + _22;
  _96 = *_39;
  _97 = (int) _96;
  _98 = *_84;
  _99 = (int) _98;
  _100 = _97 + _99;
  _101 = _100 + 1;
  _102 = _101 >> 1;
  _103 = *_62;
  _104 = (int) _103;
  _105 = src2_20 + _58;
  _106 = *_105;
  _107 = (int) _106;
  _108 = _104 + _107;
  _109 = _108 + 1;
  _110 = _109 >> 1;
  _111 = _102 + _110;
  _112 = _111 + 1;
  _113 = _112 >> 1;
  _114 = (unsigned char) _113;
  *_95 = _114;
  x_116 = x_141 + 1;
  # DEBUG x => x_116
  # DEBUG x => x_116
  if (width_21(D) > x_116)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:
  goto <bb 6>;

  <bb 12>:
  goto <bb 10>;

}



;; Function mc_luma (mc_luma, funcdef_no=130, decl_uid=5942, cgraph_uid=130, symbol_order=175)


Analyzing loop at common/mc.c:40
common/mc.c:40:5: note: ===== analyze_loop_nest =====
common/mc.c:40:5: note: === vect_analyze_loop_form ===
common/mc.c:40:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:40:5: note: === vect_analyze_loop_form ===
common/mc.c:40:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) < i_width_41(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) i_width_41(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:40:5: note: Symbolic number of iterations is (unsigned int) i_width_41(D)
common/mc.c:40:5: note: not vectorized: control flow in loop.
common/mc.c:40:5: note: bad loop form.

Analyzing loop at common/mc.c:42
common/mc.c:42:9: note: ===== analyze_loop_nest =====
common/mc.c:42:9: note: === vect_analyze_loop_form ===
common/mc.c:42:9: note: === get_loop_niters ===
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:42:9: note: Symbolic number of iterations is (unsigned int) i_width_41(D)
common/mc.c:42:9: note: === vect_analyze_data_refs ===
Creating dr for *_50
analyze_innermost: success.
	base_address: src1_99
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *src1_99
	Access function 0: {0B, +, 1}_2
Creating dr for *_54
analyze_innermost: success.
	base_address: src2_100
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *src2_100
	Access function 0: {0B, +, 1}_2
Creating dr for *_48
analyze_innermost: success.
	base_address: dst_98
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *dst_98
	Access function 0: {0B, +, 1}_2
common/mc.c:42:9: note: got vectype for stmt: _51 = *_50;
vector(16) unsigned char
common/mc.c:42:9: note: got vectype for stmt: _55 = *_54;
vector(16) unsigned char
common/mc.c:42:9: note: got vectype for stmt: *_48 = _60;
vector(16) unsigned char
common/mc.c:42:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:42:9: note: Analyze phi: .MEM_95 = PHI <.MEM_85(7), .MEM_82(9)>

common/mc.c:42:9: note: Analyze phi: x_97 = PHI <0(7), x_61(9)>

common/mc.c:42:9: note: Access function of PHI: {0, +, 1}_2
common/mc.c:42:9: note: step: 1,  init: 0
common/mc.c:42:9: note: Detected induction.
common/mc.c:42:9: note: === vect_pattern_recog ===
common/mc.c:42:9: note: vect_is_simple_use: operand _58
common/mc.c:42:9: note: def_stmt: _58 = _57 + 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:42:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:42:9: note: init: phi relevant? .MEM_95 = PHI <.MEM_85(7), .MEM_82(9)>
common/mc.c:42:9: note: init: phi relevant? x_97 = PHI <0(7), x_61(9)>
common/mc.c:42:9: note: init: stmt relevant? # DEBUG x => x_97
common/mc.c:42:9: note: init: stmt relevant? _46 = (sizetype) x_97;
common/mc.c:42:9: note: init: stmt relevant? _48 = dst_98 + _46;
common/mc.c:42:9: note: init: stmt relevant? _50 = src1_99 + _46;
common/mc.c:42:9: note: init: stmt relevant? _51 = *_50;
common/mc.c:42:9: note: init: stmt relevant? _52 = (int) _51;
common/mc.c:42:9: note: init: stmt relevant? _54 = src2_100 + _46;
common/mc.c:42:9: note: init: stmt relevant? _55 = *_54;
common/mc.c:42:9: note: init: stmt relevant? _56 = (int) _55;
common/mc.c:42:9: note: init: stmt relevant? _57 = _52 + _56;
common/mc.c:42:9: note: init: stmt relevant? _58 = _57 + 1;
common/mc.c:42:9: note: init: stmt relevant? _59 = _58 >> 1;
common/mc.c:42:9: note: init: stmt relevant? _60 = (unsigned char) _59;
common/mc.c:42:9: note: init: stmt relevant? *_48 = _60;
common/mc.c:42:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: init: stmt relevant? x_61 = x_97 + 1;
common/mc.c:42:9: note: init: stmt relevant? # DEBUG x => x_61
common/mc.c:42:9: note: init: stmt relevant? # DEBUG x => x_61
common/mc.c:42:9: note: init: stmt relevant? if (i_width_41(D) > x_61)
common/mc.c:42:9: note: worklist: examine stmt: *_48 = _60;
common/mc.c:42:9: note: vect_is_simple_use: operand _60
common/mc.c:42:9: note: def_stmt: _60 = (unsigned char) _59;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _60 = (unsigned char) _59;
common/mc.c:42:9: note: vect_is_simple_use: operand _59
common/mc.c:42:9: note: def_stmt: _59 = _58 >> 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _59 = _58 >> 1;
common/mc.c:42:9: note: vect_is_simple_use: operand _58
common/mc.c:42:9: note: def_stmt: _58 = _57 + 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _58 = _57 + 1;
common/mc.c:42:9: note: vect_is_simple_use: operand _57
common/mc.c:42:9: note: def_stmt: _57 = _52 + _56;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _57 = _52 + _56;
common/mc.c:42:9: note: vect_is_simple_use: operand _52
common/mc.c:42:9: note: def_stmt: _52 = (int) _51;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: vect_is_simple_use: operand _56
common/mc.c:42:9: note: def_stmt: _56 = (int) _55;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _56 = (int) _55;
common/mc.c:42:9: note: vect_is_simple_use: operand _55
common/mc.c:42:9: note: def_stmt: _55 = *_54;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _55 = *_54;
common/mc.c:42:9: note: worklist: examine stmt: _52 = (int) _51;
common/mc.c:42:9: note: vect_is_simple_use: operand _51
common/mc.c:42:9: note: def_stmt: _51 = *_50;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: mark relevant 4, live 0.
common/mc.c:42:9: note: worklist: examine stmt: _51 = *_50;
common/mc.c:42:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _55 = *_54;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: *_48 = _60;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: *_48 = _60;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _51 = *_50;
  stmt_b: _51 = *_50;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _55 = *_54;
  stmt_b: _55 = *_54;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_48 = _60;
  stmt_b: *_48 = _60;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_2)
  (chrec_b = {0B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:42:9: note: versioning for alias required: can't determine dependence between *_50 and *_48
common/mc.c:42:9: note: mark for run-time aliasing test between *_50 and *_48
common/mc.c:42:9: note: versioning for alias required: can't determine dependence between *_54 and *_48
common/mc.c:42:9: note: mark for run-time aliasing test between *_54 and *_48
common/mc.c:42:9: note: === vect_determine_vectorization_factor ===
common/mc.c:42:9: note: ==> examining phi: .MEM_95 = PHI <.MEM_85(7), .MEM_82(9)>

common/mc.c:42:9: note: ==> examining phi: x_97 = PHI <0(7), x_61(9)>

common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_97

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: _46 = (sizetype) x_97;

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: _48 = dst_98 + _46;

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: _50 = src1_99 + _46;

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: _51 = *_50;

common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: _52 = (int) _51;

common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: _54 = src2_100 + _46;

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: _55 = *_54;

common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: _56 = (int) _55;

common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: _57 = _52 + _56;

common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: nunits = 4
common/mc.c:42:9: note: ==> examining statement: _58 = _57 + 1;

common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: nunits = 4
common/mc.c:42:9: note: ==> examining statement: _59 = _58 >> 1;

common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: get vectype for scalar type:  int
common/mc.c:42:9: note: vectype: vector(4) int
common/mc.c:42:9: note: nunits = 4
common/mc.c:42:9: note: ==> examining statement: _60 = (unsigned char) _59;

common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: get vectype for scalar type:  unsigned char
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: *_48 = _60;

common/mc.c:42:9: note: get vectype for scalar type:  uint8_t
common/mc.c:42:9: note: vectype: vector(16) unsigned char
common/mc.c:42:9: note: nunits = 16
common/mc.c:42:9: note: ==> examining statement: x_61 = x_97 + 1;

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_61

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_61

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: ==> examining statement: if (i_width_41(D) > x_61)

common/mc.c:42:9: note: skip.
common/mc.c:42:9: note: vectorization factor = 16
common/mc.c:42:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:42:9: note: vect_compute_data_ref_alignment:
common/mc.c:42:9: note: can't force alignment of ref: *_50
common/mc.c:42:9: note: vect_compute_data_ref_alignment:
common/mc.c:42:9: note: can't force alignment of ref: *_54
common/mc.c:42:9: note: vect_compute_data_ref_alignment:
common/mc.c:42:9: note: can't force alignment of ref: *_48
common/mc.c:42:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:42:9: note: improved number of alias checks from 2 to 2
common/mc.c:42:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:42:9: note: Unknown misalignment, is_packed = 0
common/mc.c:42:9: note: Unknown misalignment, is_packed = 0
common/mc.c:42:9: note: Unknown misalignment, is_packed = 0
common/mc.c:42:9: note: vect_can_advance_ivs_p:
common/mc.c:42:9: note: Analyze phi: .MEM_95 = PHI <.MEM_85(7), .MEM_82(9)>

common/mc.c:42:9: note: virtual phi. skip.
common/mc.c:42:9: note: Analyze phi: x_97 = PHI <0(7), x_61(9)>

common/mc.c:42:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:42:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/mc.c:42:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:42:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/mc.c:42:9: note: Setting misalignment to -1.
common/mc.c:42:9: note: Setting misalignment to -1.
common/mc.c:42:9: note: Disable peeling, max peels reached: 15
common/mc.c:42:9: note: Vectorizing an unaligned access.
common/mc.c:42:9: note: Vectorizing an unaligned access.
common/mc.c:42:9: note: Vectorizing an unaligned access.
common/mc.c:42:9: note: === vect_analyze_slp ===
common/mc.c:42:9: note: === vect_make_slp_decision ===
common/mc.c:42:9: note: === vect_detect_hybrid_slp ===
common/mc.c:42:9: note: === vect_analyze_loop_operations ===
common/mc.c:42:9: note: examining phi: .MEM_95 = PHI <.MEM_85(7), .MEM_82(9)>

common/mc.c:42:9: note: examining phi: x_97 = PHI <0(7), x_61(9)>

common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_97
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: _46 = (sizetype) x_97;
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: _48 = dst_98 + _46;
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: _50 = src1_99 + _46;
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: _51 = *_50;
common/mc.c:42:9: note: vect_is_simple_use: operand *_50
common/mc.c:42:9: note: not ssa-name.
common/mc.c:42:9: note: use not simple.
common/mc.c:42:9: note: vect_is_simple_use: operand *_50
common/mc.c:42:9: note: not ssa-name.
common/mc.c:42:9: note: use not simple.
common/mc.c:42:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:42:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: _52 = (int) _51;
common/mc.c:42:9: note: vect_is_simple_use: operand _51
common/mc.c:42:9: note: def_stmt: _51 = *_50;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: === vectorizable_conversion ===
common/mc.c:42:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: _54 = src2_100 + _46;
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: _55 = *_54;
common/mc.c:42:9: note: vect_is_simple_use: operand *_54
common/mc.c:42:9: note: not ssa-name.
common/mc.c:42:9: note: use not simple.
common/mc.c:42:9: note: vect_is_simple_use: operand *_54
common/mc.c:42:9: note: not ssa-name.
common/mc.c:42:9: note: use not simple.
common/mc.c:42:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:42:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: _56 = (int) _55;
common/mc.c:42:9: note: vect_is_simple_use: operand _55
common/mc.c:42:9: note: def_stmt: _55 = *_54;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: === vectorizable_conversion ===
common/mc.c:42:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: _57 = _52 + _56;
common/mc.c:42:9: note: vect_is_simple_use: operand _52
common/mc.c:42:9: note: def_stmt: _52 = (int) _51;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand _56
common/mc.c:42:9: note: def_stmt: _56 = (int) _55;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: === vectorizable_operation ===
common/mc.c:42:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: _58 = _57 + 1;
common/mc.c:42:9: note: vect_is_simple_use: operand _57
common/mc.c:42:9: note: def_stmt: _57 = _52 + _56;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand 1
common/mc.c:42:9: note: === vectorizable_operation ===
common/mc.c:42:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:42:9: note: ==> examining statement: _59 = _58 >> 1;
common/mc.c:42:9: note: vect_is_simple_use: operand _58
common/mc.c:42:9: note: def_stmt: _58 = _57 + 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand 1
common/mc.c:42:9: note: vector/scalar shift/rotate found.
common/mc.c:42:9: note: === vectorizable_shift ===
common/mc.c:42:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:42:9: note: ==> examining statement: _60 = (unsigned char) _59;
common/mc.c:42:9: note: vect_is_simple_use: operand _59
common/mc.c:42:9: note: def_stmt: _59 = _58 >> 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: === vectorizable_conversion ===
common/mc.c:42:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: *_48 = _60;
common/mc.c:42:9: note: vect_is_simple_use: operand _60
common/mc.c:42:9: note: def_stmt: _60 = (unsigned char) _59;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:42:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:42:9: note: ==> examining statement: x_61 = x_97 + 1;
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_61
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: # DEBUG x => x_61
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: ==> examining statement: if (i_width_41(D) > x_61)
common/mc.c:42:9: note: irrelevant.
common/mc.c:42:9: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
common/mc.c:42:9: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
common/mc.c:42:9: note: Cost model analysis: 
  Vector inside of loop cost: 33
  Vector prologue cost: 13
  Vector epilogue cost: 72
  Scalar iteration cost: 9
  Scalar outside cost: 1
  Vector outside cost: 85
  prologue iterations: 0
  epilogue iterations: 8
  Calculated minimum iters for profitability: 10
common/mc.c:42:9: note:   Runtime profitability threshold = 15
common/mc.c:42:9: note:   Static estimate profitability threshold = 15
common/mc.c:42:9: note: epilog loop required
common/mc.c:42:9: note: vect_can_advance_ivs_p:
common/mc.c:42:9: note: Analyze phi: .MEM_95 = PHI <.MEM_85(7), .MEM_82(9)>

common/mc.c:42:9: note: virtual phi. skip.
common/mc.c:42:9: note: Analyze phi: x_97 = PHI <0(7), x_61(9)>

common/mc.c:42:9: note: loop vectorized
common/mc.c:42:9: note: === vec_transform_loop ===
common/mc.c:42:9: note: Profitability threshold is 15 loop iterations.
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:42:9: note: create runtime check for data references *_50 and *_48
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:42:9: note: create runtime check for data references *_54 and *_48
common/mc.c:42:9: note: created 2 versioning for alias checks.
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _78 = _80 | _84;
Applying pattern match.pd:318, generic-match.c:18
gimple_simplified to _73 = _78 & _87;
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _49 = _53 | _68;
Applying pattern match.pd:318, generic-match.c:18
gimple_simplified to _47 = _49 & _73;
common/mc.c:42:9: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
Registering new PHI nodes in block #21
Registering new PHI nodes in block #22
Registering new PHI nodes in block #8
Updating SSA information for statement # DEBUG x => x_97
Updating SSA information for statement _46 = (sizetype) x_97;
Updating SSA information for statement _48 = dst_98 + _46;
Updating SSA information for statement _50 = src1_99 + _46;
Updating SSA information for statement _51 = *_50;
Updating SSA information for statement _52 = (int) _51;
Updating SSA information for statement _54 = src2_100 + _46;
Updating SSA information for statement _55 = *_54;
Updating SSA information for statement _56 = (int) _55;
Updating SSA information for statement _57 = _52 + _56;
Updating SSA information for statement _58 = _57 + 1;
Updating SSA information for statement _59 = _58 >> 1;
Updating SSA information for statement _60 = (unsigned char) _59;
Updating SSA information for statement *_48 = _60;
Updating SSA information for statement x_61 = x_97 + 1;
Updating SSA information for statement # DEBUG x => x_61
Updating SSA information for statement # DEBUG x => x_61
Updating SSA information for statement if (i_width_41(D) > x_61)
Registering new PHI nodes in block #9
Registering new PHI nodes in block #24
Registering new PHI nodes in block #23
Registering new PHI nodes in block #19
Updating SSA information for statement # DEBUG x => x_97
Updating SSA information for statement _107 = (sizetype) x_97;
Updating SSA information for statement _92 = dst_98 + _46;
Updating SSA information for statement _91 = src1_99 + _46;
Updating SSA information for statement _90 = *_50;
Updating SSA information for statement _62 = (int) _51;
Updating SSA information for statement _64 = src2_100 + _46;
Updating SSA information for statement _43 = *_54;
Updating SSA information for statement _74 = (int) _55;
Updating SSA information for statement _76 = _52 + _56;
Updating SSA information for statement _108 = _57 + 1;
Updating SSA information for statement _109 = _58 >> 1;
Updating SSA information for statement _110 = (unsigned char) _59;
Updating SSA information for statement *_48 = _60;
Updating SSA information for statement x_112 = x_97 + 1;
Updating SSA information for statement # DEBUG x => x_61
Updating SSA information for statement # DEBUG x => x_61
Updating SSA information for statement if (i_width_41(D) > x_61)
Registering new PHI nodes in block #20
Registering new PHI nodes in block #10

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

x_21 -> { x_97 }
.MEM_34 -> { .MEM_95 }
_43 -> { _55 }
_62 -> { _52 }
_64 -> { _54 }
_74 -> { _56 }
_76 -> { _57 }
_90 -> { _51 }
_91 -> { _50 }
_92 -> { _48 }
_107 -> { _46 }
_108 -> { _58 }
_109 -> { _59 }
_110 -> { _60 }
.MEM_111 -> { .MEM_82 }
x_112 -> { x_61 }
Incremental SSA update started at block: 21
Number of blocks in CFG: 25
Number of blocks to update: 8 ( 32%)
Affected blocks: 8 9 10 19 20 22 23 24


common/mc.c:42:9: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 25
basic block 25, loop depth 1
 pred:       22
 succ:      


;; Scaling loop 2 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 5 with scale 0.777800, bounding iterations to 16 from guessed 14
;; guessed iterations are now 11
common/mc.c:42:9: note: vect_update_ivs_after_vectorizer: phi: .MEM_95 = PHI <.MEM_85(29), .MEM_82(9)>

common/mc.c:42:9: note: virtual phi. skip.
common/mc.c:42:9: note: vect_update_ivs_after_vectorizer: phi: x_97 = PHI <0(29), x_61(9)>

Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
Setting upper bound of nb iterations for epilogue loop to 14
common/mc.c:42:9: note: ------>vectorizing phi: .MEM_95 = PHI <.MEM_85(33), .MEM_82(9)>

common/mc.c:42:9: note: ------>vectorizing phi: x_97 = PHI <0(33), x_61(9)>

common/mc.c:42:9: note: ------>vectorizing statement: # DEBUG x => x_97

common/mc.c:42:9: note: ------>vectorizing statement: _46 = (sizetype) x_97;

common/mc.c:42:9: note: ------>vectorizing statement: _48 = dst_98 + _46;

common/mc.c:42:9: note: ------>vectorizing statement: _50 = src1_99 + _46;

common/mc.c:42:9: note: ------>vectorizing statement: _51 = *_50;

common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: transform load. ncopies = 1
common/mc.c:42:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src1_99
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:42:9: note: created vectp_src1.257_144
common/mc.c:42:9: note: add new stmt: vect__51.258_147 = MEM[(uint8_t *)vectp_src1.256_145];
common/mc.c:42:9: note: ------>vectorizing statement: _52 = (int) _51;

common/mc.c:42:9: note: multiple-types.
common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _51
common/mc.c:42:9: note: def_stmt: _51 = *_50;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: transform conversion. ncopies = 1.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _51
common/mc.c:42:9: note: vect_is_simple_use: operand _51
common/mc.c:42:9: note: def_stmt: _51 = *_50;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _51
  def_stmt =  _51 = *_50;
common/mc.c:42:9: note: add new stmt: vect__52.260_148 = [vec_unpack_lo_expr] vect__51.258_147;
common/mc.c:42:9: note: add new stmt: vect__52.260_149 = [vec_unpack_hi_expr] vect__51.258_147;
common/mc.c:42:9: note: add new stmt: vect__52.259_150 = [vec_unpack_lo_expr] vect__52.260_148;
common/mc.c:42:9: note: add new stmt: vect__52.259_151 = [vec_unpack_hi_expr] vect__52.260_148;
common/mc.c:42:9: note: add new stmt: vect__52.259_152 = [vec_unpack_lo_expr] vect__52.260_149;
common/mc.c:42:9: note: add new stmt: vect__52.259_153 = [vec_unpack_hi_expr] vect__52.260_149;
common/mc.c:42:9: note: ------>vectorizing statement: _54 = src2_100 + _46;

common/mc.c:42:9: note: ------>vectorizing statement: _55 = *_54;

common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: transform load. ncopies = 1
common/mc.c:42:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src2_100
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:42:9: note: created vectp_src2.262_154
common/mc.c:42:9: note: add new stmt: vect__55.263_157 = MEM[(uint8_t *)vectp_src2.261_155];
common/mc.c:42:9: note: ------>vectorizing statement: _56 = (int) _55;

common/mc.c:42:9: note: multiple-types.
common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _55
common/mc.c:42:9: note: def_stmt: _55 = *_54;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: transform conversion. ncopies = 1.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _55
common/mc.c:42:9: note: vect_is_simple_use: operand _55
common/mc.c:42:9: note: def_stmt: _55 = *_54;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _55
  def_stmt =  _55 = *_54;
common/mc.c:42:9: note: add new stmt: vect__56.265_158 = [vec_unpack_lo_expr] vect__55.263_157;
common/mc.c:42:9: note: add new stmt: vect__56.265_159 = [vec_unpack_hi_expr] vect__55.263_157;
common/mc.c:42:9: note: add new stmt: vect__56.264_160 = [vec_unpack_lo_expr] vect__56.265_158;
common/mc.c:42:9: note: add new stmt: vect__56.264_161 = [vec_unpack_hi_expr] vect__56.265_158;
common/mc.c:42:9: note: add new stmt: vect__56.264_162 = [vec_unpack_lo_expr] vect__56.265_159;
common/mc.c:42:9: note: add new stmt: vect__56.264_163 = [vec_unpack_hi_expr] vect__56.265_159;
common/mc.c:42:9: note: ------>vectorizing statement: _57 = _52 + _56;

common/mc.c:42:9: note: multiple-types.
common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _52
common/mc.c:42:9: note: def_stmt: _52 = (int) _51;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand _56
common/mc.c:42:9: note: def_stmt: _56 = (int) _55;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: transform binary/unary operation.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _52
common/mc.c:42:9: note: vect_is_simple_use: operand _52
common/mc.c:42:9: note: def_stmt: _52 = (int) _51;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _52
  def_stmt =  _52 = (int) _51;
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _56
common/mc.c:42:9: note: vect_is_simple_use: operand _56
common/mc.c:42:9: note: def_stmt: _56 = (int) _55;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _56
  def_stmt =  _56 = (int) _55;
common/mc.c:42:9: note: add new stmt: vect__57.266_164 = vect__52.259_150 + vect__56.264_160;
common/mc.c:42:9: note: add new stmt: vect__57.266_165 = vect__52.259_151 + vect__56.264_161;
common/mc.c:42:9: note: add new stmt: vect__57.266_166 = vect__52.259_152 + vect__56.264_162;
common/mc.c:42:9: note: add new stmt: vect__57.266_167 = vect__52.259_153 + vect__56.264_163;
common/mc.c:42:9: note: ------>vectorizing statement: _58 = _57 + 1;

common/mc.c:42:9: note: multiple-types.
common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _57
common/mc.c:42:9: note: def_stmt: _57 = _52 + _56;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand 1
common/mc.c:42:9: note: transform binary/unary operation.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _57
common/mc.c:42:9: note: vect_is_simple_use: operand _57
common/mc.c:42:9: note: def_stmt: _57 = _52 + _56;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _57
  def_stmt =  _57 = _52 + _56;
common/mc.c:42:9: note: vect_get_vec_def_for_operand: 1
common/mc.c:42:9: note: vect_is_simple_use: operand 1
common/mc.c:42:9: note: Create vector_cst. nunits = 4
common/mc.c:42:9: note: created new init_stmt: vect_cst_.268_168 = { 1, 1, 1, 1 };
common/mc.c:42:9: note: add new stmt: vect__58.267_169 = vect__57.266_164 + vect_cst_.268_168;
common/mc.c:42:9: note: add new stmt: vect__58.267_170 = vect__57.266_165 + vect_cst_.268_168;
common/mc.c:42:9: note: add new stmt: vect__58.267_171 = vect__57.266_166 + vect_cst_.268_168;
common/mc.c:42:9: note: add new stmt: vect__58.267_172 = vect__57.266_167 + vect_cst_.268_168;
common/mc.c:42:9: note: ------>vectorizing statement: _59 = _58 >> 1;

common/mc.c:42:9: note: multiple-types.
common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _58
common/mc.c:42:9: note: def_stmt: _58 = _57 + 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: vect_is_simple_use: operand 1
common/mc.c:42:9: note: vector/scalar shift/rotate found.
common/mc.c:42:9: note: transform binary/unary operation.
common/mc.c:42:9: note: operand 1 using scalar mode.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _58
common/mc.c:42:9: note: vect_is_simple_use: operand _58
common/mc.c:42:9: note: def_stmt: _58 = _57 + 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _58
  def_stmt =  _58 = _57 + 1;
common/mc.c:42:9: note: add new stmt: vect__59.269_173 = vect__58.267_169 >> 1;
common/mc.c:42:9: note: add new stmt: vect__59.269_174 = vect__58.267_170 >> 1;
common/mc.c:42:9: note: add new stmt: vect__59.269_175 = vect__58.267_171 >> 1;
common/mc.c:42:9: note: add new stmt: vect__59.269_176 = vect__58.267_172 >> 1;
common/mc.c:42:9: note: ------>vectorizing statement: _60 = (unsigned char) _59;

common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _59
common/mc.c:42:9: note: def_stmt: _59 = _58 >> 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: transform conversion. ncopies = 1.
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _59
common/mc.c:42:9: note: vect_is_simple_use: operand _59
common/mc.c:42:9: note: def_stmt: _59 = _58 >> 1;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _59
  def_stmt =  _59 = _58 >> 1;
common/mc.c:42:9: note: add new stmt: vect__60.271_177 = VEC_PACK_TRUNC_EXPR <vect__59.269_173, vect__59.269_174>;
common/mc.c:42:9: note: add new stmt: vect__60.271_178 = VEC_PACK_TRUNC_EXPR <vect__59.269_175, vect__59.269_176>;
common/mc.c:42:9: note: add new stmt: vect__60.270_179 = VEC_PACK_TRUNC_EXPR <vect__60.271_177, vect__60.271_178>;
common/mc.c:42:9: note: ------>vectorizing statement: *_48 = _60;

common/mc.c:42:9: note: transform statement.
common/mc.c:42:9: note: vect_is_simple_use: operand _60
common/mc.c:42:9: note: def_stmt: _60 = (unsigned char) _59;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: transform store. ncopies = 1
common/mc.c:42:9: note: vect_get_vec_def_for_operand: _60
common/mc.c:42:9: note: vect_is_simple_use: operand _60
common/mc.c:42:9: note: def_stmt: _60 = (unsigned char) _59;
common/mc.c:42:9: note: type of def: 3.
common/mc.c:42:9: note: def =  _60
  def_stmt =  _60 = (unsigned char) _59;
common/mc.c:42:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *dst_98
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:42:9: note: created vectp_dst.273_180
common/mc.c:42:9: note: add new stmt: MEM[(uint8_t *)vectp_dst.272_181] = vect__60.270_179;
common/mc.c:42:9: note: ------>vectorizing statement: x_61 = x_97 + 1;

common/mc.c:42:9: note: ------>vectorizing statement: # DEBUG x => x_61

common/mc.c:42:9: note: ------>vectorizing statement: # DEBUG x => x_61

common/mc.c:42:9: note: ------>vectorizing statement: vectp_src1.256_146 = vectp_src1.256_145 + 16;

common/mc.c:42:9: note: ------>vectorizing statement: vectp_src2.261_156 = vectp_src2.261_155 + 16;

common/mc.c:42:9: note: ------>vectorizing statement: vectp_dst.272_182 = vectp_dst.272_181 + 16;

common/mc.c:42:9: note: ------>vectorizing statement: if (i_width_41(D) > x_61)


loop at common/mc.c:44: if (ivtmp_184 < bnd.253_115)

;; Scaling loop 2 with scale 0.062500, bounding iterations to 0 from guessed 11
;; guessed iterations are now 1
common/mc.c:42:9: note: LOOP VECTORIZED


Analyzing loop at common/mc.c:124
common/mc.c:124:5: note: ===== analyze_loop_nest =====
common/mc.c:124:5: note: === vect_analyze_loop_form ===
common/mc.c:124:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [1, + , 1](no_overflow) < i_height_42(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) i_height_42(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:124:5: note: Symbolic number of iterations is (unsigned int) i_height_42(D)
common/mc.c:124:5: note: === vect_analyze_data_refs ===
common/mc.c:124:5: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/mc.c:124:5: note: bad data references.
common/mc.c:162:13: note: vectorized 1 loops in function.
Removing basic block 7
basic block 7, loop depth 1
 pred:      
 succ:       21


Merging blocks 22 and 29
Merging blocks 31 and 24
mc_luma (uint8_t * dst, int i_dst_stride, uint8_t * * src, int i_src_stride, int mvx, int mvy, int i_width, int i_height)
{
  vector(16) unsigned char * vectp_dst.273;
  vector(16) unsigned char * vectp_dst.272;
  vector(8) short int vect__60.271;
  vector(16) unsigned char vect__60.270;
  vector(4) int vect__59.269;
  vector(4) int vect_cst_.268;
  vector(4) int vect__58.267;
  vector(4) int vect__57.266;
  vector(8) short unsigned int vect__56.265;
  vector(4) int vect__56.264;
  vector(16) unsigned char vect__55.263;
  vector(16) unsigned char * vectp_src2.262;
  vector(16) unsigned char * vectp_src2.261;
  vector(8) short unsigned int vect__52.260;
  vector(4) int vect__52.259;
  vector(16) unsigned char vect__51.258;
  vector(16) unsigned char * vectp_src1.257;
  vector(16) unsigned char * vectp_src1.256;
  int tmp.255;
  unsigned int ratio_mult_vf.254;
  unsigned int bnd.253;
  unsigned int niters.252;
  int y;
  int x;
  int y;
  uint8_t * src2;
  uint8_t * src1;
  int offset;
  int qpel_idx;
  int _3;
  int _4;
  int _6;
  int _8;
  int _10;
  int _11;
  int _14;
  long unsigned int _15;
  long unsigned int _16;
  uint8_t * * _18;
  uint8_t * _19;
  sizetype _20;
  _Bool _22;
  int _23;
  int _24;
  sizetype _25;
  sizetype _26;
  int _28;
  int _29;
  long unsigned int _30;
  long unsigned int _31;
  uint8_t * * _32;
  uint8_t * _33;
  _Bool _35;
  long unsigned int _36;
  sizetype _37;
  unsigned char _43;
  sizetype pretmp_44;
  sizetype pretmp_45;
  sizetype _46;
  _Bool _47;
  uint8_t * _48;
  _Bool _49;
  uint8_t * _50;
  unsigned char _51;
  int _52;
  _Bool _53;
  uint8_t * _54;
  unsigned char _55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char _60;
  int _62;
  uint8_t * _64;
  uint8_t * _66;
  _Bool _68;
  sizetype pretmp_70;
  uint8_t * _71;
  long unsigned int pretmp_72;
  _Bool _73;
  int _74;
  int _76;
  _Bool _78;
  _Bool _80;
  uint8_t * _81;
  unsigned int ivtmp_82;
  _Bool _84;
  uint8_t * _86;
  _Bool _87;
  unsigned int _88;
  unsigned char _90;
  uint8_t * _91;
  uint8_t * _92;
  sizetype pretmp_106;
  sizetype _107;
  int _108;
  int _109;
  unsigned char _110;
  unsigned int _116;
  unsigned int _117;
  sizetype _121;
  uint8_t * _122;
  uint8_t * _123;
  unsigned char _124;
  int _125;
  uint8_t * _126;
  unsigned char _127;
  int _128;
  int _129;
  int _130;
  int _131;
  unsigned char _132;
  unsigned int _135;
  unsigned int _136;
  unsigned int ivtmp_184;

  <bb 2>:
  _3 = mvy_2(D) & 3;
  _4 = _3 << 2;
  _6 = mvx_5(D) & 3;
  qpel_idx_7 = _4 + _6;
  # DEBUG qpel_idx => qpel_idx_7
  _8 = mvy_2(D) >> 2;
  _10 = _8 * i_src_stride_9(D);
  _11 = mvx_5(D) >> 2;
  offset_12 = _10 + _11;
  # DEBUG offset => offset_12
  _14 = hpel_ref0[qpel_idx_7];
  _15 = (long unsigned int) _14;
  _16 = _15 * 8;
  _18 = src_17(D) + _16;
  _19 = *_18;
  _20 = (sizetype) offset_12;
  _22 = _3 == 3;
  _23 = (int) _22;
  _24 = i_src_stride_9(D) * _23;
  _25 = (sizetype) _24;
  _26 = _20 + _25;
  src1_27 = _19 + _26;
  # DEBUG src1 => src1_27
  _28 = qpel_idx_7 & 5;
  if (_28 != 0)
    goto <bb 5>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG y => 0
  # DEBUG dst => dst_39(D)
  # DEBUG src => src1_27
  if (i_height_42(D) > 0)
    goto <bb 26>;
  else
    goto <bb 4>;

  <bb 4>:
  return;

  <bb 5>:
  _29 = hpel_ref1[qpel_idx_7];
  _30 = (long unsigned int) _29;
  _31 = _30 * 8;
  _32 = src_17(D) + _31;
  _33 = *_32;
  _35 = _6 == 3;
  _36 = (long unsigned int) _35;
  _37 = _20 + _36;
  src2_38 = _33 + _37;
  # DEBUG src2 => src2_38
  # DEBUG dst => dst_39(D)
  # DEBUG i_dst_stride => i_dst_stride_40(D)
  # DEBUG src1 => src1_27
  # DEBUG i_src1_stride => i_src_stride_9(D)
  # DEBUG src2 => src2_38
  # DEBUG i_src2_stride => i_src_stride_9(D)
  # DEBUG i_width => i_width_41(D)
  # DEBUG i_height => i_height_42(D)
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => src2_38
  # DEBUG src1 => src1_27
  # DEBUG dst => dst_39(D)
  if (i_height_42(D) > 0)
    goto <bb 6>;
  else
    goto <bb 4>;

  <bb 6>:
  pretmp_44 = (sizetype) i_dst_stride_40(D);
  pretmp_45 = (sizetype) i_src_stride_9(D);
  goto <bb 25>;

  <bb 7>:
  _88 = (unsigned int) i_width_41(D);
  _87 = _88 > 15;
  _86 = src1_99 + 16;
  _84 = _86 <= dst_98;
  _81 = dst_98 + 16;
  _80 = _81 <= src1_99;
  _78 = _80 | _84;
  _73 = _78 & _87;
  _71 = src2_100 + 16;
  _68 = _71 <= dst_98;
  _66 = dst_98 + 16;
  _53 = _66 <= src2_100;
  _49 = _53 | _68;
  _47 = _49 & _73;
  if (_47 != 0)
    goto <bb 8>;
  else
    goto <bb 16>;

  <bb 8>:
  niters.252_114 = (unsigned int) i_width_41(D);
  _116 = niters.252_114 + 4294967280;
  _117 = _116 >> 4;
  bnd.253_115 = _117 + 1;
  ratio_mult_vf.254_118 = bnd.253_115 << 4;
  _135 = (unsigned int) i_width_41(D);
  _136 = _135 + 4294967295;
  if (_136 <= 14)
    goto <bb 14>;
  else
    goto <bb 9>;

  <bb 9>:
  vectp_src1.257_144 = src1_99;
  vectp_src2.262_154 = src2_100;
  vect_cst_.268_168 = { 1, 1, 1, 1 };
  vectp_dst.273_180 = dst_98;

  <bb 10>:
  # x_97 = PHI <0(9), x_61(15)>
  # vectp_src1.256_145 = PHI <vectp_src1.257_144(9), vectp_src1.256_146(15)>
  # vectp_src2.261_155 = PHI <vectp_src2.262_154(9), vectp_src2.261_156(15)>
  # vectp_dst.272_181 = PHI <vectp_dst.273_180(9), vectp_dst.272_182(15)>
  # ivtmp_82 = PHI <0(9), ivtmp_184(15)>
  # DEBUG x => x_97
  _46 = (sizetype) x_97;
  _48 = dst_98 + _46;
  _50 = src1_99 + _46;
  vect__51.258_147 = MEM[(uint8_t *)vectp_src1.256_145];
  _51 = *_50;
  vect__52.260_148 = [vec_unpack_lo_expr] vect__51.258_147;
  vect__52.260_149 = [vec_unpack_hi_expr] vect__51.258_147;
  vect__52.259_150 = [vec_unpack_lo_expr] vect__52.260_148;
  vect__52.259_151 = [vec_unpack_hi_expr] vect__52.260_148;
  vect__52.259_152 = [vec_unpack_lo_expr] vect__52.260_149;
  vect__52.259_153 = [vec_unpack_hi_expr] vect__52.260_149;
  _52 = (int) _51;
  _54 = src2_100 + _46;
  vect__55.263_157 = MEM[(uint8_t *)vectp_src2.261_155];
  _55 = *_54;
  vect__56.265_158 = [vec_unpack_lo_expr] vect__55.263_157;
  vect__56.265_159 = [vec_unpack_hi_expr] vect__55.263_157;
  vect__56.264_160 = [vec_unpack_lo_expr] vect__56.265_158;
  vect__56.264_161 = [vec_unpack_hi_expr] vect__56.265_158;
  vect__56.264_162 = [vec_unpack_lo_expr] vect__56.265_159;
  vect__56.264_163 = [vec_unpack_hi_expr] vect__56.265_159;
  _56 = (int) _55;
  vect__57.266_164 = vect__52.259_150 + vect__56.264_160;
  vect__57.266_165 = vect__52.259_151 + vect__56.264_161;
  vect__57.266_166 = vect__52.259_152 + vect__56.264_162;
  vect__57.266_167 = vect__52.259_153 + vect__56.264_163;
  _57 = _52 + _56;
  vect__58.267_169 = vect__57.266_164 + vect_cst_.268_168;
  vect__58.267_170 = vect__57.266_165 + vect_cst_.268_168;
  vect__58.267_171 = vect__57.266_166 + vect_cst_.268_168;
  vect__58.267_172 = vect__57.266_167 + vect_cst_.268_168;
  _58 = _57 + 1;
  vect__59.269_173 = vect__58.267_169 >> 1;
  vect__59.269_174 = vect__58.267_170 >> 1;
  vect__59.269_175 = vect__58.267_171 >> 1;
  vect__59.269_176 = vect__58.267_172 >> 1;
  _59 = _58 >> 1;
  vect__60.271_177 = VEC_PACK_TRUNC_EXPR <vect__59.269_173, vect__59.269_174>;
  vect__60.271_178 = VEC_PACK_TRUNC_EXPR <vect__59.269_175, vect__59.269_176>;
  vect__60.270_179 = VEC_PACK_TRUNC_EXPR <vect__60.271_177, vect__60.271_178>;
  _60 = (unsigned char) _59;
  MEM[(uint8_t *)vectp_dst.272_181] = vect__60.270_179;
  x_61 = x_97 + 1;
  # DEBUG x => x_61
  # DEBUG x => x_61
  vectp_src1.256_146 = vectp_src1.256_145 + 16;
  vectp_src2.261_156 = vectp_src2.261_155 + 16;
  vectp_dst.272_182 = vectp_dst.272_181 + 16;
  ivtmp_184 = ivtmp_82 + 1;
  if (ivtmp_184 < bnd.253_115)
    goto <bb 15>;
  else
    goto <bb 13>;

  <bb 11>:
  # x_120 = PHI <x_134(12), x_138(14)>
  # DEBUG x => x_120
  _121 = (sizetype) x_120;
  _122 = dst_98 + _121;
  _123 = src1_99 + _121;
  _124 = *_123;
  _125 = (int) _124;
  _126 = src2_100 + _121;
  _127 = *_126;
  _128 = (int) _127;
  _129 = _125 + _128;
  _130 = _129 + 1;
  _131 = _130 >> 1;
  _132 = (unsigned char) _131;
  *_122 = _132;
  x_134 = x_120 + 1;
  # DEBUG x => x_134
  # DEBUG x => x_134
  if (i_width_41(D) > x_134)
    goto <bb 12>;
  else
    goto <bb 19>;

  <bb 12>:
  goto <bb 11>;

  <bb 13>:
  # x_139 = PHI <x_61(10)>
  tmp.255_143 = (int) ratio_mult_vf.254_118;
  if (niters.252_114 == ratio_mult_vf.254_118)
    goto <bb 20>;
  else
    goto <bb 14>;

  <bb 14>:
  # x_138 = PHI <tmp.255_143(13), 0(8)>
  goto <bb 11>;

  <bb 15>:
  goto <bb 10>;

  <bb 16>:

  <bb 17>:
  # x_21 = PHI <0(16), x_112(18)>
  # DEBUG x => x_21
  _107 = (sizetype) x_21;
  _92 = dst_98 + _107;
  _91 = src1_99 + _107;
  _90 = *_91;
  _62 = (int) _90;
  _64 = src2_100 + _107;
  _43 = *_64;
  _74 = (int) _43;
  _76 = _62 + _74;
  _108 = _76 + 1;
  _109 = _108 >> 1;
  _110 = (unsigned char) _109;
  *_92 = _110;
  x_112 = x_21 + 1;
  # DEBUG x => x_112
  # DEBUG x => x_112
  if (i_width_41(D) > x_112)
    goto <bb 18>;
  else
    goto <bb 21>;

  <bb 18>:
  goto <bb 17>;

  <bb 19>:

  <bb 20>:

  <bb 21>:

  <bb 22>:
  dst_63 = dst_98 + pretmp_44;
  # DEBUG dst => dst_63
  src1_65 = src1_99 + pretmp_45;
  # DEBUG src1 => src1_65
  src2_67 = src2_100 + pretmp_45;
  # DEBUG src2 => src2_67
  y_69 = y_101 + 1;
  # DEBUG y => y_69
  # DEBUG y => y_69
  # DEBUG src2 => src2_67
  # DEBUG src1 => src1_65
  # DEBUG dst => dst_63
  if (i_height_42(D) > y_69)
    goto <bb 24>;
  else
    goto <bb 23>;

  <bb 23>:
  goto <bb 4>;

  <bb 24>:

  <bb 25>:
  # dst_98 = PHI <dst_39(D)(6), dst_63(24)>
  # src1_99 = PHI <src1_27(6), src1_65(24)>
  # src2_100 = PHI <src2_38(6), src2_67(24)>
  # y_101 = PHI <0(6), y_69(24)>
  # DEBUG y => y_101
  # DEBUG src2 => src2_100
  # DEBUG src1 => src1_99
  # DEBUG dst => dst_98
  # DEBUG x => 0
  if (i_width_41(D) > 0)
    goto <bb 7>;
  else
    goto <bb 22>;

  <bb 26>:
  pretmp_72 = (long unsigned int) i_width_41(D);
  pretmp_70 = (sizetype) i_dst_stride_40(D);
  pretmp_106 = (sizetype) i_src_stride_9(D);

  <bb 27>:
  # dst_102 = PHI <dst_39(D)(26), dst_77(29)>
  # src1_103 = PHI <src1_27(26), src1_75(29)>
  # y_104 = PHI <0(26), y_79(29)>
  # DEBUG y => y_104
  # DEBUG dst => dst_102
  # DEBUG src => src1_103
  # DEBUG __dest => dst_102
  # DEBUG __src => src1_103
  # DEBUG __len => (long unsigned int) i_width_41(D)
  __builtin_memcpy (dst_102, src1_103, pretmp_72);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  src1_75 = src1_103 + pretmp_106;
  # DEBUG src => src1_75
  dst_77 = dst_102 + pretmp_70;
  # DEBUG dst => dst_77
  y_79 = y_104 + 1;
  # DEBUG y => y_79
  # DEBUG y => y_79
  # DEBUG dst => dst_77
  # DEBUG src => src1_75
  if (i_height_42(D) > y_79)
    goto <bb 29>;
  else
    goto <bb 28>;

  <bb 28>:
  goto <bb 4>;

  <bb 29>:
  goto <bb 27>;

}



;; Function mc_copy_w16 (mc_copy_w16, funcdef_no=133, decl_uid=5992, cgraph_uid=133, symbol_order=178)


Analyzing loop at common/mc.c:124
common/mc.c:124:5: note: ===== analyze_loop_nest =====
common/mc.c:124:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:124:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < i_height_6(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) i_height_6(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:124:5: note: Symbolic number of iterations is (unsigned int) i_height_6(D)
common/mc.c:124:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(char * {ref-all})src_25]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: src_2(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_10
	aligned to: 128
	base_object: MEM[(char * {ref-all})src_2(D)]
	Access function 0: {0B, +, pretmp_10}_1
Creating dr for MEM[(char * {ref-all})dst_24]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: dst_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_8
	aligned to: 128
	base_object: MEM[(char * {ref-all})dst_4(D)]
	Access function 0: {0B, +, pretmp_8}_1
common/mc.c:124:5: note: not vectorized: no vectype for stmt: _18 = MEM[(char * {ref-all})src_25];
 scalar_type: __int128 unsigned
common/mc.c:124:5: note: bad data references.
common/mc.c:245:1: note: vectorized 0 loops in function.
mc_copy_w16 (uint8_t * dst, int i_dst, uint8_t * src, int i_src, int i_height)
{
  int y;
  sizetype pretmp_8;
  sizetype pretmp_10;
  __int128 unsigned _18;

  <bb 2>:
  # DEBUG src => src_2(D)
  # DEBUG i_src_stride => i_src_3(D)
  # DEBUG dst => dst_4(D)
  # DEBUG i_dst_stride => i_dst_5(D)
  # DEBUG i_width => 16
  # DEBUG i_height => i_height_6(D)
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG dst => dst_4(D)
  # DEBUG src => src_2(D)
  if (i_height_6(D) > 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG src => NULL
  # DEBUG i_src_stride => NULL
  # DEBUG dst => NULL
  # DEBUG i_dst_stride => NULL
  # DEBUG i_width => NULL
  # DEBUG i_height => NULL
  # DEBUG y => NULL
  return;

  <bb 4>:
  pretmp_10 = (sizetype) i_src_3(D);
  pretmp_8 = (sizetype) i_dst_5(D);

  <bb 5>:
  # dst_24 = PHI <dst_4(D)(4), dst_14(6)>
  # src_25 = PHI <src_2(D)(4), src_12(6)>
  # y_26 = PHI <0(4), y_16(6)>
  # DEBUG y => y_26
  # DEBUG dst => dst_24
  # DEBUG src => src_25
  # DEBUG __dest => dst_24
  # DEBUG __src => src_25
  # DEBUG __len => 16
  _18 = MEM[(char * {ref-all})src_25];
  MEM[(char * {ref-all})dst_24] = _18;
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  src_12 = src_25 + pretmp_10;
  # DEBUG src => src_12
  dst_14 = dst_24 + pretmp_8;
  # DEBUG dst => dst_14
  y_16 = y_26 + 1;
  # DEBUG y => y_16
  # DEBUG y => y_16
  # DEBUG dst => dst_14
  # DEBUG src => src_12
  if (i_height_6(D) > y_16)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 3>;

  <bb 6>:
  goto <bb 5>;

}



;; Function mc_copy_w8 (mc_copy_w8, funcdef_no=134, decl_uid=5999, cgraph_uid=134, symbol_order=179)


Analyzing loop at common/mc.c:124
common/mc.c:124:5: note: ===== analyze_loop_nest =====
common/mc.c:124:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:124:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < i_height_6(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) i_height_6(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:124:5: note: Symbolic number of iterations is (unsigned int) i_height_6(D)
common/mc.c:124:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(char * {ref-all})src_25]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: src_2(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_10
	aligned to: 128
	base_object: MEM[(char * {ref-all})src_2(D)]
	Access function 0: {0B, +, pretmp_10}_1
Creating dr for MEM[(char * {ref-all})dst_24]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: dst_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_8
	aligned to: 128
	base_object: MEM[(char * {ref-all})dst_4(D)]
	Access function 0: {0B, +, pretmp_8}_1
common/mc.c:124:5: note: got vectype for stmt: _18 = MEM[(char * {ref-all})src_25];
vector(2) long unsigned int
common/mc.c:124:5: note: got vectype for stmt: MEM[(char * {ref-all})dst_24] = _18;
vector(2) long unsigned int
common/mc.c:124:5: note: not vectorized: not suitable for strided load MEM[(char * {ref-all})dst_24] = _18;

common/mc.c:124:5: note: bad data references.
common/mc.c:246:1: note: vectorized 0 loops in function.
mc_copy_w8 (uint8_t * dst, int i_dst, uint8_t * src, int i_src, int i_height)
{
  int y;
  sizetype pretmp_8;
  sizetype pretmp_10;
  long unsigned int _18;

  <bb 2>:
  # DEBUG src => src_2(D)
  # DEBUG i_src_stride => i_src_3(D)
  # DEBUG dst => dst_4(D)
  # DEBUG i_dst_stride => i_dst_5(D)
  # DEBUG i_width => 8
  # DEBUG i_height => i_height_6(D)
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG dst => dst_4(D)
  # DEBUG src => src_2(D)
  if (i_height_6(D) > 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG src => NULL
  # DEBUG i_src_stride => NULL
  # DEBUG dst => NULL
  # DEBUG i_dst_stride => NULL
  # DEBUG i_width => NULL
  # DEBUG i_height => NULL
  # DEBUG y => NULL
  return;

  <bb 4>:
  pretmp_10 = (sizetype) i_src_3(D);
  pretmp_8 = (sizetype) i_dst_5(D);

  <bb 5>:
  # dst_24 = PHI <dst_4(D)(4), dst_14(6)>
  # src_25 = PHI <src_2(D)(4), src_12(6)>
  # y_26 = PHI <0(4), y_16(6)>
  # DEBUG y => y_26
  # DEBUG dst => dst_24
  # DEBUG src => src_25
  # DEBUG __dest => dst_24
  # DEBUG __src => src_25
  # DEBUG __len => 8
  _18 = MEM[(char * {ref-all})src_25];
  MEM[(char * {ref-all})dst_24] = _18;
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  src_12 = src_25 + pretmp_10;
  # DEBUG src => src_12
  dst_14 = dst_24 + pretmp_8;
  # DEBUG dst => dst_14
  y_16 = y_26 + 1;
  # DEBUG y => y_16
  # DEBUG y => y_16
  # DEBUG dst => dst_14
  # DEBUG src => src_12
  if (i_height_6(D) > y_16)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 3>;

  <bb 6>:
  goto <bb 5>;

}



;; Function mc_copy_w4 (mc_copy_w4, funcdef_no=135, decl_uid=6006, cgraph_uid=135, symbol_order=180)


Analyzing loop at common/mc.c:124
common/mc.c:124:5: note: ===== analyze_loop_nest =====
common/mc.c:124:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:124:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < i_height_6(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) i_height_6(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:124:5: note: Symbolic number of iterations is (unsigned int) i_height_6(D)
common/mc.c:124:5: note: === vect_analyze_data_refs ===
Creating dr for MEM[(char * {ref-all})src_25]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: src_2(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_10
	aligned to: 128
	base_object: MEM[(char * {ref-all})src_2(D)]
	Access function 0: {0B, +, pretmp_10}_1
Creating dr for MEM[(char * {ref-all})dst_24]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: dst_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_8
	aligned to: 128
	base_object: MEM[(char * {ref-all})dst_4(D)]
	Access function 0: {0B, +, pretmp_8}_1
common/mc.c:124:5: note: got vectype for stmt: _18 = MEM[(char * {ref-all})src_25];
vector(4) unsigned int
common/mc.c:124:5: note: got vectype for stmt: MEM[(char * {ref-all})dst_24] = _18;
vector(4) unsigned int
common/mc.c:124:5: note: not vectorized: not suitable for strided load MEM[(char * {ref-all})dst_24] = _18;

common/mc.c:124:5: note: bad data references.
common/mc.c:247:1: note: vectorized 0 loops in function.
mc_copy_w4 (uint8_t * dst, int i_dst, uint8_t * src, int i_src, int i_height)
{
  int y;
  sizetype pretmp_8;
  sizetype pretmp_10;
  unsigned int _18;

  <bb 2>:
  # DEBUG src => src_2(D)
  # DEBUG i_src_stride => i_src_3(D)
  # DEBUG dst => dst_4(D)
  # DEBUG i_dst_stride => i_dst_5(D)
  # DEBUG i_width => 4
  # DEBUG i_height => i_height_6(D)
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG dst => dst_4(D)
  # DEBUG src => src_2(D)
  if (i_height_6(D) > 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG src => NULL
  # DEBUG i_src_stride => NULL
  # DEBUG dst => NULL
  # DEBUG i_dst_stride => NULL
  # DEBUG i_width => NULL
  # DEBUG i_height => NULL
  # DEBUG y => NULL
  return;

  <bb 4>:
  pretmp_10 = (sizetype) i_src_3(D);
  pretmp_8 = (sizetype) i_dst_5(D);

  <bb 5>:
  # dst_24 = PHI <dst_4(D)(4), dst_14(6)>
  # src_25 = PHI <src_2(D)(4), src_12(6)>
  # y_26 = PHI <0(4), y_16(6)>
  # DEBUG y => y_26
  # DEBUG dst => dst_24
  # DEBUG src => src_25
  # DEBUG __dest => dst_24
  # DEBUG __src => src_25
  # DEBUG __len => 4
  _18 = MEM[(char * {ref-all})src_25];
  MEM[(char * {ref-all})dst_24] = _18;
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  src_12 = src_25 + pretmp_10;
  # DEBUG src => src_12
  dst_14 = dst_24 + pretmp_8;
  # DEBUG dst => dst_14
  y_16 = y_26 + 1;
  # DEBUG y => y_16
  # DEBUG y => y_16
  # DEBUG dst => dst_14
  # DEBUG src => src_12
  if (i_height_6(D) > y_16)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 3>;

  <bb 6>:
  goto <bb 5>;

}



;; Function plane_copy (plane_copy, funcdef_no=136, decl_uid=6014, cgraph_uid=136, symbol_order=181)


Analyzing loop at common/mc.c:252
common/mc.c:252:10: note: ===== analyze_loop_nest =====
common/mc.c:252:10: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:252:10: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [h_7(D) + -1, + , -1](no_overflow) != 0
  bounds on difference of bases: -2147483646 ... 2147483648
Applying pattern match.pd:49, generic-match.c:4249
  result:
    # of iterations (unsigned int) (h_7(D) + -1), bounded by 4294967295
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:252:10: note: Symbolic number of iterations is (unsigned int) h_7(D)
common/mc.c:252:10: note: === vect_analyze_data_refs ===
common/mc.c:252:10: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/mc.c:252:10: note: bad data references.
common/mc.c:249:13: note: vectorized 0 loops in function.
plane_copy (uint8_t * dst, int i_dst, uint8_t * src, int i_src, int w, int h)
{
  long unsigned int pretmp_1;
  sizetype pretmp_2;
  sizetype pretmp_3;

  <bb 2>:
  # DEBUG h => h_7(D)
  # DEBUG src => src_6(D)
  # DEBUG dst => dst_5(D)
  h_23 = h_7(D) + -1;
  # DEBUG h => h_23
  if (h_7(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  return;

  <bb 4>:
  pretmp_1 = (long unsigned int) w_10(D);
  pretmp_2 = (sizetype) i_dst_13(D);
  pretmp_3 = (sizetype) i_src_16(D);

  <bb 5>:
  # dst_24 = PHI <dst_5(D)(4), dst_15(6)>
  # src_25 = PHI <src_6(D)(4), src_18(6)>
  # h_28 = PHI <h_23(4), h_9(6)>
  # DEBUG src => src_25
  # DEBUG dst => dst_24
  # DEBUG h => h_28
  # DEBUG __dest => dst_24
  # DEBUG __src => src_25
  # DEBUG __len => (long unsigned int) w_10(D)
  __builtin_memcpy (dst_24, src_25, pretmp_1);
  # DEBUG __dest => NULL
  # DEBUG __src => NULL
  # DEBUG __len => NULL
  dst_15 = dst_24 + pretmp_2;
  # DEBUG dst => dst_15
  src_18 = src_25 + pretmp_3;
  # DEBUG src => src_18
  # DEBUG h => h_28
  # DEBUG src => src_18
  # DEBUG dst => dst_15
  h_9 = h_28 + -1;
  # DEBUG h => h_9
  if (h_28 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 3>;

  <bb 6>:
  goto <bb 5>;

}



;; Function hpel_filter (hpel_filter, funcdef_no=129, decl_uid=5914, cgraph_uid=129, symbol_order=172)


Analyzing loop at common/mc.c:139
common/mc.c:139:5: note: ===== analyze_loop_nest =====
common/mc.c:139:5: note: === vect_analyze_loop_form ===
common/mc.c:139:5: note: not vectorized: multiple nested loops.
common/mc.c:139:5: note: bad loop form.

Analyzing loop at common/mc.c:149
common/mc.c:149:9: note: ===== analyze_loop_nest =====
common/mc.c:149:9: note: === vect_analyze_loop_form ===
common/mc.c:149:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [1, + , 1](no_overflow) < width_13(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) width_13(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:149:9: note: Symbolic number of iterations is (unsigned int) width_13(D)
common/mc.c:149:9: note: === vect_analyze_data_refs ===
Creating dr for *_126
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_185
	offset from base address: 0
	constant offset from base address: -2(OVF)
	step: 1
	aligned to: 128
	base_object: *src_185
	Access function 0: {-2B, +, 1}_4
Creating dr for *_130
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_185
	offset from base address: 0
	constant offset from base address: 3
	step: 1
	aligned to: 128
	base_object: *src_185
	Access function 0: {3B, +, 1}_4
Creating dr for *_135
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_185
	offset from base address: 0
	constant offset from base address: -1(OVF)
	step: 1
	aligned to: 128
	base_object: *src_185
	Access function 0: {-1B, +, 1}_4
Creating dr for *_139
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_185
	offset from base address: 0
	constant offset from base address: 2
	step: 1
	aligned to: 128
	base_object: *src_185
	Access function 0: {2B, +, 1}_4
Creating dr for *_145
analyze_innermost: success.
	base_address: src_185
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *src_185
	Access function 0: {0B, +, 1}_4
Creating dr for *_149
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_185
	offset from base address: 0
	constant offset from base address: 1
	step: 1
	aligned to: 128
	base_object: *src_185
	Access function 0: {1B, +, 1}_4
Creating dr for *_124
analyze_innermost: success.
	base_address: dsth_192
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *dsth_192
	Access function 0: {0B, +, 1}_4
common/mc.c:149:9: note: got vectype for stmt: _127 = *_126;
vector(16) unsigned char
common/mc.c:149:9: note: got vectype for stmt: _131 = *_130;
vector(16) unsigned char
common/mc.c:149:9: note: got vectype for stmt: _136 = *_135;
vector(16) unsigned char
common/mc.c:149:9: note: got vectype for stmt: _140 = *_139;
vector(16) unsigned char
common/mc.c:149:9: note: got vectype for stmt: _146 = *_145;
vector(16) unsigned char
common/mc.c:149:9: note: got vectype for stmt: _150 = *_149;
vector(16) unsigned char
common/mc.c:149:9: note: got vectype for stmt: *_124 = iftmp.0_181;
vector(16) unsigned char
common/mc.c:149:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:149:9: note: Analyze phi: x_201 = PHI <0(12), x_159(15)>

common/mc.c:149:9: note: Access function of PHI: {0, +, 1}_4
common/mc.c:149:9: note: step: 1,  init: 0
common/mc.c:149:9: note: Detected induction.
common/mc.c:149:9: note: Analyze phi: .MEM_205 = PHI <.MEM_121(12), .MEM_158(15)>

common/mc.c:149:9: note: === vect_pattern_recog ===
common/mc.c:149:9: note: vect_is_simple_use: operand _142
common/mc.c:149:9: note: def_stmt: _142 = _137 + _141;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _152
common/mc.c:149:9: note: def_stmt: _152 = _147 + _151;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _155
common/mc.c:149:9: note: def_stmt: _155 = _154 + 16;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _177
common/mc.c:149:9: note: def_stmt: _177 = -_156;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand iftmp.0_179
common/mc.c:149:9: note: def_stmt: iftmp.0_179 = (unsigned char) _178;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _178
common/mc.c:149:9: note: def_stmt: _178 = _177 >> 31;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand iftmp.0_180
common/mc.c:149:9: note: def_stmt: iftmp.0_180 = (unsigned char) _156;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_recog_mixed_size_cond_pattern: detected:
common/mc.c:149:9: note: pattern recognized: patt_375 = (unsigned char) patt_206;
common/mc.c:149:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:149:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:149:9: note: init: phi relevant? x_201 = PHI <0(12), x_159(15)>
common/mc.c:149:9: note: init: phi relevant? .MEM_205 = PHI <.MEM_121(12), .MEM_158(15)>
common/mc.c:149:9: note: init: stmt relevant? # DEBUG x => NULL
common/mc.c:149:9: note: init: stmt relevant? _123 = (sizetype) x_201;
common/mc.c:149:9: note: init: stmt relevant? _124 = dsth_192 + _123;
common/mc.c:149:9: note: init: stmt relevant? _125 = _123 + 18446744073709551614;
common/mc.c:149:9: note: init: stmt relevant? _126 = src_185 + _125;
common/mc.c:149:9: note: init: stmt relevant? _127 = *_126;
common/mc.c:149:9: note: init: stmt relevant? _128 = (int) _127;
common/mc.c:149:9: note: init: stmt relevant? _129 = _123 + 3;
common/mc.c:149:9: note: init: stmt relevant? _130 = src_185 + _129;
common/mc.c:149:9: note: init: stmt relevant? _131 = *_130;
common/mc.c:149:9: note: init: stmt relevant? _132 = (int) _131;
common/mc.c:149:9: note: init: stmt relevant? _133 = _128 + _132;
common/mc.c:149:9: note: init: stmt relevant? _134 = _123 + 18446744073709551615;
common/mc.c:149:9: note: init: stmt relevant? _135 = src_185 + _134;
common/mc.c:149:9: note: init: stmt relevant? _136 = *_135;
common/mc.c:149:9: note: init: stmt relevant? _137 = (int) _136;
common/mc.c:149:9: note: init: stmt relevant? _138 = _123 + 2;
common/mc.c:149:9: note: init: stmt relevant? _139 = src_185 + _138;
common/mc.c:149:9: note: init: stmt relevant? _140 = *_139;
common/mc.c:149:9: note: init: stmt relevant? _141 = (int) _140;
common/mc.c:149:9: note: init: stmt relevant? _142 = _137 + _141;
common/mc.c:149:9: note: init: stmt relevant? _143 = _142 * -5;
common/mc.c:149:9: note: init: stmt relevant? _144 = _133 + _143;
common/mc.c:149:9: note: init: stmt relevant? _145 = src_185 + _123;
common/mc.c:149:9: note: init: stmt relevant? _146 = *_145;
common/mc.c:149:9: note: init: stmt relevant? _147 = (int) _146;
common/mc.c:149:9: note: init: stmt relevant? _148 = _123 + 1;
common/mc.c:149:9: note: init: stmt relevant? _149 = src_185 + _148;
common/mc.c:149:9: note: init: stmt relevant? _150 = *_149;
common/mc.c:149:9: note: init: stmt relevant? _151 = (int) _150;
common/mc.c:149:9: note: init: stmt relevant? _152 = _147 + _151;
common/mc.c:149:9: note: init: stmt relevant? _153 = _152 * 20;
common/mc.c:149:9: note: init: stmt relevant? _154 = _144 + _153;
common/mc.c:149:9: note: init: stmt relevant? _155 = _154 + 16;
common/mc.c:149:9: note: init: stmt relevant? _156 = _155 >> 5;
common/mc.c:149:9: note: init: stmt relevant? # DEBUG x => NULL
common/mc.c:149:9: note: init: stmt relevant? _176 = _156 & -256;
common/mc.c:149:9: note: init: stmt relevant? _177 = -_156;
common/mc.c:149:9: note: init: stmt relevant? _178 = _177 >> 31;
common/mc.c:149:9: note: init: stmt relevant? iftmp.0_179 = (unsigned char) _178;
common/mc.c:149:9: note: init: stmt relevant? iftmp.0_180 = (unsigned char) _156;
common/mc.c:149:9: note: init: stmt relevant? iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;
common/mc.c:149:9: note: init: stmt relevant? # DEBUG x => NULL
common/mc.c:149:9: note: init: stmt relevant? *_124 = iftmp.0_181;
common/mc.c:149:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: init: stmt relevant? x_159 = x_201 + 1;
common/mc.c:149:9: note: init: stmt relevant? # DEBUG x => x_159
common/mc.c:149:9: note: init: stmt relevant? # DEBUG x => x_159
common/mc.c:149:9: note: init: stmt relevant? if (width_13(D) > x_159)
common/mc.c:149:9: note: worklist: examine stmt: *_124 = iftmp.0_181;
common/mc.c:149:9: note: vect_is_simple_use: operand iftmp.0_181
common/mc.c:149:9: note: def_stmt: iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: last stmt in pattern. don't mark relevant/live.
common/mc.c:149:9: note: worklist: examine stmt: patt_375 = (unsigned char) patt_206;
common/mc.c:149:9: note: vect_is_simple_use: operand patt_206
common/mc.c:149:9: note: def_stmt: patt_206 = _176 != 0 ? _178 : _156;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: patt_206 = _176 != 0 ? _178 : _156;
common/mc.c:149:9: note: vect_is_simple_use: operand _176
common/mc.c:149:9: note: def_stmt: _176 = _156 & -256;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: vect_is_simple_use: operand 0
common/mc.c:149:9: note: vect_is_simple_use: operand _178
common/mc.c:149:9: note: def_stmt: _178 = _177 >> 31;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: vect_is_simple_use: operand _155
common/mc.c:149:9: note: def_stmt: _155 = _154 + 16;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _155 = _154 + 16;
common/mc.c:149:9: note: vect_is_simple_use: operand _154
common/mc.c:149:9: note: def_stmt: _154 = _144 + _153;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _154 = _144 + _153;
common/mc.c:149:9: note: vect_is_simple_use: operand _144
common/mc.c:149:9: note: def_stmt: _144 = _133 + _143;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: vect_is_simple_use: operand _153
common/mc.c:149:9: note: def_stmt: _153 = _152 * 20;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _153 = _152 * 20;
common/mc.c:149:9: note: vect_is_simple_use: operand _152
common/mc.c:149:9: note: def_stmt: _152 = _147 + _151;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _152 = _147 + _151;
common/mc.c:149:9: note: vect_is_simple_use: operand _147
common/mc.c:149:9: note: def_stmt: _147 = (int) _146;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: vect_is_simple_use: operand _151
common/mc.c:149:9: note: def_stmt: _151 = (int) _150;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _151 = (int) _150;
common/mc.c:149:9: note: vect_is_simple_use: operand _150
common/mc.c:149:9: note: def_stmt: _150 = *_149;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _150 = *_149;
common/mc.c:149:9: note: worklist: examine stmt: _147 = (int) _146;
common/mc.c:149:9: note: vect_is_simple_use: operand _146
common/mc.c:149:9: note: def_stmt: _146 = *_145;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _146 = *_145;
common/mc.c:149:9: note: worklist: examine stmt: _144 = _133 + _143;
common/mc.c:149:9: note: vect_is_simple_use: operand _133
common/mc.c:149:9: note: def_stmt: _133 = _128 + _132;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: vect_is_simple_use: operand _143
common/mc.c:149:9: note: def_stmt: _143 = _142 * -5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _143 = _142 * -5;
common/mc.c:149:9: note: vect_is_simple_use: operand _142
common/mc.c:149:9: note: def_stmt: _142 = _137 + _141;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _142 = _137 + _141;
common/mc.c:149:9: note: vect_is_simple_use: operand _137
common/mc.c:149:9: note: def_stmt: _137 = (int) _136;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: vect_is_simple_use: operand _141
common/mc.c:149:9: note: def_stmt: _141 = (int) _140;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _141 = (int) _140;
common/mc.c:149:9: note: vect_is_simple_use: operand _140
common/mc.c:149:9: note: def_stmt: _140 = *_139;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _140 = *_139;
common/mc.c:149:9: note: worklist: examine stmt: _137 = (int) _136;
common/mc.c:149:9: note: vect_is_simple_use: operand _136
common/mc.c:149:9: note: def_stmt: _136 = *_135;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _136 = *_135;
common/mc.c:149:9: note: worklist: examine stmt: _133 = _128 + _132;
common/mc.c:149:9: note: vect_is_simple_use: operand _128
common/mc.c:149:9: note: def_stmt: _128 = (int) _127;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: vect_is_simple_use: operand _132
common/mc.c:149:9: note: def_stmt: _132 = (int) _131;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _132 = (int) _131;
common/mc.c:149:9: note: vect_is_simple_use: operand _131
common/mc.c:149:9: note: def_stmt: _131 = *_130;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _131 = *_130;
common/mc.c:149:9: note: worklist: examine stmt: _128 = (int) _127;
common/mc.c:149:9: note: vect_is_simple_use: operand _127
common/mc.c:149:9: note: def_stmt: _127 = *_126;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _127 = *_126;
common/mc.c:149:9: note: worklist: examine stmt: _178 = _177 >> 31;
common/mc.c:149:9: note: vect_is_simple_use: operand _177
common/mc.c:149:9: note: def_stmt: _177 = -_156;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: worklist: examine stmt: _177 = -_156;
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: already marked relevant/live.
common/mc.c:149:9: note: worklist: examine stmt: _176 = _156 & -256;
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: mark relevant 4, live 0.
common/mc.c:149:9: note: already marked relevant/live.
common/mc.c:149:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: _131 = *_130;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_4)
  (chrec_b = {3B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [5 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [5 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  5 
  )
)
)
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: _136 = *_135;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_4)
  (chrec_b = {-1B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: _140 = *_139;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_4)
  (chrec_b = {2B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [4 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [4 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  4 
  )
)
)
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: _146 = *_145;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: _150 = *_149;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_4)
  (chrec_b = {1B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [3 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [3 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  3 
  )
)
)
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: *_124 = iftmp.0_181;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _131 = *_130;
  stmt_b: _136 = *_135;
(analyze_overlapping_iterations 
  (chrec_a = {3B, +, 1}_4)
  (chrec_b = {-1B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [4 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [4 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 1}_4)
  (chrec_b = {3B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [4 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [4 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  4 
  )
)
)
(compute_affine_dependence
  stmt_a: _131 = *_130;
  stmt_b: _140 = *_139;
(analyze_overlapping_iterations 
  (chrec_a = {3B, +, 1}_4)
  (chrec_b = {2B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [1 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [1 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 1}_4)
  (chrec_b = {3B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _131 = *_130;
  stmt_b: _146 = *_145;
(analyze_overlapping_iterations 
  (chrec_a = {3B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [3 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [3 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {3B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [3 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [3 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  3 
  )
)
)
(compute_affine_dependence
  stmt_a: _131 = *_130;
  stmt_b: _150 = *_149;
(analyze_overlapping_iterations 
  (chrec_a = {3B, +, 1}_4)
  (chrec_b = {1B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [2 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [2 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 1}_4)
  (chrec_b = {3B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _131 = *_130;
  stmt_b: *_124 = iftmp.0_181;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _136 = *_135;
  stmt_b: _140 = *_139;
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 1}_4)
  (chrec_b = {2B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [3 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [3 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  3 
  )
)
)
(compute_affine_dependence
  stmt_a: _136 = *_135;
  stmt_b: _146 = *_145;
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _136 = *_135;
  stmt_b: _150 = *_149;
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 1}_4)
  (chrec_b = {1B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _136 = *_135;
  stmt_b: *_124 = iftmp.0_181;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _140 = *_139;
  stmt_b: _146 = *_145;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [2 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [2 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {2B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _140 = *_139;
  stmt_b: _150 = *_149;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 1}_4)
  (chrec_b = {1B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [1 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [1 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 1}_4)
  (chrec_b = {2B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _140 = *_139;
  stmt_b: *_124 = iftmp.0_181;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _146 = *_145;
  stmt_b: _150 = *_149;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {1B, +, 1}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _146 = *_145;
  stmt_b: *_124 = iftmp.0_181;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _150 = *_149;
  stmt_b: *_124 = iftmp.0_181;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _127 = *_126;
  stmt_b: _127 = *_126;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_4)
  (chrec_b = {-2B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _131 = *_130;
  stmt_b: _131 = *_130;
(analyze_overlapping_iterations 
  (chrec_a = {3B, +, 1}_4)
  (chrec_b = {3B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _136 = *_135;
  stmt_b: _136 = *_135;
(analyze_overlapping_iterations 
  (chrec_a = {-1B, +, 1}_4)
  (chrec_b = {-1B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _140 = *_139;
  stmt_b: _140 = *_139;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 1}_4)
  (chrec_b = {2B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _146 = *_145;
  stmt_b: _146 = *_145;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _150 = *_149;
  stmt_b: _150 = *_149;
(analyze_overlapping_iterations 
  (chrec_a = {1B, +, 1}_4)
  (chrec_b = {1B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_124 = iftmp.0_181;
  stmt_b: *_124 = iftmp.0_181;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:149:9: note: versioning for alias required: can't determine dependence between *_126 and *_124
common/mc.c:149:9: note: mark for run-time aliasing test between *_126 and *_124
common/mc.c:149:9: note: versioning for alias required: can't determine dependence between *_130 and *_124
common/mc.c:149:9: note: mark for run-time aliasing test between *_130 and *_124
common/mc.c:149:9: note: versioning for alias required: can't determine dependence between *_135 and *_124
common/mc.c:149:9: note: mark for run-time aliasing test between *_135 and *_124
common/mc.c:149:9: note: versioning for alias required: can't determine dependence between *_139 and *_124
common/mc.c:149:9: note: mark for run-time aliasing test between *_139 and *_124
common/mc.c:149:9: note: versioning for alias required: can't determine dependence between *_145 and *_124
common/mc.c:149:9: note: mark for run-time aliasing test between *_145 and *_124
common/mc.c:149:9: note: versioning for alias required: can't determine dependence between *_149 and *_124
common/mc.c:149:9: note: mark for run-time aliasing test between *_149 and *_124
common/mc.c:149:9: note: === vect_determine_vectorization_factor ===
common/mc.c:149:9: note: ==> examining phi: x_201 = PHI <0(12), x_159(15)>

common/mc.c:149:9: note: ==> examining phi: .MEM_205 = PHI <.MEM_121(12), .MEM_158(15)>

common/mc.c:149:9: note: ==> examining statement: # DEBUG x => NULL

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _123 = (sizetype) x_201;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _124 = dsth_192 + _123;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _125 = _123 + 18446744073709551614;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _126 = src_185 + _125;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _127 = *_126;

common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _128 = (int) _127;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _129 = _123 + 3;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _130 = src_185 + _129;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _131 = *_130;

common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _132 = (int) _131;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _133 = _128 + _132;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: _134 = _123 + 18446744073709551615;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _135 = src_185 + _134;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _136 = *_135;

common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _137 = (int) _136;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _138 = _123 + 2;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _139 = src_185 + _138;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _140 = *_139;

common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _141 = (int) _140;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _142 = _137 + _141;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: _143 = _142 * -5;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: _144 = _133 + _143;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: _145 = src_185 + _123;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _146 = *_145;

common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _147 = (int) _146;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _148 = _123 + 1;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _149 = src_185 + _148;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _150 = *_149;

common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _151 = (int) _150;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: _152 = _147 + _151;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: _153 = _152 * 20;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: _154 = _144 + _153;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: _155 = _154 + 16;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: _156 = _155 >> 5;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: # DEBUG x => NULL

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: _176 = _156 & -256;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: _177 = -_156;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: _178 = _177 >> 31;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: iftmp.0_179 = (unsigned char) _178;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: iftmp.0_180 = (unsigned char) _156;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;

common/mc.c:149:9: note: ==> examining pattern statement: patt_375 = (unsigned char) patt_206;

common/mc.c:149:9: note: ==> examining pattern def stmt: patt_206 = _176 != 0 ? _178 : _156;

common/mc.c:149:9: note: get vectype for scalar type:  int
common/mc.c:149:9: note: vectype: vector(4) int
common/mc.c:149:9: note: nunits = 4
common/mc.c:149:9: note: ==> examining statement: iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;

common/mc.c:149:9: note: ==> examining pattern statement: patt_375 = (unsigned char) patt_206;

common/mc.c:149:9: note: get vectype for scalar type:  unsigned char
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: # DEBUG x => NULL

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: *_124 = iftmp.0_181;

common/mc.c:149:9: note: get vectype for scalar type:  uint8_t
common/mc.c:149:9: note: vectype: vector(16) unsigned char
common/mc.c:149:9: note: nunits = 16
common/mc.c:149:9: note: ==> examining statement: x_159 = x_201 + 1;

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: # DEBUG x => x_159

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: # DEBUG x => x_159

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: ==> examining statement: if (width_13(D) > x_159)

common/mc.c:149:9: note: skip.
common/mc.c:149:9: note: vectorization factor = 16
common/mc.c:149:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:149:9: note: dependence distance  = 5.
common/mc.c:149:9: note: dependence distance  = 1.
common/mc.c:149:9: note: dependence distance  = 4.
common/mc.c:149:9: note: dependence distance  = 2.
common/mc.c:149:9: note: dependence distance  = 3.
common/mc.c:149:9: note: dependence distance  = 4.
common/mc.c:149:9: note: dependence distance  = 1.
common/mc.c:149:9: note: dependence distance  = 3.
common/mc.c:149:9: note: dependence distance  = 2.
common/mc.c:149:9: note: dependence distance  = 3.
common/mc.c:149:9: note: dependence distance  = 1.
common/mc.c:149:9: note: dependence distance  = 2.
common/mc.c:149:9: note: dependence distance  = 2.
common/mc.c:149:9: note: dependence distance  = 1.
common/mc.c:149:9: note: dependence distance  = 1.
common/mc.c:149:9: note: vect_compute_data_ref_alignment:
common/mc.c:149:9: note: can't force alignment of ref: *_126
common/mc.c:149:9: note: vect_compute_data_ref_alignment:
common/mc.c:149:9: note: can't force alignment of ref: *_130
common/mc.c:149:9: note: vect_compute_data_ref_alignment:
common/mc.c:149:9: note: can't force alignment of ref: *_135
common/mc.c:149:9: note: vect_compute_data_ref_alignment:
common/mc.c:149:9: note: can't force alignment of ref: *_139
common/mc.c:149:9: note: vect_compute_data_ref_alignment:
common/mc.c:149:9: note: can't force alignment of ref: *_145
common/mc.c:149:9: note: vect_compute_data_ref_alignment:
common/mc.c:149:9: note: can't force alignment of ref: *_149
common/mc.c:149:9: note: vect_compute_data_ref_alignment:
common/mc.c:149:9: note: can't force alignment of ref: *_124
common/mc.c:149:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:149:9: note: merging ranges for *_145, *_124 and *_130, *_124
common/mc.c:149:9: note: merging ranges for *_135, *_124 and *_145, *_124
common/mc.c:149:9: note: merging ranges for *_135, *_124 and *_149, *_124
common/mc.c:149:9: note: merging ranges for *_135, *_124 and *_139, *_124
common/mc.c:149:9: note: merging ranges for *_126, *_124 and *_135, *_124
common/mc.c:149:9: note: improved number of alias checks from 6 to 1
common/mc.c:149:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:149:9: note: Unknown misalignment, is_packed = 0
common/mc.c:149:9: note: Unknown misalignment, is_packed = 0
common/mc.c:149:9: note: Unknown misalignment, is_packed = 0
common/mc.c:149:9: note: Unknown misalignment, is_packed = 0
common/mc.c:149:9: note: Unknown misalignment, is_packed = 0
common/mc.c:149:9: note: Unknown misalignment, is_packed = 0
common/mc.c:149:9: note: Unknown misalignment, is_packed = 0
common/mc.c:149:9: note: vect_can_advance_ivs_p:
common/mc.c:149:9: note: Analyze phi: x_201 = PHI <0(12), x_159(15)>

common/mc.c:149:9: note: Analyze phi: .MEM_205 = PHI <.MEM_121(12), .MEM_158(15)>

common/mc.c:149:9: note: virtual phi. skip.
common/mc.c:149:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:149:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/mc.c:149:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:149:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/mc.c:149:9: note: Setting misalignment to -1.
common/mc.c:149:9: note: Setting misalignment to -1.
common/mc.c:149:9: note: Setting misalignment to -1.
common/mc.c:149:9: note: Setting misalignment to -1.
common/mc.c:149:9: note: Setting misalignment to -1.
common/mc.c:149:9: note: Setting misalignment to -1.
common/mc.c:149:9: note: Disable peeling, max peels reached: 15
common/mc.c:149:9: note: Vectorizing an unaligned access.
common/mc.c:149:9: note: Vectorizing an unaligned access.
common/mc.c:149:9: note: Vectorizing an unaligned access.
common/mc.c:149:9: note: Vectorizing an unaligned access.
common/mc.c:149:9: note: Vectorizing an unaligned access.
common/mc.c:149:9: note: Vectorizing an unaligned access.
common/mc.c:149:9: note: Vectorizing an unaligned access.
common/mc.c:149:9: note: === vect_analyze_slp ===
common/mc.c:149:9: note: === vect_make_slp_decision ===
common/mc.c:149:9: note: === vect_detect_hybrid_slp ===
common/mc.c:149:9: note: === vect_analyze_loop_operations ===
common/mc.c:149:9: note: examining phi: x_201 = PHI <0(12), x_159(15)>

common/mc.c:149:9: note: examining phi: .MEM_205 = PHI <.MEM_121(12), .MEM_158(15)>

common/mc.c:149:9: note: ==> examining statement: # DEBUG x => NULL
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _123 = (sizetype) x_201;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _124 = dsth_192 + _123;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _125 = _123 + 18446744073709551614;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _126 = src_185 + _125;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _127 = *_126;
common/mc.c:149:9: note: vect_is_simple_use: operand *_126
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_is_simple_use: operand *_126
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:149:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _128 = (int) _127;
common/mc.c:149:9: note: vect_is_simple_use: operand _127
common/mc.c:149:9: note: def_stmt: _127 = *_126;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_conversion ===
common/mc.c:149:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _129 = _123 + 3;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _130 = src_185 + _129;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _131 = *_130;
common/mc.c:149:9: note: vect_is_simple_use: operand *_130
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_is_simple_use: operand *_130
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:149:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _132 = (int) _131;
common/mc.c:149:9: note: vect_is_simple_use: operand _131
common/mc.c:149:9: note: def_stmt: _131 = *_130;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_conversion ===
common/mc.c:149:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _133 = _128 + _132;
common/mc.c:149:9: note: vect_is_simple_use: operand _128
common/mc.c:149:9: note: def_stmt: _128 = (int) _127;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _132
common/mc.c:149:9: note: def_stmt: _132 = (int) _131;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_operation ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _134 = _123 + 18446744073709551615;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _135 = src_185 + _134;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _136 = *_135;
common/mc.c:149:9: note: vect_is_simple_use: operand *_135
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_is_simple_use: operand *_135
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:149:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _137 = (int) _136;
common/mc.c:149:9: note: vect_is_simple_use: operand _136
common/mc.c:149:9: note: def_stmt: _136 = *_135;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_conversion ===
common/mc.c:149:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _138 = _123 + 2;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _139 = src_185 + _138;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _140 = *_139;
common/mc.c:149:9: note: vect_is_simple_use: operand *_139
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_is_simple_use: operand *_139
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:149:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _141 = (int) _140;
common/mc.c:149:9: note: vect_is_simple_use: operand _140
common/mc.c:149:9: note: def_stmt: _140 = *_139;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_conversion ===
common/mc.c:149:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _142 = _137 + _141;
common/mc.c:149:9: note: vect_is_simple_use: operand _137
common/mc.c:149:9: note: def_stmt: _137 = (int) _136;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _141
common/mc.c:149:9: note: def_stmt: _141 = (int) _140;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_operation ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _143 = _142 * -5;
common/mc.c:149:9: note: vect_is_simple_use: operand _142
common/mc.c:149:9: note: def_stmt: _142 = _137 + _141;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand -5
common/mc.c:149:9: note: === vectorizable_operation ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:149:9: note: ==> examining statement: _144 = _133 + _143;
common/mc.c:149:9: note: vect_is_simple_use: operand _133
common/mc.c:149:9: note: def_stmt: _133 = _128 + _132;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _143
common/mc.c:149:9: note: def_stmt: _143 = _142 * -5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_operation ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _145 = src_185 + _123;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _146 = *_145;
common/mc.c:149:9: note: vect_is_simple_use: operand *_145
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_is_simple_use: operand *_145
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:149:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _147 = (int) _146;
common/mc.c:149:9: note: vect_is_simple_use: operand _146
common/mc.c:149:9: note: def_stmt: _146 = *_145;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_conversion ===
common/mc.c:149:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _148 = _123 + 1;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _149 = src_185 + _148;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _150 = *_149;
common/mc.c:149:9: note: vect_is_simple_use: operand *_149
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_is_simple_use: operand *_149
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:149:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _151 = (int) _150;
common/mc.c:149:9: note: vect_is_simple_use: operand _150
common/mc.c:149:9: note: def_stmt: _150 = *_149;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_conversion ===
common/mc.c:149:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _152 = _147 + _151;
common/mc.c:149:9: note: vect_is_simple_use: operand _147
common/mc.c:149:9: note: def_stmt: _147 = (int) _146;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _151
common/mc.c:149:9: note: def_stmt: _151 = (int) _150;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_operation ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _153 = _152 * 20;
common/mc.c:149:9: note: vect_is_simple_use: operand _152
common/mc.c:149:9: note: def_stmt: _152 = _147 + _151;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand 20
common/mc.c:149:9: note: === vectorizable_operation ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:149:9: note: ==> examining statement: _154 = _144 + _153;
common/mc.c:149:9: note: vect_is_simple_use: operand _144
common/mc.c:149:9: note: def_stmt: _144 = _133 + _143;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _153
common/mc.c:149:9: note: def_stmt: _153 = _152 * 20;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_operation ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _155 = _154 + 16;
common/mc.c:149:9: note: vect_is_simple_use: operand _154
common/mc.c:149:9: note: def_stmt: _154 = _144 + _153;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand 16
common/mc.c:149:9: note: === vectorizable_operation ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:149:9: note: ==> examining statement: _156 = _155 >> 5;
common/mc.c:149:9: note: vect_is_simple_use: operand _155
common/mc.c:149:9: note: def_stmt: _155 = _154 + 16;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand 5
common/mc.c:149:9: note: vector/scalar shift/rotate found.
common/mc.c:149:9: note: === vectorizable_shift ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:149:9: note: ==> examining statement: # DEBUG x => NULL
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: _176 = _156 & -256;
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand -256
common/mc.c:149:9: note: === vectorizable_operation ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:149:9: note: ==> examining statement: _177 = -_156;
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_operation ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: _178 = _177 >> 31;
common/mc.c:149:9: note: vect_is_simple_use: operand _177
common/mc.c:149:9: note: def_stmt: _177 = -_156;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand 31
common/mc.c:149:9: note: vector/scalar shift/rotate found.
common/mc.c:149:9: note: === vectorizable_shift ===
common/mc.c:149:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:149:9: note: ==> examining statement: iftmp.0_179 = (unsigned char) _178;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: iftmp.0_180 = (unsigned char) _156;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;
common/mc.c:149:9: note: ==> examining pattern statement: patt_375 = (unsigned char) patt_206;
common/mc.c:149:9: note: ==> examining pattern def statement: patt_206 = _176 != 0 ? _178 : _156;
common/mc.c:149:9: note: ==> examining statement: patt_206 = _176 != 0 ? _178 : _156;
common/mc.c:149:9: note: vect_is_simple_use: operand _176 != 0
common/mc.c:149:9: note: not ssa-name.
common/mc.c:149:9: note: use not simple.
common/mc.c:149:9: note: vect_is_simple_use: operand _176
common/mc.c:149:9: note: def_stmt: _176 = _156 & -256;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _178
common/mc.c:149:9: note: def_stmt: _178 = _177 >> 31;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand patt_206
common/mc.c:149:9: note: def_stmt: patt_206 = _176 != 0 ? _178 : _156;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: === vectorizable_conversion ===
common/mc.c:149:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: # DEBUG x => NULL
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: *_124 = iftmp.0_181;
common/mc.c:149:9: note: vect_is_simple_use: operand iftmp.0_181
common/mc.c:149:9: note: def_stmt: iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:149:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:149:9: note: ==> examining statement: x_159 = x_201 + 1;
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: # DEBUG x => x_159
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: # DEBUG x => x_159
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: ==> examining statement: if (width_13(D) > x_159)
common/mc.c:149:9: note: irrelevant.
common/mc.c:149:9: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
common/mc.c:149:9: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
common/mc.c:149:9: note: Cost model analysis: 
  Vector inside of loop cost: 101
  Vector prologue cost: 16
  Vector epilogue cost: 208
  Scalar iteration cost: 26
  Scalar outside cost: 1
  Vector outside cost: 224
  prologue iterations: 0
  epilogue iterations: 8
  Calculated minimum iters for profitability: 9
common/mc.c:149:9: note:   Runtime profitability threshold = 15
common/mc.c:149:9: note:   Static estimate profitability threshold = 15
common/mc.c:149:9: note: epilog loop required
common/mc.c:149:9: note: vect_can_advance_ivs_p:
common/mc.c:149:9: note: Analyze phi: x_201 = PHI <0(12), x_159(15)>

common/mc.c:149:9: note: Analyze phi: .MEM_205 = PHI <.MEM_121(12), .MEM_158(15)>

common/mc.c:149:9: note: virtual phi. skip.
common/mc.c:149:9: note: loop vectorized
common/mc.c:149:9: note: === vec_transform_loop ===
common/mc.c:149:9: note: Profitability threshold is 15 loop iterations.
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:149:9: note: create runtime check for data references *_124 and *_126
Applying pattern match.pd:400, generic-match.c:4039
common/mc.c:149:9: note: created 1 versioning for alias checks.
gimple_simplified to _370 = _371 >= _372;
gimple_simplified to _368 = dsth_192 >= _369;
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _367 = _368 | _370;
Applying pattern match.pd:318, generic-match.c:18
gimple_simplified to _366 = _367 & _373;
common/mc.c:149:9: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
Registering new PHI nodes in block #23
Registering new PHI nodes in block #24
Registering new PHI nodes in block #13
Updating SSA information for statement _123 = (sizetype) x_201;
Updating SSA information for statement _124 = dsth_192 + _123;
Updating SSA information for statement _125 = _123 + 18446744073709551614;
Updating SSA information for statement _126 = src_185 + _125;
Updating SSA information for statement _127 = *_126;
Updating SSA information for statement _128 = (int) _127;
Updating SSA information for statement _129 = _123 + 3;
Updating SSA information for statement _130 = src_185 + _129;
Updating SSA information for statement _131 = *_130;
Updating SSA information for statement _132 = (int) _131;
Updating SSA information for statement _133 = _128 + _132;
Updating SSA information for statement _134 = _123 + 18446744073709551615;
Updating SSA information for statement _135 = src_185 + _134;
Updating SSA information for statement _136 = *_135;
Updating SSA information for statement _137 = (int) _136;
Updating SSA information for statement _138 = _123 + 2;
Updating SSA information for statement _139 = src_185 + _138;
Updating SSA information for statement _140 = *_139;
Updating SSA information for statement _141 = (int) _140;
Updating SSA information for statement _142 = _137 + _141;
Updating SSA information for statement _143 = _142 * -5;
Updating SSA information for statement _144 = _133 + _143;
Updating SSA information for statement _145 = src_185 + _123;
Updating SSA information for statement _146 = *_145;
Updating SSA information for statement _147 = (int) _146;
Updating SSA information for statement _148 = _123 + 1;
Updating SSA information for statement _149 = src_185 + _148;
Updating SSA information for statement _150 = *_149;
Updating SSA information for statement _151 = (int) _150;
Updating SSA information for statement _152 = _147 + _151;
Updating SSA information for statement _153 = _152 * 20;
Updating SSA information for statement _154 = _144 + _153;
Updating SSA information for statement _155 = _154 + 16;
Updating SSA information for statement _156 = _155 >> 5;
Updating SSA information for statement _176 = _156 & -256;
Updating SSA information for statement _177 = -_156;
Updating SSA information for statement _178 = _177 >> 31;
Updating SSA information for statement iftmp.0_179 = (unsigned char) _178;
Updating SSA information for statement iftmp.0_180 = (unsigned char) _156;
Updating SSA information for statement iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;
Updating SSA information for statement *_124 = iftmp.0_181;
Updating SSA information for statement x_159 = x_201 + 1;
Updating SSA information for statement # DEBUG x => x_159
Updating SSA information for statement # DEBUG x => x_159
Updating SSA information for statement if (width_13(D) > x_159)
Registering new PHI nodes in block #15
Registering new PHI nodes in block #26
Registering new PHI nodes in block #25
Registering new PHI nodes in block #21
Updating SSA information for statement _363 = (sizetype) x_201;
Updating SSA information for statement _362 = dsth_192 + _123;
Updating SSA information for statement _361 = _123 + 18446744073709551614;
Updating SSA information for statement _360 = src_185 + _125;
Updating SSA information for statement _359 = *_126;
Updating SSA information for statement _358 = (int) _127;
Updating SSA information for statement _357 = _123 + 3;
Updating SSA information for statement _356 = src_185 + _129;
Updating SSA information for statement _355 = *_130;
Updating SSA information for statement _354 = (int) _131;
Updating SSA information for statement _353 = _128 + _132;
Updating SSA information for statement _352 = _123 + 18446744073709551615;
Updating SSA information for statement _351 = src_185 + _134;
Updating SSA information for statement _350 = *_135;
Updating SSA information for statement _349 = (int) _136;
Updating SSA information for statement _348 = _123 + 2;
Updating SSA information for statement _347 = src_185 + _138;
Updating SSA information for statement _346 = *_139;
Updating SSA information for statement _345 = (int) _140;
Updating SSA information for statement _344 = _137 + _141;
Updating SSA information for statement _343 = _142 * -5;
Updating SSA information for statement _342 = _133 + _143;
Updating SSA information for statement _341 = src_185 + _123;
Updating SSA information for statement _340 = *_145;
Updating SSA information for statement _339 = (int) _146;
Updating SSA information for statement _338 = _123 + 1;
Updating SSA information for statement _337 = src_185 + _148;
Updating SSA information for statement _336 = *_149;
Updating SSA information for statement _335 = (int) _150;
Updating SSA information for statement _334 = _147 + _151;
Updating SSA information for statement _333 = _152 * 20;
Updating SSA information for statement _332 = _144 + _153;
Updating SSA information for statement _331 = _154 + 16;
Updating SSA information for statement _330 = _155 >> 5;
Updating SSA information for statement _329 = _156 & -256;
Updating SSA information for statement _328 = -_156;
Updating SSA information for statement _327 = _177 >> 31;
Updating SSA information for statement iftmp.0_326 = (unsigned char) _178;
Updating SSA information for statement iftmp.0_325 = (unsigned char) _156;
Updating SSA information for statement iftmp.0_324 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;
Updating SSA information for statement *_124 = iftmp.0_181;
Updating SSA information for statement x_322 = x_201 + 1;
Updating SSA information for statement # DEBUG x => x_159
Updating SSA information for statement # DEBUG x => x_159
Updating SSA information for statement if (width_13(D) > x_159)
Registering new PHI nodes in block #22
Registering new PHI nodes in block #14

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

x_322 -> { x_159 }
.MEM_323 -> { .MEM_158 }
iftmp.0_324 -> { iftmp.0_181 }
iftmp.0_325 -> { iftmp.0_180 }
iftmp.0_326 -> { iftmp.0_179 }
_327 -> { _178 }
_328 -> { _177 }
_329 -> { _176 }
_330 -> { _156 }
_331 -> { _155 }
_332 -> { _154 }
_333 -> { _153 }
_334 -> { _152 }
_335 -> { _151 }
_336 -> { _150 }
_337 -> { _149 }
_338 -> { _148 }
_339 -> { _147 }
_340 -> { _146 }
_341 -> { _145 }
_342 -> { _144 }
_343 -> { _143 }
_344 -> { _142 }
_345 -> { _141 }
_346 -> { _140 }
_347 -> { _139 }
_348 -> { _138 }
_349 -> { _137 }
_350 -> { _136 }
_351 -> { _135 }
_352 -> { _134 }
_353 -> { _133 }
_354 -> { _132 }
_355 -> { _131 }
_356 -> { _130 }
_357 -> { _129 }
_358 -> { _128 }
_359 -> { _127 }
_360 -> { _126 }
_361 -> { _125 }
_362 -> { _124 }
_363 -> { _123 }
.MEM_364 -> { .MEM_205 }
x_365 -> { x_201 }
Incremental SSA update started at block: 23
Number of blocks in CFG: 27
Number of blocks to update: 8 ( 30%)
Affected blocks: 13 14 15 21 22 24 25 26


common/mc.c:149:9: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 27
basic block 27, loop depth 1
 pred:       24
 succ:      


;; Scaling loop 4 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 6 with scale 0.777800, bounding iterations to 16 from guessed 14
;; guessed iterations are now 11
common/mc.c:149:9: note: vect_update_ivs_after_vectorizer: phi: x_201 = PHI <0(31), x_159(15)>

Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:149:9: note: vect_update_ivs_after_vectorizer: phi: .MEM_205 = PHI <.MEM_121(31), .MEM_158(15)>

common/mc.c:149:9: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 14
common/mc.c:149:9: note: ------>vectorizing phi: x_201 = PHI <0(35), x_159(15)>

common/mc.c:149:9: note: ------>vectorizing phi: .MEM_205 = PHI <.MEM_121(35), .MEM_158(15)>

common/mc.c:149:9: note: ------>vectorizing statement: # DEBUG x => NULL

common/mc.c:149:9: note: ------>vectorizing statement: _123 = (sizetype) x_201;

common/mc.c:149:9: note: ------>vectorizing statement: _124 = dsth_192 + _123;

common/mc.c:149:9: note: ------>vectorizing statement: _125 = _123 + 18446744073709551614;

common/mc.c:149:9: note: ------>vectorizing statement: _126 = src_185 + _125;

common/mc.c:149:9: note: ------>vectorizing statement: _127 = *_126;

common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: transform load. ncopies = 1
common/mc.c:149:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_185
common/mc.c:149:9: note: created vectp_src.393_262
common/mc.c:149:9: note: add new stmt: vect__127.394_259 = MEM[(uint8_t *)vectp_src.392_261];
common/mc.c:149:9: note: ------>vectorizing statement: _128 = (int) _127;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _127
common/mc.c:149:9: note: def_stmt: _127 = *_126;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform conversion. ncopies = 1.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _127
common/mc.c:149:9: note: vect_is_simple_use: operand _127
common/mc.c:149:9: note: def_stmt: _127 = *_126;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _127
  def_stmt =  _127 = *_126;
common/mc.c:149:9: note: add new stmt: vect__128.396_258 = [vec_unpack_lo_expr] vect__127.394_259;
common/mc.c:149:9: note: add new stmt: vect__128.396_257 = [vec_unpack_hi_expr] vect__127.394_259;
common/mc.c:149:9: note: add new stmt: vect__128.395_256 = [vec_unpack_lo_expr] vect__128.396_258;
common/mc.c:149:9: note: add new stmt: vect__128.395_255 = [vec_unpack_hi_expr] vect__128.396_258;
common/mc.c:149:9: note: add new stmt: vect__128.395_254 = [vec_unpack_lo_expr] vect__128.396_257;
common/mc.c:149:9: note: add new stmt: vect__128.395_253 = [vec_unpack_hi_expr] vect__128.396_257;
common/mc.c:149:9: note: ------>vectorizing statement: _129 = _123 + 3;

common/mc.c:149:9: note: ------>vectorizing statement: _130 = src_185 + _129;

common/mc.c:149:9: note: ------>vectorizing statement: _131 = *_130;

common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: transform load. ncopies = 1
common/mc.c:149:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_185
common/mc.c:149:9: note: created vectp_src.398_252
common/mc.c:149:9: note: add new stmt: vect__131.399_249 = MEM[(uint8_t *)vectp_src.397_251];
common/mc.c:149:9: note: ------>vectorizing statement: _132 = (int) _131;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _131
common/mc.c:149:9: note: def_stmt: _131 = *_130;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform conversion. ncopies = 1.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _131
common/mc.c:149:9: note: vect_is_simple_use: operand _131
common/mc.c:149:9: note: def_stmt: _131 = *_130;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _131
  def_stmt =  _131 = *_130;
common/mc.c:149:9: note: add new stmt: vect__132.401_248 = [vec_unpack_lo_expr] vect__131.399_249;
common/mc.c:149:9: note: add new stmt: vect__132.401_247 = [vec_unpack_hi_expr] vect__131.399_249;
common/mc.c:149:9: note: add new stmt: vect__132.400_246 = [vec_unpack_lo_expr] vect__132.401_248;
common/mc.c:149:9: note: add new stmt: vect__132.400_245 = [vec_unpack_hi_expr] vect__132.401_248;
common/mc.c:149:9: note: add new stmt: vect__132.400_244 = [vec_unpack_lo_expr] vect__132.401_247;
common/mc.c:149:9: note: add new stmt: vect__132.400_243 = [vec_unpack_hi_expr] vect__132.401_247;
common/mc.c:149:9: note: ------>vectorizing statement: _133 = _128 + _132;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _128
common/mc.c:149:9: note: def_stmt: _128 = (int) _127;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _132
common/mc.c:149:9: note: def_stmt: _132 = (int) _131;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _128
common/mc.c:149:9: note: vect_is_simple_use: operand _128
common/mc.c:149:9: note: def_stmt: _128 = (int) _127;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _128
  def_stmt =  _128 = (int) _127;
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _132
common/mc.c:149:9: note: vect_is_simple_use: operand _132
common/mc.c:149:9: note: def_stmt: _132 = (int) _131;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _132
  def_stmt =  _132 = (int) _131;
common/mc.c:149:9: note: add new stmt: vect__133.402_242 = vect__128.395_256 + vect__132.400_246;
common/mc.c:149:9: note: add new stmt: vect__133.402_241 = vect__128.395_255 + vect__132.400_245;
common/mc.c:149:9: note: add new stmt: vect__133.402_240 = vect__128.395_254 + vect__132.400_244;
common/mc.c:149:9: note: add new stmt: vect__133.402_239 = vect__128.395_253 + vect__132.400_243;
common/mc.c:149:9: note: ------>vectorizing statement: _134 = _123 + 18446744073709551615;

common/mc.c:149:9: note: ------>vectorizing statement: _135 = src_185 + _134;

common/mc.c:149:9: note: ------>vectorizing statement: _136 = *_135;

common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: transform load. ncopies = 1
common/mc.c:149:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_185
common/mc.c:149:9: note: created vectp_src.404_238
common/mc.c:149:9: note: add new stmt: vect__136.405_235 = MEM[(uint8_t *)vectp_src.403_237];
common/mc.c:149:9: note: ------>vectorizing statement: _137 = (int) _136;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _136
common/mc.c:149:9: note: def_stmt: _136 = *_135;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform conversion. ncopies = 1.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _136
common/mc.c:149:9: note: vect_is_simple_use: operand _136
common/mc.c:149:9: note: def_stmt: _136 = *_135;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _136
  def_stmt =  _136 = *_135;
common/mc.c:149:9: note: add new stmt: vect__137.407_234 = [vec_unpack_lo_expr] vect__136.405_235;
common/mc.c:149:9: note: add new stmt: vect__137.407_233 = [vec_unpack_hi_expr] vect__136.405_235;
common/mc.c:149:9: note: add new stmt: vect__137.406_232 = [vec_unpack_lo_expr] vect__137.407_234;
common/mc.c:149:9: note: add new stmt: vect__137.406_231 = [vec_unpack_hi_expr] vect__137.407_234;
common/mc.c:149:9: note: add new stmt: vect__137.406_230 = [vec_unpack_lo_expr] vect__137.407_233;
common/mc.c:149:9: note: add new stmt: vect__137.406_229 = [vec_unpack_hi_expr] vect__137.407_233;
common/mc.c:149:9: note: ------>vectorizing statement: _138 = _123 + 2;

common/mc.c:149:9: note: ------>vectorizing statement: _139 = src_185 + _138;

common/mc.c:149:9: note: ------>vectorizing statement: _140 = *_139;

common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: transform load. ncopies = 1
common/mc.c:149:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_185
common/mc.c:149:9: note: created vectp_src.409_228
common/mc.c:149:9: note: add new stmt: vect__140.410_225 = MEM[(uint8_t *)vectp_src.408_227];
common/mc.c:149:9: note: ------>vectorizing statement: _141 = (int) _140;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _140
common/mc.c:149:9: note: def_stmt: _140 = *_139;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform conversion. ncopies = 1.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _140
common/mc.c:149:9: note: vect_is_simple_use: operand _140
common/mc.c:149:9: note: def_stmt: _140 = *_139;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _140
  def_stmt =  _140 = *_139;
common/mc.c:149:9: note: add new stmt: vect__141.412_224 = [vec_unpack_lo_expr] vect__140.410_225;
common/mc.c:149:9: note: add new stmt: vect__141.412_223 = [vec_unpack_hi_expr] vect__140.410_225;
common/mc.c:149:9: note: add new stmt: vect__141.411_222 = [vec_unpack_lo_expr] vect__141.412_224;
common/mc.c:149:9: note: add new stmt: vect__141.411_221 = [vec_unpack_hi_expr] vect__141.412_224;
common/mc.c:149:9: note: add new stmt: vect__141.411_220 = [vec_unpack_lo_expr] vect__141.412_223;
common/mc.c:149:9: note: add new stmt: vect__141.411_219 = [vec_unpack_hi_expr] vect__141.412_223;
common/mc.c:149:9: note: ------>vectorizing statement: _142 = _137 + _141;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _137
common/mc.c:149:9: note: def_stmt: _137 = (int) _136;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _141
common/mc.c:149:9: note: def_stmt: _141 = (int) _140;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _137
common/mc.c:149:9: note: vect_is_simple_use: operand _137
common/mc.c:149:9: note: def_stmt: _137 = (int) _136;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _137
  def_stmt =  _137 = (int) _136;
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _141
common/mc.c:149:9: note: vect_is_simple_use: operand _141
common/mc.c:149:9: note: def_stmt: _141 = (int) _140;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _141
  def_stmt =  _141 = (int) _140;
common/mc.c:149:9: note: add new stmt: vect__142.413_218 = vect__137.406_232 + vect__141.411_222;
common/mc.c:149:9: note: add new stmt: vect__142.413_217 = vect__137.406_231 + vect__141.411_221;
common/mc.c:149:9: note: add new stmt: vect__142.413_216 = vect__137.406_230 + vect__141.411_220;
common/mc.c:149:9: note: add new stmt: vect__142.413_215 = vect__137.406_229 + vect__141.411_219;
common/mc.c:149:9: note: ------>vectorizing statement: _143 = _142 * -5;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _142
common/mc.c:149:9: note: def_stmt: _142 = _137 + _141;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand -5
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _142
common/mc.c:149:9: note: vect_is_simple_use: operand _142
common/mc.c:149:9: note: def_stmt: _142 = _137 + _141;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _142
  def_stmt =  _142 = _137 + _141;
common/mc.c:149:9: note: vect_get_vec_def_for_operand: -5
common/mc.c:149:9: note: vect_is_simple_use: operand -5
common/mc.c:149:9: note: Create vector_cst. nunits = 4
common/mc.c:149:9: note: created new init_stmt: vect_cst_.415_214 = { -5, -5, -5, -5 };
common/mc.c:149:9: note: add new stmt: vect__143.414_213 = vect__142.413_218 * vect_cst_.415_214;
common/mc.c:149:9: note: add new stmt: vect__143.414_212 = vect__142.413_217 * vect_cst_.415_214;
common/mc.c:149:9: note: add new stmt: vect__143.414_211 = vect__142.413_216 * vect_cst_.415_214;
common/mc.c:149:9: note: add new stmt: vect__143.414_210 = vect__142.413_215 * vect_cst_.415_214;
common/mc.c:149:9: note: ------>vectorizing statement: _144 = _133 + _143;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _133
common/mc.c:149:9: note: def_stmt: _133 = _128 + _132;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _143
common/mc.c:149:9: note: def_stmt: _143 = _142 * -5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _133
common/mc.c:149:9: note: vect_is_simple_use: operand _133
common/mc.c:149:9: note: def_stmt: _133 = _128 + _132;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _133
  def_stmt =  _133 = _128 + _132;
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _143
common/mc.c:149:9: note: vect_is_simple_use: operand _143
common/mc.c:149:9: note: def_stmt: _143 = _142 * -5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _143
  def_stmt =  _143 = _142 * -5;
common/mc.c:149:9: note: add new stmt: vect__144.416_209 = vect__133.402_242 + vect__143.414_213;
common/mc.c:149:9: note: add new stmt: vect__144.416_208 = vect__133.402_241 + vect__143.414_212;
common/mc.c:149:9: note: add new stmt: vect__144.416_198 = vect__133.402_240 + vect__143.414_211;
common/mc.c:149:9: note: add new stmt: vect__144.416_197 = vect__133.402_239 + vect__143.414_210;
common/mc.c:149:9: note: ------>vectorizing statement: _145 = src_185 + _123;

common/mc.c:149:9: note: ------>vectorizing statement: _146 = *_145;

common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: transform load. ncopies = 1
common/mc.c:149:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_185
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:149:9: note: created vectp_src.418_196
common/mc.c:149:9: note: add new stmt: vect__146.419_193 = MEM[(uint8_t *)vectp_src.417_195];
common/mc.c:149:9: note: ------>vectorizing statement: _147 = (int) _146;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _146
common/mc.c:149:9: note: def_stmt: _146 = *_145;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform conversion. ncopies = 1.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _146
common/mc.c:149:9: note: vect_is_simple_use: operand _146
common/mc.c:149:9: note: def_stmt: _146 = *_145;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _146
  def_stmt =  _146 = *_145;
common/mc.c:149:9: note: add new stmt: vect__147.421_189 = [vec_unpack_lo_expr] vect__146.419_193;
common/mc.c:149:9: note: add new stmt: vect__147.421_188 = [vec_unpack_hi_expr] vect__146.419_193;
common/mc.c:149:9: note: add new stmt: vect__147.420_187 = [vec_unpack_lo_expr] vect__147.421_189;
common/mc.c:149:9: note: add new stmt: vect__147.420_183 = [vec_unpack_hi_expr] vect__147.421_189;
common/mc.c:149:9: note: add new stmt: vect__147.420_85 = [vec_unpack_lo_expr] vect__147.421_188;
common/mc.c:149:9: note: add new stmt: vect__147.420_72 = [vec_unpack_hi_expr] vect__147.421_188;
common/mc.c:149:9: note: ------>vectorizing statement: _148 = _123 + 1;

common/mc.c:149:9: note: ------>vectorizing statement: _149 = src_185 + _148;

common/mc.c:149:9: note: ------>vectorizing statement: _150 = *_149;

common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: transform load. ncopies = 1
common/mc.c:149:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *src_185
common/mc.c:149:9: note: created vectp_src.423_46
common/mc.c:149:9: note: add new stmt: vect__150.424_11 = MEM[(uint8_t *)vectp_src.422_26];
common/mc.c:149:9: note: ------>vectorizing statement: _151 = (int) _150;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _150
common/mc.c:149:9: note: def_stmt: _150 = *_149;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform conversion. ncopies = 1.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _150
common/mc.c:149:9: note: vect_is_simple_use: operand _150
common/mc.c:149:9: note: def_stmt: _150 = *_149;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _150
  def_stmt =  _150 = *_149;
common/mc.c:149:9: note: add new stmt: vect__151.426_10 = [vec_unpack_lo_expr] vect__150.424_11;
common/mc.c:149:9: note: add new stmt: vect__151.426_9 = [vec_unpack_hi_expr] vect__150.424_11;
common/mc.c:149:9: note: add new stmt: vect__151.425_8 = [vec_unpack_lo_expr] vect__151.426_10;
common/mc.c:149:9: note: add new stmt: vect__151.425_7 = [vec_unpack_hi_expr] vect__151.426_10;
common/mc.c:149:9: note: add new stmt: vect__151.425_6 = [vec_unpack_lo_expr] vect__151.426_9;
common/mc.c:149:9: note: add new stmt: vect__151.425_5 = [vec_unpack_hi_expr] vect__151.426_9;
common/mc.c:149:9: note: ------>vectorizing statement: _152 = _147 + _151;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _147
common/mc.c:149:9: note: def_stmt: _147 = (int) _146;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _151
common/mc.c:149:9: note: def_stmt: _151 = (int) _150;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _147
common/mc.c:149:9: note: vect_is_simple_use: operand _147
common/mc.c:149:9: note: def_stmt: _147 = (int) _146;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _147
  def_stmt =  _147 = (int) _146;
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _151
common/mc.c:149:9: note: vect_is_simple_use: operand _151
common/mc.c:149:9: note: def_stmt: _151 = (int) _150;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _151
  def_stmt =  _151 = (int) _150;
common/mc.c:149:9: note: add new stmt: vect__152.427_4 = vect__147.420_187 + vect__151.425_8;
common/mc.c:149:9: note: add new stmt: vect__152.427_3 = vect__147.420_183 + vect__151.425_7;
common/mc.c:149:9: note: add new stmt: vect__152.427_2 = vect__147.420_85 + vect__151.425_6;
common/mc.c:149:9: note: add new stmt: vect__152.427_1 = vect__147.420_72 + vect__151.425_5;
common/mc.c:149:9: note: ------>vectorizing statement: _153 = _152 * 20;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _152
common/mc.c:149:9: note: def_stmt: _152 = _147 + _151;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand 20
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _152
common/mc.c:149:9: note: vect_is_simple_use: operand _152
common/mc.c:149:9: note: def_stmt: _152 = _147 + _151;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _152
  def_stmt =  _152 = _147 + _151;
common/mc.c:149:9: note: vect_get_vec_def_for_operand: 20
common/mc.c:149:9: note: vect_is_simple_use: operand 20
common/mc.c:149:9: note: Create vector_cst. nunits = 4
common/mc.c:149:9: note: created new init_stmt: vect_cst_.429_412 = { 20, 20, 20, 20 };
common/mc.c:149:9: note: add new stmt: vect__153.428_411 = vect__152.427_4 * vect_cst_.429_412;
common/mc.c:149:9: note: add new stmt: vect__153.428_410 = vect__152.427_3 * vect_cst_.429_412;
common/mc.c:149:9: note: add new stmt: vect__153.428_409 = vect__152.427_2 * vect_cst_.429_412;
common/mc.c:149:9: note: add new stmt: vect__153.428_408 = vect__152.427_1 * vect_cst_.429_412;
common/mc.c:149:9: note: ------>vectorizing statement: _154 = _144 + _153;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _144
common/mc.c:149:9: note: def_stmt: _144 = _133 + _143;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _153
common/mc.c:149:9: note: def_stmt: _153 = _152 * 20;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _144
common/mc.c:149:9: note: vect_is_simple_use: operand _144
common/mc.c:149:9: note: def_stmt: _144 = _133 + _143;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _144
  def_stmt =  _144 = _133 + _143;
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _153
common/mc.c:149:9: note: vect_is_simple_use: operand _153
common/mc.c:149:9: note: def_stmt: _153 = _152 * 20;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _153
  def_stmt =  _153 = _152 * 20;
common/mc.c:149:9: note: add new stmt: vect__154.430_407 = vect__144.416_209 + vect__153.428_411;
common/mc.c:149:9: note: add new stmt: vect__154.430_406 = vect__144.416_208 + vect__153.428_410;
common/mc.c:149:9: note: add new stmt: vect__154.430_405 = vect__144.416_198 + vect__153.428_409;
common/mc.c:149:9: note: add new stmt: vect__154.430_404 = vect__144.416_197 + vect__153.428_408;
common/mc.c:149:9: note: ------>vectorizing statement: _155 = _154 + 16;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _154
common/mc.c:149:9: note: def_stmt: _154 = _144 + _153;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand 16
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _154
common/mc.c:149:9: note: vect_is_simple_use: operand _154
common/mc.c:149:9: note: def_stmt: _154 = _144 + _153;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _154
  def_stmt =  _154 = _144 + _153;
common/mc.c:149:9: note: vect_get_vec_def_for_operand: 16
common/mc.c:149:9: note: vect_is_simple_use: operand 16
common/mc.c:149:9: note: Create vector_cst. nunits = 4
common/mc.c:149:9: note: created new init_stmt: vect_cst_.432_403 = { 16, 16, 16, 16 };
common/mc.c:149:9: note: add new stmt: vect__155.431_402 = vect__154.430_407 + vect_cst_.432_403;
common/mc.c:149:9: note: add new stmt: vect__155.431_401 = vect__154.430_406 + vect_cst_.432_403;
common/mc.c:149:9: note: add new stmt: vect__155.431_400 = vect__154.430_405 + vect_cst_.432_403;
common/mc.c:149:9: note: add new stmt: vect__155.431_399 = vect__154.430_404 + vect_cst_.432_403;
common/mc.c:149:9: note: ------>vectorizing statement: _156 = _155 >> 5;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _155
common/mc.c:149:9: note: def_stmt: _155 = _154 + 16;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand 5
common/mc.c:149:9: note: vector/scalar shift/rotate found.
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: operand 1 using scalar mode.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _155
common/mc.c:149:9: note: vect_is_simple_use: operand _155
common/mc.c:149:9: note: def_stmt: _155 = _154 + 16;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _155
  def_stmt =  _155 = _154 + 16;
common/mc.c:149:9: note: add new stmt: vect__156.433_398 = vect__155.431_402 >> 5;
common/mc.c:149:9: note: add new stmt: vect__156.433_397 = vect__155.431_401 >> 5;
common/mc.c:149:9: note: add new stmt: vect__156.433_396 = vect__155.431_400 >> 5;
common/mc.c:149:9: note: add new stmt: vect__156.433_395 = vect__155.431_399 >> 5;
common/mc.c:149:9: note: ------>vectorizing statement: # DEBUG x => NULL

common/mc.c:149:9: note: ------>vectorizing statement: _176 = _156 & -256;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand -256
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _156
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _156
  def_stmt =  _156 = _155 >> 5;
common/mc.c:149:9: note: vect_get_vec_def_for_operand: -256
common/mc.c:149:9: note: vect_is_simple_use: operand -256
common/mc.c:149:9: note: Create vector_cst. nunits = 4
common/mc.c:149:9: note: created new init_stmt: vect_cst_.435_394 = { -256, -256, -256, -256 };
common/mc.c:149:9: note: add new stmt: vect__176.434_393 = vect__156.433_398 & vect_cst_.435_394;
common/mc.c:149:9: note: add new stmt: vect__176.434_392 = vect__156.433_397 & vect_cst_.435_394;
common/mc.c:149:9: note: add new stmt: vect__176.434_391 = vect__156.433_396 & vect_cst_.435_394;
common/mc.c:149:9: note: add new stmt: vect__176.434_390 = vect__156.433_395 & vect_cst_.435_394;
common/mc.c:149:9: note: ------>vectorizing statement: _177 = -_156;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _156
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _156
  def_stmt =  _156 = _155 >> 5;
common/mc.c:149:9: note: add new stmt: vect__177.436_389 = -vect__156.433_398;
common/mc.c:149:9: note: add new stmt: vect__177.436_385 = -vect__156.433_397;
common/mc.c:149:9: note: add new stmt: vect__177.436_186 = -vect__156.433_396;
common/mc.c:149:9: note: add new stmt: vect__177.436_28 = -vect__156.433_395;
common/mc.c:149:9: note: ------>vectorizing statement: _178 = _177 >> 31;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _177
common/mc.c:149:9: note: def_stmt: _177 = -_156;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand 31
common/mc.c:149:9: note: vector/scalar shift/rotate found.
common/mc.c:149:9: note: transform binary/unary operation.
common/mc.c:149:9: note: operand 1 using scalar mode.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _177
common/mc.c:149:9: note: vect_is_simple_use: operand _177
common/mc.c:149:9: note: def_stmt: _177 = -_156;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _177
  def_stmt =  _177 = -_156;
common/mc.c:149:9: note: add new stmt: vect__178.437_34 = vect__177.436_389 >> 31;
common/mc.c:149:9: note: add new stmt: vect__178.437_160 = vect__177.436_385 >> 31;
common/mc.c:149:9: note: add new stmt: vect__178.437_413 = vect__177.436_186 >> 31;
common/mc.c:149:9: note: add new stmt: vect__178.437_414 = vect__177.436_28 >> 31;
common/mc.c:149:9: note: ------>vectorizing statement: iftmp.0_179 = (unsigned char) _178;

common/mc.c:149:9: note: ------>vectorizing statement: iftmp.0_180 = (unsigned char) _156;

common/mc.c:149:9: note: ------>vectorizing statement: iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;

common/mc.c:149:9: note: ==> vectorizing pattern def stmt: patt_206 = _176 != 0 ? _178 : _156;

common/mc.c:149:9: note: multiple-types.
common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand _176
common/mc.c:149:9: note: def_stmt: _176 = _156 & -256;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _178
common/mc.c:149:9: note: def_stmt: _178 = _177 >> 31;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _176
common/mc.c:149:9: note: vect_is_simple_use: operand _176
common/mc.c:149:9: note: def_stmt: _176 = _156 & -256;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _176
  def_stmt =  _176 = _156 & -256;
common/mc.c:149:9: note: vect_is_simple_use: operand _176
common/mc.c:149:9: note: def_stmt: _176 = _156 & -256;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: 0
common/mc.c:149:9: note: vect_is_simple_use: operand 0
common/mc.c:149:9: note: Create vector_cst. nunits = 4
common/mc.c:149:9: note: created new init_stmt: vect_cst_.439_415 = { 0, 0, 0, 0 };
common/mc.c:149:9: note: vect_is_simple_use: operand 0
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _178
common/mc.c:149:9: note: vect_is_simple_use: operand _178
common/mc.c:149:9: note: def_stmt: _178 = _177 >> 31;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _178
  def_stmt =  _178 = _177 >> 31;
common/mc.c:149:9: note: vect_is_simple_use: operand _178
common/mc.c:149:9: note: def_stmt: _178 = _177 >> 31;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: _156
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  _156
  def_stmt =  _156 = _155 >> 5;
common/mc.c:149:9: note: vect_is_simple_use: operand _156
common/mc.c:149:9: note: def_stmt: _156 = _155 >> 5;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: add new stmt: vect_patt_206.438_416 = VEC_COND_EXPR <vect__176.434_393 != vect_cst_.439_415, vect__178.437_34, vect__156.433_398>;
common/mc.c:149:9: note: add new stmt: vect_patt_206.438_417 = VEC_COND_EXPR <vect__176.434_392 != vect_cst_.439_415, vect__178.437_160, vect__156.433_397>;
common/mc.c:149:9: note: add new stmt: vect_patt_206.438_418 = VEC_COND_EXPR <vect__176.434_391 != vect_cst_.439_415, vect__178.437_413, vect__156.433_396>;
common/mc.c:149:9: note: add new stmt: vect_patt_206.438_419 = VEC_COND_EXPR <vect__176.434_390 != vect_cst_.439_415, vect__178.437_414, vect__156.433_395>;
common/mc.c:149:9: note: ------>vectorizing statement: iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;

common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand patt_206
common/mc.c:149:9: note: def_stmt: patt_206 = _176 != 0 ? _178 : _156;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform conversion. ncopies = 1.
common/mc.c:149:9: note: vect_get_vec_def_for_operand: patt_206
common/mc.c:149:9: note: vect_is_simple_use: operand patt_206
common/mc.c:149:9: note: def_stmt: patt_206 = _176 != 0 ? _178 : _156;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  patt_206
  def_stmt =  patt_206 = _176 != 0 ? _178 : _156;
common/mc.c:149:9: note: add new stmt: vect_patt_375.441_420 = VEC_PACK_TRUNC_EXPR <vect_patt_206.438_416, vect_patt_206.438_417>;
common/mc.c:149:9: note: add new stmt: vect_patt_375.441_421 = VEC_PACK_TRUNC_EXPR <vect_patt_206.438_418, vect_patt_206.438_419>;
common/mc.c:149:9: note: add new stmt: vect_patt_375.440_422 = VEC_PACK_TRUNC_EXPR <vect_patt_375.441_420, vect_patt_375.441_421>;
common/mc.c:149:9: note: ------>vectorizing statement: # DEBUG x => NULL

common/mc.c:149:9: note: ------>vectorizing statement: *_124 = iftmp.0_181;

common/mc.c:149:9: note: transform statement.
common/mc.c:149:9: note: vect_is_simple_use: operand iftmp.0_181
common/mc.c:149:9: note: def_stmt: iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: transform store. ncopies = 1
common/mc.c:149:9: note: vect_get_vec_def_for_operand: iftmp.0_181
common/mc.c:149:9: note: vect_is_simple_use: operand iftmp.0_181
common/mc.c:149:9: note: def_stmt: iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;
common/mc.c:149:9: note: type of def: 3.
common/mc.c:149:9: note: def =  iftmp.0_181
  def_stmt =  iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;
common/mc.c:149:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *dsth_192
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:149:9: note: created vectp_dsth.443_423
common/mc.c:149:9: note: add new stmt: MEM[(uint8_t *)vectp_dsth.442_424] = vect_patt_375.440_422;
common/mc.c:149:9: note: ------>vectorizing statement: x_159 = x_201 + 1;

common/mc.c:149:9: note: ------>vectorizing statement: # DEBUG x => x_159

common/mc.c:149:9: note: ------>vectorizing statement: # DEBUG x => x_159

common/mc.c:149:9: note: ------>vectorizing statement: vectp_src.392_260 = vectp_src.392_261 + 16;

common/mc.c:149:9: note: ------>vectorizing statement: vectp_src.397_250 = vectp_src.397_251 + 16;

common/mc.c:149:9: note: ------>vectorizing statement: vectp_src.403_236 = vectp_src.403_237 + 16;

common/mc.c:149:9: note: ------>vectorizing statement: vectp_src.408_226 = vectp_src.408_227 + 16;

common/mc.c:149:9: note: ------>vectorizing statement: vectp_src.417_194 = vectp_src.417_195 + 16;

common/mc.c:149:9: note: ------>vectorizing statement: vectp_src.422_12 = vectp_src.422_26 + 16;

common/mc.c:149:9: note: ------>vectorizing statement: vectp_dsth.442_425 = vectp_dsth.442_424 + 16;

common/mc.c:149:9: note: ------>vectorizing statement: if (width_13(D) > x_159)


loop at common/mc.c:150: if (ivtmp_427 < bnd.389_319)

;; Scaling loop 4 with scale 0.062500, bounding iterations to 0 from guessed 11
;; guessed iterations are now 1
common/mc.c:149:9: note: LOOP VECTORIZED


Analyzing loop at common/mc.c:147
common/mc.c:147:9: note: ===== analyze_loop_nest =====
common/mc.c:147:9: note: === vect_analyze_loop_form ===
common/mc.c:147:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [1, + , 1](no_overflow) < width_13(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) width_13(D) + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:147:9: note: Symbolic number of iterations is (unsigned int) width_13(D)
common/mc.c:147:9: note: === vect_analyze_data_refs ===
Creating dr for *_82
analyze_innermost: success.
	base_address: buf_20
	offset from base address: 0
	constant offset from base address: 0
	step: 2
	aligned to: 128
	base_object: *buf_20
	Access function 0: {0B, +, 2}_3
Creating dr for *_88
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: buf_20
	offset from base address: 0
	constant offset from base address: 10
	step: 2
	aligned to: 128
	base_object: *buf_20
	Access function 0: {10B, +, 2}_3
Creating dr for *_94
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: buf_20
	offset from base address: 0
	constant offset from base address: 2
	step: 2
	aligned to: 128
	base_object: *buf_20
	Access function 0: {2B, +, 2}_3
Creating dr for *_99
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: buf_20
	offset from base address: 0
	constant offset from base address: 8
	step: 2
	aligned to: 128
	base_object: *buf_20
	Access function 0: {8B, +, 2}_3
Creating dr for *_107
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: buf_20
	offset from base address: 0
	constant offset from base address: 4
	step: 2
	aligned to: 128
	base_object: *buf_20
	Access function 0: {4B, +, 2}_3
Creating dr for *_112
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: buf_20
	offset from base address: 0
	constant offset from base address: 6
	step: 2
	aligned to: 128
	base_object: *buf_20
	Access function 0: {6B, +, 2}_3
Creating dr for *_80
analyze_innermost: success.
	base_address: dstc_190
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *dstc_190
	Access function 0: {0B, +, 1}_3
common/mc.c:147:9: note: got vectype for stmt: _83 = *_82;
vector(8) short int
common/mc.c:147:9: note: got vectype for stmt: _89 = *_88;
vector(8) short int
common/mc.c:147:9: note: got vectype for stmt: _95 = *_94;
vector(8) short int
common/mc.c:147:9: note: got vectype for stmt: _100 = *_99;
vector(8) short int
common/mc.c:147:9: note: got vectype for stmt: _108 = *_107;
vector(8) short int
common/mc.c:147:9: note: got vectype for stmt: _113 = *_112;
vector(8) short int
common/mc.c:147:9: note: got vectype for stmt: *_80 = iftmp.0_175;
vector(16) unsigned char
common/mc.c:147:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:147:9: note: Analyze phi: x_200 = PHI <0(9), x_122(11)>

common/mc.c:147:9: note: Access function of PHI: {0, +, 1}_3
common/mc.c:147:9: note: step: 1,  init: 0
common/mc.c:147:9: note: Detected induction.
common/mc.c:147:9: note: Analyze phi: .MEM_204 = PHI <.MEM_382(9), .MEM_121(11)>

common/mc.c:147:9: note: === vect_pattern_recog ===
common/mc.c:147:9: note: vect_is_simple_use: operand _79
common/mc.c:147:9: note: def_stmt: _79 = (sizetype) x_200;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand x_200
common/mc.c:147:9: note: def_stmt: x_200 = PHI <0(9), x_122(11)>
common/mc.c:147:9: note: type of def: 4.
common/mc.c:147:9: note: vect_is_simple_use: operand 2
common/mc.c:147:9: note: vect_is_simple_use: operand _86
common/mc.c:147:9: note: def_stmt: _86 = _79 + 5;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _92
common/mc.c:147:9: note: def_stmt: _92 = _79 + 1;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _97
common/mc.c:147:9: note: def_stmt: _97 = _79 + 4;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _102
common/mc.c:147:9: note: def_stmt: _102 = _96 + _101;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _105
common/mc.c:147:9: note: def_stmt: _105 = _79 + 2;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _110
common/mc.c:147:9: note: def_stmt: _110 = _79 + 3;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _115
common/mc.c:147:9: note: def_stmt: _115 = _109 + _114;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _118
common/mc.c:147:9: note: def_stmt: _118 = _117 + 512;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _171
common/mc.c:147:9: note: def_stmt: _171 = -_119;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand iftmp.0_173
common/mc.c:147:9: note: def_stmt: iftmp.0_173 = (unsigned char) _172;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _172
common/mc.c:147:9: note: def_stmt: _172 = _171 >> 31;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand iftmp.0_174
common/mc.c:147:9: note: def_stmt: iftmp.0_174 = (unsigned char) _119;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_recog_mixed_size_cond_pattern: detected:
common/mc.c:147:9: note: pattern recognized: patt_429 = (unsigned char) patt_428;
common/mc.c:147:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:147:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:147:9: note: init: phi relevant? x_200 = PHI <0(9), x_122(11)>
common/mc.c:147:9: note: init: phi relevant? .MEM_204 = PHI <.MEM_382(9), .MEM_121(11)>
common/mc.c:147:9: note: init: stmt relevant? # DEBUG x => NULL
common/mc.c:147:9: note: init: stmt relevant? _79 = (sizetype) x_200;
common/mc.c:147:9: note: init: stmt relevant? _80 = dstc_190 + _79;
common/mc.c:147:9: note: init: stmt relevant? _81 = _79 * 2;
common/mc.c:147:9: note: init: stmt relevant? _82 = buf_20 + _81;
common/mc.c:147:9: note: init: stmt relevant? _83 = *_82;
common/mc.c:147:9: note: init: stmt relevant? _84 = (int) _83;
common/mc.c:147:9: note: init: stmt relevant? _86 = _79 + 5;
common/mc.c:147:9: note: init: stmt relevant? _87 = _86 * 2;
common/mc.c:147:9: note: init: stmt relevant? _88 = buf_20 + _87;
common/mc.c:147:9: note: init: stmt relevant? _89 = *_88;
common/mc.c:147:9: note: init: stmt relevant? _90 = (int) _89;
common/mc.c:147:9: note: init: stmt relevant? _91 = _84 + _90;
common/mc.c:147:9: note: init: stmt relevant? _92 = _79 + 1;
common/mc.c:147:9: note: init: stmt relevant? _93 = _92 * 2;
common/mc.c:147:9: note: init: stmt relevant? _94 = buf_20 + _93;
common/mc.c:147:9: note: init: stmt relevant? _95 = *_94;
common/mc.c:147:9: note: init: stmt relevant? _96 = (int) _95;
common/mc.c:147:9: note: init: stmt relevant? _97 = _79 + 4;
common/mc.c:147:9: note: init: stmt relevant? _98 = _97 * 2;
common/mc.c:147:9: note: init: stmt relevant? _99 = buf_20 + _98;
common/mc.c:147:9: note: init: stmt relevant? _100 = *_99;
common/mc.c:147:9: note: init: stmt relevant? _101 = (int) _100;
common/mc.c:147:9: note: init: stmt relevant? _102 = _96 + _101;
common/mc.c:147:9: note: init: stmt relevant? _103 = _102 * -5;
common/mc.c:147:9: note: init: stmt relevant? _104 = _91 + _103;
common/mc.c:147:9: note: init: stmt relevant? _105 = _79 + 2;
common/mc.c:147:9: note: init: stmt relevant? _106 = _105 * 2;
common/mc.c:147:9: note: init: stmt relevant? _107 = buf_20 + _106;
common/mc.c:147:9: note: init: stmt relevant? _108 = *_107;
common/mc.c:147:9: note: init: stmt relevant? _109 = (int) _108;
common/mc.c:147:9: note: init: stmt relevant? _110 = _79 + 3;
common/mc.c:147:9: note: init: stmt relevant? _111 = _110 * 2;
common/mc.c:147:9: note: init: stmt relevant? _112 = buf_20 + _111;
common/mc.c:147:9: note: init: stmt relevant? _113 = *_112;
common/mc.c:147:9: note: init: stmt relevant? _114 = (int) _113;
common/mc.c:147:9: note: init: stmt relevant? _115 = _109 + _114;
common/mc.c:147:9: note: init: stmt relevant? _116 = _115 * 20;
common/mc.c:147:9: note: init: stmt relevant? _117 = _104 + _116;
common/mc.c:147:9: note: init: stmt relevant? _118 = _117 + 512;
common/mc.c:147:9: note: init: stmt relevant? _119 = _118 >> 10;
common/mc.c:147:9: note: init: stmt relevant? # DEBUG x => NULL
common/mc.c:147:9: note: init: stmt relevant? _170 = _119 & -256;
common/mc.c:147:9: note: init: stmt relevant? _171 = -_119;
common/mc.c:147:9: note: init: stmt relevant? _172 = _171 >> 31;
common/mc.c:147:9: note: init: stmt relevant? iftmp.0_173 = (unsigned char) _172;
common/mc.c:147:9: note: init: stmt relevant? iftmp.0_174 = (unsigned char) _119;
common/mc.c:147:9: note: init: stmt relevant? iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;
common/mc.c:147:9: note: init: stmt relevant? # DEBUG x => NULL
common/mc.c:147:9: note: init: stmt relevant? *_80 = iftmp.0_175;
common/mc.c:147:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: init: stmt relevant? x_122 = x_200 + 1;
common/mc.c:147:9: note: init: stmt relevant? # DEBUG x => x_122
common/mc.c:147:9: note: init: stmt relevant? # DEBUG x => x_122
common/mc.c:147:9: note: init: stmt relevant? if (width_13(D) > x_122)
common/mc.c:147:9: note: worklist: examine stmt: *_80 = iftmp.0_175;
common/mc.c:147:9: note: vect_is_simple_use: operand iftmp.0_175
common/mc.c:147:9: note: def_stmt: iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: last stmt in pattern. don't mark relevant/live.
common/mc.c:147:9: note: worklist: examine stmt: patt_429 = (unsigned char) patt_428;
common/mc.c:147:9: note: vect_is_simple_use: operand patt_428
common/mc.c:147:9: note: def_stmt: patt_428 = _170 != 0 ? _172 : _119;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: patt_428 = _170 != 0 ? _172 : _119;
common/mc.c:147:9: note: vect_is_simple_use: operand _170
common/mc.c:147:9: note: def_stmt: _170 = _119 & -256;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: vect_is_simple_use: operand 0
common/mc.c:147:9: note: vect_is_simple_use: operand _172
common/mc.c:147:9: note: def_stmt: _172 = _171 >> 31;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: vect_is_simple_use: operand _118
common/mc.c:147:9: note: def_stmt: _118 = _117 + 512;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _118 = _117 + 512;
common/mc.c:147:9: note: vect_is_simple_use: operand _117
common/mc.c:147:9: note: def_stmt: _117 = _104 + _116;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _117 = _104 + _116;
common/mc.c:147:9: note: vect_is_simple_use: operand _104
common/mc.c:147:9: note: def_stmt: _104 = _91 + _103;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: vect_is_simple_use: operand _116
common/mc.c:147:9: note: def_stmt: _116 = _115 * 20;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _116 = _115 * 20;
common/mc.c:147:9: note: vect_is_simple_use: operand _115
common/mc.c:147:9: note: def_stmt: _115 = _109 + _114;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _115 = _109 + _114;
common/mc.c:147:9: note: vect_is_simple_use: operand _109
common/mc.c:147:9: note: def_stmt: _109 = (int) _108;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: vect_is_simple_use: operand _114
common/mc.c:147:9: note: def_stmt: _114 = (int) _113;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _114 = (int) _113;
common/mc.c:147:9: note: vect_is_simple_use: operand _113
common/mc.c:147:9: note: def_stmt: _113 = *_112;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _113 = *_112;
common/mc.c:147:9: note: worklist: examine stmt: _109 = (int) _108;
common/mc.c:147:9: note: vect_is_simple_use: operand _108
common/mc.c:147:9: note: def_stmt: _108 = *_107;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _108 = *_107;
common/mc.c:147:9: note: worklist: examine stmt: _104 = _91 + _103;
common/mc.c:147:9: note: vect_is_simple_use: operand _91
common/mc.c:147:9: note: def_stmt: _91 = _84 + _90;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: vect_is_simple_use: operand _103
common/mc.c:147:9: note: def_stmt: _103 = _102 * -5;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _103 = _102 * -5;
common/mc.c:147:9: note: vect_is_simple_use: operand _102
common/mc.c:147:9: note: def_stmt: _102 = _96 + _101;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _102 = _96 + _101;
common/mc.c:147:9: note: vect_is_simple_use: operand _96
common/mc.c:147:9: note: def_stmt: _96 = (int) _95;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: vect_is_simple_use: operand _101
common/mc.c:147:9: note: def_stmt: _101 = (int) _100;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _101 = (int) _100;
common/mc.c:147:9: note: vect_is_simple_use: operand _100
common/mc.c:147:9: note: def_stmt: _100 = *_99;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _100 = *_99;
common/mc.c:147:9: note: worklist: examine stmt: _96 = (int) _95;
common/mc.c:147:9: note: vect_is_simple_use: operand _95
common/mc.c:147:9: note: def_stmt: _95 = *_94;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _95 = *_94;
common/mc.c:147:9: note: worklist: examine stmt: _91 = _84 + _90;
common/mc.c:147:9: note: vect_is_simple_use: operand _84
common/mc.c:147:9: note: def_stmt: _84 = (int) _83;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: vect_is_simple_use: operand _90
common/mc.c:147:9: note: def_stmt: _90 = (int) _89;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _90 = (int) _89;
common/mc.c:147:9: note: vect_is_simple_use: operand _89
common/mc.c:147:9: note: def_stmt: _89 = *_88;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _89 = *_88;
common/mc.c:147:9: note: worklist: examine stmt: _84 = (int) _83;
common/mc.c:147:9: note: vect_is_simple_use: operand _83
common/mc.c:147:9: note: def_stmt: _83 = *_82;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _83 = *_82;
common/mc.c:147:9: note: worklist: examine stmt: _172 = _171 >> 31;
common/mc.c:147:9: note: vect_is_simple_use: operand _171
common/mc.c:147:9: note: def_stmt: _171 = -_119;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: worklist: examine stmt: _171 = -_119;
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: already marked relevant/live.
common/mc.c:147:9: note: worklist: examine stmt: _170 = _119 & -256;
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: mark relevant 4, live 0.
common/mc.c:147:9: note: already marked relevant/live.
common/mc.c:147:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _89 = *_88;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_3)
  (chrec_b = {10B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [5 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [5 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  5 
  )
)
)
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _95 = *_94;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_3)
  (chrec_b = {2B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _100 = *_99;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_3)
  (chrec_b = {8B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [4 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [4 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  4 
  )
)
)
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _108 = *_107;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_3)
  (chrec_b = {4B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _113 = *_112;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_3)
  (chrec_b = {6B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [3 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [3 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  3 
  )
)
)
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: *_80 = iftmp.0_175;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _95 = *_94;
(analyze_overlapping_iterations 
  (chrec_a = {10B, +, 2}_3)
  (chrec_b = {2B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [4 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [4 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_3)
  (chrec_b = {10B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [4 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [4 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  4 
  )
)
)
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _100 = *_99;
(analyze_overlapping_iterations 
  (chrec_a = {10B, +, 2}_3)
  (chrec_b = {8B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [1 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [1 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 2}_3)
  (chrec_b = {10B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _108 = *_107;
(analyze_overlapping_iterations 
  (chrec_a = {10B, +, 2}_3)
  (chrec_b = {4B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [3 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [3 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 2}_3)
  (chrec_b = {10B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [3 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [3 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  3 
  )
)
)
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _113 = *_112;
(analyze_overlapping_iterations 
  (chrec_a = {10B, +, 2}_3)
  (chrec_b = {6B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [2 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [2 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {6B, +, 2}_3)
  (chrec_b = {10B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: *_80 = iftmp.0_175;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _100 = *_99;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_3)
  (chrec_b = {8B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [3 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [3 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  3 
  )
)
)
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _108 = *_107;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_3)
  (chrec_b = {4B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _113 = *_112;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_3)
  (chrec_b = {6B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: *_80 = iftmp.0_175;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _100 = *_99;
  stmt_b: _108 = *_107;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 2}_3)
  (chrec_b = {4B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [2 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [2 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 2}_3)
  (chrec_b = {8B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [2 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [2 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  2 
  )
)
)
(compute_affine_dependence
  stmt_a: _100 = *_99;
  stmt_b: _113 = *_112;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 2}_3)
  (chrec_b = {6B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [1 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [1 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {6B, +, 2}_3)
  (chrec_b = {8B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _100 = *_99;
  stmt_b: *_80 = iftmp.0_175;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _108 = *_107;
  stmt_b: _113 = *_112;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 2}_3)
  (chrec_b = {6B, +, 2}_3)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _108 = *_107;
  stmt_b: *_80 = iftmp.0_175;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: *_80 = iftmp.0_175;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _83 = *_82;
  stmt_b: _83 = *_82;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_3)
  (chrec_b = {0B, +, 2}_3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _89 = *_88;
  stmt_b: _89 = *_88;
(analyze_overlapping_iterations 
  (chrec_a = {10B, +, 2}_3)
  (chrec_b = {10B, +, 2}_3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _95 = *_94;
  stmt_b: _95 = *_94;
(analyze_overlapping_iterations 
  (chrec_a = {2B, +, 2}_3)
  (chrec_b = {2B, +, 2}_3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _100 = *_99;
  stmt_b: _100 = *_99;
(analyze_overlapping_iterations 
  (chrec_a = {8B, +, 2}_3)
  (chrec_b = {8B, +, 2}_3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _108 = *_107;
  stmt_b: _108 = *_107;
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 2}_3)
  (chrec_b = {4B, +, 2}_3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _113 = *_112;
  stmt_b: _113 = *_112;
(analyze_overlapping_iterations 
  (chrec_a = {6B, +, 2}_3)
  (chrec_b = {6B, +, 2}_3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_80 = iftmp.0_175;
  stmt_b: *_80 = iftmp.0_175;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_3)
  (chrec_b = {0B, +, 1}_3)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:147:9: note: versioning for alias required: can't determine dependence between *_82 and *_80
common/mc.c:147:9: note: mark for run-time aliasing test between *_82 and *_80
common/mc.c:147:9: note: versioning for alias required: can't determine dependence between *_88 and *_80
common/mc.c:147:9: note: mark for run-time aliasing test between *_88 and *_80
common/mc.c:147:9: note: versioning for alias required: can't determine dependence between *_94 and *_80
common/mc.c:147:9: note: mark for run-time aliasing test between *_94 and *_80
common/mc.c:147:9: note: versioning for alias required: can't determine dependence between *_99 and *_80
common/mc.c:147:9: note: mark for run-time aliasing test between *_99 and *_80
common/mc.c:147:9: note: versioning for alias required: can't determine dependence between *_107 and *_80
common/mc.c:147:9: note: mark for run-time aliasing test between *_107 and *_80
common/mc.c:147:9: note: versioning for alias required: can't determine dependence between *_112 and *_80
common/mc.c:147:9: note: mark for run-time aliasing test between *_112 and *_80
common/mc.c:147:9: note: === vect_determine_vectorization_factor ===
common/mc.c:147:9: note: ==> examining phi: x_200 = PHI <0(9), x_122(11)>

common/mc.c:147:9: note: ==> examining phi: .MEM_204 = PHI <.MEM_382(9), .MEM_121(11)>

common/mc.c:147:9: note: ==> examining statement: # DEBUG x => NULL

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _79 = (sizetype) x_200;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _80 = dstc_190 + _79;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _81 = _79 * 2;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _82 = buf_20 + _81;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _83 = *_82;

common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _84 = (int) _83;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _86 = _79 + 5;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _87 = _86 * 2;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _88 = buf_20 + _87;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _89 = *_88;

common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _90 = (int) _89;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _91 = _84 + _90;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: _92 = _79 + 1;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _93 = _92 * 2;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _94 = buf_20 + _93;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _95 = *_94;

common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _96 = (int) _95;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _97 = _79 + 4;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _98 = _97 * 2;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _99 = buf_20 + _98;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _100 = *_99;

common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _101 = (int) _100;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _102 = _96 + _101;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: _103 = _102 * -5;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: _104 = _91 + _103;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: _105 = _79 + 2;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _106 = _105 * 2;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _107 = buf_20 + _106;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _108 = *_107;

common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _109 = (int) _108;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _110 = _79 + 3;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _111 = _110 * 2;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _112 = buf_20 + _111;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _113 = *_112;

common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _114 = (int) _113;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  short int
common/mc.c:147:9: note: vectype: vector(8) short int
common/mc.c:147:9: note: nunits = 8
common/mc.c:147:9: note: ==> examining statement: _115 = _109 + _114;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: _116 = _115 * 20;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: _117 = _104 + _116;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: _118 = _117 + 512;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: _119 = _118 >> 10;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: # DEBUG x => NULL

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: _170 = _119 & -256;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: _171 = -_119;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: _172 = _171 >> 31;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: iftmp.0_173 = (unsigned char) _172;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: iftmp.0_174 = (unsigned char) _119;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;

common/mc.c:147:9: note: ==> examining pattern statement: patt_429 = (unsigned char) patt_428;

common/mc.c:147:9: note: ==> examining pattern def stmt: patt_428 = _170 != 0 ? _172 : _119;

common/mc.c:147:9: note: get vectype for scalar type:  int
common/mc.c:147:9: note: vectype: vector(4) int
common/mc.c:147:9: note: nunits = 4
common/mc.c:147:9: note: ==> examining statement: iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;

common/mc.c:147:9: note: ==> examining pattern statement: patt_429 = (unsigned char) patt_428;

common/mc.c:147:9: note: get vectype for scalar type:  unsigned char
common/mc.c:147:9: note: vectype: vector(16) unsigned char
common/mc.c:147:9: note: nunits = 16
common/mc.c:147:9: note: ==> examining statement: # DEBUG x => NULL

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: *_80 = iftmp.0_175;

common/mc.c:147:9: note: get vectype for scalar type:  uint8_t
common/mc.c:147:9: note: vectype: vector(16) unsigned char
common/mc.c:147:9: note: nunits = 16
common/mc.c:147:9: note: ==> examining statement: x_122 = x_200 + 1;

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: # DEBUG x => x_122

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: # DEBUG x => x_122

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: ==> examining statement: if (width_13(D) > x_122)

common/mc.c:147:9: note: skip.
common/mc.c:147:9: note: vectorization factor = 16
common/mc.c:147:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:147:9: note: dependence distance  = 5.
common/mc.c:147:9: note: dependence distance  = 1.
common/mc.c:147:9: note: dependence distance  = 4.
common/mc.c:147:9: note: dependence distance  = 2.
common/mc.c:147:9: note: dependence distance  = 3.
common/mc.c:147:9: note: dependence distance  = 4.
common/mc.c:147:9: note: dependence distance  = 1.
common/mc.c:147:9: note: dependence distance  = 3.
common/mc.c:147:9: note: dependence distance  = 2.
common/mc.c:147:9: note: dependence distance  = 3.
common/mc.c:147:9: note: dependence distance  = 1.
common/mc.c:147:9: note: dependence distance  = 2.
common/mc.c:147:9: note: dependence distance  = 2.
common/mc.c:147:9: note: dependence distance  = 1.
common/mc.c:147:9: note: dependence distance  = 1.
common/mc.c:147:9: note: vect_compute_data_ref_alignment:
common/mc.c:147:9: note: can't force alignment of ref: *_82
common/mc.c:147:9: note: vect_compute_data_ref_alignment:
common/mc.c:147:9: note: can't force alignment of ref: *_88
common/mc.c:147:9: note: vect_compute_data_ref_alignment:
common/mc.c:147:9: note: can't force alignment of ref: *_94
common/mc.c:147:9: note: vect_compute_data_ref_alignment:
common/mc.c:147:9: note: can't force alignment of ref: *_99
common/mc.c:147:9: note: vect_compute_data_ref_alignment:
common/mc.c:147:9: note: can't force alignment of ref: *_107
common/mc.c:147:9: note: vect_compute_data_ref_alignment:
common/mc.c:147:9: note: can't force alignment of ref: *_112
common/mc.c:147:9: note: vect_compute_data_ref_alignment:
common/mc.c:147:9: note: can't force alignment of ref: *_80
common/mc.c:147:9: note: === vect_prune_runtime_alias_test_list ===
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
common/mc.c:147:9: note: merging ranges for *_82, *_80 and *_99, *_80
common/mc.c:147:9: note: merging ranges for *_82, *_80 and *_88, *_80
common/mc.c:147:9: note: merging ranges for *_82, *_80 and *_107, *_80
common/mc.c:147:9: note: merging ranges for *_82, *_80 and *_112, *_80
common/mc.c:147:9: note: merging ranges for *_82, *_80 and *_94, *_80
common/mc.c:147:9: note: improved number of alias checks from 6 to 1
common/mc.c:147:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:147:9: note: Unknown misalignment, is_packed = 0
common/mc.c:147:9: note: Unknown misalignment, is_packed = 0
common/mc.c:147:9: note: Unknown misalignment, is_packed = 0
common/mc.c:147:9: note: Unknown misalignment, is_packed = 0
common/mc.c:147:9: note: Unknown misalignment, is_packed = 0
common/mc.c:147:9: note: Unknown misalignment, is_packed = 0
common/mc.c:147:9: note: Unknown misalignment, is_packed = 0
common/mc.c:147:9: note: vect_can_advance_ivs_p:
common/mc.c:147:9: note: Analyze phi: x_200 = PHI <0(9), x_122(11)>

common/mc.c:147:9: note: Analyze phi: .MEM_204 = PHI <.MEM_382(9), .MEM_121(11)>

common/mc.c:147:9: note: virtual phi. skip.
common/mc.c:147:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:147:9: note: vect_get_data_access_cost: inside_cost = 4, outside_cost = 0.
common/mc.c:147:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:147:9: note: vect_get_data_access_cost: inside_cost = 2, outside_cost = 0.
common/mc.c:147:9: note: Setting misalignment to -1.
common/mc.c:147:9: note: Setting misalignment to -1.
common/mc.c:147:9: note: Setting misalignment to -1.
common/mc.c:147:9: note: Setting misalignment to -1.
common/mc.c:147:9: note: Setting misalignment to -1.
common/mc.c:147:9: note: Setting misalignment to -1.
common/mc.c:147:9: note: Disable peeling, max peels reached: 7
common/mc.c:147:9: note: Vectorizing an unaligned access.
common/mc.c:147:9: note: Vectorizing an unaligned access.
common/mc.c:147:9: note: Vectorizing an unaligned access.
common/mc.c:147:9: note: Vectorizing an unaligned access.
common/mc.c:147:9: note: Vectorizing an unaligned access.
common/mc.c:147:9: note: Vectorizing an unaligned access.
common/mc.c:147:9: note: Vectorizing an unaligned access.
common/mc.c:147:9: note: === vect_analyze_slp ===
common/mc.c:147:9: note: === vect_make_slp_decision ===
common/mc.c:147:9: note: === vect_detect_hybrid_slp ===
common/mc.c:147:9: note: === vect_analyze_loop_operations ===
common/mc.c:147:9: note: examining phi: x_200 = PHI <0(9), x_122(11)>

common/mc.c:147:9: note: examining phi: .MEM_204 = PHI <.MEM_382(9), .MEM_121(11)>

common/mc.c:147:9: note: ==> examining statement: # DEBUG x => NULL
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _79 = (sizetype) x_200;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _80 = dstc_190 + _79;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _81 = _79 * 2;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _82 = buf_20 + _81;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _83 = *_82;
common/mc.c:147:9: note: vect_is_simple_use: operand *_82
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_is_simple_use: operand *_82
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:147:9: note: vect_model_load_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _84 = (int) _83;
common/mc.c:147:9: note: vect_is_simple_use: operand _83
common/mc.c:147:9: note: def_stmt: _83 = *_82;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_conversion ===
common/mc.c:147:9: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _86 = _79 + 5;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _87 = _86 * 2;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _88 = buf_20 + _87;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _89 = *_88;
common/mc.c:147:9: note: vect_is_simple_use: operand *_88
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_is_simple_use: operand *_88
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:147:9: note: vect_model_load_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _90 = (int) _89;
common/mc.c:147:9: note: vect_is_simple_use: operand _89
common/mc.c:147:9: note: def_stmt: _89 = *_88;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_conversion ===
common/mc.c:147:9: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _91 = _84 + _90;
common/mc.c:147:9: note: vect_is_simple_use: operand _84
common/mc.c:147:9: note: def_stmt: _84 = (int) _83;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _90
common/mc.c:147:9: note: def_stmt: _90 = (int) _89;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_operation ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _92 = _79 + 1;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _93 = _92 * 2;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _94 = buf_20 + _93;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _95 = *_94;
common/mc.c:147:9: note: vect_is_simple_use: operand *_94
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_is_simple_use: operand *_94
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:147:9: note: vect_model_load_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _96 = (int) _95;
common/mc.c:147:9: note: vect_is_simple_use: operand _95
common/mc.c:147:9: note: def_stmt: _95 = *_94;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_conversion ===
common/mc.c:147:9: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _97 = _79 + 4;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _98 = _97 * 2;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _99 = buf_20 + _98;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _100 = *_99;
common/mc.c:147:9: note: vect_is_simple_use: operand *_99
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_is_simple_use: operand *_99
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:147:9: note: vect_model_load_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _101 = (int) _100;
common/mc.c:147:9: note: vect_is_simple_use: operand _100
common/mc.c:147:9: note: def_stmt: _100 = *_99;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_conversion ===
common/mc.c:147:9: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _102 = _96 + _101;
common/mc.c:147:9: note: vect_is_simple_use: operand _96
common/mc.c:147:9: note: def_stmt: _96 = (int) _95;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _101
common/mc.c:147:9: note: def_stmt: _101 = (int) _100;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_operation ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _103 = _102 * -5;
common/mc.c:147:9: note: vect_is_simple_use: operand _102
common/mc.c:147:9: note: def_stmt: _102 = _96 + _101;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand -5
common/mc.c:147:9: note: === vectorizable_operation ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:147:9: note: ==> examining statement: _104 = _91 + _103;
common/mc.c:147:9: note: vect_is_simple_use: operand _91
common/mc.c:147:9: note: def_stmt: _91 = _84 + _90;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _103
common/mc.c:147:9: note: def_stmt: _103 = _102 * -5;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_operation ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _105 = _79 + 2;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _106 = _105 * 2;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _107 = buf_20 + _106;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _108 = *_107;
common/mc.c:147:9: note: vect_is_simple_use: operand *_107
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_is_simple_use: operand *_107
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:147:9: note: vect_model_load_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _109 = (int) _108;
common/mc.c:147:9: note: vect_is_simple_use: operand _108
common/mc.c:147:9: note: def_stmt: _108 = *_107;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_conversion ===
common/mc.c:147:9: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _110 = _79 + 3;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _111 = _110 * 2;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _112 = buf_20 + _111;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _113 = *_112;
common/mc.c:147:9: note: vect_is_simple_use: operand *_112
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_is_simple_use: operand *_112
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:147:9: note: vect_model_load_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _114 = (int) _113;
common/mc.c:147:9: note: vect_is_simple_use: operand _113
common/mc.c:147:9: note: def_stmt: _113 = *_112;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_conversion ===
common/mc.c:147:9: note: vect_model_promotion_demotion_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _115 = _109 + _114;
common/mc.c:147:9: note: vect_is_simple_use: operand _109
common/mc.c:147:9: note: def_stmt: _109 = (int) _108;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _114
common/mc.c:147:9: note: def_stmt: _114 = (int) _113;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_operation ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _116 = _115 * 20;
common/mc.c:147:9: note: vect_is_simple_use: operand _115
common/mc.c:147:9: note: def_stmt: _115 = _109 + _114;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand 20
common/mc.c:147:9: note: === vectorizable_operation ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:147:9: note: ==> examining statement: _117 = _104 + _116;
common/mc.c:147:9: note: vect_is_simple_use: operand _104
common/mc.c:147:9: note: def_stmt: _104 = _91 + _103;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _116
common/mc.c:147:9: note: def_stmt: _116 = _115 * 20;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_operation ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _118 = _117 + 512;
common/mc.c:147:9: note: vect_is_simple_use: operand _117
common/mc.c:147:9: note: def_stmt: _117 = _104 + _116;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand 512
common/mc.c:147:9: note: === vectorizable_operation ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:147:9: note: ==> examining statement: _119 = _118 >> 10;
common/mc.c:147:9: note: vect_is_simple_use: operand _118
common/mc.c:147:9: note: def_stmt: _118 = _117 + 512;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand 10
common/mc.c:147:9: note: vector/scalar shift/rotate found.
common/mc.c:147:9: note: === vectorizable_shift ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:147:9: note: ==> examining statement: # DEBUG x => NULL
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: _170 = _119 & -256;
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand -256
common/mc.c:147:9: note: === vectorizable_operation ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:147:9: note: ==> examining statement: _171 = -_119;
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_operation ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: _172 = _171 >> 31;
common/mc.c:147:9: note: vect_is_simple_use: operand _171
common/mc.c:147:9: note: def_stmt: _171 = -_119;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand 31
common/mc.c:147:9: note: vector/scalar shift/rotate found.
common/mc.c:147:9: note: === vectorizable_shift ===
common/mc.c:147:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:147:9: note: ==> examining statement: iftmp.0_173 = (unsigned char) _172;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: iftmp.0_174 = (unsigned char) _119;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;
common/mc.c:147:9: note: ==> examining pattern statement: patt_429 = (unsigned char) patt_428;
common/mc.c:147:9: note: ==> examining pattern def statement: patt_428 = _170 != 0 ? _172 : _119;
common/mc.c:147:9: note: ==> examining statement: patt_428 = _170 != 0 ? _172 : _119;
common/mc.c:147:9: note: vect_is_simple_use: operand _170 != 0
common/mc.c:147:9: note: not ssa-name.
common/mc.c:147:9: note: use not simple.
common/mc.c:147:9: note: vect_is_simple_use: operand _170
common/mc.c:147:9: note: def_stmt: _170 = _119 & -256;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _172
common/mc.c:147:9: note: def_stmt: _172 = _171 >> 31;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand patt_428
common/mc.c:147:9: note: def_stmt: patt_428 = _170 != 0 ? _172 : _119;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: === vectorizable_conversion ===
common/mc.c:147:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: # DEBUG x => NULL
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: *_80 = iftmp.0_175;
common/mc.c:147:9: note: vect_is_simple_use: operand iftmp.0_175
common/mc.c:147:9: note: def_stmt: iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:147:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:147:9: note: ==> examining statement: x_122 = x_200 + 1;
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: # DEBUG x => x_122
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: # DEBUG x => x_122
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: ==> examining statement: if (width_13(D) > x_122)
common/mc.c:147:9: note: irrelevant.
common/mc.c:147:9: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
common/mc.c:147:9: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
common/mc.c:147:9: note: Cost model analysis: 
  Vector inside of loop cost: 89
  Vector prologue cost: 16
  Vector epilogue cost: 208
  Scalar iteration cost: 26
  Scalar outside cost: 1
  Vector outside cost: 224
  prologue iterations: 0
  epilogue iterations: 8
  Calculated minimum iters for profitability: 9
common/mc.c:147:9: note:   Runtime profitability threshold = 15
common/mc.c:147:9: note:   Static estimate profitability threshold = 15
common/mc.c:147:9: note: epilog loop required
common/mc.c:147:9: note: vect_can_advance_ivs_p:
common/mc.c:147:9: note: Analyze phi: x_200 = PHI <0(9), x_122(11)>

common/mc.c:147:9: note: Analyze phi: .MEM_204 = PHI <.MEM_382(9), .MEM_121(11)>

common/mc.c:147:9: note: virtual phi. skip.
common/mc.c:147:9: note: loop vectorized
common/mc.c:147:9: note: === vec_transform_loop ===
common/mc.c:147:9: note: Profitability threshold is 15 loop iterations.
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:147:9: note: create runtime check for data references *_82 and *_80
common/mc.c:147:9: note: created 1 versioning for alias checks.
gimple_simplified to _437 = dstc_190 >= _436;
gimple_simplified to _441 = buf_20 >= _440;
Applying pattern match.pd:318, gimple-match.c:17
Applying pattern match.pd:318, generic-match.c:18
common/mc.c:147:9: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
creating PHI node in block #12 for .MEM_121
Registering new PHI nodes in block #38
Registering new PHI nodes in block #39
Registering new PHI nodes in block #10
Updating SSA information for statement _79 = (sizetype) x_200;
Updating SSA information for statement _80 = dstc_190 + _79;
Updating SSA information for statement _81 = _79 * 2;
Updating SSA information for statement _82 = buf_20 + _81;
Updating SSA information for statement _83 = *_82;
Updating SSA information for statement _84 = (int) _83;
Updating SSA information for statement _86 = _79 + 5;
Updating SSA information for statement _87 = _86 * 2;
Updating SSA information for statement _88 = buf_20 + _87;
Updating SSA information for statement _89 = *_88;
Updating SSA information for statement _90 = (int) _89;
Updating SSA information for statement _91 = _84 + _90;
Updating SSA information for statement _92 = _79 + 1;
Updating SSA information for statement _93 = _92 * 2;
Updating SSA information for statement _94 = buf_20 + _93;
Updating SSA information for statement _95 = *_94;
Updating SSA information for statement _96 = (int) _95;
Updating SSA information for statement _97 = _79 + 4;
Updating SSA information for statement _98 = _97 * 2;
Updating SSA information for statement _99 = buf_20 + _98;
Updating SSA information for statement _100 = *_99;
Updating SSA information for statement _101 = (int) _100;
Updating SSA information for statement _102 = _96 + _101;
Updating SSA information for statement _103 = _102 * -5;
Updating SSA information for statement _104 = _91 + _103;
Updating SSA information for statement _105 = _79 + 2;
Updating SSA information for statement _106 = _105 * 2;
Updating SSA information for statement _107 = buf_20 + _106;
Updating SSA information for statement _108 = *_107;
Updating SSA information for statement _109 = (int) _108;
Updating SSA information for statement _110 = _79 + 3;
Updating SSA information for statement _111 = _110 * 2;
Updating SSA information for statement _112 = buf_20 + _111;
Updating SSA information for statement _113 = *_112;
Updating SSA information for statement _114 = (int) _113;
Updating SSA information for statement _115 = _109 + _114;
Updating SSA information for statement _116 = _115 * 20;
Updating SSA information for statement _117 = _104 + _116;
Updating SSA information for statement _118 = _117 + 512;
Updating SSA information for statement _119 = _118 >> 10;
Updating SSA information for statement _170 = _119 & -256;
Updating SSA information for statement _171 = -_119;
Updating SSA information for statement _172 = _171 >> 31;
Updating SSA information for statement iftmp.0_173 = (unsigned char) _172;
Updating SSA information for statement iftmp.0_174 = (unsigned char) _119;
Updating SSA information for statement iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;
Updating SSA information for statement *_80 = iftmp.0_175;
Updating SSA information for statement x_122 = x_200 + 1;
Updating SSA information for statement # DEBUG x => x_122
Updating SSA information for statement # DEBUG x => x_122
Updating SSA information for statement if (width_13(D) > x_122)
Registering new PHI nodes in block #11
Registering new PHI nodes in block #41
Registering new PHI nodes in block #40
Registering new PHI nodes in block #36
Updating SSA information for statement _446 = (sizetype) x_200;
Updating SSA information for statement _447 = dstc_190 + _79;
Updating SSA information for statement _448 = _79 * 2;
Updating SSA information for statement _449 = buf_20 + _81;
Updating SSA information for statement _450 = *_82;
Updating SSA information for statement _451 = (int) _83;
Updating SSA information for statement _452 = _79 + 5;
Updating SSA information for statement _453 = _86 * 2;
Updating SSA information for statement _454 = buf_20 + _87;
Updating SSA information for statement _455 = *_88;
Updating SSA information for statement _456 = (int) _89;
Updating SSA information for statement _457 = _84 + _90;
Updating SSA information for statement _458 = _79 + 1;
Updating SSA information for statement _459 = _92 * 2;
Updating SSA information for statement _460 = buf_20 + _93;
Updating SSA information for statement _461 = *_94;
Updating SSA information for statement _462 = (int) _95;
Updating SSA information for statement _463 = _79 + 4;
Updating SSA information for statement _464 = _97 * 2;
Updating SSA information for statement _465 = buf_20 + _98;
Updating SSA information for statement _466 = *_99;
Updating SSA information for statement _467 = (int) _100;
Updating SSA information for statement _468 = _96 + _101;
Updating SSA information for statement _469 = _102 * -5;
Updating SSA information for statement _470 = _91 + _103;
Updating SSA information for statement _471 = _79 + 2;
Updating SSA information for statement _472 = _105 * 2;
Updating SSA information for statement _473 = buf_20 + _106;
Updating SSA information for statement _474 = *_107;
Updating SSA information for statement _475 = (int) _108;
Updating SSA information for statement _476 = _79 + 3;
Updating SSA information for statement _477 = _110 * 2;
Updating SSA information for statement _478 = buf_20 + _111;
Updating SSA information for statement _479 = *_112;
Updating SSA information for statement _480 = (int) _113;
Updating SSA information for statement _481 = _109 + _114;
Updating SSA information for statement _482 = _115 * 20;
Updating SSA information for statement _483 = _104 + _116;
Updating SSA information for statement _484 = _117 + 512;
Updating SSA information for statement _485 = _118 >> 10;
Updating SSA information for statement _486 = _119 & -256;
Updating SSA information for statement _487 = -_119;
Updating SSA information for statement _488 = _171 >> 31;
Updating SSA information for statement iftmp.0_489 = (unsigned char) _172;
Updating SSA information for statement iftmp.0_490 = (unsigned char) _119;
Updating SSA information for statement iftmp.0_491 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;
Updating SSA information for statement *_80 = iftmp.0_175;
Updating SSA information for statement x_493 = x_200 + 1;
Updating SSA information for statement # DEBUG x => x_122
Updating SSA information for statement # DEBUG x => x_122
Updating SSA information for statement if (width_13(D) > x_122)
Registering new PHI nodes in block #37
Registering new PHI nodes in block #12
Registering new PHI nodes in block #23
Registering new PHI nodes in block #24
Registering new PHI nodes in block #31
Registering new PHI nodes in block #35
Registering new PHI nodes in block #13
Registering new PHI nodes in block #15
Registering new PHI nodes in block #32
Registering new PHI nodes in block #30
Registering new PHI nodes in block #28
Registering new PHI nodes in block #29
Registering new PHI nodes in block #34
Registering new PHI nodes in block #33
Registering new PHI nodes in block #26
Registering new PHI nodes in block #25
Registering new PHI nodes in block #21
Registering new PHI nodes in block #22
Registering new PHI nodes in block #14

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

x_444 -> { x_200 }
.MEM_445 -> { .MEM_204 }
_446 -> { _79 }
_447 -> { _80 }
_448 -> { _81 }
_449 -> { _82 }
_450 -> { _83 }
_451 -> { _84 }
_452 -> { _86 }
_453 -> { _87 }
_454 -> { _88 }
_455 -> { _89 }
_456 -> { _90 }
_457 -> { _91 }
_458 -> { _92 }
_459 -> { _93 }
_460 -> { _94 }
_461 -> { _95 }
_462 -> { _96 }
_463 -> { _97 }
_464 -> { _98 }
_465 -> { _99 }
_466 -> { _100 }
_467 -> { _101 }
_468 -> { _102 }
_469 -> { _103 }
_470 -> { _104 }
_471 -> { _105 }
_472 -> { _106 }
_473 -> { _107 }
_474 -> { _108 }
_475 -> { _109 }
_476 -> { _110 }
_477 -> { _111 }
_478 -> { _112 }
_479 -> { _113 }
_480 -> { _114 }
_481 -> { _115 }
_482 -> { _116 }
_483 -> { _117 }
_484 -> { _118 }
_485 -> { _119 }
_486 -> { _170 }
_487 -> { _171 }
_488 -> { _172 }
iftmp.0_489 -> { iftmp.0_173 }
iftmp.0_490 -> { iftmp.0_174 }
iftmp.0_491 -> { iftmp.0_175 }
.MEM_492 -> { .MEM_121 }
x_493 -> { x_122 }
.MEM_494 -> { .MEM_121 }
Incremental SSA update started at block: 38
Number of blocks in CFG: 42
Number of blocks to update: 14 ( 33%)
Affected blocks: 10 11 12 13 21 25 30 31 35 36 37 39 40 41


common/mc.c:147:9: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 42
basic block 42, loop depth 1
 pred:       39
 succ:      


;; Scaling loop 3 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 8 with scale 0.777800, bounding iterations to 16 from guessed 14
;; guessed iterations are now 11
common/mc.c:147:9: note: vect_update_ivs_after_vectorizer: phi: x_200 = PHI <0(46), x_122(11)>

Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:147:9: note: vect_update_ivs_after_vectorizer: phi: .MEM_204 = PHI <.MEM_382(46), .MEM_121(11)>

common/mc.c:147:9: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 14
common/mc.c:147:9: note: ------>vectorizing phi: x_200 = PHI <0(50), x_122(11)>

common/mc.c:147:9: note: ------>vectorizing phi: .MEM_204 = PHI <.MEM_382(50), .MEM_121(11)>

common/mc.c:147:9: note: ------>vectorizing statement: # DEBUG x => NULL

common/mc.c:147:9: note: ------>vectorizing statement: _79 = (sizetype) x_200;

common/mc.c:147:9: note: ------>vectorizing statement: _80 = dstc_190 + _79;

common/mc.c:147:9: note: ------>vectorizing statement: _81 = _79 * 2;

common/mc.c:147:9: note: ------>vectorizing statement: _82 = buf_20 + _81;

common/mc.c:147:9: note: ------>vectorizing statement: _83 = *_82;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: transform load. ncopies = 2
common/mc.c:147:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing a pointer ref: *buf_20
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:147:9: note: created vectp_buf.449_560
common/mc.c:147:9: note: add new stmt: vect__83.450_563 = MEM[(int16_t *)vectp_buf.448_561];
common/mc.c:147:9: note: add new stmt: vectp_buf.448_564 = vectp_buf.448_561 + 16;
common/mc.c:147:9: note: add new stmt: vect__83.451_565 = MEM[(int16_t *)vectp_buf.448_564];
common/mc.c:147:9: note: ------>vectorizing statement: _84 = (int) _83;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _83
common/mc.c:147:9: note: def_stmt: _83 = *_82;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform conversion. ncopies = 2.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _83
common/mc.c:147:9: note: vect_is_simple_use: operand _83
common/mc.c:147:9: note: def_stmt: _83 = *_82;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _83
  def_stmt =  _83 = *_82;
common/mc.c:147:9: note: add new stmt: vect__84.452_566 = [vec_unpack_lo_expr] vect__83.450_563;
common/mc.c:147:9: note: add new stmt: vect__84.452_567 = [vec_unpack_hi_expr] vect__83.450_563;
common/mc.c:147:9: note: add new stmt: vect__84.452_568 = [vec_unpack_lo_expr] vect__83.451_565;
common/mc.c:147:9: note: add new stmt: vect__84.452_569 = [vec_unpack_hi_expr] vect__83.451_565;
common/mc.c:147:9: note: ------>vectorizing statement: _86 = _79 + 5;

common/mc.c:147:9: note: ------>vectorizing statement: _87 = _86 * 2;

common/mc.c:147:9: note: ------>vectorizing statement: _88 = buf_20 + _87;

common/mc.c:147:9: note: ------>vectorizing statement: _89 = *_88;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: transform load. ncopies = 2
common/mc.c:147:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing a pointer ref: *buf_20
common/mc.c:147:9: note: created vectp_buf.454_570
common/mc.c:147:9: note: add new stmt: vect__89.455_573 = MEM[(int16_t *)vectp_buf.453_571];
common/mc.c:147:9: note: add new stmt: vectp_buf.453_574 = vectp_buf.453_571 + 16;
common/mc.c:147:9: note: add new stmt: vect__89.456_575 = MEM[(int16_t *)vectp_buf.453_574];
common/mc.c:147:9: note: ------>vectorizing statement: _90 = (int) _89;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _89
common/mc.c:147:9: note: def_stmt: _89 = *_88;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform conversion. ncopies = 2.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _89
common/mc.c:147:9: note: vect_is_simple_use: operand _89
common/mc.c:147:9: note: def_stmt: _89 = *_88;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _89
  def_stmt =  _89 = *_88;
common/mc.c:147:9: note: add new stmt: vect__90.457_576 = [vec_unpack_lo_expr] vect__89.455_573;
common/mc.c:147:9: note: add new stmt: vect__90.457_577 = [vec_unpack_hi_expr] vect__89.455_573;
common/mc.c:147:9: note: add new stmt: vect__90.457_578 = [vec_unpack_lo_expr] vect__89.456_575;
common/mc.c:147:9: note: add new stmt: vect__90.457_579 = [vec_unpack_hi_expr] vect__89.456_575;
common/mc.c:147:9: note: ------>vectorizing statement: _91 = _84 + _90;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _84
common/mc.c:147:9: note: def_stmt: _84 = (int) _83;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _90
common/mc.c:147:9: note: def_stmt: _90 = (int) _89;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _84
common/mc.c:147:9: note: vect_is_simple_use: operand _84
common/mc.c:147:9: note: def_stmt: _84 = (int) _83;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _84
  def_stmt =  _84 = (int) _83;
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _90
common/mc.c:147:9: note: vect_is_simple_use: operand _90
common/mc.c:147:9: note: def_stmt: _90 = (int) _89;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _90
  def_stmt =  _90 = (int) _89;
common/mc.c:147:9: note: add new stmt: vect__91.458_580 = vect__84.452_566 + vect__90.457_576;
common/mc.c:147:9: note: add new stmt: vect__91.458_581 = vect__84.452_567 + vect__90.457_577;
common/mc.c:147:9: note: add new stmt: vect__91.458_582 = vect__84.452_568 + vect__90.457_578;
common/mc.c:147:9: note: add new stmt: vect__91.458_583 = vect__84.452_569 + vect__90.457_579;
common/mc.c:147:9: note: ------>vectorizing statement: _92 = _79 + 1;

common/mc.c:147:9: note: ------>vectorizing statement: _93 = _92 * 2;

common/mc.c:147:9: note: ------>vectorizing statement: _94 = buf_20 + _93;

common/mc.c:147:9: note: ------>vectorizing statement: _95 = *_94;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: transform load. ncopies = 2
common/mc.c:147:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing a pointer ref: *buf_20
common/mc.c:147:9: note: created vectp_buf.460_584
common/mc.c:147:9: note: add new stmt: vect__95.461_587 = MEM[(int16_t *)vectp_buf.459_585];
common/mc.c:147:9: note: add new stmt: vectp_buf.459_588 = vectp_buf.459_585 + 16;
common/mc.c:147:9: note: add new stmt: vect__95.462_589 = MEM[(int16_t *)vectp_buf.459_588];
common/mc.c:147:9: note: ------>vectorizing statement: _96 = (int) _95;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _95
common/mc.c:147:9: note: def_stmt: _95 = *_94;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform conversion. ncopies = 2.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _95
common/mc.c:147:9: note: vect_is_simple_use: operand _95
common/mc.c:147:9: note: def_stmt: _95 = *_94;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _95
  def_stmt =  _95 = *_94;
common/mc.c:147:9: note: add new stmt: vect__96.463_590 = [vec_unpack_lo_expr] vect__95.461_587;
common/mc.c:147:9: note: add new stmt: vect__96.463_591 = [vec_unpack_hi_expr] vect__95.461_587;
common/mc.c:147:9: note: add new stmt: vect__96.463_592 = [vec_unpack_lo_expr] vect__95.462_589;
common/mc.c:147:9: note: add new stmt: vect__96.463_593 = [vec_unpack_hi_expr] vect__95.462_589;
common/mc.c:147:9: note: ------>vectorizing statement: _97 = _79 + 4;

common/mc.c:147:9: note: ------>vectorizing statement: _98 = _97 * 2;

common/mc.c:147:9: note: ------>vectorizing statement: _99 = buf_20 + _98;

common/mc.c:147:9: note: ------>vectorizing statement: _100 = *_99;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: transform load. ncopies = 2
common/mc.c:147:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing a pointer ref: *buf_20
common/mc.c:147:9: note: created vectp_buf.465_594
common/mc.c:147:9: note: add new stmt: vect__100.466_597 = MEM[(int16_t *)vectp_buf.464_595];
common/mc.c:147:9: note: add new stmt: vectp_buf.464_598 = vectp_buf.464_595 + 16;
common/mc.c:147:9: note: add new stmt: vect__100.467_599 = MEM[(int16_t *)vectp_buf.464_598];
common/mc.c:147:9: note: ------>vectorizing statement: _101 = (int) _100;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _100
common/mc.c:147:9: note: def_stmt: _100 = *_99;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform conversion. ncopies = 2.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _100
common/mc.c:147:9: note: vect_is_simple_use: operand _100
common/mc.c:147:9: note: def_stmt: _100 = *_99;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _100
  def_stmt =  _100 = *_99;
common/mc.c:147:9: note: add new stmt: vect__101.468_600 = [vec_unpack_lo_expr] vect__100.466_597;
common/mc.c:147:9: note: add new stmt: vect__101.468_601 = [vec_unpack_hi_expr] vect__100.466_597;
common/mc.c:147:9: note: add new stmt: vect__101.468_602 = [vec_unpack_lo_expr] vect__100.467_599;
common/mc.c:147:9: note: add new stmt: vect__101.468_603 = [vec_unpack_hi_expr] vect__100.467_599;
common/mc.c:147:9: note: ------>vectorizing statement: _102 = _96 + _101;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _96
common/mc.c:147:9: note: def_stmt: _96 = (int) _95;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _101
common/mc.c:147:9: note: def_stmt: _101 = (int) _100;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _96
common/mc.c:147:9: note: vect_is_simple_use: operand _96
common/mc.c:147:9: note: def_stmt: _96 = (int) _95;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _96
  def_stmt =  _96 = (int) _95;
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _101
common/mc.c:147:9: note: vect_is_simple_use: operand _101
common/mc.c:147:9: note: def_stmt: _101 = (int) _100;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _101
  def_stmt =  _101 = (int) _100;
common/mc.c:147:9: note: add new stmt: vect__102.469_604 = vect__96.463_590 + vect__101.468_600;
common/mc.c:147:9: note: add new stmt: vect__102.469_605 = vect__96.463_591 + vect__101.468_601;
common/mc.c:147:9: note: add new stmt: vect__102.469_606 = vect__96.463_592 + vect__101.468_602;
common/mc.c:147:9: note: add new stmt: vect__102.469_607 = vect__96.463_593 + vect__101.468_603;
common/mc.c:147:9: note: ------>vectorizing statement: _103 = _102 * -5;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _102
common/mc.c:147:9: note: def_stmt: _102 = _96 + _101;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand -5
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _102
common/mc.c:147:9: note: vect_is_simple_use: operand _102
common/mc.c:147:9: note: def_stmt: _102 = _96 + _101;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _102
  def_stmt =  _102 = _96 + _101;
common/mc.c:147:9: note: vect_get_vec_def_for_operand: -5
common/mc.c:147:9: note: vect_is_simple_use: operand -5
common/mc.c:147:9: note: Create vector_cst. nunits = 4
common/mc.c:147:9: note: created new init_stmt: vect_cst_.471_608 = { -5, -5, -5, -5 };
common/mc.c:147:9: note: add new stmt: vect__103.470_609 = vect__102.469_604 * vect_cst_.471_608;
common/mc.c:147:9: note: add new stmt: vect__103.470_610 = vect__102.469_605 * vect_cst_.471_608;
common/mc.c:147:9: note: add new stmt: vect__103.470_611 = vect__102.469_606 * vect_cst_.471_608;
common/mc.c:147:9: note: add new stmt: vect__103.470_612 = vect__102.469_607 * vect_cst_.471_608;
common/mc.c:147:9: note: ------>vectorizing statement: _104 = _91 + _103;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _91
common/mc.c:147:9: note: def_stmt: _91 = _84 + _90;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _103
common/mc.c:147:9: note: def_stmt: _103 = _102 * -5;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _91
common/mc.c:147:9: note: vect_is_simple_use: operand _91
common/mc.c:147:9: note: def_stmt: _91 = _84 + _90;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _91
  def_stmt =  _91 = _84 + _90;
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _103
common/mc.c:147:9: note: vect_is_simple_use: operand _103
common/mc.c:147:9: note: def_stmt: _103 = _102 * -5;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _103
  def_stmt =  _103 = _102 * -5;
common/mc.c:147:9: note: add new stmt: vect__104.472_613 = vect__91.458_580 + vect__103.470_609;
common/mc.c:147:9: note: add new stmt: vect__104.472_614 = vect__91.458_581 + vect__103.470_610;
common/mc.c:147:9: note: add new stmt: vect__104.472_615 = vect__91.458_582 + vect__103.470_611;
common/mc.c:147:9: note: add new stmt: vect__104.472_616 = vect__91.458_583 + vect__103.470_612;
common/mc.c:147:9: note: ------>vectorizing statement: _105 = _79 + 2;

common/mc.c:147:9: note: ------>vectorizing statement: _106 = _105 * 2;

common/mc.c:147:9: note: ------>vectorizing statement: _107 = buf_20 + _106;

common/mc.c:147:9: note: ------>vectorizing statement: _108 = *_107;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: transform load. ncopies = 2
common/mc.c:147:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing a pointer ref: *buf_20
common/mc.c:147:9: note: created vectp_buf.474_617
common/mc.c:147:9: note: add new stmt: vect__108.475_620 = MEM[(int16_t *)vectp_buf.473_618];
common/mc.c:147:9: note: add new stmt: vectp_buf.473_621 = vectp_buf.473_618 + 16;
common/mc.c:147:9: note: add new stmt: vect__108.476_622 = MEM[(int16_t *)vectp_buf.473_621];
common/mc.c:147:9: note: ------>vectorizing statement: _109 = (int) _108;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _108
common/mc.c:147:9: note: def_stmt: _108 = *_107;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform conversion. ncopies = 2.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _108
common/mc.c:147:9: note: vect_is_simple_use: operand _108
common/mc.c:147:9: note: def_stmt: _108 = *_107;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _108
  def_stmt =  _108 = *_107;
common/mc.c:147:9: note: add new stmt: vect__109.477_623 = [vec_unpack_lo_expr] vect__108.475_620;
common/mc.c:147:9: note: add new stmt: vect__109.477_624 = [vec_unpack_hi_expr] vect__108.475_620;
common/mc.c:147:9: note: add new stmt: vect__109.477_625 = [vec_unpack_lo_expr] vect__108.476_622;
common/mc.c:147:9: note: add new stmt: vect__109.477_626 = [vec_unpack_hi_expr] vect__108.476_622;
common/mc.c:147:9: note: ------>vectorizing statement: _110 = _79 + 3;

common/mc.c:147:9: note: ------>vectorizing statement: _111 = _110 * 2;

common/mc.c:147:9: note: ------>vectorizing statement: _112 = buf_20 + _111;

common/mc.c:147:9: note: ------>vectorizing statement: _113 = *_112;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: transform load. ncopies = 2
common/mc.c:147:9: note: create vector_type-pointer variable to type: vector(8) short int  vectorizing a pointer ref: *buf_20
common/mc.c:147:9: note: created vectp_buf.479_627
common/mc.c:147:9: note: add new stmt: vect__113.480_630 = MEM[(int16_t *)vectp_buf.478_628];
common/mc.c:147:9: note: add new stmt: vectp_buf.478_631 = vectp_buf.478_628 + 16;
common/mc.c:147:9: note: add new stmt: vect__113.481_632 = MEM[(int16_t *)vectp_buf.478_631];
common/mc.c:147:9: note: ------>vectorizing statement: _114 = (int) _113;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _113
common/mc.c:147:9: note: def_stmt: _113 = *_112;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform conversion. ncopies = 2.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _113
common/mc.c:147:9: note: vect_is_simple_use: operand _113
common/mc.c:147:9: note: def_stmt: _113 = *_112;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _113
  def_stmt =  _113 = *_112;
common/mc.c:147:9: note: add new stmt: vect__114.482_633 = [vec_unpack_lo_expr] vect__113.480_630;
common/mc.c:147:9: note: add new stmt: vect__114.482_634 = [vec_unpack_hi_expr] vect__113.480_630;
common/mc.c:147:9: note: add new stmt: vect__114.482_635 = [vec_unpack_lo_expr] vect__113.481_632;
common/mc.c:147:9: note: add new stmt: vect__114.482_636 = [vec_unpack_hi_expr] vect__113.481_632;
common/mc.c:147:9: note: ------>vectorizing statement: _115 = _109 + _114;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _109
common/mc.c:147:9: note: def_stmt: _109 = (int) _108;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _114
common/mc.c:147:9: note: def_stmt: _114 = (int) _113;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _109
common/mc.c:147:9: note: vect_is_simple_use: operand _109
common/mc.c:147:9: note: def_stmt: _109 = (int) _108;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _109
  def_stmt =  _109 = (int) _108;
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _114
common/mc.c:147:9: note: vect_is_simple_use: operand _114
common/mc.c:147:9: note: def_stmt: _114 = (int) _113;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _114
  def_stmt =  _114 = (int) _113;
common/mc.c:147:9: note: add new stmt: vect__115.483_637 = vect__109.477_623 + vect__114.482_633;
common/mc.c:147:9: note: add new stmt: vect__115.483_638 = vect__109.477_624 + vect__114.482_634;
common/mc.c:147:9: note: add new stmt: vect__115.483_639 = vect__109.477_625 + vect__114.482_635;
common/mc.c:147:9: note: add new stmt: vect__115.483_640 = vect__109.477_626 + vect__114.482_636;
common/mc.c:147:9: note: ------>vectorizing statement: _116 = _115 * 20;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _115
common/mc.c:147:9: note: def_stmt: _115 = _109 + _114;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand 20
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _115
common/mc.c:147:9: note: vect_is_simple_use: operand _115
common/mc.c:147:9: note: def_stmt: _115 = _109 + _114;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _115
  def_stmt =  _115 = _109 + _114;
common/mc.c:147:9: note: vect_get_vec_def_for_operand: 20
common/mc.c:147:9: note: vect_is_simple_use: operand 20
common/mc.c:147:9: note: Create vector_cst. nunits = 4
common/mc.c:147:9: note: created new init_stmt: vect_cst_.485_641 = { 20, 20, 20, 20 };
common/mc.c:147:9: note: add new stmt: vect__116.484_642 = vect__115.483_637 * vect_cst_.485_641;
common/mc.c:147:9: note: add new stmt: vect__116.484_643 = vect__115.483_638 * vect_cst_.485_641;
common/mc.c:147:9: note: add new stmt: vect__116.484_644 = vect__115.483_639 * vect_cst_.485_641;
common/mc.c:147:9: note: add new stmt: vect__116.484_645 = vect__115.483_640 * vect_cst_.485_641;
common/mc.c:147:9: note: ------>vectorizing statement: _117 = _104 + _116;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _104
common/mc.c:147:9: note: def_stmt: _104 = _91 + _103;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _116
common/mc.c:147:9: note: def_stmt: _116 = _115 * 20;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _104
common/mc.c:147:9: note: vect_is_simple_use: operand _104
common/mc.c:147:9: note: def_stmt: _104 = _91 + _103;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _104
  def_stmt =  _104 = _91 + _103;
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _116
common/mc.c:147:9: note: vect_is_simple_use: operand _116
common/mc.c:147:9: note: def_stmt: _116 = _115 * 20;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _116
  def_stmt =  _116 = _115 * 20;
common/mc.c:147:9: note: add new stmt: vect__117.486_646 = vect__104.472_613 + vect__116.484_642;
common/mc.c:147:9: note: add new stmt: vect__117.486_647 = vect__104.472_614 + vect__116.484_643;
common/mc.c:147:9: note: add new stmt: vect__117.486_648 = vect__104.472_615 + vect__116.484_644;
common/mc.c:147:9: note: add new stmt: vect__117.486_649 = vect__104.472_616 + vect__116.484_645;
common/mc.c:147:9: note: ------>vectorizing statement: _118 = _117 + 512;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _117
common/mc.c:147:9: note: def_stmt: _117 = _104 + _116;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand 512
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _117
common/mc.c:147:9: note: vect_is_simple_use: operand _117
common/mc.c:147:9: note: def_stmt: _117 = _104 + _116;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _117
  def_stmt =  _117 = _104 + _116;
common/mc.c:147:9: note: vect_get_vec_def_for_operand: 512
common/mc.c:147:9: note: vect_is_simple_use: operand 512
common/mc.c:147:9: note: Create vector_cst. nunits = 4
common/mc.c:147:9: note: created new init_stmt: vect_cst_.488_650 = { 512, 512, 512, 512 };
common/mc.c:147:9: note: add new stmt: vect__118.487_651 = vect__117.486_646 + vect_cst_.488_650;
common/mc.c:147:9: note: add new stmt: vect__118.487_652 = vect__117.486_647 + vect_cst_.488_650;
common/mc.c:147:9: note: add new stmt: vect__118.487_653 = vect__117.486_648 + vect_cst_.488_650;
common/mc.c:147:9: note: add new stmt: vect__118.487_654 = vect__117.486_649 + vect_cst_.488_650;
common/mc.c:147:9: note: ------>vectorizing statement: _119 = _118 >> 10;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _118
common/mc.c:147:9: note: def_stmt: _118 = _117 + 512;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand 10
common/mc.c:147:9: note: vector/scalar shift/rotate found.
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: operand 1 using scalar mode.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _118
common/mc.c:147:9: note: vect_is_simple_use: operand _118
common/mc.c:147:9: note: def_stmt: _118 = _117 + 512;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _118
  def_stmt =  _118 = _117 + 512;
common/mc.c:147:9: note: add new stmt: vect__119.489_655 = vect__118.487_651 >> 10;
common/mc.c:147:9: note: add new stmt: vect__119.489_656 = vect__118.487_652 >> 10;
common/mc.c:147:9: note: add new stmt: vect__119.489_657 = vect__118.487_653 >> 10;
common/mc.c:147:9: note: add new stmt: vect__119.489_658 = vect__118.487_654 >> 10;
common/mc.c:147:9: note: ------>vectorizing statement: # DEBUG x => NULL

common/mc.c:147:9: note: ------>vectorizing statement: _170 = _119 & -256;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand -256
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _119
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _119
  def_stmt =  _119 = _118 >> 10;
common/mc.c:147:9: note: vect_get_vec_def_for_operand: -256
common/mc.c:147:9: note: vect_is_simple_use: operand -256
common/mc.c:147:9: note: Create vector_cst. nunits = 4
common/mc.c:147:9: note: created new init_stmt: vect_cst_.491_659 = { -256, -256, -256, -256 };
common/mc.c:147:9: note: add new stmt: vect__170.490_660 = vect__119.489_655 & vect_cst_.491_659;
common/mc.c:147:9: note: add new stmt: vect__170.490_661 = vect__119.489_656 & vect_cst_.491_659;
common/mc.c:147:9: note: add new stmt: vect__170.490_662 = vect__119.489_657 & vect_cst_.491_659;
common/mc.c:147:9: note: add new stmt: vect__170.490_663 = vect__119.489_658 & vect_cst_.491_659;
common/mc.c:147:9: note: ------>vectorizing statement: _171 = -_119;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _119
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _119
  def_stmt =  _119 = _118 >> 10;
common/mc.c:147:9: note: add new stmt: vect__171.492_664 = -vect__119.489_655;
common/mc.c:147:9: note: add new stmt: vect__171.492_665 = -vect__119.489_656;
common/mc.c:147:9: note: add new stmt: vect__171.492_666 = -vect__119.489_657;
common/mc.c:147:9: note: add new stmt: vect__171.492_667 = -vect__119.489_658;
common/mc.c:147:9: note: ------>vectorizing statement: _172 = _171 >> 31;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _171
common/mc.c:147:9: note: def_stmt: _171 = -_119;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand 31
common/mc.c:147:9: note: vector/scalar shift/rotate found.
common/mc.c:147:9: note: transform binary/unary operation.
common/mc.c:147:9: note: operand 1 using scalar mode.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _171
common/mc.c:147:9: note: vect_is_simple_use: operand _171
common/mc.c:147:9: note: def_stmt: _171 = -_119;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _171
  def_stmt =  _171 = -_119;
common/mc.c:147:9: note: add new stmt: vect__172.493_668 = vect__171.492_664 >> 31;
common/mc.c:147:9: note: add new stmt: vect__172.493_669 = vect__171.492_665 >> 31;
common/mc.c:147:9: note: add new stmt: vect__172.493_670 = vect__171.492_666 >> 31;
common/mc.c:147:9: note: add new stmt: vect__172.493_671 = vect__171.492_667 >> 31;
common/mc.c:147:9: note: ------>vectorizing statement: iftmp.0_173 = (unsigned char) _172;

common/mc.c:147:9: note: ------>vectorizing statement: iftmp.0_174 = (unsigned char) _119;

common/mc.c:147:9: note: ------>vectorizing statement: iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;

common/mc.c:147:9: note: ==> vectorizing pattern def stmt: patt_428 = _170 != 0 ? _172 : _119;

common/mc.c:147:9: note: multiple-types.
common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand _170
common/mc.c:147:9: note: def_stmt: _170 = _119 & -256;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _172
common/mc.c:147:9: note: def_stmt: _172 = _171 >> 31;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _170
common/mc.c:147:9: note: vect_is_simple_use: operand _170
common/mc.c:147:9: note: def_stmt: _170 = _119 & -256;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _170
  def_stmt =  _170 = _119 & -256;
common/mc.c:147:9: note: vect_is_simple_use: operand _170
common/mc.c:147:9: note: def_stmt: _170 = _119 & -256;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: 0
common/mc.c:147:9: note: vect_is_simple_use: operand 0
common/mc.c:147:9: note: Create vector_cst. nunits = 4
common/mc.c:147:9: note: created new init_stmt: vect_cst_.495_672 = { 0, 0, 0, 0 };
common/mc.c:147:9: note: vect_is_simple_use: operand 0
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _172
common/mc.c:147:9: note: vect_is_simple_use: operand _172
common/mc.c:147:9: note: def_stmt: _172 = _171 >> 31;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _172
  def_stmt =  _172 = _171 >> 31;
common/mc.c:147:9: note: vect_is_simple_use: operand _172
common/mc.c:147:9: note: def_stmt: _172 = _171 >> 31;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: _119
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  _119
  def_stmt =  _119 = _118 >> 10;
common/mc.c:147:9: note: vect_is_simple_use: operand _119
common/mc.c:147:9: note: def_stmt: _119 = _118 >> 10;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: add new stmt: vect_patt_428.494_673 = VEC_COND_EXPR <vect__170.490_660 != vect_cst_.495_672, vect__172.493_668, vect__119.489_655>;
common/mc.c:147:9: note: add new stmt: vect_patt_428.494_674 = VEC_COND_EXPR <vect__170.490_661 != vect_cst_.495_672, vect__172.493_669, vect__119.489_656>;
common/mc.c:147:9: note: add new stmt: vect_patt_428.494_675 = VEC_COND_EXPR <vect__170.490_662 != vect_cst_.495_672, vect__172.493_670, vect__119.489_657>;
common/mc.c:147:9: note: add new stmt: vect_patt_428.494_676 = VEC_COND_EXPR <vect__170.490_663 != vect_cst_.495_672, vect__172.493_671, vect__119.489_658>;
common/mc.c:147:9: note: ------>vectorizing statement: iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;

common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand patt_428
common/mc.c:147:9: note: def_stmt: patt_428 = _170 != 0 ? _172 : _119;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform conversion. ncopies = 1.
common/mc.c:147:9: note: vect_get_vec_def_for_operand: patt_428
common/mc.c:147:9: note: vect_is_simple_use: operand patt_428
common/mc.c:147:9: note: def_stmt: patt_428 = _170 != 0 ? _172 : _119;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  patt_428
  def_stmt =  patt_428 = _170 != 0 ? _172 : _119;
common/mc.c:147:9: note: add new stmt: vect_patt_429.497_677 = VEC_PACK_TRUNC_EXPR <vect_patt_428.494_673, vect_patt_428.494_674>;
common/mc.c:147:9: note: add new stmt: vect_patt_429.497_678 = VEC_PACK_TRUNC_EXPR <vect_patt_428.494_675, vect_patt_428.494_676>;
common/mc.c:147:9: note: add new stmt: vect_patt_429.496_679 = VEC_PACK_TRUNC_EXPR <vect_patt_429.497_677, vect_patt_429.497_678>;
common/mc.c:147:9: note: ------>vectorizing statement: # DEBUG x => NULL

common/mc.c:147:9: note: ------>vectorizing statement: *_80 = iftmp.0_175;

common/mc.c:147:9: note: transform statement.
common/mc.c:147:9: note: vect_is_simple_use: operand iftmp.0_175
common/mc.c:147:9: note: def_stmt: iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: transform store. ncopies = 1
common/mc.c:147:9: note: vect_get_vec_def_for_operand: iftmp.0_175
common/mc.c:147:9: note: vect_is_simple_use: operand iftmp.0_175
common/mc.c:147:9: note: def_stmt: iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;
common/mc.c:147:9: note: type of def: 3.
common/mc.c:147:9: note: def =  iftmp.0_175
  def_stmt =  iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;
common/mc.c:147:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *dstc_190
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:147:9: note: created vectp_dstc.499_680
common/mc.c:147:9: note: add new stmt: MEM[(uint8_t *)vectp_dstc.498_681] = vect_patt_429.496_679;
common/mc.c:147:9: note: ------>vectorizing statement: x_122 = x_200 + 1;

common/mc.c:147:9: note: ------>vectorizing statement: # DEBUG x => x_122

common/mc.c:147:9: note: ------>vectorizing statement: # DEBUG x => x_122

common/mc.c:147:9: note: ------>vectorizing statement: vectp_buf.448_562 = vectp_buf.448_564 + 16;

common/mc.c:147:9: note: ------>vectorizing statement: vectp_buf.453_572 = vectp_buf.453_574 + 16;

common/mc.c:147:9: note: ------>vectorizing statement: vectp_buf.459_586 = vectp_buf.459_588 + 16;

common/mc.c:147:9: note: ------>vectorizing statement: vectp_buf.464_596 = vectp_buf.464_598 + 16;

common/mc.c:147:9: note: ------>vectorizing statement: vectp_buf.473_619 = vectp_buf.473_621 + 16;

common/mc.c:147:9: note: ------>vectorizing statement: vectp_buf.478_629 = vectp_buf.478_631 + 16;

common/mc.c:147:9: note: ------>vectorizing statement: vectp_dstc.498_682 = vectp_dstc.498_681 + 16;

common/mc.c:147:9: note: ------>vectorizing statement: if (width_13(D) > x_122)


loop at common/mc.c:148: if (ivtmp_684 < bnd.445_496)

;; Scaling loop 3 with scale 0.062500, bounding iterations to 0 from guessed 11
;; guessed iterations are now 1
common/mc.c:147:9: note: LOOP VECTORIZED


Analyzing loop at common/mc.c:141
common/mc.c:141:9: note: ===== analyze_loop_nest =====
common/mc.c:141:9: note: === vect_analyze_loop_form ===
common/mc.c:141:9: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [-1, + , 1](no_overflow) <= width_13(D) + 2
  bounds on difference of bases: -1 ... 2147483648
Applying pattern match.pd:494, generic-match.c:3721
  result:
    # of iterations (unsigned int) width_13(D) + 4, bounded by 2147483649
Applying pattern match.pd:494, generic-match.c:3721
common/mc.c:141:9: note: Symbolic number of iterations is (unsigned int) width_13(D) + 5
common/mc.c:141:9: note: === vect_analyze_data_refs ===
Creating dr for *_31
analyze_innermost: Applying pattern match.pd:809, generic-match.c:4941
success.
Applying pattern match.pd:809, generic-match.c:4941
	base_address: src_185 + -(sizetype) pretmp_387
	offset from base address: 0
	constant offset from base address: -2(OVF)
	step: 1
	aligned to: 128
	base_object: *src_185 + -(sizetype) pretmp_387
	Access function 0: {-2B, +, 1}_2
Creating dr for *_37
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: src_185 + (sizetype) pretmp_388
	offset from base address: 0
	constant offset from base address: -2(OVF)
	step: 1
	aligned to: 128
	base_object: *src_185 + (sizetype) pretmp_388
	Access function 0: {-2B, +, 1}_2
Creating dr for *_43
analyze_innermost: Applying pattern match.pd:809, generic-match.c:4941
success.
Applying pattern match.pd:809, generic-match.c:4941
	base_address: src_185 + -(sizetype) stride_27(D)
	offset from base address: 0
	constant offset from base address: -2(OVF)
	step: 1
	aligned to: 128
	base_object: *src_185 + -(sizetype) stride_27(D)
	Access function 0: {-2B, +, 1}_2
Creating dr for *_49
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: src_185 + (sizetype) pretmp_387
	offset from base address: 0
	constant offset from base address: -2(OVF)
	step: 1
	aligned to: 128
	base_object: *src_185 + (sizetype) pretmp_387
	Access function 0: {-2B, +, 1}_2
Creating dr for *_56
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: src_185
	offset from base address: 0
	constant offset from base address: -2(OVF)
	step: 1
	aligned to: 128
	base_object: *src_185
	Access function 0: {-2B, +, 1}_2
Creating dr for *_61
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: src_185 + (sizetype) stride_27(D)
	offset from base address: 0
	constant offset from base address: -2(OVF)
	step: 1
	aligned to: 128
	base_object: *src_185 + (sizetype) stride_27(D)
	Access function 0: {-2B, +, 1}_2
Creating dr for *_67
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: dstv_191
	offset from base address: 0
	constant offset from base address: -2(OVF)
	step: 1
	aligned to: 128
	base_object: *dstv_191
	Access function 0: {-2B, +, 1}_2
Creating dr for *_75
analyze_innermost: success.
	base_address: buf_20
	offset from base address: 0
	constant offset from base address: 0
	step: 2
	aligned to: 128
	base_object: *buf_20
	Access function 0: {0B, +, 2}_2
common/mc.c:141:9: note: got vectype for stmt: _32 = *_31;
vector(16) unsigned char
common/mc.c:141:9: note: got vectype for stmt: _38 = *_37;
vector(16) unsigned char
common/mc.c:141:9: note: got vectype for stmt: _44 = *_43;
vector(16) unsigned char
common/mc.c:141:9: note: got vectype for stmt: _50 = *_49;
vector(16) unsigned char
common/mc.c:141:9: note: got vectype for stmt: _57 = *_56;
vector(16) unsigned char
common/mc.c:141:9: note: got vectype for stmt: _62 = *_61;
vector(16) unsigned char
common/mc.c:141:9: note: got vectype for stmt: *_67 = iftmp.0_169;
vector(16) unsigned char
common/mc.c:141:9: note: got vectype for stmt: *_75 = _76;
vector(8) short int
common/mc.c:141:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:141:9: note: Analyze phi: x_199 = PHI <-2(18), x_78(4)>

common/mc.c:141:9: note: Access function of PHI: {-2, +, 1}_2
common/mc.c:141:9: note: step: 1,  init: -2
common/mc.c:141:9: note: Detected induction.
common/mc.c:141:9: note: Analyze phi: .MEM_203 = PHI <.MEM_184(18), .MEM_77(4)>

common/mc.c:141:9: note: === vect_pattern_recog ===
common/mc.c:141:9: note: vect_is_simple_use: operand _52
common/mc.c:141:9: note: def_stmt: _52 = _45 + _51;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: vect_is_simple_use: operand _64
common/mc.c:141:9: note: def_stmt: _64 = _58 + _63;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: vect_is_simple_use: operand _68
common/mc.c:141:9: note: def_stmt: _68 = v_66 + 16;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: vect_is_simple_use: operand _120
common/mc.c:141:9: note: def_stmt: _120 = -_69;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: vect_is_simple_use: operand iftmp.0_167
common/mc.c:141:9: note: def_stmt: iftmp.0_167 = (unsigned char) _70;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: vect_is_simple_use: operand _70
common/mc.c:141:9: note: def_stmt: _70 = _120 >> 31;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: vect_is_simple_use: operand iftmp.0_168
common/mc.c:141:9: note: def_stmt: iftmp.0_168 = (unsigned char) _69;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: vect_is_simple_use: operand _69
common/mc.c:141:9: note: def_stmt: _69 = _68 >> 5;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: vect_recog_mixed_size_cond_pattern: detected:
common/mc.c:141:9: note: pattern recognized: patt_686 = (unsigned char) patt_685;
common/mc.c:141:9: note: vect_is_simple_use: operand _73
common/mc.c:141:9: note: def_stmt: _73 = _55 + 2;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:141:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:141:9: note: init: phi relevant? x_199 = PHI <-2(18), x_78(4)>
common/mc.c:141:9: note: init: phi relevant? .MEM_203 = PHI <.MEM_184(18), .MEM_77(4)>
common/mc.c:141:9: note: init: stmt relevant? # DEBUG x => NULL
common/mc.c:141:9: note: init: stmt relevant? _29 = x_199 - pretmp_387;
common/mc.c:141:9: note: init: stmt relevant? _30 = (sizetype) _29;
common/mc.c:141:9: note: init: stmt relevant? _31 = src_185 + _30;
common/mc.c:141:9: note: init: stmt relevant? _32 = *_31;
common/mc.c:141:9: note: init: stmt relevant? _33 = (int) _32;
common/mc.c:141:9: note: init: stmt relevant? _35 = x_199 + pretmp_388;
common/mc.c:141:9: note: init: stmt relevant? _36 = (sizetype) _35;
common/mc.c:141:9: note: init: stmt relevant? _37 = src_185 + _36;
common/mc.c:141:9: note: init: stmt relevant? _38 = *_37;
common/mc.c:141:9: note: init: stmt relevant? _39 = (int) _38;
common/mc.c:141:9: note: init: stmt relevant? _40 = _33 + _39;
common/mc.c:141:9: note: init: stmt relevant? _41 = x_199 - stride_27(D);
common/mc.c:141:9: note: init: stmt relevant? _42 = (sizetype) _41;
common/mc.c:141:9: note: init: stmt relevant? _43 = src_185 + _42;
common/mc.c:141:9: note: init: stmt relevant? _44 = *_43;
common/mc.c:141:9: note: init: stmt relevant? _45 = (int) _44;
common/mc.c:141:9: note: init: stmt relevant? _47 = x_199 + pretmp_387;
common/mc.c:141:9: note: init: stmt relevant? _48 = (sizetype) _47;
common/mc.c:141:9: note: init: stmt relevant? _49 = src_185 + _48;
common/mc.c:141:9: note: init: stmt relevant? _50 = *_49;
common/mc.c:141:9: note: init: stmt relevant? _51 = (int) _50;
common/mc.c:141:9: note: init: stmt relevant? _52 = _45 + _51;
common/mc.c:141:9: note: init: stmt relevant? _53 = _52 * -5;
common/mc.c:141:9: note: init: stmt relevant? _54 = _40 + _53;
common/mc.c:141:9: note: init: stmt relevant? _55 = (sizetype) x_199;
common/mc.c:141:9: note: init: stmt relevant? _56 = src_185 + _55;
common/mc.c:141:9: note: init: stmt relevant? _57 = *_56;
common/mc.c:141:9: note: init: stmt relevant? _58 = (int) _57;
common/mc.c:141:9: note: init: stmt relevant? _59 = stride_27(D) + x_199;
common/mc.c:141:9: note: init: stmt relevant? _60 = (sizetype) _59;
common/mc.c:141:9: note: init: stmt relevant? _61 = src_185 + _60;
common/mc.c:141:9: note: init: stmt relevant? _62 = *_61;
common/mc.c:141:9: note: init: stmt relevant? _63 = (int) _62;
common/mc.c:141:9: note: init: stmt relevant? _64 = _58 + _63;
common/mc.c:141:9: note: init: stmt relevant? _65 = _64 * 20;
common/mc.c:141:9: note: init: stmt relevant? v_66 = _54 + _65;
common/mc.c:141:9: note: init: stmt relevant? # DEBUG v => NULL
common/mc.c:141:9: note: init: stmt relevant? _67 = dstv_191 + _55;
common/mc.c:141:9: note: init: stmt relevant? _68 = v_66 + 16;
common/mc.c:141:9: note: init: stmt relevant? _69 = _68 >> 5;
common/mc.c:141:9: note: init: stmt relevant? # DEBUG x => NULL
common/mc.c:141:9: note: init: stmt relevant? _157 = _69 & -256;
common/mc.c:141:9: note: init: stmt relevant? _120 = -_69;
common/mc.c:141:9: note: init: stmt relevant? _70 = _120 >> 31;
common/mc.c:141:9: note: init: stmt relevant? iftmp.0_167 = (unsigned char) _70;
common/mc.c:141:9: note: init: stmt relevant? iftmp.0_168 = (unsigned char) _69;
common/mc.c:141:9: note: init: stmt relevant? iftmp.0_169 = _157 != 0 ? iftmp.0_167 : iftmp.0_168;
common/mc.c:141:9: note: init: stmt relevant? # DEBUG x => NULL
common/mc.c:141:9: note: init: stmt relevant? *_67 = iftmp.0_169;
common/mc.c:141:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: init: stmt relevant? _73 = _55 + 2;
common/mc.c:141:9: note: init: stmt relevant? _74 = _73 * 2;
common/mc.c:141:9: note: init: stmt relevant? _75 = buf_20 + _74;
common/mc.c:141:9: note: init: stmt relevant? _76 = (short int) v_66;
common/mc.c:141:9: note: init: stmt relevant? *_75 = _76;
common/mc.c:141:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: init: stmt relevant? x_78 = x_199 + 1;
common/mc.c:141:9: note: init: stmt relevant? # DEBUG x => x_78
common/mc.c:141:9: note: init: stmt relevant? # DEBUG x => x_78
common/mc.c:141:9: note: init: stmt relevant? if (x_78 <= pretmp_386)
common/mc.c:141:9: note: worklist: examine stmt: *_75 = _76;
common/mc.c:141:9: note: vect_is_simple_use: operand _76
common/mc.c:141:9: note: def_stmt: _76 = (short int) v_66;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _76 = (short int) v_66;
common/mc.c:141:9: note: vect_is_simple_use: operand v_66
common/mc.c:141:9: note: def_stmt: v_66 = _54 + _65;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: v_66 = _54 + _65;
common/mc.c:141:9: note: vect_is_simple_use: operand _54
common/mc.c:141:9: note: def_stmt: _54 = _40 + _53;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: vect_is_simple_use: operand _65
common/mc.c:141:9: note: def_stmt: _65 = _64 * 20;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _65 = _64 * 20;
common/mc.c:141:9: note: vect_is_simple_use: operand _64
common/mc.c:141:9: note: def_stmt: _64 = _58 + _63;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _64 = _58 + _63;
common/mc.c:141:9: note: vect_is_simple_use: operand _58
common/mc.c:141:9: note: def_stmt: _58 = (int) _57;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: vect_is_simple_use: operand _63
common/mc.c:141:9: note: def_stmt: _63 = (int) _62;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _63 = (int) _62;
common/mc.c:141:9: note: vect_is_simple_use: operand _62
common/mc.c:141:9: note: def_stmt: _62 = *_61;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _62 = *_61;
common/mc.c:141:9: note: worklist: examine stmt: _58 = (int) _57;
common/mc.c:141:9: note: vect_is_simple_use: operand _57
common/mc.c:141:9: note: def_stmt: _57 = *_56;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _57 = *_56;
common/mc.c:141:9: note: worklist: examine stmt: _54 = _40 + _53;
common/mc.c:141:9: note: vect_is_simple_use: operand _40
common/mc.c:141:9: note: def_stmt: _40 = _33 + _39;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: vect_is_simple_use: operand _53
common/mc.c:141:9: note: def_stmt: _53 = _52 * -5;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _53 = _52 * -5;
common/mc.c:141:9: note: vect_is_simple_use: operand _52
common/mc.c:141:9: note: def_stmt: _52 = _45 + _51;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _52 = _45 + _51;
common/mc.c:141:9: note: vect_is_simple_use: operand _45
common/mc.c:141:9: note: def_stmt: _45 = (int) _44;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: vect_is_simple_use: operand _51
common/mc.c:141:9: note: def_stmt: _51 = (int) _50;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _51 = (int) _50;
common/mc.c:141:9: note: vect_is_simple_use: operand _50
common/mc.c:141:9: note: def_stmt: _50 = *_49;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _50 = *_49;
common/mc.c:141:9: note: worklist: examine stmt: _45 = (int) _44;
common/mc.c:141:9: note: vect_is_simple_use: operand _44
common/mc.c:141:9: note: def_stmt: _44 = *_43;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _44 = *_43;
common/mc.c:141:9: note: worklist: examine stmt: _40 = _33 + _39;
common/mc.c:141:9: note: vect_is_simple_use: operand _33
common/mc.c:141:9: note: def_stmt: _33 = (int) _32;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: vect_is_simple_use: operand _39
common/mc.c:141:9: note: def_stmt: _39 = (int) _38;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _39 = (int) _38;
common/mc.c:141:9: note: vect_is_simple_use: operand _38
common/mc.c:141:9: note: def_stmt: _38 = *_37;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _38 = *_37;
common/mc.c:141:9: note: worklist: examine stmt: _33 = (int) _32;
common/mc.c:141:9: note: vect_is_simple_use: operand _32
common/mc.c:141:9: note: def_stmt: _32 = *_31;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _32 = *_31;
common/mc.c:141:9: note: worklist: examine stmt: *_67 = iftmp.0_169;
common/mc.c:141:9: note: vect_is_simple_use: operand iftmp.0_169
common/mc.c:141:9: note: def_stmt: iftmp.0_169 = _157 != 0 ? iftmp.0_167 : iftmp.0_168;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: last stmt in pattern. don't mark relevant/live.
common/mc.c:141:9: note: worklist: examine stmt: patt_686 = (unsigned char) patt_685;
common/mc.c:141:9: note: vect_is_simple_use: operand patt_685
common/mc.c:141:9: note: def_stmt: patt_685 = _157 != 0 ? _70 : _69;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: patt_685 = _157 != 0 ? _70 : _69;
common/mc.c:141:9: note: vect_is_simple_use: operand _157
common/mc.c:141:9: note: def_stmt: _157 = _69 & -256;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: vect_is_simple_use: operand 0
common/mc.c:141:9: note: vect_is_simple_use: operand _70
common/mc.c:141:9: note: def_stmt: _70 = _120 >> 31;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: vect_is_simple_use: operand _69
common/mc.c:141:9: note: def_stmt: _69 = _68 >> 5;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _69 = _68 >> 5;
common/mc.c:141:9: note: vect_is_simple_use: operand _68
common/mc.c:141:9: note: def_stmt: _68 = v_66 + 16;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _68 = v_66 + 16;
common/mc.c:141:9: note: vect_is_simple_use: operand v_66
common/mc.c:141:9: note: def_stmt: v_66 = _54 + _65;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: already marked relevant/live.
common/mc.c:141:9: note: worklist: examine stmt: _70 = _120 >> 31;
common/mc.c:141:9: note: vect_is_simple_use: operand _120
common/mc.c:141:9: note: def_stmt: _120 = -_69;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: worklist: examine stmt: _120 = -_69;
common/mc.c:141:9: note: vect_is_simple_use: operand _69
common/mc.c:141:9: note: def_stmt: _69 = _68 >> 5;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: already marked relevant/live.
common/mc.c:141:9: note: worklist: examine stmt: _157 = _69 & -256;
common/mc.c:141:9: note: vect_is_simple_use: operand _69
common/mc.c:141:9: note: def_stmt: _69 = _68 >> 5;
common/mc.c:141:9: note: type of def: 3.
common/mc.c:141:9: note: mark relevant 4, live 0.
common/mc.c:141:9: note: already marked relevant/live.
common/mc.c:141:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _32 = *_31;
  stmt_b: _38 = *_37;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = *_31;
  stmt_b: _44 = *_43;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = *_31;
  stmt_b: _50 = *_49;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = *_31;
  stmt_b: _57 = *_56;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = *_31;
  stmt_b: _62 = *_61;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = *_31;
  stmt_b: *_67 = iftmp.0_169;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = *_31;
  stmt_b: *_75 = _76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _38 = *_37;
  stmt_b: _44 = *_43;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _38 = *_37;
  stmt_b: _50 = *_49;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _38 = *_37;
  stmt_b: _57 = *_56;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _38 = *_37;
  stmt_b: _62 = *_61;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _38 = *_37;
  stmt_b: *_67 = iftmp.0_169;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _38 = *_37;
  stmt_b: *_75 = _76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _50 = *_49;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _57 = *_56;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _62 = *_61;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: *_67 = iftmp.0_169;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: *_75 = _76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _50 = *_49;
  stmt_b: _57 = *_56;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _50 = *_49;
  stmt_b: _62 = *_61;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _50 = *_49;
  stmt_b: *_67 = iftmp.0_169;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _50 = *_49;
  stmt_b: *_75 = _76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _57 = *_56;
  stmt_b: _62 = *_61;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _57 = *_56;
  stmt_b: *_67 = iftmp.0_169;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _57 = *_56;
  stmt_b: *_75 = _76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _62 = *_61;
  stmt_b: *_67 = iftmp.0_169;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _62 = *_61;
  stmt_b: *_75 = _76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_67 = iftmp.0_169;
  stmt_b: *_75 = _76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = *_31;
  stmt_b: _32 = *_31;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_2)
  (chrec_b = {-2B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _38 = *_37;
  stmt_b: _38 = *_37;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_2)
  (chrec_b = {-2B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _44 = *_43;
  stmt_b: _44 = *_43;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_2)
  (chrec_b = {-2B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _50 = *_49;
  stmt_b: _50 = *_49;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_2)
  (chrec_b = {-2B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _57 = *_56;
  stmt_b: _57 = *_56;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_2)
  (chrec_b = {-2B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _62 = *_61;
  stmt_b: _62 = *_61;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_2)
  (chrec_b = {-2B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_67 = iftmp.0_169;
  stmt_b: *_67 = iftmp.0_169;
(analyze_overlapping_iterations 
  (chrec_a = {-2B, +, 1}_2)
  (chrec_b = {-2B, +, 1}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_75 = _76;
  stmt_b: *_75 = _76;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 2}_2)
  (chrec_b = {0B, +, 2}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_31 and *_67
common/mc.c:141:9: note: mark for run-time aliasing test between *_31 and *_67
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_31 and *_75
common/mc.c:141:9: note: mark for run-time aliasing test between *_31 and *_75
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_37 and *_67
common/mc.c:141:9: note: mark for run-time aliasing test between *_37 and *_67
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_37 and *_75
common/mc.c:141:9: note: mark for run-time aliasing test between *_37 and *_75
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_43 and *_67
common/mc.c:141:9: note: mark for run-time aliasing test between *_43 and *_67
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_43 and *_75
common/mc.c:141:9: note: mark for run-time aliasing test between *_43 and *_75
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_49 and *_67
common/mc.c:141:9: note: mark for run-time aliasing test between *_49 and *_67
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_49 and *_75
common/mc.c:141:9: note: mark for run-time aliasing test between *_49 and *_75
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_56 and *_67
common/mc.c:141:9: note: mark for run-time aliasing test between *_56 and *_67
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_56 and *_75
common/mc.c:141:9: note: mark for run-time aliasing test between *_56 and *_75
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_61 and *_67
common/mc.c:141:9: note: mark for run-time aliasing test between *_61 and *_67
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_61 and *_75
common/mc.c:141:9: note: mark for run-time aliasing test between *_61 and *_75
common/mc.c:141:9: note: versioning for alias required: can't determine dependence between *_67 and *_75
common/mc.c:141:9: note: mark for run-time aliasing test between *_67 and *_75
common/mc.c:141:9: note: === vect_determine_vectorization_factor ===
common/mc.c:141:9: note: ==> examining phi: x_199 = PHI <-2(18), x_78(4)>

common/mc.c:141:9: note: ==> examining phi: .MEM_203 = PHI <.MEM_184(18), .MEM_77(4)>

common/mc.c:141:9: note: ==> examining statement: # DEBUG x => NULL

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _29 = x_199 - pretmp_387;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _30 = (sizetype) _29;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _31 = src_185 + _30;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _32 = *_31;

common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _33 = (int) _32;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _35 = x_199 + pretmp_388;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _36 = (sizetype) _35;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _37 = src_185 + _36;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _38 = *_37;

common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _39 = (int) _38;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _40 = _33 + _39;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: _41 = x_199 - stride_27(D);

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _42 = (sizetype) _41;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _43 = src_185 + _42;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _44 = *_43;

common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _45 = (int) _44;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _47 = x_199 + pretmp_387;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _48 = (sizetype) _47;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _49 = src_185 + _48;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _50 = *_49;

common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _51 = (int) _50;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _52 = _45 + _51;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: _53 = _52 * -5;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: _54 = _40 + _53;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: _55 = (sizetype) x_199;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _56 = src_185 + _55;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _57 = *_56;

common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _58 = (int) _57;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _59 = stride_27(D) + x_199;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _60 = (sizetype) _59;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _61 = src_185 + _60;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _62 = *_61;

common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _63 = (int) _62;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _64 = _58 + _63;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: _65 = _64 * 20;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: v_66 = _54 + _65;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: # DEBUG v => NULL

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _67 = dstv_191 + _55;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _68 = v_66 + 16;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: _69 = _68 >> 5;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: # DEBUG x => NULL

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _157 = _69 & -256;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: _120 = -_69;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: _70 = _120 >> 31;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: iftmp.0_167 = (unsigned char) _70;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: iftmp.0_168 = (unsigned char) _69;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: iftmp.0_169 = _157 != 0 ? iftmp.0_167 : iftmp.0_168;

common/mc.c:141:9: note: ==> examining pattern statement: patt_686 = (unsigned char) patt_685;

common/mc.c:141:9: note: ==> examining pattern def stmt: patt_685 = _157 != 0 ? _70 : _69;

common/mc.c:141:9: note: get vectype for scalar type:  int
common/mc.c:141:9: note: vectype: vector(4) int
common/mc.c:141:9: note: nunits = 4
common/mc.c:141:9: note: ==> examining statement: iftmp.0_169 = _157 != 0 ? iftmp.0_167 : iftmp.0_168;

common/mc.c:141:9: note: ==> examining pattern statement: patt_686 = (unsigned char) patt_685;

common/mc.c:141:9: note: get vectype for scalar type:  unsigned char
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: # DEBUG x => NULL

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: *_67 = iftmp.0_169;

common/mc.c:141:9: note: get vectype for scalar type:  uint8_t
common/mc.c:141:9: note: vectype: vector(16) unsigned char
common/mc.c:141:9: note: nunits = 16
common/mc.c:141:9: note: ==> examining statement: _73 = _55 + 2;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _74 = _73 * 2;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _75 = buf_20 + _74;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: _76 = (short int) v_66;

common/mc.c:141:9: note: get vectype for scalar type:  short int
common/mc.c:141:9: note: vectype: vector(8) short int
common/mc.c:141:9: note: get vectype for scalar type:  short int
common/mc.c:141:9: note: vectype: vector(8) short int
common/mc.c:141:9: note: nunits = 8
common/mc.c:141:9: note: ==> examining statement: *_75 = _76;

common/mc.c:141:9: note: get vectype for scalar type:  int16_t
common/mc.c:141:9: note: vectype: vector(8) short int
common/mc.c:141:9: note: nunits = 8
common/mc.c:141:9: note: ==> examining statement: x_78 = x_199 + 1;

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: # DEBUG x => x_78

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: # DEBUG x => x_78

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: ==> examining statement: if (x_78 <= pretmp_386)

common/mc.c:141:9: note: skip.
common/mc.c:141:9: note: vectorization factor = 16
common/mc.c:141:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:141:9: note: vect_compute_data_ref_alignment:
common/mc.c:141:9: note: can't force alignment of ref: *_31
common/mc.c:141:9: note: vect_compute_data_ref_alignment:
common/mc.c:141:9: note: can't force alignment of ref: *_37
common/mc.c:141:9: note: vect_compute_data_ref_alignment:
common/mc.c:141:9: note: can't force alignment of ref: *_43
common/mc.c:141:9: note: vect_compute_data_ref_alignment:
common/mc.c:141:9: note: can't force alignment of ref: *_49
common/mc.c:141:9: note: vect_compute_data_ref_alignment:
common/mc.c:141:9: note: can't force alignment of ref: *_56
common/mc.c:141:9: note: vect_compute_data_ref_alignment:
common/mc.c:141:9: note: can't force alignment of ref: *_61
common/mc.c:141:9: note: vect_compute_data_ref_alignment:
common/mc.c:141:9: note: can't force alignment of ref: *_67
common/mc.c:141:9: note: vect_compute_data_ref_alignment:
common/mc.c:141:9: note: can't force alignment of ref: *_75
common/mc.c:141:9: note: === vect_prune_runtime_alias_test_list ===
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
Applying pattern match.pd:114, generic-match.c:6569
common/mc.c:141:9: note: improved number of alias checks from 13 to 13
common/mc.c:141:9: note: number of versioning for alias run-time tests exceeds 6 (--param vect-max-version-for-alias-checks)
common/mc.c:134:13: note: vectorized 2 loops in function.
Removing basic block 9
basic block 9, loop depth 1
 pred:      
 succ:       38


Merging blocks 12 and 23
Merging blocks 24 and 31
Merging blocks 33 and 26
Merging blocks 39 and 46
Merging blocks 48 and 41
hpel_filter (uint8_t * dsth, uint8_t * dstv, uint8_t * dstc, uint8_t * src, int stride, int width, int height)
{
  vector(16) unsigned char * vectp_dstc.499;
  vector(16) unsigned char * vectp_dstc.498;
  vector(8) short int vect_patt_429.497;
  vector(16) unsigned char vect_patt_429.496;
  vector(4) int vect_cst_.495;
  vector(4) int vect_patt_428.494;
  vector(4) int vect__172.493;
  vector(4) int vect__171.492;
  vector(4) int vect_cst_.491;
  vector(4) int vect__170.490;
  vector(4) int vect__119.489;
  vector(4) int vect_cst_.488;
  vector(4) int vect__118.487;
  vector(4) int vect__117.486;
  vector(4) int vect_cst_.485;
  vector(4) int vect__116.484;
  vector(4) int vect__115.483;
  vector(4) int vect__114.482;
  vector(8) short int vect__113.481;
  vector(8) short int vect__113.480;
  vector(8) short int * vectp_buf.479;
  vector(8) short int * vectp_buf.478;
  vector(4) int vect__109.477;
  vector(8) short int vect__108.476;
  vector(8) short int vect__108.475;
  vector(8) short int * vectp_buf.474;
  vector(8) short int * vectp_buf.473;
  vector(4) int vect__104.472;
  vector(4) int vect_cst_.471;
  vector(4) int vect__103.470;
  vector(4) int vect__102.469;
  vector(4) int vect__101.468;
  vector(8) short int vect__100.467;
  vector(8) short int vect__100.466;
  vector(8) short int * vectp_buf.465;
  vector(8) short int * vectp_buf.464;
  vector(4) int vect__96.463;
  vector(8) short int vect__95.462;
  vector(8) short int vect__95.461;
  vector(8) short int * vectp_buf.460;
  vector(8) short int * vectp_buf.459;
  vector(4) int vect__91.458;
  vector(4) int vect__90.457;
  vector(8) short int vect__89.456;
  vector(8) short int vect__89.455;
  vector(8) short int * vectp_buf.454;
  vector(8) short int * vectp_buf.453;
  vector(4) int vect__84.452;
  vector(8) short int vect__83.451;
  vector(8) short int vect__83.450;
  vector(8) short int * vectp_buf.449;
  vector(8) short int * vectp_buf.448;
  int tmp.447;
  unsigned int ratio_mult_vf.446;
  unsigned int bnd.445;
  unsigned int niters.444;
  vector(16) unsigned char * vectp_dsth.443;
  vector(16) unsigned char * vectp_dsth.442;
  vector(8) short int vect_patt_375.441;
  vector(16) unsigned char vect_patt_375.440;
  vector(4) int vect_cst_.439;
  vector(4) int vect_patt_206.438;
  vector(4) int vect__178.437;
  vector(4) int vect__177.436;
  vector(4) int vect_cst_.435;
  vector(4) int vect__176.434;
  vector(4) int vect__156.433;
  vector(4) int vect_cst_.432;
  vector(4) int vect__155.431;
  vector(4) int vect__154.430;
  vector(4) int vect_cst_.429;
  vector(4) int vect__153.428;
  vector(4) int vect__152.427;
  vector(8) short unsigned int vect__151.426;
  vector(4) int vect__151.425;
  vector(16) unsigned char vect__150.424;
  vector(16) unsigned char * vectp_src.423;
  vector(16) unsigned char * vectp_src.422;
  vector(8) short unsigned int vect__147.421;
  vector(4) int vect__147.420;
  vector(16) unsigned char vect__146.419;
  vector(16) unsigned char * vectp_src.418;
  vector(16) unsigned char * vectp_src.417;
  vector(4) int vect__144.416;
  vector(4) int vect_cst_.415;
  vector(4) int vect__143.414;
  vector(4) int vect__142.413;
  vector(8) short unsigned int vect__141.412;
  vector(4) int vect__141.411;
  vector(16) unsigned char vect__140.410;
  vector(16) unsigned char * vectp_src.409;
  vector(16) unsigned char * vectp_src.408;
  vector(8) short unsigned int vect__137.407;
  vector(4) int vect__137.406;
  vector(16) unsigned char vect__136.405;
  vector(16) unsigned char * vectp_src.404;
  vector(16) unsigned char * vectp_src.403;
  vector(4) int vect__133.402;
  vector(8) short unsigned int vect__132.401;
  vector(4) int vect__132.400;
  vector(16) unsigned char vect__131.399;
  vector(16) unsigned char * vectp_src.398;
  vector(16) unsigned char * vectp_src.397;
  vector(8) short unsigned int vect__128.396;
  vector(4) int vect__128.395;
  vector(16) unsigned char vect__127.394;
  vector(16) unsigned char * vectp_src.393;
  vector(16) unsigned char * vectp_src.392;
  int tmp.391;
  unsigned int ratio_mult_vf.390;
  unsigned int bnd.389;
  unsigned int niters.388;
  int v;
  int y;
  int x;
  int16_t * buf;
  int _14;
  unsigned int _15;
  unsigned int _16;
  int _17;
  int _29;
  sizetype _30;
  uint8_t * _31;
  unsigned char _32;
  int _33;
  int _35;
  sizetype _36;
  uint8_t * _37;
  unsigned char _38;
  int _39;
  int _40;
  int _41;
  sizetype _42;
  uint8_t * _43;
  unsigned char _44;
  int _45;
  int _47;
  sizetype _48;
  uint8_t * _49;
  unsigned char _50;
  int _51;
  int _52;
  int _53;
  int _54;
  sizetype _55;
  uint8_t * _56;
  unsigned char _57;
  int _58;
  int _59;
  sizetype _60;
  uint8_t * _61;
  unsigned char _62;
  int _63;
  int _64;
  int _65;
  uint8_t * _67;
  int _68;
  int _69;
  int _70;
  sizetype _73;
  sizetype _74;
  int16_t * _75;
  short int _76;
  sizetype _79;
  uint8_t * _80;
  long unsigned int _81;
  int16_t * _82;
  short int _83;
  int _84;
  sizetype _86;
  sizetype _87;
  int16_t * _88;
  short int _89;
  int _90;
  int _91;
  sizetype _92;
  sizetype _93;
  int16_t * _94;
  short int _95;
  int _96;
  sizetype _97;
  sizetype _98;
  int16_t * _99;
  short int _100;
  int _101;
  int _102;
  int _103;
  int _104;
  sizetype _105;
  sizetype _106;
  int16_t * _107;
  short int _108;
  int _109;
  sizetype _110;
  sizetype _111;
  int16_t * _112;
  short int _113;
  int _114;
  int _115;
  int _116;
  int _117;
  int _118;
  int _119;
  int _120;
  unsigned int ivtmp_121;
  sizetype _123;
  uint8_t * _124;
  sizetype _125;
  uint8_t * _126;
  unsigned char _127;
  int _128;
  sizetype _129;
  uint8_t * _130;
  unsigned char _131;
  int _132;
  int _133;
  sizetype _134;
  uint8_t * _135;
  unsigned char _136;
  int _137;
  sizetype _138;
  uint8_t * _139;
  unsigned char _140;
  int _141;
  int _142;
  int _143;
  int _144;
  uint8_t * _145;
  unsigned char _146;
  int _147;
  sizetype _148;
  uint8_t * _149;
  unsigned char _150;
  int _151;
  int _152;
  int _153;
  int _154;
  int _155;
  int _156;
  int _157;
  unsigned int ivtmp_158;
  unsigned char iftmp.0_167;
  unsigned char iftmp.0_168;
  unsigned char iftmp.0_169;
  int _170;
  int _171;
  int _172;
  unsigned char iftmp.0_173;
  unsigned char iftmp.0_174;
  unsigned char iftmp.0_175;
  int _176;
  int _177;
  int _178;
  unsigned char iftmp.0_179;
  unsigned char iftmp.0_180;
  unsigned char iftmp.0_181;
  int patt_206;
  unsigned int _270;
  unsigned int _271;
  unsigned char iftmp.0_274;
  unsigned char iftmp.0_275;
  unsigned char iftmp.0_276;
  int _277;
  int _278;
  int _279;
  int _280;
  int _281;
  int _282;
  int _283;
  int _284;
  int _285;
  unsigned char _286;
  uint8_t * _287;
  sizetype _288;
  int _289;
  unsigned char _290;
  uint8_t * _291;
  int _292;
  int _293;
  int _294;
  int _295;
  unsigned char _296;
  uint8_t * _297;
  sizetype _298;
  int _299;
  unsigned char _300;
  uint8_t * _301;
  sizetype _302;
  int _303;
  int _304;
  unsigned char _305;
  uint8_t * _306;
  sizetype _307;
  int _308;
  unsigned char _309;
  uint8_t * _310;
  sizetype _311;
  uint8_t * _312;
  sizetype _313;
  unsigned int _317;
  unsigned int _318;
  unsigned char iftmp.0_324;
  unsigned char iftmp.0_325;
  unsigned char iftmp.0_326;
  int _327;
  int _328;
  int _329;
  int _330;
  int _331;
  int _332;
  int _333;
  int _334;
  int _335;
  unsigned char _336;
  uint8_t * _337;
  sizetype _338;
  int _339;
  unsigned char _340;
  uint8_t * _341;
  int _342;
  int _343;
  int _344;
  int _345;
  unsigned char _346;
  uint8_t * _347;
  sizetype _348;
  int _349;
  unsigned char _350;
  uint8_t * _351;
  sizetype _352;
  int _353;
  int _354;
  unsigned char _355;
  uint8_t * _356;
  sizetype _357;
  int _358;
  unsigned char _359;
  uint8_t * _360;
  sizetype _361;
  uint8_t * _362;
  sizetype _363;
  _Bool _366;
  _Bool _367;
  _Bool _368;
  uint8_t * _369;
  _Bool _370;
  uint8_t * _371;
  uint8_t * _372;
  _Bool _373;
  unsigned int _374;
  unsigned int _376;
  unsigned int _377;
  unsigned int _378;
  unsigned int _379;
  sizetype pretmp_384;
  int pretmp_386;
  int pretmp_387;
  int pretmp_388;
  unsigned int ivtmp_427;
  int patt_428;
  unsigned int _430;
  _Bool _431;
  unsigned int _432;
  sizetype _433;
  sizetype _434;
  sizetype _435;
  int16_t * _436;
  _Bool _437;
  unsigned int _438;
  sizetype _439;
  uint8_t * _440;
  _Bool _441;
  _Bool _442;
  _Bool _443;
  sizetype _446;
  uint8_t * _447;
  long unsigned int _448;
  int16_t * _449;
  short int _450;
  int _451;
  sizetype _452;
  sizetype _453;
  int16_t * _454;
  short int _455;
  int _456;
  int _457;
  sizetype _458;
  sizetype _459;
  int16_t * _460;
  short int _461;
  int _462;
  sizetype _463;
  sizetype _464;
  int16_t * _465;
  short int _466;
  int _467;
  int _468;
  int _469;
  int _470;
  sizetype _471;
  sizetype _472;
  int16_t * _473;
  short int _474;
  int _475;
  sizetype _476;
  sizetype _477;
  int16_t * _478;
  short int _479;
  int _480;
  int _481;
  int _482;
  int _483;
  int _484;
  int _485;
  int _486;
  int _487;
  int _488;
  unsigned char iftmp.0_489;
  unsigned char iftmp.0_490;
  unsigned char iftmp.0_491;
  unsigned int _497;
  unsigned int _498;
  sizetype _503;
  uint8_t * _504;
  long unsigned int _505;
  int16_t * _506;
  short int _507;
  int _508;
  sizetype _509;
  sizetype _510;
  int16_t * _511;
  short int _512;
  int _513;
  int _514;
  sizetype _515;
  sizetype _516;
  int16_t * _517;
  short int _518;
  int _519;
  sizetype _520;
  sizetype _521;
  int16_t * _522;
  short int _523;
  int _524;
  int _525;
  int _526;
  int _527;
  sizetype _528;
  sizetype _529;
  int16_t * _530;
  short int _531;
  int _532;
  sizetype _533;
  sizetype _534;
  int16_t * _535;
  short int _536;
  int _537;
  int _538;
  int _539;
  int _540;
  int _541;
  int _542;
  int _543;
  int _544;
  int _545;
  unsigned char iftmp.0_546;
  unsigned char iftmp.0_547;
  unsigned char iftmp.0_548;
  unsigned int _551;
  unsigned int _552;
  unsigned int ivtmp_684;
  int patt_685;

  <bb 2>:
  _14 = width_13(D) + 5;
  _15 = (unsigned int) _14;
  _16 = _15 * 2;
  _17 = (int) _16;
  buf_20 = x264_malloc (_17);
  # DEBUG buf => buf_20
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src => src_24(D)
  # DEBUG dstc => dstc_23(D)
  # DEBUG dstv => dstv_22(D)
  # DEBUG dsth => dsth_21(D)
  if (height_25(D) > 0)
    goto <bb 3>;
  else
    goto <bb 42>;

  <bb 3>:
  pretmp_384 = (sizetype) stride_27(D);
  pretmp_386 = width_13(D) + 2;
  _379 = (unsigned int) stride_27(D);
  _378 = _379 * 2;
  pretmp_387 = (int) _378;
  _377 = (unsigned int) stride_27(D);
  _376 = _377 * 3;
  pretmp_388 = (int) _376;
  goto <bb 39>;

  <bb 4>:

  <bb 5>:
  # x_199 = PHI <-2(40), x_78(4)>
  # DEBUG x => NULL
  _29 = x_199 - pretmp_387;
  _30 = (sizetype) _29;
  _31 = src_185 + _30;
  _32 = *_31;
  _33 = (int) _32;
  _35 = x_199 + pretmp_388;
  _36 = (sizetype) _35;
  _37 = src_185 + _36;
  _38 = *_37;
  _39 = (int) _38;
  _40 = _33 + _39;
  _41 = x_199 - stride_27(D);
  _42 = (sizetype) _41;
  _43 = src_185 + _42;
  _44 = *_43;
  _45 = (int) _44;
  _47 = x_199 + pretmp_387;
  _48 = (sizetype) _47;
  _49 = src_185 + _48;
  _50 = *_49;
  _51 = (int) _50;
  _52 = _45 + _51;
  _53 = _52 * -5;
  _54 = _40 + _53;
  _55 = (sizetype) x_199;
  _56 = src_185 + _55;
  _57 = *_56;
  _58 = (int) _57;
  _59 = stride_27(D) + x_199;
  _60 = (sizetype) _59;
  _61 = src_185 + _60;
  _62 = *_61;
  _63 = (int) _62;
  _64 = _58 + _63;
  _65 = _64 * 20;
  v_66 = _54 + _65;
  # DEBUG v => NULL
  _67 = dstv_191 + _55;
  _68 = v_66 + 16;
  _69 = _68 >> 5;
  # DEBUG x => NULL
  _157 = _69 & -256;
  _120 = -_69;
  _70 = _120 >> 31;
  iftmp.0_167 = (unsigned char) _70;
  iftmp.0_168 = (unsigned char) _69;
  iftmp.0_169 = _157 != 0 ? iftmp.0_167 : iftmp.0_168;
  # DEBUG x => NULL
  *_67 = iftmp.0_169;
  _73 = _55 + 2;
  _74 = _73 * 2;
  _75 = buf_20 + _74;
  _76 = (short int) v_66;
  *_75 = _76;
  x_78 = x_199 + 1;
  # DEBUG x => x_78
  # DEBUG x => x_78
  if (x_78 <= pretmp_386)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:

  <bb 7>:
  # DEBUG x => 0
  if (width_13(D) > 0)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  dsth_161 = dsth_192 + pretmp_384;
  # DEBUG dsth => dsth_161
  dstv_162 = dstv_191 + pretmp_384;
  # DEBUG dstv => dstv_162
  dstc_163 = dstc_190 + pretmp_384;
  # DEBUG dstc => dstc_163
  src_164 = src_185 + pretmp_384;
  # DEBUG src => src_164
  y_165 = y_202 + 1;
  # DEBUG y => y_165
  # DEBUG y => y_165
  # DEBUG src => src_164
  # DEBUG dstc => dstc_163
  # DEBUG dstv => dstv_162
  # DEBUG dsth => dsth_161
  if (height_25(D) > y_165)
    goto <bb 38>;
  else
    goto <bb 41>;

  <bb 9>:
  _430 = (unsigned int) width_13(D);
  _431 = _430 > 15;
  _432 = (unsigned int) width_13(D);
  _433 = (sizetype) _432;
  _434 = _433 + 1;
  _435 = _434 * 2;
  _436 = buf_20 + _435;
  _437 = dstc_190 >= _436;
  _438 = (unsigned int) width_13(D);
  _439 = (sizetype) _438;
  _440 = dstc_190 + _439;
  _441 = buf_20 >= _440;
  _442 = _437 | _441;
  _443 = _431 & _442;
  if (_443 != 0)
    goto <bb 10>;
  else
    goto <bb 18>;

  <bb 10>:
  niters.444_495 = (unsigned int) width_13(D);
  _497 = niters.444_495 + 4294967280;
  _498 = _497 >> 4;
  bnd.445_496 = _498 + 1;
  ratio_mult_vf.446_499 = bnd.445_496 << 4;
  _551 = (unsigned int) width_13(D);
  _552 = _551 + 4294967295;
  if (_552 <= 14)
    goto <bb 16>;
  else
    goto <bb 11>;

  <bb 11>:
  vectp_buf.449_560 = buf_20;
  vectp_buf.454_570 = buf_20 + 10;
  vectp_buf.460_584 = buf_20 + 2;
  vectp_buf.465_594 = buf_20 + 8;
  vect_cst_.471_608 = { -5, -5, -5, -5 };
  vectp_buf.474_617 = buf_20 + 4;
  vectp_buf.479_627 = buf_20 + 6;
  vect_cst_.485_641 = { 20, 20, 20, 20 };
  vect_cst_.488_650 = { 512, 512, 512, 512 };
  vect_cst_.491_659 = { -256, -256, -256, -256 };
  vect_cst_.495_672 = { 0, 0, 0, 0 };
  vectp_dstc.499_680 = dstc_190;

  <bb 12>:
  # x_200 = PHI <0(11), x_122(17)>
  # vectp_buf.448_561 = PHI <vectp_buf.449_560(11), vectp_buf.448_562(17)>
  # vectp_buf.453_571 = PHI <vectp_buf.454_570(11), vectp_buf.453_572(17)>
  # vectp_buf.459_585 = PHI <vectp_buf.460_584(11), vectp_buf.459_586(17)>
  # vectp_buf.464_595 = PHI <vectp_buf.465_594(11), vectp_buf.464_596(17)>
  # vectp_buf.473_618 = PHI <vectp_buf.474_617(11), vectp_buf.473_619(17)>
  # vectp_buf.478_628 = PHI <vectp_buf.479_627(11), vectp_buf.478_629(17)>
  # vectp_dstc.498_681 = PHI <vectp_dstc.499_680(11), vectp_dstc.498_682(17)>
  # ivtmp_121 = PHI <0(11), ivtmp_684(17)>
  # DEBUG x => NULL
  _79 = (sizetype) x_200;
  _80 = dstc_190 + _79;
  _81 = _79 * 2;
  _82 = buf_20 + _81;
  vect__83.450_563 = MEM[(int16_t *)vectp_buf.448_561];
  vectp_buf.448_564 = vectp_buf.448_561 + 16;
  vect__83.451_565 = MEM[(int16_t *)vectp_buf.448_564];
  _83 = *_82;
  vect__84.452_566 = [vec_unpack_lo_expr] vect__83.450_563;
  vect__84.452_567 = [vec_unpack_hi_expr] vect__83.450_563;
  vect__84.452_568 = [vec_unpack_lo_expr] vect__83.451_565;
  vect__84.452_569 = [vec_unpack_hi_expr] vect__83.451_565;
  _84 = (int) _83;
  _86 = _79 + 5;
  _87 = _86 * 2;
  _88 = buf_20 + _87;
  vect__89.455_573 = MEM[(int16_t *)vectp_buf.453_571];
  vectp_buf.453_574 = vectp_buf.453_571 + 16;
  vect__89.456_575 = MEM[(int16_t *)vectp_buf.453_574];
  _89 = *_88;
  vect__90.457_576 = [vec_unpack_lo_expr] vect__89.455_573;
  vect__90.457_577 = [vec_unpack_hi_expr] vect__89.455_573;
  vect__90.457_578 = [vec_unpack_lo_expr] vect__89.456_575;
  vect__90.457_579 = [vec_unpack_hi_expr] vect__89.456_575;
  _90 = (int) _89;
  vect__91.458_580 = vect__84.452_566 + vect__90.457_576;
  vect__91.458_581 = vect__84.452_567 + vect__90.457_577;
  vect__91.458_582 = vect__84.452_568 + vect__90.457_578;
  vect__91.458_583 = vect__84.452_569 + vect__90.457_579;
  _91 = _84 + _90;
  _92 = _79 + 1;
  _93 = _92 * 2;
  _94 = buf_20 + _93;
  vect__95.461_587 = MEM[(int16_t *)vectp_buf.459_585];
  vectp_buf.459_588 = vectp_buf.459_585 + 16;
  vect__95.462_589 = MEM[(int16_t *)vectp_buf.459_588];
  _95 = *_94;
  vect__96.463_590 = [vec_unpack_lo_expr] vect__95.461_587;
  vect__96.463_591 = [vec_unpack_hi_expr] vect__95.461_587;
  vect__96.463_592 = [vec_unpack_lo_expr] vect__95.462_589;
  vect__96.463_593 = [vec_unpack_hi_expr] vect__95.462_589;
  _96 = (int) _95;
  _97 = _79 + 4;
  _98 = _97 * 2;
  _99 = buf_20 + _98;
  vect__100.466_597 = MEM[(int16_t *)vectp_buf.464_595];
  vectp_buf.464_598 = vectp_buf.464_595 + 16;
  vect__100.467_599 = MEM[(int16_t *)vectp_buf.464_598];
  _100 = *_99;
  vect__101.468_600 = [vec_unpack_lo_expr] vect__100.466_597;
  vect__101.468_601 = [vec_unpack_hi_expr] vect__100.466_597;
  vect__101.468_602 = [vec_unpack_lo_expr] vect__100.467_599;
  vect__101.468_603 = [vec_unpack_hi_expr] vect__100.467_599;
  _101 = (int) _100;
  vect__102.469_604 = vect__96.463_590 + vect__101.468_600;
  vect__102.469_605 = vect__96.463_591 + vect__101.468_601;
  vect__102.469_606 = vect__96.463_592 + vect__101.468_602;
  vect__102.469_607 = vect__96.463_593 + vect__101.468_603;
  _102 = _96 + _101;
  vect__103.470_609 = vect__102.469_604 * vect_cst_.471_608;
  vect__103.470_610 = vect__102.469_605 * vect_cst_.471_608;
  vect__103.470_611 = vect__102.469_606 * vect_cst_.471_608;
  vect__103.470_612 = vect__102.469_607 * vect_cst_.471_608;
  _103 = _102 * -5;
  vect__104.472_613 = vect__91.458_580 + vect__103.470_609;
  vect__104.472_614 = vect__91.458_581 + vect__103.470_610;
  vect__104.472_615 = vect__91.458_582 + vect__103.470_611;
  vect__104.472_616 = vect__91.458_583 + vect__103.470_612;
  _104 = _91 + _103;
  _105 = _79 + 2;
  _106 = _105 * 2;
  _107 = buf_20 + _106;
  vect__108.475_620 = MEM[(int16_t *)vectp_buf.473_618];
  vectp_buf.473_621 = vectp_buf.473_618 + 16;
  vect__108.476_622 = MEM[(int16_t *)vectp_buf.473_621];
  _108 = *_107;
  vect__109.477_623 = [vec_unpack_lo_expr] vect__108.475_620;
  vect__109.477_624 = [vec_unpack_hi_expr] vect__108.475_620;
  vect__109.477_625 = [vec_unpack_lo_expr] vect__108.476_622;
  vect__109.477_626 = [vec_unpack_hi_expr] vect__108.476_622;
  _109 = (int) _108;
  _110 = _79 + 3;
  _111 = _110 * 2;
  _112 = buf_20 + _111;
  vect__113.480_630 = MEM[(int16_t *)vectp_buf.478_628];
  vectp_buf.478_631 = vectp_buf.478_628 + 16;
  vect__113.481_632 = MEM[(int16_t *)vectp_buf.478_631];
  _113 = *_112;
  vect__114.482_633 = [vec_unpack_lo_expr] vect__113.480_630;
  vect__114.482_634 = [vec_unpack_hi_expr] vect__113.480_630;
  vect__114.482_635 = [vec_unpack_lo_expr] vect__113.481_632;
  vect__114.482_636 = [vec_unpack_hi_expr] vect__113.481_632;
  _114 = (int) _113;
  vect__115.483_637 = vect__109.477_623 + vect__114.482_633;
  vect__115.483_638 = vect__109.477_624 + vect__114.482_634;
  vect__115.483_639 = vect__109.477_625 + vect__114.482_635;
  vect__115.483_640 = vect__109.477_626 + vect__114.482_636;
  _115 = _109 + _114;
  vect__116.484_642 = vect__115.483_637 * vect_cst_.485_641;
  vect__116.484_643 = vect__115.483_638 * vect_cst_.485_641;
  vect__116.484_644 = vect__115.483_639 * vect_cst_.485_641;
  vect__116.484_645 = vect__115.483_640 * vect_cst_.485_641;
  _116 = _115 * 20;
  vect__117.486_646 = vect__104.472_613 + vect__116.484_642;
  vect__117.486_647 = vect__104.472_614 + vect__116.484_643;
  vect__117.486_648 = vect__104.472_615 + vect__116.484_644;
  vect__117.486_649 = vect__104.472_616 + vect__116.484_645;
  _117 = _104 + _116;
  vect__118.487_651 = vect__117.486_646 + vect_cst_.488_650;
  vect__118.487_652 = vect__117.486_647 + vect_cst_.488_650;
  vect__118.487_653 = vect__117.486_648 + vect_cst_.488_650;
  vect__118.487_654 = vect__117.486_649 + vect_cst_.488_650;
  _118 = _117 + 512;
  vect__119.489_655 = vect__118.487_651 >> 10;
  vect__119.489_656 = vect__118.487_652 >> 10;
  vect__119.489_657 = vect__118.487_653 >> 10;
  vect__119.489_658 = vect__118.487_654 >> 10;
  _119 = _118 >> 10;
  # DEBUG x => NULL
  vect__170.490_660 = vect__119.489_655 & vect_cst_.491_659;
  vect__170.490_661 = vect__119.489_656 & vect_cst_.491_659;
  vect__170.490_662 = vect__119.489_657 & vect_cst_.491_659;
  vect__170.490_663 = vect__119.489_658 & vect_cst_.491_659;
  _170 = _119 & -256;
  vect__171.492_664 = -vect__119.489_655;
  vect__171.492_665 = -vect__119.489_656;
  vect__171.492_666 = -vect__119.489_657;
  vect__171.492_667 = -vect__119.489_658;
  _171 = -_119;
  vect__172.493_668 = vect__171.492_664 >> 31;
  vect__172.493_669 = vect__171.492_665 >> 31;
  vect__172.493_670 = vect__171.492_666 >> 31;
  vect__172.493_671 = vect__171.492_667 >> 31;
  _172 = _171 >> 31;
  iftmp.0_173 = (unsigned char) _172;
  iftmp.0_174 = (unsigned char) _119;
  vect_patt_428.494_673 = VEC_COND_EXPR <vect__170.490_660 != vect_cst_.495_672, vect__172.493_668, vect__119.489_655>;
  vect_patt_428.494_674 = VEC_COND_EXPR <vect__170.490_661 != vect_cst_.495_672, vect__172.493_669, vect__119.489_656>;
  vect_patt_428.494_675 = VEC_COND_EXPR <vect__170.490_662 != vect_cst_.495_672, vect__172.493_670, vect__119.489_657>;
  vect_patt_428.494_676 = VEC_COND_EXPR <vect__170.490_663 != vect_cst_.495_672, vect__172.493_671, vect__119.489_658>;
  vect_patt_429.497_677 = VEC_PACK_TRUNC_EXPR <vect_patt_428.494_673, vect_patt_428.494_674>;
  vect_patt_429.497_678 = VEC_PACK_TRUNC_EXPR <vect_patt_428.494_675, vect_patt_428.494_676>;
  vect_patt_429.496_679 = VEC_PACK_TRUNC_EXPR <vect_patt_429.497_677, vect_patt_429.497_678>;
  iftmp.0_175 = _170 != 0 ? iftmp.0_173 : iftmp.0_174;
  # DEBUG x => NULL
  MEM[(uint8_t *)vectp_dstc.498_681] = vect_patt_429.496_679;
  x_122 = x_200 + 1;
  # DEBUG x => x_122
  # DEBUG x => x_122
  vectp_buf.448_562 = vectp_buf.448_564 + 16;
  vectp_buf.453_572 = vectp_buf.453_574 + 16;
  vectp_buf.459_586 = vectp_buf.459_588 + 16;
  vectp_buf.464_596 = vectp_buf.464_598 + 16;
  vectp_buf.473_619 = vectp_buf.473_621 + 16;
  vectp_buf.478_629 = vectp_buf.478_631 + 16;
  vectp_dstc.498_682 = vectp_dstc.498_681 + 16;
  ivtmp_684 = ivtmp_121 + 1;
  if (ivtmp_684 < bnd.445_496)
    goto <bb 17>;
  else
    goto <bb 15>;

  <bb 13>:
  # x_501 = PHI <x_550(14), x_553(16)>
  # DEBUG x => NULL
  _503 = (sizetype) x_501;
  _504 = dstc_190 + _503;
  _505 = _503 * 2;
  _506 = buf_20 + _505;
  _507 = *_506;
  _508 = (int) _507;
  _509 = _503 + 5;
  _510 = _509 * 2;
  _511 = buf_20 + _510;
  _512 = *_511;
  _513 = (int) _512;
  _514 = _508 + _513;
  _515 = _503 + 1;
  _516 = _515 * 2;
  _517 = buf_20 + _516;
  _518 = *_517;
  _519 = (int) _518;
  _520 = _503 + 4;
  _521 = _520 * 2;
  _522 = buf_20 + _521;
  _523 = *_522;
  _524 = (int) _523;
  _525 = _519 + _524;
  _526 = _525 * -5;
  _527 = _514 + _526;
  _528 = _503 + 2;
  _529 = _528 * 2;
  _530 = buf_20 + _529;
  _531 = *_530;
  _532 = (int) _531;
  _533 = _503 + 3;
  _534 = _533 * 2;
  _535 = buf_20 + _534;
  _536 = *_535;
  _537 = (int) _536;
  _538 = _532 + _537;
  _539 = _538 * 20;
  _540 = _527 + _539;
  _541 = _540 + 512;
  _542 = _541 >> 10;
  # DEBUG x => NULL
  _543 = _542 & -256;
  _544 = -_542;
  _545 = _544 >> 31;
  iftmp.0_546 = (unsigned char) _545;
  iftmp.0_547 = (unsigned char) _542;
  iftmp.0_548 = _543 != 0 ? iftmp.0_546 : iftmp.0_547;
  # DEBUG x => NULL
  *_504 = iftmp.0_548;
  x_550 = x_501 + 1;
  # DEBUG x => x_550
  # DEBUG x => x_550
  if (width_13(D) > x_550)
    goto <bb 14>;
  else
    goto <bb 21>;

  <bb 14>:
  goto <bb 13>;

  <bb 15>:
  # x_554 = PHI <x_122(12)>
  tmp.447_559 = (int) ratio_mult_vf.446_499;
  if (niters.444_495 == ratio_mult_vf.446_499)
    goto <bb 22>;
  else
    goto <bb 16>;

  <bb 16>:
  # x_553 = PHI <tmp.447_559(15), 0(10)>
  goto <bb 13>;

  <bb 17>:
  goto <bb 12>;

  <bb 18>:

  <bb 19>:
  # x_444 = PHI <0(18), x_493(20)>
  # DEBUG x => NULL
  _446 = (sizetype) x_444;
  _447 = dstc_190 + _446;
  _448 = _446 * 2;
  _449 = buf_20 + _448;
  _450 = *_449;
  _451 = (int) _450;
  _452 = _446 + 5;
  _453 = _452 * 2;
  _454 = buf_20 + _453;
  _455 = *_454;
  _456 = (int) _455;
  _457 = _451 + _456;
  _458 = _446 + 1;
  _459 = _458 * 2;
  _460 = buf_20 + _459;
  _461 = *_460;
  _462 = (int) _461;
  _463 = _446 + 4;
  _464 = _463 * 2;
  _465 = buf_20 + _464;
  _466 = *_465;
  _467 = (int) _466;
  _468 = _462 + _467;
  _469 = _468 * -5;
  _470 = _457 + _469;
  _471 = _446 + 2;
  _472 = _471 * 2;
  _473 = buf_20 + _472;
  _474 = *_473;
  _475 = (int) _474;
  _476 = _446 + 3;
  _477 = _476 * 2;
  _478 = buf_20 + _477;
  _479 = *_478;
  _480 = (int) _479;
  _481 = _475 + _480;
  _482 = _481 * 20;
  _483 = _470 + _482;
  _484 = _483 + 512;
  _485 = _484 >> 10;
  # DEBUG x => NULL
  _486 = _485 & -256;
  _487 = -_485;
  _488 = _487 >> 31;
  iftmp.0_489 = (unsigned char) _488;
  iftmp.0_490 = (unsigned char) _485;
  iftmp.0_491 = _486 != 0 ? iftmp.0_489 : iftmp.0_490;
  # DEBUG x => NULL
  *_447 = iftmp.0_491;
  x_493 = x_444 + 1;
  # DEBUG x => x_493
  # DEBUG x => x_493
  if (width_13(D) > x_493)
    goto <bb 20>;
  else
    goto <bb 23>;

  <bb 20>:
  goto <bb 19>;

  <bb 21>:

  <bb 22>:

  <bb 23>:
  _374 = (unsigned int) width_13(D);
  _373 = _374 > 15;
  _372 = dsth_192 + 16;
  _371 = src_185 + 18446744073709551614;
  _370 = _371 >= _372;
  _369 = src_185 + 19;
  _368 = dsth_192 >= _369;
  _367 = _368 | _370;
  _366 = _367 & _373;
  if (_366 != 0)
    goto <bb 24>;
  else
    goto <bb 35>;

  <bb 24>:
  niters.388_320 = (unsigned int) width_13(D);
  _318 = niters.388_320 + 4294967280;
  _317 = _318 >> 4;
  bnd.389_319 = _317 + 1;
  ratio_mult_vf.390_316 = bnd.389_319 << 4;
  _271 = (unsigned int) width_13(D);
  _270 = _271 + 4294967295;
  if (_270 <= 14)
    goto <bb 30>;
  else
    goto <bb 25>;

  <bb 25>:
  vectp_src.393_262 = src_185 + 18446744073709551614;
  vectp_src.398_252 = src_185 + 3;
  vectp_src.404_238 = src_185 + 18446744073709551615;
  vectp_src.409_228 = src_185 + 2;
  vect_cst_.415_214 = { -5, -5, -5, -5 };
  vectp_src.418_196 = src_185;
  vectp_src.423_46 = src_185 + 1;
  vect_cst_.429_412 = { 20, 20, 20, 20 };
  vect_cst_.432_403 = { 16, 16, 16, 16 };
  vect_cst_.435_394 = { -256, -256, -256, -256 };
  vect_cst_.439_415 = { 0, 0, 0, 0 };
  vectp_dsth.443_423 = dsth_192;

  <bb 26>:
  # x_201 = PHI <0(25), x_159(34)>
  # vectp_src.392_261 = PHI <vectp_src.393_262(25), vectp_src.392_260(34)>
  # vectp_src.397_251 = PHI <vectp_src.398_252(25), vectp_src.397_250(34)>
  # vectp_src.403_237 = PHI <vectp_src.404_238(25), vectp_src.403_236(34)>
  # vectp_src.408_227 = PHI <vectp_src.409_228(25), vectp_src.408_226(34)>
  # vectp_src.417_195 = PHI <vectp_src.418_196(25), vectp_src.417_194(34)>
  # vectp_src.422_26 = PHI <vectp_src.423_46(25), vectp_src.422_12(34)>
  # vectp_dsth.442_424 = PHI <vectp_dsth.443_423(25), vectp_dsth.442_425(34)>
  # ivtmp_158 = PHI <0(25), ivtmp_427(34)>
  # DEBUG x => NULL
  _123 = (sizetype) x_201;
  _124 = dsth_192 + _123;
  _125 = _123 + 18446744073709551614;
  _126 = src_185 + _125;
  vect__127.394_259 = MEM[(uint8_t *)vectp_src.392_261];
  _127 = *_126;
  vect__128.396_258 = [vec_unpack_lo_expr] vect__127.394_259;
  vect__128.396_257 = [vec_unpack_hi_expr] vect__127.394_259;
  vect__128.395_256 = [vec_unpack_lo_expr] vect__128.396_258;
  vect__128.395_255 = [vec_unpack_hi_expr] vect__128.396_258;
  vect__128.395_254 = [vec_unpack_lo_expr] vect__128.396_257;
  vect__128.395_253 = [vec_unpack_hi_expr] vect__128.396_257;
  _128 = (int) _127;
  _129 = _123 + 3;
  _130 = src_185 + _129;
  vect__131.399_249 = MEM[(uint8_t *)vectp_src.397_251];
  _131 = *_130;
  vect__132.401_248 = [vec_unpack_lo_expr] vect__131.399_249;
  vect__132.401_247 = [vec_unpack_hi_expr] vect__131.399_249;
  vect__132.400_246 = [vec_unpack_lo_expr] vect__132.401_248;
  vect__132.400_245 = [vec_unpack_hi_expr] vect__132.401_248;
  vect__132.400_244 = [vec_unpack_lo_expr] vect__132.401_247;
  vect__132.400_243 = [vec_unpack_hi_expr] vect__132.401_247;
  _132 = (int) _131;
  vect__133.402_242 = vect__128.395_256 + vect__132.400_246;
  vect__133.402_241 = vect__128.395_255 + vect__132.400_245;
  vect__133.402_240 = vect__128.395_254 + vect__132.400_244;
  vect__133.402_239 = vect__128.395_253 + vect__132.400_243;
  _133 = _128 + _132;
  _134 = _123 + 18446744073709551615;
  _135 = src_185 + _134;
  vect__136.405_235 = MEM[(uint8_t *)vectp_src.403_237];
  _136 = *_135;
  vect__137.407_234 = [vec_unpack_lo_expr] vect__136.405_235;
  vect__137.407_233 = [vec_unpack_hi_expr] vect__136.405_235;
  vect__137.406_232 = [vec_unpack_lo_expr] vect__137.407_234;
  vect__137.406_231 = [vec_unpack_hi_expr] vect__137.407_234;
  vect__137.406_230 = [vec_unpack_lo_expr] vect__137.407_233;
  vect__137.406_229 = [vec_unpack_hi_expr] vect__137.407_233;
  _137 = (int) _136;
  _138 = _123 + 2;
  _139 = src_185 + _138;
  vect__140.410_225 = MEM[(uint8_t *)vectp_src.408_227];
  _140 = *_139;
  vect__141.412_224 = [vec_unpack_lo_expr] vect__140.410_225;
  vect__141.412_223 = [vec_unpack_hi_expr] vect__140.410_225;
  vect__141.411_222 = [vec_unpack_lo_expr] vect__141.412_224;
  vect__141.411_221 = [vec_unpack_hi_expr] vect__141.412_224;
  vect__141.411_220 = [vec_unpack_lo_expr] vect__141.412_223;
  vect__141.411_219 = [vec_unpack_hi_expr] vect__141.412_223;
  _141 = (int) _140;
  vect__142.413_218 = vect__137.406_232 + vect__141.411_222;
  vect__142.413_217 = vect__137.406_231 + vect__141.411_221;
  vect__142.413_216 = vect__137.406_230 + vect__141.411_220;
  vect__142.413_215 = vect__137.406_229 + vect__141.411_219;
  _142 = _137 + _141;
  vect__143.414_213 = vect__142.413_218 * vect_cst_.415_214;
  vect__143.414_212 = vect__142.413_217 * vect_cst_.415_214;
  vect__143.414_211 = vect__142.413_216 * vect_cst_.415_214;
  vect__143.414_210 = vect__142.413_215 * vect_cst_.415_214;
  _143 = _142 * -5;
  vect__144.416_209 = vect__133.402_242 + vect__143.414_213;
  vect__144.416_208 = vect__133.402_241 + vect__143.414_212;
  vect__144.416_198 = vect__133.402_240 + vect__143.414_211;
  vect__144.416_197 = vect__133.402_239 + vect__143.414_210;
  _144 = _133 + _143;
  _145 = src_185 + _123;
  vect__146.419_193 = MEM[(uint8_t *)vectp_src.417_195];
  _146 = *_145;
  vect__147.421_189 = [vec_unpack_lo_expr] vect__146.419_193;
  vect__147.421_188 = [vec_unpack_hi_expr] vect__146.419_193;
  vect__147.420_187 = [vec_unpack_lo_expr] vect__147.421_189;
  vect__147.420_183 = [vec_unpack_hi_expr] vect__147.421_189;
  vect__147.420_85 = [vec_unpack_lo_expr] vect__147.421_188;
  vect__147.420_72 = [vec_unpack_hi_expr] vect__147.421_188;
  _147 = (int) _146;
  _148 = _123 + 1;
  _149 = src_185 + _148;
  vect__150.424_11 = MEM[(uint8_t *)vectp_src.422_26];
  _150 = *_149;
  vect__151.426_10 = [vec_unpack_lo_expr] vect__150.424_11;
  vect__151.426_9 = [vec_unpack_hi_expr] vect__150.424_11;
  vect__151.425_8 = [vec_unpack_lo_expr] vect__151.426_10;
  vect__151.425_7 = [vec_unpack_hi_expr] vect__151.426_10;
  vect__151.425_6 = [vec_unpack_lo_expr] vect__151.426_9;
  vect__151.425_5 = [vec_unpack_hi_expr] vect__151.426_9;
  _151 = (int) _150;
  vect__152.427_4 = vect__147.420_187 + vect__151.425_8;
  vect__152.427_3 = vect__147.420_183 + vect__151.425_7;
  vect__152.427_2 = vect__147.420_85 + vect__151.425_6;
  vect__152.427_1 = vect__147.420_72 + vect__151.425_5;
  _152 = _147 + _151;
  vect__153.428_411 = vect__152.427_4 * vect_cst_.429_412;
  vect__153.428_410 = vect__152.427_3 * vect_cst_.429_412;
  vect__153.428_409 = vect__152.427_2 * vect_cst_.429_412;
  vect__153.428_408 = vect__152.427_1 * vect_cst_.429_412;
  _153 = _152 * 20;
  vect__154.430_407 = vect__144.416_209 + vect__153.428_411;
  vect__154.430_406 = vect__144.416_208 + vect__153.428_410;
  vect__154.430_405 = vect__144.416_198 + vect__153.428_409;
  vect__154.430_404 = vect__144.416_197 + vect__153.428_408;
  _154 = _144 + _153;
  vect__155.431_402 = vect__154.430_407 + vect_cst_.432_403;
  vect__155.431_401 = vect__154.430_406 + vect_cst_.432_403;
  vect__155.431_400 = vect__154.430_405 + vect_cst_.432_403;
  vect__155.431_399 = vect__154.430_404 + vect_cst_.432_403;
  _155 = _154 + 16;
  vect__156.433_398 = vect__155.431_402 >> 5;
  vect__156.433_397 = vect__155.431_401 >> 5;
  vect__156.433_396 = vect__155.431_400 >> 5;
  vect__156.433_395 = vect__155.431_399 >> 5;
  _156 = _155 >> 5;
  # DEBUG x => NULL
  vect__176.434_393 = vect__156.433_398 & vect_cst_.435_394;
  vect__176.434_392 = vect__156.433_397 & vect_cst_.435_394;
  vect__176.434_391 = vect__156.433_396 & vect_cst_.435_394;
  vect__176.434_390 = vect__156.433_395 & vect_cst_.435_394;
  _176 = _156 & -256;
  vect__177.436_389 = -vect__156.433_398;
  vect__177.436_385 = -vect__156.433_397;
  vect__177.436_186 = -vect__156.433_396;
  vect__177.436_28 = -vect__156.433_395;
  _177 = -_156;
  vect__178.437_34 = vect__177.436_389 >> 31;
  vect__178.437_160 = vect__177.436_385 >> 31;
  vect__178.437_413 = vect__177.436_186 >> 31;
  vect__178.437_414 = vect__177.436_28 >> 31;
  _178 = _177 >> 31;
  iftmp.0_179 = (unsigned char) _178;
  iftmp.0_180 = (unsigned char) _156;
  vect_patt_206.438_416 = VEC_COND_EXPR <vect__176.434_393 != vect_cst_.439_415, vect__178.437_34, vect__156.433_398>;
  vect_patt_206.438_417 = VEC_COND_EXPR <vect__176.434_392 != vect_cst_.439_415, vect__178.437_160, vect__156.433_397>;
  vect_patt_206.438_418 = VEC_COND_EXPR <vect__176.434_391 != vect_cst_.439_415, vect__178.437_413, vect__156.433_396>;
  vect_patt_206.438_419 = VEC_COND_EXPR <vect__176.434_390 != vect_cst_.439_415, vect__178.437_414, vect__156.433_395>;
  vect_patt_375.441_420 = VEC_PACK_TRUNC_EXPR <vect_patt_206.438_416, vect_patt_206.438_417>;
  vect_patt_375.441_421 = VEC_PACK_TRUNC_EXPR <vect_patt_206.438_418, vect_patt_206.438_419>;
  vect_patt_375.440_422 = VEC_PACK_TRUNC_EXPR <vect_patt_375.441_420, vect_patt_375.441_421>;
  iftmp.0_181 = _176 != 0 ? iftmp.0_179 : iftmp.0_180;
  # DEBUG x => NULL
  MEM[(uint8_t *)vectp_dsth.442_424] = vect_patt_375.440_422;
  x_159 = x_201 + 1;
  # DEBUG x => x_159
  # DEBUG x => x_159
  vectp_src.392_260 = vectp_src.392_261 + 16;
  vectp_src.397_250 = vectp_src.397_251 + 16;
  vectp_src.403_236 = vectp_src.403_237 + 16;
  vectp_src.408_226 = vectp_src.408_227 + 16;
  vectp_src.417_194 = vectp_src.417_195 + 16;
  vectp_src.422_12 = vectp_src.422_26 + 16;
  vectp_dsth.442_425 = vectp_dsth.442_424 + 16;
  ivtmp_427 = ivtmp_158 + 1;
  if (ivtmp_427 < bnd.389_319)
    goto <bb 34>;
  else
    goto <bb 29>;

  <bb 27>:
  # x_315 = PHI <x_272(28), x_269(30)>
  # DEBUG x => NULL
  _313 = (sizetype) x_315;
  _312 = dsth_192 + _313;
  _311 = _313 + 18446744073709551614;
  _310 = src_185 + _311;
  _309 = *_310;
  _308 = (int) _309;
  _307 = _313 + 3;
  _306 = src_185 + _307;
  _305 = *_306;
  _304 = (int) _305;
  _303 = _308 + _304;
  _302 = _313 + 18446744073709551615;
  _301 = src_185 + _302;
  _300 = *_301;
  _299 = (int) _300;
  _298 = _313 + 2;
  _297 = src_185 + _298;
  _296 = *_297;
  _295 = (int) _296;
  _294 = _299 + _295;
  _293 = _294 * -5;
  _292 = _303 + _293;
  _291 = src_185 + _313;
  _290 = *_291;
  _289 = (int) _290;
  _288 = _313 + 1;
  _287 = src_185 + _288;
  _286 = *_287;
  _285 = (int) _286;
  _284 = _289 + _285;
  _283 = _284 * 20;
  _282 = _292 + _283;
  _281 = _282 + 16;
  _280 = _281 >> 5;
  # DEBUG x => NULL
  _279 = _280 & -256;
  _278 = -_280;
  _277 = _278 >> 31;
  iftmp.0_276 = (unsigned char) _277;
  iftmp.0_275 = (unsigned char) _280;
  iftmp.0_274 = _279 != 0 ? iftmp.0_276 : iftmp.0_275;
  # DEBUG x => NULL
  *_312 = iftmp.0_274;
  x_272 = x_315 + 1;
  # DEBUG x => x_272
  # DEBUG x => x_272
  if (width_13(D) > x_272)
    goto <bb 28>;
  else
    goto <bb 31>;

  <bb 28>:
  goto <bb 27>;

  <bb 29>:
  # x_268 = PHI <x_159(26)>
  tmp.391_263 = (int) ratio_mult_vf.390_316;
  if (ratio_mult_vf.390_316 == niters.388_320)
    goto <bb 32>;
  else
    goto <bb 30>;

  <bb 30>:
  # x_269 = PHI <tmp.391_263(29), 0(24)>
  goto <bb 27>;

  <bb 31>:

  <bb 32>:

  <bb 33>:
  goto <bb 8>;

  <bb 34>:
  goto <bb 26>;

  <bb 35>:

  <bb 36>:
  # x_365 = PHI <0(35), x_322(37)>
  # DEBUG x => NULL
  _363 = (sizetype) x_365;
  _362 = dsth_192 + _363;
  _361 = _363 + 18446744073709551614;
  _360 = src_185 + _361;
  _359 = *_360;
  _358 = (int) _359;
  _357 = _363 + 3;
  _356 = src_185 + _357;
  _355 = *_356;
  _354 = (int) _355;
  _353 = _358 + _354;
  _352 = _363 + 18446744073709551615;
  _351 = src_185 + _352;
  _350 = *_351;
  _349 = (int) _350;
  _348 = _363 + 2;
  _347 = src_185 + _348;
  _346 = *_347;
  _345 = (int) _346;
  _344 = _349 + _345;
  _343 = _344 * -5;
  _342 = _353 + _343;
  _341 = src_185 + _363;
  _340 = *_341;
  _339 = (int) _340;
  _338 = _363 + 1;
  _337 = src_185 + _338;
  _336 = *_337;
  _335 = (int) _336;
  _334 = _339 + _335;
  _333 = _334 * 20;
  _332 = _342 + _333;
  _331 = _332 + 16;
  _330 = _331 >> 5;
  # DEBUG x => NULL
  _329 = _330 & -256;
  _328 = -_330;
  _327 = _328 >> 31;
  iftmp.0_326 = (unsigned char) _327;
  iftmp.0_325 = (unsigned char) _330;
  iftmp.0_324 = _329 != 0 ? iftmp.0_326 : iftmp.0_325;
  # DEBUG x => NULL
  *_362 = iftmp.0_324;
  x_322 = x_365 + 1;
  # DEBUG x => x_322
  # DEBUG x => x_322
  if (width_13(D) > x_322)
    goto <bb 37>;
  else
    goto <bb 33>;

  <bb 37>:
  goto <bb 36>;

  <bb 38>:

  <bb 39>:
  # dsth_192 = PHI <dsth_21(D)(3), dsth_161(38)>
  # dstv_191 = PHI <dstv_22(D)(3), dstv_162(38)>
  # dstc_190 = PHI <dstc_23(D)(3), dstc_163(38)>
  # src_185 = PHI <src_24(D)(3), src_164(38)>
  # y_202 = PHI <0(3), y_165(38)>
  # DEBUG y => y_202
  # DEBUG src => src_185
  # DEBUG dstc => dstc_190
  # DEBUG dstv => dstv_191
  # DEBUG dsth => dsth_192
  # DEBUG x => -2
  if (pretmp_386 >= -2)
    goto <bb 40>;
  else
    goto <bb 7>;

  <bb 40>:
  goto <bb 5>;

  <bb 41>:

  <bb 42>:
  x264_free (buf_20);
  return;

}



;; Function pixel_avg_16x8 (pixel_avg_16x8, funcdef_no=119, decl_uid=5821, cgraph_uid=119, symbol_order=162)


Analyzing loop at common/mc.c:55
common/mc.c:55:5: note: ===== analyze_loop_nest =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/mc.c:55:5: note: Considering outer-loop vectorization.
split exit edge.
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/mc.c:55:5: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_355
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {{0B, +, pretmp_315}_3, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_354
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {{0B, +, pretmp_369}_3, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_312
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {{0B, +, pretmp_316}_3, +, 1}_4
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:55:5: note: analyze in outer-loop: *pix2_355
common/mc.c:55:5: note: failed: evolution of base is not affine.
common/mc.c:55:5: note: bad data references.

Analyzing loop at common/mc.c:57
common/mc.c:57:9: note: ===== analyze_loop_nest =====
common/mc.c:57:9: note: === vect_analyze_loop_form ===
common/mc.c:57:9: note: === get_loop_niters ===
common/mc.c:57:9: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_355
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_355
	Access function 0: {0B, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_354
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_354
	Access function 0: {0B, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_312
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_312
	Access function 0: {0B, +, 1}_4
common/mc.c:57:9: note: got vectype for stmt: _22 = *_21;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: _26 = *_25;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: *_19 = _31;
vector(16) unsigned char
common/mc.c:57:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:57:9: note: Analyze phi: x_313 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Access function of PHI: {0, +, 1}_4
common/mc.c:57:9: note: step: 1,  init: 0
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: Analyze phi: .MEM_350 = PHI <.MEM_41(4), .MEM_351(9)>

common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_366(4), 16(9)>

common/mc.c:57:9: note: Access function of PHI: {16, +, 4294967295}_4
common/mc.c:57:9: note: step: 4294967295,  init: 16
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: === vect_pattern_recog ===
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:57:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:57:9: note: init: phi relevant? x_313 = PHI <x_32(4), 0(9)>
common/mc.c:57:9: note: init: phi relevant? .MEM_350 = PHI <.MEM_41(4), .MEM_351(9)>
common/mc.c:57:9: note: init: phi relevant? ivtmp_10 = PHI <ivtmp_366(4), 16(9)>
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_313
common/mc.c:57:9: note: init: stmt relevant? _17 = (sizetype) x_313;
common/mc.c:57:9: note: init: stmt relevant? _19 = pix1_312 + _17;
common/mc.c:57:9: note: init: stmt relevant? _21 = pix2_355 + _17;
common/mc.c:57:9: note: init: stmt relevant? _22 = *_21;
common/mc.c:57:9: note: init: stmt relevant? _23 = (int) _22;
common/mc.c:57:9: note: init: stmt relevant? _25 = pix3_354 + _17;
common/mc.c:57:9: note: init: stmt relevant? _26 = *_25;
common/mc.c:57:9: note: init: stmt relevant? _27 = (int) _26;
common/mc.c:57:9: note: init: stmt relevant? _28 = _23 + _27;
common/mc.c:57:9: note: init: stmt relevant? _29 = _28 + 1;
common/mc.c:57:9: note: init: stmt relevant? _30 = _29 >> 1;
common/mc.c:57:9: note: init: stmt relevant? _31 = (unsigned char) _30;
common/mc.c:57:9: note: init: stmt relevant? *_19 = _31;
common/mc.c:57:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: init: stmt relevant? x_32 = x_313 + 1;
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? ivtmp_366 = ivtmp_10 - 1;
common/mc.c:57:9: note: init: stmt relevant? if (ivtmp_366 != 0)
common/mc.c:57:9: note: worklist: examine stmt: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _26 = *_25;
common/mc.c:57:9: note: worklist: examine stmt: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _22 = *_21;
common/mc.c:57:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _26 = *_25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _22 = *_21;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: _26 = *_25;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_19 = _31;
  stmt_b: *_19 = _31;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_21 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_21 and *_19
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_25 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_25 and *_19
common/mc.c:57:9: note: === vect_determine_vectorization_factor ===
common/mc.c:57:9: note: ==> examining phi: x_313 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: ==> examining phi: .MEM_350 = PHI <.MEM_41(4), .MEM_351(9)>

common/mc.c:57:9: note: ==> examining phi: ivtmp_10 = PHI <ivtmp_366(4), 16(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_313

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_313;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_312 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_355 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_354 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;

common/mc.c:57:9: note: get vectype for scalar type:  uint8_t
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: x_32 = x_313 + 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: ivtmp_366 = ivtmp_10 - 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_366 != 0)

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: vectorization factor = 16
common/mc.c:57:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_21
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_25
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_19
common/mc.c:57:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:57:9: note: improved number of alias checks from 2 to 2
common/mc.c:57:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: vect_can_advance_ivs_p:
common/mc.c:57:9: note: Analyze phi: x_313 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Analyze phi: .MEM_350 = PHI <.MEM_41(4), .MEM_351(9)>

common/mc.c:57:9: note: virtual phi. skip.
common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_366(4), 16(9)>

common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: === vect_analyze_slp ===
common/mc.c:57:9: note: === vect_make_slp_decision ===
common/mc.c:57:9: note: === vect_detect_hybrid_slp ===
common/mc.c:57:9: note: === vect_analyze_loop_operations ===
common/mc.c:57:9: note: examining phi: x_313 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: examining phi: .MEM_350 = PHI <.MEM_41(4), .MEM_351(9)>

common/mc.c:57:9: note: examining phi: ivtmp_10 = PHI <ivtmp_366(4), 16(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_313
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_313;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_312 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_355 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_354 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: === vectorizable_shift ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: x_32 = x_313 + 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: ivtmp_366 = ivtmp_10 - 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_366 != 0)
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: vectorization_factor = 16, niters = 16
common/mc.c:57:9: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
common/mc.c:57:9: note: Cost model analysis: 
  Vector inside of loop cost: 33
  Vector prologue cost: 7
  Vector epilogue cost: 0
  Scalar iteration cost: 9
  Scalar outside cost: 1
  Vector outside cost: 7
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
common/mc.c:57:9: note:   Runtime profitability threshold = 15
common/mc.c:57:9: note:   Static estimate profitability threshold = 15
common/mc.c:57:9: note: loop vectorized
common/mc.c:57:9: note: === vec_transform_loop ===
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:57:9: note: create runtime check for data references *_19 and *_21
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:57:9: note: create runtime check for data references *_19 and *_25
common/mc.c:57:9: note: created 2 versioning for alias checks.
gimple_simplified to _359 = pix2_355 >= _360;
gimple_simplified to _357 = pix1_312 >= _358;
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _356 = _357 | _359;
Applying pattern match.pd:318, generic-match.c:18
gimple_simplified to _342 = pix1_312 >= _343;
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _341 = _342 | _344;
Applying pattern match.pd:318, generic-match.c:18
gimple_simplified to _340 = _341 & _356;
common/mc.c:57:9: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
creating PHI node in block #6 for .MEM_41
Registering new PHI nodes in block #9
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Registering new PHI nodes in block #5
Updating SSA information for statement # DEBUG x => x_313
Updating SSA information for statement _17 = (sizetype) x_313;
Updating SSA information for statement _19 = pix1_312 + _17;
Updating SSA information for statement _21 = pix2_355 + _17;
Updating SSA information for statement _22 = *_21;
Updating SSA information for statement _23 = (int) _22;
Updating SSA information for statement _25 = pix3_354 + _17;
Updating SSA information for statement _26 = *_25;
Updating SSA information for statement _27 = (int) _26;
Updating SSA information for statement _28 = _23 + _27;
Updating SSA information for statement _29 = _28 + 1;
Updating SSA information for statement _30 = _29 >> 1;
Updating SSA information for statement _31 = (unsigned char) _30;
Updating SSA information for statement *_19 = _31;
Updating SSA information for statement x_32 = x_313 + 1;
Updating SSA information for statement # DEBUG x => x_32
Updating SSA information for statement # DEBUG x => x_32
Updating SSA information for statement ivtmp_366 = ivtmp_10 - 1;
Updating SSA information for statement if (ivtmp_366 != 0)
Registering new PHI nodes in block #4
Registering new PHI nodes in block #19
Registering new PHI nodes in block #18
Registering new PHI nodes in block #14
Updating SSA information for statement # DEBUG x => x_313
Updating SSA information for statement _336 = (sizetype) x_313;
Updating SSA information for statement _335 = pix1_312 + _17;
Updating SSA information for statement _334 = pix2_355 + _17;
Updating SSA information for statement _333 = *_21;
Updating SSA information for statement _332 = (int) _22;
Updating SSA information for statement _331 = pix3_354 + _17;
Updating SSA information for statement _330 = *_25;
Updating SSA information for statement _329 = (int) _26;
Updating SSA information for statement _328 = _23 + _27;
Updating SSA information for statement _327 = _28 + 1;
Updating SSA information for statement _326 = _29 >> 1;
Updating SSA information for statement _325 = (unsigned char) _30;
Updating SSA information for statement *_19 = _31;
Updating SSA information for statement x_323 = x_313 + 1;
Updating SSA information for statement # DEBUG x => x_32
Updating SSA information for statement # DEBUG x => x_32
Updating SSA information for statement ivtmp_322 = ivtmp_10 - 1;
Updating SSA information for statement if (ivtmp_366 != 0)
Registering new PHI nodes in block #15
Registering new PHI nodes in block #6
Registering new PHI nodes in block #8
Registering new PHI nodes in block #13

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_321 -> { .MEM_41 }
ivtmp_322 -> { ivtmp_366 }
x_323 -> { x_32 }
.MEM_324 -> { .MEM_41 }
_325 -> { _31 }
_326 -> { _30 }
_327 -> { _29 }
_328 -> { _28 }
_329 -> { _27 }
_330 -> { _26 }
_331 -> { _25 }
_332 -> { _23 }
_333 -> { _22 }
_334 -> { _21 }
_335 -> { _19 }
_336 -> { _17 }
ivtmp_337 -> { ivtmp_10 }
.MEM_338 -> { .MEM_350 }
x_339 -> { x_313 }
Incremental SSA update started at block: 9
Number of blocks in CFG: 20
Number of blocks to update: 11 ( 55%)
Affected blocks: 4 5 6 8 9 13 14 15 17 18 19


common/mc.c:57:9: note: ------>vectorizing phi: x_313 = PHI <x_32(4), 0(20)>

common/mc.c:57:9: note: ------>vectorizing phi: .MEM_350 = PHI <.MEM_41(4), .MEM_351(20)>

common/mc.c:57:9: note: ------>vectorizing phi: ivtmp_10 = PHI <ivtmp_366(4), 16(20)>

common/mc.c:57:9: note: ------>vectorizing statement: # DEBUG x => x_313

common/mc.c:57:9: note: ------>vectorizing statement: _17 = (sizetype) x_313;

common/mc.c:57:9: note: ------>vectorizing statement: _19 = pix1_312 + _17;

common/mc.c:57:9: note: ------>vectorizing statement: _21 = pix2_355 + _17;

common/mc.c:57:9: note: ------>vectorizing statement: _22 = *_21;

common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: transform load. ncopies = 1
common/mc.c:57:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *pix2_355
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:57:9: note: created vectp_pix2.640_320
common/mc.c:57:9: note: add new stmt: vect__22.641_50 = MEM[(uint8_t *)vectp_pix2.639_289];
common/mc.c:57:9: note: ------>vectorizing statement: _23 = (int) _22;

common/mc.c:57:9: note: multiple-types.
common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: transform conversion. ncopies = 1.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _22
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _22
  def_stmt =  _22 = *_21;
common/mc.c:57:9: note: add new stmt: vect__23.643_46 = [vec_unpack_lo_expr] vect__22.641_50;
common/mc.c:57:9: note: add new stmt: vect__23.643_45 = [vec_unpack_hi_expr] vect__22.641_50;
common/mc.c:57:9: note: add new stmt: vect__23.642_44 = [vec_unpack_lo_expr] vect__23.643_46;
common/mc.c:57:9: note: add new stmt: vect__23.642_43 = [vec_unpack_hi_expr] vect__23.643_46;
common/mc.c:57:9: note: add new stmt: vect__23.642_42 = [vec_unpack_lo_expr] vect__23.643_45;
common/mc.c:57:9: note: add new stmt: vect__23.642_39 = [vec_unpack_hi_expr] vect__23.643_45;
common/mc.c:57:9: note: ------>vectorizing statement: _25 = pix3_354 + _17;

common/mc.c:57:9: note: ------>vectorizing statement: _26 = *_25;

common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: transform load. ncopies = 1
common/mc.c:57:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *pix3_354
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:57:9: note: created vectp_pix3.645_24
common/mc.c:57:9: note: add new stmt: vect__26.646_16 = MEM[(uint8_t *)vectp_pix3.644_20];
common/mc.c:57:9: note: ------>vectorizing statement: _27 = (int) _26;

common/mc.c:57:9: note: multiple-types.
common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: transform conversion. ncopies = 1.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _26
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _26
  def_stmt =  _26 = *_25;
common/mc.c:57:9: note: add new stmt: vect__27.648_15 = [vec_unpack_lo_expr] vect__26.646_16;
common/mc.c:57:9: note: add new stmt: vect__27.648_14 = [vec_unpack_hi_expr] vect__26.646_16;
common/mc.c:57:9: note: add new stmt: vect__27.647_13 = [vec_unpack_lo_expr] vect__27.648_15;
common/mc.c:57:9: note: add new stmt: vect__27.647_12 = [vec_unpack_hi_expr] vect__27.648_15;
common/mc.c:57:9: note: add new stmt: vect__27.647_371 = [vec_unpack_lo_expr] vect__27.648_14;
common/mc.c:57:9: note: add new stmt: vect__27.647_370 = [vec_unpack_hi_expr] vect__27.648_14;
common/mc.c:57:9: note: ------>vectorizing statement: _28 = _23 + _27;

common/mc.c:57:9: note: multiple-types.
common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: transform binary/unary operation.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _23
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _23
  def_stmt =  _23 = (int) _22;
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _27
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _27
  def_stmt =  _27 = (int) _26;
common/mc.c:57:9: note: add new stmt: vect__28.649_319 = vect__23.642_44 + vect__27.647_13;
common/mc.c:57:9: note: add new stmt: vect__28.649_314 = vect__23.642_43 + vect__27.647_12;
common/mc.c:57:9: note: add new stmt: vect__28.649_33 = vect__23.642_42 + vect__27.647_371;
common/mc.c:57:9: note: add new stmt: vect__28.649_35 = vect__23.642_39 + vect__27.647_370;
common/mc.c:57:9: note: ------>vectorizing statement: _29 = _28 + 1;

common/mc.c:57:9: note: multiple-types.
common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: transform binary/unary operation.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _28
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _28
  def_stmt =  _28 = _23 + _27;
common/mc.c:57:9: note: vect_get_vec_def_for_operand: 1
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: Create vector_cst. nunits = 4
common/mc.c:57:9: note: created new init_stmt: vect_cst_.651_37 = { 1, 1, 1, 1 };
common/mc.c:57:9: note: add new stmt: vect__29.650_291 = vect__28.649_319 + vect_cst_.651_37;
common/mc.c:57:9: note: add new stmt: vect__29.650_293 = vect__28.649_314 + vect_cst_.651_37;
common/mc.c:57:9: note: add new stmt: vect__29.650_295 = vect__28.649_33 + vect_cst_.651_37;
common/mc.c:57:9: note: add new stmt: vect__29.650_372 = vect__28.649_35 + vect_cst_.651_37;
common/mc.c:57:9: note: ------>vectorizing statement: _30 = _29 >> 1;

common/mc.c:57:9: note: multiple-types.
common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: transform binary/unary operation.
common/mc.c:57:9: note: operand 1 using scalar mode.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _29
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _29
  def_stmt =  _29 = _28 + 1;
common/mc.c:57:9: note: add new stmt: vect__30.652_373 = vect__29.650_291 >> 1;
common/mc.c:57:9: note: add new stmt: vect__30.652_374 = vect__29.650_293 >> 1;
common/mc.c:57:9: note: add new stmt: vect__30.652_375 = vect__29.650_295 >> 1;
common/mc.c:57:9: note: add new stmt: vect__30.652_376 = vect__29.650_372 >> 1;
common/mc.c:57:9: note: ------>vectorizing statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: transform conversion. ncopies = 1.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _30
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _30
  def_stmt =  _30 = _29 >> 1;
common/mc.c:57:9: note: add new stmt: vect__31.654_377 = VEC_PACK_TRUNC_EXPR <vect__30.652_373, vect__30.652_374>;
common/mc.c:57:9: note: add new stmt: vect__31.654_378 = VEC_PACK_TRUNC_EXPR <vect__30.652_375, vect__30.652_376>;
common/mc.c:57:9: note: add new stmt: vect__31.653_379 = VEC_PACK_TRUNC_EXPR <vect__31.654_377, vect__31.654_378>;
common/mc.c:57:9: note: ------>vectorizing statement: *_19 = _31;

common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: transform store. ncopies = 1
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _31
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _31
  def_stmt =  _31 = (unsigned char) _30;
common/mc.c:57:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *pix1_312
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:57:9: note: created vectp_pix1.656_380
common/mc.c:57:9: note: add new stmt: MEM[(uint8_t *)vectp_pix1.655_381] = vect__31.653_379;
common/mc.c:57:9: note: ------>vectorizing statement: x_32 = x_313 + 1;

common/mc.c:57:9: note: ------>vectorizing statement: # DEBUG x => x_32

common/mc.c:57:9: note: ------>vectorizing statement: # DEBUG x => x_32

common/mc.c:57:9: note: ------>vectorizing statement: ivtmp_366 = ivtmp_10 - 1;

common/mc.c:57:9: note: ------>vectorizing statement: vectp_pix2.639_63 = vectp_pix2.639_289 + 16;

common/mc.c:57:9: note: ------>vectorizing statement: vectp_pix3.644_18 = vectp_pix3.644_20 + 16;

common/mc.c:57:9: note: ------>vectorizing statement: vectp_pix1.655_382 = vectp_pix1.655_381 + 16;

common/mc.c:57:9: note: ------>vectorizing statement: if (ivtmp_366 != 0)


loop at common/mc.c:59: if (ivtmp_384 < 1)

;; Scaling loop 4 with scale 0.062500, bounding iterations to 1 from guessed 16
;; guessed iterations are now 1
common/mc.c:57:9: note: LOOP VECTORIZED


Analyzing loop at common/mc.c:74
common/mc.c:74:5: note: ===== analyze_loop_nest =====
common/mc.c:74:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:74:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/mc.c:74:5: note: === vect_analyze_data_refs ===
Creating dr for *pix2_349
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {0B, +, pretmp_317}_5
Creating dr for *pix3_348
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {0B, +, pretmp_368}_5
Creating dr for *pix1_347
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {0B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {1B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {1B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {1B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {2B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {2B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {2B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {3B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {3B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {3B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {4B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {4B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {4B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {5B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {5B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {5B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {6B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {6B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {6B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {7B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {7B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {7B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 8
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {8B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 8
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {8B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 8
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {8B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 9B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 9
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {9B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 9B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 9
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {9B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 9B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 9
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {9B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 10B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 10
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {10B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 10B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 10
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {10B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 10B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 10
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {10B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 11B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 11
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {11B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 11B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 11
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {11B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 11B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 11
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {11B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 12B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 12
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {12B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 12B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 12
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {12B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 12B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 12
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {12B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 13B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 13
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {13B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 13B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 13
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {13B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 13B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 13
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {13B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 14B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 14
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {14B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 14B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 14
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {14B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 14B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 14
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {14B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 15B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 15
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {15B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 15B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 15
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {15B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 15B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 15
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {15B, +, pretmp_318}_5
common/mc.c:74:5: note: got vectype for stmt: _47 = *pix2_349;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: _51 = *pix3_348;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: *pix1_347 = iftmp.0_62;
vector(16) unsigned char
common/mc.c:74:5: note: not vectorized: not suitable for strided load *pix1_347 = iftmp.0_62;

common/mc.c:74:5: note: bad data references.
common/mc.c:110:1: note: vectorized 1 loops in function.
Merging blocks 9 and 16
Removing basic block 17
basic block 17, loop depth 1
 pred:      
 succ:       20


Removing basic block 19
basic block 19, loop depth 1
 pred:      
 succ:       6


pixel_avg_16x8 (uint8_t * pix1, int i_stride_pix1, uint8_t * pix2, int i_stride_pix2, uint8_t * pix3, int i_stride_pix3, int weight)
{
  vector(16) unsigned char * vectp_pix1.656;
  vector(16) unsigned char * vectp_pix1.655;
  vector(8) short int vect__31.654;
  vector(16) unsigned char vect__31.653;
  vector(4) int vect__30.652;
  vector(4) int vect_cst_.651;
  vector(4) int vect__29.650;
  vector(4) int vect__28.649;
  vector(8) short unsigned int vect__27.648;
  vector(4) int vect__27.647;
  vector(16) unsigned char vect__26.646;
  vector(16) unsigned char * vectp_pix3.645;
  vector(16) unsigned char * vectp_pix3.644;
  vector(8) short unsigned int vect__23.643;
  vector(4) int vect__23.642;
  vector(16) unsigned char vect__22.641;
  vector(16) unsigned char * vectp_pix2.640;
  vector(16) unsigned char * vectp_pix2.639;
  int y;
  const int i_weight2;
  uint8_t * dst;
  uint8_t * src1;
  uint8_t * src2;
  int x;
  int y;
  uint8_t * pix1;
  uint8_t * pix2;
  uint8_t * pix3;
  int y;
  unsigned int ivtmp_10;
  sizetype _17;
  uint8_t * _19;
  uint8_t * _21;
  unsigned char _22;
  int _23;
  uint8_t * _25;
  unsigned char _26;
  int _27;
  int _28;
  int _29;
  int _30;
  unsigned char _31;
  unsigned int ivtmp_41;
  unsigned char _47;
  int _48;
  int _49;
  unsigned char _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.0_60;
  unsigned char iftmp.0_61;
  unsigned char iftmp.0_62;
  unsigned char _64;
  int _65;
  int _66;
  unsigned char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  unsigned char iftmp.0_76;
  unsigned char iftmp.0_77;
  unsigned char iftmp.0_78;
  unsigned char _79;
  int _80;
  int _81;
  unsigned char _82;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  unsigned char iftmp.0_91;
  unsigned char iftmp.0_92;
  unsigned char iftmp.0_93;
  unsigned char _94;
  int _95;
  int _96;
  unsigned char _97;
  int _98;
  int _99;
  int _100;
  int _101;
  int _102;
  int _103;
  int _104;
  int _105;
  unsigned char iftmp.0_106;
  unsigned char iftmp.0_107;
  unsigned char iftmp.0_108;
  unsigned char _109;
  int _110;
  int _111;
  unsigned char _112;
  int _113;
  int _114;
  int _115;
  int _116;
  int _117;
  int _118;
  int _119;
  int _120;
  unsigned char iftmp.0_121;
  unsigned char iftmp.0_122;
  unsigned char iftmp.0_123;
  unsigned char _124;
  int _125;
  int _126;
  unsigned char _127;
  int _128;
  int _129;
  int _130;
  int _131;
  int _132;
  int _133;
  int _134;
  int _135;
  unsigned char iftmp.0_136;
  unsigned char iftmp.0_137;
  unsigned char iftmp.0_138;
  unsigned char _139;
  int _140;
  int _141;
  unsigned char _142;
  int _143;
  int _144;
  int _145;
  int _146;
  int _147;
  int _148;
  int _149;
  int _150;
  unsigned char iftmp.0_151;
  unsigned char iftmp.0_152;
  unsigned char iftmp.0_153;
  unsigned char _154;
  int _155;
  int _156;
  unsigned char _157;
  int _158;
  int _159;
  int _160;
  int _161;
  int _162;
  int _163;
  int _164;
  int _165;
  unsigned char iftmp.0_166;
  unsigned char iftmp.0_167;
  unsigned char iftmp.0_168;
  unsigned char _169;
  int _170;
  int _171;
  unsigned char _172;
  int _173;
  int _174;
  int _175;
  int _176;
  int _177;
  int _178;
  int _179;
  int _180;
  unsigned char iftmp.0_181;
  unsigned char iftmp.0_182;
  unsigned char iftmp.0_183;
  unsigned char _184;
  int _185;
  int _186;
  unsigned char _187;
  int _188;
  int _189;
  int _190;
  int _191;
  int _192;
  int _193;
  int _194;
  int _195;
  unsigned char iftmp.0_196;
  unsigned char iftmp.0_197;
  unsigned char iftmp.0_198;
  unsigned char _199;
  int _200;
  int _201;
  unsigned char _202;
  int _203;
  int _204;
  int _205;
  int _206;
  int _207;
  int _208;
  int _209;
  int _210;
  unsigned char iftmp.0_211;
  unsigned char iftmp.0_212;
  unsigned char iftmp.0_213;
  unsigned char _214;
  int _215;
  int _216;
  unsigned char _217;
  int _218;
  int _219;
  int _220;
  int _221;
  int _222;
  int _223;
  int _224;
  int _225;
  unsigned char iftmp.0_226;
  unsigned char iftmp.0_227;
  unsigned char iftmp.0_228;
  unsigned char _229;
  int _230;
  int _231;
  unsigned char _232;
  int _233;
  int _234;
  int _235;
  int _236;
  int _237;
  int _238;
  int _239;
  int _240;
  unsigned char iftmp.0_241;
  unsigned char iftmp.0_242;
  unsigned char iftmp.0_243;
  unsigned char _244;
  int _245;
  int _246;
  unsigned char _247;
  int _248;
  int _249;
  int _250;
  int _251;
  int _252;
  int _253;
  int _254;
  int _255;
  unsigned char iftmp.0_256;
  unsigned char iftmp.0_257;
  unsigned char iftmp.0_258;
  unsigned char _259;
  int _260;
  int _261;
  unsigned char _262;
  int _263;
  int _264;
  int _265;
  int _266;
  int _267;
  int _268;
  int _269;
  int _270;
  unsigned char iftmp.0_271;
  unsigned char iftmp.0_272;
  unsigned char iftmp.0_273;
  unsigned char _274;
  int _275;
  int _276;
  unsigned char _277;
  int _278;
  int _279;
  int _280;
  int _281;
  int _282;
  int _283;
  int _284;
  int _285;
  unsigned char iftmp.0_286;
  unsigned char iftmp.0_287;
  unsigned char iftmp.0_288;
  sizetype pretmp_315;
  sizetype pretmp_316;
  sizetype pretmp_317;
  sizetype pretmp_318;
  unsigned int ivtmp_322;
  unsigned char _325;
  int _326;
  int _327;
  int _328;
  int _329;
  unsigned char _330;
  uint8_t * _331;
  int _332;
  unsigned char _333;
  uint8_t * _334;
  uint8_t * _335;
  sizetype _336;
  unsigned int ivtmp_337;
  _Bool _340;
  _Bool _341;
  _Bool _342;
  uint8_t * _343;
  _Bool _344;
  uint8_t * _345;
  _Bool _356;
  _Bool _357;
  uint8_t * _358;
  _Bool _359;
  uint8_t * _360;
  unsigned int ivtmp_362;
  unsigned int ivtmp_363;
  unsigned int ivtmp_364;
  unsigned int ivtmp_365;
  unsigned int ivtmp_366;
  sizetype pretmp_368;
  sizetype pretmp_369;
  unsigned int ivtmp_384;

  <bb 2>:
  if (weight_1(D) == 32)
    goto <bb 3>;
  else
    goto <bb 15>;

  <bb 3>:
  pretmp_316 = (sizetype) i_stride_pix1_4(D);
  pretmp_315 = (sizetype) i_stride_pix2_6(D);
  pretmp_369 = (sizetype) i_stride_pix3_8(D);
  goto <bb 14>;

  <bb 4>:
  goto <bb 9>;

  <bb 5>:

  <bb 6>:
  # x_339 = PHI <0(5), x_323(7)>
  # ivtmp_337 = PHI <16(5), ivtmp_322(7)>
  # DEBUG x => x_339
  _336 = (sizetype) x_339;
  _335 = pix1_312 + _336;
  _334 = pix2_355 + _336;
  _333 = *_334;
  _332 = (int) _333;
  _331 = pix3_354 + _336;
  _330 = *_331;
  _329 = (int) _330;
  _328 = _332 + _329;
  _327 = _328 + 1;
  _326 = _327 >> 1;
  _325 = (unsigned char) _326;
  *_335 = _325;
  x_323 = x_339 + 1;
  # DEBUG x => x_323
  # DEBUG x => x_323
  ivtmp_322 = ivtmp_337 - 1;
  if (ivtmp_322 != 0)
    goto <bb 7>;
  else
    goto <bb 10>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  vectp_pix2.640_320 = pix2_355;
  vectp_pix3.645_24 = pix3_354;
  vect_cst_.651_37 = { 1, 1, 1, 1 };
  vectp_pix1.656_380 = pix1_312;

  <bb 9>:
  # x_313 = PHI <x_32(4), 0(8)>
  # ivtmp_10 = PHI <ivtmp_366(4), 16(8)>
  # vectp_pix2.639_289 = PHI <vectp_pix2.639_63(4), vectp_pix2.640_320(8)>
  # vectp_pix3.644_20 = PHI <vectp_pix3.644_18(4), vectp_pix3.645_24(8)>
  # vectp_pix1.655_381 = PHI <vectp_pix1.655_382(4), vectp_pix1.656_380(8)>
  # ivtmp_41 = PHI <ivtmp_384(4), 0(8)>
  # DEBUG x => x_313
  _17 = (sizetype) x_313;
  _19 = pix1_312 + _17;
  _21 = pix2_355 + _17;
  vect__22.641_50 = MEM[(uint8_t *)vectp_pix2.639_289];
  _22 = *_21;
  vect__23.643_46 = [vec_unpack_lo_expr] vect__22.641_50;
  vect__23.643_45 = [vec_unpack_hi_expr] vect__22.641_50;
  vect__23.642_44 = [vec_unpack_lo_expr] vect__23.643_46;
  vect__23.642_43 = [vec_unpack_hi_expr] vect__23.643_46;
  vect__23.642_42 = [vec_unpack_lo_expr] vect__23.643_45;
  vect__23.642_39 = [vec_unpack_hi_expr] vect__23.643_45;
  _23 = (int) _22;
  _25 = pix3_354 + _17;
  vect__26.646_16 = MEM[(uint8_t *)vectp_pix3.644_20];
  _26 = *_25;
  vect__27.648_15 = [vec_unpack_lo_expr] vect__26.646_16;
  vect__27.648_14 = [vec_unpack_hi_expr] vect__26.646_16;
  vect__27.647_13 = [vec_unpack_lo_expr] vect__27.648_15;
  vect__27.647_12 = [vec_unpack_hi_expr] vect__27.648_15;
  vect__27.647_371 = [vec_unpack_lo_expr] vect__27.648_14;
  vect__27.647_370 = [vec_unpack_hi_expr] vect__27.648_14;
  _27 = (int) _26;
  vect__28.649_319 = vect__23.642_44 + vect__27.647_13;
  vect__28.649_314 = vect__23.642_43 + vect__27.647_12;
  vect__28.649_33 = vect__23.642_42 + vect__27.647_371;
  vect__28.649_35 = vect__23.642_39 + vect__27.647_370;
  _28 = _23 + _27;
  vect__29.650_291 = vect__28.649_319 + vect_cst_.651_37;
  vect__29.650_293 = vect__28.649_314 + vect_cst_.651_37;
  vect__29.650_295 = vect__28.649_33 + vect_cst_.651_37;
  vect__29.650_372 = vect__28.649_35 + vect_cst_.651_37;
  _29 = _28 + 1;
  vect__30.652_373 = vect__29.650_291 >> 1;
  vect__30.652_374 = vect__29.650_293 >> 1;
  vect__30.652_375 = vect__29.650_295 >> 1;
  vect__30.652_376 = vect__29.650_372 >> 1;
  _30 = _29 >> 1;
  vect__31.654_377 = VEC_PACK_TRUNC_EXPR <vect__30.652_373, vect__30.652_374>;
  vect__31.654_378 = VEC_PACK_TRUNC_EXPR <vect__30.652_375, vect__30.652_376>;
  vect__31.653_379 = VEC_PACK_TRUNC_EXPR <vect__31.654_377, vect__31.654_378>;
  _31 = (unsigned char) _30;
  MEM[(uint8_t *)vectp_pix1.655_381] = vect__31.653_379;
  x_32 = x_313 + 1;
  # DEBUG x => x_32
  # DEBUG x => x_32
  ivtmp_366 = ivtmp_10 - 1;
  vectp_pix2.639_63 = vectp_pix2.639_289 + 16;
  vectp_pix3.644_18 = vectp_pix3.644_20 + 16;
  vectp_pix1.655_382 = vectp_pix1.655_381 + 16;
  ivtmp_384 = ivtmp_41 + 1;
  if (ivtmp_384 < 1)
    goto <bb 4>;
  else
    goto <bb 10>;

  <bb 10>:
  pix2_34 = pix2_355 + pretmp_315;
  # DEBUG src1 => pix2_34
  pix3_36 = pix3_354 + pretmp_369;
  # DEBUG src2 => pix3_36
  pix1_38 = pix1_312 + pretmp_316;
  # DEBUG dst => pix1_38
  y_40 = y_353 + 1;
  # DEBUG y => y_40
  # DEBUG y => y_40
  # DEBUG src2 => pix3_36
  # DEBUG src1 => pix2_34
  # DEBUG dst => pix1_38
  ivtmp_364 = ivtmp_365 - 1;
  if (ivtmp_364 != 0)
    goto <bb 13>;
  else
    goto <bb 11>;

  <bb 11>:

  <bb 12>:
  return;

  <bb 13>:

  <bb 14>:
  # pix1_312 = PHI <pix1_3(D)(3), pix1_38(13)>
  # pix2_355 = PHI <pix2_5(D)(3), pix2_34(13)>
  # pix3_354 = PHI <pix3_7(D)(3), pix3_36(13)>
  # y_353 = PHI <0(3), y_40(13)>
  # ivtmp_365 = PHI <8(3), ivtmp_364(13)>
  # DEBUG y => y_353
  # DEBUG src2 => pix3_354
  # DEBUG src1 => pix2_355
  # DEBUG dst => pix1_312
  # DEBUG x => 0
  _360 = pix1_312 + 16;
  _359 = pix2_355 >= _360;
  _358 = pix2_355 + 16;
  _357 = pix1_312 >= _358;
  _356 = _357 | _359;
  _345 = pix1_312 + 16;
  _344 = _345 <= pix3_354;
  _343 = pix3_354 + 16;
  _342 = pix1_312 >= _343;
  _341 = _342 | _344;
  _340 = _341 & _356;
  if (_340 != 0)
    goto <bb 8>;
  else
    goto <bb 5>;

  <bb 15>:
  # DEBUG dst => pix1_3(D)
  # DEBUG i_dst => i_stride_pix1_4(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG i_src1 => i_stride_pix2_6(D)
  # DEBUG src2 => pix3_7(D)
  # DEBUG i_src2 => i_stride_pix3_8(D)
  # DEBUG width => 16
  # DEBUG height => 8
  # DEBUG i_weight1 => weight_1(D)
  i_weight2_11 = 64 - weight_1(D);
  # DEBUG i_weight2 => i_weight2_11
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => pix3_7(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG dst => pix1_3(D)
  pretmp_318 = (sizetype) i_stride_pix1_4(D);
  pretmp_317 = (sizetype) i_stride_pix2_6(D);
  pretmp_368 = (sizetype) i_stride_pix3_8(D);

  <bb 16>:
  # pix2_349 = PHI <pix2_294(18), pix2_5(D)(15)>
  # pix3_348 = PHI <pix3_296(18), pix3_7(D)(15)>
  # pix1_347 = PHI <pix1_292(18), pix1_3(D)(15)>
  # y_346 = PHI <y_290(18), 0(15)>
  # ivtmp_363 = PHI <ivtmp_362(18), 8(15)>
  # DEBUG y => NULL
  # DEBUG src2 => NULL
  # DEBUG src1 => NULL
  # DEBUG dst => NULL
  _47 = *pix2_349;
  _48 = (int) _47;
  _49 = weight_1(D) * _48;
  _51 = *pix3_348;
  _52 = (int) _51;
  _53 = i_weight2_11 * _52;
  _54 = _49 + _53;
  _55 = _54 + 32;
  _56 = _55 >> 6;
  # DEBUG x => NULL
  _57 = _56 & -256;
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.0_60 = (unsigned char) _59;
  iftmp.0_61 = (unsigned char) _56;
  iftmp.0_62 = _57 != 0 ? iftmp.0_60 : iftmp.0_61;
  # DEBUG x => NULL
  *pix1_347 = iftmp.0_62;
  _64 = MEM[(uint8_t *)pix2_349 + 1B];
  _65 = (int) _64;
  _66 = weight_1(D) * _65;
  _67 = MEM[(uint8_t *)pix3_348 + 1B];
  _68 = (int) _67;
  _69 = i_weight2_11 * _68;
  _70 = _66 + _69;
  _71 = _70 + 32;
  _72 = _71 >> 6;
  # DEBUG x => NULL
  _73 = _72 & -256;
  _74 = -_72;
  _75 = _74 >> 31;
  iftmp.0_76 = (unsigned char) _75;
  iftmp.0_77 = (unsigned char) _72;
  iftmp.0_78 = _73 != 0 ? iftmp.0_76 : iftmp.0_77;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 1B] = iftmp.0_78;
  _79 = MEM[(uint8_t *)pix2_349 + 2B];
  _80 = (int) _79;
  _81 = weight_1(D) * _80;
  _82 = MEM[(uint8_t *)pix3_348 + 2B];
  _83 = (int) _82;
  _84 = i_weight2_11 * _83;
  _85 = _81 + _84;
  _86 = _85 + 32;
  _87 = _86 >> 6;
  # DEBUG x => NULL
  _88 = _87 & -256;
  _89 = -_87;
  _90 = _89 >> 31;
  iftmp.0_91 = (unsigned char) _90;
  iftmp.0_92 = (unsigned char) _87;
  iftmp.0_93 = _88 != 0 ? iftmp.0_91 : iftmp.0_92;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 2B] = iftmp.0_93;
  _94 = MEM[(uint8_t *)pix2_349 + 3B];
  _95 = (int) _94;
  _96 = weight_1(D) * _95;
  _97 = MEM[(uint8_t *)pix3_348 + 3B];
  _98 = (int) _97;
  _99 = i_weight2_11 * _98;
  _100 = _96 + _99;
  _101 = _100 + 32;
  _102 = _101 >> 6;
  # DEBUG x => NULL
  _103 = _102 & -256;
  _104 = -_102;
  _105 = _104 >> 31;
  iftmp.0_106 = (unsigned char) _105;
  iftmp.0_107 = (unsigned char) _102;
  iftmp.0_108 = _103 != 0 ? iftmp.0_106 : iftmp.0_107;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 3B] = iftmp.0_108;
  _109 = MEM[(uint8_t *)pix2_349 + 4B];
  _110 = (int) _109;
  _111 = weight_1(D) * _110;
  _112 = MEM[(uint8_t *)pix3_348 + 4B];
  _113 = (int) _112;
  _114 = i_weight2_11 * _113;
  _115 = _111 + _114;
  _116 = _115 + 32;
  _117 = _116 >> 6;
  # DEBUG x => NULL
  _118 = _117 & -256;
  _119 = -_117;
  _120 = _119 >> 31;
  iftmp.0_121 = (unsigned char) _120;
  iftmp.0_122 = (unsigned char) _117;
  iftmp.0_123 = _118 != 0 ? iftmp.0_121 : iftmp.0_122;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 4B] = iftmp.0_123;
  _124 = MEM[(uint8_t *)pix2_349 + 5B];
  _125 = (int) _124;
  _126 = weight_1(D) * _125;
  _127 = MEM[(uint8_t *)pix3_348 + 5B];
  _128 = (int) _127;
  _129 = i_weight2_11 * _128;
  _130 = _126 + _129;
  _131 = _130 + 32;
  _132 = _131 >> 6;
  # DEBUG x => NULL
  _133 = _132 & -256;
  _134 = -_132;
  _135 = _134 >> 31;
  iftmp.0_136 = (unsigned char) _135;
  iftmp.0_137 = (unsigned char) _132;
  iftmp.0_138 = _133 != 0 ? iftmp.0_136 : iftmp.0_137;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 5B] = iftmp.0_138;
  _139 = MEM[(uint8_t *)pix2_349 + 6B];
  _140 = (int) _139;
  _141 = weight_1(D) * _140;
  _142 = MEM[(uint8_t *)pix3_348 + 6B];
  _143 = (int) _142;
  _144 = i_weight2_11 * _143;
  _145 = _141 + _144;
  _146 = _145 + 32;
  _147 = _146 >> 6;
  # DEBUG x => NULL
  _148 = _147 & -256;
  _149 = -_147;
  _150 = _149 >> 31;
  iftmp.0_151 = (unsigned char) _150;
  iftmp.0_152 = (unsigned char) _147;
  iftmp.0_153 = _148 != 0 ? iftmp.0_151 : iftmp.0_152;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 6B] = iftmp.0_153;
  _154 = MEM[(uint8_t *)pix2_349 + 7B];
  _155 = (int) _154;
  _156 = weight_1(D) * _155;
  _157 = MEM[(uint8_t *)pix3_348 + 7B];
  _158 = (int) _157;
  _159 = i_weight2_11 * _158;
  _160 = _156 + _159;
  _161 = _160 + 32;
  _162 = _161 >> 6;
  # DEBUG x => NULL
  _163 = _162 & -256;
  _164 = -_162;
  _165 = _164 >> 31;
  iftmp.0_166 = (unsigned char) _165;
  iftmp.0_167 = (unsigned char) _162;
  iftmp.0_168 = _163 != 0 ? iftmp.0_166 : iftmp.0_167;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 7B] = iftmp.0_168;
  _169 = MEM[(uint8_t *)pix2_349 + 8B];
  _170 = (int) _169;
  _171 = weight_1(D) * _170;
  _172 = MEM[(uint8_t *)pix3_348 + 8B];
  _173 = (int) _172;
  _174 = i_weight2_11 * _173;
  _175 = _171 + _174;
  _176 = _175 + 32;
  _177 = _176 >> 6;
  # DEBUG x => NULL
  _178 = _177 & -256;
  _179 = -_177;
  _180 = _179 >> 31;
  iftmp.0_181 = (unsigned char) _180;
  iftmp.0_182 = (unsigned char) _177;
  iftmp.0_183 = _178 != 0 ? iftmp.0_181 : iftmp.0_182;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 8B] = iftmp.0_183;
  _184 = MEM[(uint8_t *)pix2_349 + 9B];
  _185 = (int) _184;
  _186 = weight_1(D) * _185;
  _187 = MEM[(uint8_t *)pix3_348 + 9B];
  _188 = (int) _187;
  _189 = i_weight2_11 * _188;
  _190 = _186 + _189;
  _191 = _190 + 32;
  _192 = _191 >> 6;
  # DEBUG x => NULL
  _193 = _192 & -256;
  _194 = -_192;
  _195 = _194 >> 31;
  iftmp.0_196 = (unsigned char) _195;
  iftmp.0_197 = (unsigned char) _192;
  iftmp.0_198 = _193 != 0 ? iftmp.0_196 : iftmp.0_197;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 9B] = iftmp.0_198;
  _199 = MEM[(uint8_t *)pix2_349 + 10B];
  _200 = (int) _199;
  _201 = weight_1(D) * _200;
  _202 = MEM[(uint8_t *)pix3_348 + 10B];
  _203 = (int) _202;
  _204 = i_weight2_11 * _203;
  _205 = _201 + _204;
  _206 = _205 + 32;
  _207 = _206 >> 6;
  # DEBUG x => NULL
  _208 = _207 & -256;
  _209 = -_207;
  _210 = _209 >> 31;
  iftmp.0_211 = (unsigned char) _210;
  iftmp.0_212 = (unsigned char) _207;
  iftmp.0_213 = _208 != 0 ? iftmp.0_211 : iftmp.0_212;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 10B] = iftmp.0_213;
  _214 = MEM[(uint8_t *)pix2_349 + 11B];
  _215 = (int) _214;
  _216 = weight_1(D) * _215;
  _217 = MEM[(uint8_t *)pix3_348 + 11B];
  _218 = (int) _217;
  _219 = i_weight2_11 * _218;
  _220 = _216 + _219;
  _221 = _220 + 32;
  _222 = _221 >> 6;
  # DEBUG x => NULL
  _223 = _222 & -256;
  _224 = -_222;
  _225 = _224 >> 31;
  iftmp.0_226 = (unsigned char) _225;
  iftmp.0_227 = (unsigned char) _222;
  iftmp.0_228 = _223 != 0 ? iftmp.0_226 : iftmp.0_227;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 11B] = iftmp.0_228;
  _229 = MEM[(uint8_t *)pix2_349 + 12B];
  _230 = (int) _229;
  _231 = weight_1(D) * _230;
  _232 = MEM[(uint8_t *)pix3_348 + 12B];
  _233 = (int) _232;
  _234 = i_weight2_11 * _233;
  _235 = _231 + _234;
  _236 = _235 + 32;
  _237 = _236 >> 6;
  # DEBUG x => NULL
  _238 = _237 & -256;
  _239 = -_237;
  _240 = _239 >> 31;
  iftmp.0_241 = (unsigned char) _240;
  iftmp.0_242 = (unsigned char) _237;
  iftmp.0_243 = _238 != 0 ? iftmp.0_241 : iftmp.0_242;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 12B] = iftmp.0_243;
  _244 = MEM[(uint8_t *)pix2_349 + 13B];
  _245 = (int) _244;
  _246 = weight_1(D) * _245;
  _247 = MEM[(uint8_t *)pix3_348 + 13B];
  _248 = (int) _247;
  _249 = i_weight2_11 * _248;
  _250 = _246 + _249;
  _251 = _250 + 32;
  _252 = _251 >> 6;
  # DEBUG x => NULL
  _253 = _252 & -256;
  _254 = -_252;
  _255 = _254 >> 31;
  iftmp.0_256 = (unsigned char) _255;
  iftmp.0_257 = (unsigned char) _252;
  iftmp.0_258 = _253 != 0 ? iftmp.0_256 : iftmp.0_257;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 13B] = iftmp.0_258;
  _259 = MEM[(uint8_t *)pix2_349 + 14B];
  _260 = (int) _259;
  _261 = weight_1(D) * _260;
  _262 = MEM[(uint8_t *)pix3_348 + 14B];
  _263 = (int) _262;
  _264 = i_weight2_11 * _263;
  _265 = _261 + _264;
  _266 = _265 + 32;
  _267 = _266 >> 6;
  # DEBUG x => NULL
  _268 = _267 & -256;
  _269 = -_267;
  _270 = _269 >> 31;
  iftmp.0_271 = (unsigned char) _270;
  iftmp.0_272 = (unsigned char) _267;
  iftmp.0_273 = _268 != 0 ? iftmp.0_271 : iftmp.0_272;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 14B] = iftmp.0_273;
  _274 = MEM[(uint8_t *)pix2_349 + 15B];
  _275 = (int) _274;
  _276 = weight_1(D) * _275;
  _277 = MEM[(uint8_t *)pix3_348 + 15B];
  _278 = (int) _277;
  _279 = i_weight2_11 * _278;
  _280 = _276 + _279;
  _281 = _280 + 32;
  _282 = _281 >> 6;
  # DEBUG x => NULL
  _283 = _282 & -256;
  _284 = -_282;
  _285 = _284 >> 31;
  iftmp.0_286 = (unsigned char) _285;
  iftmp.0_287 = (unsigned char) _282;
  iftmp.0_288 = _283 != 0 ? iftmp.0_286 : iftmp.0_287;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 15B] = iftmp.0_288;
  y_290 = y_346 + 1;
  # DEBUG y => y_290
  pix1_292 = pix1_347 + pretmp_318;
  # DEBUG dst => pix1_292
  pix2_294 = pix2_349 + pretmp_317;
  # DEBUG src1 => pix2_294
  pix3_296 = pix3_348 + pretmp_368;
  # DEBUG src2 => pix3_296
  # DEBUG y => y_290
  # DEBUG src2 => pix3_296
  # DEBUG src1 => pix2_294
  # DEBUG dst => pix1_292
  ivtmp_362 = ivtmp_363 - 1;
  if (ivtmp_362 != 0)
    goto <bb 18>;
  else
    goto <bb 17>;

  <bb 17>:
  goto <bb 12>;

  <bb 18>:
  goto <bb 16>;

}



;; Function pixel_avg_2x2 (pixel_avg_2x2, funcdef_no=127, decl_uid=5893, cgraph_uid=127, symbol_order=170)


Analyzing loop at common/mc.c:55
common/mc.c:55:5: note: ===== analyze_loop_nest =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [1, + , 4294967295] != 0
  bounds on difference of bases: -1 ... -1
  result:
    # of iterations 1, bounded by 1
common/mc.c:55:5: note: Considering outer-loop vectorization.
split exit edge.
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [1, + , 4294967295] != 0
  bounds on difference of bases: -1 ... -1
  result:
    # of iterations 1, bounded by 1
common/mc.c:55:5: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_84
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {{0B, +, pretmp_141}_3, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_100
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {{0B, +, pretmp_142}_3, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_81
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {{0B, +, pretmp_140}_3, +, 1}_4
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:55:5: note: analyze in outer-loop: *pix2_84
common/mc.c:55:5: note: failed: evolution of base is not affine.
common/mc.c:55:5: note: bad data references.

Analyzing loop at common/mc.c:57
common/mc.c:57:9: note: ===== analyze_loop_nest =====
common/mc.c:57:9: note: === vect_analyze_loop_form ===
common/mc.c:57:9: note: === get_loop_niters ===
common/mc.c:57:9: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_84
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_84
	Access function 0: {0B, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_100
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_100
	Access function 0: {0B, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_81
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_81
	Access function 0: {0B, +, 1}_4
common/mc.c:57:9: note: got vectype for stmt: _22 = *_21;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: _26 = *_25;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: *_19 = _31;
vector(16) unsigned char
common/mc.c:57:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:57:9: note: Analyze phi: x_82 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Access function of PHI: {0, +, 1}_4
common/mc.c:57:9: note: step: 1,  init: 0
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: Analyze phi: .MEM_92 = PHI <.MEM_41(4), .MEM_103(9)>

common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_133(4), 2(9)>

common/mc.c:57:9: note: Access function of PHI: {2, +, 4294967295}_4
common/mc.c:57:9: note: step: 4294967295,  init: 2
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: === vect_pattern_recog ===
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:57:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:57:9: note: init: phi relevant? x_82 = PHI <x_32(4), 0(9)>
common/mc.c:57:9: note: init: phi relevant? .MEM_92 = PHI <.MEM_41(4), .MEM_103(9)>
common/mc.c:57:9: note: init: phi relevant? ivtmp_10 = PHI <ivtmp_133(4), 2(9)>
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_82
common/mc.c:57:9: note: init: stmt relevant? _17 = (sizetype) x_82;
common/mc.c:57:9: note: init: stmt relevant? _19 = pix1_81 + _17;
common/mc.c:57:9: note: init: stmt relevant? _21 = pix2_84 + _17;
common/mc.c:57:9: note: init: stmt relevant? _22 = *_21;
common/mc.c:57:9: note: init: stmt relevant? _23 = (int) _22;
common/mc.c:57:9: note: init: stmt relevant? _25 = pix3_100 + _17;
common/mc.c:57:9: note: init: stmt relevant? _26 = *_25;
common/mc.c:57:9: note: init: stmt relevant? _27 = (int) _26;
common/mc.c:57:9: note: init: stmt relevant? _28 = _23 + _27;
common/mc.c:57:9: note: init: stmt relevant? _29 = _28 + 1;
common/mc.c:57:9: note: init: stmt relevant? _30 = _29 >> 1;
common/mc.c:57:9: note: init: stmt relevant? _31 = (unsigned char) _30;
common/mc.c:57:9: note: init: stmt relevant? *_19 = _31;
common/mc.c:57:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: init: stmt relevant? x_32 = x_82 + 1;
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? ivtmp_133 = ivtmp_10 - 1;
common/mc.c:57:9: note: init: stmt relevant? if (ivtmp_133 != 0)
common/mc.c:57:9: note: worklist: examine stmt: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _26 = *_25;
common/mc.c:57:9: note: worklist: examine stmt: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _22 = *_21;
common/mc.c:57:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _26 = *_25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _22 = *_21;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: _26 = *_25;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_19 = _31;
  stmt_b: *_19 = _31;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_21 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_21 and *_19
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_25 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_25 and *_19
common/mc.c:57:9: note: === vect_determine_vectorization_factor ===
common/mc.c:57:9: note: ==> examining phi: x_82 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: ==> examining phi: .MEM_92 = PHI <.MEM_41(4), .MEM_103(9)>

common/mc.c:57:9: note: ==> examining phi: ivtmp_10 = PHI <ivtmp_133(4), 2(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_82

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_82;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_81 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_84 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_100 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;

common/mc.c:57:9: note: get vectype for scalar type:  uint8_t
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: x_32 = x_82 + 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: ivtmp_133 = ivtmp_10 - 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_133 != 0)

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: vectorization factor = 16
common/mc.c:57:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_21
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_25
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_19
common/mc.c:57:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:57:9: note: improved number of alias checks from 2 to 2
common/mc.c:57:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: vect_can_advance_ivs_p:
common/mc.c:57:9: note: Analyze phi: x_82 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Analyze phi: .MEM_92 = PHI <.MEM_41(4), .MEM_103(9)>

common/mc.c:57:9: note: virtual phi. skip.
common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_133(4), 2(9)>

common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: === vect_analyze_slp ===
common/mc.c:57:9: note: === vect_make_slp_decision ===
common/mc.c:57:9: note: === vect_detect_hybrid_slp ===
common/mc.c:57:9: note: === vect_analyze_loop_operations ===
common/mc.c:57:9: note: examining phi: x_82 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: examining phi: .MEM_92 = PHI <.MEM_41(4), .MEM_103(9)>

common/mc.c:57:9: note: examining phi: ivtmp_10 = PHI <ivtmp_133(4), 2(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_82
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_82;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_81 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_84 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_100 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: === vectorizable_shift ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: x_32 = x_82 + 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: ivtmp_133 = ivtmp_10 - 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_133 != 0)
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: vectorization_factor = 16, niters = 2
common/mc.c:57:9: note: not vectorized: iteration count too small.
common/mc.c:57:9: note: not vectorized: iteration count smaller than vectorization factor.
common/mc.c:57:9: note: bad operation or unsupported loop bound.

Analyzing loop at common/mc.c:74
common/mc.c:74:5: note: ===== analyze_loop_nest =====
common/mc.c:74:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:74:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [1, + , 4294967295] != 0
  bounds on difference of bases: -1 ... -1
  result:
    # of iterations 1, bounded by 1
common/mc.c:74:5: note: === vect_analyze_data_refs ===
Creating dr for *pix2_89
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_121
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {0B, +, pretmp_121}_5
Creating dr for *pix3_90
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_138
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {0B, +, pretmp_138}_5
Creating dr for *pix1_91
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_120
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {0B, +, pretmp_120}_5
Creating dr for MEM[(uint8_t *)pix2_89 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_121
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {1B, +, pretmp_121}_5
Creating dr for MEM[(uint8_t *)pix3_90 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_138
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {1B, +, pretmp_138}_5
Creating dr for MEM[(uint8_t *)pix1_91 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_120
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {1B, +, pretmp_120}_5
common/mc.c:74:5: note: got vectype for stmt: _47 = *pix2_89;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: _51 = *pix3_90;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: *pix1_91 = iftmp.0_62;
vector(16) unsigned char
common/mc.c:74:5: note: not vectorized: not suitable for strided load *pix1_91 = iftmp.0_62;

common/mc.c:74:5: note: bad data references.
common/mc.c:118:1: note: vectorized 0 loops in function.
pixel_avg_2x2 (uint8_t * pix1, int i_stride_pix1, uint8_t * pix2, int i_stride_pix2, uint8_t * pix3, int i_stride_pix3, int weight)
{
  int y;
  const int i_weight2;
  uint8_t * dst;
  uint8_t * src1;
  uint8_t * src2;
  int x;
  int y;
  uint8_t * pix1;
  uint8_t * pix2;
  uint8_t * pix3;
  int y;
  unsigned int ivtmp_10;
  sizetype _17;
  uint8_t * _19;
  uint8_t * _21;
  unsigned char _22;
  int _23;
  uint8_t * _25;
  unsigned char _26;
  int _27;
  int _28;
  int _29;
  int _30;
  unsigned char _31;
  unsigned char _47;
  int _48;
  int _49;
  unsigned char _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.0_60;
  unsigned char iftmp.0_61;
  unsigned char iftmp.0_62;
  unsigned char _64;
  int _65;
  int _66;
  unsigned char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  unsigned char iftmp.0_76;
  unsigned char iftmp.0_77;
  unsigned char iftmp.0_78;
  sizetype pretmp_120;
  sizetype pretmp_121;
  unsigned int ivtmp_129;
  unsigned int ivtmp_130;
  unsigned int ivtmp_131;
  unsigned int ivtmp_132;
  unsigned int ivtmp_133;
  sizetype pretmp_138;
  sizetype pretmp_140;
  sizetype pretmp_141;
  sizetype pretmp_142;

  <bb 2>:
  if (weight_1(D) == 32)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  pretmp_140 = (sizetype) i_stride_pix1_4(D);
  pretmp_141 = (sizetype) i_stride_pix2_6(D);
  pretmp_142 = (sizetype) i_stride_pix3_8(D);
  goto <bb 9>;

  <bb 4>:

  <bb 5>:
  # x_82 = PHI <x_32(4), 0(9)>
  # ivtmp_10 = PHI <ivtmp_133(4), 2(9)>
  # DEBUG x => x_82
  _17 = (sizetype) x_82;
  _19 = pix1_81 + _17;
  _21 = pix2_84 + _17;
  _22 = *_21;
  _23 = (int) _22;
  _25 = pix3_100 + _17;
  _26 = *_25;
  _27 = (int) _26;
  _28 = _23 + _27;
  _29 = _28 + 1;
  _30 = _29 >> 1;
  _31 = (unsigned char) _30;
  *_19 = _31;
  x_32 = x_82 + 1;
  # DEBUG x => x_32
  # DEBUG x => x_32
  ivtmp_133 = ivtmp_10 - 1;
  if (ivtmp_133 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  pix2_34 = pix2_84 + pretmp_141;
  # DEBUG src1 => pix2_34
  pix3_36 = pix3_100 + pretmp_142;
  # DEBUG src2 => pix3_36
  pix1_38 = pix1_81 + pretmp_140;
  # DEBUG dst => pix1_38
  y_40 = y_101 + 1;
  # DEBUG y => y_40
  # DEBUG y => y_40
  # DEBUG src2 => pix3_36
  # DEBUG src1 => pix2_34
  # DEBUG dst => pix1_38
  ivtmp_131 = ivtmp_132 - 1;
  if (ivtmp_131 != 0)
    goto <bb 8>;
  else
    goto <bb 13>;

  <bb 13>:

  <bb 7>:
  return;

  <bb 8>:

  <bb 9>:
  # pix1_81 = PHI <pix1_3(D)(3), pix1_38(8)>
  # pix2_84 = PHI <pix2_5(D)(3), pix2_34(8)>
  # pix3_100 = PHI <pix3_7(D)(3), pix3_36(8)>
  # y_101 = PHI <0(3), y_40(8)>
  # ivtmp_132 = PHI <2(3), ivtmp_131(8)>
  # DEBUG y => y_101
  # DEBUG src2 => pix3_100
  # DEBUG src1 => pix2_84
  # DEBUG dst => pix1_81
  # DEBUG x => 0
  goto <bb 5>;

  <bb 10>:
  # DEBUG dst => pix1_3(D)
  # DEBUG i_dst => i_stride_pix1_4(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG i_src1 => i_stride_pix2_6(D)
  # DEBUG src2 => pix3_7(D)
  # DEBUG i_src2 => i_stride_pix3_8(D)
  # DEBUG width => 2
  # DEBUG height => 2
  # DEBUG i_weight1 => weight_1(D)
  i_weight2_11 = 64 - weight_1(D);
  # DEBUG i_weight2 => i_weight2_11
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => pix3_7(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG dst => pix1_3(D)
  pretmp_120 = (sizetype) i_stride_pix1_4(D);
  pretmp_121 = (sizetype) i_stride_pix2_6(D);
  pretmp_138 = (sizetype) i_stride_pix3_8(D);

  <bb 11>:
  # pix2_89 = PHI <pix2_294(12), pix2_5(D)(10)>
  # pix3_90 = PHI <pix3_296(12), pix3_7(D)(10)>
  # pix1_91 = PHI <pix1_292(12), pix1_3(D)(10)>
  # y_108 = PHI <y_290(12), 0(10)>
  # ivtmp_130 = PHI <ivtmp_129(12), 2(10)>
  # DEBUG y => NULL
  # DEBUG src2 => NULL
  # DEBUG src1 => NULL
  # DEBUG dst => NULL
  _47 = *pix2_89;
  _48 = (int) _47;
  _49 = weight_1(D) * _48;
  _51 = *pix3_90;
  _52 = (int) _51;
  _53 = i_weight2_11 * _52;
  _54 = _49 + _53;
  _55 = _54 + 32;
  _56 = _55 >> 6;
  # DEBUG x => NULL
  _57 = _56 & -256;
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.0_60 = (unsigned char) _59;
  iftmp.0_61 = (unsigned char) _56;
  iftmp.0_62 = _57 != 0 ? iftmp.0_60 : iftmp.0_61;
  # DEBUG x => NULL
  *pix1_91 = iftmp.0_62;
  _64 = MEM[(uint8_t *)pix2_89 + 1B];
  _65 = (int) _64;
  _66 = weight_1(D) * _65;
  _67 = MEM[(uint8_t *)pix3_90 + 1B];
  _68 = (int) _67;
  _69 = i_weight2_11 * _68;
  _70 = _66 + _69;
  _71 = _70 + 32;
  _72 = _71 >> 6;
  # DEBUG x => NULL
  _73 = _72 & -256;
  _74 = -_72;
  _75 = _74 >> 31;
  iftmp.0_76 = (unsigned char) _75;
  iftmp.0_77 = (unsigned char) _72;
  iftmp.0_78 = _73 != 0 ? iftmp.0_76 : iftmp.0_77;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_91 + 1B] = iftmp.0_78;
  y_290 = y_108 + 1;
  # DEBUG y => y_290
  pix1_292 = pix1_91 + pretmp_120;
  # DEBUG dst => pix1_292
  pix2_294 = pix2_89 + pretmp_121;
  # DEBUG src1 => pix2_294
  pix3_296 = pix3_90 + pretmp_138;
  # DEBUG src2 => pix3_296
  # DEBUG y => y_290
  # DEBUG src2 => pix3_296
  # DEBUG src1 => pix2_294
  # DEBUG dst => pix1_292
  ivtmp_129 = ivtmp_130 - 1;
  if (ivtmp_129 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 7>;

  <bb 12>:
  goto <bb 11>;

}



;; Function pixel_avg_2x4 (pixel_avg_2x4, funcdef_no=126, decl_uid=5884, cgraph_uid=126, symbol_order=169)


Analyzing loop at common/mc.c:55
common/mc.c:55:5: note: ===== analyze_loop_nest =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [1, + , 4294967295] != 0
  bounds on difference of bases: -1 ... -1
  result:
    # of iterations 1, bounded by 1
common/mc.c:55:5: note: Considering outer-loop vectorization.
split exit edge.
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/mc.c:55:5: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_84
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {{0B, +, pretmp_141}_3, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_100
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {{0B, +, pretmp_142}_3, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_81
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {{0B, +, pretmp_140}_3, +, 1}_4
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:55:5: note: analyze in outer-loop: *pix2_84
common/mc.c:55:5: note: failed: evolution of base is not affine.
common/mc.c:55:5: note: bad data references.

Analyzing loop at common/mc.c:57
common/mc.c:57:9: note: ===== analyze_loop_nest =====
common/mc.c:57:9: note: === vect_analyze_loop_form ===
common/mc.c:57:9: note: === get_loop_niters ===
common/mc.c:57:9: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_84
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_84
	Access function 0: {0B, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_100
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_100
	Access function 0: {0B, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_81
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_81
	Access function 0: {0B, +, 1}_4
common/mc.c:57:9: note: got vectype for stmt: _22 = *_21;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: _26 = *_25;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: *_19 = _31;
vector(16) unsigned char
common/mc.c:57:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:57:9: note: Analyze phi: x_82 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Access function of PHI: {0, +, 1}_4
common/mc.c:57:9: note: step: 1,  init: 0
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: Analyze phi: .MEM_92 = PHI <.MEM_41(4), .MEM_103(9)>

common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_133(4), 2(9)>

common/mc.c:57:9: note: Access function of PHI: {2, +, 4294967295}_4
common/mc.c:57:9: note: step: 4294967295,  init: 2
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: === vect_pattern_recog ===
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:57:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:57:9: note: init: phi relevant? x_82 = PHI <x_32(4), 0(9)>
common/mc.c:57:9: note: init: phi relevant? .MEM_92 = PHI <.MEM_41(4), .MEM_103(9)>
common/mc.c:57:9: note: init: phi relevant? ivtmp_10 = PHI <ivtmp_133(4), 2(9)>
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_82
common/mc.c:57:9: note: init: stmt relevant? _17 = (sizetype) x_82;
common/mc.c:57:9: note: init: stmt relevant? _19 = pix1_81 + _17;
common/mc.c:57:9: note: init: stmt relevant? _21 = pix2_84 + _17;
common/mc.c:57:9: note: init: stmt relevant? _22 = *_21;
common/mc.c:57:9: note: init: stmt relevant? _23 = (int) _22;
common/mc.c:57:9: note: init: stmt relevant? _25 = pix3_100 + _17;
common/mc.c:57:9: note: init: stmt relevant? _26 = *_25;
common/mc.c:57:9: note: init: stmt relevant? _27 = (int) _26;
common/mc.c:57:9: note: init: stmt relevant? _28 = _23 + _27;
common/mc.c:57:9: note: init: stmt relevant? _29 = _28 + 1;
common/mc.c:57:9: note: init: stmt relevant? _30 = _29 >> 1;
common/mc.c:57:9: note: init: stmt relevant? _31 = (unsigned char) _30;
common/mc.c:57:9: note: init: stmt relevant? *_19 = _31;
common/mc.c:57:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: init: stmt relevant? x_32 = x_82 + 1;
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? ivtmp_133 = ivtmp_10 - 1;
common/mc.c:57:9: note: init: stmt relevant? if (ivtmp_133 != 0)
common/mc.c:57:9: note: worklist: examine stmt: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _26 = *_25;
common/mc.c:57:9: note: worklist: examine stmt: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _22 = *_21;
common/mc.c:57:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _26 = *_25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _22 = *_21;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: _26 = *_25;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_19 = _31;
  stmt_b: *_19 = _31;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_21 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_21 and *_19
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_25 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_25 and *_19
common/mc.c:57:9: note: === vect_determine_vectorization_factor ===
common/mc.c:57:9: note: ==> examining phi: x_82 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: ==> examining phi: .MEM_92 = PHI <.MEM_41(4), .MEM_103(9)>

common/mc.c:57:9: note: ==> examining phi: ivtmp_10 = PHI <ivtmp_133(4), 2(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_82

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_82;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_81 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_84 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_100 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;

common/mc.c:57:9: note: get vectype for scalar type:  uint8_t
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: x_32 = x_82 + 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: ivtmp_133 = ivtmp_10 - 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_133 != 0)

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: vectorization factor = 16
common/mc.c:57:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_21
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_25
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_19
common/mc.c:57:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:57:9: note: improved number of alias checks from 2 to 2
common/mc.c:57:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: vect_can_advance_ivs_p:
common/mc.c:57:9: note: Analyze phi: x_82 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Analyze phi: .MEM_92 = PHI <.MEM_41(4), .MEM_103(9)>

common/mc.c:57:9: note: virtual phi. skip.
common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_133(4), 2(9)>

common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: === vect_analyze_slp ===
common/mc.c:57:9: note: === vect_make_slp_decision ===
common/mc.c:57:9: note: === vect_detect_hybrid_slp ===
common/mc.c:57:9: note: === vect_analyze_loop_operations ===
common/mc.c:57:9: note: examining phi: x_82 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: examining phi: .MEM_92 = PHI <.MEM_41(4), .MEM_103(9)>

common/mc.c:57:9: note: examining phi: ivtmp_10 = PHI <ivtmp_133(4), 2(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_82
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_82;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_81 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_84 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_100 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: === vectorizable_shift ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: x_32 = x_82 + 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: ivtmp_133 = ivtmp_10 - 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_133 != 0)
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: vectorization_factor = 16, niters = 2
common/mc.c:57:9: note: not vectorized: iteration count too small.
common/mc.c:57:9: note: not vectorized: iteration count smaller than vectorization factor.
common/mc.c:57:9: note: bad operation or unsupported loop bound.

Analyzing loop at common/mc.c:74
common/mc.c:74:5: note: ===== analyze_loop_nest =====
common/mc.c:74:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:74:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/mc.c:74:5: note: === vect_analyze_data_refs ===
Creating dr for *pix2_89
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_121
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {0B, +, pretmp_121}_5
Creating dr for *pix3_90
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_138
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {0B, +, pretmp_138}_5
Creating dr for *pix1_91
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_120
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {0B, +, pretmp_120}_5
Creating dr for MEM[(uint8_t *)pix2_89 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_121
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {1B, +, pretmp_121}_5
Creating dr for MEM[(uint8_t *)pix3_90 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_138
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {1B, +, pretmp_138}_5
Creating dr for MEM[(uint8_t *)pix1_91 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_120
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {1B, +, pretmp_120}_5
common/mc.c:74:5: note: got vectype for stmt: _47 = *pix2_89;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: _51 = *pix3_90;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: *pix1_91 = iftmp.0_62;
vector(16) unsigned char
common/mc.c:74:5: note: not vectorized: not suitable for strided load *pix1_91 = iftmp.0_62;

common/mc.c:74:5: note: bad data references.
common/mc.c:117:1: note: vectorized 0 loops in function.
pixel_avg_2x4 (uint8_t * pix1, int i_stride_pix1, uint8_t * pix2, int i_stride_pix2, uint8_t * pix3, int i_stride_pix3, int weight)
{
  int y;
  const int i_weight2;
  uint8_t * dst;
  uint8_t * src1;
  uint8_t * src2;
  int x;
  int y;
  uint8_t * pix1;
  uint8_t * pix2;
  uint8_t * pix3;
  int y;
  unsigned int ivtmp_10;
  sizetype _17;
  uint8_t * _19;
  uint8_t * _21;
  unsigned char _22;
  int _23;
  uint8_t * _25;
  unsigned char _26;
  int _27;
  int _28;
  int _29;
  int _30;
  unsigned char _31;
  unsigned char _47;
  int _48;
  int _49;
  unsigned char _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.0_60;
  unsigned char iftmp.0_61;
  unsigned char iftmp.0_62;
  unsigned char _64;
  int _65;
  int _66;
  unsigned char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  unsigned char iftmp.0_76;
  unsigned char iftmp.0_77;
  unsigned char iftmp.0_78;
  sizetype pretmp_120;
  sizetype pretmp_121;
  unsigned int ivtmp_129;
  unsigned int ivtmp_130;
  unsigned int ivtmp_131;
  unsigned int ivtmp_132;
  unsigned int ivtmp_133;
  sizetype pretmp_138;
  sizetype pretmp_140;
  sizetype pretmp_141;
  sizetype pretmp_142;

  <bb 2>:
  if (weight_1(D) == 32)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  pretmp_140 = (sizetype) i_stride_pix1_4(D);
  pretmp_141 = (sizetype) i_stride_pix2_6(D);
  pretmp_142 = (sizetype) i_stride_pix3_8(D);
  goto <bb 9>;

  <bb 4>:

  <bb 5>:
  # x_82 = PHI <x_32(4), 0(9)>
  # ivtmp_10 = PHI <ivtmp_133(4), 2(9)>
  # DEBUG x => x_82
  _17 = (sizetype) x_82;
  _19 = pix1_81 + _17;
  _21 = pix2_84 + _17;
  _22 = *_21;
  _23 = (int) _22;
  _25 = pix3_100 + _17;
  _26 = *_25;
  _27 = (int) _26;
  _28 = _23 + _27;
  _29 = _28 + 1;
  _30 = _29 >> 1;
  _31 = (unsigned char) _30;
  *_19 = _31;
  x_32 = x_82 + 1;
  # DEBUG x => x_32
  # DEBUG x => x_32
  ivtmp_133 = ivtmp_10 - 1;
  if (ivtmp_133 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  pix2_34 = pix2_84 + pretmp_141;
  # DEBUG src1 => pix2_34
  pix3_36 = pix3_100 + pretmp_142;
  # DEBUG src2 => pix3_36
  pix1_38 = pix1_81 + pretmp_140;
  # DEBUG dst => pix1_38
  y_40 = y_101 + 1;
  # DEBUG y => y_40
  # DEBUG y => y_40
  # DEBUG src2 => pix3_36
  # DEBUG src1 => pix2_34
  # DEBUG dst => pix1_38
  ivtmp_131 = ivtmp_132 - 1;
  if (ivtmp_131 != 0)
    goto <bb 8>;
  else
    goto <bb 13>;

  <bb 13>:

  <bb 7>:
  return;

  <bb 8>:

  <bb 9>:
  # pix1_81 = PHI <pix1_3(D)(3), pix1_38(8)>
  # pix2_84 = PHI <pix2_5(D)(3), pix2_34(8)>
  # pix3_100 = PHI <pix3_7(D)(3), pix3_36(8)>
  # y_101 = PHI <0(3), y_40(8)>
  # ivtmp_132 = PHI <4(3), ivtmp_131(8)>
  # DEBUG y => y_101
  # DEBUG src2 => pix3_100
  # DEBUG src1 => pix2_84
  # DEBUG dst => pix1_81
  # DEBUG x => 0
  goto <bb 5>;

  <bb 10>:
  # DEBUG dst => pix1_3(D)
  # DEBUG i_dst => i_stride_pix1_4(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG i_src1 => i_stride_pix2_6(D)
  # DEBUG src2 => pix3_7(D)
  # DEBUG i_src2 => i_stride_pix3_8(D)
  # DEBUG width => 2
  # DEBUG height => 4
  # DEBUG i_weight1 => weight_1(D)
  i_weight2_11 = 64 - weight_1(D);
  # DEBUG i_weight2 => i_weight2_11
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => pix3_7(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG dst => pix1_3(D)
  pretmp_120 = (sizetype) i_stride_pix1_4(D);
  pretmp_121 = (sizetype) i_stride_pix2_6(D);
  pretmp_138 = (sizetype) i_stride_pix3_8(D);

  <bb 11>:
  # pix2_89 = PHI <pix2_294(12), pix2_5(D)(10)>
  # pix3_90 = PHI <pix3_296(12), pix3_7(D)(10)>
  # pix1_91 = PHI <pix1_292(12), pix1_3(D)(10)>
  # y_108 = PHI <y_290(12), 0(10)>
  # ivtmp_130 = PHI <ivtmp_129(12), 4(10)>
  # DEBUG y => NULL
  # DEBUG src2 => NULL
  # DEBUG src1 => NULL
  # DEBUG dst => NULL
  _47 = *pix2_89;
  _48 = (int) _47;
  _49 = weight_1(D) * _48;
  _51 = *pix3_90;
  _52 = (int) _51;
  _53 = i_weight2_11 * _52;
  _54 = _49 + _53;
  _55 = _54 + 32;
  _56 = _55 >> 6;
  # DEBUG x => NULL
  _57 = _56 & -256;
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.0_60 = (unsigned char) _59;
  iftmp.0_61 = (unsigned char) _56;
  iftmp.0_62 = _57 != 0 ? iftmp.0_60 : iftmp.0_61;
  # DEBUG x => NULL
  *pix1_91 = iftmp.0_62;
  _64 = MEM[(uint8_t *)pix2_89 + 1B];
  _65 = (int) _64;
  _66 = weight_1(D) * _65;
  _67 = MEM[(uint8_t *)pix3_90 + 1B];
  _68 = (int) _67;
  _69 = i_weight2_11 * _68;
  _70 = _66 + _69;
  _71 = _70 + 32;
  _72 = _71 >> 6;
  # DEBUG x => NULL
  _73 = _72 & -256;
  _74 = -_72;
  _75 = _74 >> 31;
  iftmp.0_76 = (unsigned char) _75;
  iftmp.0_77 = (unsigned char) _72;
  iftmp.0_78 = _73 != 0 ? iftmp.0_76 : iftmp.0_77;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_91 + 1B] = iftmp.0_78;
  y_290 = y_108 + 1;
  # DEBUG y => y_290
  pix1_292 = pix1_91 + pretmp_120;
  # DEBUG dst => pix1_292
  pix2_294 = pix2_89 + pretmp_121;
  # DEBUG src1 => pix2_294
  pix3_296 = pix3_90 + pretmp_138;
  # DEBUG src2 => pix3_296
  # DEBUG y => y_290
  # DEBUG src2 => pix3_296
  # DEBUG src1 => pix2_294
  # DEBUG dst => pix1_292
  ivtmp_129 = ivtmp_130 - 1;
  if (ivtmp_129 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 7>;

  <bb 12>:
  goto <bb 11>;

}



;; Function pixel_avg_4x4 (pixel_avg_4x4, funcdef_no=124, decl_uid=5866, cgraph_uid=124, symbol_order=167)


Analyzing loop at common/mc.c:55
common/mc.c:55:5: note: ===== analyze_loop_nest =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/mc.c:55:5: note: Considering outer-loop vectorization.
split exit edge.
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/mc.c:55:5: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_124
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {{0B, +, pretmp_169}_3, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_123
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {{0B, +, pretmp_170}_3, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_113
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {{0B, +, pretmp_166}_3, +, 1}_4
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:55:5: note: analyze in outer-loop: *pix2_124
common/mc.c:55:5: note: failed: evolution of base is not affine.
common/mc.c:55:5: note: bad data references.

Analyzing loop at common/mc.c:57
common/mc.c:57:9: note: ===== analyze_loop_nest =====
common/mc.c:57:9: note: === vect_analyze_loop_form ===
common/mc.c:57:9: note: === get_loop_niters ===
common/mc.c:57:9: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_124
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_124
	Access function 0: {0B, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_123
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_123
	Access function 0: {0B, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_113
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_113
	Access function 0: {0B, +, 1}_4
common/mc.c:57:9: note: got vectype for stmt: _22 = *_21;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: _26 = *_25;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: *_19 = _31;
vector(16) unsigned char
common/mc.c:57:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:57:9: note: Analyze phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Access function of PHI: {0, +, 1}_4
common/mc.c:57:9: note: step: 1,  init: 0
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: Analyze phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: Access function of PHI: {4, +, 4294967295}_4
common/mc.c:57:9: note: step: 4294967295,  init: 4
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: === vect_pattern_recog ===
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:57:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:57:9: note: init: phi relevant? x_114 = PHI <x_32(4), 0(9)>
common/mc.c:57:9: note: init: phi relevant? .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>
common/mc.c:57:9: note: init: phi relevant? ivtmp_10 = PHI <ivtmp_163(4), 4(9)>
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_114
common/mc.c:57:9: note: init: stmt relevant? _17 = (sizetype) x_114;
common/mc.c:57:9: note: init: stmt relevant? _19 = pix1_113 + _17;
common/mc.c:57:9: note: init: stmt relevant? _21 = pix2_124 + _17;
common/mc.c:57:9: note: init: stmt relevant? _22 = *_21;
common/mc.c:57:9: note: init: stmt relevant? _23 = (int) _22;
common/mc.c:57:9: note: init: stmt relevant? _25 = pix3_123 + _17;
common/mc.c:57:9: note: init: stmt relevant? _26 = *_25;
common/mc.c:57:9: note: init: stmt relevant? _27 = (int) _26;
common/mc.c:57:9: note: init: stmt relevant? _28 = _23 + _27;
common/mc.c:57:9: note: init: stmt relevant? _29 = _28 + 1;
common/mc.c:57:9: note: init: stmt relevant? _30 = _29 >> 1;
common/mc.c:57:9: note: init: stmt relevant? _31 = (unsigned char) _30;
common/mc.c:57:9: note: init: stmt relevant? *_19 = _31;
common/mc.c:57:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: init: stmt relevant? x_32 = x_114 + 1;
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? ivtmp_163 = ivtmp_10 - 1;
common/mc.c:57:9: note: init: stmt relevant? if (ivtmp_163 != 0)
common/mc.c:57:9: note: worklist: examine stmt: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _26 = *_25;
common/mc.c:57:9: note: worklist: examine stmt: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _22 = *_21;
common/mc.c:57:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _26 = *_25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _22 = *_21;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: _26 = *_25;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_19 = _31;
  stmt_b: *_19 = _31;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_21 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_21 and *_19
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_25 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_25 and *_19
common/mc.c:57:9: note: === vect_determine_vectorization_factor ===
common/mc.c:57:9: note: ==> examining phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: ==> examining phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: ==> examining phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_114

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_114;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_113 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_124 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_123 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;

common/mc.c:57:9: note: get vectype for scalar type:  uint8_t
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: x_32 = x_114 + 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: ivtmp_163 = ivtmp_10 - 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_163 != 0)

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: vectorization factor = 16
common/mc.c:57:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_21
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_25
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_19
common/mc.c:57:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:57:9: note: improved number of alias checks from 2 to 2
common/mc.c:57:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: vect_can_advance_ivs_p:
common/mc.c:57:9: note: Analyze phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Analyze phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: virtual phi. skip.
common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: === vect_analyze_slp ===
common/mc.c:57:9: note: === vect_make_slp_decision ===
common/mc.c:57:9: note: === vect_detect_hybrid_slp ===
common/mc.c:57:9: note: === vect_analyze_loop_operations ===
common/mc.c:57:9: note: examining phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: examining phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: examining phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_114
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_114;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_113 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_124 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_123 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: === vectorizable_shift ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: x_32 = x_114 + 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: ivtmp_163 = ivtmp_10 - 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_163 != 0)
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: vectorization_factor = 16, niters = 4
common/mc.c:57:9: note: not vectorized: iteration count too small.
common/mc.c:57:9: note: not vectorized: iteration count smaller than vectorization factor.
common/mc.c:57:9: note: bad operation or unsupported loop bound.

Analyzing loop at common/mc.c:74
common/mc.c:74:5: note: ===== analyze_loop_nest =====
common/mc.c:74:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:74:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/mc.c:74:5: note: === vect_analyze_data_refs ===
Creating dr for *pix2_116
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {0B, +, pretmp_167}_5
Creating dr for *pix3_138
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {0B, +, pretmp_164}_5
Creating dr for *pix1_139
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {0B, +, pretmp_168}_5
Creating dr for MEM[(uint8_t *)pix2_116 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {1B, +, pretmp_167}_5
Creating dr for MEM[(uint8_t *)pix3_138 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {1B, +, pretmp_164}_5
Creating dr for MEM[(uint8_t *)pix1_139 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {1B, +, pretmp_168}_5
Creating dr for MEM[(uint8_t *)pix2_116 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {2B, +, pretmp_167}_5
Creating dr for MEM[(uint8_t *)pix3_138 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {2B, +, pretmp_164}_5
Creating dr for MEM[(uint8_t *)pix1_139 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {2B, +, pretmp_168}_5
Creating dr for MEM[(uint8_t *)pix2_116 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {3B, +, pretmp_167}_5
Creating dr for MEM[(uint8_t *)pix3_138 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {3B, +, pretmp_164}_5
Creating dr for MEM[(uint8_t *)pix1_139 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {3B, +, pretmp_168}_5
common/mc.c:74:5: note: got vectype for stmt: _47 = *pix2_116;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: _51 = *pix3_138;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: *pix1_139 = iftmp.0_62;
vector(16) unsigned char
common/mc.c:74:5: note: not vectorized: not suitable for strided load *pix1_139 = iftmp.0_62;

common/mc.c:74:5: note: bad data references.
common/mc.c:115:1: note: vectorized 0 loops in function.
pixel_avg_4x4 (uint8_t * pix1, int i_stride_pix1, uint8_t * pix2, int i_stride_pix2, uint8_t * pix3, int i_stride_pix3, int weight)
{
  int y;
  const int i_weight2;
  uint8_t * dst;
  uint8_t * src1;
  uint8_t * src2;
  int x;
  int y;
  uint8_t * pix1;
  uint8_t * pix2;
  uint8_t * pix3;
  int y;
  unsigned int ivtmp_10;
  sizetype _17;
  uint8_t * _19;
  uint8_t * _21;
  unsigned char _22;
  int _23;
  uint8_t * _25;
  unsigned char _26;
  int _27;
  int _28;
  int _29;
  int _30;
  unsigned char _31;
  unsigned char _47;
  int _48;
  int _49;
  unsigned char _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.0_60;
  unsigned char iftmp.0_61;
  unsigned char iftmp.0_62;
  unsigned char _64;
  int _65;
  int _66;
  unsigned char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  unsigned char iftmp.0_76;
  unsigned char iftmp.0_77;
  unsigned char iftmp.0_78;
  unsigned char _79;
  int _80;
  int _81;
  unsigned char _82;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  unsigned char iftmp.0_91;
  unsigned char iftmp.0_92;
  unsigned char iftmp.0_93;
  unsigned char _94;
  int _95;
  int _96;
  unsigned char _97;
  int _98;
  int _99;
  int _100;
  int _101;
  int _102;
  int _103;
  int _104;
  int _105;
  unsigned char iftmp.0_106;
  unsigned char iftmp.0_107;
  unsigned char iftmp.0_108;
  unsigned int ivtmp_159;
  unsigned int ivtmp_160;
  unsigned int ivtmp_161;
  unsigned int ivtmp_162;
  unsigned int ivtmp_163;
  sizetype pretmp_164;
  sizetype pretmp_166;
  sizetype pretmp_167;
  sizetype pretmp_168;
  sizetype pretmp_169;
  sizetype pretmp_170;

  <bb 2>:
  if (weight_1(D) == 32)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  pretmp_166 = (sizetype) i_stride_pix1_4(D);
  pretmp_169 = (sizetype) i_stride_pix2_6(D);
  pretmp_170 = (sizetype) i_stride_pix3_8(D);
  goto <bb 9>;

  <bb 4>:

  <bb 5>:
  # x_114 = PHI <x_32(4), 0(9)>
  # ivtmp_10 = PHI <ivtmp_163(4), 4(9)>
  # DEBUG x => x_114
  _17 = (sizetype) x_114;
  _19 = pix1_113 + _17;
  _21 = pix2_124 + _17;
  _22 = *_21;
  _23 = (int) _22;
  _25 = pix3_123 + _17;
  _26 = *_25;
  _27 = (int) _26;
  _28 = _23 + _27;
  _29 = _28 + 1;
  _30 = _29 >> 1;
  _31 = (unsigned char) _30;
  *_19 = _31;
  x_32 = x_114 + 1;
  # DEBUG x => x_32
  # DEBUG x => x_32
  ivtmp_163 = ivtmp_10 - 1;
  if (ivtmp_163 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  pix2_34 = pix2_124 + pretmp_169;
  # DEBUG src1 => pix2_34
  pix3_36 = pix3_123 + pretmp_170;
  # DEBUG src2 => pix3_36
  pix1_38 = pix1_113 + pretmp_166;
  # DEBUG dst => pix1_38
  y_40 = y_118 + 1;
  # DEBUG y => y_40
  # DEBUG y => y_40
  # DEBUG src2 => pix3_36
  # DEBUG src1 => pix2_34
  # DEBUG dst => pix1_38
  ivtmp_161 = ivtmp_162 - 1;
  if (ivtmp_161 != 0)
    goto <bb 8>;
  else
    goto <bb 13>;

  <bb 13>:

  <bb 7>:
  return;

  <bb 8>:

  <bb 9>:
  # pix1_113 = PHI <pix1_3(D)(3), pix1_38(8)>
  # pix2_124 = PHI <pix2_5(D)(3), pix2_34(8)>
  # pix3_123 = PHI <pix3_7(D)(3), pix3_36(8)>
  # y_118 = PHI <0(3), y_40(8)>
  # ivtmp_162 = PHI <4(3), ivtmp_161(8)>
  # DEBUG y => y_118
  # DEBUG src2 => pix3_123
  # DEBUG src1 => pix2_124
  # DEBUG dst => pix1_113
  # DEBUG x => 0
  goto <bb 5>;

  <bb 10>:
  # DEBUG dst => pix1_3(D)
  # DEBUG i_dst => i_stride_pix1_4(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG i_src1 => i_stride_pix2_6(D)
  # DEBUG src2 => pix3_7(D)
  # DEBUG i_src2 => i_stride_pix3_8(D)
  # DEBUG width => 4
  # DEBUG height => 4
  # DEBUG i_weight1 => weight_1(D)
  i_weight2_11 = 64 - weight_1(D);
  # DEBUG i_weight2 => i_weight2_11
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => pix3_7(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG dst => pix1_3(D)
  pretmp_168 = (sizetype) i_stride_pix1_4(D);
  pretmp_167 = (sizetype) i_stride_pix2_6(D);
  pretmp_164 = (sizetype) i_stride_pix3_8(D);

  <bb 11>:
  # pix2_116 = PHI <pix2_294(12), pix2_5(D)(10)>
  # pix3_138 = PHI <pix3_296(12), pix3_7(D)(10)>
  # pix1_139 = PHI <pix1_292(12), pix1_3(D)(10)>
  # y_140 = PHI <y_290(12), 0(10)>
  # ivtmp_160 = PHI <ivtmp_159(12), 4(10)>
  # DEBUG y => NULL
  # DEBUG src2 => NULL
  # DEBUG src1 => NULL
  # DEBUG dst => NULL
  _47 = *pix2_116;
  _48 = (int) _47;
  _49 = weight_1(D) * _48;
  _51 = *pix3_138;
  _52 = (int) _51;
  _53 = i_weight2_11 * _52;
  _54 = _49 + _53;
  _55 = _54 + 32;
  _56 = _55 >> 6;
  # DEBUG x => NULL
  _57 = _56 & -256;
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.0_60 = (unsigned char) _59;
  iftmp.0_61 = (unsigned char) _56;
  iftmp.0_62 = _57 != 0 ? iftmp.0_60 : iftmp.0_61;
  # DEBUG x => NULL
  *pix1_139 = iftmp.0_62;
  _64 = MEM[(uint8_t *)pix2_116 + 1B];
  _65 = (int) _64;
  _66 = weight_1(D) * _65;
  _67 = MEM[(uint8_t *)pix3_138 + 1B];
  _68 = (int) _67;
  _69 = i_weight2_11 * _68;
  _70 = _66 + _69;
  _71 = _70 + 32;
  _72 = _71 >> 6;
  # DEBUG x => NULL
  _73 = _72 & -256;
  _74 = -_72;
  _75 = _74 >> 31;
  iftmp.0_76 = (unsigned char) _75;
  iftmp.0_77 = (unsigned char) _72;
  iftmp.0_78 = _73 != 0 ? iftmp.0_76 : iftmp.0_77;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_139 + 1B] = iftmp.0_78;
  _79 = MEM[(uint8_t *)pix2_116 + 2B];
  _80 = (int) _79;
  _81 = weight_1(D) * _80;
  _82 = MEM[(uint8_t *)pix3_138 + 2B];
  _83 = (int) _82;
  _84 = i_weight2_11 * _83;
  _85 = _81 + _84;
  _86 = _85 + 32;
  _87 = _86 >> 6;
  # DEBUG x => NULL
  _88 = _87 & -256;
  _89 = -_87;
  _90 = _89 >> 31;
  iftmp.0_91 = (unsigned char) _90;
  iftmp.0_92 = (unsigned char) _87;
  iftmp.0_93 = _88 != 0 ? iftmp.0_91 : iftmp.0_92;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_139 + 2B] = iftmp.0_93;
  _94 = MEM[(uint8_t *)pix2_116 + 3B];
  _95 = (int) _94;
  _96 = weight_1(D) * _95;
  _97 = MEM[(uint8_t *)pix3_138 + 3B];
  _98 = (int) _97;
  _99 = i_weight2_11 * _98;
  _100 = _96 + _99;
  _101 = _100 + 32;
  _102 = _101 >> 6;
  # DEBUG x => NULL
  _103 = _102 & -256;
  _104 = -_102;
  _105 = _104 >> 31;
  iftmp.0_106 = (unsigned char) _105;
  iftmp.0_107 = (unsigned char) _102;
  iftmp.0_108 = _103 != 0 ? iftmp.0_106 : iftmp.0_107;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_139 + 3B] = iftmp.0_108;
  y_290 = y_140 + 1;
  # DEBUG y => y_290
  pix1_292 = pix1_139 + pretmp_168;
  # DEBUG dst => pix1_292
  pix2_294 = pix2_116 + pretmp_167;
  # DEBUG src1 => pix2_294
  pix3_296 = pix3_138 + pretmp_164;
  # DEBUG src2 => pix3_296
  # DEBUG y => y_290
  # DEBUG src2 => pix3_296
  # DEBUG src1 => pix2_294
  # DEBUG dst => pix1_292
  ivtmp_159 = ivtmp_160 - 1;
  if (ivtmp_159 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 7>;

  <bb 12>:
  goto <bb 11>;

}



;; Function pixel_avg_4x2 (pixel_avg_4x2, funcdef_no=125, decl_uid=5875, cgraph_uid=125, symbol_order=168)


Analyzing loop at common/mc.c:55
common/mc.c:55:5: note: ===== analyze_loop_nest =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/mc.c:55:5: note: Considering outer-loop vectorization.
split exit edge.
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [1, + , 4294967295] != 0
  bounds on difference of bases: -1 ... -1
  result:
    # of iterations 1, bounded by 1
common/mc.c:55:5: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_124
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {{0B, +, pretmp_169}_3, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_123
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {{0B, +, pretmp_170}_3, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_113
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {{0B, +, pretmp_166}_3, +, 1}_4
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:55:5: note: analyze in outer-loop: *pix2_124
common/mc.c:55:5: note: failed: evolution of base is not affine.
common/mc.c:55:5: note: bad data references.

Analyzing loop at common/mc.c:57
common/mc.c:57:9: note: ===== analyze_loop_nest =====
common/mc.c:57:9: note: === vect_analyze_loop_form ===
common/mc.c:57:9: note: === get_loop_niters ===
common/mc.c:57:9: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_124
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_124
	Access function 0: {0B, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_123
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_123
	Access function 0: {0B, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_113
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_113
	Access function 0: {0B, +, 1}_4
common/mc.c:57:9: note: got vectype for stmt: _22 = *_21;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: _26 = *_25;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: *_19 = _31;
vector(16) unsigned char
common/mc.c:57:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:57:9: note: Analyze phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Access function of PHI: {0, +, 1}_4
common/mc.c:57:9: note: step: 1,  init: 0
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: Analyze phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: Access function of PHI: {4, +, 4294967295}_4
common/mc.c:57:9: note: step: 4294967295,  init: 4
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: === vect_pattern_recog ===
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:57:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:57:9: note: init: phi relevant? x_114 = PHI <x_32(4), 0(9)>
common/mc.c:57:9: note: init: phi relevant? .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>
common/mc.c:57:9: note: init: phi relevant? ivtmp_10 = PHI <ivtmp_163(4), 4(9)>
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_114
common/mc.c:57:9: note: init: stmt relevant? _17 = (sizetype) x_114;
common/mc.c:57:9: note: init: stmt relevant? _19 = pix1_113 + _17;
common/mc.c:57:9: note: init: stmt relevant? _21 = pix2_124 + _17;
common/mc.c:57:9: note: init: stmt relevant? _22 = *_21;
common/mc.c:57:9: note: init: stmt relevant? _23 = (int) _22;
common/mc.c:57:9: note: init: stmt relevant? _25 = pix3_123 + _17;
common/mc.c:57:9: note: init: stmt relevant? _26 = *_25;
common/mc.c:57:9: note: init: stmt relevant? _27 = (int) _26;
common/mc.c:57:9: note: init: stmt relevant? _28 = _23 + _27;
common/mc.c:57:9: note: init: stmt relevant? _29 = _28 + 1;
common/mc.c:57:9: note: init: stmt relevant? _30 = _29 >> 1;
common/mc.c:57:9: note: init: stmt relevant? _31 = (unsigned char) _30;
common/mc.c:57:9: note: init: stmt relevant? *_19 = _31;
common/mc.c:57:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: init: stmt relevant? x_32 = x_114 + 1;
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? ivtmp_163 = ivtmp_10 - 1;
common/mc.c:57:9: note: init: stmt relevant? if (ivtmp_163 != 0)
common/mc.c:57:9: note: worklist: examine stmt: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _26 = *_25;
common/mc.c:57:9: note: worklist: examine stmt: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _22 = *_21;
common/mc.c:57:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _26 = *_25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _22 = *_21;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: _26 = *_25;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_19 = _31;
  stmt_b: *_19 = _31;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_21 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_21 and *_19
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_25 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_25 and *_19
common/mc.c:57:9: note: === vect_determine_vectorization_factor ===
common/mc.c:57:9: note: ==> examining phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: ==> examining phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: ==> examining phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_114

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_114;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_113 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_124 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_123 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;

common/mc.c:57:9: note: get vectype for scalar type:  uint8_t
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: x_32 = x_114 + 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: ivtmp_163 = ivtmp_10 - 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_163 != 0)

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: vectorization factor = 16
common/mc.c:57:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_21
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_25
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_19
common/mc.c:57:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:57:9: note: improved number of alias checks from 2 to 2
common/mc.c:57:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: vect_can_advance_ivs_p:
common/mc.c:57:9: note: Analyze phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Analyze phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: virtual phi. skip.
common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: === vect_analyze_slp ===
common/mc.c:57:9: note: === vect_make_slp_decision ===
common/mc.c:57:9: note: === vect_detect_hybrid_slp ===
common/mc.c:57:9: note: === vect_analyze_loop_operations ===
common/mc.c:57:9: note: examining phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: examining phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: examining phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_114
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_114;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_113 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_124 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_123 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: === vectorizable_shift ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: x_32 = x_114 + 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: ivtmp_163 = ivtmp_10 - 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_163 != 0)
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: vectorization_factor = 16, niters = 4
common/mc.c:57:9: note: not vectorized: iteration count too small.
common/mc.c:57:9: note: not vectorized: iteration count smaller than vectorization factor.
common/mc.c:57:9: note: bad operation or unsupported loop bound.

Analyzing loop at common/mc.c:74
common/mc.c:74:5: note: ===== analyze_loop_nest =====
common/mc.c:74:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:74:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [1, + , 4294967295] != 0
  bounds on difference of bases: -1 ... -1
  result:
    # of iterations 1, bounded by 1
common/mc.c:74:5: note: === vect_analyze_data_refs ===
Creating dr for *pix2_116
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {0B, +, pretmp_167}_5
Creating dr for *pix3_138
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {0B, +, pretmp_164}_5
Creating dr for *pix1_139
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {0B, +, pretmp_168}_5
Creating dr for MEM[(uint8_t *)pix2_116 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {1B, +, pretmp_167}_5
Creating dr for MEM[(uint8_t *)pix3_138 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {1B, +, pretmp_164}_5
Creating dr for MEM[(uint8_t *)pix1_139 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {1B, +, pretmp_168}_5
Creating dr for MEM[(uint8_t *)pix2_116 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {2B, +, pretmp_167}_5
Creating dr for MEM[(uint8_t *)pix3_138 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {2B, +, pretmp_164}_5
Creating dr for MEM[(uint8_t *)pix1_139 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {2B, +, pretmp_168}_5
Creating dr for MEM[(uint8_t *)pix2_116 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {3B, +, pretmp_167}_5
Creating dr for MEM[(uint8_t *)pix3_138 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {3B, +, pretmp_164}_5
Creating dr for MEM[(uint8_t *)pix1_139 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {3B, +, pretmp_168}_5
common/mc.c:74:5: note: got vectype for stmt: _47 = *pix2_116;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: _51 = *pix3_138;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: *pix1_139 = iftmp.0_62;
vector(16) unsigned char
common/mc.c:74:5: note: not vectorized: not suitable for strided load *pix1_139 = iftmp.0_62;

common/mc.c:74:5: note: bad data references.
common/mc.c:116:1: note: vectorized 0 loops in function.
pixel_avg_4x2 (uint8_t * pix1, int i_stride_pix1, uint8_t * pix2, int i_stride_pix2, uint8_t * pix3, int i_stride_pix3, int weight)
{
  int y;
  const int i_weight2;
  uint8_t * dst;
  uint8_t * src1;
  uint8_t * src2;
  int x;
  int y;
  uint8_t * pix1;
  uint8_t * pix2;
  uint8_t * pix3;
  int y;
  unsigned int ivtmp_10;
  sizetype _17;
  uint8_t * _19;
  uint8_t * _21;
  unsigned char _22;
  int _23;
  uint8_t * _25;
  unsigned char _26;
  int _27;
  int _28;
  int _29;
  int _30;
  unsigned char _31;
  unsigned char _47;
  int _48;
  int _49;
  unsigned char _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.0_60;
  unsigned char iftmp.0_61;
  unsigned char iftmp.0_62;
  unsigned char _64;
  int _65;
  int _66;
  unsigned char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  unsigned char iftmp.0_76;
  unsigned char iftmp.0_77;
  unsigned char iftmp.0_78;
  unsigned char _79;
  int _80;
  int _81;
  unsigned char _82;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  unsigned char iftmp.0_91;
  unsigned char iftmp.0_92;
  unsigned char iftmp.0_93;
  unsigned char _94;
  int _95;
  int _96;
  unsigned char _97;
  int _98;
  int _99;
  int _100;
  int _101;
  int _102;
  int _103;
  int _104;
  int _105;
  unsigned char iftmp.0_106;
  unsigned char iftmp.0_107;
  unsigned char iftmp.0_108;
  unsigned int ivtmp_159;
  unsigned int ivtmp_160;
  unsigned int ivtmp_161;
  unsigned int ivtmp_162;
  unsigned int ivtmp_163;
  sizetype pretmp_164;
  sizetype pretmp_166;
  sizetype pretmp_167;
  sizetype pretmp_168;
  sizetype pretmp_169;
  sizetype pretmp_170;

  <bb 2>:
  if (weight_1(D) == 32)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  pretmp_166 = (sizetype) i_stride_pix1_4(D);
  pretmp_169 = (sizetype) i_stride_pix2_6(D);
  pretmp_170 = (sizetype) i_stride_pix3_8(D);
  goto <bb 9>;

  <bb 4>:

  <bb 5>:
  # x_114 = PHI <x_32(4), 0(9)>
  # ivtmp_10 = PHI <ivtmp_163(4), 4(9)>
  # DEBUG x => x_114
  _17 = (sizetype) x_114;
  _19 = pix1_113 + _17;
  _21 = pix2_124 + _17;
  _22 = *_21;
  _23 = (int) _22;
  _25 = pix3_123 + _17;
  _26 = *_25;
  _27 = (int) _26;
  _28 = _23 + _27;
  _29 = _28 + 1;
  _30 = _29 >> 1;
  _31 = (unsigned char) _30;
  *_19 = _31;
  x_32 = x_114 + 1;
  # DEBUG x => x_32
  # DEBUG x => x_32
  ivtmp_163 = ivtmp_10 - 1;
  if (ivtmp_163 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  pix2_34 = pix2_124 + pretmp_169;
  # DEBUG src1 => pix2_34
  pix3_36 = pix3_123 + pretmp_170;
  # DEBUG src2 => pix3_36
  pix1_38 = pix1_113 + pretmp_166;
  # DEBUG dst => pix1_38
  y_40 = y_118 + 1;
  # DEBUG y => y_40
  # DEBUG y => y_40
  # DEBUG src2 => pix3_36
  # DEBUG src1 => pix2_34
  # DEBUG dst => pix1_38
  ivtmp_161 = ivtmp_162 - 1;
  if (ivtmp_161 != 0)
    goto <bb 8>;
  else
    goto <bb 13>;

  <bb 13>:

  <bb 7>:
  return;

  <bb 8>:

  <bb 9>:
  # pix1_113 = PHI <pix1_3(D)(3), pix1_38(8)>
  # pix2_124 = PHI <pix2_5(D)(3), pix2_34(8)>
  # pix3_123 = PHI <pix3_7(D)(3), pix3_36(8)>
  # y_118 = PHI <0(3), y_40(8)>
  # ivtmp_162 = PHI <2(3), ivtmp_161(8)>
  # DEBUG y => y_118
  # DEBUG src2 => pix3_123
  # DEBUG src1 => pix2_124
  # DEBUG dst => pix1_113
  # DEBUG x => 0
  goto <bb 5>;

  <bb 10>:
  # DEBUG dst => pix1_3(D)
  # DEBUG i_dst => i_stride_pix1_4(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG i_src1 => i_stride_pix2_6(D)
  # DEBUG src2 => pix3_7(D)
  # DEBUG i_src2 => i_stride_pix3_8(D)
  # DEBUG width => 4
  # DEBUG height => 2
  # DEBUG i_weight1 => weight_1(D)
  i_weight2_11 = 64 - weight_1(D);
  # DEBUG i_weight2 => i_weight2_11
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => pix3_7(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG dst => pix1_3(D)
  pretmp_168 = (sizetype) i_stride_pix1_4(D);
  pretmp_167 = (sizetype) i_stride_pix2_6(D);
  pretmp_164 = (sizetype) i_stride_pix3_8(D);

  <bb 11>:
  # pix2_116 = PHI <pix2_294(12), pix2_5(D)(10)>
  # pix3_138 = PHI <pix3_296(12), pix3_7(D)(10)>
  # pix1_139 = PHI <pix1_292(12), pix1_3(D)(10)>
  # y_140 = PHI <y_290(12), 0(10)>
  # ivtmp_160 = PHI <ivtmp_159(12), 2(10)>
  # DEBUG y => NULL
  # DEBUG src2 => NULL
  # DEBUG src1 => NULL
  # DEBUG dst => NULL
  _47 = *pix2_116;
  _48 = (int) _47;
  _49 = weight_1(D) * _48;
  _51 = *pix3_138;
  _52 = (int) _51;
  _53 = i_weight2_11 * _52;
  _54 = _49 + _53;
  _55 = _54 + 32;
  _56 = _55 >> 6;
  # DEBUG x => NULL
  _57 = _56 & -256;
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.0_60 = (unsigned char) _59;
  iftmp.0_61 = (unsigned char) _56;
  iftmp.0_62 = _57 != 0 ? iftmp.0_60 : iftmp.0_61;
  # DEBUG x => NULL
  *pix1_139 = iftmp.0_62;
  _64 = MEM[(uint8_t *)pix2_116 + 1B];
  _65 = (int) _64;
  _66 = weight_1(D) * _65;
  _67 = MEM[(uint8_t *)pix3_138 + 1B];
  _68 = (int) _67;
  _69 = i_weight2_11 * _68;
  _70 = _66 + _69;
  _71 = _70 + 32;
  _72 = _71 >> 6;
  # DEBUG x => NULL
  _73 = _72 & -256;
  _74 = -_72;
  _75 = _74 >> 31;
  iftmp.0_76 = (unsigned char) _75;
  iftmp.0_77 = (unsigned char) _72;
  iftmp.0_78 = _73 != 0 ? iftmp.0_76 : iftmp.0_77;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_139 + 1B] = iftmp.0_78;
  _79 = MEM[(uint8_t *)pix2_116 + 2B];
  _80 = (int) _79;
  _81 = weight_1(D) * _80;
  _82 = MEM[(uint8_t *)pix3_138 + 2B];
  _83 = (int) _82;
  _84 = i_weight2_11 * _83;
  _85 = _81 + _84;
  _86 = _85 + 32;
  _87 = _86 >> 6;
  # DEBUG x => NULL
  _88 = _87 & -256;
  _89 = -_87;
  _90 = _89 >> 31;
  iftmp.0_91 = (unsigned char) _90;
  iftmp.0_92 = (unsigned char) _87;
  iftmp.0_93 = _88 != 0 ? iftmp.0_91 : iftmp.0_92;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_139 + 2B] = iftmp.0_93;
  _94 = MEM[(uint8_t *)pix2_116 + 3B];
  _95 = (int) _94;
  _96 = weight_1(D) * _95;
  _97 = MEM[(uint8_t *)pix3_138 + 3B];
  _98 = (int) _97;
  _99 = i_weight2_11 * _98;
  _100 = _96 + _99;
  _101 = _100 + 32;
  _102 = _101 >> 6;
  # DEBUG x => NULL
  _103 = _102 & -256;
  _104 = -_102;
  _105 = _104 >> 31;
  iftmp.0_106 = (unsigned char) _105;
  iftmp.0_107 = (unsigned char) _102;
  iftmp.0_108 = _103 != 0 ? iftmp.0_106 : iftmp.0_107;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_139 + 3B] = iftmp.0_108;
  y_290 = y_140 + 1;
  # DEBUG y => y_290
  pix1_292 = pix1_139 + pretmp_168;
  # DEBUG dst => pix1_292
  pix2_294 = pix2_116 + pretmp_167;
  # DEBUG src1 => pix2_294
  pix3_296 = pix3_138 + pretmp_164;
  # DEBUG src2 => pix3_296
  # DEBUG y => y_290
  # DEBUG src2 => pix3_296
  # DEBUG src1 => pix2_294
  # DEBUG dst => pix1_292
  ivtmp_159 = ivtmp_160 - 1;
  if (ivtmp_159 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 7>;

  <bb 12>:
  goto <bb 11>;

}



;; Function pixel_avg_4x8 (pixel_avg_4x8, funcdef_no=123, decl_uid=5857, cgraph_uid=123, symbol_order=166)


Analyzing loop at common/mc.c:55
common/mc.c:55:5: note: ===== analyze_loop_nest =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/mc.c:55:5: note: Considering outer-loop vectorization.
split exit edge.
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/mc.c:55:5: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_124
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {{0B, +, pretmp_169}_3, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_123
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {{0B, +, pretmp_170}_3, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_113
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {{0B, +, pretmp_166}_3, +, 1}_4
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:55:5: note: analyze in outer-loop: *pix2_124
common/mc.c:55:5: note: failed: evolution of base is not affine.
common/mc.c:55:5: note: bad data references.

Analyzing loop at common/mc.c:57
common/mc.c:57:9: note: ===== analyze_loop_nest =====
common/mc.c:57:9: note: === vect_analyze_loop_form ===
common/mc.c:57:9: note: === get_loop_niters ===
common/mc.c:57:9: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_124
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_124
	Access function 0: {0B, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_123
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_123
	Access function 0: {0B, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_113
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_113
	Access function 0: {0B, +, 1}_4
common/mc.c:57:9: note: got vectype for stmt: _22 = *_21;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: _26 = *_25;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: *_19 = _31;
vector(16) unsigned char
common/mc.c:57:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:57:9: note: Analyze phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Access function of PHI: {0, +, 1}_4
common/mc.c:57:9: note: step: 1,  init: 0
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: Analyze phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: Access function of PHI: {4, +, 4294967295}_4
common/mc.c:57:9: note: step: 4294967295,  init: 4
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: === vect_pattern_recog ===
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:57:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:57:9: note: init: phi relevant? x_114 = PHI <x_32(4), 0(9)>
common/mc.c:57:9: note: init: phi relevant? .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>
common/mc.c:57:9: note: init: phi relevant? ivtmp_10 = PHI <ivtmp_163(4), 4(9)>
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_114
common/mc.c:57:9: note: init: stmt relevant? _17 = (sizetype) x_114;
common/mc.c:57:9: note: init: stmt relevant? _19 = pix1_113 + _17;
common/mc.c:57:9: note: init: stmt relevant? _21 = pix2_124 + _17;
common/mc.c:57:9: note: init: stmt relevant? _22 = *_21;
common/mc.c:57:9: note: init: stmt relevant? _23 = (int) _22;
common/mc.c:57:9: note: init: stmt relevant? _25 = pix3_123 + _17;
common/mc.c:57:9: note: init: stmt relevant? _26 = *_25;
common/mc.c:57:9: note: init: stmt relevant? _27 = (int) _26;
common/mc.c:57:9: note: init: stmt relevant? _28 = _23 + _27;
common/mc.c:57:9: note: init: stmt relevant? _29 = _28 + 1;
common/mc.c:57:9: note: init: stmt relevant? _30 = _29 >> 1;
common/mc.c:57:9: note: init: stmt relevant? _31 = (unsigned char) _30;
common/mc.c:57:9: note: init: stmt relevant? *_19 = _31;
common/mc.c:57:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: init: stmt relevant? x_32 = x_114 + 1;
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? ivtmp_163 = ivtmp_10 - 1;
common/mc.c:57:9: note: init: stmt relevant? if (ivtmp_163 != 0)
common/mc.c:57:9: note: worklist: examine stmt: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _26 = *_25;
common/mc.c:57:9: note: worklist: examine stmt: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _22 = *_21;
common/mc.c:57:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _26 = *_25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _22 = *_21;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: _26 = *_25;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_19 = _31;
  stmt_b: *_19 = _31;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_21 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_21 and *_19
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_25 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_25 and *_19
common/mc.c:57:9: note: === vect_determine_vectorization_factor ===
common/mc.c:57:9: note: ==> examining phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: ==> examining phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: ==> examining phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_114

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_114;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_113 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_124 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_123 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;

common/mc.c:57:9: note: get vectype for scalar type:  uint8_t
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: x_32 = x_114 + 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: ivtmp_163 = ivtmp_10 - 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_163 != 0)

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: vectorization factor = 16
common/mc.c:57:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_21
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_25
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_19
common/mc.c:57:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:57:9: note: improved number of alias checks from 2 to 2
common/mc.c:57:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: vect_can_advance_ivs_p:
common/mc.c:57:9: note: Analyze phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Analyze phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: virtual phi. skip.
common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: === vect_analyze_slp ===
common/mc.c:57:9: note: === vect_make_slp_decision ===
common/mc.c:57:9: note: === vect_detect_hybrid_slp ===
common/mc.c:57:9: note: === vect_analyze_loop_operations ===
common/mc.c:57:9: note: examining phi: x_114 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: examining phi: .MEM_117 = PHI <.MEM_41(4), .MEM_115(9)>

common/mc.c:57:9: note: examining phi: ivtmp_10 = PHI <ivtmp_163(4), 4(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_114
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_114;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_113 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_124 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_123 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: === vectorizable_shift ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: x_32 = x_114 + 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: ivtmp_163 = ivtmp_10 - 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_163 != 0)
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: vectorization_factor = 16, niters = 4
common/mc.c:57:9: note: not vectorized: iteration count too small.
common/mc.c:57:9: note: not vectorized: iteration count smaller than vectorization factor.
common/mc.c:57:9: note: bad operation or unsupported loop bound.

Analyzing loop at common/mc.c:74
common/mc.c:74:5: note: ===== analyze_loop_nest =====
common/mc.c:74:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:74:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/mc.c:74:5: note: === vect_analyze_data_refs ===
Creating dr for *pix2_116
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {0B, +, pretmp_167}_5
Creating dr for *pix3_138
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {0B, +, pretmp_164}_5
Creating dr for *pix1_139
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {0B, +, pretmp_168}_5
Creating dr for MEM[(uint8_t *)pix2_116 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {1B, +, pretmp_167}_5
Creating dr for MEM[(uint8_t *)pix3_138 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {1B, +, pretmp_164}_5
Creating dr for MEM[(uint8_t *)pix1_139 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {1B, +, pretmp_168}_5
Creating dr for MEM[(uint8_t *)pix2_116 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {2B, +, pretmp_167}_5
Creating dr for MEM[(uint8_t *)pix3_138 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {2B, +, pretmp_164}_5
Creating dr for MEM[(uint8_t *)pix1_139 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {2B, +, pretmp_168}_5
Creating dr for MEM[(uint8_t *)pix2_116 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_167
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {3B, +, pretmp_167}_5
Creating dr for MEM[(uint8_t *)pix3_138 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_164
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {3B, +, pretmp_164}_5
Creating dr for MEM[(uint8_t *)pix1_139 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_168
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {3B, +, pretmp_168}_5
common/mc.c:74:5: note: got vectype for stmt: _47 = *pix2_116;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: _51 = *pix3_138;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: *pix1_139 = iftmp.0_62;
vector(16) unsigned char
common/mc.c:74:5: note: not vectorized: not suitable for strided load *pix1_139 = iftmp.0_62;

common/mc.c:74:5: note: bad data references.
common/mc.c:114:1: note: vectorized 0 loops in function.
pixel_avg_4x8 (uint8_t * pix1, int i_stride_pix1, uint8_t * pix2, int i_stride_pix2, uint8_t * pix3, int i_stride_pix3, int weight)
{
  int y;
  const int i_weight2;
  uint8_t * dst;
  uint8_t * src1;
  uint8_t * src2;
  int x;
  int y;
  uint8_t * pix1;
  uint8_t * pix2;
  uint8_t * pix3;
  int y;
  unsigned int ivtmp_10;
  sizetype _17;
  uint8_t * _19;
  uint8_t * _21;
  unsigned char _22;
  int _23;
  uint8_t * _25;
  unsigned char _26;
  int _27;
  int _28;
  int _29;
  int _30;
  unsigned char _31;
  unsigned char _47;
  int _48;
  int _49;
  unsigned char _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.0_60;
  unsigned char iftmp.0_61;
  unsigned char iftmp.0_62;
  unsigned char _64;
  int _65;
  int _66;
  unsigned char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  unsigned char iftmp.0_76;
  unsigned char iftmp.0_77;
  unsigned char iftmp.0_78;
  unsigned char _79;
  int _80;
  int _81;
  unsigned char _82;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  unsigned char iftmp.0_91;
  unsigned char iftmp.0_92;
  unsigned char iftmp.0_93;
  unsigned char _94;
  int _95;
  int _96;
  unsigned char _97;
  int _98;
  int _99;
  int _100;
  int _101;
  int _102;
  int _103;
  int _104;
  int _105;
  unsigned char iftmp.0_106;
  unsigned char iftmp.0_107;
  unsigned char iftmp.0_108;
  unsigned int ivtmp_159;
  unsigned int ivtmp_160;
  unsigned int ivtmp_161;
  unsigned int ivtmp_162;
  unsigned int ivtmp_163;
  sizetype pretmp_164;
  sizetype pretmp_166;
  sizetype pretmp_167;
  sizetype pretmp_168;
  sizetype pretmp_169;
  sizetype pretmp_170;

  <bb 2>:
  if (weight_1(D) == 32)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  pretmp_166 = (sizetype) i_stride_pix1_4(D);
  pretmp_169 = (sizetype) i_stride_pix2_6(D);
  pretmp_170 = (sizetype) i_stride_pix3_8(D);
  goto <bb 9>;

  <bb 4>:

  <bb 5>:
  # x_114 = PHI <x_32(4), 0(9)>
  # ivtmp_10 = PHI <ivtmp_163(4), 4(9)>
  # DEBUG x => x_114
  _17 = (sizetype) x_114;
  _19 = pix1_113 + _17;
  _21 = pix2_124 + _17;
  _22 = *_21;
  _23 = (int) _22;
  _25 = pix3_123 + _17;
  _26 = *_25;
  _27 = (int) _26;
  _28 = _23 + _27;
  _29 = _28 + 1;
  _30 = _29 >> 1;
  _31 = (unsigned char) _30;
  *_19 = _31;
  x_32 = x_114 + 1;
  # DEBUG x => x_32
  # DEBUG x => x_32
  ivtmp_163 = ivtmp_10 - 1;
  if (ivtmp_163 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  pix2_34 = pix2_124 + pretmp_169;
  # DEBUG src1 => pix2_34
  pix3_36 = pix3_123 + pretmp_170;
  # DEBUG src2 => pix3_36
  pix1_38 = pix1_113 + pretmp_166;
  # DEBUG dst => pix1_38
  y_40 = y_118 + 1;
  # DEBUG y => y_40
  # DEBUG y => y_40
  # DEBUG src2 => pix3_36
  # DEBUG src1 => pix2_34
  # DEBUG dst => pix1_38
  ivtmp_161 = ivtmp_162 - 1;
  if (ivtmp_161 != 0)
    goto <bb 8>;
  else
    goto <bb 13>;

  <bb 13>:

  <bb 7>:
  return;

  <bb 8>:

  <bb 9>:
  # pix1_113 = PHI <pix1_3(D)(3), pix1_38(8)>
  # pix2_124 = PHI <pix2_5(D)(3), pix2_34(8)>
  # pix3_123 = PHI <pix3_7(D)(3), pix3_36(8)>
  # y_118 = PHI <0(3), y_40(8)>
  # ivtmp_162 = PHI <8(3), ivtmp_161(8)>
  # DEBUG y => y_118
  # DEBUG src2 => pix3_123
  # DEBUG src1 => pix2_124
  # DEBUG dst => pix1_113
  # DEBUG x => 0
  goto <bb 5>;

  <bb 10>:
  # DEBUG dst => pix1_3(D)
  # DEBUG i_dst => i_stride_pix1_4(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG i_src1 => i_stride_pix2_6(D)
  # DEBUG src2 => pix3_7(D)
  # DEBUG i_src2 => i_stride_pix3_8(D)
  # DEBUG width => 4
  # DEBUG height => 8
  # DEBUG i_weight1 => weight_1(D)
  i_weight2_11 = 64 - weight_1(D);
  # DEBUG i_weight2 => i_weight2_11
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => pix3_7(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG dst => pix1_3(D)
  pretmp_168 = (sizetype) i_stride_pix1_4(D);
  pretmp_167 = (sizetype) i_stride_pix2_6(D);
  pretmp_164 = (sizetype) i_stride_pix3_8(D);

  <bb 11>:
  # pix2_116 = PHI <pix2_294(12), pix2_5(D)(10)>
  # pix3_138 = PHI <pix3_296(12), pix3_7(D)(10)>
  # pix1_139 = PHI <pix1_292(12), pix1_3(D)(10)>
  # y_140 = PHI <y_290(12), 0(10)>
  # ivtmp_160 = PHI <ivtmp_159(12), 8(10)>
  # DEBUG y => NULL
  # DEBUG src2 => NULL
  # DEBUG src1 => NULL
  # DEBUG dst => NULL
  _47 = *pix2_116;
  _48 = (int) _47;
  _49 = weight_1(D) * _48;
  _51 = *pix3_138;
  _52 = (int) _51;
  _53 = i_weight2_11 * _52;
  _54 = _49 + _53;
  _55 = _54 + 32;
  _56 = _55 >> 6;
  # DEBUG x => NULL
  _57 = _56 & -256;
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.0_60 = (unsigned char) _59;
  iftmp.0_61 = (unsigned char) _56;
  iftmp.0_62 = _57 != 0 ? iftmp.0_60 : iftmp.0_61;
  # DEBUG x => NULL
  *pix1_139 = iftmp.0_62;
  _64 = MEM[(uint8_t *)pix2_116 + 1B];
  _65 = (int) _64;
  _66 = weight_1(D) * _65;
  _67 = MEM[(uint8_t *)pix3_138 + 1B];
  _68 = (int) _67;
  _69 = i_weight2_11 * _68;
  _70 = _66 + _69;
  _71 = _70 + 32;
  _72 = _71 >> 6;
  # DEBUG x => NULL
  _73 = _72 & -256;
  _74 = -_72;
  _75 = _74 >> 31;
  iftmp.0_76 = (unsigned char) _75;
  iftmp.0_77 = (unsigned char) _72;
  iftmp.0_78 = _73 != 0 ? iftmp.0_76 : iftmp.0_77;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_139 + 1B] = iftmp.0_78;
  _79 = MEM[(uint8_t *)pix2_116 + 2B];
  _80 = (int) _79;
  _81 = weight_1(D) * _80;
  _82 = MEM[(uint8_t *)pix3_138 + 2B];
  _83 = (int) _82;
  _84 = i_weight2_11 * _83;
  _85 = _81 + _84;
  _86 = _85 + 32;
  _87 = _86 >> 6;
  # DEBUG x => NULL
  _88 = _87 & -256;
  _89 = -_87;
  _90 = _89 >> 31;
  iftmp.0_91 = (unsigned char) _90;
  iftmp.0_92 = (unsigned char) _87;
  iftmp.0_93 = _88 != 0 ? iftmp.0_91 : iftmp.0_92;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_139 + 2B] = iftmp.0_93;
  _94 = MEM[(uint8_t *)pix2_116 + 3B];
  _95 = (int) _94;
  _96 = weight_1(D) * _95;
  _97 = MEM[(uint8_t *)pix3_138 + 3B];
  _98 = (int) _97;
  _99 = i_weight2_11 * _98;
  _100 = _96 + _99;
  _101 = _100 + 32;
  _102 = _101 >> 6;
  # DEBUG x => NULL
  _103 = _102 & -256;
  _104 = -_102;
  _105 = _104 >> 31;
  iftmp.0_106 = (unsigned char) _105;
  iftmp.0_107 = (unsigned char) _102;
  iftmp.0_108 = _103 != 0 ? iftmp.0_106 : iftmp.0_107;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_139 + 3B] = iftmp.0_108;
  y_290 = y_140 + 1;
  # DEBUG y => y_290
  pix1_292 = pix1_139 + pretmp_168;
  # DEBUG dst => pix1_292
  pix2_294 = pix2_116 + pretmp_167;
  # DEBUG src1 => pix2_294
  pix3_296 = pix3_138 + pretmp_164;
  # DEBUG src2 => pix3_296
  # DEBUG y => y_290
  # DEBUG src2 => pix3_296
  # DEBUG src1 => pix2_294
  # DEBUG dst => pix1_292
  ivtmp_159 = ivtmp_160 - 1;
  if (ivtmp_159 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 7>;

  <bb 12>:
  goto <bb 11>;

}



;; Function pixel_avg_8x16 (pixel_avg_8x16, funcdef_no=120, decl_uid=5830, cgraph_uid=120, symbol_order=163)


Analyzing loop at common/mc.c:55
common/mc.c:55:5: note: ===== analyze_loop_nest =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/mc.c:55:5: note: Considering outer-loop vectorization.
split exit edge.
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/mc.c:55:5: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_200
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {{0B, +, pretmp_237}_3, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_199
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {{0B, +, pretmp_238}_3, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_177
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {{0B, +, pretmp_236}_3, +, 1}_4
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:55:5: note: analyze in outer-loop: *pix2_200
common/mc.c:55:5: note: failed: evolution of base is not affine.
common/mc.c:55:5: note: bad data references.

Analyzing loop at common/mc.c:57
common/mc.c:57:9: note: ===== analyze_loop_nest =====
common/mc.c:57:9: note: === vect_analyze_loop_form ===
common/mc.c:57:9: note: === get_loop_niters ===
common/mc.c:57:9: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_200
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_200
	Access function 0: {0B, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_199
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_199
	Access function 0: {0B, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_177
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_177
	Access function 0: {0B, +, 1}_4
common/mc.c:57:9: note: got vectype for stmt: _22 = *_21;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: _26 = *_25;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: *_19 = _31;
vector(16) unsigned char
common/mc.c:57:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:57:9: note: Analyze phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Access function of PHI: {0, +, 1}_4
common/mc.c:57:9: note: step: 1,  init: 0
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: Analyze phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: Access function of PHI: {8, +, 4294967295}_4
common/mc.c:57:9: note: step: 4294967295,  init: 8
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: === vect_pattern_recog ===
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:57:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:57:9: note: init: phi relevant? x_178 = PHI <x_32(4), 0(9)>
common/mc.c:57:9: note: init: phi relevant? .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>
common/mc.c:57:9: note: init: phi relevant? ivtmp_10 = PHI <ivtmp_230(4), 8(9)>
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_178
common/mc.c:57:9: note: init: stmt relevant? _17 = (sizetype) x_178;
common/mc.c:57:9: note: init: stmt relevant? _19 = pix1_177 + _17;
common/mc.c:57:9: note: init: stmt relevant? _21 = pix2_200 + _17;
common/mc.c:57:9: note: init: stmt relevant? _22 = *_21;
common/mc.c:57:9: note: init: stmt relevant? _23 = (int) _22;
common/mc.c:57:9: note: init: stmt relevant? _25 = pix3_199 + _17;
common/mc.c:57:9: note: init: stmt relevant? _26 = *_25;
common/mc.c:57:9: note: init: stmt relevant? _27 = (int) _26;
common/mc.c:57:9: note: init: stmt relevant? _28 = _23 + _27;
common/mc.c:57:9: note: init: stmt relevant? _29 = _28 + 1;
common/mc.c:57:9: note: init: stmt relevant? _30 = _29 >> 1;
common/mc.c:57:9: note: init: stmt relevant? _31 = (unsigned char) _30;
common/mc.c:57:9: note: init: stmt relevant? *_19 = _31;
common/mc.c:57:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: init: stmt relevant? x_32 = x_178 + 1;
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? ivtmp_230 = ivtmp_10 - 1;
common/mc.c:57:9: note: init: stmt relevant? if (ivtmp_230 != 0)
common/mc.c:57:9: note: worklist: examine stmt: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _26 = *_25;
common/mc.c:57:9: note: worklist: examine stmt: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _22 = *_21;
common/mc.c:57:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _26 = *_25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _22 = *_21;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: _26 = *_25;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_19 = _31;
  stmt_b: *_19 = _31;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_21 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_21 and *_19
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_25 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_25 and *_19
common/mc.c:57:9: note: === vect_determine_vectorization_factor ===
common/mc.c:57:9: note: ==> examining phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: ==> examining phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: ==> examining phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_178

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_178;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_177 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_200 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_199 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;

common/mc.c:57:9: note: get vectype for scalar type:  uint8_t
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: x_32 = x_178 + 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: ivtmp_230 = ivtmp_10 - 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_230 != 0)

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: vectorization factor = 16
common/mc.c:57:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_21
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_25
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_19
common/mc.c:57:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:57:9: note: improved number of alias checks from 2 to 2
common/mc.c:57:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: vect_can_advance_ivs_p:
common/mc.c:57:9: note: Analyze phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Analyze phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: virtual phi. skip.
common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: === vect_analyze_slp ===
common/mc.c:57:9: note: === vect_make_slp_decision ===
common/mc.c:57:9: note: === vect_detect_hybrid_slp ===
common/mc.c:57:9: note: === vect_analyze_loop_operations ===
common/mc.c:57:9: note: examining phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: examining phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: examining phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_178
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_178;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_177 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_200 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_199 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: === vectorizable_shift ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: x_32 = x_178 + 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: ivtmp_230 = ivtmp_10 - 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_230 != 0)
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: vectorization_factor = 16, niters = 8
common/mc.c:57:9: note: not vectorized: iteration count too small.
common/mc.c:57:9: note: not vectorized: iteration count smaller than vectorization factor.
common/mc.c:57:9: note: bad operation or unsupported loop bound.

Analyzing loop at common/mc.c:74
common/mc.c:74:5: note: ===== analyze_loop_nest =====
common/mc.c:74:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:74:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/mc.c:74:5: note: === vect_analyze_data_refs ===
Creating dr for *pix2_182
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {0B, +, pretmp_233}_5
Creating dr for *pix3_193
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {0B, +, pretmp_234}_5
Creating dr for *pix1_192
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {0B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {1B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {1B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {1B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {2B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {2B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {2B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {3B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {3B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {3B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {4B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {4B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {4B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {5B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {5B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {5B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {6B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {6B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {6B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {7B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {7B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {7B, +, pretmp_232}_5
common/mc.c:74:5: note: got vectype for stmt: _47 = *pix2_182;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: _51 = *pix3_193;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: *pix1_192 = iftmp.0_62;
vector(16) unsigned char
common/mc.c:74:5: note: not vectorized: not suitable for strided load *pix1_192 = iftmp.0_62;

common/mc.c:74:5: note: bad data references.
common/mc.c:111:1: note: vectorized 0 loops in function.
pixel_avg_8x16 (uint8_t * pix1, int i_stride_pix1, uint8_t * pix2, int i_stride_pix2, uint8_t * pix3, int i_stride_pix3, int weight)
{
  int y;
  const int i_weight2;
  uint8_t * dst;
  uint8_t * src1;
  uint8_t * src2;
  int x;
  int y;
  uint8_t * pix1;
  uint8_t * pix2;
  uint8_t * pix3;
  int y;
  unsigned int ivtmp_10;
  sizetype _17;
  uint8_t * _19;
  uint8_t * _21;
  unsigned char _22;
  int _23;
  uint8_t * _25;
  unsigned char _26;
  int _27;
  int _28;
  int _29;
  int _30;
  unsigned char _31;
  unsigned char _47;
  int _48;
  int _49;
  unsigned char _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.0_60;
  unsigned char iftmp.0_61;
  unsigned char iftmp.0_62;
  unsigned char _64;
  int _65;
  int _66;
  unsigned char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  unsigned char iftmp.0_76;
  unsigned char iftmp.0_77;
  unsigned char iftmp.0_78;
  unsigned char _79;
  int _80;
  int _81;
  unsigned char _82;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  unsigned char iftmp.0_91;
  unsigned char iftmp.0_92;
  unsigned char iftmp.0_93;
  unsigned char _94;
  int _95;
  int _96;
  unsigned char _97;
  int _98;
  int _99;
  int _100;
  int _101;
  int _102;
  int _103;
  int _104;
  int _105;
  unsigned char iftmp.0_106;
  unsigned char iftmp.0_107;
  unsigned char iftmp.0_108;
  unsigned char _109;
  int _110;
  int _111;
  unsigned char _112;
  int _113;
  int _114;
  int _115;
  int _116;
  int _117;
  int _118;
  int _119;
  int _120;
  unsigned char iftmp.0_121;
  unsigned char iftmp.0_122;
  unsigned char iftmp.0_123;
  unsigned char _124;
  int _125;
  int _126;
  unsigned char _127;
  int _128;
  int _129;
  int _130;
  int _131;
  int _132;
  int _133;
  int _134;
  int _135;
  unsigned char iftmp.0_136;
  unsigned char iftmp.0_137;
  unsigned char iftmp.0_138;
  unsigned char _139;
  int _140;
  int _141;
  unsigned char _142;
  int _143;
  int _144;
  int _145;
  int _146;
  int _147;
  int _148;
  int _149;
  int _150;
  unsigned char iftmp.0_151;
  unsigned char iftmp.0_152;
  unsigned char iftmp.0_153;
  unsigned char _154;
  int _155;
  int _156;
  unsigned char _157;
  int _158;
  int _159;
  int _160;
  int _161;
  int _162;
  int _163;
  int _164;
  int _165;
  unsigned char iftmp.0_166;
  unsigned char iftmp.0_167;
  unsigned char iftmp.0_168;
  unsigned int ivtmp_222;
  unsigned int ivtmp_223;
  unsigned int ivtmp_228;
  unsigned int ivtmp_229;
  unsigned int ivtmp_230;
  sizetype pretmp_232;
  sizetype pretmp_233;
  sizetype pretmp_234;
  sizetype pretmp_236;
  sizetype pretmp_237;
  sizetype pretmp_238;

  <bb 2>:
  if (weight_1(D) == 32)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  pretmp_236 = (sizetype) i_stride_pix1_4(D);
  pretmp_237 = (sizetype) i_stride_pix2_6(D);
  pretmp_238 = (sizetype) i_stride_pix3_8(D);
  goto <bb 9>;

  <bb 4>:

  <bb 5>:
  # x_178 = PHI <x_32(4), 0(9)>
  # ivtmp_10 = PHI <ivtmp_230(4), 8(9)>
  # DEBUG x => x_178
  _17 = (sizetype) x_178;
  _19 = pix1_177 + _17;
  _21 = pix2_200 + _17;
  _22 = *_21;
  _23 = (int) _22;
  _25 = pix3_199 + _17;
  _26 = *_25;
  _27 = (int) _26;
  _28 = _23 + _27;
  _29 = _28 + 1;
  _30 = _29 >> 1;
  _31 = (unsigned char) _30;
  *_19 = _31;
  x_32 = x_178 + 1;
  # DEBUG x => x_32
  # DEBUG x => x_32
  ivtmp_230 = ivtmp_10 - 1;
  if (ivtmp_230 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  pix2_34 = pix2_200 + pretmp_237;
  # DEBUG src1 => pix2_34
  pix3_36 = pix3_199 + pretmp_238;
  # DEBUG src2 => pix3_36
  pix1_38 = pix1_177 + pretmp_236;
  # DEBUG dst => pix1_38
  y_40 = y_198 + 1;
  # DEBUG y => y_40
  # DEBUG y => y_40
  # DEBUG src2 => pix3_36
  # DEBUG src1 => pix2_34
  # DEBUG dst => pix1_38
  ivtmp_228 = ivtmp_229 - 1;
  if (ivtmp_228 != 0)
    goto <bb 8>;
  else
    goto <bb 13>;

  <bb 13>:

  <bb 7>:
  return;

  <bb 8>:

  <bb 9>:
  # pix1_177 = PHI <pix1_3(D)(3), pix1_38(8)>
  # pix2_200 = PHI <pix2_5(D)(3), pix2_34(8)>
  # pix3_199 = PHI <pix3_7(D)(3), pix3_36(8)>
  # y_198 = PHI <0(3), y_40(8)>
  # ivtmp_229 = PHI <16(3), ivtmp_228(8)>
  # DEBUG y => y_198
  # DEBUG src2 => pix3_199
  # DEBUG src1 => pix2_200
  # DEBUG dst => pix1_177
  # DEBUG x => 0
  goto <bb 5>;

  <bb 10>:
  # DEBUG dst => pix1_3(D)
  # DEBUG i_dst => i_stride_pix1_4(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG i_src1 => i_stride_pix2_6(D)
  # DEBUG src2 => pix3_7(D)
  # DEBUG i_src2 => i_stride_pix3_8(D)
  # DEBUG width => 8
  # DEBUG height => 16
  # DEBUG i_weight1 => weight_1(D)
  i_weight2_11 = 64 - weight_1(D);
  # DEBUG i_weight2 => i_weight2_11
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => pix3_7(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG dst => pix1_3(D)
  pretmp_232 = (sizetype) i_stride_pix1_4(D);
  pretmp_233 = (sizetype) i_stride_pix2_6(D);
  pretmp_234 = (sizetype) i_stride_pix3_8(D);

  <bb 11>:
  # pix2_182 = PHI <pix2_294(12), pix2_5(D)(10)>
  # pix3_193 = PHI <pix3_296(12), pix3_7(D)(10)>
  # pix1_192 = PHI <pix1_292(12), pix1_3(D)(10)>
  # y_191 = PHI <y_290(12), 0(10)>
  # ivtmp_223 = PHI <ivtmp_222(12), 16(10)>
  # DEBUG y => NULL
  # DEBUG src2 => NULL
  # DEBUG src1 => NULL
  # DEBUG dst => NULL
  _47 = *pix2_182;
  _48 = (int) _47;
  _49 = weight_1(D) * _48;
  _51 = *pix3_193;
  _52 = (int) _51;
  _53 = i_weight2_11 * _52;
  _54 = _49 + _53;
  _55 = _54 + 32;
  _56 = _55 >> 6;
  # DEBUG x => NULL
  _57 = _56 & -256;
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.0_60 = (unsigned char) _59;
  iftmp.0_61 = (unsigned char) _56;
  iftmp.0_62 = _57 != 0 ? iftmp.0_60 : iftmp.0_61;
  # DEBUG x => NULL
  *pix1_192 = iftmp.0_62;
  _64 = MEM[(uint8_t *)pix2_182 + 1B];
  _65 = (int) _64;
  _66 = weight_1(D) * _65;
  _67 = MEM[(uint8_t *)pix3_193 + 1B];
  _68 = (int) _67;
  _69 = i_weight2_11 * _68;
  _70 = _66 + _69;
  _71 = _70 + 32;
  _72 = _71 >> 6;
  # DEBUG x => NULL
  _73 = _72 & -256;
  _74 = -_72;
  _75 = _74 >> 31;
  iftmp.0_76 = (unsigned char) _75;
  iftmp.0_77 = (unsigned char) _72;
  iftmp.0_78 = _73 != 0 ? iftmp.0_76 : iftmp.0_77;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 1B] = iftmp.0_78;
  _79 = MEM[(uint8_t *)pix2_182 + 2B];
  _80 = (int) _79;
  _81 = weight_1(D) * _80;
  _82 = MEM[(uint8_t *)pix3_193 + 2B];
  _83 = (int) _82;
  _84 = i_weight2_11 * _83;
  _85 = _81 + _84;
  _86 = _85 + 32;
  _87 = _86 >> 6;
  # DEBUG x => NULL
  _88 = _87 & -256;
  _89 = -_87;
  _90 = _89 >> 31;
  iftmp.0_91 = (unsigned char) _90;
  iftmp.0_92 = (unsigned char) _87;
  iftmp.0_93 = _88 != 0 ? iftmp.0_91 : iftmp.0_92;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 2B] = iftmp.0_93;
  _94 = MEM[(uint8_t *)pix2_182 + 3B];
  _95 = (int) _94;
  _96 = weight_1(D) * _95;
  _97 = MEM[(uint8_t *)pix3_193 + 3B];
  _98 = (int) _97;
  _99 = i_weight2_11 * _98;
  _100 = _96 + _99;
  _101 = _100 + 32;
  _102 = _101 >> 6;
  # DEBUG x => NULL
  _103 = _102 & -256;
  _104 = -_102;
  _105 = _104 >> 31;
  iftmp.0_106 = (unsigned char) _105;
  iftmp.0_107 = (unsigned char) _102;
  iftmp.0_108 = _103 != 0 ? iftmp.0_106 : iftmp.0_107;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 3B] = iftmp.0_108;
  _109 = MEM[(uint8_t *)pix2_182 + 4B];
  _110 = (int) _109;
  _111 = weight_1(D) * _110;
  _112 = MEM[(uint8_t *)pix3_193 + 4B];
  _113 = (int) _112;
  _114 = i_weight2_11 * _113;
  _115 = _111 + _114;
  _116 = _115 + 32;
  _117 = _116 >> 6;
  # DEBUG x => NULL
  _118 = _117 & -256;
  _119 = -_117;
  _120 = _119 >> 31;
  iftmp.0_121 = (unsigned char) _120;
  iftmp.0_122 = (unsigned char) _117;
  iftmp.0_123 = _118 != 0 ? iftmp.0_121 : iftmp.0_122;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 4B] = iftmp.0_123;
  _124 = MEM[(uint8_t *)pix2_182 + 5B];
  _125 = (int) _124;
  _126 = weight_1(D) * _125;
  _127 = MEM[(uint8_t *)pix3_193 + 5B];
  _128 = (int) _127;
  _129 = i_weight2_11 * _128;
  _130 = _126 + _129;
  _131 = _130 + 32;
  _132 = _131 >> 6;
  # DEBUG x => NULL
  _133 = _132 & -256;
  _134 = -_132;
  _135 = _134 >> 31;
  iftmp.0_136 = (unsigned char) _135;
  iftmp.0_137 = (unsigned char) _132;
  iftmp.0_138 = _133 != 0 ? iftmp.0_136 : iftmp.0_137;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 5B] = iftmp.0_138;
  _139 = MEM[(uint8_t *)pix2_182 + 6B];
  _140 = (int) _139;
  _141 = weight_1(D) * _140;
  _142 = MEM[(uint8_t *)pix3_193 + 6B];
  _143 = (int) _142;
  _144 = i_weight2_11 * _143;
  _145 = _141 + _144;
  _146 = _145 + 32;
  _147 = _146 >> 6;
  # DEBUG x => NULL
  _148 = _147 & -256;
  _149 = -_147;
  _150 = _149 >> 31;
  iftmp.0_151 = (unsigned char) _150;
  iftmp.0_152 = (unsigned char) _147;
  iftmp.0_153 = _148 != 0 ? iftmp.0_151 : iftmp.0_152;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 6B] = iftmp.0_153;
  _154 = MEM[(uint8_t *)pix2_182 + 7B];
  _155 = (int) _154;
  _156 = weight_1(D) * _155;
  _157 = MEM[(uint8_t *)pix3_193 + 7B];
  _158 = (int) _157;
  _159 = i_weight2_11 * _158;
  _160 = _156 + _159;
  _161 = _160 + 32;
  _162 = _161 >> 6;
  # DEBUG x => NULL
  _163 = _162 & -256;
  _164 = -_162;
  _165 = _164 >> 31;
  iftmp.0_166 = (unsigned char) _165;
  iftmp.0_167 = (unsigned char) _162;
  iftmp.0_168 = _163 != 0 ? iftmp.0_166 : iftmp.0_167;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 7B] = iftmp.0_168;
  y_290 = y_191 + 1;
  # DEBUG y => y_290
  pix1_292 = pix1_192 + pretmp_232;
  # DEBUG dst => pix1_292
  pix2_294 = pix2_182 + pretmp_233;
  # DEBUG src1 => pix2_294
  pix3_296 = pix3_193 + pretmp_234;
  # DEBUG src2 => pix3_296
  # DEBUG y => y_290
  # DEBUG src2 => pix3_296
  # DEBUG src1 => pix2_294
  # DEBUG dst => pix1_292
  ivtmp_222 = ivtmp_223 - 1;
  if (ivtmp_222 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 7>;

  <bb 12>:
  goto <bb 11>;

}



;; Function pixel_avg_8x4 (pixel_avg_8x4, funcdef_no=122, decl_uid=5848, cgraph_uid=122, symbol_order=165)


Analyzing loop at common/mc.c:55
common/mc.c:55:5: note: ===== analyze_loop_nest =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/mc.c:55:5: note: Considering outer-loop vectorization.
split exit edge.
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/mc.c:55:5: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_200
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {{0B, +, pretmp_237}_3, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_199
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {{0B, +, pretmp_238}_3, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_177
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {{0B, +, pretmp_236}_3, +, 1}_4
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:55:5: note: analyze in outer-loop: *pix2_200
common/mc.c:55:5: note: failed: evolution of base is not affine.
common/mc.c:55:5: note: bad data references.

Analyzing loop at common/mc.c:57
common/mc.c:57:9: note: ===== analyze_loop_nest =====
common/mc.c:57:9: note: === vect_analyze_loop_form ===
common/mc.c:57:9: note: === get_loop_niters ===
common/mc.c:57:9: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_200
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_200
	Access function 0: {0B, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_199
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_199
	Access function 0: {0B, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_177
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_177
	Access function 0: {0B, +, 1}_4
common/mc.c:57:9: note: got vectype for stmt: _22 = *_21;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: _26 = *_25;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: *_19 = _31;
vector(16) unsigned char
common/mc.c:57:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:57:9: note: Analyze phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Access function of PHI: {0, +, 1}_4
common/mc.c:57:9: note: step: 1,  init: 0
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: Analyze phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: Access function of PHI: {8, +, 4294967295}_4
common/mc.c:57:9: note: step: 4294967295,  init: 8
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: === vect_pattern_recog ===
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:57:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:57:9: note: init: phi relevant? x_178 = PHI <x_32(4), 0(9)>
common/mc.c:57:9: note: init: phi relevant? .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>
common/mc.c:57:9: note: init: phi relevant? ivtmp_10 = PHI <ivtmp_230(4), 8(9)>
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_178
common/mc.c:57:9: note: init: stmt relevant? _17 = (sizetype) x_178;
common/mc.c:57:9: note: init: stmt relevant? _19 = pix1_177 + _17;
common/mc.c:57:9: note: init: stmt relevant? _21 = pix2_200 + _17;
common/mc.c:57:9: note: init: stmt relevant? _22 = *_21;
common/mc.c:57:9: note: init: stmt relevant? _23 = (int) _22;
common/mc.c:57:9: note: init: stmt relevant? _25 = pix3_199 + _17;
common/mc.c:57:9: note: init: stmt relevant? _26 = *_25;
common/mc.c:57:9: note: init: stmt relevant? _27 = (int) _26;
common/mc.c:57:9: note: init: stmt relevant? _28 = _23 + _27;
common/mc.c:57:9: note: init: stmt relevant? _29 = _28 + 1;
common/mc.c:57:9: note: init: stmt relevant? _30 = _29 >> 1;
common/mc.c:57:9: note: init: stmt relevant? _31 = (unsigned char) _30;
common/mc.c:57:9: note: init: stmt relevant? *_19 = _31;
common/mc.c:57:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: init: stmt relevant? x_32 = x_178 + 1;
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? ivtmp_230 = ivtmp_10 - 1;
common/mc.c:57:9: note: init: stmt relevant? if (ivtmp_230 != 0)
common/mc.c:57:9: note: worklist: examine stmt: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _26 = *_25;
common/mc.c:57:9: note: worklist: examine stmt: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _22 = *_21;
common/mc.c:57:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _26 = *_25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _22 = *_21;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: _26 = *_25;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_19 = _31;
  stmt_b: *_19 = _31;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_21 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_21 and *_19
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_25 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_25 and *_19
common/mc.c:57:9: note: === vect_determine_vectorization_factor ===
common/mc.c:57:9: note: ==> examining phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: ==> examining phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: ==> examining phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_178

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_178;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_177 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_200 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_199 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;

common/mc.c:57:9: note: get vectype for scalar type:  uint8_t
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: x_32 = x_178 + 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: ivtmp_230 = ivtmp_10 - 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_230 != 0)

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: vectorization factor = 16
common/mc.c:57:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_21
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_25
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_19
common/mc.c:57:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:57:9: note: improved number of alias checks from 2 to 2
common/mc.c:57:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: vect_can_advance_ivs_p:
common/mc.c:57:9: note: Analyze phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Analyze phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: virtual phi. skip.
common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: === vect_analyze_slp ===
common/mc.c:57:9: note: === vect_make_slp_decision ===
common/mc.c:57:9: note: === vect_detect_hybrid_slp ===
common/mc.c:57:9: note: === vect_analyze_loop_operations ===
common/mc.c:57:9: note: examining phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: examining phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: examining phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_178
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_178;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_177 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_200 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_199 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: === vectorizable_shift ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: x_32 = x_178 + 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: ivtmp_230 = ivtmp_10 - 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_230 != 0)
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: vectorization_factor = 16, niters = 8
common/mc.c:57:9: note: not vectorized: iteration count too small.
common/mc.c:57:9: note: not vectorized: iteration count smaller than vectorization factor.
common/mc.c:57:9: note: bad operation or unsupported loop bound.

Analyzing loop at common/mc.c:74
common/mc.c:74:5: note: ===== analyze_loop_nest =====
common/mc.c:74:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:74:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [3, + , 4294967295] != 0
  bounds on difference of bases: -3 ... -3
  result:
    # of iterations 3, bounded by 3
common/mc.c:74:5: note: === vect_analyze_data_refs ===
Creating dr for *pix2_182
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {0B, +, pretmp_233}_5
Creating dr for *pix3_193
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {0B, +, pretmp_234}_5
Creating dr for *pix1_192
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {0B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {1B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {1B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {1B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {2B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {2B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {2B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {3B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {3B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {3B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {4B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {4B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {4B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {5B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {5B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {5B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {6B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {6B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {6B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {7B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {7B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {7B, +, pretmp_232}_5
common/mc.c:74:5: note: got vectype for stmt: _47 = *pix2_182;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: _51 = *pix3_193;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: *pix1_192 = iftmp.0_62;
vector(16) unsigned char
common/mc.c:74:5: note: not vectorized: not suitable for strided load *pix1_192 = iftmp.0_62;

common/mc.c:74:5: note: bad data references.
common/mc.c:113:1: note: vectorized 0 loops in function.
pixel_avg_8x4 (uint8_t * pix1, int i_stride_pix1, uint8_t * pix2, int i_stride_pix2, uint8_t * pix3, int i_stride_pix3, int weight)
{
  int y;
  const int i_weight2;
  uint8_t * dst;
  uint8_t * src1;
  uint8_t * src2;
  int x;
  int y;
  uint8_t * pix1;
  uint8_t * pix2;
  uint8_t * pix3;
  int y;
  unsigned int ivtmp_10;
  sizetype _17;
  uint8_t * _19;
  uint8_t * _21;
  unsigned char _22;
  int _23;
  uint8_t * _25;
  unsigned char _26;
  int _27;
  int _28;
  int _29;
  int _30;
  unsigned char _31;
  unsigned char _47;
  int _48;
  int _49;
  unsigned char _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.0_60;
  unsigned char iftmp.0_61;
  unsigned char iftmp.0_62;
  unsigned char _64;
  int _65;
  int _66;
  unsigned char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  unsigned char iftmp.0_76;
  unsigned char iftmp.0_77;
  unsigned char iftmp.0_78;
  unsigned char _79;
  int _80;
  int _81;
  unsigned char _82;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  unsigned char iftmp.0_91;
  unsigned char iftmp.0_92;
  unsigned char iftmp.0_93;
  unsigned char _94;
  int _95;
  int _96;
  unsigned char _97;
  int _98;
  int _99;
  int _100;
  int _101;
  int _102;
  int _103;
  int _104;
  int _105;
  unsigned char iftmp.0_106;
  unsigned char iftmp.0_107;
  unsigned char iftmp.0_108;
  unsigned char _109;
  int _110;
  int _111;
  unsigned char _112;
  int _113;
  int _114;
  int _115;
  int _116;
  int _117;
  int _118;
  int _119;
  int _120;
  unsigned char iftmp.0_121;
  unsigned char iftmp.0_122;
  unsigned char iftmp.0_123;
  unsigned char _124;
  int _125;
  int _126;
  unsigned char _127;
  int _128;
  int _129;
  int _130;
  int _131;
  int _132;
  int _133;
  int _134;
  int _135;
  unsigned char iftmp.0_136;
  unsigned char iftmp.0_137;
  unsigned char iftmp.0_138;
  unsigned char _139;
  int _140;
  int _141;
  unsigned char _142;
  int _143;
  int _144;
  int _145;
  int _146;
  int _147;
  int _148;
  int _149;
  int _150;
  unsigned char iftmp.0_151;
  unsigned char iftmp.0_152;
  unsigned char iftmp.0_153;
  unsigned char _154;
  int _155;
  int _156;
  unsigned char _157;
  int _158;
  int _159;
  int _160;
  int _161;
  int _162;
  int _163;
  int _164;
  int _165;
  unsigned char iftmp.0_166;
  unsigned char iftmp.0_167;
  unsigned char iftmp.0_168;
  unsigned int ivtmp_222;
  unsigned int ivtmp_223;
  unsigned int ivtmp_228;
  unsigned int ivtmp_229;
  unsigned int ivtmp_230;
  sizetype pretmp_232;
  sizetype pretmp_233;
  sizetype pretmp_234;
  sizetype pretmp_236;
  sizetype pretmp_237;
  sizetype pretmp_238;

  <bb 2>:
  if (weight_1(D) == 32)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  pretmp_236 = (sizetype) i_stride_pix1_4(D);
  pretmp_237 = (sizetype) i_stride_pix2_6(D);
  pretmp_238 = (sizetype) i_stride_pix3_8(D);
  goto <bb 9>;

  <bb 4>:

  <bb 5>:
  # x_178 = PHI <x_32(4), 0(9)>
  # ivtmp_10 = PHI <ivtmp_230(4), 8(9)>
  # DEBUG x => x_178
  _17 = (sizetype) x_178;
  _19 = pix1_177 + _17;
  _21 = pix2_200 + _17;
  _22 = *_21;
  _23 = (int) _22;
  _25 = pix3_199 + _17;
  _26 = *_25;
  _27 = (int) _26;
  _28 = _23 + _27;
  _29 = _28 + 1;
  _30 = _29 >> 1;
  _31 = (unsigned char) _30;
  *_19 = _31;
  x_32 = x_178 + 1;
  # DEBUG x => x_32
  # DEBUG x => x_32
  ivtmp_230 = ivtmp_10 - 1;
  if (ivtmp_230 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  pix2_34 = pix2_200 + pretmp_237;
  # DEBUG src1 => pix2_34
  pix3_36 = pix3_199 + pretmp_238;
  # DEBUG src2 => pix3_36
  pix1_38 = pix1_177 + pretmp_236;
  # DEBUG dst => pix1_38
  y_40 = y_198 + 1;
  # DEBUG y => y_40
  # DEBUG y => y_40
  # DEBUG src2 => pix3_36
  # DEBUG src1 => pix2_34
  # DEBUG dst => pix1_38
  ivtmp_228 = ivtmp_229 - 1;
  if (ivtmp_228 != 0)
    goto <bb 8>;
  else
    goto <bb 13>;

  <bb 13>:

  <bb 7>:
  return;

  <bb 8>:

  <bb 9>:
  # pix1_177 = PHI <pix1_3(D)(3), pix1_38(8)>
  # pix2_200 = PHI <pix2_5(D)(3), pix2_34(8)>
  # pix3_199 = PHI <pix3_7(D)(3), pix3_36(8)>
  # y_198 = PHI <0(3), y_40(8)>
  # ivtmp_229 = PHI <4(3), ivtmp_228(8)>
  # DEBUG y => y_198
  # DEBUG src2 => pix3_199
  # DEBUG src1 => pix2_200
  # DEBUG dst => pix1_177
  # DEBUG x => 0
  goto <bb 5>;

  <bb 10>:
  # DEBUG dst => pix1_3(D)
  # DEBUG i_dst => i_stride_pix1_4(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG i_src1 => i_stride_pix2_6(D)
  # DEBUG src2 => pix3_7(D)
  # DEBUG i_src2 => i_stride_pix3_8(D)
  # DEBUG width => 8
  # DEBUG height => 4
  # DEBUG i_weight1 => weight_1(D)
  i_weight2_11 = 64 - weight_1(D);
  # DEBUG i_weight2 => i_weight2_11
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => pix3_7(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG dst => pix1_3(D)
  pretmp_232 = (sizetype) i_stride_pix1_4(D);
  pretmp_233 = (sizetype) i_stride_pix2_6(D);
  pretmp_234 = (sizetype) i_stride_pix3_8(D);

  <bb 11>:
  # pix2_182 = PHI <pix2_294(12), pix2_5(D)(10)>
  # pix3_193 = PHI <pix3_296(12), pix3_7(D)(10)>
  # pix1_192 = PHI <pix1_292(12), pix1_3(D)(10)>
  # y_191 = PHI <y_290(12), 0(10)>
  # ivtmp_223 = PHI <ivtmp_222(12), 4(10)>
  # DEBUG y => NULL
  # DEBUG src2 => NULL
  # DEBUG src1 => NULL
  # DEBUG dst => NULL
  _47 = *pix2_182;
  _48 = (int) _47;
  _49 = weight_1(D) * _48;
  _51 = *pix3_193;
  _52 = (int) _51;
  _53 = i_weight2_11 * _52;
  _54 = _49 + _53;
  _55 = _54 + 32;
  _56 = _55 >> 6;
  # DEBUG x => NULL
  _57 = _56 & -256;
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.0_60 = (unsigned char) _59;
  iftmp.0_61 = (unsigned char) _56;
  iftmp.0_62 = _57 != 0 ? iftmp.0_60 : iftmp.0_61;
  # DEBUG x => NULL
  *pix1_192 = iftmp.0_62;
  _64 = MEM[(uint8_t *)pix2_182 + 1B];
  _65 = (int) _64;
  _66 = weight_1(D) * _65;
  _67 = MEM[(uint8_t *)pix3_193 + 1B];
  _68 = (int) _67;
  _69 = i_weight2_11 * _68;
  _70 = _66 + _69;
  _71 = _70 + 32;
  _72 = _71 >> 6;
  # DEBUG x => NULL
  _73 = _72 & -256;
  _74 = -_72;
  _75 = _74 >> 31;
  iftmp.0_76 = (unsigned char) _75;
  iftmp.0_77 = (unsigned char) _72;
  iftmp.0_78 = _73 != 0 ? iftmp.0_76 : iftmp.0_77;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 1B] = iftmp.0_78;
  _79 = MEM[(uint8_t *)pix2_182 + 2B];
  _80 = (int) _79;
  _81 = weight_1(D) * _80;
  _82 = MEM[(uint8_t *)pix3_193 + 2B];
  _83 = (int) _82;
  _84 = i_weight2_11 * _83;
  _85 = _81 + _84;
  _86 = _85 + 32;
  _87 = _86 >> 6;
  # DEBUG x => NULL
  _88 = _87 & -256;
  _89 = -_87;
  _90 = _89 >> 31;
  iftmp.0_91 = (unsigned char) _90;
  iftmp.0_92 = (unsigned char) _87;
  iftmp.0_93 = _88 != 0 ? iftmp.0_91 : iftmp.0_92;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 2B] = iftmp.0_93;
  _94 = MEM[(uint8_t *)pix2_182 + 3B];
  _95 = (int) _94;
  _96 = weight_1(D) * _95;
  _97 = MEM[(uint8_t *)pix3_193 + 3B];
  _98 = (int) _97;
  _99 = i_weight2_11 * _98;
  _100 = _96 + _99;
  _101 = _100 + 32;
  _102 = _101 >> 6;
  # DEBUG x => NULL
  _103 = _102 & -256;
  _104 = -_102;
  _105 = _104 >> 31;
  iftmp.0_106 = (unsigned char) _105;
  iftmp.0_107 = (unsigned char) _102;
  iftmp.0_108 = _103 != 0 ? iftmp.0_106 : iftmp.0_107;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 3B] = iftmp.0_108;
  _109 = MEM[(uint8_t *)pix2_182 + 4B];
  _110 = (int) _109;
  _111 = weight_1(D) * _110;
  _112 = MEM[(uint8_t *)pix3_193 + 4B];
  _113 = (int) _112;
  _114 = i_weight2_11 * _113;
  _115 = _111 + _114;
  _116 = _115 + 32;
  _117 = _116 >> 6;
  # DEBUG x => NULL
  _118 = _117 & -256;
  _119 = -_117;
  _120 = _119 >> 31;
  iftmp.0_121 = (unsigned char) _120;
  iftmp.0_122 = (unsigned char) _117;
  iftmp.0_123 = _118 != 0 ? iftmp.0_121 : iftmp.0_122;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 4B] = iftmp.0_123;
  _124 = MEM[(uint8_t *)pix2_182 + 5B];
  _125 = (int) _124;
  _126 = weight_1(D) * _125;
  _127 = MEM[(uint8_t *)pix3_193 + 5B];
  _128 = (int) _127;
  _129 = i_weight2_11 * _128;
  _130 = _126 + _129;
  _131 = _130 + 32;
  _132 = _131 >> 6;
  # DEBUG x => NULL
  _133 = _132 & -256;
  _134 = -_132;
  _135 = _134 >> 31;
  iftmp.0_136 = (unsigned char) _135;
  iftmp.0_137 = (unsigned char) _132;
  iftmp.0_138 = _133 != 0 ? iftmp.0_136 : iftmp.0_137;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 5B] = iftmp.0_138;
  _139 = MEM[(uint8_t *)pix2_182 + 6B];
  _140 = (int) _139;
  _141 = weight_1(D) * _140;
  _142 = MEM[(uint8_t *)pix3_193 + 6B];
  _143 = (int) _142;
  _144 = i_weight2_11 * _143;
  _145 = _141 + _144;
  _146 = _145 + 32;
  _147 = _146 >> 6;
  # DEBUG x => NULL
  _148 = _147 & -256;
  _149 = -_147;
  _150 = _149 >> 31;
  iftmp.0_151 = (unsigned char) _150;
  iftmp.0_152 = (unsigned char) _147;
  iftmp.0_153 = _148 != 0 ? iftmp.0_151 : iftmp.0_152;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 6B] = iftmp.0_153;
  _154 = MEM[(uint8_t *)pix2_182 + 7B];
  _155 = (int) _154;
  _156 = weight_1(D) * _155;
  _157 = MEM[(uint8_t *)pix3_193 + 7B];
  _158 = (int) _157;
  _159 = i_weight2_11 * _158;
  _160 = _156 + _159;
  _161 = _160 + 32;
  _162 = _161 >> 6;
  # DEBUG x => NULL
  _163 = _162 & -256;
  _164 = -_162;
  _165 = _164 >> 31;
  iftmp.0_166 = (unsigned char) _165;
  iftmp.0_167 = (unsigned char) _162;
  iftmp.0_168 = _163 != 0 ? iftmp.0_166 : iftmp.0_167;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 7B] = iftmp.0_168;
  y_290 = y_191 + 1;
  # DEBUG y => y_290
  pix1_292 = pix1_192 + pretmp_232;
  # DEBUG dst => pix1_292
  pix2_294 = pix2_182 + pretmp_233;
  # DEBUG src1 => pix2_294
  pix3_296 = pix3_193 + pretmp_234;
  # DEBUG src2 => pix3_296
  # DEBUG y => y_290
  # DEBUG src2 => pix3_296
  # DEBUG src1 => pix2_294
  # DEBUG dst => pix1_292
  ivtmp_222 = ivtmp_223 - 1;
  if (ivtmp_222 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 7>;

  <bb 12>:
  goto <bb 11>;

}



;; Function pixel_avg_8x8 (pixel_avg_8x8, funcdef_no=121, decl_uid=5839, cgraph_uid=121, symbol_order=164)


Analyzing loop at common/mc.c:55
common/mc.c:55:5: note: ===== analyze_loop_nest =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/mc.c:55:5: note: Considering outer-loop vectorization.
split exit edge.
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/mc.c:55:5: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_200
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {{0B, +, pretmp_237}_3, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_199
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {{0B, +, pretmp_238}_3, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_177
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {{0B, +, pretmp_236}_3, +, 1}_4
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:55:5: note: analyze in outer-loop: *pix2_200
common/mc.c:55:5: note: failed: evolution of base is not affine.
common/mc.c:55:5: note: bad data references.

Analyzing loop at common/mc.c:57
common/mc.c:57:9: note: ===== analyze_loop_nest =====
common/mc.c:57:9: note: === vect_analyze_loop_form ===
common/mc.c:57:9: note: === get_loop_niters ===
common/mc.c:57:9: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_200
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_200
	Access function 0: {0B, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_199
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_199
	Access function 0: {0B, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_177
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_177
	Access function 0: {0B, +, 1}_4
common/mc.c:57:9: note: got vectype for stmt: _22 = *_21;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: _26 = *_25;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: *_19 = _31;
vector(16) unsigned char
common/mc.c:57:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:57:9: note: Analyze phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Access function of PHI: {0, +, 1}_4
common/mc.c:57:9: note: step: 1,  init: 0
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: Analyze phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: Access function of PHI: {8, +, 4294967295}_4
common/mc.c:57:9: note: step: 4294967295,  init: 8
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: === vect_pattern_recog ===
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:57:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:57:9: note: init: phi relevant? x_178 = PHI <x_32(4), 0(9)>
common/mc.c:57:9: note: init: phi relevant? .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>
common/mc.c:57:9: note: init: phi relevant? ivtmp_10 = PHI <ivtmp_230(4), 8(9)>
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_178
common/mc.c:57:9: note: init: stmt relevant? _17 = (sizetype) x_178;
common/mc.c:57:9: note: init: stmt relevant? _19 = pix1_177 + _17;
common/mc.c:57:9: note: init: stmt relevant? _21 = pix2_200 + _17;
common/mc.c:57:9: note: init: stmt relevant? _22 = *_21;
common/mc.c:57:9: note: init: stmt relevant? _23 = (int) _22;
common/mc.c:57:9: note: init: stmt relevant? _25 = pix3_199 + _17;
common/mc.c:57:9: note: init: stmt relevant? _26 = *_25;
common/mc.c:57:9: note: init: stmt relevant? _27 = (int) _26;
common/mc.c:57:9: note: init: stmt relevant? _28 = _23 + _27;
common/mc.c:57:9: note: init: stmt relevant? _29 = _28 + 1;
common/mc.c:57:9: note: init: stmt relevant? _30 = _29 >> 1;
common/mc.c:57:9: note: init: stmt relevant? _31 = (unsigned char) _30;
common/mc.c:57:9: note: init: stmt relevant? *_19 = _31;
common/mc.c:57:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: init: stmt relevant? x_32 = x_178 + 1;
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? ivtmp_230 = ivtmp_10 - 1;
common/mc.c:57:9: note: init: stmt relevant? if (ivtmp_230 != 0)
common/mc.c:57:9: note: worklist: examine stmt: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _26 = *_25;
common/mc.c:57:9: note: worklist: examine stmt: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _22 = *_21;
common/mc.c:57:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _26 = *_25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _22 = *_21;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: _26 = *_25;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_19 = _31;
  stmt_b: *_19 = _31;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_21 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_21 and *_19
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_25 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_25 and *_19
common/mc.c:57:9: note: === vect_determine_vectorization_factor ===
common/mc.c:57:9: note: ==> examining phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: ==> examining phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: ==> examining phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_178

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_178;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_177 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_200 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_199 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;

common/mc.c:57:9: note: get vectype for scalar type:  uint8_t
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: x_32 = x_178 + 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: ivtmp_230 = ivtmp_10 - 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_230 != 0)

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: vectorization factor = 16
common/mc.c:57:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_21
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_25
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_19
common/mc.c:57:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:57:9: note: improved number of alias checks from 2 to 2
common/mc.c:57:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: vect_can_advance_ivs_p:
common/mc.c:57:9: note: Analyze phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Analyze phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: virtual phi. skip.
common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: === vect_analyze_slp ===
common/mc.c:57:9: note: === vect_make_slp_decision ===
common/mc.c:57:9: note: === vect_detect_hybrid_slp ===
common/mc.c:57:9: note: === vect_analyze_loop_operations ===
common/mc.c:57:9: note: examining phi: x_178 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: examining phi: .MEM_179 = PHI <.MEM_41(4), .MEM_180(9)>

common/mc.c:57:9: note: examining phi: ivtmp_10 = PHI <ivtmp_230(4), 8(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_178
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_178;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_177 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_200 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_199 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: === vectorizable_shift ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: x_32 = x_178 + 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: ivtmp_230 = ivtmp_10 - 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_230 != 0)
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: vectorization_factor = 16, niters = 8
common/mc.c:57:9: note: not vectorized: iteration count too small.
common/mc.c:57:9: note: not vectorized: iteration count smaller than vectorization factor.
common/mc.c:57:9: note: bad operation or unsupported loop bound.

Analyzing loop at common/mc.c:74
common/mc.c:74:5: note: ===== analyze_loop_nest =====
common/mc.c:74:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:74:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [7, + , 4294967295] != 0
  bounds on difference of bases: -7 ... -7
  result:
    # of iterations 7, bounded by 7
common/mc.c:74:5: note: === vect_analyze_data_refs ===
Creating dr for *pix2_182
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {0B, +, pretmp_233}_5
Creating dr for *pix3_193
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {0B, +, pretmp_234}_5
Creating dr for *pix1_192
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {0B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {1B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {1B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {1B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {2B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {2B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {2B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {3B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {3B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {3B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {4B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {4B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {4B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {5B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {5B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {5B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {6B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {6B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {6B, +, pretmp_232}_5
Creating dr for MEM[(uint8_t *)pix2_182 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_233
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {7B, +, pretmp_233}_5
Creating dr for MEM[(uint8_t *)pix3_193 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_234
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {7B, +, pretmp_234}_5
Creating dr for MEM[(uint8_t *)pix1_192 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_232
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {7B, +, pretmp_232}_5
common/mc.c:74:5: note: got vectype for stmt: _47 = *pix2_182;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: _51 = *pix3_193;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: *pix1_192 = iftmp.0_62;
vector(16) unsigned char
common/mc.c:74:5: note: not vectorized: not suitable for strided load *pix1_192 = iftmp.0_62;

common/mc.c:74:5: note: bad data references.
common/mc.c:112:1: note: vectorized 0 loops in function.
pixel_avg_8x8 (uint8_t * pix1, int i_stride_pix1, uint8_t * pix2, int i_stride_pix2, uint8_t * pix3, int i_stride_pix3, int weight)
{
  int y;
  const int i_weight2;
  uint8_t * dst;
  uint8_t * src1;
  uint8_t * src2;
  int x;
  int y;
  uint8_t * pix1;
  uint8_t * pix2;
  uint8_t * pix3;
  int y;
  unsigned int ivtmp_10;
  sizetype _17;
  uint8_t * _19;
  uint8_t * _21;
  unsigned char _22;
  int _23;
  uint8_t * _25;
  unsigned char _26;
  int _27;
  int _28;
  int _29;
  int _30;
  unsigned char _31;
  unsigned char _47;
  int _48;
  int _49;
  unsigned char _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.0_60;
  unsigned char iftmp.0_61;
  unsigned char iftmp.0_62;
  unsigned char _64;
  int _65;
  int _66;
  unsigned char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  unsigned char iftmp.0_76;
  unsigned char iftmp.0_77;
  unsigned char iftmp.0_78;
  unsigned char _79;
  int _80;
  int _81;
  unsigned char _82;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  unsigned char iftmp.0_91;
  unsigned char iftmp.0_92;
  unsigned char iftmp.0_93;
  unsigned char _94;
  int _95;
  int _96;
  unsigned char _97;
  int _98;
  int _99;
  int _100;
  int _101;
  int _102;
  int _103;
  int _104;
  int _105;
  unsigned char iftmp.0_106;
  unsigned char iftmp.0_107;
  unsigned char iftmp.0_108;
  unsigned char _109;
  int _110;
  int _111;
  unsigned char _112;
  int _113;
  int _114;
  int _115;
  int _116;
  int _117;
  int _118;
  int _119;
  int _120;
  unsigned char iftmp.0_121;
  unsigned char iftmp.0_122;
  unsigned char iftmp.0_123;
  unsigned char _124;
  int _125;
  int _126;
  unsigned char _127;
  int _128;
  int _129;
  int _130;
  int _131;
  int _132;
  int _133;
  int _134;
  int _135;
  unsigned char iftmp.0_136;
  unsigned char iftmp.0_137;
  unsigned char iftmp.0_138;
  unsigned char _139;
  int _140;
  int _141;
  unsigned char _142;
  int _143;
  int _144;
  int _145;
  int _146;
  int _147;
  int _148;
  int _149;
  int _150;
  unsigned char iftmp.0_151;
  unsigned char iftmp.0_152;
  unsigned char iftmp.0_153;
  unsigned char _154;
  int _155;
  int _156;
  unsigned char _157;
  int _158;
  int _159;
  int _160;
  int _161;
  int _162;
  int _163;
  int _164;
  int _165;
  unsigned char iftmp.0_166;
  unsigned char iftmp.0_167;
  unsigned char iftmp.0_168;
  unsigned int ivtmp_222;
  unsigned int ivtmp_223;
  unsigned int ivtmp_228;
  unsigned int ivtmp_229;
  unsigned int ivtmp_230;
  sizetype pretmp_232;
  sizetype pretmp_233;
  sizetype pretmp_234;
  sizetype pretmp_236;
  sizetype pretmp_237;
  sizetype pretmp_238;

  <bb 2>:
  if (weight_1(D) == 32)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  pretmp_236 = (sizetype) i_stride_pix1_4(D);
  pretmp_237 = (sizetype) i_stride_pix2_6(D);
  pretmp_238 = (sizetype) i_stride_pix3_8(D);
  goto <bb 9>;

  <bb 4>:

  <bb 5>:
  # x_178 = PHI <x_32(4), 0(9)>
  # ivtmp_10 = PHI <ivtmp_230(4), 8(9)>
  # DEBUG x => x_178
  _17 = (sizetype) x_178;
  _19 = pix1_177 + _17;
  _21 = pix2_200 + _17;
  _22 = *_21;
  _23 = (int) _22;
  _25 = pix3_199 + _17;
  _26 = *_25;
  _27 = (int) _26;
  _28 = _23 + _27;
  _29 = _28 + 1;
  _30 = _29 >> 1;
  _31 = (unsigned char) _30;
  *_19 = _31;
  x_32 = x_178 + 1;
  # DEBUG x => x_32
  # DEBUG x => x_32
  ivtmp_230 = ivtmp_10 - 1;
  if (ivtmp_230 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  pix2_34 = pix2_200 + pretmp_237;
  # DEBUG src1 => pix2_34
  pix3_36 = pix3_199 + pretmp_238;
  # DEBUG src2 => pix3_36
  pix1_38 = pix1_177 + pretmp_236;
  # DEBUG dst => pix1_38
  y_40 = y_198 + 1;
  # DEBUG y => y_40
  # DEBUG y => y_40
  # DEBUG src2 => pix3_36
  # DEBUG src1 => pix2_34
  # DEBUG dst => pix1_38
  ivtmp_228 = ivtmp_229 - 1;
  if (ivtmp_228 != 0)
    goto <bb 8>;
  else
    goto <bb 13>;

  <bb 13>:

  <bb 7>:
  return;

  <bb 8>:

  <bb 9>:
  # pix1_177 = PHI <pix1_3(D)(3), pix1_38(8)>
  # pix2_200 = PHI <pix2_5(D)(3), pix2_34(8)>
  # pix3_199 = PHI <pix3_7(D)(3), pix3_36(8)>
  # y_198 = PHI <0(3), y_40(8)>
  # ivtmp_229 = PHI <8(3), ivtmp_228(8)>
  # DEBUG y => y_198
  # DEBUG src2 => pix3_199
  # DEBUG src1 => pix2_200
  # DEBUG dst => pix1_177
  # DEBUG x => 0
  goto <bb 5>;

  <bb 10>:
  # DEBUG dst => pix1_3(D)
  # DEBUG i_dst => i_stride_pix1_4(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG i_src1 => i_stride_pix2_6(D)
  # DEBUG src2 => pix3_7(D)
  # DEBUG i_src2 => i_stride_pix3_8(D)
  # DEBUG width => 8
  # DEBUG height => 8
  # DEBUG i_weight1 => weight_1(D)
  i_weight2_11 = 64 - weight_1(D);
  # DEBUG i_weight2 => i_weight2_11
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => pix3_7(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG dst => pix1_3(D)
  pretmp_232 = (sizetype) i_stride_pix1_4(D);
  pretmp_233 = (sizetype) i_stride_pix2_6(D);
  pretmp_234 = (sizetype) i_stride_pix3_8(D);

  <bb 11>:
  # pix2_182 = PHI <pix2_294(12), pix2_5(D)(10)>
  # pix3_193 = PHI <pix3_296(12), pix3_7(D)(10)>
  # pix1_192 = PHI <pix1_292(12), pix1_3(D)(10)>
  # y_191 = PHI <y_290(12), 0(10)>
  # ivtmp_223 = PHI <ivtmp_222(12), 8(10)>
  # DEBUG y => NULL
  # DEBUG src2 => NULL
  # DEBUG src1 => NULL
  # DEBUG dst => NULL
  _47 = *pix2_182;
  _48 = (int) _47;
  _49 = weight_1(D) * _48;
  _51 = *pix3_193;
  _52 = (int) _51;
  _53 = i_weight2_11 * _52;
  _54 = _49 + _53;
  _55 = _54 + 32;
  _56 = _55 >> 6;
  # DEBUG x => NULL
  _57 = _56 & -256;
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.0_60 = (unsigned char) _59;
  iftmp.0_61 = (unsigned char) _56;
  iftmp.0_62 = _57 != 0 ? iftmp.0_60 : iftmp.0_61;
  # DEBUG x => NULL
  *pix1_192 = iftmp.0_62;
  _64 = MEM[(uint8_t *)pix2_182 + 1B];
  _65 = (int) _64;
  _66 = weight_1(D) * _65;
  _67 = MEM[(uint8_t *)pix3_193 + 1B];
  _68 = (int) _67;
  _69 = i_weight2_11 * _68;
  _70 = _66 + _69;
  _71 = _70 + 32;
  _72 = _71 >> 6;
  # DEBUG x => NULL
  _73 = _72 & -256;
  _74 = -_72;
  _75 = _74 >> 31;
  iftmp.0_76 = (unsigned char) _75;
  iftmp.0_77 = (unsigned char) _72;
  iftmp.0_78 = _73 != 0 ? iftmp.0_76 : iftmp.0_77;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 1B] = iftmp.0_78;
  _79 = MEM[(uint8_t *)pix2_182 + 2B];
  _80 = (int) _79;
  _81 = weight_1(D) * _80;
  _82 = MEM[(uint8_t *)pix3_193 + 2B];
  _83 = (int) _82;
  _84 = i_weight2_11 * _83;
  _85 = _81 + _84;
  _86 = _85 + 32;
  _87 = _86 >> 6;
  # DEBUG x => NULL
  _88 = _87 & -256;
  _89 = -_87;
  _90 = _89 >> 31;
  iftmp.0_91 = (unsigned char) _90;
  iftmp.0_92 = (unsigned char) _87;
  iftmp.0_93 = _88 != 0 ? iftmp.0_91 : iftmp.0_92;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 2B] = iftmp.0_93;
  _94 = MEM[(uint8_t *)pix2_182 + 3B];
  _95 = (int) _94;
  _96 = weight_1(D) * _95;
  _97 = MEM[(uint8_t *)pix3_193 + 3B];
  _98 = (int) _97;
  _99 = i_weight2_11 * _98;
  _100 = _96 + _99;
  _101 = _100 + 32;
  _102 = _101 >> 6;
  # DEBUG x => NULL
  _103 = _102 & -256;
  _104 = -_102;
  _105 = _104 >> 31;
  iftmp.0_106 = (unsigned char) _105;
  iftmp.0_107 = (unsigned char) _102;
  iftmp.0_108 = _103 != 0 ? iftmp.0_106 : iftmp.0_107;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 3B] = iftmp.0_108;
  _109 = MEM[(uint8_t *)pix2_182 + 4B];
  _110 = (int) _109;
  _111 = weight_1(D) * _110;
  _112 = MEM[(uint8_t *)pix3_193 + 4B];
  _113 = (int) _112;
  _114 = i_weight2_11 * _113;
  _115 = _111 + _114;
  _116 = _115 + 32;
  _117 = _116 >> 6;
  # DEBUG x => NULL
  _118 = _117 & -256;
  _119 = -_117;
  _120 = _119 >> 31;
  iftmp.0_121 = (unsigned char) _120;
  iftmp.0_122 = (unsigned char) _117;
  iftmp.0_123 = _118 != 0 ? iftmp.0_121 : iftmp.0_122;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 4B] = iftmp.0_123;
  _124 = MEM[(uint8_t *)pix2_182 + 5B];
  _125 = (int) _124;
  _126 = weight_1(D) * _125;
  _127 = MEM[(uint8_t *)pix3_193 + 5B];
  _128 = (int) _127;
  _129 = i_weight2_11 * _128;
  _130 = _126 + _129;
  _131 = _130 + 32;
  _132 = _131 >> 6;
  # DEBUG x => NULL
  _133 = _132 & -256;
  _134 = -_132;
  _135 = _134 >> 31;
  iftmp.0_136 = (unsigned char) _135;
  iftmp.0_137 = (unsigned char) _132;
  iftmp.0_138 = _133 != 0 ? iftmp.0_136 : iftmp.0_137;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 5B] = iftmp.0_138;
  _139 = MEM[(uint8_t *)pix2_182 + 6B];
  _140 = (int) _139;
  _141 = weight_1(D) * _140;
  _142 = MEM[(uint8_t *)pix3_193 + 6B];
  _143 = (int) _142;
  _144 = i_weight2_11 * _143;
  _145 = _141 + _144;
  _146 = _145 + 32;
  _147 = _146 >> 6;
  # DEBUG x => NULL
  _148 = _147 & -256;
  _149 = -_147;
  _150 = _149 >> 31;
  iftmp.0_151 = (unsigned char) _150;
  iftmp.0_152 = (unsigned char) _147;
  iftmp.0_153 = _148 != 0 ? iftmp.0_151 : iftmp.0_152;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 6B] = iftmp.0_153;
  _154 = MEM[(uint8_t *)pix2_182 + 7B];
  _155 = (int) _154;
  _156 = weight_1(D) * _155;
  _157 = MEM[(uint8_t *)pix3_193 + 7B];
  _158 = (int) _157;
  _159 = i_weight2_11 * _158;
  _160 = _156 + _159;
  _161 = _160 + 32;
  _162 = _161 >> 6;
  # DEBUG x => NULL
  _163 = _162 & -256;
  _164 = -_162;
  _165 = _164 >> 31;
  iftmp.0_166 = (unsigned char) _165;
  iftmp.0_167 = (unsigned char) _162;
  iftmp.0_168 = _163 != 0 ? iftmp.0_166 : iftmp.0_167;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_192 + 7B] = iftmp.0_168;
  y_290 = y_191 + 1;
  # DEBUG y => y_290
  pix1_292 = pix1_192 + pretmp_232;
  # DEBUG dst => pix1_292
  pix2_294 = pix2_182 + pretmp_233;
  # DEBUG src1 => pix2_294
  pix3_296 = pix3_193 + pretmp_234;
  # DEBUG src2 => pix3_296
  # DEBUG y => y_290
  # DEBUG src2 => pix3_296
  # DEBUG src1 => pix2_294
  # DEBUG dst => pix1_292
  ivtmp_222 = ivtmp_223 - 1;
  if (ivtmp_222 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 7>;

  <bb 12>:
  goto <bb 11>;

}



;; Function pixel_avg_16x16 (pixel_avg_16x16, funcdef_no=118, decl_uid=5812, cgraph_uid=118, symbol_order=161)


Analyzing loop at common/mc.c:55
common/mc.c:55:5: note: ===== analyze_loop_nest =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:55:5: note: === vect_analyze_loop_form ===
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/mc.c:55:5: note: Considering outer-loop vectorization.
split exit edge.
common/mc.c:55:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/mc.c:55:5: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_355
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {{0B, +, pretmp_315}_3, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_354
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {{0B, +, pretmp_369}_3, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_312
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {{0B, +, pretmp_316}_3, +, 1}_4
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:55:5: note: analyze in outer-loop: *pix2_355
common/mc.c:55:5: note: failed: evolution of base is not affine.
common/mc.c:55:5: note: bad data references.

Analyzing loop at common/mc.c:57
common/mc.c:57:9: note: ===== analyze_loop_nest =====
common/mc.c:57:9: note: === vect_analyze_loop_form ===
common/mc.c:57:9: note: === get_loop_niters ===
common/mc.c:57:9: note: === vect_analyze_data_refs ===
Creating dr for *_21
analyze_innermost: success.
	base_address: pix2_355
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix2_355
	Access function 0: {0B, +, 1}_4
Creating dr for *_25
analyze_innermost: success.
	base_address: pix3_354
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix3_354
	Access function 0: {0B, +, 1}_4
Creating dr for *_19
analyze_innermost: success.
	base_address: pix1_312
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 128
	base_object: *pix1_312
	Access function 0: {0B, +, 1}_4
common/mc.c:57:9: note: got vectype for stmt: _22 = *_21;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: _26 = *_25;
vector(16) unsigned char
common/mc.c:57:9: note: got vectype for stmt: *_19 = _31;
vector(16) unsigned char
common/mc.c:57:9: note: === vect_analyze_scalar_cycles ===
common/mc.c:57:9: note: Analyze phi: x_313 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Access function of PHI: {0, +, 1}_4
common/mc.c:57:9: note: step: 1,  init: 0
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: Analyze phi: .MEM_350 = PHI <.MEM_41(4), .MEM_351(9)>

common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_366(4), 16(9)>

common/mc.c:57:9: note: Access function of PHI: {16, +, 4294967295}_4
common/mc.c:57:9: note: step: 4294967295,  init: 16
common/mc.c:57:9: note: Detected induction.
common/mc.c:57:9: note: === vect_pattern_recog ===
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vect_analyze_data_ref_accesses ===
common/mc.c:57:9: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:57:9: note: init: phi relevant? x_313 = PHI <x_32(4), 0(9)>
common/mc.c:57:9: note: init: phi relevant? .MEM_350 = PHI <.MEM_41(4), .MEM_351(9)>
common/mc.c:57:9: note: init: phi relevant? ivtmp_10 = PHI <ivtmp_366(4), 16(9)>
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_313
common/mc.c:57:9: note: init: stmt relevant? _17 = (sizetype) x_313;
common/mc.c:57:9: note: init: stmt relevant? _19 = pix1_312 + _17;
common/mc.c:57:9: note: init: stmt relevant? _21 = pix2_355 + _17;
common/mc.c:57:9: note: init: stmt relevant? _22 = *_21;
common/mc.c:57:9: note: init: stmt relevant? _23 = (int) _22;
common/mc.c:57:9: note: init: stmt relevant? _25 = pix3_354 + _17;
common/mc.c:57:9: note: init: stmt relevant? _26 = *_25;
common/mc.c:57:9: note: init: stmt relevant? _27 = (int) _26;
common/mc.c:57:9: note: init: stmt relevant? _28 = _23 + _27;
common/mc.c:57:9: note: init: stmt relevant? _29 = _28 + 1;
common/mc.c:57:9: note: init: stmt relevant? _30 = _29 >> 1;
common/mc.c:57:9: note: init: stmt relevant? _31 = (unsigned char) _30;
common/mc.c:57:9: note: init: stmt relevant? *_19 = _31;
common/mc.c:57:9: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: init: stmt relevant? x_32 = x_313 + 1;
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? # DEBUG x => x_32
common/mc.c:57:9: note: init: stmt relevant? ivtmp_366 = ivtmp_10 - 1;
common/mc.c:57:9: note: init: stmt relevant? if (ivtmp_366 != 0)
common/mc.c:57:9: note: worklist: examine stmt: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _26 = *_25;
common/mc.c:57:9: note: worklist: examine stmt: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: mark relevant 4, live 0.
common/mc.c:57:9: note: worklist: examine stmt: _22 = *_21;
common/mc.c:57:9: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _26 = *_25;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: *_19 = _31;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = *_21;
  stmt_b: _22 = *_21;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _26 = *_25;
  stmt_b: _26 = *_25;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_19 = _31;
  stmt_b: *_19 = _31;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1}_4)
  (chrec_b = {0B, +, 1}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_21 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_21 and *_19
common/mc.c:57:9: note: versioning for alias required: can't determine dependence between *_25 and *_19
common/mc.c:57:9: note: mark for run-time aliasing test between *_25 and *_19
common/mc.c:57:9: note: === vect_determine_vectorization_factor ===
common/mc.c:57:9: note: ==> examining phi: x_313 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: ==> examining phi: .MEM_350 = PHI <.MEM_41(4), .MEM_351(9)>

common/mc.c:57:9: note: ==> examining phi: ivtmp_10 = PHI <ivtmp_366(4), 16(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_313

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_313;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_312 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_355 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_354 + _17;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;

common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: get vectype for scalar type:  int
common/mc.c:57:9: note: vectype: vector(4) int
common/mc.c:57:9: note: nunits = 4
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: get vectype for scalar type:  unsigned char
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;

common/mc.c:57:9: note: get vectype for scalar type:  uint8_t
common/mc.c:57:9: note: vectype: vector(16) unsigned char
common/mc.c:57:9: note: nunits = 16
common/mc.c:57:9: note: ==> examining statement: x_32 = x_313 + 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: ivtmp_366 = ivtmp_10 - 1;

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_366 != 0)

common/mc.c:57:9: note: skip.
common/mc.c:57:9: note: vectorization factor = 16
common/mc.c:57:9: note: === vect_analyze_data_refs_alignment ===
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_21
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_25
common/mc.c:57:9: note: vect_compute_data_ref_alignment:
common/mc.c:57:9: note: can't force alignment of ref: *_19
common/mc.c:57:9: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:57:9: note: improved number of alias checks from 2 to 2
common/mc.c:57:9: note: === vect_enhance_data_refs_alignment ===
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: Unknown misalignment, is_packed = 0
common/mc.c:57:9: note: vect_can_advance_ivs_p:
common/mc.c:57:9: note: Analyze phi: x_313 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: Analyze phi: .MEM_350 = PHI <.MEM_41(4), .MEM_351(9)>

common/mc.c:57:9: note: virtual phi. skip.
common/mc.c:57:9: note: Analyze phi: ivtmp_10 = PHI <ivtmp_366(4), 16(9)>

common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: Vectorizing an unaligned access.
common/mc.c:57:9: note: === vect_analyze_slp ===
common/mc.c:57:9: note: === vect_make_slp_decision ===
common/mc.c:57:9: note: === vect_detect_hybrid_slp ===
common/mc.c:57:9: note: === vect_analyze_loop_operations ===
common/mc.c:57:9: note: examining phi: x_313 = PHI <x_32(4), 0(9)>

common/mc.c:57:9: note: examining phi: .MEM_350 = PHI <.MEM_41(4), .MEM_351(9)>

common/mc.c:57:9: note: examining phi: ivtmp_10 = PHI <ivtmp_366(4), 16(9)>

common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_313
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _17 = (sizetype) x_313;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _19 = pix1_312 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _21 = pix2_355 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _22 = *_21;
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_21
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _23 = (int) _22;
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _25 = pix3_354 + _17;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: _26 = *_25;
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_is_simple_use: operand *_25
common/mc.c:57:9: note: not ssa-name.
common/mc.c:57:9: note: use not simple.
common/mc.c:57:9: note: vect_model_load_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _27 = (int) _26;
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 6, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _28 = _23 + _27;
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: _29 = _28 + 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: === vectorizable_operation ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _30 = _29 >> 1;
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: === vectorizable_shift ===
common/mc.c:57:9: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 1 .
common/mc.c:57:9: note: ==> examining statement: _31 = (unsigned char) _30;
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: === vectorizable_conversion ===
common/mc.c:57:9: note: vect_model_promotion_demotion_cost: inside_cost = 3, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: *_19 = _31;
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_model_store_cost: unaligned supported by hardware.
common/mc.c:57:9: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
common/mc.c:57:9: note: ==> examining statement: x_32 = x_313 + 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: # DEBUG x => x_32
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: ivtmp_366 = ivtmp_10 - 1;
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: ==> examining statement: if (ivtmp_366 != 0)
common/mc.c:57:9: note: irrelevant.
common/mc.c:57:9: note: vectorization_factor = 16, niters = 16
common/mc.c:57:9: note: === vect_update_slp_costs_according_to_vf ===
cost model: Adding cost of checks for loop versioning aliasing.
common/mc.c:57:9: note: Cost model analysis: 
  Vector inside of loop cost: 33
  Vector prologue cost: 7
  Vector epilogue cost: 0
  Scalar iteration cost: 9
  Scalar outside cost: 1
  Vector outside cost: 7
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
common/mc.c:57:9: note:   Runtime profitability threshold = 15
common/mc.c:57:9: note:   Static estimate profitability threshold = 15
common/mc.c:57:9: note: loop vectorized
common/mc.c:57:9: note: === vec_transform_loop ===
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:57:9: note: create runtime check for data references *_19 and *_21
Applying pattern match.pd:49, generic-match.c:4015
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:57:9: note: create runtime check for data references *_19 and *_25
common/mc.c:57:9: note: created 2 versioning for alias checks.
gimple_simplified to _359 = pix2_355 >= _360;
gimple_simplified to _357 = pix1_312 >= _358;
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _356 = _357 | _359;
Applying pattern match.pd:318, generic-match.c:18
gimple_simplified to _342 = pix1_312 >= _343;
Applying pattern match.pd:318, gimple-match.c:17
gimple_simplified to _341 = _342 | _344;
Applying pattern match.pd:318, generic-match.c:18
gimple_simplified to _340 = _341 & _356;
common/mc.c:57:9: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
creating PHI node in block #6 for .MEM_41
Registering new PHI nodes in block #9
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Registering new PHI nodes in block #5
Updating SSA information for statement # DEBUG x => x_313
Updating SSA information for statement _17 = (sizetype) x_313;
Updating SSA information for statement _19 = pix1_312 + _17;
Updating SSA information for statement _21 = pix2_355 + _17;
Updating SSA information for statement _22 = *_21;
Updating SSA information for statement _23 = (int) _22;
Updating SSA information for statement _25 = pix3_354 + _17;
Updating SSA information for statement _26 = *_25;
Updating SSA information for statement _27 = (int) _26;
Updating SSA information for statement _28 = _23 + _27;
Updating SSA information for statement _29 = _28 + 1;
Updating SSA information for statement _30 = _29 >> 1;
Updating SSA information for statement _31 = (unsigned char) _30;
Updating SSA information for statement *_19 = _31;
Updating SSA information for statement x_32 = x_313 + 1;
Updating SSA information for statement # DEBUG x => x_32
Updating SSA information for statement # DEBUG x => x_32
Updating SSA information for statement ivtmp_366 = ivtmp_10 - 1;
Updating SSA information for statement if (ivtmp_366 != 0)
Registering new PHI nodes in block #4
Registering new PHI nodes in block #19
Registering new PHI nodes in block #18
Registering new PHI nodes in block #14
Updating SSA information for statement # DEBUG x => x_313
Updating SSA information for statement _336 = (sizetype) x_313;
Updating SSA information for statement _335 = pix1_312 + _17;
Updating SSA information for statement _334 = pix2_355 + _17;
Updating SSA information for statement _333 = *_21;
Updating SSA information for statement _332 = (int) _22;
Updating SSA information for statement _331 = pix3_354 + _17;
Updating SSA information for statement _330 = *_25;
Updating SSA information for statement _329 = (int) _26;
Updating SSA information for statement _328 = _23 + _27;
Updating SSA information for statement _327 = _28 + 1;
Updating SSA information for statement _326 = _29 >> 1;
Updating SSA information for statement _325 = (unsigned char) _30;
Updating SSA information for statement *_19 = _31;
Updating SSA information for statement x_323 = x_313 + 1;
Updating SSA information for statement # DEBUG x => x_32
Updating SSA information for statement # DEBUG x => x_32
Updating SSA information for statement ivtmp_322 = ivtmp_10 - 1;
Updating SSA information for statement if (ivtmp_366 != 0)
Registering new PHI nodes in block #15
Registering new PHI nodes in block #6
Registering new PHI nodes in block #8
Registering new PHI nodes in block #13

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_321 -> { .MEM_41 }
ivtmp_322 -> { ivtmp_366 }
x_323 -> { x_32 }
.MEM_324 -> { .MEM_41 }
_325 -> { _31 }
_326 -> { _30 }
_327 -> { _29 }
_328 -> { _28 }
_329 -> { _27 }
_330 -> { _26 }
_331 -> { _25 }
_332 -> { _23 }
_333 -> { _22 }
_334 -> { _21 }
_335 -> { _19 }
_336 -> { _17 }
ivtmp_337 -> { ivtmp_10 }
.MEM_338 -> { .MEM_350 }
x_339 -> { x_313 }
Incremental SSA update started at block: 9
Number of blocks in CFG: 20
Number of blocks to update: 11 ( 55%)
Affected blocks: 4 5 6 8 9 13 14 15 17 18 19


common/mc.c:57:9: note: ------>vectorizing phi: x_313 = PHI <x_32(4), 0(20)>

common/mc.c:57:9: note: ------>vectorizing phi: .MEM_350 = PHI <.MEM_41(4), .MEM_351(20)>

common/mc.c:57:9: note: ------>vectorizing phi: ivtmp_10 = PHI <ivtmp_366(4), 16(20)>

common/mc.c:57:9: note: ------>vectorizing statement: # DEBUG x => x_313

common/mc.c:57:9: note: ------>vectorizing statement: _17 = (sizetype) x_313;

common/mc.c:57:9: note: ------>vectorizing statement: _19 = pix1_312 + _17;

common/mc.c:57:9: note: ------>vectorizing statement: _21 = pix2_355 + _17;

common/mc.c:57:9: note: ------>vectorizing statement: _22 = *_21;

common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: transform load. ncopies = 1
common/mc.c:57:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *pix2_355
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:57:9: note: created vectp_pix2.995_320
common/mc.c:57:9: note: add new stmt: vect__22.996_50 = MEM[(uint8_t *)vectp_pix2.994_289];
common/mc.c:57:9: note: ------>vectorizing statement: _23 = (int) _22;

common/mc.c:57:9: note: multiple-types.
common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: transform conversion. ncopies = 1.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _22
common/mc.c:57:9: note: vect_is_simple_use: operand _22
common/mc.c:57:9: note: def_stmt: _22 = *_21;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _22
  def_stmt =  _22 = *_21;
common/mc.c:57:9: note: add new stmt: vect__23.998_46 = [vec_unpack_lo_expr] vect__22.996_50;
common/mc.c:57:9: note: add new stmt: vect__23.998_45 = [vec_unpack_hi_expr] vect__22.996_50;
common/mc.c:57:9: note: add new stmt: vect__23.997_44 = [vec_unpack_lo_expr] vect__23.998_46;
common/mc.c:57:9: note: add new stmt: vect__23.997_43 = [vec_unpack_hi_expr] vect__23.998_46;
common/mc.c:57:9: note: add new stmt: vect__23.997_42 = [vec_unpack_lo_expr] vect__23.998_45;
common/mc.c:57:9: note: add new stmt: vect__23.997_39 = [vec_unpack_hi_expr] vect__23.998_45;
common/mc.c:57:9: note: ------>vectorizing statement: _25 = pix3_354 + _17;

common/mc.c:57:9: note: ------>vectorizing statement: _26 = *_25;

common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: transform load. ncopies = 1
common/mc.c:57:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *pix3_354
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:57:9: note: created vectp_pix3.1000_24
common/mc.c:57:9: note: add new stmt: vect__26.1001_16 = MEM[(uint8_t *)vectp_pix3.999_20];
common/mc.c:57:9: note: ------>vectorizing statement: _27 = (int) _26;

common/mc.c:57:9: note: multiple-types.
common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: transform conversion. ncopies = 1.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _26
common/mc.c:57:9: note: vect_is_simple_use: operand _26
common/mc.c:57:9: note: def_stmt: _26 = *_25;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _26
  def_stmt =  _26 = *_25;
common/mc.c:57:9: note: add new stmt: vect__27.1003_15 = [vec_unpack_lo_expr] vect__26.1001_16;
common/mc.c:57:9: note: add new stmt: vect__27.1003_14 = [vec_unpack_hi_expr] vect__26.1001_16;
common/mc.c:57:9: note: add new stmt: vect__27.1002_13 = [vec_unpack_lo_expr] vect__27.1003_15;
common/mc.c:57:9: note: add new stmt: vect__27.1002_12 = [vec_unpack_hi_expr] vect__27.1003_15;
common/mc.c:57:9: note: add new stmt: vect__27.1002_371 = [vec_unpack_lo_expr] vect__27.1003_14;
common/mc.c:57:9: note: add new stmt: vect__27.1002_370 = [vec_unpack_hi_expr] vect__27.1003_14;
common/mc.c:57:9: note: ------>vectorizing statement: _28 = _23 + _27;

common/mc.c:57:9: note: multiple-types.
common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: transform binary/unary operation.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _23
common/mc.c:57:9: note: vect_is_simple_use: operand _23
common/mc.c:57:9: note: def_stmt: _23 = (int) _22;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _23
  def_stmt =  _23 = (int) _22;
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _27
common/mc.c:57:9: note: vect_is_simple_use: operand _27
common/mc.c:57:9: note: def_stmt: _27 = (int) _26;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _27
  def_stmt =  _27 = (int) _26;
common/mc.c:57:9: note: add new stmt: vect__28.1004_319 = vect__23.997_44 + vect__27.1002_13;
common/mc.c:57:9: note: add new stmt: vect__28.1004_314 = vect__23.997_43 + vect__27.1002_12;
common/mc.c:57:9: note: add new stmt: vect__28.1004_33 = vect__23.997_42 + vect__27.1002_371;
common/mc.c:57:9: note: add new stmt: vect__28.1004_35 = vect__23.997_39 + vect__27.1002_370;
common/mc.c:57:9: note: ------>vectorizing statement: _29 = _28 + 1;

common/mc.c:57:9: note: multiple-types.
common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: transform binary/unary operation.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _28
common/mc.c:57:9: note: vect_is_simple_use: operand _28
common/mc.c:57:9: note: def_stmt: _28 = _23 + _27;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _28
  def_stmt =  _28 = _23 + _27;
common/mc.c:57:9: note: vect_get_vec_def_for_operand: 1
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: Create vector_cst. nunits = 4
common/mc.c:57:9: note: created new init_stmt: vect_cst_.1006_37 = { 1, 1, 1, 1 };
common/mc.c:57:9: note: add new stmt: vect__29.1005_291 = vect__28.1004_319 + vect_cst_.1006_37;
common/mc.c:57:9: note: add new stmt: vect__29.1005_293 = vect__28.1004_314 + vect_cst_.1006_37;
common/mc.c:57:9: note: add new stmt: vect__29.1005_295 = vect__28.1004_33 + vect_cst_.1006_37;
common/mc.c:57:9: note: add new stmt: vect__29.1005_372 = vect__28.1004_35 + vect_cst_.1006_37;
common/mc.c:57:9: note: ------>vectorizing statement: _30 = _29 >> 1;

common/mc.c:57:9: note: multiple-types.
common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: vect_is_simple_use: operand 1
common/mc.c:57:9: note: vector/scalar shift/rotate found.
common/mc.c:57:9: note: transform binary/unary operation.
common/mc.c:57:9: note: operand 1 using scalar mode.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _29
common/mc.c:57:9: note: vect_is_simple_use: operand _29
common/mc.c:57:9: note: def_stmt: _29 = _28 + 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _29
  def_stmt =  _29 = _28 + 1;
common/mc.c:57:9: note: add new stmt: vect__30.1007_373 = vect__29.1005_291 >> 1;
common/mc.c:57:9: note: add new stmt: vect__30.1007_374 = vect__29.1005_293 >> 1;
common/mc.c:57:9: note: add new stmt: vect__30.1007_375 = vect__29.1005_295 >> 1;
common/mc.c:57:9: note: add new stmt: vect__30.1007_376 = vect__29.1005_372 >> 1;
common/mc.c:57:9: note: ------>vectorizing statement: _31 = (unsigned char) _30;

common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: transform conversion. ncopies = 1.
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _30
common/mc.c:57:9: note: vect_is_simple_use: operand _30
common/mc.c:57:9: note: def_stmt: _30 = _29 >> 1;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _30
  def_stmt =  _30 = _29 >> 1;
common/mc.c:57:9: note: add new stmt: vect__31.1009_377 = VEC_PACK_TRUNC_EXPR <vect__30.1007_373, vect__30.1007_374>;
common/mc.c:57:9: note: add new stmt: vect__31.1009_378 = VEC_PACK_TRUNC_EXPR <vect__30.1007_375, vect__30.1007_376>;
common/mc.c:57:9: note: add new stmt: vect__31.1008_379 = VEC_PACK_TRUNC_EXPR <vect__31.1009_377, vect__31.1009_378>;
common/mc.c:57:9: note: ------>vectorizing statement: *_19 = _31;

common/mc.c:57:9: note: transform statement.
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: transform store. ncopies = 1
common/mc.c:57:9: note: vect_get_vec_def_for_operand: _31
common/mc.c:57:9: note: vect_is_simple_use: operand _31
common/mc.c:57:9: note: def_stmt: _31 = (unsigned char) _30;
common/mc.c:57:9: note: type of def: 3.
common/mc.c:57:9: note: def =  _31
  def_stmt =  _31 = (unsigned char) _30;
common/mc.c:57:9: note: create vector_type-pointer variable to type: vector(16) unsigned char  vectorizing a pointer ref: *pix1_312
Applying pattern match.pd:49, generic-match.c:4015
common/mc.c:57:9: note: created vectp_pix1.1011_380
common/mc.c:57:9: note: add new stmt: MEM[(uint8_t *)vectp_pix1.1010_381] = vect__31.1008_379;
common/mc.c:57:9: note: ------>vectorizing statement: x_32 = x_313 + 1;

common/mc.c:57:9: note: ------>vectorizing statement: # DEBUG x => x_32

common/mc.c:57:9: note: ------>vectorizing statement: # DEBUG x => x_32

common/mc.c:57:9: note: ------>vectorizing statement: ivtmp_366 = ivtmp_10 - 1;

common/mc.c:57:9: note: ------>vectorizing statement: vectp_pix2.994_63 = vectp_pix2.994_289 + 16;

common/mc.c:57:9: note: ------>vectorizing statement: vectp_pix3.999_18 = vectp_pix3.999_20 + 16;

common/mc.c:57:9: note: ------>vectorizing statement: vectp_pix1.1010_382 = vectp_pix1.1010_381 + 16;

common/mc.c:57:9: note: ------>vectorizing statement: if (ivtmp_366 != 0)


loop at common/mc.c:59: if (ivtmp_384 < 1)

;; Scaling loop 4 with scale 0.062500, bounding iterations to 1 from guessed 16
;; guessed iterations are now 1
common/mc.c:57:9: note: LOOP VECTORIZED


Analyzing loop at common/mc.c:74
common/mc.c:74:5: note: ===== analyze_loop_nest =====
common/mc.c:74:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:74:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 5
  exit condition [15, + , 4294967295] != 0
  bounds on difference of bases: -15 ... -15
  result:
    # of iterations 15, bounded by 15
common/mc.c:74:5: note: === vect_analyze_data_refs ===
Creating dr for *pix2_349
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {0B, +, pretmp_317}_5
Creating dr for *pix3_348
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {0B, +, pretmp_368}_5
Creating dr for *pix1_347
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {0B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {1B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {1B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 1B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 1
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {1B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {2B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {2B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 2B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 2
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {2B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {3B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {3B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 3B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 3
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {3B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {4B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {4B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 4B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 4
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {4B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {5B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {5B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 5B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 5
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {5B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {6B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {6B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 6B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 6
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {6B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {7B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {7B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 7B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 7
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {7B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 8
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {8B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 8
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {8B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 8
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {8B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 9B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 9
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {9B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 9B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 9
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {9B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 9B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 9
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {9B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 10B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 10
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {10B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 10B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 10
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {10B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 10B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 10
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {10B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 11B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 11
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {11B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 11B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 11
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {11B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 11B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 11
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {11B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 12B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 12
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {12B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 12B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 12
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {12B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 12B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 12
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {12B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 13B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 13
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {13B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 13B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 13
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {13B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 13B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 13
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {13B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 14B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 14
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {14B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 14B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 14
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {14B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 14B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 14
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {14B, +, pretmp_318}_5
Creating dr for MEM[(uint8_t *)pix2_349 + 15B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix2_5(D)
	offset from base address: 0
	constant offset from base address: 15
	step: (ssizetype) pretmp_317
	aligned to: 128
	base_object: *pix2_5(D)
	Access function 0: {15B, +, pretmp_317}_5
Creating dr for MEM[(uint8_t *)pix3_348 + 15B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix3_7(D)
	offset from base address: 0
	constant offset from base address: 15
	step: (ssizetype) pretmp_368
	aligned to: 128
	base_object: *pix3_7(D)
	Access function 0: {15B, +, pretmp_368}_5
Creating dr for MEM[(uint8_t *)pix1_347 + 15B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: pix1_3(D)
	offset from base address: 0
	constant offset from base address: 15
	step: (ssizetype) pretmp_318
	aligned to: 128
	base_object: *pix1_3(D)
	Access function 0: {15B, +, pretmp_318}_5
common/mc.c:74:5: note: got vectype for stmt: _47 = *pix2_349;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: _51 = *pix3_348;
vector(16) unsigned char
common/mc.c:74:5: note: got vectype for stmt: *pix1_347 = iftmp.0_62;
vector(16) unsigned char
common/mc.c:74:5: note: not vectorized: not suitable for strided load *pix1_347 = iftmp.0_62;

common/mc.c:74:5: note: bad data references.
common/mc.c:109:1: note: vectorized 1 loops in function.
Merging blocks 9 and 16
Removing basic block 17
basic block 17, loop depth 1
 pred:      
 succ:       20


Removing basic block 19
basic block 19, loop depth 1
 pred:      
 succ:       6


pixel_avg_16x16 (uint8_t * pix1, int i_stride_pix1, uint8_t * pix2, int i_stride_pix2, uint8_t * pix3, int i_stride_pix3, int weight)
{
  vector(16) unsigned char * vectp_pix1.1011;
  vector(16) unsigned char * vectp_pix1.1010;
  vector(8) short int vect__31.1009;
  vector(16) unsigned char vect__31.1008;
  vector(4) int vect__30.1007;
  vector(4) int vect_cst_.1006;
  vector(4) int vect__29.1005;
  vector(4) int vect__28.1004;
  vector(8) short unsigned int vect__27.1003;
  vector(4) int vect__27.1002;
  vector(16) unsigned char vect__26.1001;
  vector(16) unsigned char * vectp_pix3.1000;
  vector(16) unsigned char * vectp_pix3.999;
  vector(8) short unsigned int vect__23.998;
  vector(4) int vect__23.997;
  vector(16) unsigned char vect__22.996;
  vector(16) unsigned char * vectp_pix2.995;
  vector(16) unsigned char * vectp_pix2.994;
  int y;
  const int i_weight2;
  uint8_t * dst;
  uint8_t * src1;
  uint8_t * src2;
  int x;
  int y;
  uint8_t * pix1;
  uint8_t * pix2;
  uint8_t * pix3;
  int y;
  unsigned int ivtmp_10;
  sizetype _17;
  uint8_t * _19;
  uint8_t * _21;
  unsigned char _22;
  int _23;
  uint8_t * _25;
  unsigned char _26;
  int _27;
  int _28;
  int _29;
  int _30;
  unsigned char _31;
  unsigned int ivtmp_41;
  unsigned char _47;
  int _48;
  int _49;
  unsigned char _51;
  int _52;
  int _53;
  int _54;
  int _55;
  int _56;
  int _57;
  int _58;
  int _59;
  unsigned char iftmp.0_60;
  unsigned char iftmp.0_61;
  unsigned char iftmp.0_62;
  unsigned char _64;
  int _65;
  int _66;
  unsigned char _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  unsigned char iftmp.0_76;
  unsigned char iftmp.0_77;
  unsigned char iftmp.0_78;
  unsigned char _79;
  int _80;
  int _81;
  unsigned char _82;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  unsigned char iftmp.0_91;
  unsigned char iftmp.0_92;
  unsigned char iftmp.0_93;
  unsigned char _94;
  int _95;
  int _96;
  unsigned char _97;
  int _98;
  int _99;
  int _100;
  int _101;
  int _102;
  int _103;
  int _104;
  int _105;
  unsigned char iftmp.0_106;
  unsigned char iftmp.0_107;
  unsigned char iftmp.0_108;
  unsigned char _109;
  int _110;
  int _111;
  unsigned char _112;
  int _113;
  int _114;
  int _115;
  int _116;
  int _117;
  int _118;
  int _119;
  int _120;
  unsigned char iftmp.0_121;
  unsigned char iftmp.0_122;
  unsigned char iftmp.0_123;
  unsigned char _124;
  int _125;
  int _126;
  unsigned char _127;
  int _128;
  int _129;
  int _130;
  int _131;
  int _132;
  int _133;
  int _134;
  int _135;
  unsigned char iftmp.0_136;
  unsigned char iftmp.0_137;
  unsigned char iftmp.0_138;
  unsigned char _139;
  int _140;
  int _141;
  unsigned char _142;
  int _143;
  int _144;
  int _145;
  int _146;
  int _147;
  int _148;
  int _149;
  int _150;
  unsigned char iftmp.0_151;
  unsigned char iftmp.0_152;
  unsigned char iftmp.0_153;
  unsigned char _154;
  int _155;
  int _156;
  unsigned char _157;
  int _158;
  int _159;
  int _160;
  int _161;
  int _162;
  int _163;
  int _164;
  int _165;
  unsigned char iftmp.0_166;
  unsigned char iftmp.0_167;
  unsigned char iftmp.0_168;
  unsigned char _169;
  int _170;
  int _171;
  unsigned char _172;
  int _173;
  int _174;
  int _175;
  int _176;
  int _177;
  int _178;
  int _179;
  int _180;
  unsigned char iftmp.0_181;
  unsigned char iftmp.0_182;
  unsigned char iftmp.0_183;
  unsigned char _184;
  int _185;
  int _186;
  unsigned char _187;
  int _188;
  int _189;
  int _190;
  int _191;
  int _192;
  int _193;
  int _194;
  int _195;
  unsigned char iftmp.0_196;
  unsigned char iftmp.0_197;
  unsigned char iftmp.0_198;
  unsigned char _199;
  int _200;
  int _201;
  unsigned char _202;
  int _203;
  int _204;
  int _205;
  int _206;
  int _207;
  int _208;
  int _209;
  int _210;
  unsigned char iftmp.0_211;
  unsigned char iftmp.0_212;
  unsigned char iftmp.0_213;
  unsigned char _214;
  int _215;
  int _216;
  unsigned char _217;
  int _218;
  int _219;
  int _220;
  int _221;
  int _222;
  int _223;
  int _224;
  int _225;
  unsigned char iftmp.0_226;
  unsigned char iftmp.0_227;
  unsigned char iftmp.0_228;
  unsigned char _229;
  int _230;
  int _231;
  unsigned char _232;
  int _233;
  int _234;
  int _235;
  int _236;
  int _237;
  int _238;
  int _239;
  int _240;
  unsigned char iftmp.0_241;
  unsigned char iftmp.0_242;
  unsigned char iftmp.0_243;
  unsigned char _244;
  int _245;
  int _246;
  unsigned char _247;
  int _248;
  int _249;
  int _250;
  int _251;
  int _252;
  int _253;
  int _254;
  int _255;
  unsigned char iftmp.0_256;
  unsigned char iftmp.0_257;
  unsigned char iftmp.0_258;
  unsigned char _259;
  int _260;
  int _261;
  unsigned char _262;
  int _263;
  int _264;
  int _265;
  int _266;
  int _267;
  int _268;
  int _269;
  int _270;
  unsigned char iftmp.0_271;
  unsigned char iftmp.0_272;
  unsigned char iftmp.0_273;
  unsigned char _274;
  int _275;
  int _276;
  unsigned char _277;
  int _278;
  int _279;
  int _280;
  int _281;
  int _282;
  int _283;
  int _284;
  int _285;
  unsigned char iftmp.0_286;
  unsigned char iftmp.0_287;
  unsigned char iftmp.0_288;
  sizetype pretmp_315;
  sizetype pretmp_316;
  sizetype pretmp_317;
  sizetype pretmp_318;
  unsigned int ivtmp_322;
  unsigned char _325;
  int _326;
  int _327;
  int _328;
  int _329;
  unsigned char _330;
  uint8_t * _331;
  int _332;
  unsigned char _333;
  uint8_t * _334;
  uint8_t * _335;
  sizetype _336;
  unsigned int ivtmp_337;
  _Bool _340;
  _Bool _341;
  _Bool _342;
  uint8_t * _343;
  _Bool _344;
  uint8_t * _345;
  _Bool _356;
  _Bool _357;
  uint8_t * _358;
  _Bool _359;
  uint8_t * _360;
  unsigned int ivtmp_362;
  unsigned int ivtmp_363;
  unsigned int ivtmp_364;
  unsigned int ivtmp_365;
  unsigned int ivtmp_366;
  sizetype pretmp_368;
  sizetype pretmp_369;
  unsigned int ivtmp_384;

  <bb 2>:
  if (weight_1(D) == 32)
    goto <bb 3>;
  else
    goto <bb 15>;

  <bb 3>:
  pretmp_316 = (sizetype) i_stride_pix1_4(D);
  pretmp_315 = (sizetype) i_stride_pix2_6(D);
  pretmp_369 = (sizetype) i_stride_pix3_8(D);
  goto <bb 14>;

  <bb 4>:
  goto <bb 9>;

  <bb 5>:

  <bb 6>:
  # x_339 = PHI <0(5), x_323(7)>
  # ivtmp_337 = PHI <16(5), ivtmp_322(7)>
  # DEBUG x => x_339
  _336 = (sizetype) x_339;
  _335 = pix1_312 + _336;
  _334 = pix2_355 + _336;
  _333 = *_334;
  _332 = (int) _333;
  _331 = pix3_354 + _336;
  _330 = *_331;
  _329 = (int) _330;
  _328 = _332 + _329;
  _327 = _328 + 1;
  _326 = _327 >> 1;
  _325 = (unsigned char) _326;
  *_335 = _325;
  x_323 = x_339 + 1;
  # DEBUG x => x_323
  # DEBUG x => x_323
  ivtmp_322 = ivtmp_337 - 1;
  if (ivtmp_322 != 0)
    goto <bb 7>;
  else
    goto <bb 10>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  vectp_pix2.995_320 = pix2_355;
  vectp_pix3.1000_24 = pix3_354;
  vect_cst_.1006_37 = { 1, 1, 1, 1 };
  vectp_pix1.1011_380 = pix1_312;

  <bb 9>:
  # x_313 = PHI <x_32(4), 0(8)>
  # ivtmp_10 = PHI <ivtmp_366(4), 16(8)>
  # vectp_pix2.994_289 = PHI <vectp_pix2.994_63(4), vectp_pix2.995_320(8)>
  # vectp_pix3.999_20 = PHI <vectp_pix3.999_18(4), vectp_pix3.1000_24(8)>
  # vectp_pix1.1010_381 = PHI <vectp_pix1.1010_382(4), vectp_pix1.1011_380(8)>
  # ivtmp_41 = PHI <ivtmp_384(4), 0(8)>
  # DEBUG x => x_313
  _17 = (sizetype) x_313;
  _19 = pix1_312 + _17;
  _21 = pix2_355 + _17;
  vect__22.996_50 = MEM[(uint8_t *)vectp_pix2.994_289];
  _22 = *_21;
  vect__23.998_46 = [vec_unpack_lo_expr] vect__22.996_50;
  vect__23.998_45 = [vec_unpack_hi_expr] vect__22.996_50;
  vect__23.997_44 = [vec_unpack_lo_expr] vect__23.998_46;
  vect__23.997_43 = [vec_unpack_hi_expr] vect__23.998_46;
  vect__23.997_42 = [vec_unpack_lo_expr] vect__23.998_45;
  vect__23.997_39 = [vec_unpack_hi_expr] vect__23.998_45;
  _23 = (int) _22;
  _25 = pix3_354 + _17;
  vect__26.1001_16 = MEM[(uint8_t *)vectp_pix3.999_20];
  _26 = *_25;
  vect__27.1003_15 = [vec_unpack_lo_expr] vect__26.1001_16;
  vect__27.1003_14 = [vec_unpack_hi_expr] vect__26.1001_16;
  vect__27.1002_13 = [vec_unpack_lo_expr] vect__27.1003_15;
  vect__27.1002_12 = [vec_unpack_hi_expr] vect__27.1003_15;
  vect__27.1002_371 = [vec_unpack_lo_expr] vect__27.1003_14;
  vect__27.1002_370 = [vec_unpack_hi_expr] vect__27.1003_14;
  _27 = (int) _26;
  vect__28.1004_319 = vect__23.997_44 + vect__27.1002_13;
  vect__28.1004_314 = vect__23.997_43 + vect__27.1002_12;
  vect__28.1004_33 = vect__23.997_42 + vect__27.1002_371;
  vect__28.1004_35 = vect__23.997_39 + vect__27.1002_370;
  _28 = _23 + _27;
  vect__29.1005_291 = vect__28.1004_319 + vect_cst_.1006_37;
  vect__29.1005_293 = vect__28.1004_314 + vect_cst_.1006_37;
  vect__29.1005_295 = vect__28.1004_33 + vect_cst_.1006_37;
  vect__29.1005_372 = vect__28.1004_35 + vect_cst_.1006_37;
  _29 = _28 + 1;
  vect__30.1007_373 = vect__29.1005_291 >> 1;
  vect__30.1007_374 = vect__29.1005_293 >> 1;
  vect__30.1007_375 = vect__29.1005_295 >> 1;
  vect__30.1007_376 = vect__29.1005_372 >> 1;
  _30 = _29 >> 1;
  vect__31.1009_377 = VEC_PACK_TRUNC_EXPR <vect__30.1007_373, vect__30.1007_374>;
  vect__31.1009_378 = VEC_PACK_TRUNC_EXPR <vect__30.1007_375, vect__30.1007_376>;
  vect__31.1008_379 = VEC_PACK_TRUNC_EXPR <vect__31.1009_377, vect__31.1009_378>;
  _31 = (unsigned char) _30;
  MEM[(uint8_t *)vectp_pix1.1010_381] = vect__31.1008_379;
  x_32 = x_313 + 1;
  # DEBUG x => x_32
  # DEBUG x => x_32
  ivtmp_366 = ivtmp_10 - 1;
  vectp_pix2.994_63 = vectp_pix2.994_289 + 16;
  vectp_pix3.999_18 = vectp_pix3.999_20 + 16;
  vectp_pix1.1010_382 = vectp_pix1.1010_381 + 16;
  ivtmp_384 = ivtmp_41 + 1;
  if (ivtmp_384 < 1)
    goto <bb 4>;
  else
    goto <bb 10>;

  <bb 10>:
  pix2_34 = pix2_355 + pretmp_315;
  # DEBUG src1 => pix2_34
  pix3_36 = pix3_354 + pretmp_369;
  # DEBUG src2 => pix3_36
  pix1_38 = pix1_312 + pretmp_316;
  # DEBUG dst => pix1_38
  y_40 = y_353 + 1;
  # DEBUG y => y_40
  # DEBUG y => y_40
  # DEBUG src2 => pix3_36
  # DEBUG src1 => pix2_34
  # DEBUG dst => pix1_38
  ivtmp_364 = ivtmp_365 - 1;
  if (ivtmp_364 != 0)
    goto <bb 13>;
  else
    goto <bb 11>;

  <bb 11>:

  <bb 12>:
  return;

  <bb 13>:

  <bb 14>:
  # pix1_312 = PHI <pix1_3(D)(3), pix1_38(13)>
  # pix2_355 = PHI <pix2_5(D)(3), pix2_34(13)>
  # pix3_354 = PHI <pix3_7(D)(3), pix3_36(13)>
  # y_353 = PHI <0(3), y_40(13)>
  # ivtmp_365 = PHI <16(3), ivtmp_364(13)>
  # DEBUG y => y_353
  # DEBUG src2 => pix3_354
  # DEBUG src1 => pix2_355
  # DEBUG dst => pix1_312
  # DEBUG x => 0
  _360 = pix1_312 + 16;
  _359 = pix2_355 >= _360;
  _358 = pix2_355 + 16;
  _357 = pix1_312 >= _358;
  _356 = _357 | _359;
  _345 = pix1_312 + 16;
  _344 = _345 <= pix3_354;
  _343 = pix3_354 + 16;
  _342 = pix1_312 >= _343;
  _341 = _342 | _344;
  _340 = _341 & _356;
  if (_340 != 0)
    goto <bb 8>;
  else
    goto <bb 5>;

  <bb 15>:
  # DEBUG dst => pix1_3(D)
  # DEBUG i_dst => i_stride_pix1_4(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG i_src1 => i_stride_pix2_6(D)
  # DEBUG src2 => pix3_7(D)
  # DEBUG i_src2 => i_stride_pix3_8(D)
  # DEBUG width => 16
  # DEBUG height => 16
  # DEBUG i_weight1 => weight_1(D)
  i_weight2_11 = 64 - weight_1(D);
  # DEBUG i_weight2 => i_weight2_11
  # DEBUG y => 0
  # DEBUG y => 0
  # DEBUG src2 => pix3_7(D)
  # DEBUG src1 => pix2_5(D)
  # DEBUG dst => pix1_3(D)
  pretmp_318 = (sizetype) i_stride_pix1_4(D);
  pretmp_317 = (sizetype) i_stride_pix2_6(D);
  pretmp_368 = (sizetype) i_stride_pix3_8(D);

  <bb 16>:
  # pix2_349 = PHI <pix2_294(18), pix2_5(D)(15)>
  # pix3_348 = PHI <pix3_296(18), pix3_7(D)(15)>
  # pix1_347 = PHI <pix1_292(18), pix1_3(D)(15)>
  # y_346 = PHI <y_290(18), 0(15)>
  # ivtmp_363 = PHI <ivtmp_362(18), 16(15)>
  # DEBUG y => NULL
  # DEBUG src2 => NULL
  # DEBUG src1 => NULL
  # DEBUG dst => NULL
  _47 = *pix2_349;
  _48 = (int) _47;
  _49 = weight_1(D) * _48;
  _51 = *pix3_348;
  _52 = (int) _51;
  _53 = i_weight2_11 * _52;
  _54 = _49 + _53;
  _55 = _54 + 32;
  _56 = _55 >> 6;
  # DEBUG x => NULL
  _57 = _56 & -256;
  _58 = -_56;
  _59 = _58 >> 31;
  iftmp.0_60 = (unsigned char) _59;
  iftmp.0_61 = (unsigned char) _56;
  iftmp.0_62 = _57 != 0 ? iftmp.0_60 : iftmp.0_61;
  # DEBUG x => NULL
  *pix1_347 = iftmp.0_62;
  _64 = MEM[(uint8_t *)pix2_349 + 1B];
  _65 = (int) _64;
  _66 = weight_1(D) * _65;
  _67 = MEM[(uint8_t *)pix3_348 + 1B];
  _68 = (int) _67;
  _69 = i_weight2_11 * _68;
  _70 = _66 + _69;
  _71 = _70 + 32;
  _72 = _71 >> 6;
  # DEBUG x => NULL
  _73 = _72 & -256;
  _74 = -_72;
  _75 = _74 >> 31;
  iftmp.0_76 = (unsigned char) _75;
  iftmp.0_77 = (unsigned char) _72;
  iftmp.0_78 = _73 != 0 ? iftmp.0_76 : iftmp.0_77;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 1B] = iftmp.0_78;
  _79 = MEM[(uint8_t *)pix2_349 + 2B];
  _80 = (int) _79;
  _81 = weight_1(D) * _80;
  _82 = MEM[(uint8_t *)pix3_348 + 2B];
  _83 = (int) _82;
  _84 = i_weight2_11 * _83;
  _85 = _81 + _84;
  _86 = _85 + 32;
  _87 = _86 >> 6;
  # DEBUG x => NULL
  _88 = _87 & -256;
  _89 = -_87;
  _90 = _89 >> 31;
  iftmp.0_91 = (unsigned char) _90;
  iftmp.0_92 = (unsigned char) _87;
  iftmp.0_93 = _88 != 0 ? iftmp.0_91 : iftmp.0_92;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 2B] = iftmp.0_93;
  _94 = MEM[(uint8_t *)pix2_349 + 3B];
  _95 = (int) _94;
  _96 = weight_1(D) * _95;
  _97 = MEM[(uint8_t *)pix3_348 + 3B];
  _98 = (int) _97;
  _99 = i_weight2_11 * _98;
  _100 = _96 + _99;
  _101 = _100 + 32;
  _102 = _101 >> 6;
  # DEBUG x => NULL
  _103 = _102 & -256;
  _104 = -_102;
  _105 = _104 >> 31;
  iftmp.0_106 = (unsigned char) _105;
  iftmp.0_107 = (unsigned char) _102;
  iftmp.0_108 = _103 != 0 ? iftmp.0_106 : iftmp.0_107;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 3B] = iftmp.0_108;
  _109 = MEM[(uint8_t *)pix2_349 + 4B];
  _110 = (int) _109;
  _111 = weight_1(D) * _110;
  _112 = MEM[(uint8_t *)pix3_348 + 4B];
  _113 = (int) _112;
  _114 = i_weight2_11 * _113;
  _115 = _111 + _114;
  _116 = _115 + 32;
  _117 = _116 >> 6;
  # DEBUG x => NULL
  _118 = _117 & -256;
  _119 = -_117;
  _120 = _119 >> 31;
  iftmp.0_121 = (unsigned char) _120;
  iftmp.0_122 = (unsigned char) _117;
  iftmp.0_123 = _118 != 0 ? iftmp.0_121 : iftmp.0_122;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 4B] = iftmp.0_123;
  _124 = MEM[(uint8_t *)pix2_349 + 5B];
  _125 = (int) _124;
  _126 = weight_1(D) * _125;
  _127 = MEM[(uint8_t *)pix3_348 + 5B];
  _128 = (int) _127;
  _129 = i_weight2_11 * _128;
  _130 = _126 + _129;
  _131 = _130 + 32;
  _132 = _131 >> 6;
  # DEBUG x => NULL
  _133 = _132 & -256;
  _134 = -_132;
  _135 = _134 >> 31;
  iftmp.0_136 = (unsigned char) _135;
  iftmp.0_137 = (unsigned char) _132;
  iftmp.0_138 = _133 != 0 ? iftmp.0_136 : iftmp.0_137;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 5B] = iftmp.0_138;
  _139 = MEM[(uint8_t *)pix2_349 + 6B];
  _140 = (int) _139;
  _141 = weight_1(D) * _140;
  _142 = MEM[(uint8_t *)pix3_348 + 6B];
  _143 = (int) _142;
  _144 = i_weight2_11 * _143;
  _145 = _141 + _144;
  _146 = _145 + 32;
  _147 = _146 >> 6;
  # DEBUG x => NULL
  _148 = _147 & -256;
  _149 = -_147;
  _150 = _149 >> 31;
  iftmp.0_151 = (unsigned char) _150;
  iftmp.0_152 = (unsigned char) _147;
  iftmp.0_153 = _148 != 0 ? iftmp.0_151 : iftmp.0_152;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 6B] = iftmp.0_153;
  _154 = MEM[(uint8_t *)pix2_349 + 7B];
  _155 = (int) _154;
  _156 = weight_1(D) * _155;
  _157 = MEM[(uint8_t *)pix3_348 + 7B];
  _158 = (int) _157;
  _159 = i_weight2_11 * _158;
  _160 = _156 + _159;
  _161 = _160 + 32;
  _162 = _161 >> 6;
  # DEBUG x => NULL
  _163 = _162 & -256;
  _164 = -_162;
  _165 = _164 >> 31;
  iftmp.0_166 = (unsigned char) _165;
  iftmp.0_167 = (unsigned char) _162;
  iftmp.0_168 = _163 != 0 ? iftmp.0_166 : iftmp.0_167;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 7B] = iftmp.0_168;
  _169 = MEM[(uint8_t *)pix2_349 + 8B];
  _170 = (int) _169;
  _171 = weight_1(D) * _170;
  _172 = MEM[(uint8_t *)pix3_348 + 8B];
  _173 = (int) _172;
  _174 = i_weight2_11 * _173;
  _175 = _171 + _174;
  _176 = _175 + 32;
  _177 = _176 >> 6;
  # DEBUG x => NULL
  _178 = _177 & -256;
  _179 = -_177;
  _180 = _179 >> 31;
  iftmp.0_181 = (unsigned char) _180;
  iftmp.0_182 = (unsigned char) _177;
  iftmp.0_183 = _178 != 0 ? iftmp.0_181 : iftmp.0_182;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 8B] = iftmp.0_183;
  _184 = MEM[(uint8_t *)pix2_349 + 9B];
  _185 = (int) _184;
  _186 = weight_1(D) * _185;
  _187 = MEM[(uint8_t *)pix3_348 + 9B];
  _188 = (int) _187;
  _189 = i_weight2_11 * _188;
  _190 = _186 + _189;
  _191 = _190 + 32;
  _192 = _191 >> 6;
  # DEBUG x => NULL
  _193 = _192 & -256;
  _194 = -_192;
  _195 = _194 >> 31;
  iftmp.0_196 = (unsigned char) _195;
  iftmp.0_197 = (unsigned char) _192;
  iftmp.0_198 = _193 != 0 ? iftmp.0_196 : iftmp.0_197;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 9B] = iftmp.0_198;
  _199 = MEM[(uint8_t *)pix2_349 + 10B];
  _200 = (int) _199;
  _201 = weight_1(D) * _200;
  _202 = MEM[(uint8_t *)pix3_348 + 10B];
  _203 = (int) _202;
  _204 = i_weight2_11 * _203;
  _205 = _201 + _204;
  _206 = _205 + 32;
  _207 = _206 >> 6;
  # DEBUG x => NULL
  _208 = _207 & -256;
  _209 = -_207;
  _210 = _209 >> 31;
  iftmp.0_211 = (unsigned char) _210;
  iftmp.0_212 = (unsigned char) _207;
  iftmp.0_213 = _208 != 0 ? iftmp.0_211 : iftmp.0_212;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 10B] = iftmp.0_213;
  _214 = MEM[(uint8_t *)pix2_349 + 11B];
  _215 = (int) _214;
  _216 = weight_1(D) * _215;
  _217 = MEM[(uint8_t *)pix3_348 + 11B];
  _218 = (int) _217;
  _219 = i_weight2_11 * _218;
  _220 = _216 + _219;
  _221 = _220 + 32;
  _222 = _221 >> 6;
  # DEBUG x => NULL
  _223 = _222 & -256;
  _224 = -_222;
  _225 = _224 >> 31;
  iftmp.0_226 = (unsigned char) _225;
  iftmp.0_227 = (unsigned char) _222;
  iftmp.0_228 = _223 != 0 ? iftmp.0_226 : iftmp.0_227;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 11B] = iftmp.0_228;
  _229 = MEM[(uint8_t *)pix2_349 + 12B];
  _230 = (int) _229;
  _231 = weight_1(D) * _230;
  _232 = MEM[(uint8_t *)pix3_348 + 12B];
  _233 = (int) _232;
  _234 = i_weight2_11 * _233;
  _235 = _231 + _234;
  _236 = _235 + 32;
  _237 = _236 >> 6;
  # DEBUG x => NULL
  _238 = _237 & -256;
  _239 = -_237;
  _240 = _239 >> 31;
  iftmp.0_241 = (unsigned char) _240;
  iftmp.0_242 = (unsigned char) _237;
  iftmp.0_243 = _238 != 0 ? iftmp.0_241 : iftmp.0_242;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 12B] = iftmp.0_243;
  _244 = MEM[(uint8_t *)pix2_349 + 13B];
  _245 = (int) _244;
  _246 = weight_1(D) * _245;
  _247 = MEM[(uint8_t *)pix3_348 + 13B];
  _248 = (int) _247;
  _249 = i_weight2_11 * _248;
  _250 = _246 + _249;
  _251 = _250 + 32;
  _252 = _251 >> 6;
  # DEBUG x => NULL
  _253 = _252 & -256;
  _254 = -_252;
  _255 = _254 >> 31;
  iftmp.0_256 = (unsigned char) _255;
  iftmp.0_257 = (unsigned char) _252;
  iftmp.0_258 = _253 != 0 ? iftmp.0_256 : iftmp.0_257;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 13B] = iftmp.0_258;
  _259 = MEM[(uint8_t *)pix2_349 + 14B];
  _260 = (int) _259;
  _261 = weight_1(D) * _260;
  _262 = MEM[(uint8_t *)pix3_348 + 14B];
  _263 = (int) _262;
  _264 = i_weight2_11 * _263;
  _265 = _261 + _264;
  _266 = _265 + 32;
  _267 = _266 >> 6;
  # DEBUG x => NULL
  _268 = _267 & -256;
  _269 = -_267;
  _270 = _269 >> 31;
  iftmp.0_271 = (unsigned char) _270;
  iftmp.0_272 = (unsigned char) _267;
  iftmp.0_273 = _268 != 0 ? iftmp.0_271 : iftmp.0_272;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 14B] = iftmp.0_273;
  _274 = MEM[(uint8_t *)pix2_349 + 15B];
  _275 = (int) _274;
  _276 = weight_1(D) * _275;
  _277 = MEM[(uint8_t *)pix3_348 + 15B];
  _278 = (int) _277;
  _279 = i_weight2_11 * _278;
  _280 = _276 + _279;
  _281 = _280 + 32;
  _282 = _281 >> 6;
  # DEBUG x => NULL
  _283 = _282 & -256;
  _284 = -_282;
  _285 = _284 >> 31;
  iftmp.0_286 = (unsigned char) _285;
  iftmp.0_287 = (unsigned char) _282;
  iftmp.0_288 = _283 != 0 ? iftmp.0_286 : iftmp.0_287;
  # DEBUG x => NULL
  MEM[(uint8_t *)pix1_347 + 15B] = iftmp.0_288;
  y_290 = y_346 + 1;
  # DEBUG y => y_290
  pix1_292 = pix1_347 + pretmp_318;
  # DEBUG dst => pix1_292
  pix2_294 = pix2_349 + pretmp_317;
  # DEBUG src1 => pix2_294
  pix3_296 = pix3_348 + pretmp_368;
  # DEBUG src2 => pix3_296
  # DEBUG y => y_290
  # DEBUG src2 => pix3_296
  # DEBUG src1 => pix2_294
  # DEBUG dst => pix1_292
  ivtmp_362 = ivtmp_363 - 1;
  if (ivtmp_362 != 0)
    goto <bb 18>;
  else
    goto <bb 17>;

  <bb 17>:
  goto <bb 12>;

  <bb 18>:
  goto <bb 16>;

}



;; Function x264_frame_init_lowres (x264_frame_init_lowres, funcdef_no=140, decl_uid=4927, cgraph_uid=140, symbol_order=185)


Analyzing loop at common/mc.c:294
common/mc.c:294:5: note: ===== analyze_loop_nest =====
common/mc.c:294:5: note: === vect_analyze_loop_form ===
common/mc.c:294:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:294:5: note: === vect_analyze_loop_form ===
common/mc.c:294:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [1, + , 1](no_overflow) <= _97
  bounds on difference of bases: -1 ... 2147483646
Applying pattern match.pd:49, generic-match.c:3223
  result:
    # of iterations (unsigned int) _97, bounded by 2147483647
common/mc.c:294:5: note: Symbolic number of iterations is (unsigned int) _97 + 1
common/mc.c:294:5: note: not vectorized: control flow in loop.
common/mc.c:294:5: note: bad loop form.

Analyzing loop at common/mc.c:295
common/mc.c:295:9: note: ===== analyze_loop_nest =====
common/mc.c:295:9: note: === vect_analyze_loop_form ===
common/mc.c:295:9: note: === get_loop_niters ===
common/mc.c:295:9: note: Symbolic number of iterations is (unsigned int) _97 + 1
common/mc.c:295:9: note: === vect_analyze_data_refs ===
Creating dr for frame_12(D)->lowres_mvs[y_89][x_86]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: frame_12(D)
	offset from base address: (ssizetype) ((sizetype) y_89 * 136)
	constant offset from base address: 280
	step: 8
	aligned to: 8
	base_object: *frame_12(D)
	Access function 0: {0, +, 1}_4
	Access function 1: y_89
	Access function 2: 2240
Creating dr for *_64[0]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_64
	Access function 0: 0
common/mc.c:295:9: note: got vectype for stmt: _64 = frame_12(D)->lowres_mvs[y_89][x_86];
vector(2) long unsigned int
common/mc.c:295:9: note: not vectorized: data ref analysis failed *_64[0] = 32767;

common/mc.c:295:9: note: bad data references.

Analyzing loop at common/mc.c:290
common/mc.c:290:5: note: ===== analyze_loop_nest =====
common/mc.c:290:5: note: === vect_analyze_loop_form ===
common/mc.c:290:5: note: ===== analyze_loop_nest_1 =====
common/mc.c:290:5: note: === vect_analyze_loop_form ===
common/mc.c:290:5: note: === get_loop_niters ===
common/mc.c:290:5: note: not vectorized: number of iterations cannot be computed.
common/mc.c:290:5: note: bad inner-loop form.
common/mc.c:290:5: note: not vectorized: Bad inner loop.
common/mc.c:290:5: note: bad loop form.

Analyzing loop at common/mc.c:291
common/mc.c:291:9: note: ===== analyze_loop_nest =====
common/mc.c:291:9: note: === vect_analyze_loop_form ===
common/mc.c:291:9: note: === get_loop_niters ===
common/mc.c:291:9: note: not vectorized: number of iterations cannot be computed.
common/mc.c:291:9: note: bad loop form.

Analyzing loop at common/mc.c:281
common/mc.c:281:5: note: ===== analyze_loop_nest =====
common/mc.c:281:5: note: === vect_analyze_loop_form ===
common/mc.c:281:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < i_height_15
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) i_height_15 + 4294967295, bounded by 2147483646
Applying pattern match.pd:494, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
common/mc.c:281:5: note: Symbolic number of iterations is (unsigned int) i_height_15
common/mc.c:281:5: note: === vect_analyze_data_refs ===
Creating dr for *_25
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
	base_address: src_13 + (sizetype) i_width_16
	offset from base address: 0
	constant offset from base address: -1
	step: (ssizetype) i_stride_14
	aligned to: 128
	base_object: *src_13 + (sizetype) i_width_16
	Access function 0: {-1B, +, (sizetype) i_stride_14}_1
Creating dr for *_20
analyze_innermost: Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: src_13 + (sizetype) i_width_16
	offset from base address: 0
	constant offset from base address: 0
	step: (ssizetype) i_stride_14
	aligned to: 128
	base_object: *src_13 + (sizetype) i_width_16
	Access function 0: {0B, +, (sizetype) i_stride_14}_1
common/mc.c:281:5: note: got vectype for stmt: _26 = *_25;
vector(16) unsigned char
common/mc.c:281:5: note: got vectype for stmt: *_20 = _26;
vector(16) unsigned char
common/mc.c:281:5: note: not vectorized: not suitable for strided load *_20 = _26;

common/mc.c:281:5: note: bad data references.
common/mc.c:272:6: note: vectorized 0 loops in function.
x264_frame_init_lowres (struct x264_t * h, struct x264_frame_t * frame)
{
  int y;
  int x;
  int i_width;
  int i_height;
  int i_stride;
  uint8_t * src;
  int prephitmp_1;
  int prephitmp_4;
  int _17;
  int _18;
  sizetype _19;
  uint8_t * _20;
  int _23;
  sizetype _24;
  uint8_t * _25;
  unsigned char _26;
  void * (*<Tfad>) (void *, const void *, size_t, void, ...) _30;
  long unsigned int _31;
  int _32;
  int _33;
  sizetype _34;
  const void * _35;
  int _36;
  sizetype _37;
  void * _38;
  void (*<Tfb3>) (uint8_t *, uint8_t *, uint8_t *, uint8_t *, uint8_t *, int, int, int, int) _40;
  int _41;
  int _42;
  int _43;
  uint8_t * _44;
  uint8_t * _45;
  uint8_t * _46;
  uint8_t * _47;
  int[18][18] * _50;
  _Bool _52;
  int _55;
  int _56;
  int * _57;
  int _61;
  int _62;
  int prephitmp_63;
  int16_t[2] * _64;
  int _68;
  int prephitmp_73;
  int pretmp_76;
  int _80;
  int pretmp_83;
  int _97;

  <bb 2>:
  src_13 = frame_12(D)->plane[0];
  # DEBUG src => src_13
  i_stride_14 = frame_12(D)->i_stride[0];
  # DEBUG i_stride => i_stride_14
  i_height_15 = frame_12(D)->i_lines[0];
  # DEBUG i_height => i_height_15
  i_width_16 = frame_12(D)->i_width[0];
  # DEBUG i_width => i_width_16
  # DEBUG y => 0
  # DEBUG y => 0
  if (i_height_15 > 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  _30 = h_29(D)->mc.memcpy_aligned;
  _31 = (long unsigned int) i_width_16;
  _32 = i_height_15 + -1;
  _33 = i_stride_14 * _32;
  _34 = (sizetype) _33;
  _35 = src_13 + _34;
  _36 = i_stride_14 * i_height_15;
  _37 = (sizetype) _36;
  _38 = src_13 + _37;
  _30 (_38, _35, _31);
  _40 = h_29(D)->mc.frame_init_lowres_core;
  _41 = frame_12(D)->i_lines_lowres;
  _42 = frame_12(D)->i_width_lowres;
  _43 = frame_12(D)->i_stride_lowres;
  _44 = frame_12(D)->lowres[3];
  _45 = frame_12(D)->lowres[2];
  _46 = frame_12(D)->lowres[1];
  _47 = frame_12(D)->lowres[0];
  _40 (src_13, _47, _46, _45, _44, i_stride_14, _43, _42, _41);
  x264_frame_expand_border_lowres (frame_12(D));
  _50 = &frame_12(D)->i_cost_est;
  # DEBUG __dest => _50
  # DEBUG __ch => -1
  # DEBUG __len => 1296
  __builtin_memset (_50, -1, 1296);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  # DEBUG x => 0
  # DEBUG x => 0
  _80 = h_29(D)->param.i_bframe;
  if (_80 >= -1)
    goto <bb 16>;
  else
    goto <bb 15>;

  <bb 4>:
  pretmp_83 = i_width_16 + -1;

  <bb 5>:
  # y_87 = PHI <0(4), y_28(7)>
  # DEBUG y => y_87
  _17 = i_stride_14 * y_87;
  _18 = i_width_16 + _17;
  _19 = (sizetype) _18;
  _20 = src_13 + _19;
  _23 = _17 + pretmp_83;
  _24 = (sizetype) _23;
  _25 = src_13 + _24;
  _26 = *_25;
  *_20 = _26;
  y_28 = y_87 + 1;
  # DEBUG y => y_28
  # DEBUG y => y_28
  if (i_height_15 > y_28)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  goto <bb 3>;

  <bb 7>:
  goto <bb 5>;

  <bb 8>:

  <bb 9>:
  # y_88 = PHI <0(8), y_59(10)>
  # DEBUG y => y_88
  _57 = frame_12(D)->i_row_satds[y_88][x_85];
  *_57 = -1;
  y_59 = y_88 + 1;
  # DEBUG y => y_59
  # DEBUG y => y_59
  _55 = h_29(D)->param.i_bframe;
  _56 = _55 + 1;
  if (_56 >= y_59)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  goto <bb 9>;

  <bb 11>:
  # _62 = PHI <_55(9)>
  # _61 = PHI <_56(9)>

  <bb 12>:
  # prephitmp_4 = PHI <_62(11), prephitmp_1(18)>
  # prephitmp_73 = PHI <_61(11), pretmp_76(18)>
  x_60 = x_85 + 1;
  # DEBUG x => x_60
  # DEBUG x => x_60
  if (x_60 <= prephitmp_73)
    goto <bb 14>;
  else
    goto <bb 13>;

  <bb 13>:
  # prephitmp_63 = PHI <prephitmp_4(12)>
  goto <bb 15>;

  <bb 14>:
  goto <bb 17>;

  <bb 15>:
  # _97 = PHI <prephitmp_63(13), _80(3)>
  # DEBUG y => 0
  _52 = _97 != 0;
  _68 = (int) _52;
  goto <bb 25>;

  <bb 16>:

  <bb 17>:
  # x_85 = PHI <0(16), x_60(14)>
  # prephitmp_1 = PHI <_80(16), prephitmp_4(14)>
  # DEBUG x => x_85
  # DEBUG y => 0
  if (prephitmp_1 >= -1)
    goto <bb 8>;
  else
    goto <bb 18>;

  <bb 18>:
  pretmp_76 = prephitmp_1 + 1;
  goto <bb 12>;

  <bb 19>:

  <bb 20>:
  # x_86 = PHI <0(19), x_66(21)>
  # DEBUG x => x_86
  _64 = frame_12(D)->lowres_mvs[y_89][x_86];
  *_64[0] = 32767;
  x_66 = x_86 + 1;
  # DEBUG x => x_66
  # DEBUG x => x_66
  if (x_66 <= _97)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  goto <bb 20>;

  <bb 22>:

  <bb 23>:
  y_67 = y_89 + 1;
  # DEBUG y => y_67
  # DEBUG y => y_67
  if (y_67 <= _68)
    goto <bb 24>;
  else
    goto <bb 26>;

  <bb 24>:

  <bb 25>:
  # y_89 = PHI <0(15), y_67(24)>
  # DEBUG y => y_89
  # DEBUG x => 0
  if (_97 >= 0)
    goto <bb 19>;
  else
    goto <bb 23>;

  <bb 26>:
  return;

}



;; Function x264_frame_filter (x264_frame_filter, funcdef_no=143, decl_uid=4924, cgraph_uid=143, symbol_order=188)


Analyzing loop at common/mc.c:402
common/mc.c:402:9: note: ===== analyze_loop_nest =====
common/mc.c:402:9: note: === vect_analyze_loop_form ===
common/mc.c:402:9: note: not vectorized: multiple nested loops.
common/mc.c:402:9: note: bad loop form.

Analyzing loop at common/mc.c:413
common/mc.c:413:17: note: ===== analyze_loop_nest =====
common/mc.c:413:17: note: === vect_analyze_loop_form ===
common/mc.c:413:17: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [2, + , 1](no_overflow) < stride_24 + -8
  bounds on difference of bases: 0 ... 2147483637
  result:
    # of iterations (unsigned int) stride_24 + 4294967286, bounded by 2147483637
Applying pattern match.pd:494, generic-match.c:3721
common/mc.c:413:17: note: Symbolic number of iterations is (unsigned int) stride_24 + 4294967287
common/mc.c:413:17: note: === vect_analyze_data_refs ===
Creating dr for *_115
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:724, generic-match.c:1428
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:724, generic-match.c:1428
	base_address: pretmp_220 + (((sizetype) _73 + (sizetype) pretmp_228) * 2 + pretmp_225)
	offset from base address: 0
	constant offset from base address: -62(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + (((sizetype) _73 + (sizetype) pretmp_228) * 2 + pretmp_225)
	Access function 0: {-62B, +, 2}_4
Creating dr for MEM[(uint16_t *)line_163 + 8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
	base_address: pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + pretmp_225)
	offset from base address: 0
	constant offset from base address: -54(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + pretmp_225)
	Access function 0: {-54B, +, 2}_4
Creating dr for *_122
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:724, generic-match.c:1428
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:724, generic-match.c:1428
	base_address: pretmp_220 + (((sizetype) _73 + (sizetype) pretmp_231) * 2 + pretmp_225)
	offset from base address: 0
	constant offset from base address: -62(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + (((sizetype) _73 + (sizetype) pretmp_231) * 2 + pretmp_225)
	Access function 0: {-62B, +, 2}_4
Creating dr for *line_163
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
	base_address: pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + pretmp_225)
	offset from base address: 0
	constant offset from base address: -62(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + pretmp_225)
	Access function 0: {-62B, +, 2}_4
Creating dr for *sum4_165
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:724, generic-match.c:1428
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:724, generic-match.c:1428
	base_address: pretmp_220 + (((sizetype) _73 + (sizetype) _106) * 2 + pretmp_225)
	offset from base address: 0
	constant offset from base address: -62(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + (((sizetype) _73 + (sizetype) _106) * 2 + pretmp_225)
	Access function 0: {-62B, +, 2}_4
Creating dr for *line_163
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
	base_address: pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + pretmp_225)
	offset from base address: 0
	constant offset from base address: -62(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + pretmp_225)
	Access function 0: {-62B, +, 2}_4
Creating dr for *_132
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:724, generic-match.c:1428
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:724, generic-match.c:1428
	base_address: pretmp_220 + (((sizetype) _73 + (sizetype) pretmp_234) * 2 + pretmp_225)
	offset from base address: 0
	constant offset from base address: -62(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + (((sizetype) _73 + (sizetype) pretmp_234) * 2 + pretmp_225)
	Access function 0: {-62B, +, 2}_4
Creating dr for MEM[(uint16_t *)line_163 + 16B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
	base_address: pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + pretmp_225)
	offset from base address: 0
	constant offset from base address: -46(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + pretmp_225)
	Access function 0: {-46B, +, 2}_4
Creating dr for *_136
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:724, generic-match.c:1428
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:400, generic-match.c:4039
Applying pattern match.pd:724, generic-match.c:1428
Applying pattern match.pd:724, generic-match.c:1428
	base_address: pretmp_220 + (((sizetype) _73 + (sizetype) (stride_24 * 8)) * 2 + pretmp_225)
	offset from base address: 0
	constant offset from base address: -62(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + (((sizetype) _73 + (sizetype) (stride_24 * 8)) * 2 + pretmp_225)
	Access function 0: {-62B, +, 2}_4
Creating dr for *line_163
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
	base_address: pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + pretmp_225)
	offset from base address: 0
	constant offset from base address: -62(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + pretmp_225)
	Access function 0: {-62B, +, 2}_4
common/mc.c:413:17: note: got vectype for stmt: _116 = *_115;
vector(8) short unsigned int
common/mc.c:413:17: note: got vectype for stmt: _117 = MEM[(uint16_t *)line_163 + 8B];
vector(8) short unsigned int
common/mc.c:413:17: note: got vectype for stmt: _123 = *_122;
vector(8) short unsigned int
common/mc.c:413:17: note: got vectype for stmt: _125 = *line_163;
vector(8) short unsigned int
common/mc.c:413:17: note: got vectype for stmt: *sum4_165 = _126;
vector(8) short unsigned int
common/mc.c:413:17: note: got vectype for stmt: _128 = *line_163;
vector(8) short unsigned int
common/mc.c:413:17: note: got vectype for stmt: _133 = *_132;
vector(8) short unsigned int
common/mc.c:413:17: note: got vectype for stmt: _134 = MEM[(uint16_t *)line_163 + 16B];
vector(8) short unsigned int
common/mc.c:413:17: note: got vectype for stmt: _137 = *_136;
vector(8) short unsigned int
common/mc.c:413:17: note: got vectype for stmt: *line_163 = _139;
vector(8) short unsigned int
common/mc.c:413:17: note: === vect_analyze_scalar_cycles ===
common/mc.c:413:17: note: Analyze phi: x_153 = PHI <1(28), x_141(30)>

common/mc.c:413:17: note: Access function of PHI: {1, +, 1}_4
common/mc.c:413:17: note: step: 1,  init: 1
common/mc.c:413:17: note: Detected induction.
common/mc.c:413:17: note: Analyze phi: line_163 = PHI <line_103(28), line_142(30)>

common/mc.c:413:17: note: Access function of PHI: {line_103, +, 2}_4
common/mc.c:413:17: note: step: 2,  init: line_103
common/mc.c:413:17: note: Detected induction.
common/mc.c:413:17: note: Analyze phi: sum4_165 = PHI <sum4_109(28), sum4_143(30)>

common/mc.c:413:17: note: Access function of PHI: {sum4_109, +, 2}_4
common/mc.c:413:17: note: step: 2,  init: sum4_109
common/mc.c:413:17: note: Detected induction.
common/mc.c:413:17: note: Analyze phi: .MEM_170 = PHI <.MEM_211(28), .MEM_140(30)>

common/mc.c:413:17: note: === vect_pattern_recog ===
common/mc.c:413:17: note: === vect_analyze_data_ref_accesses ===
common/mc.c:413:17: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:413:17: note: init: phi relevant? x_153 = PHI <1(28), x_141(30)>
common/mc.c:413:17: note: init: phi relevant? line_163 = PHI <line_103(28), line_142(30)>
common/mc.c:413:17: note: init: phi relevant? sum4_165 = PHI <sum4_109(28), sum4_143(30)>
common/mc.c:413:17: note: init: phi relevant? .MEM_170 = PHI <.MEM_211(28), .MEM_140(30)>
common/mc.c:413:17: note: init: stmt relevant? # DEBUG sum4 => sum4_165
common/mc.c:413:17: note: init: stmt relevant? # DEBUG line => line_163
common/mc.c:413:17: note: init: stmt relevant? # DEBUG x => x_153
common/mc.c:413:17: note: init: stmt relevant? _115 = line_163 + pretmp_230;
common/mc.c:413:17: note: init: stmt relevant? _116 = *_115;
common/mc.c:413:17: note: init: stmt relevant? _117 = MEM[(uint16_t *)line_163 + 8B];
common/mc.c:413:17: note: init: stmt relevant? _118 = _116 - _117;
common/mc.c:413:17: note: init: stmt relevant? _122 = line_163 + pretmp_233;
common/mc.c:413:17: note: init: stmt relevant? _123 = *_122;
common/mc.c:413:17: note: init: stmt relevant? _124 = _118 - _123;
common/mc.c:413:17: note: init: stmt relevant? _125 = *line_163;
common/mc.c:413:17: note: init: stmt relevant? _126 = _124 + _125;
common/mc.c:413:17: note: init: stmt relevant? *sum4_165 = _126;
common/mc.c:413:17: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: init: stmt relevant? _128 = *line_163;
common/mc.c:413:17: note: init: stmt relevant? _132 = line_163 + pretmp_236;
common/mc.c:413:17: note: init: stmt relevant? _133 = *_132;
common/mc.c:413:17: note: init: stmt relevant? _134 = MEM[(uint16_t *)line_163 + 16B];
common/mc.c:413:17: note: init: stmt relevant? _135 = _133 - _134;
common/mc.c:413:17: note: init: stmt relevant? _136 = line_163 + pretmp_224;
common/mc.c:413:17: note: init: stmt relevant? _137 = *_136;
common/mc.c:413:17: note: init: stmt relevant? _138 = _135 - _137;
common/mc.c:413:17: note: init: stmt relevant? _139 = _128 + _138;
common/mc.c:413:17: note: init: stmt relevant? *line_163 = _139;
common/mc.c:413:17: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: init: stmt relevant? x_141 = x_153 + 1;
common/mc.c:413:17: note: init: stmt relevant? # DEBUG x => x_141
common/mc.c:413:17: note: init: stmt relevant? line_142 = line_163 + 2;
common/mc.c:413:17: note: init: stmt relevant? # DEBUG line => line_142
common/mc.c:413:17: note: init: stmt relevant? sum4_143 = sum4_165 + 2;
common/mc.c:413:17: note: init: stmt relevant? # DEBUG sum4 => sum4_143
common/mc.c:413:17: note: init: stmt relevant? # DEBUG sum4 => sum4_143
common/mc.c:413:17: note: init: stmt relevant? # DEBUG line => line_142
common/mc.c:413:17: note: init: stmt relevant? # DEBUG x => x_141
common/mc.c:413:17: note: init: stmt relevant? if (x_141 < _161)
common/mc.c:413:17: note: worklist: examine stmt: *line_163 = _139;
common/mc.c:413:17: note: vect_is_simple_use: operand _139
common/mc.c:413:17: note: def_stmt: _139 = _128 + _138;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: worklist: examine stmt: _139 = _128 + _138;
common/mc.c:413:17: note: vect_is_simple_use: operand _128
common/mc.c:413:17: note: def_stmt: _128 = *line_163;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: vect_is_simple_use: operand _138
common/mc.c:413:17: note: def_stmt: _138 = _135 - _137;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: worklist: examine stmt: _138 = _135 - _137;
common/mc.c:413:17: note: vect_is_simple_use: operand _135
common/mc.c:413:17: note: def_stmt: _135 = _133 - _134;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: vect_is_simple_use: operand _137
common/mc.c:413:17: note: def_stmt: _137 = *_136;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: worklist: examine stmt: _137 = *_136;
common/mc.c:413:17: note: worklist: examine stmt: _135 = _133 - _134;
common/mc.c:413:17: note: vect_is_simple_use: operand _133
common/mc.c:413:17: note: def_stmt: _133 = *_132;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: vect_is_simple_use: operand _134
common/mc.c:413:17: note: def_stmt: _134 = MEM[(uint16_t *)line_163 + 16B];
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: worklist: examine stmt: _134 = MEM[(uint16_t *)line_163 + 16B];
common/mc.c:413:17: note: worklist: examine stmt: _133 = *_132;
common/mc.c:413:17: note: worklist: examine stmt: _128 = *line_163;
common/mc.c:413:17: note: worklist: examine stmt: *sum4_165 = _126;
common/mc.c:413:17: note: vect_is_simple_use: operand _126
common/mc.c:413:17: note: def_stmt: _126 = _124 + _125;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: worklist: examine stmt: _126 = _124 + _125;
common/mc.c:413:17: note: vect_is_simple_use: operand _124
common/mc.c:413:17: note: def_stmt: _124 = _118 - _123;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: vect_is_simple_use: operand _125
common/mc.c:413:17: note: def_stmt: _125 = *line_163;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: worklist: examine stmt: _125 = *line_163;
common/mc.c:413:17: note: worklist: examine stmt: _124 = _118 - _123;
common/mc.c:413:17: note: vect_is_simple_use: operand _118
common/mc.c:413:17: note: def_stmt: _118 = _116 - _117;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: vect_is_simple_use: operand _123
common/mc.c:413:17: note: def_stmt: _123 = *_122;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: worklist: examine stmt: _123 = *_122;
common/mc.c:413:17: note: worklist: examine stmt: _118 = _116 - _117;
common/mc.c:413:17: note: vect_is_simple_use: operand _116
common/mc.c:413:17: note: def_stmt: _116 = *_115;
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: vect_is_simple_use: operand _117
common/mc.c:413:17: note: def_stmt: _117 = MEM[(uint16_t *)line_163 + 8B];
common/mc.c:413:17: note: type of def: 3.
common/mc.c:413:17: note: mark relevant 4, live 0.
common/mc.c:413:17: note: worklist: examine stmt: _117 = MEM[(uint16_t *)line_163 + 8B];
common/mc.c:413:17: note: worklist: examine stmt: _116 = *_115;
common/mc.c:413:17: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _117 = MEM[(uint16_t *)line_163 + 8B];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _123 = *_122;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _125 = *line_163;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: *sum4_165 = _126;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _128 = *line_163;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _133 = *_132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _134 = MEM[(uint16_t *)line_163 + 16B];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _137 = *_136;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: *line_163 = _139;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _117 = MEM[(uint16_t *)line_163 + 8B];
  stmt_b: _123 = *_122;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _117 = MEM[(uint16_t *)line_163 + 8B];
  stmt_b: _125 = *line_163;
(analyze_overlapping_iterations 
  (chrec_a = {-54B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [4 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [4 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-54B, +, 2}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [4 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [4 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  4 
  )
)
)
(compute_affine_dependence
  stmt_a: _117 = MEM[(uint16_t *)line_163 + 8B];
  stmt_b: *sum4_165 = _126;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _117 = MEM[(uint16_t *)line_163 + 8B];
  stmt_b: _128 = *line_163;
(analyze_overlapping_iterations 
  (chrec_a = {-54B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [4 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [4 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-54B, +, 2}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [4 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [4 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  4 
  )
)
)
(compute_affine_dependence
  stmt_a: _117 = MEM[(uint16_t *)line_163 + 8B];
  stmt_b: _133 = *_132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _117 = MEM[(uint16_t *)line_163 + 8B];
  stmt_b: _134 = MEM[(uint16_t *)line_163 + 16B];
(analyze_overlapping_iterations 
  (chrec_a = {-54B, +, 2}_4)
  (chrec_b = {-46B, +, 2}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [4 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [4 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  4 
  )
)
)
(compute_affine_dependence
  stmt_a: _117 = MEM[(uint16_t *)line_163 + 8B];
  stmt_b: _137 = *_136;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _117 = MEM[(uint16_t *)line_163 + 8B];
  stmt_b: *line_163 = _139;
(analyze_overlapping_iterations 
  (chrec_a = {-54B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [4 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [4 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-54B, +, 2}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [4 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [4 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  4 
  )
)
)
(compute_affine_dependence
  stmt_a: _123 = *_122;
  stmt_b: _125 = *line_163;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _123 = *_122;
  stmt_b: *sum4_165 = _126;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _123 = *_122;
  stmt_b: _128 = *line_163;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _123 = *_122;
  stmt_b: _133 = *_132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _123 = *_122;
  stmt_b: _134 = MEM[(uint16_t *)line_163 + 16B];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _123 = *_122;
  stmt_b: _137 = *_136;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _123 = *_122;
  stmt_b: *line_163 = _139;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _125 = *line_163;
  stmt_b: *sum4_165 = _126;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _125 = *line_163;
  stmt_b: _128 = *line_163;
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _125 = *line_163;
  stmt_b: _133 = *_132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _125 = *line_163;
  stmt_b: _134 = MEM[(uint16_t *)line_163 + 16B];
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-46B, +, 2}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [8 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [8 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  8 
  )
)
)
(compute_affine_dependence
  stmt_a: _125 = *line_163;
  stmt_b: _137 = *_136;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _125 = *line_163;
  stmt_b: *line_163 = _139;
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *sum4_165 = _126;
  stmt_b: _128 = *line_163;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *sum4_165 = _126;
  stmt_b: _133 = *_132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *sum4_165 = _126;
  stmt_b: _134 = MEM[(uint16_t *)line_163 + 16B];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *sum4_165 = _126;
  stmt_b: _137 = *_136;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *sum4_165 = _126;
  stmt_b: *line_163 = _139;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _128 = *line_163;
  stmt_b: _133 = *_132;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _128 = *line_163;
  stmt_b: _134 = MEM[(uint16_t *)line_163 + 16B];
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-46B, +, 2}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [8 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [8 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  8 
  )
)
)
(compute_affine_dependence
  stmt_a: _128 = *line_163;
  stmt_b: _137 = *_136;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _128 = *line_163;
  stmt_b: *line_163 = _139;
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _133 = *_132;
  stmt_b: _134 = MEM[(uint16_t *)line_163 + 16B];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _133 = *_132;
  stmt_b: _137 = *_136;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _133 = *_132;
  stmt_b: *line_163 = _139;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _134 = MEM[(uint16_t *)line_163 + 16B];
  stmt_b: _137 = *_136;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _134 = MEM[(uint16_t *)line_163 + 16B];
  stmt_b: *line_163 = _139;
(analyze_overlapping_iterations 
  (chrec_a = {-46B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [8 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [8 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-46B, +, 2}_4)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [8 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [8 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  8 
  )
)
)
(compute_affine_dependence
  stmt_a: _137 = *_136;
  stmt_b: *line_163 = _139;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _116 = *_115;
  stmt_b: _116 = *_115;
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _117 = MEM[(uint16_t *)line_163 + 8B];
  stmt_b: _117 = MEM[(uint16_t *)line_163 + 8B];
(analyze_overlapping_iterations 
  (chrec_a = {-54B, +, 2}_4)
  (chrec_b = {-54B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _123 = *_122;
  stmt_b: _123 = *_122;
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _125 = *line_163;
  stmt_b: _125 = *line_163;
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *sum4_165 = _126;
  stmt_b: *sum4_165 = _126;
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _128 = *line_163;
  stmt_b: _128 = *line_163;
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _133 = *_132;
  stmt_b: _133 = *_132;
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _134 = MEM[(uint16_t *)line_163 + 16B];
  stmt_b: _134 = MEM[(uint16_t *)line_163 + 16B];
(analyze_overlapping_iterations 
  (chrec_a = {-46B, +, 2}_4)
  (chrec_b = {-46B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _137 = *_136;
  stmt_b: _137 = *_136;
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *line_163 = _139;
  stmt_b: *line_163 = _139;
(analyze_overlapping_iterations 
  (chrec_a = {-62B, +, 2}_4)
  (chrec_b = {-62B, +, 2}_4)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *_115 and *sum4_165
common/mc.c:413:17: note: mark for run-time aliasing test between *_115 and *sum4_165
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *_115 and *line_163
common/mc.c:413:17: note: mark for run-time aliasing test between *_115 and *line_163
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between MEM[(uint16_t *)line_163 + 8B] and *sum4_165
common/mc.c:413:17: note: mark for run-time aliasing test between MEM[(uint16_t *)line_163 + 8B] and *sum4_165
common/mc.c:413:17: note: dependence distance  = 4.
common/mc.c:413:17: note: dependence distance negative.
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *_122 and *sum4_165
common/mc.c:413:17: note: mark for run-time aliasing test between *_122 and *sum4_165
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *_122 and *line_163
common/mc.c:413:17: note: mark for run-time aliasing test between *_122 and *line_163
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *line_163 and *sum4_165
common/mc.c:413:17: note: mark for run-time aliasing test between *line_163 and *sum4_165
common/mc.c:413:17: note: dependence distance  = 0.
common/mc.c:413:17: note: dependence distance == 0 between *line_163 and *line_163
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *sum4_165 and *line_163
common/mc.c:413:17: note: mark for run-time aliasing test between *sum4_165 and *line_163
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *sum4_165 and *_132
common/mc.c:413:17: note: mark for run-time aliasing test between *sum4_165 and *_132
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *sum4_165 and MEM[(uint16_t *)line_163 + 16B]
common/mc.c:413:17: note: mark for run-time aliasing test between *sum4_165 and MEM[(uint16_t *)line_163 + 16B]
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *sum4_165 and *_136
common/mc.c:413:17: note: mark for run-time aliasing test between *sum4_165 and *_136
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *sum4_165 and *line_163
common/mc.c:413:17: note: mark for run-time aliasing test between *sum4_165 and *line_163
common/mc.c:413:17: note: dependence distance  = 0.
common/mc.c:413:17: note: dependence distance == 0 between *line_163 and *line_163
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *_132 and *line_163
common/mc.c:413:17: note: mark for run-time aliasing test between *_132 and *line_163
common/mc.c:413:17: note: dependence distance  = 8.
common/mc.c:413:17: note: dependence distance negative.
common/mc.c:413:17: note: versioning for alias required: can't determine dependence between *_136 and *line_163
common/mc.c:413:17: note: mark for run-time aliasing test between *_136 and *line_163
common/mc.c:413:17: note: === vect_determine_vectorization_factor ===
common/mc.c:413:17: note: ==> examining phi: x_153 = PHI <1(28), x_141(30)>

common/mc.c:413:17: note: ==> examining phi: line_163 = PHI <line_103(28), line_142(30)>

common/mc.c:413:17: note: ==> examining phi: sum4_165 = PHI <sum4_109(28), sum4_143(30)>

common/mc.c:413:17: note: ==> examining phi: .MEM_170 = PHI <.MEM_211(28), .MEM_140(30)>

common/mc.c:413:17: note: ==> examining statement: # DEBUG sum4 => sum4_165

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: # DEBUG line => line_163

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: # DEBUG x => x_153

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: _115 = line_163 + pretmp_230;

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: _116 = *_115;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _117 = MEM[(uint16_t *)line_163 + 8B];

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _118 = _116 - _117;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _122 = line_163 + pretmp_233;

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: _123 = *_122;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _124 = _118 - _123;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _125 = *line_163;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _126 = _124 + _125;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: *sum4_165 = _126;

common/mc.c:413:17: note: get vectype for scalar type:  uint16_t
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _128 = *line_163;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _132 = line_163 + pretmp_236;

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: _133 = *_132;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _134 = MEM[(uint16_t *)line_163 + 16B];

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _135 = _133 - _134;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _136 = line_163 + pretmp_224;

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: _137 = *_136;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _138 = _135 - _137;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: _139 = _128 + _138;

common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: get vectype for scalar type:  short unsigned int
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: *line_163 = _139;

common/mc.c:413:17: note: get vectype for scalar type:  uint16_t
common/mc.c:413:17: note: vectype: vector(8) short unsigned int
common/mc.c:413:17: note: nunits = 8
common/mc.c:413:17: note: ==> examining statement: x_141 = x_153 + 1;

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: # DEBUG x => x_141

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: line_142 = line_163 + 2;

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: # DEBUG line => line_142

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: sum4_143 = sum4_165 + 2;

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: # DEBUG sum4 => sum4_143

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: # DEBUG sum4 => sum4_143

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: # DEBUG line => line_142

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: # DEBUG x => x_141

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: ==> examining statement: if (x_141 < _161)

common/mc.c:413:17: note: skip.
common/mc.c:413:17: note: vectorization factor = 8
common/mc.c:413:17: note: === vect_analyze_data_refs_alignment ===
common/mc.c:413:17: note: dependence distance  = 4.
common/mc.c:413:17: note: dependence distance  = 4.
common/mc.c:413:17: note: dependence distance  = 4.
common/mc.c:413:17: note: dependence distance  = 4.
common/mc.c:413:17: note: dependence distance  = 0.
common/mc.c:413:17: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *line_163 and *line_163
common/mc.c:413:17: note: dependence distance  = 8.
common/mc.c:413:17: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *line_163 and MEM[(uint16_t *)line_163 + 16B]
common/mc.c:413:17: note: dependence distance  = 0.
common/mc.c:413:17: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *line_163 and *line_163
common/mc.c:413:17: note: dependence distance  = 8.
common/mc.c:413:17: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *line_163 and MEM[(uint16_t *)line_163 + 16B]
common/mc.c:413:17: note: dependence distance  = 0.
common/mc.c:413:17: note: accesses have the same alignment.
dependence distance modulo vf == 0 between *line_163 and *line_163
common/mc.c:413:17: note: dependence distance  = 8.
common/mc.c:413:17: note: accesses have the same alignment.
dependence distance modulo vf == 0 between MEM[(uint16_t *)line_163 + 16B] and *line_163
common/mc.c:413:17: note: vect_compute_data_ref_alignment:
common/mc.c:413:17: note: can't force alignment of ref: *_115
common/mc.c:413:17: note: vect_compute_data_ref_alignment:
common/mc.c:413:17: note: can't force alignment of ref: MEM[(uint16_t *)line_163 + 8B]
common/mc.c:413:17: note: vect_compute_data_ref_alignment:
common/mc.c:413:17: note: can't force alignment of ref: *_122
common/mc.c:413:17: note: vect_compute_data_ref_alignment:
common/mc.c:413:17: note: can't force alignment of ref: *line_163
common/mc.c:413:17: note: vect_compute_data_ref_alignment:
common/mc.c:413:17: note: can't force alignment of ref: *sum4_165
common/mc.c:413:17: note: vect_compute_data_ref_alignment:
common/mc.c:413:17: note: can't force alignment of ref: *line_163
common/mc.c:413:17: note: vect_compute_data_ref_alignment:
common/mc.c:413:17: note: can't force alignment of ref: *_132
common/mc.c:413:17: note: vect_compute_data_ref_alignment:
common/mc.c:413:17: note: can't force alignment of ref: MEM[(uint16_t *)line_163 + 16B]
common/mc.c:413:17: note: vect_compute_data_ref_alignment:
common/mc.c:413:17: note: can't force alignment of ref: *_136
common/mc.c:413:17: note: vect_compute_data_ref_alignment:
common/mc.c:413:17: note: can't force alignment of ref: *line_163
common/mc.c:413:17: note: === vect_prune_runtime_alias_test_list ===
common/mc.c:413:17: note: merging ranges for MEM[(uint16_t *)line_163 + 8B], *sum4_165 and MEM[(uint16_t *)line_163 + 16B], *sum4_165
common/mc.c:413:17: note: merging ranges for *line_163, *sum4_165 and MEM[(uint16_t *)line_163 + 8B], *sum4_165
common/mc.c:413:17: note: merging ranges for *line_163, *sum4_165 and *line_163, *sum4_165
common/mc.c:413:17: note: merging ranges for *line_163, *sum4_165 and *line_163, *sum4_165
common/mc.c:413:17: note: improved number of alias checks from 13 to 9
common/mc.c:413:17: note: number of versioning for alias run-time tests exceeds 6 (--param vect-max-version-for-alias-checks)

Analyzing loop at common/mc.c:407
common/mc.c:407:13: note: ===== analyze_loop_nest =====
common/mc.c:407:13: note: === vect_analyze_loop_form ===
common/mc.c:407:13: note: === get_loop_niters ===
Analyzing # of iterations of loop 3
  exit condition [2, + , 1](no_overflow) < stride_24 + -1
  bounds on difference of bases: 0 ... 2147483644
  result:
    # of iterations (unsigned int) stride_24 + 4294967293, bounded by 2147483644
Applying pattern match.pd:494, generic-match.c:3721
common/mc.c:407:13: note: Symbolic number of iterations is (unsigned int) stride_24 + 4294967294
common/mc.c:407:13: note: === vect_analyze_data_refs ===
Creating dr for *_83
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
	base_address: pretmp_216 + (sizetype) _68
	offset from base address: 0
	constant offset from base address: -31(OVF)
	step: 1
	aligned to: 128
	base_object: *pretmp_216 + (sizetype) _68
	Access function 0: {-31B, +, 1}_3
Creating dr for *_89
analyze_innermost: Applying pattern match.pd:714, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
	base_address: pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + (sizetype) ((long unsigned int) stride_24 * 18446744073709551614))
	offset from base address: 0
	constant offset from base address: -60(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + (sizetype) ((long unsigned int) stride_24 * 18446744073709551614))
	Access function 0: {-60B, +, 2}_3
Creating dr for *_93
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:400, generic-match.c:4039
	base_address: pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + (sizetype) ((long unsigned int) stride_24 * 18446744073709551614))
	offset from base address: 0
	constant offset from base address: -62(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + ((sizetype) ((long unsigned int) _73 * 2) + (sizetype) ((long unsigned int) stride_24 * 18446744073709551614))
	Access function 0: {-62B, +, 2}_3
Creating dr for *_82
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:4015
	base_address: pretmp_220 + (sizetype) ((long unsigned int) _73 * 2)
	offset from base address: 0
	constant offset from base address: -60(OVF)
	step: 2
	aligned to: 128
	base_object: *pretmp_220 + (sizetype) ((long unsigned int) _73 * 2)
	Access function 0: {-60B, +, 2}_3
common/mc.c:407:13: note: got vectype for stmt: _84 = *_83;
vector(16) unsigned char
common/mc.c:407:13: note: got vectype for stmt: _90 = *_89;
vector(8) short unsigned int
common/mc.c:407:13: note: got vectype for stmt: _94 = *_93;
vector(8) short unsigned int
common/mc.c:407:13: note: got vectype for stmt: *_82 = v_96;
vector(8) short unsigned int
common/mc.c:407:13: note: === vect_analyze_scalar_cycles ===
common/mc.c:407:13: note: Analyze phi: x_159 = PHI <1(19), x_98(22)>

common/mc.c:407:13: note: Access function of PHI: {1, +, 1}_3
common/mc.c:407:13: note: step: 1,  init: 1
common/mc.c:407:13: note: Detected induction.
common/mc.c:407:13: note: Analyze phi: v_164 = PHI <0(19), v_96(22)>

Applying pattern match.pd:822, generic-match.c:6651
Applying pattern match.pd:442, generic-match.c:3529
Applying pattern match.pd:628, generic-match.c:1309
common/mc.c:407:13: note: Access function of PHI: {0, +, _95}_3
common/mc.c:407:13: note: step: _95,  init: 0
common/mc.c:407:13: note: step unknown.
common/mc.c:407:13: note: Analyze phi: .MEM_168 = PHI <.MEM_78(19), .MEM_97(22)>

common/mc.c:407:13: note: Analyze phi: v_164 = PHI <0(19), v_96(22)>

common/mc.c:407:13: note: reduction used in loop.
common/mc.c:407:13: note: Unknown def-use cycle pattern.
common/mc.c:407:13: note: === vect_pattern_recog ===
common/mc.c:407:13: note: vect_is_simple_use: operand _80
common/mc.c:407:13: note: def_stmt: _80 = (long unsigned int) x_159;
common/mc.c:407:13: note: type of def: 3.
common/mc.c:407:13: note: vect_is_simple_use: operand x_159
common/mc.c:407:13: note: def_stmt: x_159 = PHI <1(19), x_98(22)>
common/mc.c:407:13: note: type of def: 4.
common/mc.c:407:13: note: vect_is_simple_use: operand 2
common/mc.c:407:13: note: vect_is_simple_use: operand _87
common/mc.c:407:13: note: def_stmt: _87 = (long unsigned int) _86;
common/mc.c:407:13: note: type of def: 3.
common/mc.c:407:13: note: vect_is_simple_use: operand _86
common/mc.c:407:13: note: def_stmt: _86 = x_159 - stride_24;
common/mc.c:407:13: note: type of def: 3.
common/mc.c:407:13: note: vect_is_simple_use: operand 2
common/mc.c:407:13: note: === vect_analyze_data_ref_accesses ===
common/mc.c:407:13: note: === vect_mark_stmts_to_be_vectorized ===
common/mc.c:407:13: note: init: phi relevant? x_159 = PHI <1(19), x_98(22)>
common/mc.c:407:13: note: init: phi relevant? v_164 = PHI <0(19), v_96(22)>
common/mc.c:407:13: note: init: phi relevant? .MEM_168 = PHI <.MEM_78(19), .MEM_97(22)>
common/mc.c:407:13: note: init: stmt relevant? # DEBUG v => v_164
common/mc.c:407:13: note: init: stmt relevant? # DEBUG x => x_159
common/mc.c:407:13: note: init: stmt relevant? _80 = (long unsigned int) x_159;
common/mc.c:407:13: note: init: stmt relevant? _81 = _80 * 2;
common/mc.c:407:13: note: init: stmt relevant? _82 = line_77 + _81;
common/mc.c:407:13: note: init: stmt relevant? _38 = _70 + _80;
common/mc.c:407:13: note: init: stmt relevant? _83 = pretmp_216 + _38;
common/mc.c:407:13: note: init: stmt relevant? _84 = *_83;
common/mc.c:407:13: note: init: stmt relevant? _85 = (short unsigned int) _84;
common/mc.c:407:13: note: init: stmt relevant? _86 = x_159 - stride_24;
common/mc.c:407:13: note: init: stmt relevant? _87 = (long unsigned int) _86;
common/mc.c:407:13: note: init: stmt relevant? _88 = _87 * 2;
common/mc.c:407:13: note: init: stmt relevant? _89 = line_77 + _88;
common/mc.c:407:13: note: init: stmt relevant? _90 = *_89;
common/mc.c:407:13: note: init: stmt relevant? _91 = _85 + _90;
common/mc.c:407:13: note: init: stmt relevant? _92 = _88 + 18446744073709551614;
common/mc.c:407:13: note: init: stmt relevant? _93 = line_77 + _92;
common/mc.c:407:13: note: init: stmt relevant? _94 = *_93;
common/mc.c:407:13: note: init: stmt relevant? _95 = _91 - _94;
common/mc.c:407:13: note: init: stmt relevant? v_96 = _95 + v_164;
common/mc.c:407:13: note: init: stmt relevant? # DEBUG v => v_96
common/mc.c:407:13: note: init: stmt relevant? *_82 = v_96;
common/mc.c:407:13: note: vec_stmt_relevant_p: stmt has vdefs.
common/mc.c:407:13: note: mark relevant 4, live 0.
common/mc.c:407:13: note: init: stmt relevant? x_98 = x_159 + 1;
common/mc.c:407:13: note: init: stmt relevant? # DEBUG x => x_98
common/mc.c:407:13: note: init: stmt relevant? # DEBUG v => v_96
common/mc.c:407:13: note: init: stmt relevant? # DEBUG x => x_98
common/mc.c:407:13: note: init: stmt relevant? if (x_98 < pretmp_226)
common/mc.c:407:13: note: worklist: examine stmt: *_82 = v_96;
common/mc.c:407:13: note: vect_is_simple_use: operand v_96
common/mc.c:407:13: note: def_stmt: v_96 = _95 + v_164;
common/mc.c:407:13: note: type of def: 3.
common/mc.c:407:13: note: mark relevant 4, live 0.
common/mc.c:407:13: note: worklist: examine stmt: v_96 = _95 + v_164;
common/mc.c:407:13: note: vect_is_simple_use: operand _95
common/mc.c:407:13: note: def_stmt: _95 = _91 - _94;
common/mc.c:407:13: note: type of def: 3.
common/mc.c:407:13: note: mark relevant 4, live 0.
common/mc.c:407:13: note: vect_is_simple_use: operand v_164
common/mc.c:407:13: note: def_stmt: v_164 = PHI <0(19), v_96(22)>
common/mc.c:407:13: note: Unsupported pattern.
common/mc.c:407:13: note: not vectorized: unsupported use in stmt.
common/mc.c:407:13: note: unexpected pattern.

Analyzing loop at common/mc.c:378
common/mc.c:378:5: note: ===== analyze_loop_nest =====
common/mc.c:378:5: note: === vect_analyze_loop_form ===
split exit edge.
common/mc.c:378:5: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) <= b_interlaced_21
  bounds on difference of bases: -1 ... 2147483646
Applying pattern match.pd:49, generic-match.c:3223
  result:
    under assumptions b_interlaced_21 != 2147483647
    # of iterations (unsigned int) b_interlaced_21, bounded by 2147483647
common/mc.c:378:5: note: not vectorized: number of iterations cannot be computed.
common/mc.c:378:5: note: bad loop form.
common/mc.c:365:6: note: vectorized 0 loops in function.
x264_frame_filter (struct x264_t * h, struct x264_frame_t * frame, int mb_y, int b_end)
{
  uint16_t * sum4;
  uint16_t v;
  uint16_t * line;
  int y;
  int x;
  int offs;
  int height;
  const int width;
  const int stride;
  const int b_interlaced;
  unsigned int _18;
  int _23;
  int _27;
  int _28;
  int iftmp.2_31;
  int _35;
  int _37;
  sizetype _38;
  void (*<Tfa3>) (uint8_t *, uint8_t *, uint8_t *, uint8_t *, int, int, int) _39;
  uint8_t * _42;
  sizetype _43;
  uint8_t * _44;
  uint8_t * _45;
  uint8_t * _47;
  uint8_t * _48;
  uint8_t * _50;
  uint8_t * _51;
  uint8_t * _52;
  int _55;
  uint16_t * _57;
  long unsigned int _58;
  long unsigned int _59;
  int _60;
  long unsigned int _61;
  long unsigned int _62;
  sizetype _63;
  uint16_t * _64;
  int _68;
  sizetype _69;
  sizetype _70;
  int _73;
  long unsigned int _74;
  long unsigned int _75;
  sizetype _76;
  long unsigned int _80;
  long unsigned int _81;
  uint16_t * _82;
  uint8_t * _83;
  unsigned char _84;
  short unsigned int _85;
  int _86;
  long unsigned int _87;
  long unsigned int _88;
  uint16_t * _89;
  short unsigned int _90;
  short unsigned int _91;
  sizetype _92;
  uint16_t * _93;
  short unsigned int _94;
  short unsigned int _95;
  int _104;
  int _105;
  int _106;
  long unsigned int _107;
  long unsigned int _108;
  uint16_t * _115;
  short unsigned int _116;
  short unsigned int _117;
  short unsigned int _118;
  uint16_t * _122;
  short unsigned int _123;
  short unsigned int _124;
  short unsigned int _125;
  short unsigned int _126;
  short unsigned int _128;
  uint16_t * _132;
  short unsigned int _133;
  short unsigned int _134;
  short unsigned int _135;
  uint16_t * _136;
  short unsigned int _137;
  short unsigned int _138;
  short unsigned int _139;
  int _161;
  unsigned int _203;
  unsigned int _204;
  unsigned int _205;
  unsigned int _206;
  unsigned int _207;
  unsigned int _208;
  unsigned int _209;
  int pretmp_214;
  int prephitmp_215;
  uint8_t * pretmp_216;
  uint16_t * pretmp_220;
  int pretmp_222;
  long unsigned int pretmp_223;
  long unsigned int pretmp_224;
  sizetype pretmp_225;
  int pretmp_226;
  int pretmp_227;
  int pretmp_228;
  long unsigned int pretmp_229;
  long unsigned int pretmp_230;
  int pretmp_231;
  long unsigned int pretmp_232;
  long unsigned int pretmp_233;
  int pretmp_234;
  long unsigned int pretmp_235;
  long unsigned int pretmp_236;
  int pretmp_241;
  int pretmp_242;

  <bb 2>:
  b_interlaced_21 = h_20(D)->sh.b_mbaff;
  # DEBUG b_interlaced => b_interlaced_21
  # DEBUG D#203 => frame_22(D)->i_stride[0]
  # DEBUG D#202 => D#203 << b_interlaced_21
  # DEBUG stride => D#202
  # DEBUG D#201 => frame_22(D)->i_width[0]
  # DEBUG width => D#201
  _27 = mb_y_26(D) * 16;
  _28 = _27 >> b_interlaced_21;
  # DEBUG D#200 => _28 + -8
  # DEBUG start => D#200
  if (b_end_30(D) != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  iftmp.2_31 = frame_22(D)->i_lines[0];
  pretmp_214 = iftmp.2_31 >> b_interlaced_21;

  <bb 4>:
  # prephitmp_215 = PHI <pretmp_214(3), _28(2)>
  # DEBUG height => prephitmp_215 + 8
  # DEBUG D#199 => D#202 * D#200
  # DEBUG D#198 => D#199 + -8
  # DEBUG offs => D#198
  _37 = b_interlaced_21 & mb_y_26(D);
  if (_37 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  return;

  <bb 6>:
  _23 = frame_22(D)->i_stride[0];
  stride_24 = _23 << b_interlaced_21;
  y_29 = _28 + -8;
  height_34 = prephitmp_215 + 8;
  # DEBUG y => 0
  # DEBUG offs => D#198
  if (b_interlaced_21 >= 0)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  _57 = frame_22(D)->integral;
  if (_57 != 0B)
    goto <bb 11>;
  else
    goto <bb 5>;

  <bb 8>:
  width_25 = frame_22(D)->i_width[0];
  _35 = stride_24 * y_29;
  offs_36 = _35 + -8;
  pretmp_241 = height_34 - y_29;
  pretmp_242 = width_25 + 16;

  <bb 9>:
  # offs_158 = PHI <offs_36(8), offs_56(10)>
  # y_152 = PHI <0(8), y_54(10)>
  # DEBUG y => y_152
  # DEBUG offs => offs_158
  _39 = h_20(D)->mc.hpel_filter;
  _42 = frame_22(D)->plane[0];
  _43 = (sizetype) offs_158;
  _44 = _42 + _43;
  _45 = frame_22(D)->filtered[3];
  _47 = _45 + _43;
  _48 = frame_22(D)->filtered[2];
  _50 = _48 + _43;
  _51 = frame_22(D)->filtered[1];
  _52 = _51 + _43;
  _39 (_52, _50, _47, _44, stride_24, pretmp_242, pretmp_241);
  y_54 = y_152 + 1;
  # DEBUG y => y_54
  _55 = frame_22(D)->i_stride[0];
  offs_56 = _55 + offs_158;
  # DEBUG offs => offs_56
  # DEBUG y => y_54
  # DEBUG offs => offs_56
  if (b_interlaced_21 >= y_54)
    goto <bb 10>;
  else
    goto <bb 31>;

  <bb 31>:
  goto <bb 7>;

  <bb 10>:
  goto <bb 9>;

  <bb 11>:
  if (y_29 < 0)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  _58 = (long unsigned int) stride_24;
  _59 = _58 * 2;
  _60 = stride_24 * 32;
  _61 = (long unsigned int) _60;
  _62 = _61 * 2;
  _63 = 18446744073709551552 - _62;
  _64 = _57 + _63;
  # DEBUG __dest => _64
  # DEBUG __ch => 0
  # DEBUG __len => _59
  __builtin_memset (_64, 0, _59);
  # DEBUG __dest => NULL
  # DEBUG __ch => NULL
  # DEBUG __len => NULL
  # DEBUG start => -32

  <bb 13>:
  # y_1 = PHI <y_29(11), -32(12)>
  # DEBUG start => y_1
  if (b_end_30(D) != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:
  height_66 = prephitmp_215 + 32;
  # DEBUG height => height_66

  <bb 15>:
  # height_2 = PHI <height_34(13), height_66(14)>
  # DEBUG height => height_2
  # DEBUG y => y_1
  # DEBUG y => y_1
  if (y_1 < height_2)
    goto <bb 16>;
  else
    goto <bb 5>;

  <bb 16>:
  pretmp_216 = frame_22(D)->plane[0];
  pretmp_220 = frame_22(D)->integral;
  pretmp_222 = stride_24 * 8;
  pretmp_223 = (long unsigned int) pretmp_222;
  pretmp_224 = pretmp_223 * 2;
  pretmp_225 = -pretmp_224;
  pretmp_226 = stride_24 + -1;
  _18 = (unsigned int) stride_24;
  _209 = _18 + 1;
  pretmp_227 = (int) _209;
  _208 = (unsigned int) pretmp_227;
  _207 = _208 * 4;
  pretmp_228 = (int) _207;
  pretmp_229 = (long unsigned int) pretmp_228;
  pretmp_230 = pretmp_229 * 2;
  _206 = (unsigned int) stride_24;
  _205 = _206 * 4;
  pretmp_231 = (int) _205;
  pretmp_232 = (long unsigned int) pretmp_231;
  pretmp_233 = pretmp_232 * 2;
  _204 = (unsigned int) pretmp_227;
  _203 = _204 * 8;
  pretmp_234 = (int) _203;
  pretmp_235 = (long unsigned int) pretmp_234;
  pretmp_236 = pretmp_235 * 2;

  <bb 17>:
  # y_162 = PHI <y_1(16), y_72(26)>
  # DEBUG y => y_162
  # DEBUG D#196 => frame_22(D)->plane[0]
  _68 = stride_24 * y_162;
  _69 = (sizetype) _68;
  _70 = _69 + 18446744073709551584;
  # DEBUG ref => D#196 + _70
  y_72 = y_162 + 1;
  _73 = stride_24 * y_72;
  _74 = (long unsigned int) _73;
  _75 = _74 * 2;
  _76 = _75 + 18446744073709551554;
  line_77 = pretmp_220 + _76;
  # DEBUG line => line_77
  *line_77 = 0;
  # DEBUG v => 0
  # DEBUG x => 1
  # DEBUG v => 0
  # DEBUG x => 1
  if (pretmp_226 > 1)
    goto <bb 19>;
  else
    goto <bb 18>;

  <bb 18>:
  # DEBUG D#197 => line_77 + pretmp_225
  # DEBUG line => D#197
  if (y_162 >= -23)
    goto <bb 27>;
  else
    goto <bb 24>;

  <bb 19>:

  <bb 20>:
  # x_159 = PHI <1(19), x_98(22)>
  # v_164 = PHI <0(19), v_96(22)>
  # DEBUG v => v_164
  # DEBUG x => x_159
  _80 = (long unsigned int) x_159;
  _81 = _80 * 2;
  _82 = line_77 + _81;
  _38 = _70 + _80;
  _83 = pretmp_216 + _38;
  _84 = *_83;
  _85 = (short unsigned int) _84;
  _86 = x_159 - stride_24;
  _87 = (long unsigned int) _86;
  _88 = _87 * 2;
  _89 = line_77 + _88;
  _90 = *_89;
  _91 = _85 + _90;
  _92 = _88 + 18446744073709551614;
  _93 = line_77 + _92;
  _94 = *_93;
  _95 = _91 - _94;
  v_96 = _95 + v_164;
  # DEBUG v => v_96
  *_82 = v_96;
  x_98 = x_159 + 1;
  # DEBUG x => x_98
  # DEBUG v => v_96
  # DEBUG x => x_98
  if (x_98 < pretmp_226)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  goto <bb 18>;

  <bb 22>:
  goto <bb 20>;

  <bb 23>:

  <bb 24>:
  # DEBUG y => y_72
  if (height_2 > y_72)
    goto <bb 26>;
  else
    goto <bb 25>;

  <bb 25>:
  goto <bb 5>;

  <bb 26>:
  goto <bb 17>;

  <bb 27>:
  line_103 = line_77 + pretmp_225;
  _104 = frame_22(D)->i_lines[0];
  _105 = _104 + 64;
  _106 = stride_24 * _105;
  _107 = (long unsigned int) _106;
  _108 = _107 * 2;
  sum4_109 = line_103 + _108;
  # DEBUG sum4 => sum4_109
  # DEBUG x => 1
  # DEBUG sum4 => sum4_109
  # DEBUG line => D#197
  # DEBUG x => 1
  _161 = stride_24 + -8;
  if (_161 > 1)
    goto <bb 28>;
  else
    goto <bb 24>;

  <bb 28>:

  <bb 29>:
  # x_153 = PHI <1(28), x_141(30)>
  # line_163 = PHI <line_103(28), line_142(30)>
  # sum4_165 = PHI <sum4_109(28), sum4_143(30)>
  # DEBUG sum4 => sum4_165
  # DEBUG line => line_163
  # DEBUG x => x_153
  _115 = line_163 + pretmp_230;
  _116 = *_115;
  _117 = MEM[(uint16_t *)line_163 + 8B];
  _118 = _116 - _117;
  _122 = line_163 + pretmp_233;
  _123 = *_122;
  _124 = _118 - _123;
  _125 = *line_163;
  _126 = _124 + _125;
  *sum4_165 = _126;
  _128 = *line_163;
  _132 = line_163 + pretmp_236;
  _133 = *_132;
  _134 = MEM[(uint16_t *)line_163 + 16B];
  _135 = _133 - _134;
  _136 = line_163 + pretmp_224;
  _137 = *_136;
  _138 = _135 - _137;
  _139 = _128 + _138;
  *line_163 = _139;
  x_141 = x_153 + 1;
  # DEBUG x => x_141
  line_142 = line_163 + 2;
  # DEBUG line => line_142
  sum4_143 = sum4_165 + 2;
  # DEBUG sum4 => sum4_143
  # DEBUG sum4 => sum4_143
  # DEBUG line => line_142
  # DEBUG x => x_141
  if (x_141 < _161)
    goto <bb 30>;
  else
    goto <bb 23>;

  <bb 30>:
  goto <bb 29>;

}


