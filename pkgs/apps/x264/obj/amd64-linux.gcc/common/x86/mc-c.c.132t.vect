
;; Function x264_hpel_filter_sse2_misalign (x264_hpel_filter_sse2_misalign, funcdef_no=124, decl_uid=6527, cgraph_uid=124, symbol_order=175)


Analyzing loop at common/x86/mc-c.c:232
common/x86/mc-c.c:232:1: note: ===== analyze_loop_nest =====
common/x86/mc-c.c:232:1: note: === vect_analyze_loop_form ===
split exit edge.
common/x86/mc-c.c:232:1: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [height_29(D) + -1, + , -1](no_overflow) != 0
  bounds on difference of bases: -2147483646 ... 2147483648
Applying pattern match.pd:49, generic-match.c:4249
  result:
    # of iterations (unsigned int) (height_29(D) + -1), bounded by 4294967295
Applying pattern match.pd:49, generic-match.c:3223
common/x86/mc-c.c:232:1: note: Symbolic number of iterations is (unsigned int) height_29(D)
common/x86/mc-c.c:232:1: note: === vect_analyze_data_refs ===
common/x86/mc-c.c:232:1: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/x86/mc-c.c:232:1: note: bad data references.
common/x86/mc-c.c:232:1: note: vectorized 0 loops in function.
x264_hpel_filter_sse2_misalign (uint8_t * dsth, uint8_t * dstv, uint8_t * dstc, uint8_t * src, int stride, int width, int height)
{
  int realign;
  int16_t * buf;
  int16_t * pretmp_1;
  sizetype pretmp_2;
  long int src.0_8;
  int _9;
  sizetype _11;
  sizetype _12;
  int _22;
  unsigned int _23;
  unsigned int _24;
  int _25;

  <bb 2>:
  src.0_8 = (long int) src_7(D);
  _9 = (int) src.0_8;
  realign_10 = _9 & 15;
  # DEBUG realign => realign_10
  _11 = (sizetype) realign_10;
  _12 = -_11;
  src_13 = src_7(D) + _12;
  # DEBUG src => src_13
  dstv_15 = dstv_14(D) + _12;
  # DEBUG dstv => dstv_15
  dstc_17 = dstc_16(D) + _12;
  # DEBUG dstc => dstc_17
  dsth_19 = dsth_18(D) + _12;
  # DEBUG dsth => dsth_19
  width_21 = realign_10 + width_20(D);
  # DEBUG width => width_21
  _22 = width_21 + 16;
  _23 = (unsigned int) _22;
  _24 = _23 * 2;
  _25 = (int) _24;
  buf_28 = x264_malloc (_25);
  # DEBUG buf => buf_28
  # DEBUG height => height_29(D)
  # DEBUG src => src_13
  # DEBUG dstc => dstc_17
  # DEBUG dstv => dstv_15
  # DEBUG dsth => dsth_19
  height_49 = height_29(D) + -1;
  # DEBUG height => height_49
  if (height_29(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  x264_sfence ();
  x264_free (buf_28);
  return;

  <bb 4>:
  pretmp_1 = buf_28 + 16;
  pretmp_2 = (sizetype) stride_32(D);

  <bb 5>:
  # dsth_50 = PHI <dsth_19(4), dsth_37(6)>
  # dstv_51 = PHI <dstv_15(4), dstv_38(6)>
  # dstc_52 = PHI <dstc_17(4), dstc_39(6)>
  # src_53 = PHI <src_13(4), src_40(6)>
  # height_56 = PHI <height_49(4), height_30(6)>
  # DEBUG src => src_53
  # DEBUG dstc => dstc_52
  # DEBUG dstv => dstv_51
  # DEBUG dsth => dsth_50
  # DEBUG height => height_56
  x264_hpel_filter_v_sse2 (dstv_51, src_53, pretmp_1, stride_32(D), width_21);
  x264_hpel_filter_c_sse2_misalign (dstc_52, pretmp_1, width_21);
  x264_hpel_filter_h_sse2 (dsth_50, src_53, width_21);
  dsth_37 = dsth_50 + pretmp_2;
  # DEBUG dsth => dsth_37
  dstv_38 = dstv_51 + pretmp_2;
  # DEBUG dstv => dstv_38
  dstc_39 = dstc_52 + pretmp_2;
  # DEBUG dstc => dstc_39
  src_40 = src_53 + pretmp_2;
  # DEBUG src => src_40
  # DEBUG height => height_56
  # DEBUG src => src_40
  # DEBUG dstc => dstc_39
  # DEBUG dstv => dstv_38
  # DEBUG dsth => dsth_37
  height_30 = height_56 + -1;
  # DEBUG height => height_30
  if (height_56 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 3>;

  <bb 6>:
  goto <bb 5>;

}



;; Function x264_hpel_filter_sse2_amd (x264_hpel_filter_sse2_amd, funcdef_no=123, decl_uid=6481, cgraph_uid=123, symbol_order=174)


Analyzing loop at common/x86/mc-c.c:224
common/x86/mc-c.c:224:1: note: ===== analyze_loop_nest =====
common/x86/mc-c.c:224:1: note: === vect_analyze_loop_form ===
split exit edge.
common/x86/mc-c.c:224:1: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [height_29(D) + -1, + , -1](no_overflow) != 0
  bounds on difference of bases: -2147483646 ... 2147483648
Applying pattern match.pd:49, generic-match.c:4249
  result:
    # of iterations (unsigned int) (height_29(D) + -1), bounded by 4294967295
Applying pattern match.pd:49, generic-match.c:3223
common/x86/mc-c.c:224:1: note: Symbolic number of iterations is (unsigned int) height_29(D)
common/x86/mc-c.c:224:1: note: === vect_analyze_data_refs ===
common/x86/mc-c.c:224:1: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/x86/mc-c.c:224:1: note: bad data references.
common/x86/mc-c.c:224:1: note: vectorized 0 loops in function.
x264_hpel_filter_sse2_amd (uint8_t * dsth, uint8_t * dstv, uint8_t * dstc, uint8_t * src, int stride, int width, int height)
{
  int realign;
  int16_t * buf;
  int16_t * pretmp_1;
  sizetype pretmp_2;
  long int src.2_8;
  int _9;
  sizetype _11;
  sizetype _12;
  int _22;
  unsigned int _23;
  unsigned int _24;
  int _25;

  <bb 2>:
  src.2_8 = (long int) src_7(D);
  _9 = (int) src.2_8;
  realign_10 = _9 & 15;
  # DEBUG realign => realign_10
  _11 = (sizetype) realign_10;
  _12 = -_11;
  src_13 = src_7(D) + _12;
  # DEBUG src => src_13
  dstv_15 = dstv_14(D) + _12;
  # DEBUG dstv => dstv_15
  dstc_17 = dstc_16(D) + _12;
  # DEBUG dstc => dstc_17
  dsth_19 = dsth_18(D) + _12;
  # DEBUG dsth => dsth_19
  width_21 = realign_10 + width_20(D);
  # DEBUG width => width_21
  _22 = width_21 + 16;
  _23 = (unsigned int) _22;
  _24 = _23 * 2;
  _25 = (int) _24;
  buf_28 = x264_malloc (_25);
  # DEBUG buf => buf_28
  # DEBUG height => height_29(D)
  # DEBUG src => src_13
  # DEBUG dstc => dstc_17
  # DEBUG dstv => dstv_15
  # DEBUG dsth => dsth_19
  height_49 = height_29(D) + -1;
  # DEBUG height => height_49
  if (height_29(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  x264_sfence ();
  x264_free (buf_28);
  return;

  <bb 4>:
  pretmp_1 = buf_28 + 16;
  pretmp_2 = (sizetype) stride_32(D);

  <bb 5>:
  # dsth_50 = PHI <dsth_19(4), dsth_37(6)>
  # dstv_51 = PHI <dstv_15(4), dstv_38(6)>
  # dstc_52 = PHI <dstc_17(4), dstc_39(6)>
  # src_53 = PHI <src_13(4), src_40(6)>
  # height_56 = PHI <height_49(4), height_30(6)>
  # DEBUG src => src_53
  # DEBUG dstc => dstc_52
  # DEBUG dstv => dstv_51
  # DEBUG dsth => dsth_50
  # DEBUG height => height_56
  x264_hpel_filter_v_mmxext (dstv_51, src_53, pretmp_1, stride_32(D), width_21);
  x264_hpel_filter_c_mmxext (dstc_52, pretmp_1, width_21);
  x264_hpel_filter_h_sse2 (dsth_50, src_53, width_21);
  dsth_37 = dsth_50 + pretmp_2;
  # DEBUG dsth => dsth_37
  dstv_38 = dstv_51 + pretmp_2;
  # DEBUG dstv => dstv_38
  dstc_39 = dstc_52 + pretmp_2;
  # DEBUG dstc => dstc_39
  src_40 = src_53 + pretmp_2;
  # DEBUG src => src_40
  # DEBUG height => height_56
  # DEBUG src => src_40
  # DEBUG dstc => dstc_39
  # DEBUG dstv => dstv_38
  # DEBUG dsth => dsth_37
  height_30 = height_56 + -1;
  # DEBUG height => height_30
  if (height_56 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 3>;

  <bb 6>:
  goto <bb 5>;

}



;; Function x264_hpel_filter_mmxext (x264_hpel_filter_mmxext, funcdef_no=122, decl_uid=6451, cgraph_uid=122, symbol_order=173)


Analyzing loop at common/x86/mc-c.c:223
common/x86/mc-c.c:223:1: note: ===== analyze_loop_nest =====
common/x86/mc-c.c:223:1: note: === vect_analyze_loop_form ===
split exit edge.
common/x86/mc-c.c:223:1: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [height_29(D) + -1, + , -1](no_overflow) != 0
  bounds on difference of bases: -2147483646 ... 2147483648
Applying pattern match.pd:49, generic-match.c:4249
  result:
    # of iterations (unsigned int) (height_29(D) + -1), bounded by 4294967295
Applying pattern match.pd:49, generic-match.c:3223
common/x86/mc-c.c:223:1: note: Symbolic number of iterations is (unsigned int) height_29(D)
common/x86/mc-c.c:223:1: note: === vect_analyze_data_refs ===
common/x86/mc-c.c:223:1: note: not vectorized: loop contains function calls or data references that cannot be analyzed
common/x86/mc-c.c:223:1: note: bad data references.
common/x86/mc-c.c:223:1: note: vectorized 0 loops in function.
x264_hpel_filter_mmxext (uint8_t * dsth, uint8_t * dstv, uint8_t * dstc, uint8_t * src, int stride, int width, int height)
{
  int realign;
  int16_t * buf;
  int16_t * pretmp_1;
  sizetype pretmp_2;
  long int src.4_8;
  int _9;
  sizetype _11;
  sizetype _12;
  int _22;
  unsigned int _23;
  unsigned int _24;
  int _25;

  <bb 2>:
  src.4_8 = (long int) src_7(D);
  _9 = (int) src.4_8;
  realign_10 = _9 & 7;
  # DEBUG realign => realign_10
  _11 = (sizetype) realign_10;
  _12 = -_11;
  src_13 = src_7(D) + _12;
  # DEBUG src => src_13
  dstv_15 = dstv_14(D) + _12;
  # DEBUG dstv => dstv_15
  dstc_17 = dstc_16(D) + _12;
  # DEBUG dstc => dstc_17
  dsth_19 = dsth_18(D) + _12;
  # DEBUG dsth => dsth_19
  width_21 = realign_10 + width_20(D);
  # DEBUG width => width_21
  _22 = width_21 + 16;
  _23 = (unsigned int) _22;
  _24 = _23 * 2;
  _25 = (int) _24;
  buf_28 = x264_malloc (_25);
  # DEBUG buf => buf_28
  # DEBUG height => height_29(D)
  # DEBUG src => src_13
  # DEBUG dstc => dstc_17
  # DEBUG dstv => dstv_15
  # DEBUG dsth => dsth_19
  height_49 = height_29(D) + -1;
  # DEBUG height => height_49
  if (height_29(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  x264_sfence ();
  x264_free (buf_28);
  return;

  <bb 4>:
  pretmp_1 = buf_28 + 16;
  pretmp_2 = (sizetype) stride_32(D);

  <bb 5>:
  # dsth_50 = PHI <dsth_19(4), dsth_37(6)>
  # dstv_51 = PHI <dstv_15(4), dstv_38(6)>
  # dstc_52 = PHI <dstc_17(4), dstc_39(6)>
  # src_53 = PHI <src_13(4), src_40(6)>
  # height_56 = PHI <height_49(4), height_30(6)>
  # DEBUG src => src_53
  # DEBUG dstc => dstc_52
  # DEBUG dstv => dstv_51
  # DEBUG dsth => dsth_50
  # DEBUG height => height_56
  x264_hpel_filter_v_mmxext (dstv_51, src_53, pretmp_1, stride_32(D), width_21);
  x264_hpel_filter_c_mmxext (dstc_52, pretmp_1, width_21);
  x264_hpel_filter_h_mmxext (dsth_50, src_53, width_21);
  dsth_37 = dsth_50 + pretmp_2;
  # DEBUG dsth => dsth_37
  dstv_38 = dstv_51 + pretmp_2;
  # DEBUG dstv => dstv_38
  dstc_39 = dstc_52 + pretmp_2;
  # DEBUG dstc => dstc_39
  src_40 = src_53 + pretmp_2;
  # DEBUG src => src_40
  # DEBUG height => height_56
  # DEBUG src => src_40
  # DEBUG dstc => dstc_39
  # DEBUG dstv => dstv_38
  # DEBUG dsth => dsth_37
  height_30 = height_56 + -1;
  # DEBUG height => height_30
  if (height_56 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 3>;

  <bb 6>:
  goto <bb 5>;

}


